[
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-testcontainers/src/test/java/org/springframework/ai/testcontainers/service/connection/chroma/ChromaContainerConnectionDetailsFactoryTest.java",
        "class_names": [
            "Config",
            "ChromaContainerConnectionDetailsFactoryTest"
        ],
        "imports": "import java.util.List;\nimport org.springframework.ai.vectorstore.SearchRequest;\nimport org.springframework.boot.autoconfigure.ImportAutoConfiguration;\nimport org.springframework.test.context.TestPropertySource;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.testcontainers.service.connection.ServiceConnection;\nimport java.util.Map;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.ai.transformers.TransformersEmbeddingClient;\nimport org.springframework.context.annotation.Bean;\nimport org.testcontainers.chromadb.ChromaDBContainer;\nimport org.springframework.ai.embedding.EmbeddingClient;\nimport org.testcontainers.junit.jupiter.Testcontainers;\nimport org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\nimport org.springframework.ai.autoconfigure.vectorstore.chroma.ChromaVectorStoreAutoConfiguration;\nimport org.springframework.ai.document.Document;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.vectorstore.VectorStore;\nimport org.testcontainers.junit.jupiter.Container;",
        "package_import_paths": {
            "org.springframework.ai.testcontainers.service.connection.chroma.ChromaContainerConnectionDetailsFactoryTest": "org.springframework.ai.testcontainers.service.connection.chroma.ChromaContainerConnectionDetailsFactoryTest",
            "org.springframework.ai.testcontainers.service.connection.chroma.Confi": "org.springframework.ai.testcontainers.service.connection.chroma.Confi",
            "org.springframework.ai.testcontainers.service.connection.chroma.addAndSearchWithFilters": "org.springframework.ai.testcontainers.service.connection.chroma.addAndSearchWithFilters",
            "org.springframework.ai.testcontainers.service.connection.chroma.embeddingClient": "org.springframework.ai.testcontainers.service.connection.chroma.embeddingClient",
            "org.springframework.ai.testcontainers.service.connection.chroma.stati": "org.springframework.ai.testcontainers.service.connection.chroma.stati",
            "org.springframework.ai.testcontainers.service.connection.chroma.privat": "org.springframework.ai.testcontainers.service.connection.chroma.privat"
        },
        "package": "package org.springframework.ai.testcontainers.service.connection.chroma;",
        "property_declarations": [
            "@Container\n\t@ServiceConnection\n\tstatic ChromaDBContainer chroma = new ChromaDBContainer(\"ghcr.io/chroma-core/chroma:0.4.15\");",
            "@Autowired\n\tprivate VectorStore vectorStore;"
        ],
        "functions": [
            {
                "name": "addAndSearchWithFilters",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var bgDocument = new Document(\"The World is Big and Salvation Lurks Around the Corner\",\n\t\t\t\tMap.of(\"country\", \"Bulgaria\"));\n\t\tvar nlDocument = new Document(\"The World is Big and Salvation Lurks Around the Corner\",\n\t\t\t\tMap.of(\"country\", \"Netherlands\"));\n\n\t\tvectorStore.add(List.of(bgDocument, nlDocument));\n\n\t\tvar request = SearchRequest.query(\"The World\").withTopK(5);\n\n\t\tList<Document> results = vectorStore.similaritySearch(request);\n\t\tassertThat(results).hasSize(2);\n\n\t\tresults = vectorStore\n\t\t\t.similaritySearch(request.withSimilarityThresholdAll().withFilterExpression(\"country == 'Bulgaria'\"));\n\t\tassertThat(results).hasSize(1);\n\t\tassertThat(results.get(0).getId()).isEqualTo(bgDocument.getId());\n\n\t\tresults = vectorStore\n\t\t\t.similaritySearch(request.withSimilarityThresholdAll().withFilterExpression(\"country == 'Netherlands'\"));\n\t\tassertThat(results).hasSize(1);\n\t\tassertThat(results.get(0).getId()).isEqualTo(nlDocument.getId());\n\n\t\t// Remove all documents from the store\n\t\tvectorStore.delete(List.of(bgDocument, nlDocument).stream().map(doc -> doc.getId()).toList());",
                "is_abstract": "",
                "class_name": "ChromaContainerConnectionDetailsFactoryTest",
                "annotations": [
                    "@Configuration(proxyBeanMethods = false)",
                    "@ImportAutoConfiguration(ChromaVectorStoreAutoConfiguration.class)"
                ]
            },
            {
                "name": "embeddingClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new TransformersEmbeddingClient();",
                "is_abstract": "",
                "class_name": "ChromaContainerConnectionDetailsFactoryTest Config",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-testcontainers/src/test/java/org/springframework/ai/testcontainers/service/connection/redis/RedisContainerConnectionDetailsFactoryTest.java",
        "class_names": [
            "Config",
            "RedisContainerConnectionDetailsFactoryTest"
        ],
        "imports": "import java.util.List;\nimport org.springframework.ai.autoconfigure.vectorstore.redis.RedisVectorStoreAutoConfiguration;\nimport org.springframework.ai.vectorstore.SearchRequest;\nimport org.springframework.boot.autoconfigure.ImportAutoConfiguration;\nimport org.springframework.test.context.TestPropertySource;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.testcontainers.service.connection.ServiceConnection;\nimport java.util.Map;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.ai.transformers.TransformersEmbeddingClient;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.ai.embedding.EmbeddingClient;\nimport org.testcontainers.junit.jupiter.Testcontainers;\nimport org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\nimport com.redis.testcontainers.RedisStackContainer;\nimport org.springframework.ai.document.Document;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.vectorstore.VectorStore;\nimport org.testcontainers.junit.jupiter.Container;\nimport org.springframework.ai.ResourceUtils;",
        "package_import_paths": {
            "org.springframework.ai.testcontainers.service.connection.redis.RedisContainerConnectionDetailsFactoryTest": "org.springframework.ai.testcontainers.service.connection.redis.RedisContainerConnectionDetailsFactoryTest",
            "org.springframework.ai.testcontainers.service.connection.redis.Confi": "org.springframework.ai.testcontainers.service.connection.redis.Confi",
            "org.springframework.ai.testcontainers.service.connection.redis.addAndSearch": "org.springframework.ai.testcontainers.service.connection.redis.addAndSearch",
            "org.springframework.ai.testcontainers.service.connection.redis.embeddingClient": "org.springframework.ai.testcontainers.service.connection.redis.embeddingClient",
            "org.springframework.ai.testcontainers.service.connection.redis.stati": "org.springframework.ai.testcontainers.service.connection.redis.stati",
            "org.springframework.ai.testcontainers.service.connection.redis.documents": "org.springframework.ai.testcontainers.service.connection.redis.documents",
            "org.springframework.ai.testcontainers.service.connection.redis.privat": "org.springframework.ai.testcontainers.service.connection.redis.privat"
        },
        "package": "package org.springframework.ai.testcontainers.service.connection.redis;",
        "property_declarations": [
            "@Container\n\t@ServiceConnection\n\tstatic RedisStackContainer redisContainer = new RedisStackContainer(\n\t\t\tRedisStackContainer.DEFAULT_IMAGE_NAME.withTag(RedisStackContainer.DEFAULT_TAG));",
            "private List<Document> documents = List.of(\n\t\t\tnew Document(ResourceUtils.getText(\"classpath:/test/data/spring.ai.txt\"), Map.of(\"spring\", \"great\")),\n\t\t\tnew Document(ResourceUtils.getText(\"classpath:/test/data/time.shelter.txt\")), new Document(\n\t\t\t\t\tResourceUtils.getText(\"classpath:/test/data/great.depression.txt\"), Map.of(\"depression\", \"bad\")));",
            "@Autowired\n\tprivate VectorStore vectorStore;"
        ],
        "functions": [
            {
                "name": "addAndSearch",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "vectorStore.add(documents);\n\n\t\tList<Document> results = vectorStore.similaritySearch(SearchRequest.query(\"Spring\").withTopK(1));\n\n\t\tassertThat(results).hasSize(1);\n\t\tDocument resultDoc = results.get(0);\n\t\tassertThat(resultDoc.getId()).isEqualTo(documents.get(0).getId());\n\t\tassertThat(resultDoc.getContent())\n\t\t\t.contains(\"Spring AI provides abstractions that serve as the foundation for developing AI applications.\");\n\n\t\t// Remove all documents from the store\n\t\tvectorStore.delete(documents.stream().map(doc -> doc.getId()).toList());\n\n\t\tresults = vectorStore.similaritySearch(SearchRequest.query(\"Spring\").withTopK(1));\n\t\tassertThat(results).isEmpty();",
                "is_abstract": "",
                "class_name": "RedisContainerConnectionDetailsFactoryTest",
                "annotations": [
                    "@Configuration(proxyBeanMethods = false)",
                    "@ImportAutoConfiguration(RedisVectorStoreAutoConfiguration.class)"
                ]
            },
            {
                "name": "embeddingClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new TransformersEmbeddingClient();",
                "is_abstract": "",
                "class_name": "RedisContainerConnectionDetailsFactoryTest Config",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-testcontainers/src/test/java/org/springframework/ai/testcontainers/service/connection/qdrant/QdrantContainerConnectionDetailsFactoryTest.java",
        "class_names": [
            "Config",
            "QdrantContainerConnectionDetailsFactoryTest"
        ],
        "imports": "import org.testcontainers.qdrant.QdrantContainer;\nimport java.util.List;\nimport org.springframework.ai.vectorstore.SearchRequest;\nimport org.springframework.boot.autoconfigure.ImportAutoConfiguration;\nimport org.springframework.test.context.TestPropertySource;\nimport java.io.IOException;\nimport org.springframework.ai.autoconfigure.vectorstore.qdrant.QdrantVectorStoreAutoConfiguration;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.testcontainers.service.connection.ServiceConnection;\nimport java.util.Map;\nimport org.springframework.context.annotation.Configuration;\nimport java.nio.charset.StandardCharsets;\nimport org.springframework.ai.transformers.TransformersEmbeddingClient;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.core.io.DefaultResourceLoader;\nimport org.springframework.ai.embedding.EmbeddingClient;\nimport org.testcontainers.junit.jupiter.Testcontainers;\nimport org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\nimport org.springframework.ai.document.Document;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.vectorstore.VectorStore;\nimport org.testcontainers.junit.jupiter.Container;",
        "package_import_paths": {
            "org.springframework.ai.testcontainers.service.connection.qdrant.QdrantContainerConnectionDetailsFactoryTest": "org.springframework.ai.testcontainers.service.connection.qdrant.QdrantContainerConnectionDetailsFactoryTest",
            "org.springframework.ai.testcontainers.service.connection.qdrant.Confi": "org.springframework.ai.testcontainers.service.connection.qdrant.Confi",
            "org.springframework.ai.testcontainers.service.connection.qdrant.addAndSearch": "org.springframework.ai.testcontainers.service.connection.qdrant.addAndSearch",
            "org.springframework.ai.testcontainers.service.connection.qdrant.getText": "org.springframework.ai.testcontainers.service.connection.qdrant.getText",
            "org.springframework.ai.testcontainers.service.connection.qdrant.embeddingClient": "org.springframework.ai.testcontainers.service.connection.qdrant.embeddingClient",
            "org.springframework.ai.testcontainers.service.connection.qdrant.stati": "org.springframework.ai.testcontainers.service.connection.qdrant.stati",
            "org.springframework.ai.testcontainers.service.connection.qdrant.documents": "org.springframework.ai.testcontainers.service.connection.qdrant.documents",
            "org.springframework.ai.testcontainers.service.connection.qdrant.privat": "org.springframework.ai.testcontainers.service.connection.qdrant.privat"
        },
        "package": "package org.springframework.ai.testcontainers.service.connection.qdrant;",
        "property_declarations": [
            "@Autowired\n\tprivate VectorStore vectorStore;",
            "List<Document> documents = List.of(\n\t\t\tnew Document(getText(\"classpath:/test/data/spring.ai.txt\"), Map.of(\"spring\", \"great\")),\n\t\t\tnew Document(getText(\"classpath:/test/data/time.shelter.txt\")),\n\t\t\tnew Document(getText(\"classpath:/test/data/great.depression.txt\"), Map.of(\"depression\", \"bad\")));",
            "@Container\n\t@ServiceConnection\n\tstatic QdrantContainer qdrantContainer = new QdrantContainer(\"qdrant/qdrant:v1.7.4\");"
        ],
        "functions": [
            {
                "name": "addAndSearch",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "vectorStore.add(documents);\n\n\t\tList<Document> results = vectorStore\n\t\t\t.similaritySearch(SearchRequest.query(\"What is Great Depression?\").withTopK(1));\n\n\t\tassertThat(results).hasSize(1);\n\t\tDocument resultDoc = results.get(0);\n\t\tassertThat(resultDoc.getId()).isEqualTo(documents.get(2).getId());\n\t\tassertThat(resultDoc.getMetadata()).containsKeys(\"depression\", \"distance\");\n\n\t\t// Remove all documents from the store\n\t\tvectorStore.delete(documents.stream().map(doc -> doc.getId()).toList());\n\t\tresults = vectorStore.similaritySearch(SearchRequest.query(\"Great Depression\").withTopK(1));\n\t\tassertThat(results).hasSize(0);",
                "is_abstract": "",
                "class_name": "QdrantContainerConnectionDetailsFactoryTest",
                "annotations": []
            },
            {
                "name": "getText",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var resource = new DefaultResourceLoader().getResource(uri);\n\t\ttry {\n\t\t\treturn resource.getContentAsString(StandardCharsets.UTF_8);\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}",
                "is_abstract": "",
                "class_name": "QdrantContainerConnectionDetailsFactoryTest",
                "annotations": [
                    "@Configuration(proxyBeanMethods = false)",
                    "@ImportAutoConfiguration(QdrantVectorStoreAutoConfiguration.class)"
                ]
            },
            {
                "name": "embeddingClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new TransformersEmbeddingClient();",
                "is_abstract": "",
                "class_name": "QdrantContainerConnectionDetailsFactoryTest Config",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-testcontainers/src/test/java/org/springframework/ai/testcontainers/service/connection/ollama/OllamaContainerConnectionDetailsFactoryTest.java",
        "class_names": [
            "Config",
            "OllamaContainerConnectionDetailsFactoryTest"
        ],
        "imports": "import java.util.List;\nimport org.springframework.boot.autoconfigure.ImportAutoConfiguration;\nimport org.springframework.test.context.TestPropertySource;\nimport org.testcontainers.ollama.OllamaContainer;\nimport org.springframework.ai.ollama.OllamaEmbeddingClient;\nimport java.io.IOException;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.apache.commons.logging.LogFactory;\nimport org.springframework.boot.testcontainers.service.connection.ServiceConnection;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.ai.embedding.EmbeddingResponse;\nimport org.springframework.boot.autoconfigure.web.client.RestClientAutoConfiguration;\nimport org.apache.commons.logging.Log;\nimport org.springframework.ai.autoconfigure.ollama.OllamaAutoConfiguration;\nimport org.testcontainers.junit.jupiter.Testcontainers;\nimport org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\nimport org.junit.jupiter.api.Test;\nimport org.testcontainers.junit.jupiter.Container;",
        "package_import_paths": {
            "org.springframework.ai.testcontainers.service.connection.ollama.OllamaContainerConnectionDetailsFactoryTest": "org.springframework.ai.testcontainers.service.connection.ollama.OllamaContainerConnectionDetailsFactoryTest",
            "org.springframework.ai.testcontainers.service.connection.ollama.Confi": "org.springframework.ai.testcontainers.service.connection.ollama.Confi",
            "org.springframework.ai.testcontainers.service.connection.ollama.beforeAll": "org.springframework.ai.testcontainers.service.connection.ollama.beforeAll",
            "org.springframework.ai.testcontainers.service.connection.ollama.singleTextEmbeddin": "org.springframework.ai.testcontainers.service.connection.ollama.singleTextEmbeddin",
            "org.springframework.ai.testcontainers.service.connection.ollama.logger": "org.springframework.ai.testcontainers.service.connection.ollama.logger",
            "org.springframework.ai.testcontainers.service.connection.ollama.MODEL_NAME": "org.springframework.ai.testcontainers.service.connection.ollama.MODEL_NAME",
            "org.springframework.ai.testcontainers.service.connection.ollama.stati": "org.springframework.ai.testcontainers.service.connection.ollama.stati",
            "org.springframework.ai.testcontainers.service.connection.ollama.privat": "org.springframework.ai.testcontainers.service.connection.ollama.privat"
        },
        "package": "package org.springframework.ai.testcontainers.service.connection.ollama;",
        "property_declarations": [
            "@Container\n\t@ServiceConnection\n\tstatic OllamaContainer ollama = new OllamaContainer(\"ollama/ollama:0.1.29\");",
            "@Autowired\n\tprivate OllamaEmbeddingClient embeddingClient;",
            "static final String MODEL_NAME = \"orca-mini\";",
            "private static final Log logger = LogFactory.getLog(OllamaContainerConnectionDetailsFactoryTest.class);"
        ],
        "functions": [
            {
                "name": "beforeAll",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "logger.info(\"Start pulling the '\" + MODEL_NAME + \" ' generative ... would take several minutes ...\");\n\t\tollama.execInContainer(\"ollama\", \"pull\", MODEL_NAME);\n\t\tlogger.info(MODEL_NAME + \" pulling competed!\");",
                "is_abstract": "",
                "class_name": "OllamaContainerConnectionDetailsFactoryTest",
                "annotations": []
            },
            {
                "name": "singleTextEmbedding",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "EmbeddingResponse embeddingResponse = this.embeddingClient.embedForResponse(List.of(\"Hello World\"));\n\t\tassertThat(embeddingResponse.getResults()).hasSize(1);\n\t\tassertThat(embeddingResponse.getResults().get(0).getOutput()).isNotEmpty();\n\t\tassertThat(this.embeddingClient.dimensions()).isEqualTo(3200);",
                "is_abstract": "",
                "class_name": "OllamaContainerConnectionDetailsFactoryTest",
                "annotations": [
                    "@Configuration(proxyBeanMethods = false)",
                    "@ImportAutoConfiguration({ RestClientAutoConfiguration.class, OllamaAutoConfiguration.class })"
                ]
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-testcontainers/src/test/java/org/springframework/ai/testcontainers/service/connection/weaviate/WeaviateContainerConnectionDetailsFactoryTest.java",
        "class_names": [
            "Config",
            "WeaviateContainerConnectionDetailsFactoryTest"
        ],
        "imports": "import java.util.List;\nimport org.springframework.ai.vectorstore.SearchRequest;\nimport org.springframework.boot.autoconfigure.ImportAutoConfiguration;\nimport org.springframework.test.context.TestPropertySource;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.testcontainers.service.connection.ServiceConnection;\nimport java.util.Map;\nimport org.springframework.ai.autoconfigure.vectorstore.weaviate.WeaviateVectorStoreProperties;\nimport org.springframework.ai.vectorstore.WeaviateVectorStore;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.ai.autoconfigure.vectorstore.weaviate.WeaviateVectorStoreAutoConfiguration;\nimport org.springframework.ai.transformers.TransformersEmbeddingClient;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.ai.embedding.EmbeddingClient;\nimport org.testcontainers.junit.jupiter.Testcontainers;\nimport org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\nimport org.springframework.ai.document.Document;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.vectorstore.VectorStore;\nimport org.testcontainers.junit.jupiter.Container;\nimport org.testcontainers.weaviate.WeaviateContainer;",
        "package_import_paths": {
            "org.springframework.ai.testcontainers.service.connection.weaviate.WeaviateContainerConnectionDetailsFactoryTest": "org.springframework.ai.testcontainers.service.connection.weaviate.WeaviateContainerConnectionDetailsFactoryTest",
            "org.springframework.ai.testcontainers.service.connection.weaviate.Confi": "org.springframework.ai.testcontainers.service.connection.weaviate.Confi",
            "org.springframework.ai.testcontainers.service.connection.weaviate.addAndSearchWithFilters": "org.springframework.ai.testcontainers.service.connection.weaviate.addAndSearchWithFilters",
            "org.springframework.ai.testcontainers.service.connection.weaviate.embeddingClient": "org.springframework.ai.testcontainers.service.connection.weaviate.embeddingClient",
            "org.springframework.ai.testcontainers.service.connection.weaviate.stati": "org.springframework.ai.testcontainers.service.connection.weaviate.stati",
            "org.springframework.ai.testcontainers.service.connection.weaviate.privat": "org.springframework.ai.testcontainers.service.connection.weaviate.privat"
        },
        "package": "package org.springframework.ai.testcontainers.service.connection.weaviate;",
        "property_declarations": [
            "@Autowired\n\tprivate WeaviateVectorStoreProperties properties;",
            "@Autowired\n\tprivate VectorStore vectorStore;",
            "@Container\n\t@ServiceConnection\n\tstatic WeaviateContainer weaviateContainer = new WeaviateContainer(\"semitechnologies/weaviate:1.22.4\");"
        ],
        "functions": [
            {
                "name": "addAndSearchWithFilters",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "assertThat(properties.getFilterField()).hasSize(4);\n\n\t\tassertThat(properties.getFilterField().get(\"country\"))\n\t\t\t.isEqualTo(WeaviateVectorStore.WeaviateVectorStoreConfig.MetadataField.Type.TEXT);\n\t\tassertThat(properties.getFilterField().get(\"year\"))\n\t\t\t.isEqualTo(WeaviateVectorStore.WeaviateVectorStoreConfig.MetadataField.Type.NUMBER);\n\t\tassertThat(properties.getFilterField().get(\"active\"))\n\t\t\t.isEqualTo(WeaviateVectorStore.WeaviateVectorStoreConfig.MetadataField.Type.BOOLEAN);\n\t\tassertThat(properties.getFilterField().get(\"price\"))\n\t\t\t.isEqualTo(WeaviateVectorStore.WeaviateVectorStoreConfig.MetadataField.Type.NUMBER);\n\n\t\tvar bgDocument = new Document(\"The World is Big and Salvation Lurks Around the Corner\",\n\t\t\t\tMap.of(\"country\", \"Bulgaria\", \"price\", 3.14, \"active\", true, \"year\", 2020));\n\t\tvar nlDocument = new Document(\"The World is Big and Salvation Lurks Around the Corner\",\n\t\t\t\tMap.of(\"country\", \"Netherlands\", \"price\", 1.57, \"active\", false, \"year\", 2023));\n\n\t\tvectorStore.add(List.of(bgDocument, nlDocument));\n\n\t\tvar request = SearchRequest.query(\"The World\").withTopK(5);\n\n\t\tList<Document> results = vectorStore.similaritySearch(request);\n\t\tassertThat(results).hasSize(2);\n\n\t\tresults = vectorStore\n\t\t\t.similaritySearch(request.withSimilarityThresholdAll().withFilterExpression(\"country == 'Bulgaria'\"));\n\t\tassertThat(results).hasSize(1);\n\t\tassertThat(results.get(0).getId()).isEqualTo(bgDocument.getId());\n\n\t\tresults = vectorStore\n\t\t\t.similaritySearch(request.withSimilarityThresholdAll().withFilterExpression(\"country == 'Netherlands'\"));\n\t\tassertThat(results).hasSize(1);\n\t\tassertThat(results.get(0).getId()).isEqualTo(nlDocument.getId());\n\n\t\tresults = vectorStore.similaritySearch(\n\t\t\t\trequest.withSimilarityThresholdAll().withFilterExpression(\"price > 1.57 && active == true\"));\n\t\tassertThat(results).hasSize(1);\n\t\tassertThat(results.get(0).getId()).isEqualTo(bgDocument.getId());\n\n\t\tresults = vectorStore\n\t\t\t.similaritySearch(request.withSimilarityThresholdAll().withFilterExpression(\"year in [2020, 2023]\"));\n\t\tassertThat(results).hasSize(2);\n\n\t\tresults = vectorStore\n\t\t\t.similaritySearch(request.withSimilarityThresholdAll().withFilterExpression(\"year > 2020 && year <= 2023\"));\n\t\tassertThat(results).hasSize(1);\n\t\tassertThat(results.get(0).getId()).isEqualTo(nlDocument.getId());\n\n\t\t// Remove all documents from the store\n\t\tvectorStore.delete(List.of(bgDocument, nlDocument).stream().map(doc -> doc.getId()).toList());",
                "is_abstract": "",
                "class_name": "WeaviateContainerConnectionDetailsFactoryTest",
                "annotations": [
                    "@Configuration(proxyBeanMethods = false)",
                    "@ImportAutoConfiguration(WeaviateVectorStoreAutoConfiguration.class)"
                ]
            },
            {
                "name": "embeddingClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new TransformersEmbeddingClient();",
                "is_abstract": "",
                "class_name": "WeaviateContainerConnectionDetailsFactoryTest Config",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-testcontainers/src/test/java/org/springframework/ai/testcontainers/service/connection/milvus/MilvusContainerConnectionDetailsFactoryTest.java",
        "class_names": [
            "Config",
            "MilvusContainerConnectionDetailsFactoryTest"
        ],
        "imports": "import java.util.List;\nimport org.springframework.ai.vectorstore.SearchRequest;\nimport org.springframework.boot.autoconfigure.ImportAutoConfiguration;\nimport org.springframework.test.context.TestPropertySource;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.testcontainers.service.connection.ServiceConnection;\nimport java.util.Map;\nimport org.testcontainers.milvus.MilvusContainer;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.ai.transformers.TransformersEmbeddingClient;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.ai.embedding.EmbeddingClient;\nimport org.testcontainers.junit.jupiter.Testcontainers;\nimport org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\nimport org.springframework.ai.document.Document;\nimport org.springframework.ai.autoconfigure.vectorstore.milvus.MilvusVectorStoreAutoConfiguration;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.vectorstore.VectorStore;\nimport org.springframework.boot.autoconfigure.AutoConfigurations;\nimport org.testcontainers.junit.jupiter.Container;\nimport org.springframework.ai.ResourceUtils;",
        "package_import_paths": {
            "org.springframework.ai.testcontainers.service.connection.milvus.MilvusContainerConnectionDetailsFactoryTest": "org.springframework.ai.testcontainers.service.connection.milvus.MilvusContainerConnectionDetailsFactoryTest",
            "org.springframework.ai.testcontainers.service.connection.milvus.Confi": "org.springframework.ai.testcontainers.service.connection.milvus.Confi",
            "org.springframework.ai.testcontainers.service.connection.milvus.addAndSearch": "org.springframework.ai.testcontainers.service.connection.milvus.addAndSearch",
            "org.springframework.ai.testcontainers.service.connection.milvus.embeddingClient": "org.springframework.ai.testcontainers.service.connection.milvus.embeddingClient",
            "org.springframework.ai.testcontainers.service.connection.milvus.stati": "org.springframework.ai.testcontainers.service.connection.milvus.stati",
            "org.springframework.ai.testcontainers.service.connection.milvus.documents": "org.springframework.ai.testcontainers.service.connection.milvus.documents",
            "org.springframework.ai.testcontainers.service.connection.milvus.contextRunner": "org.springframework.ai.testcontainers.service.connection.milvus.contextRunner",
            "org.springframework.ai.testcontainers.service.connection.milvus.privat": "org.springframework.ai.testcontainers.service.connection.milvus.privat"
        },
        "package": "package org.springframework.ai.testcontainers.service.connection.milvus;",
        "property_declarations": [
            "List<Document> documents = List.of(\n\t\t\tnew Document(ResourceUtils.getText(\"classpath:/test/data/spring.ai.txt\"), Map.of(\"spring\", \"great\")),\n\t\t\tnew Document(ResourceUtils.getText(\"classpath:/test/data/time.shelter.txt\")), new Document(\n\t\t\t\t\tResourceUtils.getText(\"classpath:/test/data/great.depression.txt\"), Map.of(\"depression\", \"bad\")));",
            "private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t.withConfiguration(AutoConfigurations.of(MilvusVectorStoreAutoConfiguration.class))\n\t\t.withUserConfiguration(Config.class);",
            "@Autowired\n\tprivate VectorStore vectorStore;",
            "@Container\n\t@ServiceConnection\n\tstatic MilvusContainer milvusContainer = new MilvusContainer(\"milvusdb/milvus:v2.3.8\");"
        ],
        "functions": [
            {
                "name": "addAndSearch",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "vectorStore.add(documents);\n\n\t\tList<Document> results = vectorStore.similaritySearch(SearchRequest.query(\"Spring\").withTopK(1));\n\n\t\tassertThat(results).hasSize(1);\n\t\tDocument resultDoc = results.get(0);\n\t\tassertThat(resultDoc.getId()).isEqualTo(documents.get(0).getId());\n\t\tassertThat(resultDoc.getContent())\n\t\t\t.contains(\"Spring AI provides abstractions that serve as the foundation for developing AI applications.\");\n\t\tassertThat(resultDoc.getMetadata()).hasSize(2);\n\t\tassertThat(resultDoc.getMetadata()).containsKeys(\"spring\", \"distance\");\n\n\t\t// Remove all documents from the store\n\t\tvectorStore.delete(documents.stream().map(doc -> doc.getId()).toList());\n\n\t\tresults = vectorStore.similaritySearch(SearchRequest.query(\"Spring\").withTopK(1));\n\t\tassertThat(results).hasSize(0);",
                "is_abstract": "",
                "class_name": "MilvusContainerConnectionDetailsFactoryTest",
                "annotations": [
                    "@Configuration(proxyBeanMethods = false)",
                    "@ImportAutoConfiguration(MilvusVectorStoreAutoConfiguration.class)"
                ]
            },
            {
                "name": "embeddingClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new TransformersEmbeddingClient();",
                "is_abstract": "",
                "class_name": "MilvusContainerConnectionDetailsFactoryTest Config",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-testcontainers/src/main/java/org/springframework/ai/testcontainers/service/connection/chroma/ChromaContainerConnectionDetailsFactory.java",
        "class_names": [
            "ChromaDBContainerConnectionDetails",
            "ChromaContainerConnectionDetailsFactory"
        ],
        "imports": "import org.springframework.boot.testcontainers.service.connection.ContainerConnectionDetailsFactory;\nimport org.springframework.boot.testcontainers.service.connection.ContainerConnectionSource;\nimport org.testcontainers.chromadb.ChromaDBContainer;\nimport org.springframework.ai.autoconfigure.vectorstore.chroma.ChromaConnectionDetails;",
        "package_import_paths": {
            "org.springframework.ai.testcontainers.service.connection.chroma.ChromaContainerConnectionDetailsFactory": "org.springframework.ai.testcontainers.service.connection.chroma.ChromaContainerConnectionDetailsFactory",
            "org.springframework.ai.testcontainers.service.connection.chroma.ChromaDBContainerConnectionDetails": "org.springframework.ai.testcontainers.service.connection.chroma.ChromaDBContainerConnectionDetails",
            "org.springframework.ai.testcontainers.service.connection.chroma.getContainerConnectionDetails": "org.springframework.ai.testcontainers.service.connection.chroma.getContainerConnectionDetails",
            "org.springframework.ai.testcontainers.service.connection.chroma.getHost": "org.springframework.ai.testcontainers.service.connection.chroma.getHost",
            "org.springframework.ai.testcontainers.service.connection.chroma.getPort": "org.springframework.ai.testcontainers.service.connection.chroma.getPort"
        },
        "package": "package org.springframework.ai.testcontainers.service.connection.chroma;",
        "property_declarations": [],
        "functions": [
            {
                "name": "getContainerConnectionDetails",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new ChromaDBContainerConnectionDetails(source);",
                "is_abstract": "",
                "class_name": "ChromaContainerConnectionDetailsFactory",
                "annotations": []
            },
            {
                "name": "getHost",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return \"http://%s\".formatted(getContainer().getHost());",
                "is_abstract": "",
                "class_name": "ChromaContainerConnectionDetailsFactory ChromaDBContainerConnectionDetails",
                "annotations": []
            },
            {
                "name": "getPort",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return getContainer().getMappedPort(8000);",
                "is_abstract": "",
                "class_name": "ChromaContainerConnectionDetailsFactory ChromaDBContainerConnectionDetails",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-testcontainers/src/main/java/org/springframework/ai/testcontainers/service/connection/redis/RedisContainerConnectionDetailsFactory.java",
        "class_names": [
            "RedisContainerConnectionDetailsFactory",
            "RedisContainerConnectionDetails"
        ],
        "imports": "import org.springframework.boot.testcontainers.service.connection.ContainerConnectionDetailsFactory;\nimport org.springframework.boot.testcontainers.service.connection.ContainerConnectionSource;\nimport org.springframework.ai.autoconfigure.vectorstore.redis.RedisConnectionDetails;\nimport com.redis.testcontainers.RedisStackContainer;",
        "package_import_paths": {
            "org.springframework.ai.testcontainers.service.connection.redis.RedisContainerConnectionDetailsFactory": "org.springframework.ai.testcontainers.service.connection.redis.RedisContainerConnectionDetailsFactory",
            "org.springframework.ai.testcontainers.service.connection.redis.RedisContainerConnectionDetails": "org.springframework.ai.testcontainers.service.connection.redis.RedisContainerConnectionDetails",
            "org.springframework.ai.testcontainers.service.connection.redis.getContainerConnectionDetails": "org.springframework.ai.testcontainers.service.connection.redis.getContainerConnectionDetails",
            "org.springframework.ai.testcontainers.service.connection.redis.getUri": "org.springframework.ai.testcontainers.service.connection.redis.getUri"
        },
        "package": "package org.springframework.ai.testcontainers.service.connection.redis;",
        "property_declarations": [],
        "functions": [
            {
                "name": "getContainerConnectionDetails",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new RedisContainerConnectionDetails(source);",
                "is_abstract": "",
                "class_name": "RedisContainerConnectionDetailsFactory",
                "annotations": []
            },
            {
                "name": "getUri",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return getContainer().getRedisURI();",
                "is_abstract": "",
                "class_name": "RedisContainerConnectionDetailsFactory RedisContainerConnectionDetails",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-testcontainers/src/main/java/org/springframework/ai/testcontainers/service/connection/qdrant/QdrantContainerConnectionDetailsFactory.java",
        "class_names": [
            "QdrantContainerConnectionDetails",
            "QdrantContainerConnectionDetailsFactory"
        ],
        "imports": "import org.springframework.boot.testcontainers.service.connection.ContainerConnectionDetailsFactory;\nimport org.springframework.boot.testcontainers.service.connection.ContainerConnectionSource;\nimport org.testcontainers.qdrant.QdrantContainer;\nimport org.springframework.ai.autoconfigure.vectorstore.qdrant.QdrantConnectionDetails;",
        "package_import_paths": {
            "org.springframework.ai.testcontainers.service.connection.qdrant.QdrantContainerConnectionDetailsFactory": "org.springframework.ai.testcontainers.service.connection.qdrant.QdrantContainerConnectionDetailsFactory",
            "org.springframework.ai.testcontainers.service.connection.qdrant.QdrantContainerConnectionDetails": "org.springframework.ai.testcontainers.service.connection.qdrant.QdrantContainerConnectionDetails",
            "org.springframework.ai.testcontainers.service.connection.qdrant.getContainerConnectionDetails": "org.springframework.ai.testcontainers.service.connection.qdrant.getContainerConnectionDetails",
            "org.springframework.ai.testcontainers.service.connection.qdrant.getHost": "org.springframework.ai.testcontainers.service.connection.qdrant.getHost",
            "org.springframework.ai.testcontainers.service.connection.qdrant.getPort": "org.springframework.ai.testcontainers.service.connection.qdrant.getPort"
        },
        "package": "package org.springframework.ai.testcontainers.service.connection.qdrant;",
        "property_declarations": [],
        "functions": [
            {
                "name": "getContainerConnectionDetails",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new QdrantContainerConnectionDetails(source);",
                "is_abstract": "",
                "class_name": "QdrantContainerConnectionDetailsFactory",
                "annotations": []
            },
            {
                "name": "getHost",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return getContainer().getHost();",
                "is_abstract": "",
                "class_name": "QdrantContainerConnectionDetailsFactory QdrantContainerConnectionDetails",
                "annotations": []
            },
            {
                "name": "getPort",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return getContainer().getMappedPort(6334);",
                "is_abstract": "",
                "class_name": "QdrantContainerConnectionDetailsFactory QdrantContainerConnectionDetails",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-testcontainers/src/main/java/org/springframework/ai/testcontainers/service/connection/ollama/OllamaContainerConnectionDetailsFactory.java",
        "class_names": [
            "OllamaContainerConnectionDetailsFactory",
            "OllamaContainerConnectionDetails"
        ],
        "imports": "import org.springframework.boot.testcontainers.service.connection.ContainerConnectionDetailsFactory;\nimport org.springframework.boot.testcontainers.service.connection.ContainerConnectionSource;\nimport org.testcontainers.ollama.OllamaContainer;\nimport org.springframework.ai.autoconfigure.ollama.OllamaConnectionDetails;",
        "package_import_paths": {
            "org.springframework.ai.testcontainers.service.connection.ollama.OllamaContainerConnectionDetailsFactory": "org.springframework.ai.testcontainers.service.connection.ollama.OllamaContainerConnectionDetailsFactory",
            "org.springframework.ai.testcontainers.service.connection.ollama.OllamaContainerConnectionDetails": "org.springframework.ai.testcontainers.service.connection.ollama.OllamaContainerConnectionDetails",
            "org.springframework.ai.testcontainers.service.connection.ollama.getContainerConnectionDetails": "org.springframework.ai.testcontainers.service.connection.ollama.getContainerConnectionDetails",
            "org.springframework.ai.testcontainers.service.connection.ollama.getBaseUrl": "org.springframework.ai.testcontainers.service.connection.ollama.getBaseUrl"
        },
        "package": "package org.springframework.ai.testcontainers.service.connection.ollama;",
        "property_declarations": [],
        "functions": [
            {
                "name": "getContainerConnectionDetails",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new OllamaContainerConnectionDetails(source);",
                "is_abstract": "",
                "class_name": "OllamaContainerConnectionDetailsFactory",
                "annotations": []
            },
            {
                "name": "getBaseUrl",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return getContainer().getEndpoint();",
                "is_abstract": "",
                "class_name": "OllamaContainerConnectionDetailsFactory OllamaContainerConnectionDetails",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-testcontainers/src/main/java/org/springframework/ai/testcontainers/service/connection/weaviate/WeaviateContainerConnectionDetailsFactory.java",
        "class_names": [
            "WeaviateContainerConnectionDetails",
            "WeaviateContainerConnectionDetailsFactory"
        ],
        "imports": "import org.springframework.boot.testcontainers.service.connection.ContainerConnectionDetailsFactory;\nimport org.springframework.ai.autoconfigure.vectorstore.weaviate.WeaviateConnectionDetails;\nimport org.springframework.boot.testcontainers.service.connection.ContainerConnectionSource;\nimport org.testcontainers.weaviate.WeaviateContainer;",
        "package_import_paths": {
            "org.springframework.ai.testcontainers.service.connection.weaviate.WeaviateContainerConnectionDetailsFactory": "org.springframework.ai.testcontainers.service.connection.weaviate.WeaviateContainerConnectionDetailsFactory",
            "org.springframework.ai.testcontainers.service.connection.weaviate.WeaviateContainerConnectionDetails": "org.springframework.ai.testcontainers.service.connection.weaviate.WeaviateContainerConnectionDetails",
            "org.springframework.ai.testcontainers.service.connection.weaviate.getContainerConnectionDetails": "org.springframework.ai.testcontainers.service.connection.weaviate.getContainerConnectionDetails",
            "org.springframework.ai.testcontainers.service.connection.weaviate.getHost": "org.springframework.ai.testcontainers.service.connection.weaviate.getHost"
        },
        "package": "package org.springframework.ai.testcontainers.service.connection.weaviate;",
        "property_declarations": [],
        "functions": [
            {
                "name": "getContainerConnectionDetails",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new WeaviateContainerConnectionDetails(source);",
                "is_abstract": "",
                "class_name": "WeaviateContainerConnectionDetailsFactory",
                "annotations": []
            },
            {
                "name": "getHost",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return getContainer().getHttpHostAddress();",
                "is_abstract": "",
                "class_name": "WeaviateContainerConnectionDetailsFactory WeaviateContainerConnectionDetails",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-testcontainers/src/main/java/org/springframework/ai/testcontainers/service/connection/milvus/MilvusContainerConnectionDetailsFactory.java",
        "class_names": [
            "MilvusContainerConnectionDetailsFactory",
            "MilvusContainerConnectionDetails"
        ],
        "imports": "import org.springframework.boot.testcontainers.service.connection.ContainerConnectionDetailsFactory;\nimport org.springframework.boot.testcontainers.service.connection.ContainerConnectionSource;\nimport org.testcontainers.milvus.MilvusContainer;\nimport org.springframework.ai.autoconfigure.vectorstore.milvus.MilvusServiceClientConnectionDetails;",
        "package_import_paths": {
            "org.springframework.ai.testcontainers.service.connection.milvus.MilvusContainerConnectionDetailsFactory": "org.springframework.ai.testcontainers.service.connection.milvus.MilvusContainerConnectionDetailsFactory",
            "org.springframework.ai.testcontainers.service.connection.milvus.MilvusContainerConnectionDetails": "org.springframework.ai.testcontainers.service.connection.milvus.MilvusContainerConnectionDetails",
            "org.springframework.ai.testcontainers.service.connection.milvus.getContainerConnectionDetails": "org.springframework.ai.testcontainers.service.connection.milvus.getContainerConnectionDetails",
            "org.springframework.ai.testcontainers.service.connection.milvus.getHost": "org.springframework.ai.testcontainers.service.connection.milvus.getHost",
            "org.springframework.ai.testcontainers.service.connection.milvus.getPort": "org.springframework.ai.testcontainers.service.connection.milvus.getPort"
        },
        "package": "package org.springframework.ai.testcontainers.service.connection.milvus;",
        "property_declarations": [],
        "functions": [
            {
                "name": "getContainerConnectionDetails",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new MilvusContainerConnectionDetails(source);",
                "is_abstract": "",
                "class_name": "MilvusContainerConnectionDetailsFactory",
                "annotations": []
            },
            {
                "name": "getHost",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return getContainer().getHost();",
                "is_abstract": "",
                "class_name": "MilvusContainerConnectionDetailsFactory MilvusContainerConnectionDetails",
                "annotations": []
            },
            {
                "name": "getPort",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return getContainer().getMappedPort(19530);",
                "is_abstract": "",
                "class_name": "MilvusContainerConnectionDetailsFactory MilvusContainerConnectionDetails",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-test/src/main/java/org/springframework/ai/evaluation/BasicEvaluationTest.java",
        "class_names": [
            "BasicEvaluationTest"
        ],
        "imports": "import org.springframework.ai.chat.prompt.Prompt;\nimport org.springframework.ai.chat.messages.Message;\nimport java.util.List;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.fail;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.ai.chat.ChatClient;\nimport org.slf4j.Logger;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport java.util.Map;\nimport org.springframework.ai.chat.prompt.PromptTemplate;\nimport org.springframework.ai.chat.messages.SystemMessage;\nimport org.springframework.core.io.Resource;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.ai.chat.ChatResponse;",
        "package_import_paths": {
            "org.springframework.ai.evaluation.BasicEvaluationTest": "org.springframework.ai.evaluation.BasicEvaluationTest",
            "org.springframework.ai.evaluation.evaluateQuestionAndAnswer": "org.springframework.ai.evaluation.evaluateQuestionAndAnswer",
            "org.springframework.ai.evaluation.logger": "org.springframework.ai.evaluation.logger",
            "org.springframework.ai.evaluation.protected": "org.springframework.ai.evaluation.protected",
            "org.springframework.ai.evaluation.qaEvaluatorAccurateAnswerResour": "org.springframework.ai.evaluation.qaEvaluatorAccurateAnswerResour",
            "org.springframework.ai.evaluation.qaEvaluatorNotRelatedResour": "org.springframework.ai.evaluation.qaEvaluatorNotRelatedResour",
            "org.springframework.ai.evaluation.qaEvaluatorFactBasedAnswerResour": "org.springframework.ai.evaluation.qaEvaluatorFactBasedAnswerResour",
            "org.springframework.ai.evaluation.userEvaluatorResour": "org.springframework.ai.evaluation.userEvaluatorResour"
        },
        "package": "package org.springframework.ai.evaluation;",
        "property_declarations": [
            "@Value(\"classpath:/prompts/spring/test/evaluation/user-evaluator-message.st\")\n\tprotected Resource userEvaluatorResource;",
            "@Value(\"classpath:/prompts/spring/test/evaluation/qa-evaluator-accurate-answer.st\")\n\tprotected Resource qaEvaluatorAccurateAnswerResource;",
            "private static final Logger logger = LoggerFactory.getLogger(BasicEvaluationTest.class);",
            "@Value(\"classpath:/prompts/spring/test/evaluation/qa-evaluator-not-related-message.st\")\n\tprotected Resource qaEvaluatorNotRelatedResource;",
            "@Autowired\n\tprotected ChatClient openAiChatClient;",
            "@Value(\"classpath:/prompts/spring/test/evaluation/qa-evaluator-fact-based-answer.st\")\n\tprotected Resource qaEvaluatorFactBasedAnswerResource;"
        ],
        "functions": [
            {
                "name": "evaluateQuestionAndAnswer",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "assertThat(response).isNotNull();\n\t\tString answer = response.getResult().getOutput().getContent();\n\t\tlogger.info(\"Question: \" + question);\n\t\tlogger.info(\"Answer:\" + answer);\n\t\tPromptTemplate userPromptTemplate = new PromptTemplate(userEvaluatorResource,\n\t\t\t\tMap.of(\"question\", question, \"answer\", answer));\n\t\tSystemMessage systemMessage;\n\t\tif (factBased) {\n\t\t\tsystemMessage = new SystemMessage(qaEvaluatorFactBasedAnswerResource);\n\t\t}\n\t\telse {\n\t\t\tsystemMessage = new SystemMessage(qaEvaluatorAccurateAnswerResource);\n\t\t}\n\t\tMessage userMessage = userPromptTemplate.createMessage();\n\t\tPrompt prompt = new Prompt(List.of(userMessage, systemMessage));\n\t\tString yesOrNo = openAiChatClient.call(prompt).getResult().getOutput().getContent();\n\t\tlogger.info(\"Is Answer related to question: \" + yesOrNo);\n\t\tif (yesOrNo.equalsIgnoreCase(\"no\")) {\n\t\t\tSystemMessage notRelatedSystemMessage = new SystemMessage(qaEvaluatorNotRelatedResource);\n\t\t\tprompt = new Prompt(List.of(userMessage, notRelatedSystemMessage));\n\t\t\tString reasonForFailure = openAiChatClient.call(prompt).getResult().getOutput().getContent();\n\t\t\tfail(reasonForFailure);\n\t\t}\n\t\telse {\n\t\t\tlogger.info(\"Answer is related to question.\");\n\t\t\tassertThat(yesOrNo).isEqualTo(\"YES\");\n\t\t}",
                "is_abstract": "",
                "class_name": "BasicEvaluationTest",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/test/java/org/springframework/ai/TestConfiguration.java",
        "class_names": [
            "TestConfiguration"
        ],
        "imports": "import org.springframework.boot.SpringBootConfiguration;",
        "package_import_paths": {
            "org.springframework.ai.TestConfiguration": "org.springframework.ai.TestConfiguration"
        },
        "package": "package org.springframework.ai;",
        "property_declarations": [],
        "functions": []
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/test/java/org/springframework/ai/reader/JsonReaderTests.java",
        "class_names": [
            "JsonReaderTests"
        ],
        "imports": "import org.springframework.ai.reader.JsonReader;\nimport java.util.List;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.springframework.ai.document.Document;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.core.io.Resource;\nimport org.springframework.beans.factory.annotation.Value;",
        "package_import_paths": {
            "org.springframework.ai.reader.JsonReaderTests": "org.springframework.ai.reader.JsonReaderTests",
            "org.springframework.ai.reader.loadJson": "org.springframework.ai.reader.loadJson",
            "org.springframework.ai.reader.resour": "org.springframework.ai.reader.resour"
        },
        "package": "package org.springframework.ai.reader;",
        "property_declarations": [
            "@Value(\"classpath:bikes.json\")\n\tprivate Resource resource;"
        ],
        "functions": [
            {
                "name": "loadJson",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "assertThat(resource).isNotNull();\n\t\tJsonReader jsonReader = new JsonReader(resource, \"description\");\n\t\tList<Document> documents = jsonReader.get();\n\t\tassertThat(documents).isNotEmpty();\n\t\tfor (Document document : documents) {\n\t\t\tassertThat(document.getContent()).isNotEmpty();\n\t\t}",
                "is_abstract": "",
                "class_name": "JsonReaderTests",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/test/java/org/springframework/ai/reader/TextReaderTests.java",
        "class_names": [
            "TextReaderTests"
        ],
        "imports": "import java.util.List;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.springframework.ai.document.Document;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.core.io.Resource;\nimport org.springframework.core.io.DefaultResourceLoader;\nimport org.springframework.ai.transformer.splitter.TokenTextSplitter;",
        "package_import_paths": {
            "org.springframework.ai.reader.TextReaderTests": "org.springframework.ai.reader.TextReaderTests",
            "org.springframework.ai.reader.loadText": "org.springframework.ai.reader.loadText",
            "org.springframework.ai.reader.resour": "org.springframework.ai.reader.resour"
        },
        "package": "package org.springframework.ai.reader;",
        "property_declarations": [
            "private Resource resource = new DefaultResourceLoader().getResource(\"classpath:text_source.txt\");"
        ],
        "functions": [
            {
                "name": "loadText",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "assertThat(resource).isNotNull();\n\t\tTextReader textReader = new TextReader(resource);\n\t\ttextReader.getCustomMetadata().put(\"customKey\", \"Value\");\n\n\t\tList<Document> documents0 = textReader.get();\n\n\t\tList<Document> documents = new TokenTextSplitter().apply(documents0);\n\n\t\tassertThat(documents.size()).isEqualTo(54);\n\n\t\tfor (Document document : documents) {\n\t\t\tassertThat(document.getMetadata().get(\"customKey\")).isEqualTo(\"Value\");\n\t\t\tassertThat(document.getMetadata().get(TextReader.SOURCE_METADATA)).isEqualTo(\"text_source.txt\");\n\t\t\tassertThat(document.getMetadata().get(TextReader.CHARSET_METADATA)).isEqualTo(\"UTF-8\");\n\t\t\tassertThat(document.getContent()).isNotEmpty();\n\t\t}",
                "is_abstract": "",
                "class_name": "TextReaderTests",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/test/java/org/springframework/ai/chat/ChatClientTests.java",
        "class_names": [
            "ChatClientTests"
        ],
        "imports": "import static org.mockito.ArgumentMatchers.anyString;\nimport org.springframework.ai.chat.prompt.Prompt;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.mockito.ArgumentMatchers.eq;\nimport static org.mockito.Mockito.*;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\nimport static org.mockito.ArgumentMatchers.any;\nimport org.springframework.ai.chat.messages.AssistantMessage;\nimport static org.mockito.ArgumentMatchers.isA;",
        "package_import_paths": {
            "org.springframework.ai.chat.ChatClientTests": "org.springframework.ai.chat.ChatClientTests",
            "org.springframework.ai.chat.generateWithStringCallsGenerateWithPromptAndReturnsResponseCorrectly": "org.springframework.ai.chat.generateWithStringCallsGenerateWithPromptAndReturnsResponseCorrectly"
        },
        "package": "package org.springframework.ai.chat;",
        "property_declarations": [],
        "functions": [
            {
                "name": "generateWithStringCallsGenerateWithPromptAndReturnsResponseCorrectly",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String userMessage = \"Zero Wing\";\n\t\tString responseMessage = \"All your bases are belong to us\";\n\n\t\tChatClient mockClient = Mockito.mock(ChatClient.class);\n\n\t\tAssistantMessage mockAssistantMessage = Mockito.mock(AssistantMessage.class);\n\t\twhen(mockAssistantMessage.getContent()).thenReturn(responseMessage);\n\n\t\t// Create a mock Generation\n\t\tGeneration generation = Mockito.mock(Generation.class);\n\t\twhen(generation.getOutput()).thenReturn(mockAssistantMessage);\n\n\t\t// Create a mock ChatResponse with the mock Generation\n\t\tChatResponse response = Mockito.mock(ChatResponse.class);\n\t\twhen(response.getResult()).thenReturn(generation);\n\n\t\t// Generation generation = spy(new Generation(responseMessage));\n\t\t// ChatResponse response = spy(new\n\t\t// ChatResponse(Collections.singletonList(generation)));\n\n\t\tdoCallRealMethod().when(mockClient).call(anyString());\n\n\t\tdoAnswer(invocationOnMock -> {\n\n\t\t\tPrompt prompt = invocationOnMock.getArgument(0);\n\n\t\t\tassertThat(prompt).isNotNull();\n\t\t\tassertThat(prompt.getContents()).isEqualTo(userMessage);\n\n\t\t\treturn response;\n\n\t\t}).when(mockClient).call(any(Prompt.class));\n\n\t\tassertThat(mockClient.call(userMessage)).isEqualTo(responseMessage);\n\n\t\tverify(mockClient, times(1)).call(eq(userMessage));\n\t\tverify(mockClient, times(1)).call(isA(Prompt.class));\n\t\tverify(response, times(1)).getResult();\n\t\tverify(generation, times(1)).getOutput();\n\t\tverify(mockAssistantMessage, times(1)).getContent();\n\t\tverifyNoMoreInteractions(mockClient, generation, response);",
                "is_abstract": "",
                "class_name": "ChatClientTests",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/test/java/org/springframework/ai/chat/ChatBuilderTests.java",
        "class_names": [
            "ChatBuilderTests"
        ],
        "imports": "import java.util.ArrayList;\nimport org.springframework.ai.chat.prompt.Prompt;\nimport java.util.List;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.springframework.ai.model.function.FunctionCallbackWrapper;\nimport org.springframework.ai.model.function.FunctionCallingOptions;\nimport org.springframework.ai.model.function.FunctionCallback;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.chat.prompt.ChatOptionsBuilder;\nimport org.springframework.ai.chat.prompt.ChatOptions;\nimport java.util.Set;\nimport java.util.HashSet;",
        "package_import_paths": {
            "org.springframework.ai.chat.ChatBuilderTests": "org.springframework.ai.chat.ChatBuilderTests",
            "org.springframework.ai.chat.createNewChatOptionsTest": "org.springframework.ai.chat.createNewChatOptionsTest",
            "org.springframework.ai.chat.duplicateChatOptionsTest": "org.springframework.ai.chat.duplicateChatOptionsTest",
            "org.springframework.ai.chat.createFunctionCallingOptionTest": "org.springframework.ai.chat.createFunctionCallingOptionTest"
        },
        "package": "package org.springframework.ai.chat;",
        "property_declarations": [],
        "functions": [
            {
                "name": "createNewChatOptionsTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Float temperature = 1.1f;\n\t\tFloat topP = 2.2f;\n\t\tInteger topK = 111;\n\n\t\tChatOptions options = ChatOptionsBuilder.builder()\n\t\t\t.withTemperature(temperature)\n\t\t\t.withTopK(topK)\n\t\t\t.withTopP(topP)\n\t\t\t.build();\n\n\t\tassertThat(options.getTemperature()).isEqualTo(temperature);\n\t\tassertThat(options.getTopP()).isEqualTo(topP);\n\t\tassertThat(options.getTopK()).isEqualTo(topK);",
                "is_abstract": "",
                "class_name": "ChatBuilderTests",
                "annotations": []
            },
            {
                "name": "duplicateChatOptionsTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Float initTemperature = 1.1f;\n\t\tFloat initTopP = 2.2f;\n\t\tInteger initTopK = 111;\n\n\t\tChatOptions options = ChatOptionsBuilder.builder()\n\t\t\t.withTemperature(initTemperature)\n\t\t\t.withTopP(initTopP)\n\t\t\t.withTopK(initTopK)\n\t\t\t.build();",
                "is_abstract": "",
                "class_name": "ChatBuilderTests",
                "annotations": []
            },
            {
                "name": "createFunctionCallingOptionTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Float temperature = 1.1f;\n\t\tFloat topP = 2.2f;\n\t\tInteger topK = 111;\n\t\tList<FunctionCallback> functionCallbacks = new ArrayList<>();\n\t\tSet<String> functions = new HashSet<>();\n\n\t\tString func = \"func\";\n\t\tFunctionCallback cb = FunctionCallbackWrapper.<Integer, Integer>builder(i -> i)\n\t\t\t.withName(\"cb\")\n\t\t\t.withDescription(\"cb\")\n\t\t\t.build();\n\n\t\tfunctions.add(func);\n\t\tfunctionCallbacks.add(cb);\n\n\t\tFunctionCallingOptions options = FunctionCallingOptions.builder()\n\t\t\t.withFunctionCallbacks(functionCallbacks)\n\t\t\t.withFunctions(functions)\n\t\t\t.withTopK(topK)\n\t\t\t.withTopP(topP)\n\t\t\t.withTemperature(temperature)\n\t\t\t.build();\n\n\t\t// Callback Functions\n\t\tassertThat(options.getFunctionCallbacks()).isNotNull();\n\t\tassertThat(options.getFunctionCallbacks().size()).isEqualTo(1);\n\t\tassertThat(options.getFunctionCallbacks().contains(cb));\n\n\t\t// Functions\n\t\tassertThat(options.getFunctions()).isNotNull();\n\t\tassertThat(options.getFunctions().size()).isEqualTo(1);\n\t\tassertThat(options.getFunctions().contains(func));",
                "is_abstract": "",
                "class_name": "ChatBuilderTests",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/test/java/org/springframework/ai/transformer/splitter/TextSplitterTests.java",
        "class_names": [
            "TextSplitterTests"
        ],
        "imports": "import java.util.ArrayList;\nimport java.util.List;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.springframework.ai.document.Document;\nimport java.util.Map;\nimport org.springframework.ai.document.DefaultContentFormatter;\nimport org.junit.jupiter.api.Test;",
        "package_import_paths": {
            "org.springframework.ai.transformer.splitter.TextSplitterTests": "org.springframework.ai.transformer.splitter.TextSplitterTests",
            "org.springframework.ai.transformer.splitter.splitText": "org.springframework.ai.transformer.splitter.splitText",
            "org.springframework.ai.transformer.splitter.testSplitText": "org.springframework.ai.transformer.splitter.testSplitText",
            "org.springframework.ai.transformer.splitter.testTextSplitter": "org.springframework.ai.transformer.splitter.testTextSplitter"
        },
        "package": "package org.springframework.ai.transformer.splitter;",
        "property_declarations": [
            "static TextSplitter testTextSplitter = new TextSplitter() {\n\n\t\t@Override\n\t\tprotected List<String> splitText(String text) {\n\t\t\tint chuckSize = text.length() / 2;\n\n\t\t\tList<String> chunks = new ArrayList<>();\n\n\t\t\tchunks.add(text.substring(0, chuckSize));\n\t\t\tchunks.add(text.substring(chuckSize, text.length()));\n\n\t\t\treturn chunks;\n\t\t}\n\t};"
        ],
        "functions": [
            {
                "name": "splitText",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "int chuckSize = text.length() / 2;\n\n\t\t\tList<String> chunks = new ArrayList<>();\n\n\t\t\tchunks.add(text.substring(0, chuckSize));\n\t\t\tchunks.add(text.substring(chuckSize, text.length()));\n\n\t\t\treturn chunks;",
                "is_abstract": "",
                "class_name": "TextSplitterTests",
                "annotations": []
            },
            {
                "name": "testSplitText",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var contentFormatter1 = DefaultContentFormatter.defaultConfig();\n\t\tvar contentFormatter2 = DefaultContentFormatter.defaultConfig();\n\n\t\tassertThat(contentFormatter1).isNotSameAs(contentFormatter2);\n\n\t\tvar doc1 = new Document(\"In the end, writing arises when man realizes that memory is not enough.\",\n\t\t\t\tMap.of(\"key1\", \"value1\", \"key2\", \"value2\"));\n\t\tdoc1.setContentFormatter(contentFormatter1);\n\n\t\tvar doc2 = new Document(\"The most oppressive thing about the labyrinth is that you are constantly \"\n\t\t\t\t+ \"being forced to choose. It isn\u2019t the lack of an exit, but the abundance of exits that is so disorienting.\",\n\t\t\t\tMap.of(\"key2\", \"value22\", \"key3\", \"value3\"));\n\t\tdoc2.setContentFormatter(contentFormatter2);\n\n\t\tList<Document> chunks = testTextSplitter.apply(List.of(doc1, doc2));\n\n\t\tassertThat(testTextSplitter.isCopyContentFormatter()).isTrue();\n\n\t\tassertThat(chunks).hasSize(4);\n\n\t\t// Doc1 chunks:\n\t\tassertThat(chunks.get(0).getContent()).isEqualTo(\"In the end, writing arises when man\");\n\t\tassertThat(chunks.get(1).getContent()).isEqualTo(\" realizes that memory is not enough.\");\n\n\t\t// Doc2 chunks:\n\t\tassertThat(chunks.get(2).getContent())\n\t\t\t.isEqualTo(\"The most oppressive thing about the labyrinth is that you are constantly being forced to \");\n\t\tassertThat(chunks.get(3).getContent())\n\t\t\t.isEqualTo(\"choose. It isn\u2019t the lack of an exit, but the abundance of exits that is so disorienting.\");\n\n\t\t// Verify that the same, merged metadata is copied to all chunks.\n\t\tassertThat(chunks.get(0).getMetadata()).isEqualTo(chunks.get(1).getMetadata());\n\t\tassertThat(chunks.get(2).getMetadata()).isEqualTo(chunks.get(3).getMetadata());\n\t\tassertThat(chunks.get(0).getMetadata()).containsKeys(\"key1\", \"key2\").doesNotContainKeys(\"key3\");\n\t\tassertThat(chunks.get(2).getMetadata()).containsKeys(\"key2\", \"key3\").doesNotContainKeys(\"key1\");\n\n\t\t// Verify that the content formatters are copied from the parents to the chunks.\n\t\t// doc1 -> chunk0, chunk1 and doc2 -> chunk2, chunk3\n\t\tassertThat(chunks.get(0).getContentFormatter()).isSameAs(contentFormatter1);\n\t\tassertThat(chunks.get(1).getContentFormatter()).isSameAs(contentFormatter1);\n\n\t\tassertThat(chunks.get(2).getContentFormatter()).isSameAs(contentFormatter2);\n\t\tassertThat(chunks.get(3).getContentFormatter()).isSameAs(contentFormatter2);\n\n\t\t// Disable copy content formatters\n\t\ttestTextSplitter.setCopyContentFormatter(false);\n\t\tchunks = testTextSplitter.apply(List.of(doc1, doc2));\n\n\t\tassertThat(chunks.get(0).getContentFormatter()).isNotSameAs(contentFormatter1);\n\t\tassertThat(chunks.get(1).getContentFormatter()).isNotSameAs(contentFormatter1);\n\n\t\tassertThat(chunks.get(2).getContentFormatter()).isNotSameAs(contentFormatter2);\n\t\tassertThat(chunks.get(3).getContentFormatter()).isNotSameAs(contentFormatter2);",
                "is_abstract": "",
                "class_name": "TextSplitterTests",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/test/java/org/springframework/ai/embedding/AbstractEmbeddingClientTests.java",
        "class_names": [
            "AbstractEmbeddingClientTests"
        ],
        "imports": "import org.junit.jupiter.params.provider.CsvFileSource;\nimport org.mockito.Mock;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport java.util.List;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport static org.mockito.ArgumentMatchers.eq;\nimport org.springframework.ai.document.Document;\nimport org.junit.jupiter.api.Test;\nimport static org.mockito.Mockito.never;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.when;\nimport org.mockito.junit.jupiter.MockitoExtension;",
        "package_import_paths": {
            "org.springframework.ai.embedding.AbstractEmbeddingClientTests": "org.springframework.ai.embedding.AbstractEmbeddingClientTests",
            "org.springframework.ai.embedding.testDefaultMethodImplementation": "org.springframework.ai.embedding.testDefaultMethodImplementation",
            "org.springframework.ai.embedding.embed": "org.springframework.ai.embedding.embed",
            "org.springframework.ai.embedding.embedForRespons": "org.springframework.ai.embedding.embedForRespons",
            "org.springframework.ai.embedding.call": "org.springframework.ai.embedding.call",
            "org.springframework.ai.embedding.CsvFileSour": "org.springframework.ai.embedding.CsvFileSour",
            "org.springframework.ai.embedding.testUnknownModelDimension": "org.springframework.ai.embedding.testUnknownModelDimension",
            "org.springframework.ai.embedding.privat": "org.springframework.ai.embedding.privat"
        },
        "package": "package org.springframework.ai.embedding;",
        "property_declarations": [
            "@Mock\n\tprivate EmbeddingClient embeddingClient;"
        ],
        "functions": [
            {
                "name": "testDefaultMethodImplementation",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "EmbeddingClient dummy = new EmbeddingClient() {\n\n\t\t\t@Override\n\t\t\tpublic List<Double> embed(String text) {\n\t\t\t\treturn List.of(0.1, 0.1, 0.1);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic List<Double> embed(Document document) {\n\t\t\t\tthrow new UnsupportedOperationException(\"Unimplemented method 'embed'\");\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic List<List<Double>> embed(List<String> texts) {\n\t\t\t\tthrow new UnsupportedOperationException(\"Unimplemented method 'embed'\");\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic EmbeddingResponse embedForResponse(List<String> texts) {\n\t\t\t\tthrow new UnsupportedOperationException(\"Unimplemented method 'embedForResponse'\");\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic EmbeddingResponse call(EmbeddingRequest request) {\n\t\t\t\tthrow new UnsupportedOperationException(\"Unimplemented method 'call'\");\n\t\t\t}\n\t\t};\n\n\t\tassertThat(dummy.dimensions()).isEqualTo(3);",
                "is_abstract": "",
                "class_name": "AbstractEmbeddingClientTests",
                "annotations": []
            },
            {
                "name": "embed",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return List.of(0.1, 0.1, 0.1);",
                "is_abstract": "",
                "class_name": "AbstractEmbeddingClientTests",
                "annotations": []
            },
            {
                "name": "embedForResponse",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "throw new UnsupportedOperationException(\"Unimplemented method 'embedForResponse'\");",
                "is_abstract": "",
                "class_name": "AbstractEmbeddingClientTests",
                "annotations": []
            },
            {
                "name": "call",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "throw new UnsupportedOperationException(\"Unimplemented method 'call'\");",
                "is_abstract": "",
                "class_name": "AbstractEmbeddingClientTests",
                "annotations": []
            },
            {
                "name": "CsvFileSource",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "assertThat(AbstractEmbeddingClient.dimensions(embeddingClient, model, \"Hello world!\"))\n\t\t\t.isEqualTo(Integer.valueOf(dimension));\n\t\tverify(embeddingClient, never()).embed(any(String.class));\n\t\tverify(embeddingClient, never()).embed(any(Document.class));",
                "is_abstract": "",
                "class_name": "AbstractEmbeddingClientTests",
                "annotations": [
                    "@CsvFileSource(resources = \"/embedding/embedding-model-dimensions.properties\", numLinesToSkip = 1, delimiter = '=')"
                ]
            },
            {
                "name": "testUnknownModelDimension",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "when(embeddingClient.embed(eq(\"Hello world!\"))).thenReturn(List.of(0.1, 0.1, 0.1));\n\t\tassertThat(AbstractEmbeddingClient.dimensions(embeddingClient, \"unknown_model\", \"Hello world!\")).isEqualTo(3);",
                "is_abstract": "",
                "class_name": "AbstractEmbeddingClientTests",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/test/java/org/springframework/ai/document/ContentFormatterTests.java",
        "class_names": [
            "ContentFormatterTests"
        ],
        "imports": "import org.junit.jupiter.api.Test;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport java.util.Map;",
        "package_import_paths": {
            "org.springframework.ai.document.ContentFormatterTests": "org.springframework.ai.document.ContentFormatterTests",
            "org.springframework.ai.document.noExplicitlySetFormatter": "org.springframework.ai.document.noExplicitlySetFormatter",
            "org.springframework.ai.document.defaultConfigTextFormatter": "org.springframework.ai.document.defaultConfigTextFormatter",
            "org.springframework.ai.document.customTextFormatter": "org.springframework.ai.document.customTextFormatter",
            "org.springframework.ai.document.document": "org.springframework.ai.document.document"
        },
        "package": "package org.springframework.ai.document;",
        "property_declarations": [
            "Document document = new Document(\"The World is Big and Salvation Lurks Around the Corner\",\n\t\t\tMap.of(\"embedKey1\", \"value1\", \"embedKey2\", \"value2\", \"embedKey3\", \"value3\", \"llmKey2\", \"value4\"));"
        ],
        "functions": [
            {
                "name": "noExplicitlySetFormatter",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "assertThat(document.getContent()).isEqualTo(\"\"\"\n\t\t\t\tThe World is Big and Salvation Lurks Around the Corner\"\"\");\n\n\t\tassertThat(document.getFormattedContent()).isEqualTo(document.getFormattedContent(MetadataMode.ALL));\n\t\tassertThat(document.getFormattedContent())\n\t\t\t.isEqualTo(document.getFormattedContent(Document.DEFAULT_CONTENT_FORMATTER, MetadataMode.ALL));",
                "is_abstract": "",
                "class_name": "ContentFormatterTests",
                "annotations": []
            },
            {
                "name": "defaultConfigTextFormatter",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "DefaultContentFormatter defaultConfigFormatter = DefaultContentFormatter.defaultConfig();\n\n\t\tassertThat(document.getFormattedContent(defaultConfigFormatter, MetadataMode.ALL)).isEqualTo(\"\"\"\n\t\t\t\tllmKey2: value4\n\t\t\t\tembedKey1: value1\n\t\t\t\tembedKey2: value2\n\t\t\t\tembedKey3: value3\n\n\t\t\t\tThe World is Big and Salvation Lurks Around the Corner\"\"\");\n\n\t\tassertThat(document.getFormattedContent(defaultConfigFormatter, MetadataMode.ALL))\n\t\t\t.isEqualTo(document.getFormattedContent());\n\n\t\tassertThat(document.getFormattedContent(defaultConfigFormatter, MetadataMode.ALL))\n\t\t\t.isEqualTo(defaultConfigFormatter.format(document, MetadataMode.ALL));",
                "is_abstract": "",
                "class_name": "ContentFormatterTests",
                "annotations": []
            },
            {
                "name": "customTextFormatter",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "DefaultContentFormatter textFormatter = DefaultContentFormatter.builder()\n\t\t\t.withExcludedEmbedMetadataKeys(\"embedKey2\", \"embedKey3\")\n\t\t\t.withExcludedInferenceMetadataKeys(\"llmKey2\")\n\t\t\t.withTextTemplate(\"Metadata:\\n{metadata_string}\\n\\nText:{content}\")\n\t\t\t.withMetadataTemplate(\"Key/Value {key}={value}\")\n\t\t\t.build();\n\n\t\tassertThat(document.getFormattedContent(textFormatter, MetadataMode.EMBED)).isEqualTo(\"\"\"\n\t\t\t\tMetadata:\n\t\t\t\tKey/Value llmKey2=value4\n\t\t\t\tKey/Value embedKey1=value1\n\n\t\t\t\tText:The World is Big and Salvation Lurks Around the Corner\"\"\");\n\n\t\tassertThat(document.getContent()).isEqualTo(\"\"\"\n\t\t\t\tThe World is Big and Salvation Lurks Around the Corner\"\"\");\n\n\t\tassertThat(document.getFormattedContent(textFormatter, MetadataMode.EMBED))\n\t\t\t.isEqualTo(textFormatter.format(document, MetadataMode.EMBED));\n\n\t\tvar documentWithCustomFormatter = new Document(document.getId(), document.getContent(), document.getMetadata());\n\t\tdocumentWithCustomFormatter.setContentFormatter(textFormatter);\n\n\t\tassertThat(document.getFormattedContent(textFormatter, MetadataMode.ALL))\n\t\t\t.isEqualTo(documentWithCustomFormatter.getFormattedContent());",
                "is_abstract": "",
                "class_name": "ContentFormatterTests",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/test/java/org/springframework/ai/document/id/IdGeneratorProviderTest.java",
        "class_names": [
            "IdGeneratorProviderTest"
        ],
        "imports": "import java.util.Map;\nimport org.junit.jupiter.api.Test;\nimport java.util.UUID;\nimport java.util.Set;\nimport org.junit.jupiter.api.Assertions;",
        "package_import_paths": {
            "org.springframework.ai.document.id.IdGeneratorProviderTest": "org.springframework.ai.document.id.IdGeneratorProviderTest",
            "org.springframework.ai.document.id.hashGeneratorGenerateSimilarIdsForSimilarContent": "org.springframework.ai.document.id.hashGeneratorGenerateSimilarIdsForSimilarContent",
            "org.springframework.ai.document.id.hashGeneratorGenerateDifferentIdsForDifferentContent": "org.springframework.ai.document.id.hashGeneratorGenerateDifferentIdsForDifferentContent"
        },
        "package": "package org.springframework.ai.document.id;",
        "property_declarations": [],
        "functions": [
            {
                "name": "hashGeneratorGenerateSimilarIdsForSimilarContent",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var idGenerator1 = new JdkSha256HexIdGenerator();\n\t\tvar idGenerator2 = new JdkSha256HexIdGenerator();\n\n\t\tfinal String content = \"Content\";\n\t\tfinal Map<String, Object> metadata = Map.of(\"metadata\", Set.of(\"META_DATA\"));\n\n\t\tString actualHashes1 = idGenerator1.generateId(content, metadata);\n\t\tString actualHashes2 = idGenerator2.generateId(content, metadata);\n\n\t\tAssertions.assertEquals(actualHashes1, actualHashes2);\n\n\t\t// Assert (other expected behaviors)\n\t\tAssertions.assertDoesNotThrow(() -> UUID.fromString(actualHashes1));\n\t\tAssertions.assertDoesNotThrow(() -> UUID.fromString(actualHashes2));",
                "is_abstract": "",
                "class_name": "IdGeneratorProviderTest",
                "annotations": []
            },
            {
                "name": "hashGeneratorGenerateDifferentIdsForDifferentContent",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var idGenerator1 = new JdkSha256HexIdGenerator();\n\t\tvar idGenerator2 = new JdkSha256HexIdGenerator();\n\n\t\tfinal String content1 = \"Content\";\n\t\tfinal Map<String, Object> metadata1 = Map.of(\"metadata\", Set.of(\"META_DATA\"));\n\t\tfinal String content2 = content1 + \" \";\n\t\tfinal Map<String, Object> metadata2 = metadata1;\n\n\t\tString actualHashes1 = idGenerator1.generateId(content1, metadata1);\n\t\tString actualHashes2 = idGenerator2.generateId(content2, metadata2);\n\n\t\tAssertions.assertNotEquals(actualHashes1, actualHashes2);\n\n\t\t// Assert (other expected behaviors)\n\t\tAssertions.assertDoesNotThrow(() -> UUID.fromString(actualHashes1));\n\t\tAssertions.assertDoesNotThrow(() -> UUID.fromString(actualHashes2));",
                "is_abstract": "",
                "class_name": "IdGeneratorProviderTest",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/test/java/org/springframework/ai/document/id/JdkSha256HexIdGeneratorTest.java",
        "class_names": [
            "JdkSha256HexIdGeneratorTest"
        ],
        "imports": "import java.security.MessageDigest;\nimport java.nio.charset.Charset;\nimport org.junit.jupiter.api.Test;\nimport java.nio.charset.StandardCharsets;\nimport org.assertj.core.api.Assertions;",
        "package_import_paths": {
            "org.springframework.ai.document.id.JdkSha256HexIdGeneratorTest": "org.springframework.ai.document.id.JdkSha256HexIdGeneratorTest",
            "org.springframework.ai.document.id.messageDigestReturnsDistinctInstances": "org.springframework.ai.document.id.messageDigestReturnsDistinctInstances",
            "org.springframework.ai.document.id.messageDigestReturnsInstancesWithIndependentAndReproducibleDigests": "org.springframework.ai.document.id.messageDigestReturnsInstancesWithIndependentAndReproducibleDigests",
            "org.springframework.ai.document.id.test": "org.springframework.ai.document.id.test"
        },
        "package": "package org.springframework.ai.document.id;",
        "property_declarations": [
            "private final JdkSha256HexIdGenerator testee = new JdkSha256HexIdGenerator();"
        ],
        "functions": [
            {
                "name": "messageDigestReturnsDistinctInstances",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "final MessageDigest md1 = testee.getMessageDigest();\n\t\tfinal MessageDigest md2 = testee.getMessageDigest();\n\n\t\tAssertions.assertThat(md1 != md2).isTrue();\n\n\t\tAssertions.assertThat(md1.getAlgorithm()).isEqualTo(md2.getAlgorithm());\n\t\tAssertions.assertThat(md1.getDigestLength()).isEqualTo(md2.getDigestLength());\n\t\tAssertions.assertThat(md1.getProvider()).isEqualTo(md2.getProvider());\n\t\tAssertions.assertThat(md1.toString()).isEqualTo(md2.toString());",
                "is_abstract": "",
                "class_name": "JdkSha256HexIdGeneratorTest",
                "annotations": []
            },
            {
                "name": "messageDigestReturnsInstancesWithIndependentAndReproducibleDigests",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "final String updateString1 = \"md1_update\";\n\t\tfinal String updateString2 = \"md2_update\";\n\t\tfinal Charset charset = StandardCharsets.UTF_8;\n\n\t\tfinal byte[] md1BytesFirstTry = testee.getMessageDigest().digest(updateString1.getBytes(charset));\n\t\tfinal byte[] md2BytesFirstTry = testee.getMessageDigest().digest(updateString2.getBytes(charset));\n\t\tfinal byte[] md1BytesSecondTry = testee.getMessageDigest().digest(updateString1.getBytes(charset));\n\t\tfinal byte[] md2BytesSecondTry = testee.getMessageDigest().digest(updateString2.getBytes(charset));\n\n\t\tAssertions.assertThat(md1BytesFirstTry).isNotEqualTo(md2BytesFirstTry);\n\n\t\tAssertions.assertThat(md1BytesFirstTry).isEqualTo(md1BytesSecondTry);\n\t\tAssertions.assertThat(md2BytesFirstTry).isEqualTo(md2BytesSecondTry);",
                "is_abstract": "",
                "class_name": "JdkSha256HexIdGeneratorTest",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/test/java/org/springframework/ai/parser/BeanOutputParserTest.java",
        "class_names": [
            "TestClassWithJsonAnnotations",
            "BeanOutputParserTest",
            "TestClass",
            "FormatTest",
            "ParserTest"
        ],
        "imports": "import com.fasterxml.jackson.core.JsonProcessingException;\nimport org.junit.jupiter.api.Nested;\nimport org.mockito.Mock;\nimport static org.mockito.ArgumentMatchers.anyString;\nimport com.fasterxml.jackson.annotation.JsonPropertyDescription;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.mockito.ArgumentMatchers.eq;\nimport org.junit.jupiter.api.Test;\nimport static org.mockito.Mockito.when;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport com.fasterxml.jackson.databind.DeserializationFeature;\nimport org.mockito.junit.jupiter.MockitoExtension;",
        "package_import_paths": {
            "org.springframework.ai.parser.BeanOutputParserTest": "org.springframework.ai.parser.BeanOutputParserTest",
            "org.springframework.ai.parser.ParserTest": "org.springframework.ai.parser.ParserTest",
            "org.springframework.ai.parser.FormatTest": "org.springframework.ai.parser.FormatTest",
            "org.springframework.ai.parser.TestClass": "org.springframework.ai.parser.TestClass",
            "org.springframework.ai.parser.TestClassWithJsonAnnotations": "org.springframework.ai.parser.TestClassWithJsonAnnotations",
            "org.springframework.ai.parser.shouldHavePreconfiguredDefaultObjectMapper": "org.springframework.ai.parser.shouldHavePreconfiguredDefaultObjectMapper",
            "org.springframework.ai.parser.shouldUseProvidedObjectMapperForParsin": "org.springframework.ai.parser.shouldUseProvidedObjectMapperForParsin",
            "org.springframework.ai.parser.shouldParseFieldNamesFromStrin": "org.springframework.ai.parser.shouldParseFieldNamesFromStrin",
            "org.springframework.ai.parser.shouldParseJsonPropertiesFromStrin": "org.springframework.ai.parser.shouldParseJsonPropertiesFromStrin",
            "org.springframework.ai.parser.shouldReturnFormatContainingResponseInstructionsAndJsonSchem": "org.springframework.ai.parser.shouldReturnFormatContainingResponseInstructionsAndJsonSchem",
            "org.springframework.ai.parser.shouldReturnFormatContainingJsonSchemaIncludingPropertyAndPropertyDescription": "org.springframework.ai.parser.shouldReturnFormatContainingJsonSchemaIncludingPropertyAndPropertyDescription",
            "org.springframework.ai.parser.normalizesLineEndings": "org.springframework.ai.parser.normalizesLineEndings",
            "org.springframework.ai.parser.getSomeStrin": "org.springframework.ai.parser.getSomeStrin",
            "org.springframework.ai.parser.privat": "org.springframework.ai.parser.privat",
            "org.springframework.ai.parser.someStrin": "org.springframework.ai.parser.someStrin"
        },
        "package": "package org.springframework.ai.parser;",
        "property_declarations": [
            "@Mock\n\tprivate ObjectMapper objectMapperMock;",
            "private String someString;",
            "@JsonProperty(\"string_property\")\n\t\t@JsonPropertyDescription(\"string_property_description\")\n\t\tprivate String someString;"
        ],
        "functions": [
            {
                "name": "shouldHavePreconfiguredDefaultObjectMapper",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var parser = new BeanOutputParser<>(TestClass.class);\n\t\tvar objectMapper = parser.getObjectMapper();\n\t\tassertThat(objectMapper.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)).isFalse();",
                "is_abstract": "",
                "class_name": "BeanOutputParserTest",
                "annotations": []
            },
            {
                "name": "shouldUseProvidedObjectMapperForParsing",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var testClass = new TestClass(\"some string\");\n\t\twhen(objectMapperMock.readValue(anyString(), eq(TestClass.class))).thenReturn(testClass);\n\t\tvar parser = new BeanOutputParser<>(TestClass.class, objectMapperMock);\n\t\tassertThat(parser.parse(\"{}\")).isEqualTo(testClass);",
                "is_abstract": "",
                "class_name": "BeanOutputParserTest",
                "annotations": []
            },
            {
                "name": "shouldParseFieldNamesFromString",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var parser = new BeanOutputParser<>(TestClass.class);\n\t\t\tvar testClass = parser.parse(\"{ \\\"someString\\\": \\\"some value\\\" }\");\n\t\t\tassertThat(testClass.getSomeString()).isEqualTo(\"some value\");",
                "is_abstract": "",
                "class_name": "BeanOutputParserTest ParserTest",
                "annotations": []
            },
            {
                "name": "shouldParseJsonPropertiesFromString",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var parser = new BeanOutputParser<>(TestClassWithJsonAnnotations.class);\n\t\t\tvar testClass = parser.parse(\"{ \\\"string_property\\\": \\\"some value\\\" }\");\n\t\t\tassertThat(testClass.getSomeString()).isEqualTo(\"some value\");",
                "is_abstract": "",
                "class_name": "BeanOutputParserTest ParserTest",
                "annotations": []
            },
            {
                "name": "shouldReturnFormatContainingResponseInstructionsAndJsonSchema",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var parser = new BeanOutputParser<>(TestClass.class);\n\t\t\tassertThat(parser.getFormat()).isEqualTo(\n\t\t\t\t\t\"\"\"\n\t\t\t\t\t\t\tYour response should be in JSON format.\n\t\t\t\t\t\t\tDo not include any explanations, only provide a RFC8259 compliant JSON response following this format without deviation.\n\t\t\t\t\t\t\tDo not include markdown code blocks in your response.\n\t\t\t\t\t\t\tHere is the JSON Schema instance your output must adhere to:\n\t\t\t\t\t\t\t```{\n\t\t\t\t\t\t\t  \"$schema\" : \"https://json-schema.org/draft/2020-12/schema\",\n\t\t\t\t\t\t\t  \"type\" : \"object\",\n\t\t\t\t\t\t\t  \"properties\" : {\n\t\t\t\t\t\t\t    \"someString\" : {\n\t\t\t\t\t\t\t      \"type\" : \"string\"\n\t\t\t\t\t\t\t    }\n\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t}```\n\t\t\t\t\t\t\t\"\"\");",
                "is_abstract": "",
                "class_name": "BeanOutputParserTest ParserTest FormatTest",
                "annotations": []
            },
            {
                "name": "shouldReturnFormatContainingJsonSchemaIncludingPropertyAndPropertyDescription",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var parser = new BeanOutputParser<>(TestClassWithJsonAnnotations.class);\n\t\t\tassertThat(parser.getFormat()).contains(\"\"\"\n\t\t\t\t\t```{\n\t\t\t\t\t  \"$schema\" : \"https://json-schema.org/draft/2020-12/schema\",\n\t\t\t\t\t  \"type\" : \"object\",\n\t\t\t\t\t  \"properties\" : {\n\t\t\t\t\t    \"string_property\" : {\n\t\t\t\t\t      \"type\" : \"string\",\n\t\t\t\t\t      \"description\" : \"string_property_description\"\n\t\t\t\t\t    }\n\t\t\t\t\t  }\n\t\t\t\t\t}```\n\t\t\t\t\t\"\"\");",
                "is_abstract": "",
                "class_name": "BeanOutputParserTest ParserTest FormatTest",
                "annotations": []
            },
            {
                "name": "normalizesLineEndings",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "BeanOutputParser<TestClass> parser = new BeanOutputParser<>(TestClass.class);\n\n\t\t\tString formatOutput = parser.getFormat();\n\n\t\t\t// validate that output contains \\n line endings\n\t\t\tassertThat(formatOutput).contains(System.lineSeparator()).doesNotContain(\"\\r\\n\").doesNotContain(\"\\r\");",
                "is_abstract": "",
                "class_name": "BeanOutputParserTest ParserTest FormatTest",
                "annotations": [
                    "@SuppressWarnings(\"unused\")"
                ]
            },
            {
                "name": "getSomeString",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return someString;",
                "is_abstract": "",
                "class_name": "BeanOutputParserTest ParserTest FormatTest TestClass",
                "annotations": [
                    "@JsonProperty(\"string_property\")",
                    "@JsonPropertyDescription(\"string_property_description\")"
                ]
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/test/java/org/springframework/ai/prompt/ChatTests.java",
        "class_names": [
            "ChatTests"
        ],
        "imports": "",
        "package_import_paths": {
            "org.springframework.ai.prompt.ChatTests": "org.springframework.ai.prompt.ChatTests"
        },
        "package": "package org.springframework.ai.prompt;",
        "property_declarations": [],
        "functions": []
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/test/java/org/springframework/ai/prompt/PromptTests.java",
        "class_names": [
            "PromptTests"
        ],
        "imports": "import org.springframework.ai.chat.prompt.Prompt;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport java.util.Map;\nimport org.springframework.ai.chat.prompt.SystemPromptTemplate;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.chat.prompt.PromptTemplate;\nimport java.util.HashMap;\nimport java.util.Set;\nimport org.assertj.core.api.Assertions;",
        "package_import_paths": {
            "org.springframework.ai.prompt.PromptTests": "org.springframework.ai.prompt.PromptTests",
            "org.springframework.ai.prompt.newApiPlaygroundTests": "org.springframework.ai.prompt.newApiPlaygroundTests",
            "org.springframework.ai.prompt.testSingleInputVariabl": "org.springframework.ai.prompt.testSingleInputVariabl",
            "org.springframework.ai.prompt.testMultipleInputVariables": "org.springframework.ai.prompt.testMultipleInputVariables",
            "org.springframework.ai.prompt.testMultipleInputVariablesWithRepeats": "org.springframework.ai.prompt.testMultipleInputVariablesWithRepeats",
            "org.springframework.ai.prompt.testBadFormatOfTemplateStrin": "org.springframework.ai.prompt.testBadFormatOfTemplateStrin"
        },
        "package": "package org.springframework.ai.prompt;",
        "property_declarations": [],
        "functions": [
            {
                "name": "newApiPlaygroundTests",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// Create a String, a PromptValue or Messages\n\t\tString templateText = \"Hello '{firstName}' '{lastName}' from Unix\";\n\t\tPromptTemplate pt = new PromptTemplate(templateText);\n\n\t\tfinal Map<String, Object> model = new HashMap<>();\n\t\tmodel.put(\"firstName\", \"Nick\");\n\n\t\t// Try to render with missing value for template variable, expect exception\n\t\tAssertions.assertThatThrownBy(() -> {\n\t\t\tString promptString = pt.render(model);\n\t\t})\n\t\t\t.isInstanceOf(IllegalStateException.class)\n\t\t\t.hasMessage(\"All template variables were not replaced. Missing variable names are [lastName]\");\n\n\t\tpt.add(\"lastName\", \"Park\"); // TODO investigate partial\n\t\tString promptString = pt.render(model);\n\t\tassertThat(promptString).isEqualTo(\"Hello 'Nick' 'Park' from Unix\");\n\n\t\tpromptString = pt.render(model); // render again\n\t\tassertThat(promptString).isEqualTo(\"Hello 'Nick' 'Park' from Unix\");\n\n\t\t// to have access to Messages\n\t\tPrompt prompt = pt.create(model);\n\t\tassertThat(prompt.getContents()).isNotNull();\n\t\tassertThat(prompt.getInstructions()).isNotEmpty().hasSize(1);\n\t\tSystem.out.println(prompt.getContents());\n\n\t\tString systemTemplate = \"You are a helpful assistant that translates {input_language} to {output_language}.\";\n\t\t// system_message_prompt = SystemMessagePromptTemplate.from_template(template)\n\n\t\tMap<String, Object> systemModel = new HashMap();\n\t\tsystemModel.put(\"input_language\", \"English\");\n\t\tsystemModel.put(\"output_language\", \"French\");\n\n\t\tString humanTemplate = \"{text}\";\n\t\tMap<String, Object> humanModel = new HashMap();\n\t\thumanModel.put(\"text\", \"I love programming\");\n\t\t// human_message_prompt = HumanMessagePromptTemplate.from_template(human_template)\n\n\t\t/*\n\t\t * chat_prompt = ChatPromptTemplate.from_messages([system_message_prompt,\n\t\t * human_message_prompt])\n\t\t *\n\t\t * # get a chat completion from the formatted messages\n\t\t * chat_prompt.format_prompt(input_language=\"English\", output_language=\"French\",\n\t\t * text=\"I love programming.\").to_messages()\n\t\t */\n\t\tPromptTemplate promptTemplate = new SystemPromptTemplate(systemTemplate);\n\t\tPrompt systemPrompt = promptTemplate.create(systemModel);\n\n\t\tpromptTemplate = new PromptTemplate(humanTemplate); // creates a Prompt with\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// HumanMessage\n\t\tPrompt humanPrompt = promptTemplate.create(humanModel);\n\n\t\t// ChatPromptTemplate chatPromptTemplate = new ChatPromptTemplate(systemPrompt,\n\t\t// humanPrompt);\n\t\t// Prompt chatPrompt chatPromptTemplate.create(generative);",
                "is_abstract": "",
                "class_name": "PromptTests",
                "annotations": []
            },
            {
                "name": "testSingleInputVariable",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String template = \"This is a {foo} test\";\n\t\tPromptTemplate promptTemplate = new PromptTemplate(template);\n\t\tSet<String> inputVariables = promptTemplate.getInputVariables();\n\t\tassertThat(inputVariables).isNotEmpty();\n\t\tassertThat(inputVariables).hasSize(1);\n\t\tassertThat(inputVariables).contains(\"foo\");",
                "is_abstract": "",
                "class_name": "PromptTests",
                "annotations": []
            },
            {
                "name": "testMultipleInputVariables",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String template = \"This {bar} is a {foo} test\";\n\t\tPromptTemplate promptTemplate = new PromptTemplate(template);\n\t\tSet<String> inputVariables = promptTemplate.getInputVariables();\n\t\tassertThat(inputVariables).isNotEmpty();\n\t\tassertThat(inputVariables).hasSize(2);\n\t\tassertThat(inputVariables).contains(\"foo\", \"bar\");",
                "is_abstract": "",
                "class_name": "PromptTests",
                "annotations": []
            },
            {
                "name": "testMultipleInputVariablesWithRepeats",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String template = \"This {bar} is a {foo} test {foo}.\";\n\t\tPromptTemplate promptTemplate = new PromptTemplate(template);\n\t\tSet<String> inputVariables = promptTemplate.getInputVariables();\n\t\tassertThat(inputVariables).isNotEmpty();\n\t\tassertThat(inputVariables).hasSize(2);\n\t\tassertThat(inputVariables).contains(\"foo\", \"bar\");",
                "is_abstract": "",
                "class_name": "PromptTests",
                "annotations": []
            },
            {
                "name": "testBadFormatOfTemplateString",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String template = \"This is a {foo test\";\n\t\tAssertions.assertThatThrownBy(() -> {\n\t\t\tnew PromptTemplate(template);\n\t\t}).isInstanceOf(IllegalArgumentException.class).hasMessage(\"The template string is not valid.\");",
                "is_abstract": "",
                "class_name": "PromptTests",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/test/java/org/springframework/ai/prompt/PromptTemplateTest.java",
        "class_names": [
            "PromptTemplateTest"
        ],
        "imports": "import java.io.ByteArrayInputStream;\nimport java.nio.charset.Charset;\nimport java.util.Map;\nimport org.springframework.ai.chat.prompt.PromptTemplate;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.Disabled;\nimport java.util.HashMap;\nimport org.springframework.core.io.Resource;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport org.springframework.core.io.InputStreamResource;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport java.io.InputStream;",
        "package_import_paths": {
            "org.springframework.ai.prompt.PromptTemplateTest": "org.springframework.ai.prompt.PromptTemplateTest",
            "org.springframework.ai.prompt.testRender": "org.springframework.ai.prompt.testRender",
            "org.springframework.ai.prompt.Disabled": "org.springframework.ai.prompt.Disabled",
            "org.springframework.ai.prompt.testRenderFailur": "org.springframework.ai.prompt.testRenderFailur"
        },
        "package": "package org.springframework.ai.prompt;",
        "property_declarations": [],
        "functions": [
            {
                "name": "testRender",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// Create a map with string keys and object values to serve as a generative for\n\t\t// testing\n\t\tMap<String, Object> model = new HashMap<>();\n\t\tmodel.put(\"key1\", \"value1\");\n\t\tmodel.put(\"key2\", true);\n\t\tmodel.put(\"key3\", 100);\n\n\t\t// Create a simple template with placeholders for keys in the generative\n\t\tString template = \"This is a {key1}, it is {key2}, and it costs {key3}\";\n\t\tPromptTemplate promptTemplate = new PromptTemplate(template, model);\n\n\t\t// The expected result after rendering the template with the generative\n\t\tString expected = \"This is a value1, it is true, and it costs 100\";\n\t\tString result = promptTemplate.render();\n\n\t\t// Check that the rendered string matches the expected result\n\t\tassertEquals(expected, result);\n\n\t\tmodel.put(\"key3\", 200);\n\t\texpected = \"This is a value1, it is true, and it costs 200\";\n\t\tresult = promptTemplate.render(model);\n\t\tassertEquals(expected, result);",
                "is_abstract": "",
                "class_name": "PromptTemplateTest",
                "annotations": []
            },
            {
                "name": "Disabled",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// Create a map with string keys and object values to serve as a generative for\n\t\t// testing\n\t\tMap<String, Object> model = new HashMap<>();\n\t\tmodel.put(\"key1\", \"value1\");\n\t\tmodel.put(\"key2\", true);\n\n\t\t// Create an input stream for the resource\n\t\tInputStream inputStream = new ByteArrayInputStream(\"it costs 100\".getBytes(Charset.defaultCharset()));\n\t\tResource resource = new InputStreamResource(inputStream);\n\n\t\tmodel.put(\"key3\", resource);\n\n\t\t// Create a simple template with placeholders for keys in the generative\n\t\tString template = \"{key1}, {key2}, {key3}\";\n\t\tPromptTemplate promptTemplate = new PromptTemplate(template, model);\n\n\t\t// The expected result after rendering the template with the generative\n\t\tString expected = \"value1, true, it costs 100\";\n\t\tString result = promptTemplate.render();\n\n\t\t// Check that the rendered string matches the expected result\n\t\tassertEquals(expected, result);",
                "is_abstract": "",
                "class_name": "PromptTemplateTest",
                "annotations": [
                    "@Disabled(\"Need to improve PromptTemplate to better handle Resource toString and tracking with 'dynamicModel' for underlying StringTemplate\")"
                ]
            },
            {
                "name": "testRenderFailure",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// Create a map with string keys and object values to serve as a generative for\n\t\t// testing\n\t\tMap<String, Object> model = new HashMap<>();\n\t\tmodel.put(\"key1\", \"value1\");\n\n\t\t// Create a simple template that includes a key not present in the generative\n\t\tString template = \"This is a {key2}!\";\n\t\tPromptTemplate promptTemplate = new PromptTemplate(template, model);\n\n\t\t// Rendering the template with a missing key should throw an exception\n\t\tassertThrows(IllegalStateException.class, promptTemplate::render);",
                "is_abstract": "",
                "class_name": "PromptTemplateTest",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/test/java/org/springframework/ai/prompt/parsers/ListOutputParserTest.java",
        "class_names": [
            "ListOutputParserTest"
        ],
        "imports": "import java.util.List;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.springframework.core.convert.support.DefaultConversionService;\nimport org.springframework.ai.parser.ListOutputParser;\nimport org.junit.jupiter.api.Test;",
        "package_import_paths": {
            "org.springframework.ai.prompt.parsers.ListOutputParserTest": "org.springframework.ai.prompt.parsers.ListOutputParserTest",
            "org.springframework.ai.prompt.parsers.csv": "org.springframework.ai.prompt.parsers.csv"
        },
        "package": "package org.springframework.ai.prompt.parsers;",
        "property_declarations": [],
        "functions": [
            {
                "name": "csv",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String csvAsString = \"foo, bar, baz\";\n\t\tListOutputParser listOutputParser = new ListOutputParser(new DefaultConversionService());\n\t\tList<String> list = listOutputParser.parse(csvAsString);\n\t\tassertThat(list).containsExactlyElementsOf(List.of(\"foo\", \"bar\", \"baz\"));",
                "is_abstract": "",
                "class_name": "ListOutputParserTest",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/test/java/org/springframework/ai/model/ModelOptionsUtilsTests.java",
        "class_names": [
            "TestPortableOptionsImpl",
            "ModelOptionsUtilsTests",
            "TestSpecificOptions"
        ],
        "imports": "import static org.assertj.core.api.Assertions.assertThat;\nimport java.util.Map;\nimport org.junit.jupiter.api.Test;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport static org.assertj.core.api.Assertions.assertThatThrownBy;",
        "package_import_paths": {
            "org.springframework.ai.model.ModelOptionsUtilsTests": "org.springframework.ai.model.ModelOptionsUtilsTests",
            "org.springframework.ai.model.TestPortableOptionsImpl": "org.springframework.ai.model.TestPortableOptionsImpl",
            "org.springframework.ai.model.TestSpecificOptions": "org.springframework.ai.model.TestSpecificOptions",
            "org.springframework.ai.model.getNam": "org.springframework.ai.model.getNam",
            "org.springframework.ai.model.setNam": "org.springframework.ai.model.setNam",
            "org.springframework.ai.model.getA": "org.springframework.ai.model.getA",
            "org.springframework.ai.model.setA": "org.springframework.ai.model.setA",
            "org.springframework.ai.model.getNonInterfaceField": "org.springframework.ai.model.getNonInterfaceField",
            "org.springframework.ai.model.setNonInterfaceField": "org.springframework.ai.model.setNonInterfaceField",
            "org.springframework.ai.model.getSpecificField": "org.springframework.ai.model.getSpecificField",
            "org.springframework.ai.model.setSpecificField": "org.springframework.ai.model.setSpecificField",
            "org.springframework.ai.model.toStrin": "org.springframework.ai.model.toStrin",
            "org.springframework.ai.model.mer": "org.springframework.ai.model.mer",
            "org.springframework.ai.model.objectToM": "org.springframework.ai.model.objectToM",
            "org.springframework.ai.model.mapToClass": "org.springframework.ai.model.mapToClass",
            "org.springframework.ai.model.mergeBeans": "org.springframework.ai.model.mergeBeans",
            "org.springframework.ai.model.copyToTarget": "org.springframework.ai.model.copyToTarget",
            "org.springframework.ai.model.getJsonPropertyValues": "org.springframework.ai.model.getJsonPropertyValues",
            "org.springframework.ai.model.nam": "org.springframework.ai.model.nam",
            "org.springframework.ai.model.": "org.springframework.ai.model.",
            "org.springframework.ai.model.nonInterfaceField": "org.springframework.ai.model.nonInterfaceField",
            "org.springframework.ai.model.specificField": "org.springframework.ai.model.specificField"
        },
        "package": "package org.springframework.ai.model;",
        "property_declarations": [
            "@JsonProperty(\"name\")\n\t\tprivate String name;",
            "@JsonProperty(\"specificField\")\n\t\tprivate String specificField;",
            "private String nonInterfaceField;",
            "private String name;",
            "private Integer age;",
            "@JsonProperty(\"age\")\n\t\tprivate Integer age;"
        ],
        "functions": [
            {
                "name": "getName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "ModelOptionsUtilsTests",
                "annotations": []
            },
            {
                "name": "setName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "ModelOptionsUtilsTests",
                "annotations": []
            },
            {
                "name": "getAge",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "ModelOptionsUtilsTests",
                "annotations": []
            },
            {
                "name": "setAge",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "ModelOptionsUtilsTests",
                "annotations": []
            },
            {
                "name": "getNonInterfaceField",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return nonInterfaceField;",
                "is_abstract": "",
                "class_name": "ModelOptionsUtilsTests TestPortableOptionsImpl",
                "annotations": []
            },
            {
                "name": "setNonInterfaceField",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.nonInterfaceField = nonInterfaceField;",
                "is_abstract": "",
                "class_name": "ModelOptionsUtilsTests TestPortableOptionsImpl",
                "annotations": [
                    "@JsonProperty(\"specificField\")",
                    "@JsonProperty(\"name\")",
                    "@JsonProperty(\"age\")"
                ]
            },
            {
                "name": "getSpecificField",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return specificField;",
                "is_abstract": "",
                "class_name": "ModelOptionsUtilsTests TestPortableOptionsImpl TestSpecificOptions",
                "annotations": []
            },
            {
                "name": "setSpecificField",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.specificField = modelSpecificField;",
                "is_abstract": "",
                "class_name": "ModelOptionsUtilsTests TestPortableOptionsImpl TestSpecificOptions",
                "annotations": []
            },
            {
                "name": "toString",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return \"TestModelSpecificOptions{\" + \"specificField='\" + specificField + '\\'' + \", name='\" + name + '\\''\n\t\t\t\t\t+ \", age=\" + age + '}';",
                "is_abstract": "",
                "class_name": "ModelOptionsUtilsTests TestPortableOptionsImpl TestSpecificOptions",
                "annotations": []
            },
            {
                "name": "merge",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "TestPortableOptionsImpl portableOptions = new TestPortableOptionsImpl();\n\t\tportableOptions.setName(\"John\");\n\t\tportableOptions.setAge(30);\n\t\tportableOptions.setNonInterfaceField(\"NonInterfaceField\");\n\n\t\tTestSpecificOptions specificOptions = new TestSpecificOptions();\n\t\tspecificOptions.setName(\"Mike\");\n\t\tspecificOptions.setSpecificField(\"SpecificField\");\n\n\t\tassertThatThrownBy(() -> {\n\t\t\tModelOptionsUtils.merge(portableOptions, specificOptions, TestPortableOptionsImpl.class);\n\t\t}).isInstanceOf(IllegalArgumentException.class).hasMessageContaining(\"No @JsonProperty fields found in the \");\n\n\t\tvar specificOptions2 = ModelOptionsUtils.merge(portableOptions, specificOptions, TestSpecificOptions.class);\n\n\t\tassertThat(specificOptions2.getAge()).isEqualTo(30);\n\t\tassertThat(specificOptions2.getName()).isEqualTo(\"John\"); // !!! Overridden by the\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// portableOptions\n\t\tassertThat(specificOptions2.getSpecificField()).isEqualTo(\"SpecificField\");",
                "is_abstract": "",
                "class_name": "ModelOptionsUtilsTests TestPortableOptionsImpl TestSpecificOptions",
                "annotations": []
            },
            {
                "name": "objectToMap",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "TestPortableOptionsImpl portableOptions = new TestPortableOptionsImpl();\n\t\tportableOptions.setName(\"John\");\n\t\tportableOptions.setAge(30);\n\t\tportableOptions.setNonInterfaceField(\"NonInterfaceField\");\n\n\t\tMap<String, Object> map = ModelOptionsUtils.objectToMap(portableOptions);\n\n\t\tassertThat(map).containsEntry(\"name\", \"John\");\n\t\tassertThat(map).containsEntry(\"age\", 30);\n\t\tassertThat(map).containsEntry(\"nonInterfaceField\", \"NonInterfaceField\");",
                "is_abstract": "",
                "class_name": "ModelOptionsUtilsTests TestPortableOptionsImpl TestSpecificOptions",
                "annotations": []
            },
            {
                "name": "mapToClass",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "TestPortableOptionsImpl portableOptions = ModelOptionsUtils.mapToClass(\n\t\t\t\tMap.of(\"name\", \"John\", \"age\", 30, \"nonInterfaceField\", \"NonInterfaceField\"),\n\t\t\t\tTestPortableOptionsImpl.class);\n\n\t\tassertThat(portableOptions.getName()).isEqualTo(\"John\");\n\t\tassertThat(portableOptions.getAge()).isEqualTo(30);\n\t\tassertThat(portableOptions.getNonInterfaceField()).isEqualTo(\"NonInterfaceField\");",
                "is_abstract": "",
                "class_name": "ModelOptionsUtilsTests TestPortableOptionsImpl TestSpecificOptions",
                "annotations": []
            },
            {
                "name": "mergeBeans",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var portableOptions = new TestPortableOptionsImpl();\n\t\tportableOptions.setName(\"John\");\n\t\tportableOptions.setAge(30);\n\t\tportableOptions.setNonInterfaceField(\"NonInterfaceField\");\n\n\t\tvar specificOptions = new TestSpecificOptions();\n\n\t\tspecificOptions.setName(\"Mike\");\n\t\tspecificOptions.setAge(60);\n\t\tspecificOptions.setSpecificField(\"SpecificField\");\n\n\t\tTestSpecificOptions specificOptions2 = ModelOptionsUtils.mergeBeans(portableOptions, specificOptions,\n\t\t\t\tTestPortableOptions.class, false);\n\n\t\tassertThat(specificOptions2.getAge()).isEqualTo(60);\n\t\tassertThat(specificOptions2.getName()).isEqualTo(\"Mike\");\n\t\tassertThat(specificOptions2.getSpecificField()).isEqualTo(\"SpecificField\");\n\n\t\tTestSpecificOptions specificOptionsWithOverride = ModelOptionsUtils.mergeBeans(portableOptions, specificOptions,\n\t\t\t\tTestPortableOptions.class, true);\n\n\t\tassertThat(specificOptionsWithOverride.getAge()).isEqualTo(30);\n\t\tassertThat(specificOptionsWithOverride.getName()).isEqualTo(\"John\");\n\t\tassertThat(specificOptionsWithOverride.getSpecificField()).isEqualTo(\"SpecificField\");",
                "is_abstract": "",
                "class_name": "ModelOptionsUtilsTests TestPortableOptionsImpl TestSpecificOptions",
                "annotations": []
            },
            {
                "name": "copyToTarget",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var portableOptions = new TestPortableOptionsImpl();\n\t\tportableOptions.setName(\"John\");\n\t\tportableOptions.setAge(30);\n\t\tportableOptions.setNonInterfaceField(\"NonInterfaceField\");\n\n\t\tTestSpecificOptions target = ModelOptionsUtils.copyToTarget(portableOptions, TestPortableOptions.class,\n\t\t\t\tTestSpecificOptions.class);\n\n\t\tassertThat(target.getAge()).isEqualTo(30);\n\t\tassertThat(target.getName()).isEqualTo(\"John\");\n\t\tassertThat(target.getSpecificField()).isNull();",
                "is_abstract": "",
                "class_name": "ModelOptionsUtilsTests TestPortableOptionsImpl TestSpecificOptions",
                "annotations": []
            },
            {
                "name": "getJsonPropertyValues",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "record TestRecord(@JsonProperty(\"field1\") String fieldA, @JsonProperty(\"field2\") String fieldB) {\n\t\t}\n\t\tassertThat(ModelOptionsUtils.getJsonPropertyValues(TestRecord.class)).hasSize(2);\n\t\tassertThat(ModelOptionsUtils.getJsonPropertyValues(TestRecord.class)).containsExactly(\"field1\", \"field2\");",
                "is_abstract": "",
                "class_name": "ModelOptionsUtilsTests TestPortableOptionsImpl TestSpecificOptions",
                "annotations": [
                    "@JsonProperty(\"field1\")",
                    "@JsonProperty(\"field2\")"
                ]
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/test/java/org/springframework/ai/model/function/TypeResolverHelperTests.java",
        "class_names": [
            "OutputFunctionConverter",
            "TypeResolverHelperTests",
            "MockWeatherService"
        ],
        "imports": "import com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport com.fasterxml.jackson.annotation.JsonPropertyDescription;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.model.function.TypeResolverHelperTests.MockWeatherService.Request;\nimport java.util.function.Function;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport com.fasterxml.jackson.annotation.JsonClassDescription;\nimport org.springframework.ai.model.function.TypeResolverHelperTests.MockWeatherService.Response;",
        "package_import_paths": {
            "org.springframework.ai.model.function.TypeResolverHelperTests": "org.springframework.ai.model.function.TypeResolverHelperTests",
            "org.springframework.ai.model.function.OutputFunctionConverter": "org.springframework.ai.model.function.OutputFunctionConverter",
            "org.springframework.ai.model.function.MockWeatherServi": "org.springframework.ai.model.function.MockWeatherServi",
            "org.springframework.ai.model.function.testGetFunctionInputTy": "org.springframework.ai.model.function.testGetFunctionInputTy",
            "org.springframework.ai.model.function.testGetFunctionOutputTy": "org.springframework.ai.model.function.testGetFunctionOutputTy",
            "org.springframework.ai.model.function.testGetFunctionInputTypeForInstan": "org.springframework.ai.model.function.testGetFunctionInputTypeForInstan",
            "org.springframework.ai.model.function.apply": "org.springframework.ai.model.function.apply"
        },
        "package": "package org.springframework.ai.model.function;",
        "property_declarations": [],
        "functions": [
            {
                "name": "testGetFunctionInputType",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Class<?> inputType = TypeResolverHelper.getFunctionInputClass(MockWeatherService.class);\n\t\tassertThat(inputType).isEqualTo(Request.class);",
                "is_abstract": "",
                "class_name": "TypeResolverHelperTests",
                "annotations": []
            },
            {
                "name": "testGetFunctionOutputType",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Class<?> outputType = TypeResolverHelper.getFunctionOutputClass(MockWeatherService.class);\n\t\tassertThat(outputType).isEqualTo(Response.class);",
                "is_abstract": "",
                "class_name": "TypeResolverHelperTests",
                "annotations": []
            },
            {
                "name": "testGetFunctionInputTypeForInstance",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "MockWeatherService service = new MockWeatherService();\n\t\tClass<?> inputType = TypeResolverHelper.getFunctionInputClass(service.getClass());\n\t\tassertThat(inputType).isEqualTo(Request.class);",
                "is_abstract": "",
                "class_name": "TypeResolverHelperTests",
                "annotations": []
            },
            {
                "name": "apply",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return response.temp + \" \" + response.unit;",
                "is_abstract": "",
                "class_name": "TypeResolverHelperTests OutputFunctionConverter",
                "annotations": [
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonClassDescription(\"Weather API request\")",
                    "@JsonProperty(required = true,\n\t\t\t\tvalue = \"location\")",
                    "@JsonPropertyDescription(\"The city and state e.g. San Francisco, CA\")",
                    "@JsonProperty(required = true, value = \"lat\")",
                    "@JsonPropertyDescription(\"The city latitude\")",
                    "@JsonProperty(required = true, value = \"lon\")",
                    "@JsonPropertyDescription(\"The city longitude\")",
                    "@JsonProperty(required = true,\n\t\t\t\t\t\tvalue = \"unit\")",
                    "@JsonPropertyDescription(\"Temperature unit\")"
                ]
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/test/java/org/springframework/ai/metadata/UsageTests.java",
        "class_names": [
            "UsageTests"
        ],
        "imports": "import static org.mockito.Mockito.doReturn;\nimport static org.mockito.Mockito.doCallRealMethod;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.mockito.Mockito.times;\nimport static org.mockito.Mockito.mock;\nimport org.springframework.ai.chat.metadata.Usage;\nimport org.junit.jupiter.api.Test;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.verifyNoMoreInteractions;",
        "package_import_paths": {
            "org.springframework.ai.metadata.UsageTests": "org.springframework.ai.metadata.UsageTests",
            "org.springframework.ai.metadata.mockUs": "org.springframework.ai.metadata.mockUs",
            "org.springframework.ai.metadata.verifyUs": "org.springframework.ai.metadata.verifyUs",
            "org.springframework.ai.metadata.totalTokensIsZeroWhenNoPromptOrGenerationMetadataPresent": "org.springframework.ai.metadata.totalTokensIsZeroWhenNoPromptOrGenerationMetadataPresent",
            "org.springframework.ai.metadata.totalTokensEqualsPromptTokens": "org.springframework.ai.metadata.totalTokensEqualsPromptTokens",
            "org.springframework.ai.metadata.totalTokensEqualsGenerationTokens": "org.springframework.ai.metadata.totalTokensEqualsGenerationTokens",
            "org.springframework.ai.metadata.totalTokensEqualsPromptTokensPlusGenerationTokens": "org.springframework.ai.metadata.totalTokensEqualsPromptTokensPlusGenerationTokens"
        },
        "package": "package org.springframework.ai.metadata;",
        "property_declarations": [],
        "functions": [
            {
                "name": "mockUsage",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Usage mockUsage = mock(Usage.class);\n\t\tdoReturn(promptTokens).when(mockUsage).getPromptTokens();\n\t\tdoReturn(generationTokens).when(mockUsage).getGenerationTokens();\n\t\tdoCallRealMethod().when(mockUsage).getTotalTokens();\n\t\treturn mockUsage;",
                "is_abstract": "",
                "class_name": "UsageTests",
                "annotations": []
            },
            {
                "name": "verifyUsage",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "verify(usage, times(1)).getTotalTokens();\n\t\tverify(usage, times(1)).getPromptTokens();\n\t\tverify(usage, times(1)).getGenerationTokens();\n\t\tverifyNoMoreInteractions(usage);",
                "is_abstract": "",
                "class_name": "UsageTests",
                "annotations": []
            },
            {
                "name": "totalTokensIsZeroWhenNoPromptOrGenerationMetadataPresent",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Usage usage = mockUsage(null, null);\n\n\t\tassertThat(usage.getTotalTokens()).isZero();\n\t\tverifyUsage(usage);",
                "is_abstract": "",
                "class_name": "UsageTests",
                "annotations": []
            },
            {
                "name": "totalTokensEqualsPromptTokens",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Usage usage = mockUsage(10L, null);\n\n\t\tassertThat(usage.getTotalTokens()).isEqualTo(10L);\n\t\tverifyUsage(usage);",
                "is_abstract": "",
                "class_name": "UsageTests",
                "annotations": []
            },
            {
                "name": "totalTokensEqualsGenerationTokens",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Usage usage = mockUsage(null, 15L);\n\n\t\tassertThat(usage.getTotalTokens()).isEqualTo(15L);\n\t\tverifyUsage(usage);",
                "is_abstract": "",
                "class_name": "UsageTests",
                "annotations": []
            },
            {
                "name": "totalTokensEqualsPromptTokensPlusGenerationTokens",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Usage usage = mockUsage(10L, 15L);\n\n\t\tassertThat(usage.getTotalTokens()).isEqualTo(25L);\n\t\tverifyUsage(usage);",
                "is_abstract": "",
                "class_name": "UsageTests",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/test/java/org/springframework/ai/metadata/PromptMetadataTests.java",
        "class_names": [
            "PromptMetadataTests"
        ],
        "imports": "import static org.mockito.Mockito.doReturn;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.mockito.Mockito.mock;\nimport org.springframework.ai.chat.metadata.PromptMetadata;\nimport org.junit.jupiter.api.Test;\nimport static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\nimport org.springframework.ai.chat.metadata.PromptMetadata.PromptFilterMetadata;",
        "package_import_paths": {
            "org.springframework.ai.metadata.PromptMetadataTests": "org.springframework.ai.metadata.PromptMetadataTests",
            "org.springframework.ai.metadata.mockPromptFilterMetadat": "org.springframework.ai.metadata.mockPromptFilterMetadat",
            "org.springframework.ai.metadata.emptyPromptMetadat": "org.springframework.ai.metadata.emptyPromptMetadat",
            "org.springframework.ai.metadata.promptMetadataWithOneFilter": "org.springframework.ai.metadata.promptMetadataWithOneFilter",
            "org.springframework.ai.metadata.promptMetadataWithTwoFilters": "org.springframework.ai.metadata.promptMetadataWithTwoFilters",
            "org.springframework.ai.metadata.findByPromptIndex": "org.springframework.ai.metadata.findByPromptIndex",
            "org.springframework.ai.metadata.findByPromptIndexWithNoFilters": "org.springframework.ai.metadata.findByPromptIndexWithNoFilters",
            "org.springframework.ai.metadata.findByInvalidPromptIndex": "org.springframework.ai.metadata.findByInvalidPromptIndex",
            "org.springframework.ai.metadata.fromPromptIndexAndContentFilterMetadat": "org.springframework.ai.metadata.fromPromptIndexAndContentFilterMetadat"
        },
        "package": "package org.springframework.ai.metadata;",
        "property_declarations": [],
        "functions": [
            {
                "name": "mockPromptFilterMetadata",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "PromptFilterMetadata mockPromptFilterMetadata = mock(PromptFilterMetadata.class);\n\t\tdoReturn(index).when(mockPromptFilterMetadata).getPromptIndex();\n\t\treturn mockPromptFilterMetadata;",
                "is_abstract": "",
                "class_name": "PromptMetadataTests",
                "annotations": []
            },
            {
                "name": "emptyPromptMetadata",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "PromptMetadata empty = PromptMetadata.empty();\n\n\t\tassertThat(empty).isNotNull();\n\t\tassertThat(empty).isEmpty();",
                "is_abstract": "",
                "class_name": "PromptMetadataTests",
                "annotations": []
            },
            {
                "name": "promptMetadataWithOneFilter",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "PromptFilterMetadata mockPromptFilterMetadata = mockPromptFilterMetadata(0);\n\t\tPromptMetadata promptMetadata = PromptMetadata.of(mockPromptFilterMetadata);\n\n\t\tassertThat(promptMetadata).isNotNull();\n\t\tassertThat(promptMetadata).containsExactly(mockPromptFilterMetadata);",
                "is_abstract": "",
                "class_name": "PromptMetadataTests",
                "annotations": []
            },
            {
                "name": "promptMetadataWithTwoFilters",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "PromptFilterMetadata mockPromptFilterMetadataOne = mockPromptFilterMetadata(0);\n\t\tPromptFilterMetadata mockPromptFilterMetadataTwo = mockPromptFilterMetadata(1);\n\t\tPromptMetadata promptMetadata = PromptMetadata.of(mockPromptFilterMetadataOne, mockPromptFilterMetadataTwo);\n\n\t\tassertThat(promptMetadata).isNotNull();\n\t\tassertThat(promptMetadata).containsExactly(mockPromptFilterMetadataOne, mockPromptFilterMetadataTwo);",
                "is_abstract": "",
                "class_name": "PromptMetadataTests",
                "annotations": []
            },
            {
                "name": "findByPromptIndex",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "PromptFilterMetadata mockPromptFilterMetadataOne = mockPromptFilterMetadata(0);\n\t\tPromptFilterMetadata mockPromptFilterMetadataTwo = mockPromptFilterMetadata(1);\n\t\tPromptMetadata promptMetadata = PromptMetadata.of(mockPromptFilterMetadataOne, mockPromptFilterMetadataTwo);\n\n\t\tassertThat(promptMetadata).isNotNull();\n\t\tassertThat(promptMetadata).containsExactly(mockPromptFilterMetadataOne, mockPromptFilterMetadataTwo);\n\t\tassertThat(promptMetadata.findByPromptIndex(1).orElse(null)).isEqualTo(mockPromptFilterMetadataTwo);\n\t\tassertThat(promptMetadata.findByPromptIndex(0).orElse(null)).isEqualTo(mockPromptFilterMetadataOne);",
                "is_abstract": "",
                "class_name": "PromptMetadataTests",
                "annotations": []
            },
            {
                "name": "findByPromptIndexWithNoFilters",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "assertThat(PromptMetadata.empty().findByPromptIndex(0)).isNotPresent();",
                "is_abstract": "",
                "class_name": "PromptMetadataTests",
                "annotations": []
            },
            {
                "name": "findByInvalidPromptIndex",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "assertThatIllegalArgumentException().isThrownBy(() -> PromptMetadata.empty().findByPromptIndex(-1))\n\t\t\t.withMessage(\"Prompt index [-1] must be greater than equal to 0\")\n\t\t\t.withNoCause();",
                "is_abstract": "",
                "class_name": "PromptMetadataTests",
                "annotations": []
            },
            {
                "name": "fromPromptIndexAndContentFilterMetadata",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "PromptFilterMetadata promptFilterMetadata = PromptFilterMetadata.from(1, \"{ content-sentiment: 'SAFE' }\");\n\n\t\tassertThat(promptFilterMetadata).isNotNull();\n\t\tassertThat(promptFilterMetadata.getPromptIndex()).isOne();\n\t\tassertThat(promptFilterMetadata.<String>getContentFilterMetadata()).isEqualTo(\"{ content-sentiment: 'SAFE' }\");",
                "is_abstract": "",
                "class_name": "PromptMetadataTests",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/test/java/org/springframework/ai/aot/SpringAiCoreRuntimeHintsTest.java",
        "class_names": [
            "SpringAiCoreRuntimeHintsTest"
        ],
        "imports": "import static org.assertj.core.api.Assertions.assertThat;\nimport static org.springframework.aot.hint.predicate.RuntimeHintsPredicates.resource;\nimport org.springframework.aot.hint.RuntimeHints;\nimport org.springframework.ai.model.function.FunctionCallback;\nimport org.junit.jupiter.api.Test;\nimport static org.springframework.aot.hint.predicate.RuntimeHintsPredicates.reflection;",
        "package_import_paths": {
            "org.springframework.ai.aot.SpringAiCoreRuntimeHintsTest": "org.springframework.ai.aot.SpringAiCoreRuntimeHintsTest",
            "org.springframework.ai.aot.cor": "org.springframework.ai.aot.cor"
        },
        "package": "package org.springframework.ai.aot;",
        "property_declarations": [],
        "functions": [
            {
                "name": "core",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var runtimeHints = new RuntimeHints();\n\t\tvar springAiCore = new SpringAiCoreRuntimeHints();\n\t\tspringAiCore.registerHints(runtimeHints, null);\n\t\tassertThat(runtimeHints).matches(resource().forResource(\"embedding/embedding-model-dimensions.properties\"));\n\n\t\tassertThat(runtimeHints).matches(reflection().onMethod(FunctionCallback.class, \"getDescription\"));\n\t\tassertThat(runtimeHints).matches(reflection().onMethod(FunctionCallback.class, \"getInputTypeSchema\"));\n\t\tassertThat(runtimeHints).matches(reflection().onMethod(FunctionCallback.class, \"getName\"));",
                "is_abstract": "",
                "class_name": "SpringAiCoreRuntimeHintsTest",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/test/java/org/springframework/ai/aot/KnuddelsRuntimeHintsTest.java",
        "class_names": [
            "KnuddelsRuntimeHintsTest"
        ],
        "imports": "import org.junit.jupiter.api.Test;\nimport org.springframework.aot.hint.RuntimeHints;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.springframework.aot.hint.predicate.RuntimeHintsPredicates.resource;",
        "package_import_paths": {
            "org.springframework.ai.aot.KnuddelsRuntimeHintsTest": "org.springframework.ai.aot.KnuddelsRuntimeHintsTest",
            "org.springframework.ai.aot.knuddels": "org.springframework.ai.aot.knuddels"
        },
        "package": "package org.springframework.ai.aot;",
        "property_declarations": [],
        "functions": [
            {
                "name": "knuddels",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var runtimeHints = new RuntimeHints();\n\t\tvar knuddels = new KnuddelsRuntimeHints();\n\t\tknuddels.registerHints(runtimeHints, null);\n\t\tassertThat(runtimeHints).matches(resource().forResource(\"com/knuddels/jtokkit/cl100k_base.tiktoken\"));",
                "is_abstract": "",
                "class_name": "KnuddelsRuntimeHintsTest",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/test/java/org/springframework/ai/aot/AiRuntimeHintsTests.java",
        "class_names": [
            "AiRuntimeHintsTests",
            "FooBar",
            "TestApi"
        ],
        "imports": "import java.util.stream.Collectors;\nimport org.springframework.util.Assert;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport org.apache.commons.logging.LogFactory;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.aot.hint.TypeReference;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport java.util.Set;",
        "package_import_paths": {
            "org.springframework.ai.aot.AiRuntimeHintsTests": "org.springframework.ai.aot.AiRuntimeHintsTests",
            "org.springframework.ai.aot.TestApi": "org.springframework.ai.aot.TestApi",
            "org.springframework.ai.aot.FooBar": "org.springframework.ai.aot.FooBar",
            "org.springframework.ai.aot.discoverRelevantClasses": "org.springframework.ai.aot.discoverRelevantClasses"
        },
        "package": "package org.springframework.ai.aot;",
        "property_declarations": [],
        "functions": [
            {
                "name": "discoverRelevantClasses",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var classes = AiRuntimeHints.findJsonAnnotatedClassesInPackage(TestApi.class);\n\t\tvar included = Set.of(TestApi.Bar.class, TestApi.Foo.class)\n\t\t\t.stream()\n\t\t\t.map(t -> TypeReference.of(t.getName()))\n\t\t\t.collect(Collectors.toSet());\n\t\tLogFactory.getLog(getClass()).info(classes);\n\t\tAssert.state(classes.containsAll(included), \"there should be all of the enumerated classes. \");",
                "is_abstract": "",
                "class_name": "AiRuntimeHintsTests TestApi FooBar",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/test/java/org/springframework/ai/vectorstore/filter/FilterHelperTests.java",
        "class_names": [
            "FilterHelperTests",
            "InNinTestConverter"
        ],
        "imports": "import java.util.List;\nimport org.springframework.ai.vectorstore.filter.converter.PrintFilterExpressionConverter;\nimport org.springframework.ai.vectorstore.filter.Filter.ExpressionType;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.springframework.ai.vectorstore.filter.Filter.Key;\nimport org.springframework.ai.vectorstore.filter.Filter.Expression;\nimport org.springframework.ai.vectorstore.filter.Filter.Value;\nimport org.junit.jupiter.api.Test;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.filter.FilterHelperTests": "org.springframework.ai.vectorstore.filter.FilterHelperTests",
            "org.springframework.ai.vectorstore.filter.InNinTestConverter": "org.springframework.ai.vectorstore.filter.InNinTestConverter",
            "org.springframework.ai.vectorstore.filter.negateEQ": "org.springframework.ai.vectorstore.filter.negateEQ",
            "org.springframework.ai.vectorstore.filter.negateNE": "org.springframework.ai.vectorstore.filter.negateNE",
            "org.springframework.ai.vectorstore.filter.negateGT": "org.springframework.ai.vectorstore.filter.negateGT",
            "org.springframework.ai.vectorstore.filter.negateGTE": "org.springframework.ai.vectorstore.filter.negateGTE",
            "org.springframework.ai.vectorstore.filter.negateLT": "org.springframework.ai.vectorstore.filter.negateLT",
            "org.springframework.ai.vectorstore.filter.negateLTE": "org.springframework.ai.vectorstore.filter.negateLTE",
            "org.springframework.ai.vectorstore.filter.negateIN": "org.springframework.ai.vectorstore.filter.negateIN",
            "org.springframework.ai.vectorstore.filter.negateNIN": "org.springframework.ai.vectorstore.filter.negateNIN",
            "org.springframework.ai.vectorstore.filter.negateNIN2": "org.springframework.ai.vectorstore.filter.negateNIN2",
            "org.springframework.ai.vectorstore.filter.negateAND": "org.springframework.ai.vectorstore.filter.negateAND",
            "org.springframework.ai.vectorstore.filter.negateOR": "org.springframework.ai.vectorstore.filter.negateOR",
            "org.springframework.ai.vectorstore.filter.negateNot": "org.springframework.ai.vectorstore.filter.negateNot",
            "org.springframework.ai.vectorstore.filter.negateNestedNot": "org.springframework.ai.vectorstore.filter.negateNestedNot",
            "org.springframework.ai.vectorstore.filter.expandIN": "org.springframework.ai.vectorstore.filter.expandIN",
            "org.springframework.ai.vectorstore.filter.expandNIN": "org.springframework.ai.vectorstore.filter.expandNIN",
            "org.springframework.ai.vectorstore.filter.doExpression": "org.springframework.ai.vectorstore.filter.doExpression"
        },
        "package": "package org.springframework.ai.vectorstore.filter;",
        "property_declarations": [],
        "functions": [
            {
                "name": "negateEQ",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "assertThat(new FilterExpressionTextParser().parse(\"NOT key == 'UK' \")).isEqualTo(new Filter.Expression(\n\t\t\t\tExpressionType.NOT, new Filter.Expression(ExpressionType.EQ, new Key(\"key\"), new Value(\"UK\")), null));\n\n\t\tassertThat(FilterHelper.negate(new FilterExpressionTextParser().parse(\"NOT key == 'UK' \")))\n\t\t\t.isEqualTo(new Filter.Expression(ExpressionType.NE, new Key(\"key\"), new Value(\"UK\")));\n\n\t\tassertThat(FilterHelper.negate(new FilterExpressionTextParser().parse(\"NOT (key == 'UK') \")))\n\t\t\t.isEqualTo(new Filter.Group(new Filter.Expression(ExpressionType.NE, new Key(\"key\"), new Value(\"UK\"))));",
                "is_abstract": "",
                "class_name": "FilterHelperTests",
                "annotations": []
            },
            {
                "name": "negateNE",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var exp = new FilterExpressionTextParser().parse(\"NOT key != 'UK' \");\n\t\tassertThat(FilterHelper.negate(exp))\n\t\t\t.isEqualTo(new Filter.Expression(ExpressionType.EQ, new Key(\"key\"), new Value(\"UK\")));",
                "is_abstract": "",
                "class_name": "FilterHelperTests",
                "annotations": []
            },
            {
                "name": "negateGT",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var exp = new FilterExpressionTextParser().parse(\"NOT key > 13 \");\n\t\tassertThat(FilterHelper.negate(exp))\n\t\t\t.isEqualTo(new Filter.Expression(ExpressionType.LTE, new Key(\"key\"), new Value(13)));",
                "is_abstract": "",
                "class_name": "FilterHelperTests",
                "annotations": []
            },
            {
                "name": "negateGTE",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var exp = new FilterExpressionTextParser().parse(\"NOT key >= 13 \");\n\t\tassertThat(FilterHelper.negate(exp))\n\t\t\t.isEqualTo(new Filter.Expression(ExpressionType.LT, new Key(\"key\"), new Value(13)));",
                "is_abstract": "",
                "class_name": "FilterHelperTests",
                "annotations": []
            },
            {
                "name": "negateLT",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var exp = new FilterExpressionTextParser().parse(\"NOT key < 13 \");\n\t\tassertThat(FilterHelper.negate(exp))\n\t\t\t.isEqualTo(new Filter.Expression(ExpressionType.GTE, new Key(\"key\"), new Value(13)));",
                "is_abstract": "",
                "class_name": "FilterHelperTests",
                "annotations": []
            },
            {
                "name": "negateLTE",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var exp = new FilterExpressionTextParser().parse(\"NOT key <= 13 \");\n\t\tassertThat(FilterHelper.negate(exp))\n\t\t\t.isEqualTo(new Filter.Expression(ExpressionType.GT, new Key(\"key\"), new Value(13)));",
                "is_abstract": "",
                "class_name": "FilterHelperTests",
                "annotations": []
            },
            {
                "name": "negateIN",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var exp = new FilterExpressionTextParser().parse(\"NOT key IN [11, 12, 13] \");\n\t\tassertThat(FilterHelper.negate(exp))\n\t\t\t.isEqualTo(new Filter.Expression(ExpressionType.NIN, new Key(\"key\"), new Value(List.of(11, 12, 13))));",
                "is_abstract": "",
                "class_name": "FilterHelperTests",
                "annotations": []
            },
            {
                "name": "negateNIN",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var exp = new FilterExpressionTextParser().parse(\"NOT key NIN [11, 12, 13] \");\n\t\tassertThat(FilterHelper.negate(exp))\n\t\t\t.isEqualTo(new Filter.Expression(ExpressionType.IN, new Key(\"key\"), new Value(List.of(11, 12, 13))));",
                "is_abstract": "",
                "class_name": "FilterHelperTests",
                "annotations": []
            },
            {
                "name": "negateNIN2",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var exp = new FilterExpressionTextParser().parse(\"NOT key NOT IN [11, 12, 13] \");\n\t\tassertThat(FilterHelper.negate(exp))\n\t\t\t.isEqualTo(new Filter.Expression(ExpressionType.IN, new Key(\"key\"), new Value(List.of(11, 12, 13))));",
                "is_abstract": "",
                "class_name": "FilterHelperTests",
                "annotations": []
            },
            {
                "name": "negateAND",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var exp = new FilterExpressionTextParser().parse(\"NOT(key >= 11 AND key < 13)\");\n\t\tassertThat(FilterHelper.negate(exp)).isEqualTo(new Filter.Group(new Filter.Expression(ExpressionType.OR,\n\t\t\t\tnew Filter.Expression(ExpressionType.LT, new Key(\"key\"), new Value(11)),\n\t\t\t\tnew Filter.Expression(ExpressionType.GTE, new Key(\"key\"), new Value(13)))));",
                "is_abstract": "",
                "class_name": "FilterHelperTests",
                "annotations": []
            },
            {
                "name": "negateOR",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var exp = new FilterExpressionTextParser().parse(\"NOT(key >= 11 OR key < 13)\");\n\t\tassertThat(FilterHelper.negate(exp)).isEqualTo(new Filter.Group(new Filter.Expression(ExpressionType.AND,\n\t\t\t\tnew Filter.Expression(ExpressionType.LT, new Key(\"key\"), new Value(11)),\n\t\t\t\tnew Filter.Expression(ExpressionType.GTE, new Key(\"key\"), new Value(13)))));",
                "is_abstract": "",
                "class_name": "FilterHelperTests",
                "annotations": []
            },
            {
                "name": "negateNot",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var exp = new FilterExpressionTextParser().parse(\"NOT NOT(key >= 11)\");\n\t\tassertThat(FilterHelper.negate(exp))\n\t\t\t.isEqualTo(new Filter.Group(new Filter.Expression(ExpressionType.LT, new Key(\"key\"), new Value(11))));",
                "is_abstract": "",
                "class_name": "FilterHelperTests",
                "annotations": []
            },
            {
                "name": "negateNestedNot",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var exp = new FilterExpressionTextParser().parse(\"NOT(NOT(key >= 11))\");\n\t\tassertThat(exp).isEqualTo(\n\t\t\t\tnew Filter.Expression(ExpressionType.NOT, new Filter.Group(new Filter.Expression(ExpressionType.NOT,\n\t\t\t\t\t\tnew Filter.Group(new Filter.Expression(ExpressionType.GTE, new Key(\"key\"), new Value(11)))))));\n\n\t\tassertThat(FilterHelper.negate(exp))\n\t\t\t.isEqualTo(new Filter.Group(new Filter.Expression(ExpressionType.LT, new Key(\"key\"), new Value(11))));",
                "is_abstract": "",
                "class_name": "FilterHelperTests",
                "annotations": []
            },
            {
                "name": "expandIN",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var exp = new FilterExpressionTextParser().parse(\"key IN [11, 12, 13] \");\n\t\tassertThat(new InNinTestConverter().convertExpression(exp)).isEqualTo(\"key EQ 11 OR key EQ 12 OR key EQ 13\");",
                "is_abstract": "",
                "class_name": "FilterHelperTests",
                "annotations": []
            },
            {
                "name": "expandNIN",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var exp1 = new FilterExpressionTextParser().parse(\"key NIN [11, 12, 13] \");\n\t\tvar exp2 = new FilterExpressionTextParser().parse(\"key NOT IN [11, 12, 13] \");\n\t\tassertThat(exp1).isEqualTo(exp2);\n\t\tassertThat(new InNinTestConverter().convertExpression(exp1)).isEqualTo(\"key NE 11 AND key NE 12 AND key NE 13\");",
                "is_abstract": "",
                "class_name": "FilterHelperTests",
                "annotations": []
            },
            {
                "name": "doExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (expression.type() == ExpressionType.IN) {\n\t\t\t\tFilterHelper.expandIn(expression, context, this);\n\t\t\t}\n\t\t\telse if (expression.type() == ExpressionType.NIN) {\n\t\t\t\tFilterHelper.expandNin(expression, context, this);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsuper.doExpression(expression, context);\n\t\t\t}",
                "is_abstract": "",
                "class_name": "FilterHelperTests InNinTestConverter",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/test/java/org/springframework/ai/vectorstore/filter/FilterExpressionBuilderTests.java",
        "class_names": [
            "FilterExpressionBuilderTests"
        ],
        "imports": "import static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.NIN;\nimport java.util.List;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.GTE;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.NE;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.OR;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.NOT;\nimport org.springframework.ai.vectorstore.filter.Filter.Key;\nimport org.springframework.ai.vectorstore.filter.Filter.Group;\nimport org.springframework.ai.vectorstore.filter.Filter.Expression;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.vectorstore.filter.Filter.Value;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.IN;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.AND;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.EQ;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.filter.FilterExpressionBuilderTests": "org.springframework.ai.vectorstore.filter.FilterExpressionBuilderTests",
            "org.springframework.ai.vectorstore.filter.testEQ": "org.springframework.ai.vectorstore.filter.testEQ",
            "org.springframework.ai.vectorstore.filter.tesEqAndGt": "org.springframework.ai.vectorstore.filter.tesEqAndGt",
            "org.springframework.ai.vectorstore.filter.testIn": "org.springframework.ai.vectorstore.filter.testIn",
            "org.springframework.ai.vectorstore.filter.testN": "org.springframework.ai.vectorstore.filter.testN",
            "org.springframework.ai.vectorstore.filter.testGrou": "org.springframework.ai.vectorstore.filter.testGrou",
            "org.springframework.ai.vectorstore.filter.tesIn2": "org.springframework.ai.vectorstore.filter.tesIn2",
            "org.springframework.ai.vectorstore.filter.tesNot": "org.springframework.ai.vectorstore.filter.tesNot",
            "org.springframework.ai.vectorstore.filter.b": "org.springframework.ai.vectorstore.filter.b"
        },
        "package": "package org.springframework.ai.vectorstore.filter;",
        "property_declarations": [
            "FilterExpressionBuilder b = new FilterExpressionBuilder();"
        ],
        "functions": [
            {
                "name": "testEQ",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// country == \"BG\"\n\t\tassertThat(b.eq(\"country\", \"BG\").build()).isEqualTo(new Expression(EQ, new Key(\"country\"), new Value(\"BG\")));",
                "is_abstract": "",
                "class_name": "FilterExpressionBuilderTests",
                "annotations": []
            },
            {
                "name": "tesEqAndGte",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// genre == \"drama\" AND year >= 2020\n\t\tExpression exp = b.and(b.eq(\"genre\", \"drama\"), b.gte(\"year\", 2020)).build();\n\t\tassertThat(exp).isEqualTo(new Expression(AND, new Expression(EQ, new Key(\"genre\"), new Value(\"drama\")),\n\t\t\t\tnew Expression(GTE, new Key(\"year\"), new Value(2020))));",
                "is_abstract": "",
                "class_name": "FilterExpressionBuilderTests",
                "annotations": []
            },
            {
                "name": "testIn",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// genre in [\"comedy\", \"documentary\", \"drama\"]\n\t\tvar exp = b.in(\"genre\", \"comedy\", \"documentary\", \"drama\").build();\n\t\tassertThat(exp)\n\t\t\t.isEqualTo(new Expression(IN, new Key(\"genre\"), new Value(List.of(\"comedy\", \"documentary\", \"drama\"))));",
                "is_abstract": "",
                "class_name": "FilterExpressionBuilderTests",
                "annotations": []
            },
            {
                "name": "testNe",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// year >= 2020 OR country == \"BG\" AND city != \"Sofia\"\n\t\tvar exp = b.and(b.or(b.gte(\"year\", 2020), b.eq(\"country\", \"BG\")), b.ne(\"city\", \"Sofia\")).build();\n\n\t\tassertThat(exp).isEqualTo(new Expression(AND,\n\t\t\t\tnew Expression(OR, new Expression(GTE, new Key(\"year\"), new Value(2020)),\n\t\t\t\t\t\tnew Expression(EQ, new Key(\"country\"), new Value(\"BG\"))),\n\t\t\t\tnew Expression(NE, new Key(\"city\"), new Value(\"Sofia\"))));",
                "is_abstract": "",
                "class_name": "FilterExpressionBuilderTests",
                "annotations": []
            },
            {
                "name": "testGroup",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// (year >= 2020 OR country == \"BG\") AND city NIN [\"Sofia\", \"Plovdiv\"]\n\t\tvar exp = b.and(b.group(b.or(b.gte(\"year\", 2020), b.eq(\"country\", \"BG\"))), b.nin(\"city\", \"Sofia\", \"Plovdiv\"))\n\t\t\t.build();\n\n\t\tassertThat(exp).isEqualTo(new Expression(AND,\n\t\t\t\tnew Group(new Expression(OR, new Expression(GTE, new Key(\"year\"), new Value(2020)),\n\t\t\t\t\t\tnew Expression(EQ, new Key(\"country\"), new Value(\"BG\")))),\n\t\t\t\tnew Expression(NIN, new Key(\"city\"), new Value(List.of(\"Sofia\", \"Plovdiv\")))));",
                "is_abstract": "",
                "class_name": "FilterExpressionBuilderTests",
                "annotations": []
            },
            {
                "name": "tesIn2",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// isOpen == true AND year >= 2020 AND country IN [\"BG\", \"NL\", \"US\"]\n\t\tvar exp = b.and(b.and(b.eq(\"isOpen\", true), b.gte(\"year\", 2020)), b.in(\"country\", \"BG\", \"NL\", \"US\")).build();\n\n\t\tassertThat(exp).isEqualTo(new Expression(AND,\n\t\t\t\tnew Expression(AND, new Expression(EQ, new Key(\"isOpen\"), new Value(true)),\n\t\t\t\t\t\tnew Expression(GTE, new Key(\"year\"), new Value(2020))),\n\t\t\t\tnew Expression(IN, new Key(\"country\"), new Value(List.of(\"BG\", \"NL\", \"US\")))));",
                "is_abstract": "",
                "class_name": "FilterExpressionBuilderTests",
                "annotations": []
            },
            {
                "name": "tesNot",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// isOpen == true AND year >= 2020 AND country IN [\"BG\", \"NL\", \"US\"]\n\t\tvar exp = b.not(b.and(b.and(b.eq(\"isOpen\", true), b.gte(\"year\", 2020)), b.in(\"country\", \"BG\", \"NL\", \"US\")))\n\t\t\t.build();\n\n\t\tassertThat(exp).isEqualTo(new Expression(NOT,\n\t\t\t\tnew Expression(AND,\n\t\t\t\t\t\tnew Expression(AND, new Expression(EQ, new Key(\"isOpen\"), new Value(true)),\n\t\t\t\t\t\t\t\tnew Expression(GTE, new Key(\"year\"), new Value(2020))),\n\t\t\t\t\t\tnew Expression(IN, new Key(\"country\"), new Value(List.of(\"BG\", \"NL\", \"US\")))),\n\t\t\t\tnull));",
                "is_abstract": "",
                "class_name": "FilterExpressionBuilderTests",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/test/java/org/springframework/ai/vectorstore/filter/FilterExpressionTextParserTests.java",
        "class_names": [
            "FilterExpressionTextParserTests"
        ],
        "imports": "import static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.NIN;\nimport java.util.List;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.GTE;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.NE;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.NOT;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.OR;\nimport org.springframework.ai.vectorstore.filter.Filter.Key;\nimport org.springframework.ai.vectorstore.filter.Filter.Group;\nimport org.springframework.ai.vectorstore.filter.Filter.Expression;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.vectorstore.filter.Filter.Value;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.IN;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.LTE;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.AND;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.EQ;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.filter.FilterExpressionTextParserTests": "org.springframework.ai.vectorstore.filter.FilterExpressionTextParserTests",
            "org.springframework.ai.vectorstore.filter.testEQ": "org.springframework.ai.vectorstore.filter.testEQ",
            "org.springframework.ai.vectorstore.filter.tesEqAndGt": "org.springframework.ai.vectorstore.filter.tesEqAndGt",
            "org.springframework.ai.vectorstore.filter.tesIn": "org.springframework.ai.vectorstore.filter.tesIn",
            "org.springframework.ai.vectorstore.filter.testN": "org.springframework.ai.vectorstore.filter.testN",
            "org.springframework.ai.vectorstore.filter.testGrou": "org.springframework.ai.vectorstore.filter.testGrou",
            "org.springframework.ai.vectorstore.filter.tesBoolean": "org.springframework.ai.vectorstore.filter.tesBoolean",
            "org.springframework.ai.vectorstore.filter.tesNot": "org.springframework.ai.vectorstore.filter.tesNot",
            "org.springframework.ai.vectorstore.filter.tesNotNin": "org.springframework.ai.vectorstore.filter.tesNotNin",
            "org.springframework.ai.vectorstore.filter.tesNotNin2": "org.springframework.ai.vectorstore.filter.tesNotNin2",
            "org.springframework.ai.vectorstore.filter.tesNestedNot": "org.springframework.ai.vectorstore.filter.tesNestedNot",
            "org.springframework.ai.vectorstore.filter.testDecimal": "org.springframework.ai.vectorstore.filter.testDecimal",
            "org.springframework.ai.vectorstore.filter.testIdentifiers": "org.springframework.ai.vectorstore.filter.testIdentifiers",
            "org.springframework.ai.vectorstore.filter.parser": "org.springframework.ai.vectorstore.filter.parser"
        },
        "package": "package org.springframework.ai.vectorstore.filter;",
        "property_declarations": [
            "FilterExpressionTextParser parser = new FilterExpressionTextParser();"
        ],
        "functions": [
            {
                "name": "testEQ",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// country == \"BG\"\n\t\tExpression exp = parser.parse(\"country == 'BG'\");\n\t\tassertThat(exp).isEqualTo(new Expression(EQ, new Key(\"country\"), new Value(\"BG\")));\n\n\t\tassertThat(parser.getCache().get(\"WHERE \" + \"country == 'BG'\")).isEqualTo(exp);",
                "is_abstract": "",
                "class_name": "FilterExpressionTextParserTests",
                "annotations": []
            },
            {
                "name": "tesEqAndGte",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// genre == \"drama\" AND year >= 2020\n\t\tExpression exp = parser.parse(\"genre == 'drama' && year >= 2020\");\n\t\tassertThat(exp).isEqualTo(new Expression(AND, new Expression(EQ, new Key(\"genre\"), new Value(\"drama\")),\n\t\t\t\tnew Expression(GTE, new Key(\"year\"), new Value(2020))));\n\n\t\tassertThat(parser.getCache().get(\"WHERE \" + \"genre == 'drama' && year >= 2020\")).isEqualTo(exp);",
                "is_abstract": "",
                "class_name": "FilterExpressionTextParserTests",
                "annotations": []
            },
            {
                "name": "tesIn",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// genre in [\"comedy\", \"documentary\", \"drama\"]\n\t\tExpression exp = parser.parse(\"genre in ['comedy', 'documentary', 'drama']\");\n\t\tassertThat(exp)\n\t\t\t.isEqualTo(new Expression(IN, new Key(\"genre\"), new Value(List.of(\"comedy\", \"documentary\", \"drama\"))));\n\n\t\tassertThat(parser.getCache().get(\"WHERE \" + \"genre in ['comedy', 'documentary', 'drama']\")).isEqualTo(exp);",
                "is_abstract": "",
                "class_name": "FilterExpressionTextParserTests",
                "annotations": []
            },
            {
                "name": "testNe",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// year >= 2020 OR country == \"BG\" AND city != \"Sofia\"\n\t\tExpression exp = parser.parse(\"year >= 2020 OR country == \\\"BG\\\" AND city != \\\"Sofia\\\"\");\n\t\tassertThat(exp).isEqualTo(new Expression(OR, new Expression(GTE, new Key(\"year\"), new Value(2020)),\n\t\t\t\tnew Expression(AND, new Expression(EQ, new Key(\"country\"), new Value(\"BG\")),\n\t\t\t\t\t\tnew Expression(NE, new Key(\"city\"), new Value(\"Sofia\")))));\n\n\t\tassertThat(parser.getCache().get(\"WHERE \" + \"year >= 2020 OR country == \\\"BG\\\" AND city != \\\"Sofia\\\"\"))\n\t\t\t.isEqualTo(exp);",
                "is_abstract": "",
                "class_name": "FilterExpressionTextParserTests",
                "annotations": []
            },
            {
                "name": "testGroup",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// (year >= 2020 OR country == \"BG\") AND city NIN [\"Sofia\", \"Plovdiv\"]\n\t\tExpression exp = parser.parse(\"(year >= 2020 OR country == \\\"BG\\\") AND city NIN [\\\"Sofia\\\", \\\"Plovdiv\\\"]\");\n\n\t\tassertThat(exp).isEqualTo(new Expression(AND,\n\t\t\t\tnew Group(new Expression(OR, new Expression(GTE, new Key(\"year\"), new Value(2020)),\n\t\t\t\t\t\tnew Expression(EQ, new Key(\"country\"), new Value(\"BG\")))),\n\t\t\t\tnew Expression(NIN, new Key(\"city\"), new Value(List.of(\"Sofia\", \"Plovdiv\")))));\n\n\t\tassertThat(parser.getCache()\n\t\t\t.get(\"WHERE \" + \"(year >= 2020 OR country == \\\"BG\\\") AND city NIN [\\\"Sofia\\\", \\\"Plovdiv\\\"]\"))\n\t\t\t.isEqualTo(exp);",
                "is_abstract": "",
                "class_name": "FilterExpressionTextParserTests",
                "annotations": []
            },
            {
                "name": "tesBoolean",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// isOpen == true AND year >= 2020 AND country IN [\"BG\", \"NL\", \"US\"]\n\t\tExpression exp = parser.parse(\"isOpen == true AND year >= 2020 AND country IN [\\\"BG\\\", \\\"NL\\\", \\\"US\\\"]\");\n\n\t\tassertThat(exp).isEqualTo(new Expression(AND,\n\t\t\t\tnew Expression(AND, new Expression(EQ, new Key(\"isOpen\"), new Value(true)),\n\t\t\t\t\t\tnew Expression(GTE, new Key(\"year\"), new Value(2020))),\n\t\t\t\tnew Expression(IN, new Key(\"country\"), new Value(List.of(\"BG\", \"NL\", \"US\")))));\n\t\tassertThat(parser.getCache()\n\t\t\t.get(\"WHERE \" + \"isOpen == true AND year >= 2020 AND country IN [\\\"BG\\\", \\\"NL\\\", \\\"US\\\"]\")).isEqualTo(exp);",
                "is_abstract": "",
                "class_name": "FilterExpressionTextParserTests",
                "annotations": []
            },
            {
                "name": "tesNot",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// NOT(isOpen == true AND year >= 2020 AND country IN [\"BG\", \"NL\", \"US\"])\n\t\tExpression exp = parser.parse(\"not(isOpen == true AND year >= 2020 AND country IN [\\\"BG\\\", \\\"NL\\\", \\\"US\\\"])\");\n\n\t\tassertThat(exp).isEqualTo(new Expression(NOT,\n\t\t\t\tnew Group(new Expression(AND,\n\t\t\t\t\t\tnew Expression(AND, new Expression(EQ, new Key(\"isOpen\"), new Value(true)),\n\t\t\t\t\t\t\t\tnew Expression(GTE, new Key(\"year\"), new Value(2020))),\n\t\t\t\t\t\tnew Expression(IN, new Key(\"country\"), new Value(List.of(\"BG\", \"NL\", \"US\"))))),\n\t\t\t\tnull));\n\n\t\tassertThat(parser.getCache()\n\t\t\t.get(\"WHERE \" + \"not(isOpen == true AND year >= 2020 AND country IN [\\\"BG\\\", \\\"NL\\\", \\\"US\\\"])\"))\n\t\t\t.isEqualTo(exp);",
                "is_abstract": "",
                "class_name": "FilterExpressionTextParserTests",
                "annotations": []
            },
            {
                "name": "tesNotNin",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// NOT(country NOT IN [\"BG\", \"NL\", \"US\"])\n\t\tExpression exp = parser.parse(\"not(country NOT IN [\\\"BG\\\", \\\"NL\\\", \\\"US\\\"])\");\n\n\t\tassertThat(exp).isEqualTo(new Expression(NOT,\n\t\t\t\tnew Group(new Expression(NIN, new Key(\"country\"), new Value(List.of(\"BG\", \"NL\", \"US\")))), null));",
                "is_abstract": "",
                "class_name": "FilterExpressionTextParserTests",
                "annotations": []
            },
            {
                "name": "tesNotNin2",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// NOT country NOT IN [\"BG\", \"NL\", \"US\"]\n\t\tExpression exp = parser.parse(\"NOT country NOT IN [\\\"BG\\\", \\\"NL\\\", \\\"US\\\"]\");\n\n\t\tassertThat(exp).isEqualTo(new Expression(NOT,\n\t\t\t\tnew Expression(NIN, new Key(\"country\"), new Value(List.of(\"BG\", \"NL\", \"US\"))), null));",
                "is_abstract": "",
                "class_name": "FilterExpressionTextParserTests",
                "annotations": []
            },
            {
                "name": "tesNestedNot",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// NOT(isOpen == true AND year >= 2020 AND NOT(country IN [\"BG\", \"NL\", \"US\"]))\n\t\tExpression exp = parser\n\t\t\t.parse(\"not(isOpen == true AND year >= 2020 AND NOT(country IN [\\\"BG\\\", \\\"NL\\\", \\\"US\\\"]))\");\n\n\t\tassertThat(exp).isEqualTo(new Expression(NOT,\n\t\t\t\tnew Group(new Expression(AND,\n\t\t\t\t\t\tnew Expression(AND, new Expression(EQ, new Key(\"isOpen\"), new Value(true)),\n\t\t\t\t\t\t\t\tnew Expression(GTE, new Key(\"year\"), new Value(2020))),\n\t\t\t\t\t\tnew Expression(NOT,\n\t\t\t\t\t\t\t\tnew Group(new Expression(IN, new Key(\"country\"), new Value(List.of(\"BG\", \"NL\", \"US\")))),\n\t\t\t\t\t\t\t\tnull))),\n\t\t\t\tnull));\n\n\t\tassertThat(parser.getCache()\n\t\t\t.get(\"WHERE \" + \"not(isOpen == true AND year >= 2020 AND NOT(country IN [\\\"BG\\\", \\\"NL\\\", \\\"US\\\"]))\"))\n\t\t\t.isEqualTo(exp);",
                "is_abstract": "",
                "class_name": "FilterExpressionTextParserTests",
                "annotations": []
            },
            {
                "name": "testDecimal",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// temperature >= -15.6 && temperature <= +20.13\n\t\tString expText = \"temperature >= -15.6 && temperature <= +20.13\";\n\t\tExpression exp = parser.parse(expText);\n\n\t\tassertThat(exp).isEqualTo(new Expression(AND, new Expression(GTE, new Key(\"temperature\"), new Value(-15.6)),\n\t\t\t\tnew Expression(LTE, new Key(\"temperature\"), new Value(20.13))));\n\n\t\tassertThat(parser.getCache().get(\"WHERE \" + expText)).isEqualTo(exp);",
                "is_abstract": "",
                "class_name": "FilterExpressionTextParserTests",
                "annotations": []
            },
            {
                "name": "testIdentifiers",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Expression exp = parser.parse(\"'country.1' == 'BG'\");\n\t\tassertThat(exp).isEqualTo(new Expression(EQ, new Key(\"'country.1'\"), new Value(\"BG\")));\n\n\t\texp = parser.parse(\"'country_1_2_3' == 'BG'\");\n\t\tassertThat(exp).isEqualTo(new Expression(EQ, new Key(\"'country_1_2_3'\"), new Value(\"BG\")));\n\n\t\texp = parser.parse(\"\\\"country 1 2 3\\\" == 'BG'\");\n\t\tassertThat(exp).isEqualTo(new Expression(EQ, new Key(\"\\\"country 1 2 3\\\"\"), new Value(\"BG\")));",
                "is_abstract": "",
                "class_name": "FilterExpressionTextParserTests",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/test/java/org/springframework/ai/vectorstore/filter/SearchRequestTests.java",
        "class_names": [
            "SearchRequestTests"
        ],
        "imports": "import static org.assertj.core.api.Assertions.assertThat;\nimport org.springframework.ai.vectorstore.SearchRequest;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.vectorstore.filter.FilterExpressionTextParser.FilterExpressionParseException;\nimport static org.assertj.core.api.Assertions.assertThatThrownBy;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.filter.SearchRequestTests": "org.springframework.ai.vectorstore.filter.SearchRequestTests",
            "org.springframework.ai.vectorstore.filter.createDefaults": "org.springframework.ai.vectorstore.filter.createDefaults",
            "org.springframework.ai.vectorstore.filter.createQuery": "org.springframework.ai.vectorstore.filter.createQuery",
            "org.springframework.ai.vectorstore.filter.createFrom": "org.springframework.ai.vectorstore.filter.createFrom",
            "org.springframework.ai.vectorstore.filter.withQuery": "org.springframework.ai.vectorstore.filter.withQuery",
            "org.springframework.ai.vectorstore.filter.Test": "org.springframework.ai.vectorstore.filter.Test",
            "org.springframework.ai.vectorstore.filter.checkDefaults": "org.springframework.ai.vectorstore.filter.checkDefaults"
        },
        "package": "package org.springframework.ai.vectorstore.filter;",
        "property_declarations": [],
        "functions": [
            {
                "name": "createDefaults",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var emptyRequest = SearchRequest.defaults();\n\t\tassertThat(emptyRequest.getQuery()).isEqualTo(\"\");\n\t\tcheckDefaults(emptyRequest);",
                "is_abstract": "",
                "class_name": "SearchRequestTests",
                "annotations": []
            },
            {
                "name": "createQuery",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var emptyRequest = SearchRequest.query(\"New Query\");\n\t\tassertThat(emptyRequest.getQuery()).isEqualTo(\"New Query\");\n\t\tcheckDefaults(emptyRequest);",
                "is_abstract": "",
                "class_name": "SearchRequestTests",
                "annotations": []
            },
            {
                "name": "createFrom",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var originalRequest = SearchRequest.query(\"New Query\")\n\t\t\t.withTopK(696)\n\t\t\t.withSimilarityThreshold(0.678)\n\t\t\t.withFilterExpression(\"country == 'NL'\");\n\n\t\tvar newRequest = SearchRequest.from(originalRequest);\n\n\t\tassertThat(newRequest).isNotSameAs(originalRequest);\n\t\tassertThat(newRequest.getQuery()).isEqualTo(originalRequest.getQuery());\n\t\tassertThat(newRequest.getTopK()).isEqualTo(originalRequest.getTopK());\n\t\tassertThat(newRequest.getFilterExpression()).isEqualTo(originalRequest.getFilterExpression());\n\t\tassertThat(newRequest.getSimilarityThreshold()).isEqualTo(originalRequest.getSimilarityThreshold());",
                "is_abstract": "",
                "class_name": "SearchRequestTests",
                "annotations": []
            },
            {
                "name": "withQuery",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var emptyRequest = SearchRequest.defaults();\n\t\tassertThat(emptyRequest.getQuery()).isEqualTo(\"\");\n\n\t\temptyRequest.withQuery(\"New Query\");\n\t\tassertThat(emptyRequest.getQuery()).isEqualTo(\"New Query\");",
                "is_abstract": "",
                "class_name": "SearchRequestTests",
                "annotations": []
            },
            {
                "name": "Test",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var request = SearchRequest.query(\"Test\").withSimilarityThreshold(0.678);\n\t\tassertThat(request.getSimilarityThreshold()).isEqualTo(0.678);\n\n\t\trequest.withSimilarityThreshold(0.9);\n\t\tassertThat(request.getSimilarityThreshold()).isEqualTo(0.9);\n\n\t\tassertThatThrownBy(() -> {\n\t\t\trequest.withSimilarityThreshold(-1);\n\t\t}).isInstanceOf(IllegalArgumentException.class)\n\t\t\t.hasMessageContaining(\"Similarity threshold must be in [0,1] range.\");\n\n\t\tassertThatThrownBy(() -> {\n\t\t\trequest.withSimilarityThreshold(1.1);\n\t\t}).isInstanceOf(IllegalArgumentException.class)\n\t\t\t.hasMessageContaining(\"Similarity threshold must be in [0,1] range.\");",
                "is_abstract": "",
                "class_name": "SearchRequestTests",
                "annotations": [
                    "@Test()"
                ]
            },
            {
                "name": "checkDefaults",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "assertThat(request.getFilterExpression()).isNull();\n\t\tassertThat(request.getSimilarityThreshold()).isEqualTo(SearchRequest.SIMILARITY_THRESHOLD_ACCEPT_ALL);\n\t\tassertThat(request.getTopK()).isEqualTo(SearchRequest.DEFAULT_TOP_K);",
                "is_abstract": "",
                "class_name": "SearchRequestTests",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/test/java/org/springframework/ai/vectorstore/filter/converter/PgVectorFilterExpressionConverterTests.java",
        "class_names": [
            "PgVectorFilterExpressionConverterTests"
        ],
        "imports": "import static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.NIN;\nimport java.util.List;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.GTE;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.NE;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.OR;\nimport org.springframework.ai.vectorstore.filter.Filter.Key;\nimport org.springframework.ai.vectorstore.filter.Filter.Group;\nimport org.springframework.ai.vectorstore.filter.Filter.Expression;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.vectorstore.filter.Filter.Value;\nimport org.springframework.ai.vectorstore.filter.FilterExpressionConverter;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.IN;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.LTE;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.AND;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.EQ;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.filter.converter.PgVectorFilterExpressionConverterTests": "org.springframework.ai.vectorstore.filter.converter.PgVectorFilterExpressionConverterTests",
            "org.springframework.ai.vectorstore.filter.converter.testEQ": "org.springframework.ai.vectorstore.filter.converter.testEQ",
            "org.springframework.ai.vectorstore.filter.converter.tesEqAndGt": "org.springframework.ai.vectorstore.filter.converter.tesEqAndGt",
            "org.springframework.ai.vectorstore.filter.converter.tesIn": "org.springframework.ai.vectorstore.filter.converter.tesIn",
            "org.springframework.ai.vectorstore.filter.converter.testN": "org.springframework.ai.vectorstore.filter.converter.testN",
            "org.springframework.ai.vectorstore.filter.converter.testGrou": "org.springframework.ai.vectorstore.filter.converter.testGrou",
            "org.springframework.ai.vectorstore.filter.converter.tesBoolean": "org.springframework.ai.vectorstore.filter.converter.tesBoolean",
            "org.springframework.ai.vectorstore.filter.converter.testDecimal": "org.springframework.ai.vectorstore.filter.converter.testDecimal",
            "org.springframework.ai.vectorstore.filter.converter.testComplexIdentifiers": "org.springframework.ai.vectorstore.filter.converter.testComplexIdentifiers",
            "org.springframework.ai.vectorstore.filter.converter.converter": "org.springframework.ai.vectorstore.filter.converter.converter"
        },
        "package": "package org.springframework.ai.vectorstore.filter.converter;",
        "property_declarations": [
            "FilterExpressionConverter converter = new PgVectorFilterExpressionConverter();"
        ],
        "functions": [
            {
                "name": "testEQ",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// country == \"BG\"\n\t\tString vectorExpr = converter.convertExpression(new Expression(EQ, new Key(\"country\"), new Value(\"BG\")));\n\t\tassertThat(vectorExpr).isEqualTo(\"$.country == \\\"BG\\\"\");",
                "is_abstract": "",
                "class_name": "PgVectorFilterExpressionConverterTests",
                "annotations": []
            },
            {
                "name": "tesEqAndGte",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// genre == \"drama\" AND year >= 2020\n\t\tString vectorExpr = converter\n\t\t\t.convertExpression(new Expression(AND, new Expression(EQ, new Key(\"genre\"), new Value(\"drama\")),\n\t\t\t\t\tnew Expression(GTE, new Key(\"year\"), new Value(2020))));\n\t\tassertThat(vectorExpr).isEqualTo(\"$.genre == \\\"drama\\\" && $.year >= 2020\");",
                "is_abstract": "",
                "class_name": "PgVectorFilterExpressionConverterTests",
                "annotations": []
            },
            {
                "name": "tesIn",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// genre in [\"comedy\", \"documentary\", \"drama\"]\n\t\tString vectorExpr = converter.convertExpression(\n\t\t\t\tnew Expression(IN, new Key(\"genre\"), new Value(List.of(\"comedy\", \"documentary\", \"drama\"))));\n\t\tassertThat(vectorExpr).isEqualTo(\"$.genre in [\\\"comedy\\\",\\\"documentary\\\",\\\"drama\\\"]\");",
                "is_abstract": "",
                "class_name": "PgVectorFilterExpressionConverterTests",
                "annotations": []
            },
            {
                "name": "testNe",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// year >= 2020 OR country == \"BG\" AND city != \"Sofia\"\n\t\tString vectorExpr = converter\n\t\t\t.convertExpression(new Expression(OR, new Expression(GTE, new Key(\"year\"), new Value(2020)),\n\t\t\t\t\tnew Expression(AND, new Expression(EQ, new Key(\"country\"), new Value(\"BG\")),\n\t\t\t\t\t\t\tnew Expression(NE, new Key(\"city\"), new Value(\"Sofia\")))));\n\t\tassertThat(vectorExpr).isEqualTo(\"$.year >= 2020 || $.country == \\\"BG\\\" && $.city != \\\"Sofia\\\"\");",
                "is_abstract": "",
                "class_name": "PgVectorFilterExpressionConverterTests",
                "annotations": []
            },
            {
                "name": "testGroup",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// (year >= 2020 OR country == \"BG\") AND city NIN [\"Sofia\", \"Plovdiv\"]\n\t\tString vectorExpr = converter.convertExpression(new Expression(AND,\n\t\t\t\tnew Group(new Expression(OR, new Expression(GTE, new Key(\"year\"), new Value(2020)),\n\t\t\t\t\t\tnew Expression(EQ, new Key(\"country\"), new Value(\"BG\")))),\n\t\t\t\tnew Expression(NIN, new Key(\"city\"), new Value(List.of(\"Sofia\", \"Plovdiv\")))));\n\t\tassertThat(vectorExpr)\n\t\t\t.isEqualTo(\"($.year >= 2020 || $.country == \\\"BG\\\") && $.city nin [\\\"Sofia\\\",\\\"Plovdiv\\\"]\");",
                "is_abstract": "",
                "class_name": "PgVectorFilterExpressionConverterTests",
                "annotations": []
            },
            {
                "name": "tesBoolean",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// isOpen == true AND year >= 2020 AND country IN [\"BG\", \"NL\", \"US\"]\n\t\tString vectorExpr = converter.convertExpression(new Expression(AND,\n\t\t\t\tnew Expression(AND, new Expression(EQ, new Key(\"isOpen\"), new Value(true)),\n\t\t\t\t\t\tnew Expression(GTE, new Key(\"year\"), new Value(2020))),\n\t\t\t\tnew Expression(IN, new Key(\"country\"), new Value(List.of(\"BG\", \"NL\", \"US\")))));\n\n\t\tassertThat(vectorExpr).isEqualTo(\"$.isOpen == true && $.year >= 2020 && $.country in [\\\"BG\\\",\\\"NL\\\",\\\"US\\\"]\");",
                "is_abstract": "",
                "class_name": "PgVectorFilterExpressionConverterTests",
                "annotations": []
            },
            {
                "name": "testDecimal",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// temperature >= -15.6 && temperature <= +20.13\n\t\tString vectorExpr = converter\n\t\t\t.convertExpression(new Expression(AND, new Expression(GTE, new Key(\"temperature\"), new Value(-15.6)),\n\t\t\t\t\tnew Expression(LTE, new Key(\"temperature\"), new Value(20.13))));\n\n\t\tassertThat(vectorExpr).isEqualTo(\"$.temperature >= -15.6 && $.temperature <= 20.13\");",
                "is_abstract": "",
                "class_name": "PgVectorFilterExpressionConverterTests",
                "annotations": []
            },
            {
                "name": "testComplexIdentifiers",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String vectorExpr = converter\n\t\t\t.convertExpression(new Expression(EQ, new Key(\"\\\"country 1 2 3\\\"\"), new Value(\"BG\")));\n\t\tassertThat(vectorExpr).isEqualTo(\"$.\\\"country 1 2 3\\\" == \\\"BG\\\"\");",
                "is_abstract": "",
                "class_name": "PgVectorFilterExpressionConverterTests",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/test/java/org/springframework/ai/vectorstore/filter/converter/PineconeFilterExpressionConverterTests.java",
        "class_names": [
            "PineconeFilterExpressionConverterTests"
        ],
        "imports": "import static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.NIN;\nimport java.util.List;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.GTE;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.NE;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.OR;\nimport org.springframework.ai.vectorstore.filter.Filter.Key;\nimport org.springframework.ai.vectorstore.filter.Filter.Group;\nimport org.springframework.ai.vectorstore.filter.Filter.Expression;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.vectorstore.filter.Filter.Value;\nimport org.springframework.ai.vectorstore.filter.FilterExpressionConverter;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.IN;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.LTE;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.AND;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.EQ;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.filter.converter.PineconeFilterExpressionConverterTests": "org.springframework.ai.vectorstore.filter.converter.PineconeFilterExpressionConverterTests",
            "org.springframework.ai.vectorstore.filter.converter.testEQ": "org.springframework.ai.vectorstore.filter.converter.testEQ",
            "org.springframework.ai.vectorstore.filter.converter.tesEqAndGt": "org.springframework.ai.vectorstore.filter.converter.tesEqAndGt",
            "org.springframework.ai.vectorstore.filter.converter.tesIn": "org.springframework.ai.vectorstore.filter.converter.tesIn",
            "org.springframework.ai.vectorstore.filter.converter.testN": "org.springframework.ai.vectorstore.filter.converter.testN",
            "org.springframework.ai.vectorstore.filter.converter.testGrou": "org.springframework.ai.vectorstore.filter.converter.testGrou",
            "org.springframework.ai.vectorstore.filter.converter.tesBoolean": "org.springframework.ai.vectorstore.filter.converter.tesBoolean",
            "org.springframework.ai.vectorstore.filter.converter.testDecimal": "org.springframework.ai.vectorstore.filter.converter.testDecimal",
            "org.springframework.ai.vectorstore.filter.converter.testComplexIdentifiers": "org.springframework.ai.vectorstore.filter.converter.testComplexIdentifiers",
            "org.springframework.ai.vectorstore.filter.converter.converter": "org.springframework.ai.vectorstore.filter.converter.converter"
        },
        "package": "package org.springframework.ai.vectorstore.filter.converter;",
        "property_declarations": [
            "FilterExpressionConverter converter = new PineconeFilterExpressionConverter();"
        ],
        "functions": [
            {
                "name": "testEQ",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// country == \"BG\"\n\t\tString vectorExpr = converter.convertExpression(new Expression(EQ, new Key(\"country\"), new Value(\"BG\")));\n\t\tassertThat(vectorExpr).isEqualTo(\"{\\\"country\\\": {\\\"$eq\\\": \\\"BG\\\"}}\");",
                "is_abstract": "",
                "class_name": "PineconeFilterExpressionConverterTests",
                "annotations": []
            },
            {
                "name": "tesEqAndGte",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// genre == \"drama\" AND year >= 2020\n\t\tString vectorExpr = converter\n\t\t\t.convertExpression(new Expression(AND, new Expression(EQ, new Key(\"genre\"), new Value(\"drama\")),\n\t\t\t\t\tnew Expression(GTE, new Key(\"year\"), new Value(2020))));\n\t\tassertThat(vectorExpr)\n\t\t\t.isEqualTo(\"{\\\"$and\\\": [{\\\"genre\\\": {\\\"$eq\\\": \\\"drama\\\"}},{\\\"year\\\": {\\\"$gte\\\": 2020}}]}\");",
                "is_abstract": "",
                "class_name": "PineconeFilterExpressionConverterTests",
                "annotations": []
            },
            {
                "name": "tesIn",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// genre in [\"comedy\", \"documentary\", \"drama\"]\n\t\tString vectorExpr = converter.convertExpression(\n\t\t\t\tnew Expression(IN, new Key(\"genre\"), new Value(List.of(\"comedy\", \"documentary\", \"drama\"))));\n\t\tassertThat(vectorExpr).isEqualTo(\"{\\\"genre\\\": {\\\"$in\\\": [\\\"comedy\\\",\\\"documentary\\\",\\\"drama\\\"]}}\");",
                "is_abstract": "",
                "class_name": "PineconeFilterExpressionConverterTests",
                "annotations": []
            },
            {
                "name": "testNe",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// year >= 2020 OR country == \"BG\" AND city != \"Sofia\"\n\t\tString vectorExpr = converter\n\t\t\t.convertExpression(new Expression(OR, new Expression(GTE, new Key(\"year\"), new Value(2020)),\n\t\t\t\t\tnew Expression(AND, new Expression(EQ, new Key(\"country\"), new Value(\"BG\")),\n\t\t\t\t\t\t\tnew Expression(NE, new Key(\"city\"), new Value(\"Sofia\")))));\n\t\tassertThat(vectorExpr).isEqualTo(\n\t\t\t\t\"{\\\"$or\\\": [{\\\"year\\\": {\\\"$gte\\\": 2020}},{\\\"$and\\\": [{\\\"country\\\": {\\\"$eq\\\": \\\"BG\\\"}},{\\\"city\\\": {\\\"$ne\\\": \\\"Sofia\\\"}}]}]}\");",
                "is_abstract": "",
                "class_name": "PineconeFilterExpressionConverterTests",
                "annotations": []
            },
            {
                "name": "testGroup",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// (year >= 2020 OR country == \"BG\") AND city NIN [\"Sofia\", \"Plovdiv\"]\n\t\tString vectorExpr = converter.convertExpression(new Expression(AND,\n\t\t\t\tnew Group(new Expression(OR, new Expression(GTE, new Key(\"year\"), new Value(2020)),\n\t\t\t\t\t\tnew Expression(EQ, new Key(\"country\"), new Value(\"BG\")))),\n\t\t\t\tnew Expression(NIN, new Key(\"city\"), new Value(List.of(\"Sofia\", \"Plovdiv\")))));\n\t\tassertThat(vectorExpr).isEqualTo(\n\t\t\t\t\"{\\\"$and\\\": [{\\\"$or\\\": [{\\\"year\\\": {\\\"$gte\\\": 2020}},{\\\"country\\\": {\\\"$eq\\\": \\\"BG\\\"}}]},{\\\"city\\\": {\\\"$nin\\\": [\\\"Sofia\\\",\\\"Plovdiv\\\"]}}]}\");",
                "is_abstract": "",
                "class_name": "PineconeFilterExpressionConverterTests",
                "annotations": []
            },
            {
                "name": "tesBoolean",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// isOpen == true AND year >= 2020 AND country IN [\"BG\", \"NL\", \"US\"]\n\t\tString vectorExpr = converter.convertExpression(new Expression(AND,\n\t\t\t\tnew Expression(AND, new Expression(EQ, new Key(\"isOpen\"), new Value(true)),\n\t\t\t\t\t\tnew Expression(GTE, new Key(\"year\"), new Value(2020))),\n\t\t\t\tnew Expression(IN, new Key(\"country\"), new Value(List.of(\"BG\", \"NL\", \"US\")))));\n\n\t\tassertThat(vectorExpr).isEqualTo(\n\t\t\t\t\"{\\\"$and\\\": [{\\\"$and\\\": [{\\\"isOpen\\\": {\\\"$eq\\\": true}},{\\\"year\\\": {\\\"$gte\\\": 2020}}]},{\\\"country\\\": {\\\"$in\\\": [\\\"BG\\\",\\\"NL\\\",\\\"US\\\"]}}]}\");",
                "is_abstract": "",
                "class_name": "PineconeFilterExpressionConverterTests",
                "annotations": []
            },
            {
                "name": "testDecimal",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// temperature >= -15.6 && temperature <= +20.13\n\t\tString vectorExpr = converter\n\t\t\t.convertExpression(new Expression(AND, new Expression(GTE, new Key(\"temperature\"), new Value(-15.6)),\n\t\t\t\t\tnew Expression(LTE, new Key(\"temperature\"), new Value(20.13))));\n\n\t\tassertThat(vectorExpr)\n\t\t\t.isEqualTo(\"{\\\"$and\\\": [{\\\"temperature\\\": {\\\"$gte\\\": -15.6}},{\\\"temperature\\\": {\\\"$lte\\\": 20.13}}]}\");",
                "is_abstract": "",
                "class_name": "PineconeFilterExpressionConverterTests",
                "annotations": []
            },
            {
                "name": "testComplexIdentifiers",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String vectorExpr = converter\n\t\t\t.convertExpression(new Expression(EQ, new Key(\"\\\"country 1 2 3\\\"\"), new Value(\"BG\")));\n\t\tassertThat(vectorExpr).isEqualTo(\"{\\\"country 1 2 3\\\": {\\\"$eq\\\": \\\"BG\\\"}}\");\n\n\t\tvectorExpr = converter.convertExpression(new Expression(EQ, new Key(\"'country 1 2 3'\"), new Value(\"BG\")));\n\t\tassertThat(vectorExpr).isEqualTo(\"{\\\"country 1 2 3\\\": {\\\"$eq\\\": \\\"BG\\\"}}\");",
                "is_abstract": "",
                "class_name": "PineconeFilterExpressionConverterTests",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/test/java/org/springframework/ai/vectorstore/filter/converter/MilvusFilterExpressionConverterTests.java",
        "class_names": [
            "MilvusFilterExpressionConverterTests"
        ],
        "imports": "import static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.NIN;\nimport java.util.List;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.GTE;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.NE;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.OR;\nimport org.springframework.ai.vectorstore.filter.Filter.Key;\nimport org.springframework.ai.vectorstore.filter.Filter.Group;\nimport org.springframework.ai.vectorstore.filter.Filter.Expression;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.vectorstore.filter.Filter.Value;\nimport org.springframework.ai.vectorstore.filter.FilterExpressionConverter;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.IN;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.LTE;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.AND;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.EQ;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.filter.converter.MilvusFilterExpressionConverterTests": "org.springframework.ai.vectorstore.filter.converter.MilvusFilterExpressionConverterTests",
            "org.springframework.ai.vectorstore.filter.converter.testEQ": "org.springframework.ai.vectorstore.filter.converter.testEQ",
            "org.springframework.ai.vectorstore.filter.converter.tesEqAndGt": "org.springframework.ai.vectorstore.filter.converter.tesEqAndGt",
            "org.springframework.ai.vectorstore.filter.converter.tesIn": "org.springframework.ai.vectorstore.filter.converter.tesIn",
            "org.springframework.ai.vectorstore.filter.converter.testN": "org.springframework.ai.vectorstore.filter.converter.testN",
            "org.springframework.ai.vectorstore.filter.converter.testGrou": "org.springframework.ai.vectorstore.filter.converter.testGrou",
            "org.springframework.ai.vectorstore.filter.converter.tesBoolean": "org.springframework.ai.vectorstore.filter.converter.tesBoolean",
            "org.springframework.ai.vectorstore.filter.converter.testDecimal": "org.springframework.ai.vectorstore.filter.converter.testDecimal",
            "org.springframework.ai.vectorstore.filter.converter.testComplexIdentifiers": "org.springframework.ai.vectorstore.filter.converter.testComplexIdentifiers",
            "org.springframework.ai.vectorstore.filter.converter.converter": "org.springframework.ai.vectorstore.filter.converter.converter"
        },
        "package": "package org.springframework.ai.vectorstore.filter.converter;",
        "property_declarations": [
            "FilterExpressionConverter converter = new MilvusFilterExpressionConverter();"
        ],
        "functions": [
            {
                "name": "testEQ",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// country == \"BG\"\n\t\tString vectorExpr = converter.convertExpression(new Expression(EQ, new Key(\"country\"), new Value(\"BG\")));\n\t\tassertThat(vectorExpr).isEqualTo(\"metadata[\\\"country\\\"] == \\\"BG\\\"\");",
                "is_abstract": "",
                "class_name": "MilvusFilterExpressionConverterTests",
                "annotations": []
            },
            {
                "name": "tesEqAndGte",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// genre == \"drama\" AND year >= 2020\n\t\tString vectorExpr = converter\n\t\t\t.convertExpression(new Expression(AND, new Expression(EQ, new Key(\"genre\"), new Value(\"drama\")),\n\t\t\t\t\tnew Expression(GTE, new Key(\"year\"), new Value(2020))));\n\t\tassertThat(vectorExpr).isEqualTo(\"metadata[\\\"genre\\\"] == \\\"drama\\\" && metadata[\\\"year\\\"] >= 2020\");",
                "is_abstract": "",
                "class_name": "MilvusFilterExpressionConverterTests",
                "annotations": []
            },
            {
                "name": "tesIn",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// genre in [\"comedy\", \"documentary\", \"drama\"]\n\t\tString vectorExpr = converter.convertExpression(\n\t\t\t\tnew Expression(IN, new Key(\"genre\"), new Value(List.of(\"comedy\", \"documentary\", \"drama\"))));\n\t\tassertThat(vectorExpr).isEqualTo(\"metadata[\\\"genre\\\"] in [\\\"comedy\\\",\\\"documentary\\\",\\\"drama\\\"]\");",
                "is_abstract": "",
                "class_name": "MilvusFilterExpressionConverterTests",
                "annotations": []
            },
            {
                "name": "testNe",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// year >= 2020 OR country == \"BG\" AND city != \"Sofia\"\n\t\tString vectorExpr = converter\n\t\t\t.convertExpression(new Expression(OR, new Expression(GTE, new Key(\"year\"), new Value(2020)),\n\t\t\t\t\tnew Expression(AND, new Expression(EQ, new Key(\"country\"), new Value(\"BG\")),\n\t\t\t\t\t\t\tnew Expression(NE, new Key(\"city\"), new Value(\"Sofia\")))));\n\t\tassertThat(vectorExpr).isEqualTo(\n\t\t\t\t\"metadata[\\\"year\\\"] >= 2020 || metadata[\\\"country\\\"] == \\\"BG\\\" && metadata[\\\"city\\\"] != \\\"Sofia\\\"\");",
                "is_abstract": "",
                "class_name": "MilvusFilterExpressionConverterTests",
                "annotations": []
            },
            {
                "name": "testGroup",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// (year >= 2020 OR country == \"BG\") AND city NIN [\"Sofia\", \"Plovdiv\"]\n\t\tString vectorExpr = converter.convertExpression(new Expression(AND,\n\t\t\t\tnew Group(new Expression(OR, new Expression(GTE, new Key(\"year\"), new Value(2020)),\n\t\t\t\t\t\tnew Expression(EQ, new Key(\"country\"), new Value(\"BG\")))),\n\t\t\t\tnew Expression(NIN, new Key(\"city\"), new Value(List.of(\"Sofia\", \"Plovdiv\")))));\n\t\tassertThat(vectorExpr).isEqualTo(\n\t\t\t\t\"metadata[\\\"year\\\"] >= 2020 || metadata[\\\"country\\\"] == \\\"BG\\\" && metadata[\\\"year\\\"] >= 2020 || metadata[\\\"country\\\"] == \\\"BG\\\" && metadata[\\\"city\\\"] nin [\\\"Sofia\\\",\\\"Plovdiv\\\"]\");",
                "is_abstract": "",
                "class_name": "MilvusFilterExpressionConverterTests",
                "annotations": []
            },
            {
                "name": "tesBoolean",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// isOpen == true AND year >= 2020 AND country IN [\"BG\", \"NL\", \"US\"]\n\t\tString vectorExpr = converter.convertExpression(new Expression(AND,\n\t\t\t\tnew Expression(AND, new Expression(EQ, new Key(\"isOpen\"), new Value(true)),\n\t\t\t\t\t\tnew Expression(GTE, new Key(\"year\"), new Value(2020))),\n\t\t\t\tnew Expression(IN, new Key(\"country\"), new Value(List.of(\"BG\", \"NL\", \"US\")))));\n\n\t\tassertThat(vectorExpr).isEqualTo(\n\t\t\t\t\"metadata[\\\"isOpen\\\"] == true && metadata[\\\"year\\\"] >= 2020 && metadata[\\\"country\\\"] in [\\\"BG\\\",\\\"NL\\\",\\\"US\\\"]\");",
                "is_abstract": "",
                "class_name": "MilvusFilterExpressionConverterTests",
                "annotations": []
            },
            {
                "name": "testDecimal",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// temperature >= -15.6 && temperature <= +20.13\n\t\tString vectorExpr = converter\n\t\t\t.convertExpression(new Expression(AND, new Expression(GTE, new Key(\"temperature\"), new Value(-15.6)),\n\t\t\t\t\tnew Expression(LTE, new Key(\"temperature\"), new Value(20.13))));\n\n\t\tassertThat(vectorExpr).isEqualTo(\"metadata[\\\"temperature\\\"] >= -15.6 && metadata[\\\"temperature\\\"] <= 20.13\");",
                "is_abstract": "",
                "class_name": "MilvusFilterExpressionConverterTests",
                "annotations": []
            },
            {
                "name": "testComplexIdentifiers",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String vectorExpr = converter\n\t\t\t.convertExpression(new Expression(EQ, new Key(\"\\\"country 1 2 3\\\"\"), new Value(\"BG\")));\n\t\tassertThat(vectorExpr).isEqualTo(\"metadata[\\\"country 1 2 3\\\"] == \\\"BG\\\"\");\n\n\t\tvectorExpr = converter.convertExpression(new Expression(EQ, new Key(\"'country 1 2 3'\"), new Value(\"BG\")));\n\t\tassertThat(vectorExpr).isEqualTo(\"metadata[\\\"country 1 2 3\\\"] == \\\"BG\\\"\");",
                "is_abstract": "",
                "class_name": "MilvusFilterExpressionConverterTests",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/ResourceUtils.java",
        "class_names": [
            "ResourceUtils"
        ],
        "imports": "import java.nio.charset.StandardCharsets;\nimport java.io.IOException;\nimport org.springframework.core.io.DefaultResourceLoader;",
        "package_import_paths": {
            "org.springframework.ai.ResourceUtils": "org.springframework.ai.ResourceUtils",
            "org.springframework.ai.getText": "org.springframework.ai.getText"
        },
        "package": "package org.springframework.ai;",
        "property_declarations": [],
        "functions": [
            {
                "name": "getText",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var resource = new DefaultResourceLoader().getResource(uri);\n\t\ttry {\n\t\t\treturn resource.getContentAsString(StandardCharsets.UTF_8);\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}",
                "is_abstract": "",
                "class_name": "ResourceUtils",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/reader/JsonMetadataGenerator.java",
        "class_names": [],
        "imports": "import java.util.Map;",
        "package_import_paths": {
            "org.springframework.ai.reader.generat": "org.springframework.ai.reader.generat"
        },
        "package": "package org.springframework.ai.reader;",
        "property_declarations": [],
        "functions": [
            {
                "name": "generate",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/reader/JsonReader.java",
        "class_names": [
            "JsonReader"
        ],
        "imports": "import java.util.ArrayList;\nimport java.util.List;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.springframework.ai.document.DocumentReader;\nimport org.springframework.ai.document.Document;\nimport java.util.Map;\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport org.springframework.core.io.Resource;\nimport java.util.Objects;\nimport java.io.IOException;",
        "package_import_paths": {
            "org.springframework.ai.reader.JsonReader": "org.springframework.ai.reader.JsonReader",
            "org.springframework.ai.reader.get": "org.springframework.ai.reader.get",
            "org.springframework.ai.reader.resour": "org.springframework.ai.reader.resour",
            "org.springframework.ai.reader.jsonMetadataGenerator": "org.springframework.ai.reader.jsonMetadataGenerator",
            "org.springframework.ai.reader.jsonKeysToUs": "org.springframework.ai.reader.jsonKeysToUs"
        },
        "package": "package org.springframework.ai.reader;",
        "property_declarations": [
            "private List<String> jsonKeysToUse;",
            "private Resource resource;",
            "private JsonMetadataGenerator jsonMetadataGenerator;"
        ],
        "functions": [
            {
                "name": "get",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "ObjectMapper objectMapper = new ObjectMapper();\n\t\tList<Document> documents = new ArrayList<>();\n\t\ttry {\n\t\t\t// TODO, not all json will be an array\n\t\t\tList<Map<String, Object>> jsonData = objectMapper.readValue(this.resource.getInputStream(),\n\t\t\t\t\tnew TypeReference<List<Map<String, Object>>>() {\n\t\t\t\t\t});\n\t\t\tfor (Map<String, Object> item : jsonData) {\n\t\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\t\tfor (String key : jsonKeysToUse) {\n\t\t\t\t\tif (item.containsKey(key)) {\n\t\t\t\t\t\tsb.append(key);\n\t\t\t\t\t\tsb.append(\": \");\n\t\t\t\t\t\tsb.append(item.get(key));\n\t\t\t\t\t\tsb.append(System.lineSeparator());\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tMap<String, Object> metadata = this.jsonMetadataGenerator.generate(item);\n\n\t\t\t\tDocument document;\n\t\t\t\tif (!sb.isEmpty()) {\n\t\t\t\t\tdocument = new Document(sb.toString(), metadata);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tdocument = new Document(item.toString(), metadata);\n\t\t\t\t}\n\n\t\t\t\tdocuments.add(document);\n\t\t\t}\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t\treturn documents;",
                "is_abstract": "",
                "class_name": "JsonReader",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/reader/TextReader.java",
        "class_names": [
            "TextReader"
        ],
        "imports": "import org.springframework.util.StreamUtils;\nimport java.util.List;\nimport org.springframework.ai.document.DocumentReader;\nimport java.nio.charset.Charset;\nimport org.springframework.ai.document.Document;\nimport java.util.Map;\nimport java.util.HashMap;\nimport org.springframework.core.io.Resource;\nimport java.util.Objects;\nimport org.springframework.core.io.DefaultResourceLoader;\nimport java.nio.charset.StandardCharsets;\nimport java.io.IOException;",
        "package_import_paths": {
            "org.springframework.ai.reader.TextReader": "org.springframework.ai.reader.TextReader",
            "org.springframework.ai.reader.setCharset": "org.springframework.ai.reader.setCharset",
            "org.springframework.ai.reader.getCharset": "org.springframework.ai.reader.getCharset",
            "org.springframework.ai.reader.getCustomMetadat": "org.springframework.ai.reader.getCustomMetadat",
            "org.springframework.ai.reader.get": "org.springframework.ai.reader.get",
            "org.springframework.ai.reader.CHARSET_METADATA": "org.springframework.ai.reader.CHARSET_METADATA",
            "org.springframework.ai.reader.SOURCE_METADATA": "org.springframework.ai.reader.SOURCE_METADATA",
            "org.springframework.ai.reader.resour": "org.springframework.ai.reader.resour",
            "org.springframework.ai.reader.charset": "org.springframework.ai.reader.charset",
            "org.springframework.ai.reader.customMetadat": "org.springframework.ai.reader.customMetadat"
        },
        "package": "package org.springframework.ai.reader;",
        "property_declarations": [
            "private Charset charset = StandardCharsets.UTF_8;",
            "private Map<String, Object> customMetadata = new HashMap<>();",
            "private final Resource resource;",
            "public static final String SOURCE_METADATA = \"source\";",
            "public static final String CHARSET_METADATA = \"charset\";"
        ],
        "functions": [
            {
                "name": "setCharset",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Objects.requireNonNull(charset, \"The charset must not be null\");\n\t\tthis.charset = charset;",
                "is_abstract": "",
                "class_name": "TextReader",
                "annotations": []
            },
            {
                "name": "getCharset",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.charset;",
                "is_abstract": "",
                "class_name": "TextReader",
                "annotations": []
            },
            {
                "name": "getCustomMetadata",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.customMetadata;",
                "is_abstract": "",
                "class_name": "TextReader",
                "annotations": []
            },
            {
                "name": "get",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "try {\n\n\t\t\tString document = StreamUtils.copyToString(this.resource.getInputStream(), this.charset);\n\n\t\t\t// Inject source information as a metadata.\n\t\t\tthis.customMetadata.put(CHARSET_METADATA, this.charset.name());\n\t\t\tthis.customMetadata.put(SOURCE_METADATA, this.resource.getFilename());\n\n\t\t\treturn List.of(new Document(document, this.customMetadata));\n\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}",
                "is_abstract": "",
                "class_name": "TextReader",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/reader/EmptyJsonMetadataGenerator.java",
        "class_names": [
            "EmptyJsonMetadataGenerator"
        ],
        "imports": "import java.util.Map;\nimport java.util.Collections;",
        "package_import_paths": {
            "org.springframework.ai.reader.EmptyJsonMetadataGenerator": "org.springframework.ai.reader.EmptyJsonMetadataGenerator",
            "org.springframework.ai.reader.generat": "org.springframework.ai.reader.generat",
            "org.springframework.ai.reader.EMPTY_MAP": "org.springframework.ai.reader.EMPTY_MAP"
        },
        "package": "package org.springframework.ai.reader;",
        "property_declarations": [
            "private static final Map<String, Object> EMPTY_MAP = Collections.emptyMap();"
        ],
        "functions": [
            {
                "name": "generate",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return EMPTY_MAP;",
                "is_abstract": "",
                "class_name": "EmptyJsonMetadataGenerator",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/reader/ExtractedTextFormatter.java",
        "class_names": [
            "Builder",
            "ExtractedTextFormatter"
        ],
        "imports": "import org.springframework.util.StringUtils;",
        "package_import_paths": {
            "org.springframework.ai.reader.ExtractedTextFormatter": "org.springframework.ai.reader.ExtractedTextFormatter",
            "org.springframework.ai.reader.Builder": "org.springframework.ai.reader.Builder",
            "org.springframework.ai.reader.builder": "org.springframework.ai.reader.builder",
            "org.springframework.ai.reader.defaults": "org.springframework.ai.reader.defaults",
            "org.springframework.ai.reader.format": "org.springframework.ai.reader.format",
            "org.springframework.ai.reader.withLeftAlignment": "org.springframework.ai.reader.withLeftAlignment",
            "org.springframework.ai.reader.withNumberOfTopPagesToSkipBeforeDelet": "org.springframework.ai.reader.withNumberOfTopPagesToSkipBeforeDelet",
            "org.springframework.ai.reader.withNumberOfTopTextLinesToDelet": "org.springframework.ai.reader.withNumberOfTopTextLinesToDelet",
            "org.springframework.ai.reader.withNumberOfBottomTextLinesToDelet": "org.springframework.ai.reader.withNumberOfBottomTextLinesToDelet",
            "org.springframework.ai.reader.build": "org.springframework.ai.reader.build",
            "org.springframework.ai.reader.trimAdjacentBlankLines": "org.springframework.ai.reader.trimAdjacentBlankLines",
            "org.springframework.ai.reader.alignToLeft": "org.springframework.ai.reader.alignToLeft",
            "org.springframework.ai.reader.deleteBottomTextLines": "org.springframework.ai.reader.deleteBottomTextLines",
            "org.springframework.ai.reader.deleteTopTextLines": "org.springframework.ai.reader.deleteTopTextLines",
            "org.springframework.ai.reader.leftAlignment": "org.springframework.ai.reader.leftAlignment",
            "org.springframework.ai.reader.numberOfTopPagesToSkipBeforeDelet": "org.springframework.ai.reader.numberOfTopPagesToSkipBeforeDelet",
            "org.springframework.ai.reader.numberOfTopTextLinesToDelet": "org.springframework.ai.reader.numberOfTopTextLinesToDelet",
            "org.springframework.ai.reader.numberOfBottomTextLinesToDelet": "org.springframework.ai.reader.numberOfBottomTextLinesToDelet"
        },
        "package": "package org.springframework.ai.reader;",
        "property_declarations": [
            "private int numberOfBottomTextLinesToDelete;",
            "private int numberOfTopTextLinesToDelete = 0;",
            "private boolean leftAlignment = false;",
            "private int numberOfBottomTextLinesToDelete = 0;",
            "private int numberOfTopPagesToSkipBeforeDelete = 0;",
            "private int numberOfTopTextLinesToDelete;",
            "private int numberOfTopPagesToSkipBeforeDelete;",
            "private boolean leftAlignment;"
        ],
        "functions": [
            {
                "name": "builder",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Builder();",
                "is_abstract": "",
                "class_name": "ExtractedTextFormatter",
                "annotations": []
            },
            {
                "name": "defaults",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Builder().build();",
                "is_abstract": "",
                "class_name": "ExtractedTextFormatter",
                "annotations": []
            },
            {
                "name": "format",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.format(pageText, 0);",
                "is_abstract": "",
                "class_name": "ExtractedTextFormatter",
                "annotations": []
            },
            {
                "name": "withLeftAlignment",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.leftAlignment = leftAlignment;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "ExtractedTextFormatter Builder",
                "annotations": []
            },
            {
                "name": "withNumberOfTopPagesToSkipBeforeDelete",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.numberOfTopPagesToSkipBeforeDelete = numberOfTopPagesToSkipBeforeDelete;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "ExtractedTextFormatter Builder",
                "annotations": []
            },
            {
                "name": "withNumberOfTopTextLinesToDelete",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.numberOfTopTextLinesToDelete = numberOfTopTextLinesToDelete;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "ExtractedTextFormatter Builder",
                "annotations": []
            },
            {
                "name": "withNumberOfBottomTextLinesToDelete",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.numberOfBottomTextLinesToDelete = numberOfBottomTextLinesToDelete;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "ExtractedTextFormatter Builder",
                "annotations": []
            },
            {
                "name": "build",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new ExtractedTextFormatter(this);",
                "is_abstract": "",
                "class_name": "ExtractedTextFormatter Builder",
                "annotations": []
            },
            {
                "name": "trimAdjacentBlankLines",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return pageText.replaceAll(\"(?m)(^ *\\n)\", \"\\n\").replaceAll(\"(?m)^$([\\r\\n]+?)(^$[\\r\\n]+?^)+\", \"$1\");",
                "is_abstract": "",
                "class_name": "ExtractedTextFormatter Builder",
                "annotations": []
            },
            {
                "name": "alignToLeft",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return pageText.replaceAll(\"(?m)(^ *| +(?= |$))\", \"\").replaceAll(\"(?m)^$(\t?)(^$[\\r\\n]+?^)+\", \"$1\");",
                "is_abstract": "",
                "class_name": "ExtractedTextFormatter Builder",
                "annotations": []
            },
            {
                "name": "deleteBottomTextLines",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (!StringUtils.hasText(pageText)) {\n\t\t\treturn pageText;\n\t\t}\n\n\t\tint lineCount = 0;\n\t\tint truncateIndex = pageText.length();\n\t\tint nextTruncateIndex = truncateIndex;\n\t\twhile (lineCount < numberOfLines && nextTruncateIndex >= 0) {\n\t\t\tnextTruncateIndex = pageText.lastIndexOf(System.lineSeparator(), truncateIndex - 1);\n\t\t\ttruncateIndex = nextTruncateIndex < 0 ? truncateIndex : nextTruncateIndex;\n\t\t\tlineCount++;\n\t\t}\n\t\treturn pageText.substring(0, truncateIndex);",
                "is_abstract": "",
                "class_name": "ExtractedTextFormatter Builder",
                "annotations": []
            },
            {
                "name": "deleteTopTextLines",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (!StringUtils.hasText(pageText)) {\n\t\t\treturn pageText;\n\t\t}\n\t\tint lineCount = 0;\n\n\t\tint truncateIndex = 0;\n\t\tint nextTruncateIndex = truncateIndex;\n\t\twhile (lineCount < numberOfLines && nextTruncateIndex >= 0) {\n\t\t\tnextTruncateIndex = pageText.indexOf(System.lineSeparator(), truncateIndex + 1);\n\t\t\ttruncateIndex = nextTruncateIndex < 0 ? truncateIndex : nextTruncateIndex;\n\t\t\tlineCount++;\n\t\t}\n\t\treturn pageText.substring(truncateIndex, pageText.length());",
                "is_abstract": "",
                "class_name": "ExtractedTextFormatter Builder",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/chat/ChatClient.java",
        "class_names": [],
        "imports": "import org.springframework.ai.model.ModelClient;\nimport org.springframework.ai.chat.prompt.Prompt;\nimport org.springframework.ai.chat.messages.Message;\nimport org.springframework.ai.chat.messages.UserMessage;\nimport java.util.Arrays;",
        "package_import_paths": {
            "org.springframework.ai.chat.call": "org.springframework.ai.chat.call"
        },
        "package": "package org.springframework.ai.chat;",
        "property_declarations": [],
        "functions": [
            {
                "name": "call",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Prompt prompt = new Prompt(new UserMessage(message));\n\t\tGeneration generation = call(prompt).getResult();\n\t\treturn (generation != null) ? generation.getOutput().getContent() : \"\";",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/chat/Generation.java",
        "class_names": [
            "Generation"
        ],
        "imports": "import org.springframework.ai.model.ModelResult;\nimport org.springframework.lang.Nullable;\nimport java.util.Map;\nimport java.util.Objects;\nimport org.springframework.ai.chat.messages.AssistantMessage;\nimport org.springframework.ai.chat.metadata.ChatGenerationMetadata;",
        "package_import_paths": {
            "org.springframework.ai.chat.Generation": "org.springframework.ai.chat.Generation",
            "org.springframework.ai.chat.getOutput": "org.springframework.ai.chat.getOutput",
            "org.springframework.ai.chat.getMetadat": "org.springframework.ai.chat.getMetadat",
            "org.springframework.ai.chat.withGenerationMetadat": "org.springframework.ai.chat.withGenerationMetadat",
            "org.springframework.ai.chat.equals": "org.springframework.ai.chat.equals",
            "org.springframework.ai.chat.hashCod": "org.springframework.ai.chat.hashCod",
            "org.springframework.ai.chat.toStrin": "org.springframework.ai.chat.toStrin",
            "org.springframework.ai.chat.assistantMess": "org.springframework.ai.chat.assistantMess",
            "org.springframework.ai.chat.chatGenerationMetadat": "org.springframework.ai.chat.chatGenerationMetadat"
        },
        "package": "package org.springframework.ai.chat;",
        "property_declarations": [
            "private AssistantMessage assistantMessage;",
            "private ChatGenerationMetadata chatGenerationMetadata;"
        ],
        "functions": [
            {
                "name": "getOutput",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.assistantMessage;",
                "is_abstract": "",
                "class_name": "Generation",
                "annotations": []
            },
            {
                "name": "getMetadata",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "ChatGenerationMetadata chatGenerationMetadata = this.chatGenerationMetadata;\n\t\treturn chatGenerationMetadata != null ? chatGenerationMetadata : ChatGenerationMetadata.NULL;",
                "is_abstract": "",
                "class_name": "Generation",
                "annotations": []
            },
            {
                "name": "withGenerationMetadata",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.chatGenerationMetadata = chatGenerationMetadata;\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "Generation",
                "annotations": []
            },
            {
                "name": "equals",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (this == o)\n\t\t\treturn true;\n\t\tif (!(o instanceof Generation that))\n\t\t\treturn false;\n\t\treturn Objects.equals(assistantMessage, that.assistantMessage)\n\t\t\t\t&& Objects.equals(chatGenerationMetadata, that.chatGenerationMetadata);",
                "is_abstract": "",
                "class_name": "Generation",
                "annotations": []
            },
            {
                "name": "hashCode",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return Objects.hash(assistantMessage, chatGenerationMetadata);",
                "is_abstract": "",
                "class_name": "Generation",
                "annotations": []
            },
            {
                "name": "toString",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return \"Generation{\" + \"assistantMessage=\" + assistantMessage + \", chatGenerationMetadata=\"\n\t\t\t\t+ chatGenerationMetadata + '}';",
                "is_abstract": "",
                "class_name": "Generation",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/chat/ChatResponse.java",
        "class_names": [
            "ChatResponse"
        ],
        "imports": "import java.util.List;\nimport org.springframework.util.CollectionUtils;\nimport java.util.Objects;\nimport org.springframework.ai.chat.metadata.ChatResponseMetadata;\nimport org.springframework.ai.model.ModelResponse;",
        "package_import_paths": {
            "org.springframework.ai.chat.ChatRespons": "org.springframework.ai.chat.ChatRespons",
            "org.springframework.ai.chat.getResults": "org.springframework.ai.chat.getResults",
            "org.springframework.ai.chat.getResult": "org.springframework.ai.chat.getResult",
            "org.springframework.ai.chat.getMetadat": "org.springframework.ai.chat.getMetadat",
            "org.springframework.ai.chat.toStrin": "org.springframework.ai.chat.toStrin",
            "org.springframework.ai.chat.equals": "org.springframework.ai.chat.equals",
            "org.springframework.ai.chat.hashCod": "org.springframework.ai.chat.hashCod",
            "org.springframework.ai.chat.chatResponseMetadat": "org.springframework.ai.chat.chatResponseMetadat",
            "org.springframework.ai.chat.generations": "org.springframework.ai.chat.generations"
        },
        "package": "package org.springframework.ai.chat;",
        "property_declarations": [
            "private final ChatResponseMetadata chatResponseMetadata;",
            "private final List<Generation> generations;"
        ],
        "functions": [
            {
                "name": "getResults",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.generations;",
                "is_abstract": "",
                "class_name": "ChatResponse",
                "annotations": []
            },
            {
                "name": "getResult",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (CollectionUtils.isEmpty(this.generations)) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this.generations.get(0);",
                "is_abstract": "",
                "class_name": "ChatResponse",
                "annotations": []
            },
            {
                "name": "getMetadata",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.chatResponseMetadata;",
                "is_abstract": "",
                "class_name": "ChatResponse",
                "annotations": []
            },
            {
                "name": "toString",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return \"ChatResponse [metadata=\" + chatResponseMetadata + \", generations=\" + generations + \"]\";",
                "is_abstract": "",
                "class_name": "ChatResponse",
                "annotations": []
            },
            {
                "name": "equals",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (this == o)\n\t\t\treturn true;\n\t\tif (!(o instanceof ChatResponse that))\n\t\t\treturn false;\n\t\treturn Objects.equals(chatResponseMetadata, that.chatResponseMetadata)\n\t\t\t\t&& Objects.equals(generations, that.generations);",
                "is_abstract": "",
                "class_name": "ChatResponse",
                "annotations": []
            },
            {
                "name": "hashCode",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return Objects.hash(chatResponseMetadata, generations);",
                "is_abstract": "",
                "class_name": "ChatResponse",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/chat/StreamingChatClient.java",
        "class_names": [],
        "imports": "import org.springframework.ai.chat.prompt.Prompt;\nimport org.springframework.ai.chat.messages.Message;\nimport org.springframework.ai.model.StreamingModelClient;\nimport reactor.core.publisher.Flux;\nimport java.util.Arrays;",
        "package_import_paths": {
            "org.springframework.ai.chat.stream": "org.springframework.ai.chat.stream"
        },
        "package": "package org.springframework.ai.chat;",
        "property_declarations": [],
        "functions": [
            {
                "name": "stream",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Prompt prompt = new Prompt(message);\n\t\treturn stream(prompt).map(response -> (response.getResult() == null || response.getResult().getOutput() == null\n\t\t\t\t|| response.getResult().getOutput().getContent() == null) ? \"\"\n\t\t\t\t\t\t: response.getResult().getOutput().getContent());",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/chat/package-info.java",
        "class_names": [],
        "imports": "",
        "package_import_paths": {},
        "package": "package org.springframework.ai.chat;",
        "property_declarations": [],
        "functions": []
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/chat/messages/Message.java",
        "class_names": [],
        "imports": "import java.util.List;\nimport java.util.Map;",
        "package_import_paths": {
            "org.springframework.ai.chat.messages.getContent": "org.springframework.ai.chat.messages.getContent",
            "org.springframework.ai.chat.messages.getMedi": "org.springframework.ai.chat.messages.getMedi",
            "org.springframework.ai.chat.messages.getProperties": "org.springframework.ai.chat.messages.getProperties",
            "org.springframework.ai.chat.messages.getMessageTy": "org.springframework.ai.chat.messages.getMessageTy"
        },
        "package": "package org.springframework.ai.chat.messages;",
        "property_declarations": [],
        "functions": [
            {
                "name": "getContent",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "getMedia",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "getProperties",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "getMessageType",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/chat/messages/AssistantMessage.java",
        "class_names": [
            "AssistantMessage"
        ],
        "imports": "import java.util.Map;",
        "package_import_paths": {
            "org.springframework.ai.chat.messages.AssistantMess": "org.springframework.ai.chat.messages.AssistantMess",
            "org.springframework.ai.chat.messages.toStrin": "org.springframework.ai.chat.messages.toStrin"
        },
        "package": "package org.springframework.ai.chat.messages;",
        "property_declarations": [],
        "functions": [
            {
                "name": "toString",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return \"AssistantMessage{\" + \"content='\" + getContent() + '\\'' + \", properties=\" + properties + \", messageType=\"\n\t\t\t\t+ messageType + '}';",
                "is_abstract": "",
                "class_name": "AssistantMessage",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/chat/messages/AbstractMessage.java",
        "class_names": [
            "AbstractMessage"
        ],
        "imports": "import java.util.ArrayList;\nimport org.springframework.util.StreamUtils;\nimport java.util.List;\nimport org.springframework.util.Assert;\nimport java.nio.charset.Charset;\nimport java.util.Map;\nimport org.springframework.core.io.Resource;\nimport java.util.Collections;\nimport java.io.InputStream;\nimport java.io.IOException;",
        "package_import_paths": {
            "org.springframework.ai.chat.messages.AbstractMess": "org.springframework.ai.chat.messages.AbstractMess",
            "org.springframework.ai.chat.messages.getContent": "org.springframework.ai.chat.messages.getContent",
            "org.springframework.ai.chat.messages.getMedi": "org.springframework.ai.chat.messages.getMedi",
            "org.springframework.ai.chat.messages.getProperties": "org.springframework.ai.chat.messages.getProperties",
            "org.springframework.ai.chat.messages.getMessageTy": "org.springframework.ai.chat.messages.getMessageTy",
            "org.springframework.ai.chat.messages.hashCod": "org.springframework.ai.chat.messages.hashCod",
            "org.springframework.ai.chat.messages.equals": "org.springframework.ai.chat.messages.equals",
            "org.springframework.ai.chat.messages.messageTy": "org.springframework.ai.chat.messages.messageTy",
            "org.springframework.ai.chat.messages.textContent": "org.springframework.ai.chat.messages.textContent",
            "org.springframework.ai.chat.messages.mediaDat": "org.springframework.ai.chat.messages.mediaDat",
            "org.springframework.ai.chat.messages.properties": "org.springframework.ai.chat.messages.properties"
        },
        "package": "package org.springframework.ai.chat.messages;",
        "property_declarations": [
            "protected final Map<String, Object> properties;",
            "protected final List<Media> mediaData;",
            "protected final MessageType messageType;",
            "protected final String textContent;"
        ],
        "functions": [
            {
                "name": "getContent",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.textContent;",
                "is_abstract": "",
                "class_name": "AbstractMessage",
                "annotations": []
            },
            {
                "name": "getMedia",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.mediaData;",
                "is_abstract": "",
                "class_name": "AbstractMessage",
                "annotations": []
            },
            {
                "name": "getProperties",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.properties;",
                "is_abstract": "",
                "class_name": "AbstractMessage",
                "annotations": []
            },
            {
                "name": "getMessageType",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.messageType;",
                "is_abstract": "",
                "class_name": "AbstractMessage",
                "annotations": []
            },
            {
                "name": "hashCode",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "final int prime = 31;\n\t\tint result = 1;\n\t\tresult = prime * result + ((mediaData == null) ? 0 : mediaData.hashCode());\n\t\tresult = prime * result + ((properties == null) ? 0 : properties.hashCode());\n\t\tresult = prime * result + ((messageType == null) ? 0 : messageType.hashCode());\n\t\treturn result;",
                "is_abstract": "",
                "class_name": "AbstractMessage",
                "annotations": []
            },
            {
                "name": "equals",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (this == obj)\n\t\t\treturn true;\n\t\tif (obj == null)\n\t\t\treturn false;\n\t\tif (getClass() != obj.getClass())\n\t\t\treturn false;\n\t\tAbstractMessage other = (AbstractMessage) obj;\n\t\tif (mediaData == null) {\n\t\t\tif (other.mediaData != null)\n\t\t\t\treturn false;\n\t\t}\n\t\telse if (!mediaData.equals(other.mediaData))\n\t\t\treturn false;\n\t\tif (properties == null) {\n\t\t\tif (other.properties != null)\n\t\t\t\treturn false;\n\t\t}\n\t\telse if (!properties.equals(other.properties))\n\t\t\treturn false;\n\t\tif (messageType != other.messageType)\n\t\t\treturn false;\n\t\treturn true;",
                "is_abstract": "",
                "class_name": "AbstractMessage",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/chat/messages/SystemMessage.java",
        "class_names": [
            "SystemMessage"
        ],
        "imports": "import org.springframework.core.io.Resource;",
        "package_import_paths": {
            "org.springframework.ai.chat.messages.SystemMess": "org.springframework.ai.chat.messages.SystemMess",
            "org.springframework.ai.chat.messages.toStrin": "org.springframework.ai.chat.messages.toStrin"
        },
        "package": "package org.springframework.ai.chat.messages;",
        "property_declarations": [],
        "functions": [
            {
                "name": "toString",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return \"SystemMessage{\" + \"content='\" + getContent() + '\\'' + \", properties=\" + properties + \", messageType=\"\n\t\t\t\t+ messageType + '}';",
                "is_abstract": "",
                "class_name": "SystemMessage",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/chat/messages/Media.java",
        "class_names": [
            "Media"
        ],
        "imports": "import org.springframework.util.MimeType;\nimport org.springframework.util.Assert;",
        "package_import_paths": {
            "org.springframework.ai.chat.messages.Medi": "org.springframework.ai.chat.messages.Medi",
            "org.springframework.ai.chat.messages.getMimeTy": "org.springframework.ai.chat.messages.getMimeTy",
            "org.springframework.ai.chat.messages.getDat": "org.springframework.ai.chat.messages.getDat",
            "org.springframework.ai.chat.messages.mimeTy": "org.springframework.ai.chat.messages.mimeTy",
            "org.springframework.ai.chat.messages.dat": "org.springframework.ai.chat.messages.dat"
        },
        "package": "package org.springframework.ai.chat.messages;",
        "property_declarations": [
            "private final MimeType mimeType;",
            "private final Object data;"
        ],
        "functions": [
            {
                "name": "getMimeType",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.mimeType;",
                "is_abstract": "",
                "class_name": "Media",
                "annotations": []
            },
            {
                "name": "getData",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.data;",
                "is_abstract": "",
                "class_name": "Media",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/chat/messages/UserMessage.java",
        "class_names": [
            "UserMessage"
        ],
        "imports": "import java.util.List;\nimport org.springframework.core.io.Resource;\nimport java.util.Arrays;",
        "package_import_paths": {
            "org.springframework.ai.chat.messages.UserMess": "org.springframework.ai.chat.messages.UserMess",
            "org.springframework.ai.chat.messages.toStrin": "org.springframework.ai.chat.messages.toStrin"
        },
        "package": "package org.springframework.ai.chat.messages;",
        "property_declarations": [],
        "functions": [
            {
                "name": "toString",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return \"UserMessage{\" + \"content='\" + getContent() + '\\'' + \", properties=\" + properties + \", messageType=\"\n\t\t\t\t+ messageType + '}';",
                "is_abstract": "",
                "class_name": "UserMessage",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/chat/messages/MessageType.java",
        "class_names": [],
        "imports": "",
        "package_import_paths": {
            "org.springframework.ai.chat.messages.getValu": "org.springframework.ai.chat.messages.getValu",
            "org.springframework.ai.chat.messages.fromValu": "org.springframework.ai.chat.messages.fromValu",
            "org.springframework.ai.chat.messages.valu": "org.springframework.ai.chat.messages.valu"
        },
        "package": "package org.springframework.ai.chat.messages;",
        "property_declarations": [
            "private final String value;"
        ],
        "functions": [
            {
                "name": "getValue",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return value;",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "fromValue",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "for (MessageType messageType : MessageType.values()) {\n\t\t\tif (messageType.getValue().equals(value)) {\n\t\t\t\treturn messageType;\n\t\t\t}\n\t\t}\n\t\tthrow new IllegalArgumentException(\"Invalid MessageType value: \" + value);",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/chat/messages/FunctionMessage.java",
        "class_names": [
            "FunctionMessage"
        ],
        "imports": "import java.util.Map;",
        "package_import_paths": {
            "org.springframework.ai.chat.messages.FunctionMess": "org.springframework.ai.chat.messages.FunctionMess",
            "org.springframework.ai.chat.messages.toStrin": "org.springframework.ai.chat.messages.toStrin"
        },
        "package": "package org.springframework.ai.chat.messages;",
        "property_declarations": [],
        "functions": [
            {
                "name": "toString",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return \"FunctionMessage{\" + \"content='\" + getContent() + '\\'' + \", properties=\" + properties + \", messageType=\"\n\t\t\t\t+ messageType + '}';",
                "is_abstract": "",
                "class_name": "FunctionMessage",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/chat/prompt/FunctionPromptTemplate.java",
        "class_names": [
            "FunctionPromptTemplate"
        ],
        "imports": "",
        "package_import_paths": {
            "org.springframework.ai.chat.prompt.FunctionPromptTemplat": "org.springframework.ai.chat.prompt.FunctionPromptTemplat",
            "org.springframework.ai.chat.prompt.nam": "org.springframework.ai.chat.prompt.nam"
        },
        "package": "package org.springframework.ai.chat.prompt;",
        "property_declarations": [
            "private String name;"
        ],
        "functions": []
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/chat/prompt/SystemPromptTemplate.java",
        "class_names": [
            "SystemPromptTemplate"
        ],
        "imports": "import org.springframework.ai.chat.messages.SystemMessage;\nimport org.springframework.core.io.Resource;\nimport org.springframework.ai.chat.messages.Message;\nimport java.util.Map;",
        "package_import_paths": {
            "org.springframework.ai.chat.prompt.SystemPromptTemplat": "org.springframework.ai.chat.prompt.SystemPromptTemplat",
            "org.springframework.ai.chat.prompt.createMess": "org.springframework.ai.chat.prompt.createMess",
            "org.springframework.ai.chat.prompt.creat": "org.springframework.ai.chat.prompt.creat"
        },
        "package": "package org.springframework.ai.chat.prompt;",
        "property_declarations": [],
        "functions": [
            {
                "name": "createMessage",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new SystemMessage(render());",
                "is_abstract": "",
                "class_name": "SystemPromptTemplate",
                "annotations": []
            },
            {
                "name": "create",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Prompt(new SystemMessage(render()));",
                "is_abstract": "",
                "class_name": "SystemPromptTemplate",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/chat/prompt/ChatOptionsBuilder.java",
        "class_names": [
            "ChatOptionsBuilder",
            "ChatOptionsImpl"
        ],
        "imports": "",
        "package_import_paths": {
            "org.springframework.ai.chat.prompt.ChatOptionsBuilder": "org.springframework.ai.chat.prompt.ChatOptionsBuilder",
            "org.springframework.ai.chat.prompt.ChatOptionsImpl": "org.springframework.ai.chat.prompt.ChatOptionsImpl",
            "org.springframework.ai.chat.prompt.getTemperatur": "org.springframework.ai.chat.prompt.getTemperatur",
            "org.springframework.ai.chat.prompt.setTemperatur": "org.springframework.ai.chat.prompt.setTemperatur",
            "org.springframework.ai.chat.prompt.getTopP": "org.springframework.ai.chat.prompt.getTopP",
            "org.springframework.ai.chat.prompt.setTopP": "org.springframework.ai.chat.prompt.setTopP",
            "org.springframework.ai.chat.prompt.getTopK": "org.springframework.ai.chat.prompt.getTopK",
            "org.springframework.ai.chat.prompt.setTopK": "org.springframework.ai.chat.prompt.setTopK",
            "org.springframework.ai.chat.prompt.builder": "org.springframework.ai.chat.prompt.builder",
            "org.springframework.ai.chat.prompt.withTemperatur": "org.springframework.ai.chat.prompt.withTemperatur",
            "org.springframework.ai.chat.prompt.withTopP": "org.springframework.ai.chat.prompt.withTopP",
            "org.springframework.ai.chat.prompt.withTopK": "org.springframework.ai.chat.prompt.withTopK",
            "org.springframework.ai.chat.prompt.build": "org.springframework.ai.chat.prompt.build",
            "org.springframework.ai.chat.prompt.temperatur": "org.springframework.ai.chat.prompt.temperatur",
            "org.springframework.ai.chat.prompt.topP": "org.springframework.ai.chat.prompt.topP",
            "org.springframework.ai.chat.prompt.topK": "org.springframework.ai.chat.prompt.topK",
            "org.springframework.ai.chat.prompt.options": "org.springframework.ai.chat.prompt.options"
        },
        "package": "package org.springframework.ai.chat.prompt;",
        "property_declarations": [
            "private Integer topK;",
            "private Float temperature;",
            "private final ChatOptionsImpl options = new ChatOptionsImpl();",
            "private Float topP;"
        ],
        "functions": [
            {
                "name": "getTemperature",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return temperature;",
                "is_abstract": "",
                "class_name": "ChatOptionsBuilder ChatOptionsImpl",
                "annotations": []
            },
            {
                "name": "setTemperature",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.temperature = temperature;",
                "is_abstract": "",
                "class_name": "ChatOptionsBuilder ChatOptionsImpl",
                "annotations": []
            },
            {
                "name": "getTopP",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return topP;",
                "is_abstract": "",
                "class_name": "ChatOptionsBuilder ChatOptionsImpl",
                "annotations": []
            },
            {
                "name": "setTopP",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.topP = topP;",
                "is_abstract": "",
                "class_name": "ChatOptionsBuilder ChatOptionsImpl",
                "annotations": []
            },
            {
                "name": "getTopK",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return topK;",
                "is_abstract": "",
                "class_name": "ChatOptionsBuilder ChatOptionsImpl",
                "annotations": []
            },
            {
                "name": "setTopK",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.topK = topK;",
                "is_abstract": "",
                "class_name": "ChatOptionsBuilder ChatOptionsImpl",
                "annotations": []
            },
            {
                "name": "builder",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new ChatOptionsBuilder();",
                "is_abstract": "",
                "class_name": "ChatOptionsBuilder ChatOptionsImpl",
                "annotations": []
            },
            {
                "name": "withTemperature",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "options.setTemperature(temperature);\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "ChatOptionsBuilder ChatOptionsImpl",
                "annotations": []
            },
            {
                "name": "withTopP",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "options.setTopP(topP);\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "ChatOptionsBuilder ChatOptionsImpl",
                "annotations": []
            },
            {
                "name": "withTopK",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "options.setTopK(topK);\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "ChatOptionsBuilder ChatOptionsImpl",
                "annotations": []
            },
            {
                "name": "build",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return options;",
                "is_abstract": "",
                "class_name": "ChatOptionsBuilder ChatOptionsImpl",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/chat/prompt/ChatOptions.java",
        "class_names": [],
        "imports": "import org.springframework.ai.model.ModelOptions;",
        "package_import_paths": {
            "org.springframework.ai.chat.prompt.getTemperatur": "org.springframework.ai.chat.prompt.getTemperatur",
            "org.springframework.ai.chat.prompt.getTopP": "org.springframework.ai.chat.prompt.getTopP",
            "org.springframework.ai.chat.prompt.getTopK": "org.springframework.ai.chat.prompt.getTopK"
        },
        "package": "package org.springframework.ai.chat.prompt;",
        "property_declarations": [],
        "functions": [
            {
                "name": "getTemperature",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "getTopP",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "getTopK",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/chat/prompt/ChatPromptTemplate.java",
        "class_names": [
            "ChatPromptTemplate"
        ],
        "imports": "import java.util.ArrayList;\nimport org.springframework.ai.chat.messages.Message;\nimport java.util.List;\nimport java.util.Map;",
        "package_import_paths": {
            "org.springframework.ai.chat.prompt.ChatPromptTemplat": "org.springframework.ai.chat.prompt.ChatPromptTemplat",
            "org.springframework.ai.chat.prompt.render": "org.springframework.ai.chat.prompt.render",
            "org.springframework.ai.chat.prompt.createMessages": "org.springframework.ai.chat.prompt.createMessages",
            "org.springframework.ai.chat.prompt.creat": "org.springframework.ai.chat.prompt.creat",
            "org.springframework.ai.chat.prompt.promptTemplates": "org.springframework.ai.chat.prompt.promptTemplates"
        },
        "package": "package org.springframework.ai.chat.prompt;",
        "property_declarations": [
            "private final List<PromptTemplate> promptTemplates;"
        ],
        "functions": [
            {
                "name": "render",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "StringBuilder sb = new StringBuilder();\n\t\tfor (PromptTemplate promptTemplate : promptTemplates) {\n\t\t\tsb.append(promptTemplate.render());\n\t\t}\n\t\treturn sb.toString();",
                "is_abstract": "",
                "class_name": "ChatPromptTemplate",
                "annotations": []
            },
            {
                "name": "createMessages",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "List<Message> messages = new ArrayList<>();\n\t\tfor (PromptTemplate promptTemplate : promptTemplates) {\n\t\t\tmessages.add(promptTemplate.createMessage());\n\t\t}\n\t\treturn messages;",
                "is_abstract": "",
                "class_name": "ChatPromptTemplate",
                "annotations": []
            },
            {
                "name": "create",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "List<Message> messages = createMessages();\n\t\treturn new Prompt(messages);",
                "is_abstract": "",
                "class_name": "ChatPromptTemplate",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/chat/prompt/PromptTemplate.java",
        "class_names": [
            "PromptTemplate"
        ],
        "imports": "import java.util.stream.Collectors;\nimport org.stringtemplate.v4.compiler.STLexer;\nimport java.util.Map.Entry;\nimport org.springframework.ai.chat.messages.Message;\nimport org.antlr.runtime.Token;\nimport org.springframework.ai.chat.messages.UserMessage;\nimport org.springframework.util.StreamUtils;\nimport java.util.*;\nimport org.springframework.ai.chat.messages.Media;\nimport java.nio.charset.Charset;\nimport org.springframework.core.io.Resource;\nimport java.util.stream.IntStream;\nimport org.antlr.runtime.TokenStream;\nimport org.springframework.ai.parser.OutputParser;\nimport java.io.InputStream;\nimport org.stringtemplate.v4.ST;\nimport java.io.IOException;",
        "package_import_paths": {
            "org.springframework.ai.chat.prompt.PromptTemplat": "org.springframework.ai.chat.prompt.PromptTemplat",
            "org.springframework.ai.chat.prompt.getOutputParser": "org.springframework.ai.chat.prompt.getOutputParser",
            "org.springframework.ai.chat.prompt.setOutputParser": "org.springframework.ai.chat.prompt.setOutputParser",
            "org.springframework.ai.chat.prompt.add": "org.springframework.ai.chat.prompt.add",
            "org.springframework.ai.chat.prompt.getTemplat": "org.springframework.ai.chat.prompt.getTemplat",
            "org.springframework.ai.chat.prompt.getTemplateFormat": "org.springframework.ai.chat.prompt.getTemplateFormat",
            "org.springframework.ai.chat.prompt.render": "org.springframework.ai.chat.prompt.render",
            "org.springframework.ai.chat.prompt.renderResour": "org.springframework.ai.chat.prompt.renderResour",
            "org.springframework.ai.chat.prompt.createMess": "org.springframework.ai.chat.prompt.createMess",
            "org.springframework.ai.chat.prompt.creat": "org.springframework.ai.chat.prompt.creat",
            "org.springframework.ai.chat.prompt.getInputVariables": "org.springframework.ai.chat.prompt.getInputVariables",
            "org.springframework.ai.chat.prompt.validat": "org.springframework.ai.chat.prompt.validat",
            "org.springframework.ai.chat.prompt.st": "org.springframework.ai.chat.prompt.st",
            "org.springframework.ai.chat.prompt.dynamicModel": "org.springframework.ai.chat.prompt.dynamicModel",
            "org.springframework.ai.chat.prompt.templat": "org.springframework.ai.chat.prompt.templat",
            "org.springframework.ai.chat.prompt.templateFormat": "org.springframework.ai.chat.prompt.templateFormat",
            "org.springframework.ai.chat.prompt.outputParser": "org.springframework.ai.chat.prompt.outputParser"
        },
        "package": "package org.springframework.ai.chat.prompt;",
        "property_declarations": [
            "private OutputParser outputParser;",
            "private Map<String, Object> dynamicModel = new HashMap<>();",
            "private ST st;",
            "protected String template;",
            "protected TemplateFormat templateFormat = TemplateFormat.ST;"
        ],
        "functions": [
            {
                "name": "getOutputParser",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return outputParser;",
                "is_abstract": "",
                "class_name": "PromptTemplate",
                "annotations": []
            },
            {
                "name": "setOutputParser",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Objects.requireNonNull(outputParser, \"Output Parser can not be null\");\n\t\tthis.outputParser = outputParser;",
                "is_abstract": "",
                "class_name": "PromptTemplate",
                "annotations": []
            },
            {
                "name": "add",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.st.add(name, value);\n\t\tthis.dynamicModel.put(name, value);",
                "is_abstract": "",
                "class_name": "PromptTemplate",
                "annotations": []
            },
            {
                "name": "getTemplate",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.template;",
                "is_abstract": "",
                "class_name": "PromptTemplate",
                "annotations": []
            },
            {
                "name": "getTemplateFormat",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.templateFormat;",
                "is_abstract": "",
                "class_name": "PromptTemplate",
                "annotations": []
            },
            {
                "name": "render",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "validate(this.dynamicModel);\n\t\treturn st.render();",
                "is_abstract": "",
                "class_name": "PromptTemplate",
                "annotations": []
            },
            {
                "name": "renderResource",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "try {\n\t\t\treturn resource.getContentAsString(Charset.defaultCharset());\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t\t// try (InputStream inputStream = resource.getInputStream()) {\n\t\t// return StreamUtils.copyToString(inputStream, Charset.defaultCharset());\n\t\t// }\n\t\t// catch (IOException ex) {\n\t\t// throw new RuntimeException(ex);\n\t\t// }",
                "is_abstract": "",
                "class_name": "PromptTemplate",
                "annotations": []
            },
            {
                "name": "createMessage",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new UserMessage(render());",
                "is_abstract": "",
                "class_name": "PromptTemplate",
                "annotations": []
            },
            {
                "name": "create",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Prompt(render(new HashMap<>()));",
                "is_abstract": "",
                "class_name": "PromptTemplate",
                "annotations": []
            },
            {
                "name": "getInputVariables",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "TokenStream tokens = this.st.impl.tokens;\n\t\treturn IntStream.range(0, tokens.range())\n\t\t\t.mapToObj(tokens::get)\n\t\t\t.filter(token -> token.getType() == STLexer.ID)\n\t\t\t.map(Token::getText)\n\t\t\t.collect(Collectors.toSet());",
                "is_abstract": "",
                "class_name": "PromptTemplate",
                "annotations": []
            },
            {
                "name": "validate",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Set<String> dynamicVariableNames = new HashSet<>(this.dynamicModel.keySet());\n\t\tSet<String> modelVariables = new HashSet<>(model.keySet());\n\t\tmodelVariables.addAll(dynamicVariableNames);\n\t\tSet<String> missingEntries = new HashSet<>(getInputVariables());\n\t\tmissingEntries.removeAll(modelVariables);\n\t\tif (!missingEntries.isEmpty()) {\n\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\"All template variables were not replaced. Missing variable names are \" + missingEntries);\n\t\t}",
                "is_abstract": "",
                "class_name": "PromptTemplate",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/chat/prompt/PromptTemplateChatActions.java",
        "class_names": [],
        "imports": "import org.springframework.ai.chat.messages.Message;\nimport java.util.List;\nimport java.util.Map;",
        "package_import_paths": {
            "org.springframework.ai.chat.prompt.createMessages": "org.springframework.ai.chat.prompt.createMessages"
        },
        "package": "package org.springframework.ai.chat.prompt;",
        "property_declarations": [],
        "functions": [
            {
                "name": "createMessages",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/chat/prompt/PromptTemplateMessageActions.java",
        "class_names": [],
        "imports": "import org.springframework.ai.chat.messages.Message;\nimport org.springframework.ai.chat.messages.Media;\nimport java.util.List;\nimport java.util.Map;",
        "package_import_paths": {
            "org.springframework.ai.chat.prompt.createMess": "org.springframework.ai.chat.prompt.createMess"
        },
        "package": "package org.springframework.ai.chat.prompt;",
        "property_declarations": [],
        "functions": [
            {
                "name": "createMessage",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/chat/prompt/PromptTemplateActions.java",
        "class_names": [],
        "imports": "import java.util.Map;",
        "package_import_paths": {
            "org.springframework.ai.chat.prompt.creat": "org.springframework.ai.chat.prompt.creat"
        },
        "package": "package org.springframework.ai.chat.prompt;",
        "property_declarations": [],
        "functions": [
            {
                "name": "create",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/chat/prompt/TemplateFormat.java",
        "class_names": [],
        "imports": "",
        "package_import_paths": {
            "org.springframework.ai.chat.prompt.getValu": "org.springframework.ai.chat.prompt.getValu",
            "org.springframework.ai.chat.prompt.fromValu": "org.springframework.ai.chat.prompt.fromValu",
            "org.springframework.ai.chat.prompt.valu": "org.springframework.ai.chat.prompt.valu"
        },
        "package": "package org.springframework.ai.chat.prompt;",
        "property_declarations": [
            "private final String value;"
        ],
        "functions": [
            {
                "name": "getValue",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return value;",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "fromValue",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "for (TemplateFormat templateFormat : TemplateFormat.values()) {\n\t\t\tif (templateFormat.getValue().equals(value)) {\n\t\t\t\treturn templateFormat;\n\t\t\t}\n\t\t}\n\t\tthrow new IllegalArgumentException(\"Invalid TemplateFormat value: \" + value);",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/chat/prompt/PromptTemplateStringActions.java",
        "class_names": [],
        "imports": "import java.util.Map;",
        "package_import_paths": {
            "org.springframework.ai.chat.prompt.render": "org.springframework.ai.chat.prompt.render"
        },
        "package": "package org.springframework.ai.chat.prompt;",
        "property_declarations": [],
        "functions": [
            {
                "name": "render",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/chat/prompt/Prompt.java",
        "class_names": [
            "Prompt"
        ],
        "imports": "import org.springframework.ai.model.ModelOptions;\nimport org.springframework.ai.chat.messages.Message;\nimport org.springframework.ai.chat.messages.UserMessage;\nimport java.util.List;\nimport org.springframework.ai.model.ModelRequest;\nimport java.util.Objects;\nimport java.util.Collections;",
        "package_import_paths": {
            "org.springframework.ai.chat.prompt.Prompt": "org.springframework.ai.chat.prompt.Prompt",
            "org.springframework.ai.chat.prompt.getContents": "org.springframework.ai.chat.prompt.getContents",
            "org.springframework.ai.chat.prompt.getOptions": "org.springframework.ai.chat.prompt.getOptions",
            "org.springframework.ai.chat.prompt.getInstructions": "org.springframework.ai.chat.prompt.getInstructions",
            "org.springframework.ai.chat.prompt.toStrin": "org.springframework.ai.chat.prompt.toStrin",
            "org.springframework.ai.chat.prompt.equals": "org.springframework.ai.chat.prompt.equals",
            "org.springframework.ai.chat.prompt.hashCod": "org.springframework.ai.chat.prompt.hashCod",
            "org.springframework.ai.chat.prompt.messages": "org.springframework.ai.chat.prompt.messages",
            "org.springframework.ai.chat.prompt.modelOptions": "org.springframework.ai.chat.prompt.modelOptions"
        },
        "package": "package org.springframework.ai.chat.prompt;",
        "property_declarations": [
            "private ChatOptions modelOptions;",
            "private final List<Message> messages;"
        ],
        "functions": [
            {
                "name": "getContents",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "StringBuilder sb = new StringBuilder();\n\t\tfor (Message message : getInstructions()) {\n\t\t\tsb.append(message.getContent());\n\t\t}\n\t\treturn sb.toString();",
                "is_abstract": "",
                "class_name": "Prompt",
                "annotations": []
            },
            {
                "name": "getOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.modelOptions;",
                "is_abstract": "",
                "class_name": "Prompt",
                "annotations": []
            },
            {
                "name": "getInstructions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.messages;",
                "is_abstract": "",
                "class_name": "Prompt",
                "annotations": []
            },
            {
                "name": "toString",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return \"Prompt{\" + \"messages=\" + this.messages + \", modelOptions=\" + this.modelOptions + '}';",
                "is_abstract": "",
                "class_name": "Prompt",
                "annotations": []
            },
            {
                "name": "equals",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (this == o)\n\t\t\treturn true;\n\t\tif (!(o instanceof Prompt prompt))\n\t\t\treturn false;\n\t\treturn Objects.equals(this.messages, prompt.messages) && Objects.equals(this.modelOptions, prompt.modelOptions);",
                "is_abstract": "",
                "class_name": "Prompt",
                "annotations": []
            },
            {
                "name": "hashCode",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return Objects.hash(this.messages, this.modelOptions);",
                "is_abstract": "",
                "class_name": "Prompt",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/chat/prompt/AssistantPromptTemplate.java",
        "class_names": [
            "AssistantPromptTemplate"
        ],
        "imports": "import java.util.Map;\nimport org.springframework.core.io.Resource;\nimport org.springframework.ai.chat.messages.Message;\nimport org.springframework.ai.chat.messages.AssistantMessage;",
        "package_import_paths": {
            "org.springframework.ai.chat.prompt.AssistantPromptTemplat": "org.springframework.ai.chat.prompt.AssistantPromptTemplat",
            "org.springframework.ai.chat.prompt.creat": "org.springframework.ai.chat.prompt.creat",
            "org.springframework.ai.chat.prompt.createMess": "org.springframework.ai.chat.prompt.createMess"
        },
        "package": "package org.springframework.ai.chat.prompt;",
        "property_declarations": [],
        "functions": [
            {
                "name": "create",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Prompt(new AssistantMessage(render()));",
                "is_abstract": "",
                "class_name": "AssistantPromptTemplate",
                "annotations": []
            },
            {
                "name": "createMessage",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new AssistantMessage(render());",
                "is_abstract": "",
                "class_name": "AssistantPromptTemplate",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/chat/metadata/PromptMetadata.java",
        "class_names": [],
        "imports": "import java.util.stream.StreamSupport;\nimport java.util.Optional;\nimport java.util.Arrays;\nimport org.springframework.util.Assert;",
        "package_import_paths": {
            "org.springframework.ai.chat.metadata.empty": "org.springframework.ai.chat.metadata.empty",
            "org.springframework.ai.chat.metadata.of": "org.springframework.ai.chat.metadata.of",
            "org.springframework.ai.chat.metadata.findByPromptIndex": "org.springframework.ai.chat.metadata.findByPromptIndex",
            "org.springframework.ai.chat.metadata.from": "org.springframework.ai.chat.metadata.from",
            "org.springframework.ai.chat.metadata.getPromptIndex": "org.springframework.ai.chat.metadata.getPromptIndex",
            "org.springframework.ai.chat.metadata.SuppressWarnings": "org.springframework.ai.chat.metadata.SuppressWarnings",
            "org.springframework.ai.chat.metadata.getContentFilterMetadat": "org.springframework.ai.chat.metadata.getContentFilterMetadat"
        },
        "package": "package org.springframework.ai.chat.metadata;",
        "property_declarations": [],
        "functions": [
            {
                "name": "empty",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return of();",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "of",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return of(Arrays.asList(array));",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "findByPromptIndex",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.isTrue(promptIndex > -1, \"Prompt index [%d] must be greater than equal to 0\".formatted(promptIndex));\n\n\t\treturn StreamSupport.stream(this.spliterator(), false)\n\t\t\t.filter(promptFilterMetadata -> promptFilterMetadata.getPromptIndex() == promptIndex)\n\t\t\t.findFirst();",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "from",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new PromptFilterMetadata() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic int getPromptIndex() {\n\t\t\t\t\treturn promptIndex;\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\t\tpublic <T> T getContentFilterMetadata() {\n\t\t\t\t\treturn (T) contentFilterMetadata;\n\t\t\t\t}\n\t\t\t};",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "getPromptIndex",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return promptIndex;",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "SuppressWarnings",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return (T) contentFilterMetadata;",
                "is_abstract": "",
                "class_name": "",
                "annotations": [
                    "@SuppressWarnings(\"unchecked\")"
                ]
            },
            {
                "name": "getContentFilterMetadata",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/chat/metadata/ChatGenerationMetadata.java",
        "class_names": [],
        "imports": "import org.springframework.ai.model.ResultMetadata;\nimport org.springframework.lang.Nullable;",
        "package_import_paths": {
            "org.springframework.ai.chat.metadata.from": "org.springframework.ai.chat.metadata.from",
            "org.springframework.ai.chat.metadata.SuppressWarnings": "org.springframework.ai.chat.metadata.SuppressWarnings",
            "org.springframework.ai.chat.metadata.getFinishReason": "org.springframework.ai.chat.metadata.getFinishReason",
            "org.springframework.ai.chat.metadata.getContentFilterMetadat": "org.springframework.ai.chat.metadata.getContentFilterMetadat"
        },
        "package": "package org.springframework.ai.chat.metadata;",
        "property_declarations": [],
        "functions": [
            {
                "name": "from",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new ChatGenerationMetadata() {\n\n\t\t\t@Override\n\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\tpublic <T> T getContentFilterMetadata() {\n\t\t\t\treturn (T) contentFilterMetadata;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic String getFinishReason() {\n\t\t\t\treturn finishReason;\n\t\t\t}\n\t\t};",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "SuppressWarnings",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return (T) contentFilterMetadata;",
                "is_abstract": "",
                "class_name": "",
                "annotations": [
                    "@SuppressWarnings(\"unchecked\")"
                ]
            },
            {
                "name": "getFinishReason",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return finishReason;",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "getContentFilterMetadata",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/chat/metadata/RateLimit.java",
        "class_names": [],
        "imports": "import java.time.Duration;",
        "package_import_paths": {
            "org.springframework.ai.chat.metadata.getRequestsLimit": "org.springframework.ai.chat.metadata.getRequestsLimit",
            "org.springframework.ai.chat.metadata.getRequestsRemainin": "org.springframework.ai.chat.metadata.getRequestsRemainin",
            "org.springframework.ai.chat.metadata.getRequestsReset": "org.springframework.ai.chat.metadata.getRequestsReset",
            "org.springframework.ai.chat.metadata.getTokensLimit": "org.springframework.ai.chat.metadata.getTokensLimit",
            "org.springframework.ai.chat.metadata.getTokensRemainin": "org.springframework.ai.chat.metadata.getTokensRemainin",
            "org.springframework.ai.chat.metadata.getTokensReset": "org.springframework.ai.chat.metadata.getTokensReset"
        },
        "package": "package org.springframework.ai.chat.metadata;",
        "property_declarations": [],
        "functions": [
            {
                "name": "getRequestsLimit",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "getRequestsRemaining",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "getRequestsReset",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "getTokensLimit",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "getTokensRemaining",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "getTokensReset",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/chat/metadata/EmptyUsage.java",
        "class_names": [
            "EmptyUsage"
        ],
        "imports": "",
        "package_import_paths": {
            "org.springframework.ai.chat.metadata.EmptyUs": "org.springframework.ai.chat.metadata.EmptyUs",
            "org.springframework.ai.chat.metadata.getPromptTokens": "org.springframework.ai.chat.metadata.getPromptTokens",
            "org.springframework.ai.chat.metadata.getGenerationTokens": "org.springframework.ai.chat.metadata.getGenerationTokens"
        },
        "package": "package org.springframework.ai.chat.metadata;",
        "property_declarations": [],
        "functions": [
            {
                "name": "getPromptTokens",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return 0L;",
                "is_abstract": "",
                "class_name": "EmptyUsage",
                "annotations": []
            },
            {
                "name": "getGenerationTokens",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return 0L;",
                "is_abstract": "",
                "class_name": "EmptyUsage",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/chat/metadata/Usage.java",
        "class_names": [],
        "imports": "",
        "package_import_paths": {
            "org.springframework.ai.chat.metadata.getPromptTokens": "org.springframework.ai.chat.metadata.getPromptTokens",
            "org.springframework.ai.chat.metadata.getGenerationTokens": "org.springframework.ai.chat.metadata.getGenerationTokens",
            "org.springframework.ai.chat.metadata.getTotalTokens": "org.springframework.ai.chat.metadata.getTotalTokens"
        },
        "package": "package org.springframework.ai.chat.metadata;",
        "property_declarations": [],
        "functions": [
            {
                "name": "getPromptTokens",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "getGenerationTokens",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "getTotalTokens",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Long promptTokens = getPromptTokens();\n\t\tpromptTokens = promptTokens != null ? promptTokens : 0;\n\t\tLong completionTokens = getGenerationTokens();\n\t\tcompletionTokens = completionTokens != null ? completionTokens : 0;\n\t\treturn promptTokens + completionTokens;",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/chat/metadata/ChatResponseMetadata.java",
        "class_names": [],
        "imports": "import org.springframework.ai.model.ResponseMetadata;",
        "package_import_paths": {
            "org.springframework.ai.chat.metadata.getRateLimit": "org.springframework.ai.chat.metadata.getRateLimit",
            "org.springframework.ai.chat.metadata.getUs": "org.springframework.ai.chat.metadata.getUs",
            "org.springframework.ai.chat.metadata.getPromptMetadat": "org.springframework.ai.chat.metadata.getPromptMetadat"
        },
        "package": "package org.springframework.ai.chat.metadata;",
        "property_declarations": [],
        "functions": [
            {
                "name": "getRateLimit",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new EmptyRateLimit();",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "getUsage",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new EmptyUsage();",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "getPromptMetadata",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return PromptMetadata.empty();",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/chat/metadata/EmptyRateLimit.java",
        "class_names": [
            "EmptyRateLimit"
        ],
        "imports": "import java.time.Duration;",
        "package_import_paths": {
            "org.springframework.ai.chat.metadata.EmptyRateLimit": "org.springframework.ai.chat.metadata.EmptyRateLimit",
            "org.springframework.ai.chat.metadata.getRequestsLimit": "org.springframework.ai.chat.metadata.getRequestsLimit",
            "org.springframework.ai.chat.metadata.getRequestsRemainin": "org.springframework.ai.chat.metadata.getRequestsRemainin",
            "org.springframework.ai.chat.metadata.getRequestsReset": "org.springframework.ai.chat.metadata.getRequestsReset",
            "org.springframework.ai.chat.metadata.getTokensLimit": "org.springframework.ai.chat.metadata.getTokensLimit",
            "org.springframework.ai.chat.metadata.getTokensRemainin": "org.springframework.ai.chat.metadata.getTokensRemainin",
            "org.springframework.ai.chat.metadata.getTokensReset": "org.springframework.ai.chat.metadata.getTokensReset"
        },
        "package": "package org.springframework.ai.chat.metadata;",
        "property_declarations": [],
        "functions": [
            {
                "name": "getRequestsLimit",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return 0L;",
                "is_abstract": "",
                "class_name": "EmptyRateLimit",
                "annotations": []
            },
            {
                "name": "getRequestsRemaining",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return 0L;",
                "is_abstract": "",
                "class_name": "EmptyRateLimit",
                "annotations": []
            },
            {
                "name": "getRequestsReset",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return Duration.ZERO;",
                "is_abstract": "",
                "class_name": "EmptyRateLimit",
                "annotations": []
            },
            {
                "name": "getTokensLimit",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return 0L;",
                "is_abstract": "",
                "class_name": "EmptyRateLimit",
                "annotations": []
            },
            {
                "name": "getTokensRemaining",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return 0L;",
                "is_abstract": "",
                "class_name": "EmptyRateLimit",
                "annotations": []
            },
            {
                "name": "getTokensReset",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return Duration.ZERO;",
                "is_abstract": "",
                "class_name": "EmptyRateLimit",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/transformer/SummaryMetadataEnricher.java",
        "class_names": [
            "SummaryMetadataEnricher"
        ],
        "imports": "import java.util.ArrayList;\nimport org.springframework.ai.chat.prompt.Prompt;\nimport org.springframework.ai.document.MetadataMode;\nimport java.util.List;\nimport org.springframework.util.Assert;\nimport org.springframework.ai.chat.ChatClient;\nimport org.springframework.ai.document.Document;\nimport org.springframework.util.CollectionUtils;\nimport java.util.Map;\nimport java.util.HashMap;\nimport org.springframework.ai.document.DocumentTransformer;\nimport org.springframework.ai.chat.prompt.PromptTemplate;",
        "package_import_paths": {
            "org.springframework.ai.transformer.SummaryMetadataEnricher": "org.springframework.ai.transformer.SummaryMetadataEnricher",
            "org.springframework.ai.transformer.apply": "org.springframework.ai.transformer.apply",
            "org.springframework.ai.transformer.SECTION_SUMMARY_METADATA_KEY": "org.springframework.ai.transformer.SECTION_SUMMARY_METADATA_KEY",
            "org.springframework.ai.transformer.NEXT_SECTION_SUMMARY_METADATA_KEY": "org.springframework.ai.transformer.NEXT_SECTION_SUMMARY_METADATA_KEY",
            "org.springframework.ai.transformer.PREV_SECTION_SUMMARY_METADATA_KEY": "org.springframework.ai.transformer.PREV_SECTION_SUMMARY_METADATA_KEY",
            "org.springframework.ai.transformer.CONTEXT_STR_PLACEHOLDER": "org.springframework.ai.transformer.CONTEXT_STR_PLACEHOLDER",
            "org.springframework.ai.transformer.DEFAULT_SUMMARY_EXTRACT_TEMPLATE": "org.springframework.ai.transformer.DEFAULT_SUMMARY_EXTRACT_TEMPLATE",
            "org.springframework.ai.transformer.chatClient": "org.springframework.ai.transformer.chatClient",
            "org.springframework.ai.transformer.summaryTypes": "org.springframework.ai.transformer.summaryTypes",
            "org.springframework.ai.transformer.metadataMod": "org.springframework.ai.transformer.metadataMod",
            "org.springframework.ai.transformer.summaryTemplat": "org.springframework.ai.transformer.summaryTemplat"
        },
        "package": "package org.springframework.ai.transformer;",
        "property_declarations": [
            "private final ChatClient chatClient;",
            "private final List<SummaryType> summaryTypes;",
            "private static final String NEXT_SECTION_SUMMARY_METADATA_KEY = \"next_section_summary\";",
            "private final String summaryTemplate;",
            "private static final String CONTEXT_STR_PLACEHOLDER = \"context_str\";",
            "public static final String DEFAULT_SUMMARY_EXTRACT_TEMPLATE = \"\"\"\n\t\t\tHere is the content of the section:\n\t\t\t{context_str}\n\n\t\t\tSummarize the key topics and entities of the section.\n\n\t\t\tSummary: \"\"\";",
            "private static final String SECTION_SUMMARY_METADATA_KEY = \"section_summary\";",
            "private static final String PREV_SECTION_SUMMARY_METADATA_KEY = \"prev_section_summary\";",
            "private final MetadataMode metadataMode;"
        ],
        "functions": [
            {
                "name": "apply",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "List<String> documentSummaries = new ArrayList<>();\n\t\tfor (Document document : documents) {\n\n\t\t\tvar documentContext = document.getFormattedContent(this.metadataMode);\n\n\t\t\tPrompt prompt = new PromptTemplate(this.summaryTemplate)\n\t\t\t\t.create(Map.of(CONTEXT_STR_PLACEHOLDER, documentContext));\n\t\t\tdocumentSummaries.add(this.chatClient.call(prompt).getResult().getOutput().getContent());\n\t\t}\n\n\t\tfor (int i = 0; i < documentSummaries.size(); i++) {\n\t\t\tMap<String, Object> summaryMetadata = new HashMap<>();\n\t\t\tif (i > 0 && this.summaryTypes.contains(SummaryType.PREVIOUS)) {\n\t\t\t\tsummaryMetadata.put(PREV_SECTION_SUMMARY_METADATA_KEY, documentSummaries.get(i - 1));\n\t\t\t}\n\t\t\tif (i < (documentSummaries.size() - 1) && this.summaryTypes.contains(SummaryType.NEXT)) {\n\t\t\t\tsummaryMetadata.put(NEXT_SECTION_SUMMARY_METADATA_KEY, documentSummaries.get(i + 1));\n\t\t\t}\n\t\t\tif (this.summaryTypes.contains(SummaryType.CURRENT)) {\n\t\t\t\tsummaryMetadata.put(SECTION_SUMMARY_METADATA_KEY, documentSummaries.get(i));\n\t\t\t}\n\n\t\t\tdocuments.get(i).getMetadata().putAll(summaryMetadata);\n\t\t}\n\n\t\treturn documents;",
                "is_abstract": "",
                "class_name": "SummaryMetadataEnricher",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/transformer/ContentFormatTransformer.java",
        "class_names": [
            "ContentFormatTransformer"
        ],
        "imports": "import java.util.ArrayList;\nimport java.util.List;\nimport org.springframework.ai.document.ContentFormatter;\nimport org.springframework.ai.document.Document;\nimport org.springframework.ai.document.DocumentTransformer;\nimport org.springframework.ai.document.DefaultContentFormatter;",
        "package_import_paths": {
            "org.springframework.ai.transformer.ContentFormatTransformer": "org.springframework.ai.transformer.ContentFormatTransformer",
            "org.springframework.ai.transformer.apply": "org.springframework.ai.transformer.apply",
            "org.springframework.ai.transformer.disableTemplateRewrit": "org.springframework.ai.transformer.disableTemplateRewrit",
            "org.springframework.ai.transformer.contentFormatter": "org.springframework.ai.transformer.contentFormatter"
        },
        "package": "package org.springframework.ai.transformer;",
        "property_declarations": [
            "private boolean disableTemplateRewrite = false;",
            "private ContentFormatter contentFormatter;"
        ],
        "functions": [
            {
                "name": "apply",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (this.contentFormatter != null) {\n\n\t\t\tdocuments.forEach(document -> {\n\t\t\t\t// Update formatter\n\t\t\t\tif (document.getContentFormatter() instanceof DefaultContentFormatter\n\t\t\t\t\t\t&& this.contentFormatter instanceof DefaultContentFormatter) {\n\n\t\t\t\t\tDefaultContentFormatter docFormatter = (DefaultContentFormatter) document.getContentFormatter();\n\t\t\t\t\tDefaultContentFormatter toUpdateFormatter = (DefaultContentFormatter) this.contentFormatter;\n\n\t\t\t\t\tvar updatedEmbedExcludeKeys = new ArrayList<>(docFormatter.getExcludedEmbedMetadataKeys());\n\t\t\t\t\tupdatedEmbedExcludeKeys.addAll(toUpdateFormatter.getExcludedEmbedMetadataKeys());\n\n\t\t\t\t\tvar updatedInterfaceExcludeKeys = new ArrayList<>(docFormatter.getExcludedInferenceMetadataKeys());\n\t\t\t\t\tupdatedInterfaceExcludeKeys.addAll(toUpdateFormatter.getExcludedInferenceMetadataKeys());\n\n\t\t\t\t\tvar builder = DefaultContentFormatter.builder()\n\t\t\t\t\t\t.withExcludedEmbedMetadataKeys(updatedEmbedExcludeKeys)\n\t\t\t\t\t\t.withExcludedInferenceMetadataKeys(updatedInterfaceExcludeKeys)\n\t\t\t\t\t\t.withMetadataTemplate(docFormatter.getMetadataTemplate())\n\t\t\t\t\t\t.withMetadataSeparator(docFormatter.getMetadataSeparator());\n\n\t\t\t\t\tif (!this.disableTemplateRewrite) {\n\t\t\t\t\t\tbuilder.withTextTemplate(docFormatter.getTextTemplate());\n\t\t\t\t\t}\n\t\t\t\t\tdocument.setContentFormatter(builder.build());\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// Override formatter\n\t\t\t\t\tdocument.setContentFormatter(this.contentFormatter);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\treturn documents;",
                "is_abstract": "",
                "class_name": "ContentFormatTransformer",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/transformer/KeywordMetadataEnricher.java",
        "class_names": [
            "KeywordMetadataEnricher"
        ],
        "imports": "import org.springframework.ai.chat.prompt.Prompt;\nimport java.util.List;\nimport org.springframework.util.Assert;\nimport org.springframework.ai.chat.ChatClient;\nimport org.springframework.ai.document.Document;\nimport org.springframework.ai.document.DocumentTransformer;\nimport java.util.Map;\nimport org.springframework.ai.chat.prompt.PromptTemplate;",
        "package_import_paths": {
            "org.springframework.ai.transformer.KeywordMetadataEnricher": "org.springframework.ai.transformer.KeywordMetadataEnricher",
            "org.springframework.ai.transformer.apply": "org.springframework.ai.transformer.apply",
            "org.springframework.ai.transformer.EXCERPT_KEYWORDS_METADATA_KEY": "org.springframework.ai.transformer.EXCERPT_KEYWORDS_METADATA_KEY",
            "org.springframework.ai.transformer.CONTEXT_STR_PLACEHOLDER": "org.springframework.ai.transformer.CONTEXT_STR_PLACEHOLDER",
            "org.springframework.ai.transformer.KEYWORDS_TEMPLATE": "org.springframework.ai.transformer.KEYWORDS_TEMPLATE",
            "org.springframework.ai.transformer.chatClient": "org.springframework.ai.transformer.chatClient",
            "org.springframework.ai.transformer.keywordCount": "org.springframework.ai.transformer.keywordCount"
        },
        "package": "package org.springframework.ai.transformer;",
        "property_declarations": [
            "private final ChatClient chatClient;",
            "public static final String CONTEXT_STR_PLACEHOLDER = \"context_str\";",
            "public static final String KEYWORDS_TEMPLATE = \"\"\"\n\t\t\t{context_str}. Give %s unique keywords for this\n\t\t\tdocument. Format as comma separated. Keywords: \"\"\";",
            "private final int keywordCount;",
            "private static final String EXCERPT_KEYWORDS_METADATA_KEY = \"excerpt_keywords\";"
        ],
        "functions": [
            {
                "name": "apply",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "for (Document document : documents) {\n\n\t\t\tvar template = new PromptTemplate(String.format(KEYWORDS_TEMPLATE, keywordCount));\n\t\t\tPrompt prompt = template.create(Map.of(CONTEXT_STR_PLACEHOLDER, document.getContent()));\n\t\t\tString keywords = this.chatClient.call(prompt).getResult().getOutput().getContent();\n\t\t\tdocument.getMetadata().putAll(Map.of(EXCERPT_KEYWORDS_METADATA_KEY, keywords));\n\t\t}\n\t\treturn documents;",
                "is_abstract": "",
                "class_name": "KeywordMetadataEnricher",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/transformer/splitter/TokenTextSplitter.java",
        "class_names": [
            "TokenTextSplitter"
        ],
        "imports": "import java.util.ArrayList;\nimport com.knuddels.jtokkit.api.Encoding;\nimport com.knuddels.jtokkit.api.EncodingType;\nimport java.util.List;\nimport org.springframework.util.Assert;\nimport com.knuddels.jtokkit.Encodings;\nimport com.knuddels.jtokkit.api.EncodingRegistry;\nimport com.knuddels.jtokkit.api.IntArrayList;",
        "package_import_paths": {
            "org.springframework.ai.transformer.splitter.TokenTextSplitter": "org.springframework.ai.transformer.splitter.TokenTextSplitter",
            "org.springframework.ai.transformer.splitter.splitText": "org.springframework.ai.transformer.splitter.splitText",
            "org.springframework.ai.transformer.splitter.split": "org.springframework.ai.transformer.splitter.split",
            "org.springframework.ai.transformer.splitter.getEncodedTokens": "org.springframework.ai.transformer.splitter.getEncodedTokens",
            "org.springframework.ai.transformer.splitter.decodeTokens": "org.springframework.ai.transformer.splitter.decodeTokens",
            "org.springframework.ai.transformer.splitter.registry": "org.springframework.ai.transformer.splitter.registry",
            "org.springframework.ai.transformer.splitter.encodin": "org.springframework.ai.transformer.splitter.encodin",
            "org.springframework.ai.transformer.splitter.defaultChunkSiz": "org.springframework.ai.transformer.splitter.defaultChunkSiz",
            "org.springframework.ai.transformer.splitter.minChunkSizeChars": "org.springframework.ai.transformer.splitter.minChunkSizeChars",
            "org.springframework.ai.transformer.splitter.minChunkLengthToEmbed": "org.springframework.ai.transformer.splitter.minChunkLengthToEmbed",
            "org.springframework.ai.transformer.splitter.maxNumChunks": "org.springframework.ai.transformer.splitter.maxNumChunks",
            "org.springframework.ai.transformer.splitter.keepSeparator": "org.springframework.ai.transformer.splitter.keepSeparator"
        },
        "package": "package org.springframework.ai.transformer.splitter;",
        "property_declarations": [
            "private int minChunkLengthToEmbed = 5;",
            "private int minChunkSizeChars = 350;",
            "private int maxNumChunks = 10000;",
            "private final Encoding encoding = registry.getEncoding(EncodingType.CL100K_BASE);",
            "private int defaultChunkSize = 800;",
            "private boolean keepSeparator = true;",
            "private final EncodingRegistry registry = Encodings.newLazyEncodingRegistry();"
        ],
        "functions": [
            {
                "name": "splitText",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return split(text, this.defaultChunkSize);",
                "is_abstract": "",
                "class_name": "TokenTextSplitter",
                "annotations": []
            },
            {
                "name": "split",
                "parameters": [
                    ""
                ],
                "return_type": "chunkText",
                "body": "if (text == null || text.trim().isEmpty()) {\n\t\t\treturn new ArrayList<>();\n\t\t}\n\n\t\tList<Integer> tokens = getEncodedTokens(text);\n\t\tList<String> chunks = new ArrayList<>();\n\t\tint num_chunks = 0;\n\t\twhile (!tokens.isEmpty() && num_chunks < this.maxNumChunks) {\n\t\t\tList<Integer> chunk = tokens.subList(0, Math.min(chunkSize, tokens.size()));\n\t\t\tString chunkText = decodeTokens(chunk);\n\n\t\t\t// Skip the chunk if it is empty or whitespace\n\t\t\tif (chunkText.trim().isEmpty()) {\n\t\t\t\ttokens = tokens.subList(chunk.size(), tokens.size());\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Find the last period or punctuation mark in the chunk\n\t\t\tint lastPunctuation = Math.max(chunkText.lastIndexOf('.'), Math.max(chunkText.lastIndexOf('?'),\n\t\t\t\t\tMath.max(chunkText.lastIndexOf('!'), chunkText.lastIndexOf('\\n'))));\n\n\t\t\tif (lastPunctuation != -1 && lastPunctuation > this.minChunkSizeChars) {\n\t\t\t\t// Truncate the chunk text at the punctuation mark\n\t\t\t\tchunkText = chunkText.substring(0, lastPunctuation + 1);\n\t\t\t}\n\n\t\t\tString chunkTextToAppend = (this.keepSeparator) ? chunkText.trim()\n\t\t\t\t\t: chunkText.replace(System.lineSeparator(), \" \").trim();\n\t\t\tif (chunkTextToAppend.length() > this.minChunkLengthToEmbed) {\n\t\t\t\tchunks.add(chunkTextToAppend);\n\t\t\t}\n\n\t\t\t// Remove the tokens corresponding to the chunk text from the remaining tokens\n\t\t\ttokens = tokens.subList(getEncodedTokens(chunkText).size(), tokens.size());\n\n\t\t\tnum_chunks++;\n\t\t}\n\n\t\t// Handle the remaining tokens\n\t\tif (!tokens.isEmpty()) {\n\t\t\tString remaining_text = decodeTokens(tokens).replace(System.lineSeparator(), \" \").trim();\n\t\t\tif (remaining_text.length() > this.minChunkLengthToEmbed) {\n\t\t\t\tchunks.add(remaining_text);\n\t\t\t}\n\t\t}\n\n\t\treturn chunks;",
                "is_abstract": "",
                "class_name": "TokenTextSplitter",
                "annotations": []
            },
            {
                "name": "getEncodedTokens",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(text, \"Text must not be null\");\n\t\treturn this.encoding.encode(text).boxed();",
                "is_abstract": "",
                "class_name": "TokenTextSplitter",
                "annotations": []
            },
            {
                "name": "decodeTokens",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(tokens, \"Tokens must not be null\");\n\t\tvar tokensIntArray = new IntArrayList(tokens.size());\n\t\ttokens.forEach(tokensIntArray::add);\n\t\treturn this.encoding.decode(tokensIntArray);",
                "is_abstract": "",
                "class_name": "TokenTextSplitter",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/transformer/splitter/TextSplitter.java",
        "class_names": [
            "TextSplitter"
        ],
        "imports": "import java.util.ArrayList;\nimport java.util.stream.Collectors;\nimport java.util.List;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.ai.document.ContentFormatter;\nimport org.springframework.ai.document.Document;\nimport org.slf4j.Logger;\nimport org.springframework.ai.document.DocumentTransformer;\nimport java.util.HashMap;\nimport java.util.Map;",
        "package_import_paths": {
            "org.springframework.ai.transformer.splitter.TextSplitter": "org.springframework.ai.transformer.splitter.TextSplitter",
            "org.springframework.ai.transformer.splitter.apply": "org.springframework.ai.transformer.splitter.apply",
            "org.springframework.ai.transformer.splitter.setCopyContentFormatter": "org.springframework.ai.transformer.splitter.setCopyContentFormatter",
            "org.springframework.ai.transformer.splitter.isCopyContentFormatter": "org.springframework.ai.transformer.splitter.isCopyContentFormatter",
            "org.springframework.ai.transformer.splitter.doSplitDocuments": "org.springframework.ai.transformer.splitter.doSplitDocuments",
            "org.springframework.ai.transformer.splitter.createDocuments": "org.springframework.ai.transformer.splitter.createDocuments",
            "org.springframework.ai.transformer.splitter.splitText": "org.springframework.ai.transformer.splitter.splitText",
            "org.springframework.ai.transformer.splitter.logger": "org.springframework.ai.transformer.splitter.logger",
            "org.springframework.ai.transformer.splitter.copyContentFormatter": "org.springframework.ai.transformer.splitter.copyContentFormatter"
        },
        "package": "package org.springframework.ai.transformer.splitter;",
        "property_declarations": [
            "private static final Logger logger = LoggerFactory.getLogger(TextSplitter.class);",
            "private boolean copyContentFormatter = true;"
        ],
        "functions": [
            {
                "name": "apply",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return doSplitDocuments(documents);",
                "is_abstract": "",
                "class_name": "TextSplitter",
                "annotations": []
            },
            {
                "name": "setCopyContentFormatter",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.copyContentFormatter = copyContentFormatter;",
                "is_abstract": "",
                "class_name": "TextSplitter",
                "annotations": []
            },
            {
                "name": "isCopyContentFormatter",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.copyContentFormatter;",
                "is_abstract": "",
                "class_name": "TextSplitter",
                "annotations": []
            },
            {
                "name": "doSplitDocuments",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "List<String> texts = new ArrayList<>();\n\t\tList<Map<String, Object>> metadataList = new ArrayList<>();\n\t\tList<ContentFormatter> formatters = new ArrayList<>();\n\n\t\tfor (Document doc : documents) {\n\t\t\ttexts.add(doc.getContent());\n\t\t\tmetadataList.add(doc.getMetadata());\n\t\t\tformatters.add(doc.getContentFormatter());\n\t\t}\n\n\t\treturn createDocuments(texts, formatters, metadataList);",
                "is_abstract": "",
                "class_name": "TextSplitter",
                "annotations": []
            },
            {
                "name": "createDocuments",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// Process the data in a column oriented way and recreate the Document\n\t\tList<Document> documents = new ArrayList<>();\n\n\t\tfor (int i = 0; i < texts.size(); i++) {\n\t\t\tString text = texts.get(i);\n\t\t\tMap<String, Object> metadata = metadataList.get(i);\n\t\t\tList<String> chunks = splitText(text);\n\t\t\tif (chunks.size() > 1) {\n\t\t\t\tlogger.info(\"Splitting up document into \" + chunks.size() + \" chunks.\");\n\t\t\t}\n\t\t\tfor (String chunk : chunks) {\n\t\t\t\t// only primitive values are in here -\n\t\t\t\tMap<String, Object> metadataCopy = metadata.entrySet()\n\t\t\t\t\t.stream()\n\t\t\t\t\t.collect(Collectors.toMap(e -> e.getKey(), e -> e.getValue()));\n\t\t\t\tDocument newDoc = new Document(chunk, metadataCopy);\n\n\t\t\t\tif (this.copyContentFormatter) {\n\t\t\t\t\t// Transfer the content-formatter of the parent to the chunked\n\t\t\t\t\t// documents it was slit into.\n\t\t\t\t\tnewDoc.setContentFormatter(formatters.get(i));\n\t\t\t\t}\n\n\t\t\t\t// TODO copy over other properties.\n\t\t\t\tdocuments.add(newDoc);\n\t\t\t}\n\t\t}\n\t\treturn documents;",
                "is_abstract": "",
                "class_name": "TextSplitter",
                "annotations": []
            },
            {
                "name": "splitText",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "TextSplitter",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/embedding/EmbeddingResponse.java",
        "class_names": [
            "EmbeddingResponse"
        ],
        "imports": "import org.springframework.ai.model.ModelResponse;\nimport java.util.Objects;\nimport java.util.List;\nimport org.springframework.util.Assert;",
        "package_import_paths": {
            "org.springframework.ai.embedding.EmbeddingRespons": "org.springframework.ai.embedding.EmbeddingRespons",
            "org.springframework.ai.embedding.getMetadat": "org.springframework.ai.embedding.getMetadat",
            "org.springframework.ai.embedding.getResult": "org.springframework.ai.embedding.getResult",
            "org.springframework.ai.embedding.getResults": "org.springframework.ai.embedding.getResults",
            "org.springframework.ai.embedding.equals": "org.springframework.ai.embedding.equals",
            "org.springframework.ai.embedding.hashCod": "org.springframework.ai.embedding.hashCod",
            "org.springframework.ai.embedding.toStrin": "org.springframework.ai.embedding.toStrin",
            "org.springframework.ai.embedding.embeddings": "org.springframework.ai.embedding.embeddings",
            "org.springframework.ai.embedding.metadat": "org.springframework.ai.embedding.metadat"
        },
        "package": "package org.springframework.ai.embedding;",
        "property_declarations": [
            "private EmbeddingResponseMetadata metadata = new EmbeddingResponseMetadata();",
            "private List<Embedding> embeddings;"
        ],
        "functions": [
            {
                "name": "getMetadata",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return metadata;",
                "is_abstract": "",
                "class_name": "EmbeddingResponse",
                "annotations": []
            },
            {
                "name": "getResult",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notEmpty(embeddings, \"No embedding data available.\");\n\t\treturn embeddings.get(0);",
                "is_abstract": "",
                "class_name": "EmbeddingResponse",
                "annotations": []
            },
            {
                "name": "getResults",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return embeddings;",
                "is_abstract": "",
                "class_name": "EmbeddingResponse",
                "annotations": []
            },
            {
                "name": "equals",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (this == o)\n\t\t\treturn true;\n\t\tif (o == null || getClass() != o.getClass())\n\t\t\treturn false;\n\t\tEmbeddingResponse that = (EmbeddingResponse) o;\n\t\treturn Objects.equals(embeddings, that.embeddings) && Objects.equals(metadata, that.metadata);",
                "is_abstract": "",
                "class_name": "EmbeddingResponse",
                "annotations": []
            },
            {
                "name": "hashCode",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return Objects.hash(embeddings, metadata);",
                "is_abstract": "",
                "class_name": "EmbeddingResponse",
                "annotations": []
            },
            {
                "name": "toString",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return \"EmbeddingResult{\" + \"data=\" + embeddings + \", metadata=\" + metadata + '}';",
                "is_abstract": "",
                "class_name": "EmbeddingResponse",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/embedding/EmbeddingResultMetadata.java",
        "class_names": [
            "EmbeddingResultMetadata"
        ],
        "imports": "import org.springframework.ai.model.ResultMetadata;",
        "package_import_paths": {
            "org.springframework.ai.embedding.EmbeddingResultMetadat": "org.springframework.ai.embedding.EmbeddingResultMetadat"
        },
        "package": "package org.springframework.ai.embedding;",
        "property_declarations": [],
        "functions": []
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/embedding/EmbeddingResponseMetadata.java",
        "class_names": [
            "EmbeddingResponseMetadata"
        ],
        "imports": "import org.springframework.ai.model.ResponseMetadata;\nimport java.util.Map;\nimport java.util.HashMap;",
        "package_import_paths": {
            "org.springframework.ai.embedding.EmbeddingResponseMetadat": "org.springframework.ai.embedding.EmbeddingResponseMetadat",
            "org.springframework.ai.embedding.serialVersionUID": "org.springframework.ai.embedding.serialVersionUID"
        },
        "package": "package org.springframework.ai.embedding;",
        "property_declarations": [
            "private static final long serialVersionUID = 1L;"
        ],
        "functions": []
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/embedding/EmbeddingClient.java",
        "class_names": [],
        "imports": "import org.springframework.ai.model.ModelClient;\nimport org.springframework.ai.document.Document;\nimport java.util.List;\nimport org.springframework.util.Assert;",
        "package_import_paths": {
            "org.springframework.ai.embedding.call": "org.springframework.ai.embedding.call",
            "org.springframework.ai.embedding.embed": "org.springframework.ai.embedding.embed",
            "org.springframework.ai.embedding.embedForRespons": "org.springframework.ai.embedding.embedForRespons",
            "org.springframework.ai.embedding.dimensions": "org.springframework.ai.embedding.dimensions"
        },
        "package": "package org.springframework.ai.embedding;",
        "property_declarations": [],
        "functions": [
            {
                "name": "call",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "embed",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(text, \"Text must not be null\");\n\t\treturn this.embed(List.of(text)).iterator().next();",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "embedForResponse",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(texts, \"Texts must not be null\");\n\t\treturn this.call(new EmbeddingRequest(texts, EmbeddingOptions.EMPTY));",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "dimensions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return embed(\"Test String\").size();",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/embedding/AbstractEmbeddingClient.java",
        "class_names": [
            "AbstractEmbeddingClient"
        ],
        "imports": "import java.util.stream.Collectors;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport java.util.Map;\nimport org.springframework.core.io.DefaultResourceLoader;\nimport java.util.Properties;\nimport java.io.IOException;",
        "package_import_paths": {
            "org.springframework.ai.embedding.AbstractEmbeddingClient": "org.springframework.ai.embedding.AbstractEmbeddingClient",
            "org.springframework.ai.embedding.dimensions": "org.springframework.ai.embedding.dimensions",
            "org.springframework.ai.embedding.loadKnownModelDimensions": "org.springframework.ai.embedding.loadKnownModelDimensions",
            "org.springframework.ai.embedding.embeddingDimensions": "org.springframework.ai.embedding.embeddingDimensions",
            "org.springframework.ai.embedding.KNOWN_EMBEDDING_DIMENSIONS": "org.springframework.ai.embedding.KNOWN_EMBEDDING_DIMENSIONS"
        },
        "package": "package org.springframework.ai.embedding;",
        "property_declarations": [
            "protected final AtomicInteger embeddingDimensions = new AtomicInteger(-1);",
            "private static Map<String, Integer> KNOWN_EMBEDDING_DIMENSIONS = loadKnownModelDimensions();"
        ],
        "functions": [
            {
                "name": "dimensions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (KNOWN_EMBEDDING_DIMENSIONS.containsKey(modelName)) {\n\t\t\t// Retrieve the dimension from a pre-configured file.\n\t\t\treturn KNOWN_EMBEDDING_DIMENSIONS.get(modelName);\n\t\t}\n\t\telse {\n\t\t\t// Determine the dimensions empirically.\n\t\t\t// Generate an embedding and count the dimension size;\n\t\t\treturn embeddingClient.embed(dummyContent).size();\n\t\t}",
                "is_abstract": "",
                "class_name": "AbstractEmbeddingClient",
                "annotations": []
            },
            {
                "name": "loadKnownModelDimensions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "try {\n\t\t\tProperties properties = new Properties();\n\t\t\tproperties.load(new DefaultResourceLoader()\n\t\t\t\t.getResource(\"classpath:/embedding/embedding-model-dimensions.properties\")\n\t\t\t\t.getInputStream());\n\t\t\treturn properties.entrySet()\n\t\t\t\t.stream()\n\t\t\t\t.collect(Collectors.toMap(e -> e.getKey().toString(), e -> Integer.parseInt(e.getValue().toString())));\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}",
                "is_abstract": "",
                "class_name": "AbstractEmbeddingClient",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/embedding/Embedding.java",
        "class_names": [
            "Embedding"
        ],
        "imports": "import org.springframework.ai.model.ModelResult;\nimport java.util.Objects;\nimport java.util.List;",
        "package_import_paths": {
            "org.springframework.ai.embedding.Embeddin": "org.springframework.ai.embedding.Embeddin",
            "org.springframework.ai.embedding.getOutput": "org.springframework.ai.embedding.getOutput",
            "org.springframework.ai.embedding.getIndex": "org.springframework.ai.embedding.getIndex",
            "org.springframework.ai.embedding.getMetadat": "org.springframework.ai.embedding.getMetadat",
            "org.springframework.ai.embedding.equals": "org.springframework.ai.embedding.equals",
            "org.springframework.ai.embedding.hashCod": "org.springframework.ai.embedding.hashCod",
            "org.springframework.ai.embedding.toStrin": "org.springframework.ai.embedding.toStrin",
            "org.springframework.ai.embedding.embeddin": "org.springframework.ai.embedding.embeddin",
            "org.springframework.ai.embedding.index": "org.springframework.ai.embedding.index",
            "org.springframework.ai.embedding.metadat": "org.springframework.ai.embedding.metadat"
        },
        "package": "package org.springframework.ai.embedding;",
        "property_declarations": [
            "private EmbeddingResultMetadata metadata;",
            "private Integer index;",
            "private List<Double> embedding;"
        ],
        "functions": [
            {
                "name": "getOutput",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return embedding;",
                "is_abstract": "",
                "class_name": "Embedding",
                "annotations": []
            },
            {
                "name": "getIndex",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return index;",
                "is_abstract": "",
                "class_name": "Embedding",
                "annotations": []
            },
            {
                "name": "getMetadata",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return metadata;",
                "is_abstract": "",
                "class_name": "Embedding",
                "annotations": []
            },
            {
                "name": "equals",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (this == o)\n\t\t\treturn true;\n\t\tif (o == null || getClass() != o.getClass())\n\t\t\treturn false;\n\t\tEmbedding embedding1 = (Embedding) o;\n\t\treturn Objects.equals(embedding, embedding1.embedding) && Objects.equals(index, embedding1.index);",
                "is_abstract": "",
                "class_name": "Embedding",
                "annotations": []
            },
            {
                "name": "hashCode",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return Objects.hash(embedding, index);",
                "is_abstract": "",
                "class_name": "Embedding",
                "annotations": []
            },
            {
                "name": "toString",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String message = this.embedding.isEmpty() ? \"<empty>\" : \"<has data>\";\n\t\treturn \"Embedding{\" + \"embedding=\" + message + \", index=\" + index + '}';",
                "is_abstract": "",
                "class_name": "Embedding",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/embedding/EmbeddingOptions.java",
        "class_names": [
            "EmptyEmbeddingOptions"
        ],
        "imports": "import org.springframework.ai.model.ModelOptions;",
        "package_import_paths": {
            "org.springframework.ai.embedding.EmptyEmbeddingOptions": "org.springframework.ai.embedding.EmptyEmbeddingOptions"
        },
        "package": "package org.springframework.ai.embedding;",
        "property_declarations": [],
        "functions": []
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/embedding/EmbeddingRequest.java",
        "class_names": [
            "EmbeddingRequest"
        ],
        "imports": "import org.springframework.ai.model.ModelRequest;\nimport java.util.List;",
        "package_import_paths": {
            "org.springframework.ai.embedding.EmbeddingRequest": "org.springframework.ai.embedding.EmbeddingRequest",
            "org.springframework.ai.embedding.getInstructions": "org.springframework.ai.embedding.getInstructions",
            "org.springframework.ai.embedding.getOptions": "org.springframework.ai.embedding.getOptions",
            "org.springframework.ai.embedding.inputs": "org.springframework.ai.embedding.inputs",
            "org.springframework.ai.embedding.options": "org.springframework.ai.embedding.options"
        },
        "package": "package org.springframework.ai.embedding;",
        "property_declarations": [
            "private final EmbeddingOptions options;",
            "private final List<String> inputs;"
        ],
        "functions": [
            {
                "name": "getInstructions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.inputs;",
                "is_abstract": "",
                "class_name": "EmbeddingRequest",
                "annotations": []
            },
            {
                "name": "getOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.options;",
                "is_abstract": "",
                "class_name": "EmbeddingRequest",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/document/MetadataMode.java",
        "class_names": [],
        "imports": "",
        "package_import_paths": {},
        "package": "package org.springframework.ai.document;",
        "property_declarations": [],
        "functions": []
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/document/ContentFormatter.java",
        "class_names": [],
        "imports": "",
        "package_import_paths": {
            "org.springframework.ai.document.format": "org.springframework.ai.document.format"
        },
        "package": "package org.springframework.ai.document;",
        "property_declarations": [],
        "functions": [
            {
                "name": "format",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/document/DocumentReader.java",
        "class_names": [],
        "imports": "import java.util.function.Supplier;\nimport java.util.List;",
        "package_import_paths": {},
        "package": "package org.springframework.ai.document;",
        "property_declarations": [],
        "functions": []
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/document/DocumentWriter.java",
        "class_names": [],
        "imports": "import java.util.List;\nimport java.util.function.Consumer;",
        "package_import_paths": {},
        "package": "package org.springframework.ai.document;",
        "property_declarations": [],
        "functions": []
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/document/Document.java",
        "class_names": [
            "Document"
        ],
        "imports": "import java.util.ArrayList;\nimport java.util.List;\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport org.springframework.util.Assert;\nimport com.fasterxml.jackson.annotation.JsonCreator;\nimport java.util.Map;\nimport java.util.HashMap;\nimport com.fasterxml.jackson.annotation.JsonIgnore;\nimport org.springframework.ai.document.id.RandomIdGenerator;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport org.springframework.ai.document.id.IdGenerator;",
        "package_import_paths": {
            "org.springframework.ai.document.Document": "org.springframework.ai.document.Document",
            "org.springframework.ai.document.getId": "org.springframework.ai.document.getId",
            "org.springframework.ai.document.getContent": "org.springframework.ai.document.getContent",
            "org.springframework.ai.document.getFormattedContent": "org.springframework.ai.document.getFormattedContent",
            "org.springframework.ai.document.setEmbeddin": "org.springframework.ai.document.setEmbeddin",
            "org.springframework.ai.document.setContentFormatter": "org.springframework.ai.document.setContentFormatter",
            "org.springframework.ai.document.getMetadat": "org.springframework.ai.document.getMetadat",
            "org.springframework.ai.document.getEmbeddin": "org.springframework.ai.document.getEmbeddin",
            "org.springframework.ai.document.getContentFormatter": "org.springframework.ai.document.getContentFormatter",
            "org.springframework.ai.document.hashCod": "org.springframework.ai.document.hashCod",
            "org.springframework.ai.document.equals": "org.springframework.ai.document.equals",
            "org.springframework.ai.document.toStrin": "org.springframework.ai.document.toStrin",
            "org.springframework.ai.document.DEFAULT_CONTENT_FORMATTER": "org.springframework.ai.document.DEFAULT_CONTENT_FORMATTER",
            "org.springframework.ai.document.id": "org.springframework.ai.document.id",
            "org.springframework.ai.document.metadat": "org.springframework.ai.document.metadat",
            "org.springframework.ai.document.content": "org.springframework.ai.document.content",
            "org.springframework.ai.document.embeddin": "org.springframework.ai.document.embeddin",
            "org.springframework.ai.document.privat": "org.springframework.ai.document.privat"
        },
        "package": "package org.springframework.ai.document;",
        "property_declarations": [
            "@JsonIgnore\n\tprivate ContentFormatter contentFormatter = DEFAULT_CONTENT_FORMATTER;",
            "private Map<String, Object> metadata;",
            "private final String id;",
            "private String content;",
            "@JsonProperty(index = 100)\n\tprivate List<Double> embedding = new ArrayList<>();",
            "public final static ContentFormatter DEFAULT_CONTENT_FORMATTER = DefaultContentFormatter.defaultConfig();"
        ],
        "functions": [
            {
                "name": "getId",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return id;",
                "is_abstract": "",
                "class_name": "Document",
                "annotations": []
            },
            {
                "name": "getContent",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.content;",
                "is_abstract": "",
                "class_name": "Document",
                "annotations": []
            },
            {
                "name": "getFormattedContent",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.getFormattedContent(MetadataMode.ALL);",
                "is_abstract": "",
                "class_name": "Document",
                "annotations": []
            },
            {
                "name": "setEmbedding",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(embedding, \"embedding must not be null\");\n\t\tthis.embedding = embedding;",
                "is_abstract": "",
                "class_name": "Document",
                "annotations": []
            },
            {
                "name": "setContentFormatter",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.contentFormatter = contentFormatter;",
                "is_abstract": "",
                "class_name": "Document",
                "annotations": []
            },
            {
                "name": "getMetadata",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.metadata;",
                "is_abstract": "",
                "class_name": "Document",
                "annotations": []
            },
            {
                "name": "getEmbedding",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.embedding;",
                "is_abstract": "",
                "class_name": "Document",
                "annotations": []
            },
            {
                "name": "getContentFormatter",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return contentFormatter;",
                "is_abstract": "",
                "class_name": "Document",
                "annotations": []
            },
            {
                "name": "hashCode",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "final int prime = 31;\n\t\tint result = 1;\n\t\tresult = prime * result + ((id == null) ? 0 : id.hashCode());\n\t\tresult = prime * result + ((metadata == null) ? 0 : metadata.hashCode());\n\t\tresult = prime * result + ((content == null) ? 0 : content.hashCode());\n\t\treturn result;",
                "is_abstract": "",
                "class_name": "Document",
                "annotations": []
            },
            {
                "name": "equals",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (this == obj)\n\t\t\treturn true;\n\t\tif (obj == null)\n\t\t\treturn false;\n\t\tif (getClass() != obj.getClass())\n\t\t\treturn false;\n\t\tDocument other = (Document) obj;\n\t\tif (id == null) {\n\t\t\tif (other.id != null)\n\t\t\t\treturn false;\n\t\t}\n\t\telse if (!id.equals(other.id))\n\t\t\treturn false;\n\t\tif (metadata == null) {\n\t\t\tif (other.metadata != null)\n\t\t\t\treturn false;\n\t\t}\n\t\telse if (!metadata.equals(other.metadata))\n\t\t\treturn false;\n\t\tif (content == null) {\n\t\t\tif (other.content != null)\n\t\t\t\treturn false;\n\t\t}\n\t\telse if (!content.equals(other.content))\n\t\t\treturn false;\n\t\treturn true;",
                "is_abstract": "",
                "class_name": "Document",
                "annotations": []
            },
            {
                "name": "toString",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return \"Document{\" + \"id='\" + id + '\\'' + \", metadata=\" + metadata + \", content='\" + new String(content) + '\\''\n\t\t\t\t+ '}';",
                "is_abstract": "",
                "class_name": "Document",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/document/DefaultContentFormatter.java",
        "class_names": [
            "Builder",
            "DefaultContentFormatter"
        ],
        "imports": "import java.util.ArrayList;\nimport java.util.stream.Collectors;\nimport java.util.List;\nimport org.springframework.util.Assert;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Set;\nimport java.util.HashSet;",
        "package_import_paths": {
            "org.springframework.ai.document.DefaultContentFormatter": "org.springframework.ai.document.DefaultContentFormatter",
            "org.springframework.ai.document.Builder": "org.springframework.ai.document.Builder",
            "org.springframework.ai.document.builder": "org.springframework.ai.document.builder",
            "org.springframework.ai.document.defaultConfi": "org.springframework.ai.document.defaultConfi",
            "org.springframework.ai.document.from": "org.springframework.ai.document.from",
            "org.springframework.ai.document.withMetadataTemplat": "org.springframework.ai.document.withMetadataTemplat",
            "org.springframework.ai.document.withMetadataSeparator": "org.springframework.ai.document.withMetadataSeparator",
            "org.springframework.ai.document.withTextTemplat": "org.springframework.ai.document.withTextTemplat",
            "org.springframework.ai.document.withExcludedInferenceMetadataKeys": "org.springframework.ai.document.withExcludedInferenceMetadataKeys",
            "org.springframework.ai.document.withExcludedEmbedMetadataKeys": "org.springframework.ai.document.withExcludedEmbedMetadataKeys",
            "org.springframework.ai.document.build": "org.springframework.ai.document.build",
            "org.springframework.ai.document.format": "org.springframework.ai.document.format",
            "org.springframework.ai.document.metadataFilter": "org.springframework.ai.document.metadataFilter",
            "org.springframework.ai.document.getMetadataTemplat": "org.springframework.ai.document.getMetadataTemplat",
            "org.springframework.ai.document.getMetadataSeparator": "org.springframework.ai.document.getMetadataSeparator",
            "org.springframework.ai.document.getTextTemplat": "org.springframework.ai.document.getTextTemplat",
            "org.springframework.ai.document.getExcludedInferenceMetadataKeys": "org.springframework.ai.document.getExcludedInferenceMetadataKeys",
            "org.springframework.ai.document.getExcludedEmbedMetadataKeys": "org.springframework.ai.document.getExcludedEmbedMetadataKeys",
            "org.springframework.ai.document.TEMPLATE_CONTENT_PLACEHOLDER": "org.springframework.ai.document.TEMPLATE_CONTENT_PLACEHOLDER",
            "org.springframework.ai.document.TEMPLATE_METADATA_STRING_PLACEHOLDER": "org.springframework.ai.document.TEMPLATE_METADATA_STRING_PLACEHOLDER",
            "org.springframework.ai.document.TEMPLATE_VALUE_PLACEHOLDER": "org.springframework.ai.document.TEMPLATE_VALUE_PLACEHOLDER",
            "org.springframework.ai.document.TEMPLATE_KEY_PLACEHOLDER": "org.springframework.ai.document.TEMPLATE_KEY_PLACEHOLDER",
            "org.springframework.ai.document.DEFAULT_METADATA_TEMPLATE": "org.springframework.ai.document.DEFAULT_METADATA_TEMPLATE",
            "org.springframework.ai.document.DEFAULT_METADATA_SEPARATOR": "org.springframework.ai.document.DEFAULT_METADATA_SEPARATOR",
            "org.springframework.ai.document.DEFAULT_TEXT_TEMPLATE": "org.springframework.ai.document.DEFAULT_TEXT_TEMPLATE",
            "org.springframework.ai.document.metadataTemplat": "org.springframework.ai.document.metadataTemplat",
            "org.springframework.ai.document.metadataSeparator": "org.springframework.ai.document.metadataSeparator",
            "org.springframework.ai.document.textTemplat": "org.springframework.ai.document.textTemplat",
            "org.springframework.ai.document.excludedInferenceMetadataKeys": "org.springframework.ai.document.excludedInferenceMetadataKeys",
            "org.springframework.ai.document.excludedEmbedMetadataKeys": "org.springframework.ai.document.excludedEmbedMetadataKeys"
        },
        "package": "package org.springframework.ai.document;",
        "property_declarations": [
            "private final List<String> excludedInferenceMetadataKeys;",
            "private String metadataSeparator = DEFAULT_METADATA_SEPARATOR;",
            "private String textTemplate = DEFAULT_TEXT_TEMPLATE;",
            "private static final String DEFAULT_METADATA_TEMPLATE = String.format(\"%s: %s\", TEMPLATE_KEY_PLACEHOLDER,\n\t\t\tTEMPLATE_VALUE_PLACEHOLDER);",
            "private final String metadataSeparator;",
            "private final String metadataTemplate;",
            "private static final String DEFAULT_TEXT_TEMPLATE = String.format(\"%s\\n\\n%s\", TEMPLATE_METADATA_STRING_PLACEHOLDER,\n\t\t\tTEMPLATE_CONTENT_PLACEHOLDER);",
            "private String metadataTemplate = DEFAULT_METADATA_TEMPLATE;",
            "private List<String> excludedEmbedMetadataKeys = new ArrayList<>();",
            "private static final String TEMPLATE_CONTENT_PLACEHOLDER = \"{content}\";",
            "private static final String TEMPLATE_METADATA_STRING_PLACEHOLDER = \"{metadata_string}\";",
            "private final String textTemplate;",
            "private static final String DEFAULT_METADATA_SEPARATOR = System.lineSeparator();",
            "private static final String TEMPLATE_VALUE_PLACEHOLDER = \"{value}\";",
            "private List<String> excludedInferenceMetadataKeys = new ArrayList<>();",
            "private static final String TEMPLATE_KEY_PLACEHOLDER = \"{key}\";",
            "private final List<String> excludedEmbedMetadataKeys;"
        ],
        "functions": [
            {
                "name": "builder",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Builder();",
                "is_abstract": "",
                "class_name": "DefaultContentFormatter",
                "annotations": []
            },
            {
                "name": "defaultConfig",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return builder().build();",
                "is_abstract": "",
                "class_name": "DefaultContentFormatter",
                "annotations": []
            },
            {
                "name": "from",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.withExcludedEmbedMetadataKeys(fromFormatter.getExcludedEmbedMetadataKeys())\n\t\t\t\t.withExcludedInferenceMetadataKeys(fromFormatter.getExcludedInferenceMetadataKeys())\n\t\t\t\t.withMetadataSeparator(fromFormatter.getMetadataSeparator())\n\t\t\t\t.withMetadataTemplate(fromFormatter.getMetadataTemplate())\n\t\t\t\t.withTextTemplate(fromFormatter.getTextTemplate());\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "DefaultContentFormatter Builder",
                "annotations": []
            },
            {
                "name": "withMetadataTemplate",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.hasText(metadataTemplate, \"Metadata Template must not be empty\");\n\t\t\tthis.metadataTemplate = metadataTemplate;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "DefaultContentFormatter Builder",
                "annotations": []
            },
            {
                "name": "withMetadataSeparator",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(metadataSeparator, \"Metadata separator must not be empty\");\n\t\t\tthis.metadataSeparator = metadataSeparator;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "DefaultContentFormatter Builder",
                "annotations": []
            },
            {
                "name": "withTextTemplate",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.hasText(textTemplate, \"Document's text template must not be empty\");\n\t\t\tthis.textTemplate = textTemplate;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "DefaultContentFormatter Builder",
                "annotations": []
            },
            {
                "name": "withExcludedInferenceMetadataKeys",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(excludedInferenceMetadataKeys, \"Excluded inference metadata keys must not be null\");\n\t\t\tthis.excludedInferenceMetadataKeys = excludedInferenceMetadataKeys;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "DefaultContentFormatter Builder",
                "annotations": []
            },
            {
                "name": "withExcludedEmbedMetadataKeys",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(excludedEmbedMetadataKeys, \"Excluded Embed metadata keys must not be null\");\n\t\t\tthis.excludedEmbedMetadataKeys = excludedEmbedMetadataKeys;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "DefaultContentFormatter Builder",
                "annotations": []
            },
            {
                "name": "build",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new DefaultContentFormatter(this);",
                "is_abstract": "",
                "class_name": "DefaultContentFormatter Builder",
                "annotations": []
            },
            {
                "name": "format",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var metadata = metadataFilter(document.getMetadata(), metadataMode);\n\n\t\tvar metadataText = metadata.entrySet()\n\t\t\t.stream()\n\t\t\t.map(metadataEntry -> this.metadataTemplate.replace(TEMPLATE_KEY_PLACEHOLDER, metadataEntry.getKey())\n\t\t\t\t.replace(TEMPLATE_VALUE_PLACEHOLDER, metadataEntry.getValue().toString()))\n\t\t\t.collect(Collectors.joining(this.metadataSeparator));\n\n\t\treturn this.textTemplate.replace(TEMPLATE_METADATA_STRING_PLACEHOLDER, metadataText)\n\t\t\t.replace(TEMPLATE_CONTENT_PLACEHOLDER, document.getContent());",
                "is_abstract": "",
                "class_name": "DefaultContentFormatter Builder",
                "annotations": []
            },
            {
                "name": "metadataFilter",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (metadataMode == MetadataMode.ALL) {\n\t\t\treturn new HashMap<String, Object>(metadata);\n\t\t}\n\t\tif (metadataMode == MetadataMode.NONE) {\n\t\t\treturn new HashMap<String, Object>(Collections.emptyMap());\n\t\t}\n\n\t\tSet<String> usableMetadataKeys = new HashSet<>(metadata.keySet());\n\n\t\tif (metadataMode == MetadataMode.INFERENCE) {\n\t\t\tusableMetadataKeys.removeAll(this.excludedInferenceMetadataKeys);\n\t\t}\n\t\telse if (metadataMode == MetadataMode.EMBED) {\n\t\t\tusableMetadataKeys.removeAll(this.excludedEmbedMetadataKeys);\n\t\t}\n\n\t\treturn new HashMap<String, Object>(metadata.entrySet()\n\t\t\t.stream()\n\t\t\t.filter(e -> usableMetadataKeys.contains(e.getKey()))\n\t\t\t.collect(Collectors.toMap(e -> e.getKey(), e -> e.getValue())));",
                "is_abstract": "",
                "class_name": "DefaultContentFormatter Builder",
                "annotations": []
            },
            {
                "name": "getMetadataTemplate",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.metadataTemplate;",
                "is_abstract": "",
                "class_name": "DefaultContentFormatter Builder",
                "annotations": []
            },
            {
                "name": "getMetadataSeparator",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.metadataSeparator;",
                "is_abstract": "",
                "class_name": "DefaultContentFormatter Builder",
                "annotations": []
            },
            {
                "name": "getTextTemplate",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.textTemplate;",
                "is_abstract": "",
                "class_name": "DefaultContentFormatter Builder",
                "annotations": []
            },
            {
                "name": "getExcludedInferenceMetadataKeys",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return Collections.unmodifiableList(this.excludedInferenceMetadataKeys);",
                "is_abstract": "",
                "class_name": "DefaultContentFormatter Builder",
                "annotations": []
            },
            {
                "name": "getExcludedEmbedMetadataKeys",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return Collections.unmodifiableList(this.excludedEmbedMetadataKeys);",
                "is_abstract": "",
                "class_name": "DefaultContentFormatter Builder",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/document/DocumentTransformer.java",
        "class_names": [],
        "imports": "import java.util.function.Function;\nimport java.util.List;",
        "package_import_paths": {},
        "package": "package org.springframework.ai.document;",
        "property_declarations": [],
        "functions": []
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/document/DocumentRetriever.java",
        "class_names": [],
        "imports": "import java.util.function.Function;\nimport java.util.List;",
        "package_import_paths": {
            "org.springframework.ai.document.retriev": "org.springframework.ai.document.retriev",
            "org.springframework.ai.document.apply": "org.springframework.ai.document.apply"
        },
        "package": "package org.springframework.ai.document;",
        "property_declarations": [],
        "functions": [
            {
                "name": "retrieve",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "apply",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return retrieve(query);",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/document/id/IdGenerator.java",
        "class_names": [],
        "imports": "",
        "package_import_paths": {
            "org.springframework.ai.document.id.generateId": "org.springframework.ai.document.id.generateId"
        },
        "package": "package org.springframework.ai.document.id;",
        "property_declarations": [],
        "functions": [
            {
                "name": "generateId",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/document/id/JdkSha256HexIdGenerator.java",
        "class_names": [
            "JdkSha256HexIdGenerator"
        ],
        "imports": "import java.security.MessageDigest;\nimport org.springframework.util.Assert;\nimport java.util.UUID;\nimport java.io.ByteArrayOutputStream;\nimport java.nio.charset.Charset;\nimport java.security.NoSuchAlgorithmException;\nimport java.nio.charset.StandardCharsets;\nimport java.io.ObjectOutputStream;",
        "package_import_paths": {
            "org.springframework.ai.document.id.JdkSha256HexIdGenerator": "org.springframework.ai.document.id.JdkSha256HexIdGenerator",
            "org.springframework.ai.document.id.generateId": "org.springframework.ai.document.id.generateId",
            "org.springframework.ai.document.id.hash": "org.springframework.ai.document.id.hash",
            "org.springframework.ai.document.id.serializeToBytes": "org.springframework.ai.document.id.serializeToBytes",
            "org.springframework.ai.document.id.getMessageDigest": "org.springframework.ai.document.id.getMessageDigest",
            "org.springframework.ai.document.id.SHA_256": "org.springframework.ai.document.id.SHA_256",
            "org.springframework.ai.document.id.byteHexFormat": "org.springframework.ai.document.id.byteHexFormat",
            "org.springframework.ai.document.id.charset": "org.springframework.ai.document.id.charset",
            "org.springframework.ai.document.id.messageDigest": "org.springframework.ai.document.id.messageDigest"
        },
        "package": "package org.springframework.ai.document.id;",
        "property_declarations": [
            "private static final String SHA_256 = \"SHA-256\";",
            "private final String byteHexFormat = \"%02x\";",
            "private final MessageDigest messageDigest;",
            "private final Charset charset;"
        ],
        "functions": [
            {
                "name": "generateId",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.hash(this.serializeToBytes(contents));",
                "is_abstract": "",
                "class_name": "JdkSha256HexIdGenerator",
                "annotations": []
            },
            {
                "name": "hash",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "byte[] hashBytes = getMessageDigest().digest(contentWithMetadata);\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor (byte b : hashBytes) {\n\t\t\tsb.append(String.format(this.byteHexFormat, b));\n\t\t}\n\t\treturn UUID.nameUUIDFromBytes(sb.toString().getBytes(this.charset)).toString();",
                "is_abstract": "",
                "class_name": "JdkSha256HexIdGenerator",
                "annotations": []
            },
            {
                "name": "serializeToBytes",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(contents, \"Contents must not be null\");\n\t\tByteArrayOutputStream byteOut = null;\n\t\ttry {\n\t\t\tbyteOut = new ByteArrayOutputStream();\n\t\t\tObjectOutputStream out = new ObjectOutputStream(byteOut);\n\t\t\tfor (Object content : contents) {\n\t\t\t\tout.writeObject(content);\n\t\t\t}\n\t\t\treturn byteOut.toByteArray();\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new RuntimeException(\"Failed to serialize\", e);\n\t\t}\n\t\tfinally {\n\t\t\tif (byteOut != null) {\n\t\t\t\ttry {\n\t\t\t\t\tbyteOut.close();\n\t\t\t\t}\n\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t// ignore\n\t\t\t\t}\n\t\t\t}\n\t\t}",
                "is_abstract": "",
                "class_name": "JdkSha256HexIdGenerator",
                "annotations": []
            },
            {
                "name": "getMessageDigest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "try {\n\t\t\treturn (MessageDigest) messageDigest.clone();\n\t\t}\n\t\tcatch (CloneNotSupportedException e) {\n\t\t\tthrow new RuntimeException(\"Unsupported clone for MessageDigest.\", e);\n\t\t}",
                "is_abstract": "",
                "class_name": "JdkSha256HexIdGenerator",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/document/id/RandomIdGenerator.java",
        "class_names": [
            "RandomIdGenerator"
        ],
        "imports": "import java.util.UUID;",
        "package_import_paths": {
            "org.springframework.ai.document.id.RandomIdGenerator": "org.springframework.ai.document.id.RandomIdGenerator",
            "org.springframework.ai.document.id.generateId": "org.springframework.ai.document.id.generateId"
        },
        "package": "package org.springframework.ai.document.id;",
        "property_declarations": [],
        "functions": [
            {
                "name": "generateId",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return UUID.randomUUID().toString();",
                "is_abstract": "",
                "class_name": "RandomIdGenerator",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/parser/Parser.java",
        "class_names": [],
        "imports": "",
        "package_import_paths": {
            "org.springframework.ai.parser.pars": "org.springframework.ai.parser.pars"
        },
        "package": "package org.springframework.ai.parser;",
        "property_declarations": [],
        "functions": [
            {
                "name": "parse",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/parser/AbstractMessageConverterOutputParser.java",
        "class_names": [
            "AbstractMessageConverterOutputParser"
        ],
        "imports": "import org.springframework.messaging.converter.MessageConverter;",
        "package_import_paths": {
            "org.springframework.ai.parser.AbstractMessageConverterOutputParser": "org.springframework.ai.parser.AbstractMessageConverterOutputParser",
            "org.springframework.ai.parser.getMessageConverter": "org.springframework.ai.parser.getMessageConverter",
            "org.springframework.ai.parser.messageConverter": "org.springframework.ai.parser.messageConverter"
        },
        "package": "package org.springframework.ai.parser;",
        "property_declarations": [
            "private MessageConverter messageConverter;"
        ],
        "functions": [
            {
                "name": "getMessageConverter",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.messageConverter;",
                "is_abstract": "",
                "class_name": "AbstractMessageConverterOutputParser",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/parser/AbstractConversionServiceOutputParser.java",
        "class_names": [
            "AbstractConversionServiceOutputParser"
        ],
        "imports": "import org.springframework.core.convert.support.DefaultConversionService;",
        "package_import_paths": {
            "org.springframework.ai.parser.AbstractConversionServiceOutputParser": "org.springframework.ai.parser.AbstractConversionServiceOutputParser",
            "org.springframework.ai.parser.getConversionServi": "org.springframework.ai.parser.getConversionServi",
            "org.springframework.ai.parser.conversionServi": "org.springframework.ai.parser.conversionServi"
        },
        "package": "package org.springframework.ai.parser;",
        "property_declarations": [
            "private final DefaultConversionService conversionService;"
        ],
        "functions": [
            {
                "name": "getConversionService",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return conversionService;",
                "is_abstract": "",
                "class_name": "AbstractConversionServiceOutputParser",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/parser/MapOutputParser.java",
        "class_names": [
            "MapOutputParser"
        ],
        "imports": "import org.springframework.messaging.Message;\nimport java.util.Map;\nimport java.util.HashMap;\nimport org.springframework.messaging.converter.MappingJackson2MessageConverter;\nimport org.springframework.messaging.support.MessageBuilder;\nimport java.nio.charset.StandardCharsets;",
        "package_import_paths": {
            "org.springframework.ai.parser.MapOutputParser": "org.springframework.ai.parser.MapOutputParser",
            "org.springframework.ai.parser.pars": "org.springframework.ai.parser.pars",
            "org.springframework.ai.parser.getFormat": "org.springframework.ai.parser.getFormat"
        },
        "package": "package org.springframework.ai.parser;",
        "property_declarations": [],
        "functions": [
            {
                "name": "parse",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Message<?> message = MessageBuilder.withPayload(text.getBytes(StandardCharsets.UTF_8)).build();\n\t\treturn (Map) getMessageConverter().fromMessage(message, HashMap.class);",
                "is_abstract": "",
                "class_name": "MapOutputParser",
                "annotations": []
            },
            {
                "name": "getFormat",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String raw = \"\"\"\n\t\t\t\tYour response should be in JSON format.\n\t\t\t\tThe data structure for the JSON should match this Java class: %s\n\t\t\t\tDo not include any explanations, only provide a RFC8259 compliant JSON response following this format without deviation.\n\t\t\t\t \"\"\";\n\t\treturn String.format(raw, \"java.util.HashMap\");",
                "is_abstract": "",
                "class_name": "MapOutputParser",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/parser/BeanOutputParser.java",
        "class_names": [
            "BeanOutputParser"
        ],
        "imports": "import com.fasterxml.jackson.core.util.DefaultIndenter;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.github.victools.jsonschema.generator.SchemaGenerator;\nimport com.fasterxml.jackson.core.util.DefaultPrettyPrinter;\nimport com.github.victools.jsonschema.module.jackson.JacksonModule;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport static com.github.victools.jsonschema.generator.SchemaVersion.DRAFT_2020_12;\nimport com.github.victools.jsonschema.generator.SchemaGeneratorConfig;\nimport java.util.Map;\nimport com.fasterxml.jackson.databind.ObjectWriter;\nimport java.util.Objects;\nimport com.github.victools.jsonschema.generator.SchemaGeneratorConfigBuilder;\nimport com.fasterxml.jackson.databind.DeserializationFeature;\nimport static com.github.victools.jsonschema.generator.OptionPreset.PLAIN_JSON;",
        "package_import_paths": {
            "org.springframework.ai.parser.BeanOutputParser": "org.springframework.ai.parser.BeanOutputParser",
            "org.springframework.ai.parser.generateSchem": "org.springframework.ai.parser.generateSchem",
            "org.springframework.ai.parser.pars": "org.springframework.ai.parser.pars",
            "org.springframework.ai.parser.jsonSchemaToInstan": "org.springframework.ai.parser.jsonSchemaToInstan",
            "org.springframework.ai.parser.getObjectMapper": "org.springframework.ai.parser.getObjectMapper",
            "org.springframework.ai.parser.getFormat": "org.springframework.ai.parser.getFormat",
            "org.springframework.ai.parser.jsonSchem": "org.springframework.ai.parser.jsonSchem",
            "org.springframework.ai.parser.clazz": "org.springframework.ai.parser.clazz",
            "org.springframework.ai.parser.objectMapper": "org.springframework.ai.parser.objectMapper"
        },
        "package": "package org.springframework.ai.parser;",
        "property_declarations": [
            "private String jsonSchema;",
            "@SuppressWarnings({ \"FieldMayBeFinal\", \"rawtypes\" })\n\tprivate Class<T> clazz;",
            "@SuppressWarnings(\"FieldMayBeFinal\")\n\tprivate ObjectMapper objectMapper;"
        ],
        "functions": [
            {
                "name": "generateSchema",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "JacksonModule jacksonModule = new JacksonModule();\n\t\tSchemaGeneratorConfigBuilder configBuilder = new SchemaGeneratorConfigBuilder(DRAFT_2020_12, PLAIN_JSON)\n\t\t\t.with(jacksonModule);\n\t\tSchemaGeneratorConfig config = configBuilder.build();\n\t\tSchemaGenerator generator = new SchemaGenerator(config);\n\t\tJsonNode jsonNode = generator.generateSchema(this.clazz);\n\t\tObjectWriter objectWriter = new ObjectMapper().writer(new DefaultPrettyPrinter()\n\t\t\t.withObjectIndenter(new DefaultIndenter().withLinefeed(System.lineSeparator())));\n\t\ttry {\n\t\t\tthis.jsonSchema = objectWriter.writeValueAsString(jsonNode);\n\t\t}\n\t\tcatch (JsonProcessingException e) {\n\t\t\tthrow new RuntimeException(\"Could not pretty print json schema for \" + this.clazz, e);\n\t\t}",
                "is_abstract": "",
                "class_name": "BeanOutputParser",
                "annotations": []
            },
            {
                "name": "parse",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "try {\n\t\t\t// If the response is a JSON Schema, extract the properties and use them as\n\t\t\t// the response.\n\t\t\ttext = this.jsonSchemaToInstance(text);\n\t\t\treturn (T) this.objectMapper.readValue(text, this.clazz);\n\t\t}\n\t\tcatch (JsonProcessingException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}",
                "is_abstract": "",
                "class_name": "BeanOutputParser",
                "annotations": []
            },
            {
                "name": "jsonSchemaToInstance",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "try {\n\t\t\tMap<String, Object> map = this.objectMapper.readValue(text, Map.class);\n\t\t\tif (map.containsKey(\"$schema\")) {\n\t\t\t\treturn this.objectMapper.writeValueAsString(map.get(\"properties\"));\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t}\n\t\treturn text;",
                "is_abstract": "",
                "class_name": "BeanOutputParser",
                "annotations": []
            },
            {
                "name": "getObjectMapper",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "ObjectMapper mapper = new ObjectMapper();\n\t\tmapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n\t\treturn mapper;",
                "is_abstract": "",
                "class_name": "BeanOutputParser",
                "annotations": []
            },
            {
                "name": "getFormat",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String template = \"\"\"\n\t\t\t\tYour response should be in JSON format.\n\t\t\t\tDo not include any explanations, only provide a RFC8259 compliant JSON response following this format without deviation.\n\t\t\t\tDo not include markdown code blocks in your response.\n\t\t\t\tHere is the JSON Schema instance your output must adhere to:\n\t\t\t\t```%s```\n\t\t\t\t\"\"\";\n\t\treturn String.format(template, this.jsonSchema);",
                "is_abstract": "",
                "class_name": "BeanOutputParser",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/parser/ListOutputParser.java",
        "class_names": [
            "ListOutputParser"
        ],
        "imports": "import org.springframework.core.convert.support.DefaultConversionService;\nimport java.util.List;",
        "package_import_paths": {
            "org.springframework.ai.parser.ListOutputParser": "org.springframework.ai.parser.ListOutputParser",
            "org.springframework.ai.parser.getFormat": "org.springframework.ai.parser.getFormat",
            "org.springframework.ai.parser.pars": "org.springframework.ai.parser.pars"
        },
        "package": "package org.springframework.ai.parser;",
        "property_declarations": [],
        "functions": [
            {
                "name": "getFormat",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return \"\"\"\n\t\t\t\tYour response should be a list of comma separated values\n\t\t\t\teg: `foo, bar, baz`\n\t\t\t\t\"\"\";",
                "is_abstract": "",
                "class_name": "ListOutputParser",
                "annotations": []
            },
            {
                "name": "parse",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return getConversionService().convert(text, List.class);",
                "is_abstract": "",
                "class_name": "ListOutputParser",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/parser/FormatProvider.java",
        "class_names": [],
        "imports": "",
        "package_import_paths": {
            "org.springframework.ai.parser.getFormat": "org.springframework.ai.parser.getFormat"
        },
        "package": "package org.springframework.ai.parser;",
        "property_declarations": [],
        "functions": [
            {
                "name": "getFormat",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/parser/OutputParser.java",
        "class_names": [],
        "imports": "",
        "package_import_paths": {},
        "package": "package org.springframework.ai.parser;",
        "property_declarations": [],
        "functions": []
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/image/ImagePrompt.java",
        "class_names": [
            "ImagePrompt"
        ],
        "imports": "import org.springframework.ai.model.ModelRequest;\nimport java.util.Objects;\nimport java.util.List;\nimport java.util.Collections;",
        "package_import_paths": {
            "org.springframework.ai.image.ImagePrompt": "org.springframework.ai.image.ImagePrompt",
            "org.springframework.ai.image.getInstructions": "org.springframework.ai.image.getInstructions",
            "org.springframework.ai.image.getOptions": "org.springframework.ai.image.getOptions",
            "org.springframework.ai.image.toStrin": "org.springframework.ai.image.toStrin",
            "org.springframework.ai.image.equals": "org.springframework.ai.image.equals",
            "org.springframework.ai.image.hashCod": "org.springframework.ai.image.hashCod",
            "org.springframework.ai.image.messages": "org.springframework.ai.image.messages",
            "org.springframework.ai.image.imageModelOptions": "org.springframework.ai.image.imageModelOptions"
        },
        "package": "package org.springframework.ai.image;",
        "property_declarations": [
            "private ImageOptions imageModelOptions;",
            "private final List<ImageMessage> messages;"
        ],
        "functions": [
            {
                "name": "getInstructions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return messages;",
                "is_abstract": "",
                "class_name": "ImagePrompt",
                "annotations": []
            },
            {
                "name": "getOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return imageModelOptions;",
                "is_abstract": "",
                "class_name": "ImagePrompt",
                "annotations": []
            },
            {
                "name": "toString",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return \"NewImagePrompt{\" + \"messages=\" + messages + \", imageModelOptions=\" + imageModelOptions + '}';",
                "is_abstract": "",
                "class_name": "ImagePrompt",
                "annotations": []
            },
            {
                "name": "equals",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (this == o)\n\t\t\treturn true;\n\t\tif (!(o instanceof ImagePrompt that))\n\t\t\treturn false;\n\t\treturn Objects.equals(messages, that.messages) && Objects.equals(imageModelOptions, that.imageModelOptions);",
                "is_abstract": "",
                "class_name": "ImagePrompt",
                "annotations": []
            },
            {
                "name": "hashCode",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return Objects.hash(messages, imageModelOptions);",
                "is_abstract": "",
                "class_name": "ImagePrompt",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/image/ImageResponse.java",
        "class_names": [
            "ImageResponse"
        ],
        "imports": "import org.springframework.ai.model.ModelResponse;\nimport java.util.Objects;\nimport java.util.List;",
        "package_import_paths": {
            "org.springframework.ai.image.ImageRespons": "org.springframework.ai.image.ImageRespons",
            "org.springframework.ai.image.getResult": "org.springframework.ai.image.getResult",
            "org.springframework.ai.image.getResults": "org.springframework.ai.image.getResults",
            "org.springframework.ai.image.getMetadat": "org.springframework.ai.image.getMetadat",
            "org.springframework.ai.image.toStrin": "org.springframework.ai.image.toStrin",
            "org.springframework.ai.image.equals": "org.springframework.ai.image.equals",
            "org.springframework.ai.image.hashCod": "org.springframework.ai.image.hashCod",
            "org.springframework.ai.image.imageResponseMetadat": "org.springframework.ai.image.imageResponseMetadat",
            "org.springframework.ai.image.imageGenerations": "org.springframework.ai.image.imageGenerations"
        },
        "package": "package org.springframework.ai.image;",
        "property_declarations": [
            "private final List<ImageGeneration> imageGenerations;",
            "private final ImageResponseMetadata imageResponseMetadata;"
        ],
        "functions": [
            {
                "name": "getResult",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return imageGenerations.get(0);",
                "is_abstract": "",
                "class_name": "ImageResponse",
                "annotations": []
            },
            {
                "name": "getResults",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return imageGenerations;",
                "is_abstract": "",
                "class_name": "ImageResponse",
                "annotations": []
            },
            {
                "name": "getMetadata",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return imageResponseMetadata;",
                "is_abstract": "",
                "class_name": "ImageResponse",
                "annotations": []
            },
            {
                "name": "toString",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return \"ImageResponse{\" + \"imageResponseMetadata=\" + imageResponseMetadata + \", imageGenerations=\"\n\t\t\t\t+ imageGenerations + '}';",
                "is_abstract": "",
                "class_name": "ImageResponse",
                "annotations": []
            },
            {
                "name": "equals",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (this == o)\n\t\t\treturn true;\n\t\tif (!(o instanceof ImageResponse that))\n\t\t\treturn false;\n\t\treturn Objects.equals(imageResponseMetadata, that.imageResponseMetadata)\n\t\t\t\t&& Objects.equals(imageGenerations, that.imageGenerations);",
                "is_abstract": "",
                "class_name": "ImageResponse",
                "annotations": []
            },
            {
                "name": "hashCode",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return Objects.hash(imageResponseMetadata, imageGenerations);",
                "is_abstract": "",
                "class_name": "ImageResponse",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/image/Image.java",
        "class_names": [
            "Image"
        ],
        "imports": "import java.util.Objects;",
        "package_import_paths": {
            "org.springframework.ai.image.Im": "org.springframework.ai.image.Im",
            "org.springframework.ai.image.getUrl": "org.springframework.ai.image.getUrl",
            "org.springframework.ai.image.setUrl": "org.springframework.ai.image.setUrl",
            "org.springframework.ai.image.getB64Json": "org.springframework.ai.image.getB64Json",
            "org.springframework.ai.image.setB64Json": "org.springframework.ai.image.setB64Json",
            "org.springframework.ai.image.toStrin": "org.springframework.ai.image.toStrin",
            "org.springframework.ai.image.equals": "org.springframework.ai.image.equals",
            "org.springframework.ai.image.hashCod": "org.springframework.ai.image.hashCod",
            "org.springframework.ai.image.url": "org.springframework.ai.image.url",
            "org.springframework.ai.image.b64Json": "org.springframework.ai.image.b64Json"
        },
        "package": "package org.springframework.ai.image;",
        "property_declarations": [
            "private String b64Json;",
            "private String url;"
        ],
        "functions": [
            {
                "name": "getUrl",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return url;",
                "is_abstract": "",
                "class_name": "Image",
                "annotations": []
            },
            {
                "name": "setUrl",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.url = url;",
                "is_abstract": "",
                "class_name": "Image",
                "annotations": []
            },
            {
                "name": "getB64Json",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return b64Json;",
                "is_abstract": "",
                "class_name": "Image",
                "annotations": []
            },
            {
                "name": "setB64Json",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.b64Json = b64Json;",
                "is_abstract": "",
                "class_name": "Image",
                "annotations": []
            },
            {
                "name": "toString",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return \"Image{\" + \"url='\" + url + '\\'' + \", b64Json='\" + b64Json + '\\'' + '}';",
                "is_abstract": "",
                "class_name": "Image",
                "annotations": []
            },
            {
                "name": "equals",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (this == o)\n\t\t\treturn true;\n\t\tif (!(o instanceof Image image))\n\t\t\treturn false;\n\t\treturn Objects.equals(url, image.url) && Objects.equals(b64Json, image.b64Json);",
                "is_abstract": "",
                "class_name": "Image",
                "annotations": []
            },
            {
                "name": "hashCode",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return Objects.hash(url, b64Json);",
                "is_abstract": "",
                "class_name": "Image",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/image/ImageMessage.java",
        "class_names": [
            "ImageMessage"
        ],
        "imports": "import java.util.Objects;",
        "package_import_paths": {
            "org.springframework.ai.image.ImageMess": "org.springframework.ai.image.ImageMess",
            "org.springframework.ai.image.getText": "org.springframework.ai.image.getText",
            "org.springframework.ai.image.getWeight": "org.springframework.ai.image.getWeight",
            "org.springframework.ai.image.toStrin": "org.springframework.ai.image.toStrin",
            "org.springframework.ai.image.equals": "org.springframework.ai.image.equals",
            "org.springframework.ai.image.hashCod": "org.springframework.ai.image.hashCod",
            "org.springframework.ai.image.text": "org.springframework.ai.image.text",
            "org.springframework.ai.image.weight": "org.springframework.ai.image.weight"
        },
        "package": "package org.springframework.ai.image;",
        "property_declarations": [
            "private String text;",
            "private Float weight;"
        ],
        "functions": [
            {
                "name": "getText",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return text;",
                "is_abstract": "",
                "class_name": "ImageMessage",
                "annotations": []
            },
            {
                "name": "getWeight",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return weight;",
                "is_abstract": "",
                "class_name": "ImageMessage",
                "annotations": []
            },
            {
                "name": "toString",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return \"ImageMessage{\" + \"text='\" + text + '\\'' + \", weight=\" + weight + '}';",
                "is_abstract": "",
                "class_name": "ImageMessage",
                "annotations": []
            },
            {
                "name": "equals",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (this == o)\n\t\t\treturn true;\n\t\tif (!(o instanceof ImageMessage that))\n\t\t\treturn false;\n\t\treturn Objects.equals(text, that.text) && Objects.equals(weight, that.weight);",
                "is_abstract": "",
                "class_name": "ImageMessage",
                "annotations": []
            },
            {
                "name": "hashCode",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return Objects.hash(text, weight);",
                "is_abstract": "",
                "class_name": "ImageMessage",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/image/ImageOptionsBuilder.java",
        "class_names": [
            "ImageModelOptionsImpl",
            "ImageOptionsBuilder"
        ],
        "imports": "",
        "package_import_paths": {
            "org.springframework.ai.image.ImageOptionsBuilder": "org.springframework.ai.image.ImageOptionsBuilder",
            "org.springframework.ai.image.ImageModelOptionsImpl": "org.springframework.ai.image.ImageModelOptionsImpl",
            "org.springframework.ai.image.getN": "org.springframework.ai.image.getN",
            "org.springframework.ai.image.setN": "org.springframework.ai.image.setN",
            "org.springframework.ai.image.getModel": "org.springframework.ai.image.getModel",
            "org.springframework.ai.image.setModel": "org.springframework.ai.image.setModel",
            "org.springframework.ai.image.getResponseFormat": "org.springframework.ai.image.getResponseFormat",
            "org.springframework.ai.image.setResponseFormat": "org.springframework.ai.image.setResponseFormat",
            "org.springframework.ai.image.getWidth": "org.springframework.ai.image.getWidth",
            "org.springframework.ai.image.setWidth": "org.springframework.ai.image.setWidth",
            "org.springframework.ai.image.getHeight": "org.springframework.ai.image.getHeight",
            "org.springframework.ai.image.setHeight": "org.springframework.ai.image.setHeight",
            "org.springframework.ai.image.builder": "org.springframework.ai.image.builder",
            "org.springframework.ai.image.withN": "org.springframework.ai.image.withN",
            "org.springframework.ai.image.withModel": "org.springframework.ai.image.withModel",
            "org.springframework.ai.image.withResponseFormat": "org.springframework.ai.image.withResponseFormat",
            "org.springframework.ai.image.withWidth": "org.springframework.ai.image.withWidth",
            "org.springframework.ai.image.withHeight": "org.springframework.ai.image.withHeight",
            "org.springframework.ai.image.build": "org.springframework.ai.image.build",
            "org.springframework.ai.image.n": "org.springframework.ai.image.n",
            "org.springframework.ai.image.model": "org.springframework.ai.image.model",
            "org.springframework.ai.image.width": "org.springframework.ai.image.width",
            "org.springframework.ai.image.height": "org.springframework.ai.image.height",
            "org.springframework.ai.image.responseFormat": "org.springframework.ai.image.responseFormat",
            "org.springframework.ai.image.options": "org.springframework.ai.image.options"
        },
        "package": "package org.springframework.ai.image;",
        "property_declarations": [
            "private String model;",
            "private Integer n;",
            "private final ImageModelOptionsImpl options = new ImageModelOptionsImpl();",
            "private Integer width;",
            "private String responseFormat;",
            "private Integer height;"
        ],
        "functions": [
            {
                "name": "getN",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return n;",
                "is_abstract": "",
                "class_name": "ImageOptionsBuilder ImageModelOptionsImpl",
                "annotations": []
            },
            {
                "name": "setN",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.n = n;",
                "is_abstract": "",
                "class_name": "ImageOptionsBuilder ImageModelOptionsImpl",
                "annotations": []
            },
            {
                "name": "getModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return model;",
                "is_abstract": "",
                "class_name": "ImageOptionsBuilder ImageModelOptionsImpl",
                "annotations": []
            },
            {
                "name": "setModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.model = model;",
                "is_abstract": "",
                "class_name": "ImageOptionsBuilder ImageModelOptionsImpl",
                "annotations": []
            },
            {
                "name": "getResponseFormat",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return responseFormat;",
                "is_abstract": "",
                "class_name": "ImageOptionsBuilder ImageModelOptionsImpl",
                "annotations": []
            },
            {
                "name": "setResponseFormat",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.responseFormat = responseFormat;",
                "is_abstract": "",
                "class_name": "ImageOptionsBuilder ImageModelOptionsImpl",
                "annotations": []
            },
            {
                "name": "getWidth",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return width;",
                "is_abstract": "",
                "class_name": "ImageOptionsBuilder ImageModelOptionsImpl",
                "annotations": []
            },
            {
                "name": "setWidth",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.width = width;",
                "is_abstract": "",
                "class_name": "ImageOptionsBuilder ImageModelOptionsImpl",
                "annotations": []
            },
            {
                "name": "getHeight",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return height;",
                "is_abstract": "",
                "class_name": "ImageOptionsBuilder ImageModelOptionsImpl",
                "annotations": []
            },
            {
                "name": "setHeight",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.height = height;",
                "is_abstract": "",
                "class_name": "ImageOptionsBuilder ImageModelOptionsImpl",
                "annotations": []
            },
            {
                "name": "builder",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new ImageOptionsBuilder();",
                "is_abstract": "",
                "class_name": "ImageOptionsBuilder ImageModelOptionsImpl",
                "annotations": []
            },
            {
                "name": "withN",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "options.setN(n);\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "ImageOptionsBuilder ImageModelOptionsImpl",
                "annotations": []
            },
            {
                "name": "withModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "options.setModel(model);\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "ImageOptionsBuilder ImageModelOptionsImpl",
                "annotations": []
            },
            {
                "name": "withResponseFormat",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "options.setResponseFormat(responseFormat);\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "ImageOptionsBuilder ImageModelOptionsImpl",
                "annotations": []
            },
            {
                "name": "withWidth",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "options.setWidth(width);\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "ImageOptionsBuilder ImageModelOptionsImpl",
                "annotations": []
            },
            {
                "name": "withHeight",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "options.setHeight(height);\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "ImageOptionsBuilder ImageModelOptionsImpl",
                "annotations": []
            },
            {
                "name": "build",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return options;",
                "is_abstract": "",
                "class_name": "ImageOptionsBuilder ImageModelOptionsImpl",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/image/ImageOptions.java",
        "class_names": [],
        "imports": "import org.springframework.ai.model.ModelOptions;",
        "package_import_paths": {
            "org.springframework.ai.image.getN": "org.springframework.ai.image.getN",
            "org.springframework.ai.image.getModel": "org.springframework.ai.image.getModel",
            "org.springframework.ai.image.getWidth": "org.springframework.ai.image.getWidth",
            "org.springframework.ai.image.getHeight": "org.springframework.ai.image.getHeight",
            "org.springframework.ai.image.getResponseFormat": "org.springframework.ai.image.getResponseFormat"
        },
        "package": "package org.springframework.ai.image;",
        "property_declarations": [],
        "functions": [
            {
                "name": "getN",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "getModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "getWidth",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "getHeight",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "getResponseFormat",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/image/ImageResponseMetadata.java",
        "class_names": [],
        "imports": "import org.springframework.ai.model.ResponseMetadata;",
        "package_import_paths": {
            "org.springframework.ai.image.created": "org.springframework.ai.image.created"
        },
        "package": "package org.springframework.ai.image;",
        "property_declarations": [],
        "functions": [
            {
                "name": "created",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return System.currentTimeMillis();",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/image/ImageClient.java",
        "class_names": [],
        "imports": "import org.springframework.ai.model.ModelClient;",
        "package_import_paths": {
            "org.springframework.ai.image.call": "org.springframework.ai.image.call"
        },
        "package": "package org.springframework.ai.image;",
        "property_declarations": [],
        "functions": [
            {
                "name": "call",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/image/ImageGeneration.java",
        "class_names": [
            "ImageGeneration"
        ],
        "imports": "import org.springframework.ai.model.ModelResult;",
        "package_import_paths": {
            "org.springframework.ai.image.ImageGeneration": "org.springframework.ai.image.ImageGeneration",
            "org.springframework.ai.image.getOutput": "org.springframework.ai.image.getOutput",
            "org.springframework.ai.image.getMetadat": "org.springframework.ai.image.getMetadat",
            "org.springframework.ai.image.toStrin": "org.springframework.ai.image.toStrin",
            "org.springframework.ai.image.imageGenerationMetadat": "org.springframework.ai.image.imageGenerationMetadat",
            "org.springframework.ai.image.im": "org.springframework.ai.image.im"
        },
        "package": "package org.springframework.ai.image;",
        "property_declarations": [
            "private ImageGenerationMetadata imageGenerationMetadata;",
            "private Image image;"
        ],
        "functions": [
            {
                "name": "getOutput",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return image;",
                "is_abstract": "",
                "class_name": "ImageGeneration",
                "annotations": []
            },
            {
                "name": "getMetadata",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return imageGenerationMetadata;",
                "is_abstract": "",
                "class_name": "ImageGeneration",
                "annotations": []
            },
            {
                "name": "toString",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return \"ImageGeneration{\" + \"imageGenerationMetadata=\" + imageGenerationMetadata + \", image=\" + image + '}';",
                "is_abstract": "",
                "class_name": "ImageGeneration",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/image/ImageGenerationMetadata.java",
        "class_names": [],
        "imports": "import org.springframework.ai.model.ResultMetadata;",
        "package_import_paths": {},
        "package": "package org.springframework.ai.image;",
        "property_declarations": [],
        "functions": []
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/writer/FileDocumentWriter.java",
        "class_names": [
            "FileDocumentWriter"
        ],
        "imports": "import java.io.FileWriter;\nimport java.util.List;\nimport org.springframework.ai.document.MetadataMode;\nimport org.springframework.util.Assert;\nimport org.springframework.ai.document.Document;\nimport org.springframework.ai.document.DocumentWriter;",
        "package_import_paths": {
            "org.springframework.ai.writer.FileDocumentWriter": "org.springframework.ai.writer.FileDocumentWriter",
            "org.springframework.ai.writer.accept": "org.springframework.ai.writer.accept",
            "org.springframework.ai.writer.METADATA_START_PAGE_NUMBER": "org.springframework.ai.writer.METADATA_START_PAGE_NUMBER",
            "org.springframework.ai.writer.METADATA_END_PAGE_NUMBER": "org.springframework.ai.writer.METADATA_END_PAGE_NUMBER",
            "org.springframework.ai.writer.fileNam": "org.springframework.ai.writer.fileNam",
            "org.springframework.ai.writer.withDocumentMarkers": "org.springframework.ai.writer.withDocumentMarkers",
            "org.springframework.ai.writer.metadataMod": "org.springframework.ai.writer.metadataMod",
            "org.springframework.ai.writer.append": "org.springframework.ai.writer.append"
        },
        "package": "package org.springframework.ai.writer;",
        "property_declarations": [
            "private final String fileName;",
            "public static final String METADATA_START_PAGE_NUMBER = \"page_number\";",
            "public static final String METADATA_END_PAGE_NUMBER = \"end_page_number\";",
            "private final MetadataMode metadataMode;",
            "private final boolean append;",
            "private final boolean withDocumentMarkers;"
        ],
        "functions": [
            {
                "name": "accept",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "try (var writer = new FileWriter(this.fileName, this.append)) {\n\n\t\t\tint index = 0;\n\t\t\tfor (Document doc : docs) {\n\t\t\t\tif (this.withDocumentMarkers) {\n\t\t\t\t\twriter.write(String.format(\"%n### Doc: %s, pages:[%s,%s]\\n\", index,\n\t\t\t\t\t\t\tdoc.getMetadata().get(METADATA_START_PAGE_NUMBER),\n\t\t\t\t\t\t\tdoc.getMetadata().get(METADATA_END_PAGE_NUMBER)));\n\t\t\t\t}\n\t\t\t\twriter.write(doc.getFormattedContent(this.metadataMode));\n\t\t\t\tindex++;\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}",
                "is_abstract": "",
                "class_name": "FileDocumentWriter",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/model/ResponseMetadata.java",
        "class_names": [],
        "imports": "",
        "package_import_paths": {},
        "package": "package org.springframework.ai.model;",
        "property_declarations": [],
        "functions": []
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/model/ResultMetadata.java",
        "class_names": [],
        "imports": "",
        "package_import_paths": {},
        "package": "package org.springframework.ai.model;",
        "property_declarations": [],
        "functions": []
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/model/ModelOptionsUtils.java",
        "class_names": [
            "ModelOptionsUtils"
        ],
        "imports": "import java.util.concurrent.atomic.AtomicReference;\nimport java.util.stream.Collectors;\nimport java.util.List;\nimport org.springframework.beans.BeanWrapperImpl;\nimport java.lang.reflect.Field;\nimport com.fasterxml.jackson.databind.SerializationFeature;\nimport org.springframework.util.CollectionUtils;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport com.github.victools.jsonschema.generator.SchemaGeneratorConfigBuilder;\nimport com.github.victools.jsonschema.generator.SchemaVersion;\nimport com.github.victools.jsonschema.module.jackson.JacksonModule;\nimport java.util.concurrent.ConcurrentHashMap;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.github.victools.jsonschema.module.jackson.JacksonOption;\nimport com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;\nimport java.beans.PropertyDescriptor;\nimport java.util.Map;\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport java.util.Arrays;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.github.victools.jsonschema.generator.SchemaGenerator;\nimport com.fasterxml.jackson.databind.node.ObjectNode;\nimport java.util.HashMap;\nimport com.github.victools.jsonschema.generator.OptionPreset;\nimport org.springframework.beans.BeanWrapper;\nimport java.util.ArrayList;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.springframework.util.Assert;\nimport com.github.victools.jsonschema.generator.SchemaGeneratorConfig;\nimport com.fasterxml.jackson.databind.node.ArrayNode;\nimport com.github.victools.jsonschema.generator.Option;\nimport com.fasterxml.jackson.databind.DeserializationFeature;\nimport com.github.victools.jsonschema.module.swagger2.Swagger2Module;",
        "package_import_paths": {
            "org.springframework.ai.model.ModelOptionsUtils": "org.springframework.ai.model.ModelOptionsUtils",
            "org.springframework.ai.model.jsonToM": "org.springframework.ai.model.jsonToM",
            "org.springframework.ai.model.jsonToObject": "org.springframework.ai.model.jsonToObject",
            "org.springframework.ai.model.toJsonStrin": "org.springframework.ai.model.toJsonStrin",
            "org.springframework.ai.model.mer": "org.springframework.ai.model.mer",
            "org.springframework.ai.model.objectToM": "org.springframework.ai.model.objectToM",
            "org.springframework.ai.model.mapToClass": "org.springframework.ai.model.mapToClass",
            "org.springframework.ai.model.getJsonPropertyValues": "org.springframework.ai.model.getJsonPropertyValues",
            "org.springframework.ai.model.copyToTarget": "org.springframework.ai.model.copyToTarget",
            "org.springframework.ai.model.mergeBeans": "org.springframework.ai.model.mergeBeans",
            "org.springframework.ai.model.toGetNam": "org.springframework.ai.model.toGetNam",
            "org.springframework.ai.model.getJsonSchem": "org.springframework.ai.model.getJsonSchem",
            "org.springframework.ai.model.toUpperCaseTypeValues": "org.springframework.ai.model.toUpperCaseTypeValues",
            "org.springframework.ai.model.OBJECT_MAPPER": "org.springframework.ai.model.OBJECT_MAPPER",
            "org.springframework.ai.model.BEAN_MERGE_FIELD_EXCISIONS": "org.springframework.ai.model.BEAN_MERGE_FIELD_EXCISIONS",
            "org.springframework.ai.model.REQUEST_FIELD_NAMES_PER_CLASS": "org.springframework.ai.model.REQUEST_FIELD_NAMES_PER_CLASS",
            "org.springframework.ai.model.SCHEMA_GENERATOR_CACHE": "org.springframework.ai.model.SCHEMA_GENERATOR_CACHE",
            "org.springframework.ai.model.MAP_TYPE_REF": "org.springframework.ai.model.MAP_TYPE_REF"
        },
        "package": "package org.springframework.ai.model;",
        "property_declarations": [
            "private static AtomicReference<SchemaGenerator> SCHEMA_GENERATOR_CACHE = new AtomicReference<>();",
            "private final static List<String> BEAN_MERGE_FIELD_EXCISIONS = List.of(\"class\");",
            "private static TypeReference<HashMap<String, Object>> MAP_TYPE_REF = new TypeReference<HashMap<String, Object>>() {\n\t};",
            "public final static ObjectMapper OBJECT_MAPPER = new ObjectMapper()\n\t\t.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)\n\t\t.disable(SerializationFeature.FAIL_ON_EMPTY_BEANS)\n\t\t.registerModule(new JavaTimeModule());",
            "private static ConcurrentHashMap<Class<?>, List<String>> REQUEST_FIELD_NAMES_PER_CLASS = new ConcurrentHashMap<Class<?>, List<String>>();"
        ],
        "functions": [
            {
                "name": "jsonToMap",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "try {\n\t\t\treturn OBJECT_MAPPER.readValue(json, MAP_TYPE_REF);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}",
                "is_abstract": "",
                "class_name": "ModelOptionsUtils",
                "annotations": []
            },
            {
                "name": "jsonToObject",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "try {\n\t\t\treturn OBJECT_MAPPER.readValue(json, type);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new RuntimeException(\"Failed to json: \" + json, e);\n\t\t}",
                "is_abstract": "",
                "class_name": "ModelOptionsUtils",
                "annotations": []
            },
            {
                "name": "toJsonString",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "try {\n\t\t\treturn OBJECT_MAPPER.writeValueAsString(object);\n\t\t}\n\t\tcatch (JsonProcessingException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}",
                "is_abstract": "",
                "class_name": "ModelOptionsUtils",
                "annotations": []
            },
            {
                "name": "merge",
                "parameters": [
                    ""
                ],
                "return_type": "acceptedFieldNames",
                "body": "if (source == null) {\n\t\t\tsource = Map.of();\n\t\t}\n\n\t\tList<String> requestFieldNames = CollectionUtils.isEmpty(acceptedFieldNames)\n\t\t\t\t? REQUEST_FIELD_NAMES_PER_CLASS.computeIfAbsent(clazz, ModelOptionsUtils::getJsonPropertyValues)\n\t\t\t\t: acceptedFieldNames;\n\n\t\tif (CollectionUtils.isEmpty(requestFieldNames)) {\n\t\t\tthrow new IllegalArgumentException(\"No @JsonProperty fields found in the \" + clazz.getName());\n\t\t}\n\n\t\tMap<String, Object> sourceMap = ModelOptionsUtils.objectToMap(source);\n\t\tMap<String, Object> targetMap = ModelOptionsUtils.objectToMap(target);\n\n\t\ttargetMap.putAll(sourceMap.entrySet()\n\t\t\t.stream()\n\t\t\t.filter(e -> e.getValue() != null)\n\t\t\t.collect(Collectors.toMap(e -> e.getKey(), e -> e.getValue())));\n\n\t\ttargetMap = targetMap.entrySet()\n\t\t\t.stream()\n\t\t\t.filter(e -> requestFieldNames.contains(e.getKey()))\n\t\t\t.collect(Collectors.toMap(e -> e.getKey(), e -> e.getValue()));\n\n\t\treturn ModelOptionsUtils.mapToClass(targetMap, clazz);",
                "is_abstract": "",
                "class_name": "ModelOptionsUtils",
                "annotations": []
            },
            {
                "name": "merge",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return ModelOptionsUtils.merge(source, target, clazz, null);",
                "is_abstract": "",
                "class_name": "ModelOptionsUtils",
                "annotations": []
            },
            {
                "name": "objectToMap",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (source == null) {\n\t\t\treturn new HashMap<>();\n\t\t}\n\t\ttry {\n\t\t\tString json = OBJECT_MAPPER.writeValueAsString(source);\n\t\t\treturn OBJECT_MAPPER.readValue(json, new TypeReference<Map<String, Object>>() {\n\t\t\t})\n\t\t\t\t.entrySet()\n\t\t\t\t.stream()\n\t\t\t\t.filter(e -> e.getValue() != null)\n\t\t\t\t.collect(Collectors.toMap(e -> e.getKey(), e -> e.getValue()));\n\t\t}\n\t\tcatch (JsonProcessingException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}",
                "is_abstract": "",
                "class_name": "ModelOptionsUtils",
                "annotations": []
            },
            {
                "name": "mapToClass",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "try {\n\t\t\tString json = OBJECT_MAPPER.writeValueAsString(source);\n\t\t\treturn OBJECT_MAPPER.readValue(json, clazz);\n\t\t}\n\t\tcatch (JsonProcessingException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}",
                "is_abstract": "",
                "class_name": "ModelOptionsUtils",
                "annotations": []
            },
            {
                "name": "getJsonPropertyValues",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "List<String> values = new ArrayList<>();\n\t\tField[] fields = clazz.getDeclaredFields();\n\t\tfor (Field field : fields) {\n\t\t\tJsonProperty jsonPropertyAnnotation = field.getAnnotation(JsonProperty.class);\n\t\t\tif (jsonPropertyAnnotation != null) {\n\t\t\t\tvalues.add(jsonPropertyAnnotation.value());\n\t\t\t}\n\t\t}\n\t\treturn values;",
                "is_abstract": "",
                "class_name": "ModelOptionsUtils",
                "annotations": []
            },
            {
                "name": "copyToTarget",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(sourceInterfaceClazz, \"SourceOptionsClazz must not be null\");\n\t\tAssert.notNull(targetBeanClazz, \"TargetOptionsClazz must not be null\");\n\n\t\tif (sourceBean == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (sourceBean.getClass().isAssignableFrom(targetBeanClazz)) {\n\t\t\treturn (T) sourceBean;\n\t\t}\n\n\t\ttry {\n\t\t\tT targetOptions = targetBeanClazz.getConstructor().newInstance();\n\n\t\t\tModelOptionsUtils.mergeBeans(sourceBean, targetOptions, sourceInterfaceClazz, true);\n\n\t\t\treturn targetOptions;\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new RuntimeException(\n\t\t\t\t\t\"Failed to convert the \" + sourceInterfaceClazz.getName() + \" into \" + targetBeanClazz.getName(),\n\t\t\t\t\te);\n\t\t}",
                "is_abstract": "",
                "class_name": "ModelOptionsUtils",
                "annotations": []
            },
            {
                "name": "mergeBeans",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(source, \"Source object must not be null\");\n\t\tAssert.notNull(target, \"Target object must not be null\");\n\n\t\tBeanWrapper sourceBeanWrap = new BeanWrapperImpl(source);\n\t\tBeanWrapper targetBeanWrap = new BeanWrapperImpl(target);\n\n\t\tList<String> interfaceNames = Arrays.stream(sourceInterfaceClazz.getMethods()).map(m -> m.getName()).toList();\n\n\t\tfor (PropertyDescriptor descriptor : sourceBeanWrap.getPropertyDescriptors()) {\n\n\t\t\tif (!BEAN_MERGE_FIELD_EXCISIONS.contains(descriptor.getName())\n\t\t\t\t\t&& interfaceNames.contains(toGetName(descriptor.getName()))) {\n\n\t\t\t\tString propertyName = descriptor.getName();\n\t\t\t\tObject value = sourceBeanWrap.getPropertyValue(propertyName);\n\n\t\t\t\t// Copy value to the target object\n\t\t\t\tif (value != null) {\n\t\t\t\t\tvar targetValue = targetBeanWrap.getPropertyValue(propertyName);\n\n\t\t\t\t\tif (targetValue == null || overrideNonNullTargetValues) {\n\t\t\t\t\t\ttargetBeanWrap.setPropertyValue(propertyName, value);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn target;",
                "is_abstract": "",
                "class_name": "ModelOptionsUtils",
                "annotations": []
            },
            {
                "name": "toGetName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return \"get\" + name.substring(0, 1).toUpperCase() + name.substring(1);",
                "is_abstract": "",
                "class_name": "ModelOptionsUtils",
                "annotations": []
            },
            {
                "name": "getJsonSchema",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (SCHEMA_GENERATOR_CACHE.get() == null) {\n\n\t\t\tJacksonModule jacksonModule = new JacksonModule(JacksonOption.RESPECT_JSONPROPERTY_REQUIRED);\n\t\t\tSwagger2Module swaggerModule = new Swagger2Module();\n\n\t\t\tSchemaGeneratorConfigBuilder configBuilder = new SchemaGeneratorConfigBuilder(SchemaVersion.DRAFT_2020_12,\n\t\t\t\t\tOptionPreset.PLAIN_JSON)\n\t\t\t\t.with(Option.EXTRA_OPEN_API_FORMAT_VALUES)\n\t\t\t\t.with(Option.PLAIN_DEFINITION_KEYS)\n\t\t\t\t.with(swaggerModule)\n\t\t\t\t.with(jacksonModule);\n\n\t\t\tSchemaGeneratorConfig config = configBuilder.build();\n\t\t\tSchemaGenerator generator = new SchemaGenerator(config);\n\t\t\tSCHEMA_GENERATOR_CACHE.compareAndSet(null, generator);\n\t\t}\n\n\t\tObjectNode node = SCHEMA_GENERATOR_CACHE.get().generateSchema(clazz);\n\t\tif (toUpperCaseTypeValues) { // Required for OpenAPI 3.0 (at least Vertex AI\n\t\t\t\t\t\t\t\t\t\t// version of it).\n\t\t\ttoUpperCaseTypeValues(node);\n\t\t}\n\n\t\treturn node.toPrettyString();",
                "is_abstract": "",
                "class_name": "ModelOptionsUtils",
                "annotations": []
            },
            {
                "name": "toUpperCaseTypeValues",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (node == null) {\n\t\t\treturn;\n\t\t}\n\t\tif (node.isObject()) {\n\t\t\tnode.fields().forEachRemaining(entry -> {\n\t\t\t\tJsonNode value = entry.getValue();\n\t\t\t\tif (value.isObject()) {\n\t\t\t\t\ttoUpperCaseTypeValues((ObjectNode) value);\n\t\t\t\t}\n\t\t\t\telse if (value.isArray()) {\n\t\t\t\t\t((ArrayNode) value).elements().forEachRemaining(element -> {\n\t\t\t\t\t\tif (element.isObject() || element.isArray()) {\n\t\t\t\t\t\t\ttoUpperCaseTypeValues((ObjectNode) element);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telse if (value.isTextual() && entry.getKey().equals(\"type\")) {\n\t\t\t\t\tString oldValue = ((ObjectNode) node).get(\"type\").asText();\n\t\t\t\t\t((ObjectNode) node).put(\"type\", oldValue.toUpperCase());\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\telse if (node.isArray()) {\n\t\t\tnode.elements().forEachRemaining(element -> {\n\t\t\t\tif (element.isObject() || element.isArray()) {\n\t\t\t\t\ttoUpperCaseTypeValues((ObjectNode) element);\n\t\t\t\t}\n\t\t\t});\n\t\t}",
                "is_abstract": "",
                "class_name": "ModelOptionsUtils",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/model/ModelResult.java",
        "class_names": [],
        "imports": "",
        "package_import_paths": {
            "org.springframework.ai.model.getOutput": "org.springframework.ai.model.getOutput",
            "org.springframework.ai.model.getMetadat": "org.springframework.ai.model.getMetadat"
        },
        "package": "package org.springframework.ai.model;",
        "property_declarations": [],
        "functions": [
            {
                "name": "getOutput",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "getMetadata",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/model/ModelOptions.java",
        "class_names": [],
        "imports": "",
        "package_import_paths": {},
        "package": "package org.springframework.ai.model;",
        "property_declarations": [],
        "functions": []
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/model/ModelRequest.java",
        "class_names": [],
        "imports": "",
        "package_import_paths": {
            "org.springframework.ai.model.getInstructions": "org.springframework.ai.model.getInstructions",
            "org.springframework.ai.model.getOptions": "org.springframework.ai.model.getOptions"
        },
        "package": "package org.springframework.ai.model;",
        "property_declarations": [],
        "functions": [
            {
                "name": "getInstructions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "getOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/model/ModelClient.java",
        "class_names": [],
        "imports": "",
        "package_import_paths": {
            "org.springframework.ai.model.call": "org.springframework.ai.model.call"
        },
        "package": "package org.springframework.ai.model;",
        "property_declarations": [],
        "functions": [
            {
                "name": "call",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/model/StreamingModelClient.java",
        "class_names": [],
        "imports": "import reactor.core.publisher.Flux;",
        "package_import_paths": {
            "org.springframework.ai.model.stream": "org.springframework.ai.model.stream"
        },
        "package": "package org.springframework.ai.model;",
        "property_declarations": [],
        "functions": [
            {
                "name": "stream",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/model/package-info.java",
        "class_names": [],
        "imports": "",
        "package_import_paths": {},
        "package": "package org.springframework.ai.model;",
        "property_declarations": [],
        "functions": []
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/model/ModelResponse.java",
        "class_names": [],
        "imports": "import java.util.List;",
        "package_import_paths": {
            "org.springframework.ai.model.getResult": "org.springframework.ai.model.getResult",
            "org.springframework.ai.model.getResults": "org.springframework.ai.model.getResults",
            "org.springframework.ai.model.getMetadat": "org.springframework.ai.model.getMetadat"
        },
        "package": "package org.springframework.ai.model;",
        "property_declarations": [],
        "functions": [
            {
                "name": "getResult",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "getResults",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "getMetadata",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/model/function/FunctionCallback.java",
        "class_names": [],
        "imports": "",
        "package_import_paths": {
            "org.springframework.ai.model.function.getNam": "org.springframework.ai.model.function.getNam",
            "org.springframework.ai.model.function.getDescription": "org.springframework.ai.model.function.getDescription",
            "org.springframework.ai.model.function.getInputTypeSchem": "org.springframework.ai.model.function.getInputTypeSchem",
            "org.springframework.ai.model.function.call": "org.springframework.ai.model.function.call"
        },
        "package": "package org.springframework.ai.model.function;",
        "property_declarations": [],
        "functions": [
            {
                "name": "getName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "getDescription",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "getInputTypeSchema",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "call",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/model/function/TypeResolverHelper.java",
        "class_names": [
            "TypeResolverHelper"
        ],
        "imports": "import java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.GenericArrayType;\nimport java.util.function.Function;\nimport java.lang.reflect.Type;\nimport net.jodah.typetools.TypeResolver;",
        "package_import_paths": {
            "org.springframework.ai.model.function.TypeResolverHelper": "org.springframework.ai.model.function.TypeResolverHelper",
            "org.springframework.ai.model.function.getFunctionInputClass": "org.springframework.ai.model.function.getFunctionInputClass",
            "org.springframework.ai.model.function.getFunctionOutputClass": "org.springframework.ai.model.function.getFunctionOutputClass",
            "org.springframework.ai.model.function.getFunctionArgumentClass": "org.springframework.ai.model.function.getFunctionArgumentClass",
            "org.springframework.ai.model.function.getFunctionInputTy": "org.springframework.ai.model.function.getFunctionInputTy",
            "org.springframework.ai.model.function.getFunctionOutputTy": "org.springframework.ai.model.function.getFunctionOutputTy",
            "org.springframework.ai.model.function.getFunctionArgumentTy": "org.springframework.ai.model.function.getFunctionArgumentTy",
            "org.springframework.ai.model.function.toRawClass": "org.springframework.ai.model.function.toRawClass"
        },
        "package": "package org.springframework.ai.model.function;",
        "property_declarations": [],
        "functions": [
            {
                "name": "getFunctionInputClass",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return getFunctionArgumentClass(functionClass, 0);",
                "is_abstract": "",
                "class_name": "TypeResolverHelper",
                "annotations": []
            },
            {
                "name": "getFunctionOutputClass",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return getFunctionArgumentClass(functionClass, 1);",
                "is_abstract": "",
                "class_name": "TypeResolverHelper",
                "annotations": []
            },
            {
                "name": "getFunctionArgumentClass",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Type type = TypeResolver.reify(Function.class, functionClass);\n\n\t\tvar argumentType = type instanceof ParameterizedType\n\t\t\t\t? ((ParameterizedType) type).getActualTypeArguments()[argumentIndex] : Object.class;\n\n\t\treturn toRawClass(argumentType);",
                "is_abstract": "",
                "class_name": "TypeResolverHelper",
                "annotations": []
            },
            {
                "name": "getFunctionInputType",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return getFunctionArgumentType(functionClass, 0);",
                "is_abstract": "",
                "class_name": "TypeResolverHelper",
                "annotations": []
            },
            {
                "name": "getFunctionOutputType",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return getFunctionArgumentType(functionClass, 1);",
                "is_abstract": "",
                "class_name": "TypeResolverHelper",
                "annotations": []
            },
            {
                "name": "getFunctionArgumentType",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Type functionType = TypeResolver.reify(Function.class, functionClass);\n\t\treturn getFunctionArgumentType(functionType, argumentIndex);",
                "is_abstract": "",
                "class_name": "TypeResolverHelper",
                "annotations": []
            },
            {
                "name": "toRawClass",
                "parameters": [
                    ""
                ],
                "return_type": "null",
                "body": "return type != null\n\t\t\t\t? TypeResolver.resolveRawClass(type instanceof GenericArrayType ? type : TypeResolver.reify(type), null)\n\t\t\t\t: null;",
                "is_abstract": "",
                "class_name": "TypeResolverHelper",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/model/function/FunctionCallingOptionsBuilder.java",
        "class_names": [
            "FunctionCallingOptionsBuilder",
            "PortableFunctionCallingOptions"
        ],
        "imports": "import java.util.ArrayList;\nimport java.util.List;\nimport org.springframework.util.Assert;\nimport org.springframework.ai.chat.prompt.ChatOptions;\nimport java.util.Set;\nimport java.util.HashSet;",
        "package_import_paths": {
            "org.springframework.ai.model.function.FunctionCallingOptionsBuilder": "org.springframework.ai.model.function.FunctionCallingOptionsBuilder",
            "org.springframework.ai.model.function.PortableFunctionCallingOptions": "org.springframework.ai.model.function.PortableFunctionCallingOptions",
            "org.springframework.ai.model.function.withFunctionCallbacks": "org.springframework.ai.model.function.withFunctionCallbacks",
            "org.springframework.ai.model.function.withFunctionCallb": "org.springframework.ai.model.function.withFunctionCallb",
            "org.springframework.ai.model.function.withFunctions": "org.springframework.ai.model.function.withFunctions",
            "org.springframework.ai.model.function.withFunction": "org.springframework.ai.model.function.withFunction",
            "org.springframework.ai.model.function.withTemperatur": "org.springframework.ai.model.function.withTemperatur",
            "org.springframework.ai.model.function.withTopP": "org.springframework.ai.model.function.withTopP",
            "org.springframework.ai.model.function.withTopK": "org.springframework.ai.model.function.withTopK",
            "org.springframework.ai.model.function.build": "org.springframework.ai.model.function.build",
            "org.springframework.ai.model.function.getFunctionCallbacks": "org.springframework.ai.model.function.getFunctionCallbacks",
            "org.springframework.ai.model.function.setFunctionCallbacks": "org.springframework.ai.model.function.setFunctionCallbacks",
            "org.springframework.ai.model.function.getFunctions": "org.springframework.ai.model.function.getFunctions",
            "org.springframework.ai.model.function.setFunctions": "org.springframework.ai.model.function.setFunctions",
            "org.springframework.ai.model.function.getTemperatur": "org.springframework.ai.model.function.getTemperatur",
            "org.springframework.ai.model.function.setTemperatur": "org.springframework.ai.model.function.setTemperatur",
            "org.springframework.ai.model.function.getTopP": "org.springframework.ai.model.function.getTopP",
            "org.springframework.ai.model.function.setTopP": "org.springframework.ai.model.function.setTopP",
            "org.springframework.ai.model.function.getTopK": "org.springframework.ai.model.function.getTopK",
            "org.springframework.ai.model.function.setTopK": "org.springframework.ai.model.function.setTopK",
            "org.springframework.ai.model.function.options": "org.springframework.ai.model.function.options",
            "org.springframework.ai.model.function.functionCallbacks": "org.springframework.ai.model.function.functionCallbacks",
            "org.springframework.ai.model.function.functions": "org.springframework.ai.model.function.functions",
            "org.springframework.ai.model.function.temperatur": "org.springframework.ai.model.function.temperatur",
            "org.springframework.ai.model.function.topP": "org.springframework.ai.model.function.topP",
            "org.springframework.ai.model.function.topK": "org.springframework.ai.model.function.topK"
        },
        "package": "package org.springframework.ai.model.function;",
        "property_declarations": [
            "private List<FunctionCallback> functionCallbacks = new ArrayList<>();",
            "private Set<String> functions = new HashSet<>();",
            "private Float topP;",
            "private final PortableFunctionCallingOptions options;",
            "private Float temperature;",
            "private Integer topK;"
        ],
        "functions": [
            {
                "name": "withFunctionCallbacks",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.setFunctionCallbacks(functionCallbacks);\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "FunctionCallingOptionsBuilder",
                "annotations": []
            },
            {
                "name": "withFunctionCallback",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(functionCallback, \"FunctionCallback must not be null\");\n\t\tthis.options.getFunctionCallbacks().add(functionCallback);\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "FunctionCallingOptionsBuilder",
                "annotations": []
            },
            {
                "name": "withFunctions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.setFunctions(functions);\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "FunctionCallingOptionsBuilder",
                "annotations": []
            },
            {
                "name": "withFunction",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(function, \"Function must not be null\");\n\t\tthis.options.getFunctions().add(function);\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "FunctionCallingOptionsBuilder",
                "annotations": []
            },
            {
                "name": "withTemperature",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.setTemperature(temperature);\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "FunctionCallingOptionsBuilder",
                "annotations": []
            },
            {
                "name": "withTopP",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.setTopP(topP);\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "FunctionCallingOptionsBuilder",
                "annotations": []
            },
            {
                "name": "withTopK",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.setTopK(topK);\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "FunctionCallingOptionsBuilder",
                "annotations": []
            },
            {
                "name": "build",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.options;",
                "is_abstract": "",
                "class_name": "FunctionCallingOptionsBuilder",
                "annotations": []
            },
            {
                "name": "getFunctionCallbacks",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.functionCallbacks;",
                "is_abstract": "",
                "class_name": "FunctionCallingOptionsBuilder PortableFunctionCallingOptions",
                "annotations": []
            },
            {
                "name": "setFunctionCallbacks",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(functionCallbacks, \"FunctionCallbacks must not be null\");\n\t\t\tthis.functionCallbacks = functionCallbacks;",
                "is_abstract": "",
                "class_name": "FunctionCallingOptionsBuilder PortableFunctionCallingOptions",
                "annotations": []
            },
            {
                "name": "getFunctions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.functions;",
                "is_abstract": "",
                "class_name": "FunctionCallingOptionsBuilder PortableFunctionCallingOptions",
                "annotations": []
            },
            {
                "name": "setFunctions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(functions, \"Functions must not be null\");\n\t\t\tthis.functions = functions;",
                "is_abstract": "",
                "class_name": "FunctionCallingOptionsBuilder PortableFunctionCallingOptions",
                "annotations": []
            },
            {
                "name": "getTemperature",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.temperature;",
                "is_abstract": "",
                "class_name": "FunctionCallingOptionsBuilder PortableFunctionCallingOptions",
                "annotations": []
            },
            {
                "name": "setTemperature",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.temperature = temperature;",
                "is_abstract": "",
                "class_name": "FunctionCallingOptionsBuilder PortableFunctionCallingOptions",
                "annotations": []
            },
            {
                "name": "getTopP",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.topP;",
                "is_abstract": "",
                "class_name": "FunctionCallingOptionsBuilder PortableFunctionCallingOptions",
                "annotations": []
            },
            {
                "name": "setTopP",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.topP = topP;",
                "is_abstract": "",
                "class_name": "FunctionCallingOptionsBuilder PortableFunctionCallingOptions",
                "annotations": []
            },
            {
                "name": "getTopK",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.topK;",
                "is_abstract": "",
                "class_name": "FunctionCallingOptionsBuilder PortableFunctionCallingOptions",
                "annotations": []
            },
            {
                "name": "setTopK",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.topK = topK;",
                "is_abstract": "",
                "class_name": "FunctionCallingOptionsBuilder PortableFunctionCallingOptions",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/model/function/AbstractFunctionCallback.java",
        "class_names": [
            "AbstractFunctionCallback"
        ],
        "imports": "import java.util.function.Function;\nimport org.springframework.util.Assert;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;",
        "package_import_paths": {
            "org.springframework.ai.model.function.AbstractFunctionCallb": "org.springframework.ai.model.function.AbstractFunctionCallb",
            "org.springframework.ai.model.function.getNam": "org.springframework.ai.model.function.getNam",
            "org.springframework.ai.model.function.getDescription": "org.springframework.ai.model.function.getDescription",
            "org.springframework.ai.model.function.getInputTypeSchem": "org.springframework.ai.model.function.getInputTypeSchem",
            "org.springframework.ai.model.function.call": "org.springframework.ai.model.function.call",
            "org.springframework.ai.model.function.fromJson": "org.springframework.ai.model.function.fromJson",
            "org.springframework.ai.model.function.hashCod": "org.springframework.ai.model.function.hashCod",
            "org.springframework.ai.model.function.equals": "org.springframework.ai.model.function.equals",
            "org.springframework.ai.model.function.nam": "org.springframework.ai.model.function.nam",
            "org.springframework.ai.model.function.description": "org.springframework.ai.model.function.description",
            "org.springframework.ai.model.function.inputTy": "org.springframework.ai.model.function.inputTy",
            "org.springframework.ai.model.function.inputTypeSchem": "org.springframework.ai.model.function.inputTypeSchem",
            "org.springframework.ai.model.function.objectMapper": "org.springframework.ai.model.function.objectMapper",
            "org.springframework.ai.model.function.responseConverter": "org.springframework.ai.model.function.responseConverter"
        },
        "package": "package org.springframework.ai.model.function;",
        "property_declarations": [
            "private final Function<O, String> responseConverter;",
            "private final String inputTypeSchema;",
            "private final Class<I> inputType;",
            "private final ObjectMapper objectMapper;",
            "private final String description;",
            "private final String name;"
        ],
        "functions": [
            {
                "name": "getName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.name;",
                "is_abstract": "",
                "class_name": "AbstractFunctionCallback",
                "annotations": []
            },
            {
                "name": "getDescription",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.description;",
                "is_abstract": "",
                "class_name": "AbstractFunctionCallback",
                "annotations": []
            },
            {
                "name": "getInputTypeSchema",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.inputTypeSchema;",
                "is_abstract": "",
                "class_name": "AbstractFunctionCallback",
                "annotations": []
            },
            {
                "name": "call",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// Convert the tool calls JSON arguments into a Java function request object.\n\t\tI request = fromJson(functionArguments, inputType);\n\n\t\t// extend conversation with function response.\n\t\treturn this.andThen(this.responseConverter).apply(request);",
                "is_abstract": "",
                "class_name": "AbstractFunctionCallback",
                "annotations": []
            },
            {
                "name": "fromJson",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "try {\n\t\t\treturn this.objectMapper.readValue(json, targetClass);\n\t\t}\n\t\tcatch (JsonProcessingException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}",
                "is_abstract": "",
                "class_name": "AbstractFunctionCallback",
                "annotations": []
            },
            {
                "name": "hashCode",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "final int prime = 31;\n\t\tint result = 1;\n\t\tresult = prime * result + ((name == null) ? 0 : name.hashCode());\n\t\tresult = prime * result + ((description == null) ? 0 : description.hashCode());\n\t\tresult = prime * result + ((inputType == null) ? 0 : inputType.hashCode());\n\t\treturn result;",
                "is_abstract": "",
                "class_name": "AbstractFunctionCallback",
                "annotations": []
            },
            {
                "name": "equals",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (this == obj)\n\t\t\treturn true;\n\t\tif (obj == null)\n\t\t\treturn false;\n\t\tif (getClass() != obj.getClass())\n\t\t\treturn false;\n\t\tAbstractFunctionCallback other = (AbstractFunctionCallback) obj;\n\t\tif (name == null) {\n\t\t\tif (other.name != null)\n\t\t\t\treturn false;\n\t\t}\n\t\telse if (!name.equals(other.name))\n\t\t\treturn false;\n\t\tif (description == null) {\n\t\t\tif (other.description != null)\n\t\t\t\treturn false;\n\t\t}\n\t\telse if (!description.equals(other.description))\n\t\t\treturn false;\n\t\tif (inputType == null) {\n\t\t\tif (other.inputType != null)\n\t\t\t\treturn false;\n\t\t}\n\t\telse if (!inputType.equals(other.inputType))\n\t\t\treturn false;\n\t\treturn true;",
                "is_abstract": "",
                "class_name": "AbstractFunctionCallback",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/model/function/FunctionCallbackContext.java",
        "class_names": [
            "FunctionCallbackContext"
        ],
        "imports": "import org.springframework.context.ApplicationContext;\nimport org.springframework.context.ApplicationContextAware;\nimport org.springframework.cloud.function.context.config.FunctionContextUtils;\nimport org.springframework.lang.NonNull;\nimport org.springframework.lang.Nullable;\nimport org.springframework.beans.BeansException;\nimport org.springframework.ai.model.function.FunctionCallbackWrapper.Builder.SchemaType;\nimport java.util.function.Function;\nimport org.springframework.context.support.GenericApplicationContext;\nimport org.springframework.context.annotation.Description;\nimport java.lang.reflect.Type;\nimport com.fasterxml.jackson.annotation.JsonClassDescription;\nimport org.springframework.util.StringUtils;\nimport org.springframework.cloud.function.context.catalog.FunctionTypeUtils;",
        "package_import_paths": {
            "org.springframework.ai.model.function.FunctionCallbackContext": "org.springframework.ai.model.function.FunctionCallbackContext",
            "org.springframework.ai.model.function.setSchemaTy": "org.springframework.ai.model.function.setSchemaTy",
            "org.springframework.ai.model.function.setApplicationContext": "org.springframework.ai.model.function.setApplicationContext",
            "org.springframework.ai.model.function.SuppressWarnings": "org.springframework.ai.model.function.SuppressWarnings",
            "org.springframework.ai.model.function.applicationContext": "org.springframework.ai.model.function.applicationContext",
            "org.springframework.ai.model.function.schemaTy": "org.springframework.ai.model.function.schemaTy"
        },
        "package": "package org.springframework.ai.model.function;",
        "property_declarations": [
            "private GenericApplicationContext applicationContext;",
            "private SchemaType schemaType = SchemaType.JSON_SCHEMA;"
        ],
        "functions": [
            {
                "name": "setSchemaType",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.schemaType = schemaType;",
                "is_abstract": "",
                "class_name": "FunctionCallbackContext",
                "annotations": []
            },
            {
                "name": "setApplicationContext",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.applicationContext = (GenericApplicationContext) applicationContext;",
                "is_abstract": "",
                "class_name": "FunctionCallbackContext",
                "annotations": []
            },
            {
                "name": "SuppressWarnings",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "\"rawtypes\", \"unchecked\" })\n\tpublic FunctionCallback getFunctionCallback(@NonNull String beanName, @Nullable String defaultDescription) {\n\n\t\tType beanType = FunctionContextUtils.findType(this.applicationContext.getBeanFactory(), beanName);\n\n\t\tif (beanType == null) {\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\"Functional bean with name: \" + beanName + \" does not exist in the context.\");\n\t\t}\n\n\t\tif (!Function.class.isAssignableFrom(FunctionTypeUtils.getRawType(beanType))) {\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\"Function call Bean must be of type Function. Found: \" + beanType.getTypeName());\n\t\t}\n\n\t\tType functionInputType = TypeResolverHelper.getFunctionArgumentType(beanType, 0);\n\n\t\tClass<?> functionInputClass = FunctionTypeUtils.getRawType(functionInputType);\n\t\tString functionName = beanName;\n\t\tString functionDescription = defaultDescription;\n\n\t\tif (!StringUtils.hasText(functionDescription)) {\n\t\t\t// Look for a Description annotation on the bean\n\t\t\tDescription descriptionAnnotation = applicationContext.findAnnotationOnBean(beanName, Description.class);\n\n\t\t\tif (descriptionAnnotation != null) {\n\t\t\t\tfunctionDescription = descriptionAnnotation.value();\n\t\t\t}\n\n\t\t\tif (!StringUtils.hasText(functionDescription)) {\n\t\t\t\t// Look for a JsonClassDescription annotation on the input class\n\t\t\t\tJsonClassDescription jsonClassDescriptionAnnotation = functionInputClass\n\t\t\t\t\t.getAnnotation(JsonClassDescription.class);\n\t\t\t\tif (jsonClassDescriptionAnnotation != null) {\n\t\t\t\t\tfunctionDescription = jsonClassDescriptionAnnotation.value();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!StringUtils.hasText(functionDescription)) {\n\t\t\t\tthrow new IllegalStateException(\"Could not determine function description.\"\n\t\t\t\t\t\t+ \"Please provide a description either as a default parameter, via @Description annotation on the bean \"\n\t\t\t\t\t\t+ \"or @JsonClassDescription annotation on the input class.\");\n\t\t\t}\n\t\t}\n\n\t\tObject bean = this.applicationContext.getBean(beanName);\n\n\t\tif (bean instanceof Function<?, ?> function) {\n\t\t\treturn FunctionCallbackWrapper.builder(function)\n\t\t\t\t.withName(functionName)\n\t\t\t\t.withSchemaType(this.schemaType)\n\t\t\t\t.withDescription(functionDescription)\n\t\t\t\t.withInputType(functionInputClass)\n\t\t\t\t.build();\n\t\t}\n\t\telse {\n\t\t\tthrow new IllegalArgumentException(\"Bean must be of type Function\");\n\t\t}",
                "is_abstract": "",
                "class_name": "FunctionCallbackContext",
                "annotations": [
                    "@SuppressWarnings({ \"rawtypes\", \"unchecked\" })"
                ]
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/model/function/AbstractFunctionCallSupport.java",
        "class_names": [
            "AbstractFunctionCallSupport"
        ],
        "imports": "import java.util.ArrayList;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.List;\nimport org.springframework.util.CollectionUtils;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.HashSet;",
        "package_import_paths": {
            "org.springframework.ai.model.function.AbstractFunctionCallSupport": "org.springframework.ai.model.function.AbstractFunctionCallSupport",
            "org.springframework.ai.model.function.getFunctionCallbackRegister": "org.springframework.ai.model.function.getFunctionCallbackRegister",
            "org.springframework.ai.model.function.handleFunctionCallbackConfigurations": "org.springframework.ai.model.function.handleFunctionCallbackConfigurations",
            "org.springframework.ai.model.function.resolveFunctionCallbacks": "org.springframework.ai.model.function.resolveFunctionCallbacks",
            "org.springframework.ai.model.function.callWithFunctionSupport": "org.springframework.ai.model.function.callWithFunctionSupport",
            "org.springframework.ai.model.function.handleFunctionCallOrReturn": "org.springframework.ai.model.function.handleFunctionCallOrReturn",
            "org.springframework.ai.model.function.doCreateToolResponseRequest": "org.springframework.ai.model.function.doCreateToolResponseRequest",
            "org.springframework.ai.model.function.doGetUserMessages": "org.springframework.ai.model.function.doGetUserMessages",
            "org.springframework.ai.model.function.doGetToolResponseMess": "org.springframework.ai.model.function.doGetToolResponseMess",
            "org.springframework.ai.model.function.doChatCompletion": "org.springframework.ai.model.function.doChatCompletion",
            "org.springframework.ai.model.function.isToolFunctionCall": "org.springframework.ai.model.function.isToolFunctionCall",
            "org.springframework.ai.model.function.IS_RUNTIME_CALL": "org.springframework.ai.model.function.IS_RUNTIME_CALL",
            "org.springframework.ai.model.function.functionCallbackRegister": "org.springframework.ai.model.function.functionCallbackRegister",
            "org.springframework.ai.model.function.functionCallbackContext": "org.springframework.ai.model.function.functionCallbackContext"
        },
        "package": "package org.springframework.ai.model.function;",
        "property_declarations": [
            "protected final Map<String, FunctionCallback> functionCallbackRegister = new ConcurrentHashMap<>();",
            "protected final static boolean IS_RUNTIME_CALL = true;",
            "protected final FunctionCallbackContext functionCallbackContext;"
        ],
        "functions": [
            {
                "name": "getFunctionCallbackRegister",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.functionCallbackRegister;",
                "is_abstract": "",
                "class_name": "AbstractFunctionCallSupport",
                "annotations": []
            },
            {
                "name": "handleFunctionCallbackConfigurations",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Set<String> functionToCall = new HashSet<>();\n\n\t\tif (options != null) {\n\t\t\tif (!CollectionUtils.isEmpty(options.getFunctionCallbacks())) {\n\t\t\t\toptions.getFunctionCallbacks().stream().forEach(functionCallback -> {\n\n\t\t\t\t\t// Register the tool callback.\n\t\t\t\t\tif (isRuntimeCall) {\n\t\t\t\t\t\tthis.functionCallbackRegister.put(functionCallback.getName(), functionCallback);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthis.functionCallbackRegister.putIfAbsent(functionCallback.getName(), functionCallback);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Automatically enable the function, usually from prompt callback.\n\t\t\t\t\tif (isRuntimeCall) {\n\t\t\t\t\t\tfunctionToCall.add(functionCallback.getName());\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Add the explicitly enabled functions.\n\t\t\tif (!CollectionUtils.isEmpty(options.getFunctions())) {\n\t\t\t\tfunctionToCall.addAll(options.getFunctions());\n\t\t\t}\n\t\t}\n\n\t\treturn functionToCall;",
                "is_abstract": "",
                "class_name": "AbstractFunctionCallSupport",
                "annotations": []
            },
            {
                "name": "resolveFunctionCallbacks",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "List<FunctionCallback> retrievedFunctionCallbacks = new ArrayList<>();\n\n\t\tfor (String functionName : functionNames) {\n\t\t\tif (!this.functionCallbackRegister.containsKey(functionName)) {\n\n\t\t\t\tif (this.functionCallbackContext != null) {\n\t\t\t\t\tFunctionCallback functionCallback = this.functionCallbackContext.getFunctionCallback(functionName,\n\t\t\t\t\t\t\tnull);\n\t\t\t\t\tif (functionCallback != null) {\n\t\t\t\t\t\tthis.functionCallbackRegister.put(functionName, functionCallback);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\t\t\t\"No function callback [\" + functionName + \"] fund in tht FunctionCallbackContext\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthrow new IllegalStateException(\"No function callback found for name: \" + functionName);\n\t\t\t\t}\n\t\t\t}\n\t\t\tFunctionCallback functionCallback = this.functionCallbackRegister.get(functionName);\n\n\t\t\tretrievedFunctionCallbacks.add(functionCallback);\n\t\t}\n\n\t\treturn retrievedFunctionCallbacks;",
                "is_abstract": "",
                "class_name": "AbstractFunctionCallSupport",
                "annotations": []
            },
            {
                "name": "callWithFunctionSupport",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Resp response = this.doChatCompletion(request);\n\t\treturn this.handleFunctionCallOrReturn(request, response);",
                "is_abstract": "",
                "class_name": "AbstractFunctionCallSupport",
                "annotations": []
            },
            {
                "name": "handleFunctionCallOrReturn",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (!this.isToolFunctionCall(response)) {\n\t\t\treturn response;\n\t\t}\n\n\t\t// The chat completion tool call requires the complete conversation\n\t\t// history. Including the initial user message.\n\t\tList<Msg> conversationHistory = new ArrayList<>();\n\n\t\tconversationHistory.addAll(this.doGetUserMessages(request));\n\n\t\tMsg responseMessage = this.doGetToolResponseMessage(response);\n\n\t\t// Add the assistant response to the message conversation history.\n\t\tconversationHistory.add(responseMessage);\n\n\t\tReq newRequest = this.doCreateToolResponseRequest(request, responseMessage, conversationHistory);\n\n\t\treturn this.callWithFunctionSupport(newRequest);",
                "is_abstract": "",
                "class_name": "AbstractFunctionCallSupport",
                "annotations": []
            },
            {
                "name": "doCreateToolResponseRequest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "AbstractFunctionCallSupport",
                "annotations": []
            },
            {
                "name": "doGetUserMessages",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "AbstractFunctionCallSupport",
                "annotations": []
            },
            {
                "name": "doGetToolResponseMessage",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "AbstractFunctionCallSupport",
                "annotations": []
            },
            {
                "name": "doChatCompletion",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "AbstractFunctionCallSupport",
                "annotations": []
            },
            {
                "name": "isToolFunctionCall",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "AbstractFunctionCallSupport",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/model/function/FunctionCallingOptions.java",
        "class_names": [],
        "imports": "import java.util.Set;\nimport java.util.List;",
        "package_import_paths": {
            "org.springframework.ai.model.function.getFunctionCallbacks": "org.springframework.ai.model.function.getFunctionCallbacks",
            "org.springframework.ai.model.function.setFunctionCallbacks": "org.springframework.ai.model.function.setFunctionCallbacks",
            "org.springframework.ai.model.function.getFunctions": "org.springframework.ai.model.function.getFunctions",
            "org.springframework.ai.model.function.setFunctions": "org.springframework.ai.model.function.setFunctions",
            "org.springframework.ai.model.function.builder": "org.springframework.ai.model.function.builder"
        },
        "package": "package org.springframework.ai.model.function;",
        "property_declarations": [],
        "functions": [
            {
                "name": "getFunctionCallbacks",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "setFunctionCallbacks",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "getFunctions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "setFunctions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "builder",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new FunctionCallingOptionsBuilder();",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/model/function/FunctionCallbackWrapper.java",
        "class_names": [
            "Builder",
            "FunctionCallbackWrapper"
        ],
        "imports": "import com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;\nimport org.springframework.util.Assert;\nimport com.fasterxml.jackson.databind.SerializationFeature;\nimport java.util.function.Function;\nimport org.springframework.ai.model.ModelOptionsUtils;\nimport com.fasterxml.jackson.databind.DeserializationFeature;",
        "package_import_paths": {
            "org.springframework.ai.model.function.FunctionCallbackWrapper": "org.springframework.ai.model.function.FunctionCallbackWrapper",
            "org.springframework.ai.model.function.Builder": "org.springframework.ai.model.function.Builder",
            "org.springframework.ai.model.function.SuppressWarnings": "org.springframework.ai.model.function.SuppressWarnings",
            "org.springframework.ai.model.function.apply": "org.springframework.ai.model.function.apply",
            "org.springframework.ai.model.function.builder": "org.springframework.ai.model.function.builder",
            "org.springframework.ai.model.function.withNam": "org.springframework.ai.model.function.withNam",
            "org.springframework.ai.model.function.withDescription": "org.springframework.ai.model.function.withDescription",
            "org.springframework.ai.model.function.withResponseConverter": "org.springframework.ai.model.function.withResponseConverter",
            "org.springframework.ai.model.function.withInputTypeSchem": "org.springframework.ai.model.function.withInputTypeSchem",
            "org.springframework.ai.model.function.withObjectMapper": "org.springframework.ai.model.function.withObjectMapper",
            "org.springframework.ai.model.function.withSchemaTy": "org.springframework.ai.model.function.withSchemaTy",
            "org.springframework.ai.model.function.build": "org.springframework.ai.model.function.build",
            "org.springframework.ai.model.function.function": "org.springframework.ai.model.function.function",
            "org.springframework.ai.model.function.nam": "org.springframework.ai.model.function.nam",
            "org.springframework.ai.model.function.description": "org.springframework.ai.model.function.description",
            "org.springframework.ai.model.function.inputTy": "org.springframework.ai.model.function.inputTy",
            "org.springframework.ai.model.function.schemaTy": "org.springframework.ai.model.function.schemaTy",
            "org.springframework.ai.model.function.ModelOptionsUtils": "org.springframework.ai.model.function.ModelOptionsUtils",
            "org.springframework.ai.model.function.inputTypeSchem": "org.springframework.ai.model.function.inputTypeSchem",
            "org.springframework.ai.model.function.objectMapper": "org.springframework.ai.model.function.objectMapper"
        },
        "package": "package org.springframework.ai.model.function;",
        "property_declarations": [
            "private Class<I> inputType;",
            "private String description;",
            "private Function<O, String> responseConverter = (response) -> ModelOptionsUtils.toJsonString(response);",
            "private ObjectMapper objectMapper = new ObjectMapper()\n\t\t\t.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)\n\t\t\t.disable(SerializationFeature.FAIL_ON_EMPTY_BEANS)\n\t\t\t.registerModule(new JavaTimeModule());",
            "private String inputTypeSchema;",
            "private final Function<I, O> function;",
            "private String name;",
            "private SchemaType schemaType = SchemaType.JSON_SCHEMA;"
        ],
        "functions": [
            {
                "name": "SuppressWarnings",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return (Class<I>) TypeResolverHelper.getFunctionInputClass((Class<Function<I, O>>) function.getClass());",
                "is_abstract": "",
                "class_name": "FunctionCallbackWrapper",
                "annotations": [
                    "@SuppressWarnings(\"unchecked\")"
                ]
            },
            {
                "name": "apply",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.function.apply(input);",
                "is_abstract": "",
                "class_name": "FunctionCallbackWrapper",
                "annotations": []
            },
            {
                "name": "builder",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Builder<>(function);",
                "is_abstract": "",
                "class_name": "FunctionCallbackWrapper",
                "annotations": []
            },
            {
                "name": "withName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.hasText(name, \"Name must not be empty\");\n\t\t\tthis.name = name;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "FunctionCallbackWrapper Builder",
                "annotations": []
            },
            {
                "name": "withDescription",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.hasText(description, \"Description must not be empty\");\n\t\t\tthis.description = description;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "FunctionCallbackWrapper Builder",
                "annotations": []
            },
            {
                "name": "withResponseConverter",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(responseConverter, \"ResponseConverter must not be null\");\n\t\t\tthis.responseConverter = responseConverter;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "FunctionCallbackWrapper Builder",
                "annotations": []
            },
            {
                "name": "withInputTypeSchema",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.hasText(inputTypeSchema, \"InputTypeSchema must not be empty\");\n\t\t\tthis.inputTypeSchema = inputTypeSchema;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "FunctionCallbackWrapper Builder",
                "annotations": []
            },
            {
                "name": "withObjectMapper",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(objectMapper, \"ObjectMapper must not be null\");\n\t\t\tthis.objectMapper = objectMapper;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "FunctionCallbackWrapper Builder",
                "annotations": []
            },
            {
                "name": "withSchemaType",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(schemaType, \"SchemaType must not be null\");\n\t\t\tthis.schemaType = schemaType;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "FunctionCallbackWrapper Builder",
                "annotations": []
            },
            {
                "name": "build",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.hasText(this.name, \"Name must not be empty\");\n\t\t\tAssert.hasText(this.description, \"Description must not be empty\");\n\t\t\tAssert.notNull(this.function, \"Function must not be null\");\n\t\t\tAssert.notNull(this.responseConverter, \"ResponseConverter must not be null\");\n\t\t\tAssert.notNull(this.objectMapper, \"ObjectMapper must not be null\");\n\n\t\t\tif (this.inputType == null) {\n\t\t\t\tthis.inputType = resolveInputType(this.function);\n\t\t\t}\n\n\t\t\tif (this.inputTypeSchema == null) {\n\t\t\t\tboolean upperCaseTypeValues = this.schemaType == SchemaType.OPEN_API_SCHEMA;\n\t\t\t\tthis.inputTypeSchema = ModelOptionsUtils.getJsonSchema(this.inputType, upperCaseTypeValues);\n\t\t\t}\n\n\t\t\treturn new FunctionCallbackWrapper<>(this.name, this.description, this.inputTypeSchema, this.inputType,\n\t\t\t\t\tthis.responseConverter, this.objectMapper, this.function);",
                "is_abstract": "",
                "class_name": "FunctionCallbackWrapper Builder",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/aot/AiRuntimeHints.java",
        "class_names": [
            "AiRuntimeHints"
        ],
        "imports": "import java.util.stream.Collectors;\nimport org.slf4j.LoggerFactory;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport java.util.*;\nimport org.slf4j.Logger;\nimport org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider;\nimport org.springframework.aot.hint.TypeReference;\nimport java.lang.reflect.Executable;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport org.springframework.core.type.filter.TypeFilter;\nimport org.springframework.core.type.filter.AnnotationTypeFilter;",
        "package_import_paths": {
            "org.springframework.ai.aot.AiRuntimeHints": "org.springframework.ai.aot.AiRuntimeHints",
            "org.springframework.ai.aot.findJsonAnnotatedClassesInP": "org.springframework.ai.aot.findJsonAnnotatedClassesInP",
            "org.springframework.ai.aot.findClassesInP": "org.springframework.ai.aot.findClassesInP",
            "org.springframework.ai.aot.hasJacksonAnnotations": "org.springframework.ai.aot.hasJacksonAnnotations",
            "org.springframework.ai.aot.discoverJacksonAnnotatedTypesFromRootTy": "org.springframework.ai.aot.discoverJacksonAnnotatedTypesFromRootTy",
            "org.springframework.ai.aot.lo": "org.springframework.ai.aot.lo"
        },
        "package": "package org.springframework.ai.aot;",
        "property_declarations": [
            "private static final Logger log = LoggerFactory.getLogger(AiRuntimeHints.class);"
        ],
        "functions": [
            {
                "name": "findJsonAnnotatedClassesInPackage",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var annotationTypeFilter = new AnnotationTypeFilter(JsonInclude.class);\n\t\tTypeFilter typeFilter = (metadataReader, metadataReaderFactory) -> {\n\t\t\ttry {\n\t\t\t\tvar clazz = Class.forName(metadataReader.getClassMetadata().getClassName());\n\t\t\t\treturn annotationTypeFilter.match(metadataReader, metadataReaderFactory)\n\t\t\t\t\t\t|| !discoverJacksonAnnotatedTypesFromRootType(clazz).isEmpty();\n\t\t\t}\n\t\t\tcatch (ClassNotFoundException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t};\n\n\t\treturn findClassesInPackage(packageName, typeFilter);",
                "is_abstract": "",
                "class_name": "AiRuntimeHints",
                "annotations": []
            },
            {
                "name": "findClassesInPackage",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var classPathScanningCandidateComponentProvider = new ClassPathScanningCandidateComponentProvider(false);\n\t\tclassPathScanningCandidateComponentProvider.addIncludeFilter(typeFilter);\n\t\treturn classPathScanningCandidateComponentProvider//\n\t\t\t.findCandidateComponents(packageName)//\n\t\t\t.stream()//\n\t\t\t.map(bd -> TypeReference.of(Objects.requireNonNull(bd.getBeanClassName())))//\n\t\t\t.peek(tr -> {\n\t\t\t\tif (log.isDebugEnabled())\n\t\t\t\t\tlog.debug(\"registering [\" + tr.getName() + ']');\n\t\t\t})\n\t\t\t.collect(Collectors.toUnmodifiableSet());",
                "is_abstract": "",
                "class_name": "AiRuntimeHints",
                "annotations": []
            },
            {
                "name": "hasJacksonAnnotations",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var hasAnnotation = false;\n\t\tvar annotationsToFind = Set.of(JsonProperty.class, JsonInclude.class);\n\t\tfor (var annotationToFind : annotationsToFind) {\n\n\t\t\tif (type.isAnnotationPresent(annotationToFind)) {\n\t\t\t\thasAnnotation = true;\n\t\t\t}\n\n\t\t\tvar executables = new HashSet<Executable>();\n\t\t\texecutables.addAll(Set.of(type.getMethods()));\n\t\t\texecutables.addAll(Set.of(type.getConstructors()));\n\t\t\texecutables.addAll(Set.of(type.getDeclaredConstructors()));\n\n\t\t\tfor (var executable : executables) {\n\t\t\t\t//\n\t\t\t\tif (executable.isAnnotationPresent(annotationToFind)) {\n\t\t\t\t\thasAnnotation = true;\n\t\t\t\t}\n\n\t\t\t\t///\n\t\t\t\tfor (var p : executable.getParameters()) {\n\t\t\t\t\tif (p.isAnnotationPresent(annotationToFind)) {\n\t\t\t\t\t\thasAnnotation = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (type.getRecordComponents() != null) {\n\t\t\t\tfor (var r : type.getRecordComponents()) {\n\t\t\t\t\tif (r.isAnnotationPresent(annotationToFind)) {\n\t\t\t\t\t\thasAnnotation = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (var f : type.getFields()) {\n\t\t\t\tif (f.isAnnotationPresent(annotationToFind)) {\n\t\t\t\t\thasAnnotation = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn hasAnnotation;",
                "is_abstract": "",
                "class_name": "AiRuntimeHints",
                "annotations": []
            },
            {
                "name": "discoverJacksonAnnotatedTypesFromRootType",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var jsonTypes = new HashSet<Class<?>>();\n\t\tvar classesToInspect = new HashSet<Class<?>>();\n\t\tclassesToInspect.add(type);\n\t\tclassesToInspect.addAll(Arrays.asList(type.getNestMembers()));\n\t\tfor (var n : classesToInspect) {\n\t\t\tif (hasJacksonAnnotations(n)) {\n\t\t\t\tjsonTypes.add(n);\n\t\t\t}\n\t\t}\n\t\treturn jsonTypes;",
                "is_abstract": "",
                "class_name": "AiRuntimeHints",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/aot/SpringAiCoreRuntimeHints.java",
        "class_names": [
            "SpringAiCoreRuntimeHints"
        ],
        "imports": "import org.springframework.lang.Nullable;\nimport org.springframework.core.io.ClassPathResource;\nimport org.springframework.aot.hint.RuntimeHints;\nimport java.util.Set;\nimport org.springframework.aot.hint.RuntimeHintsRegistrar;\nimport org.springframework.ai.model.function.FunctionCallback;\nimport java.lang.reflect.Method;\nimport org.springframework.ai.model.function.FunctionCallbackContext;\nimport org.springframework.lang.NonNull;\nimport org.springframework.util.ReflectionUtils;\nimport org.springframework.ai.chat.messages.*;\nimport org.springframework.aot.hint.ExecutableMode;\nimport org.springframework.ai.model.function.FunctionCallbackWrapper;",
        "package_import_paths": {
            "org.springframework.ai.aot.SpringAiCoreRuntimeHints": "org.springframework.ai.aot.SpringAiCoreRuntimeHints",
            "org.springframework.ai.aot.registerHints": "org.springframework.ai.aot.registerHints"
        },
        "package": "package org.springframework.ai.aot;",
        "property_declarations": [],
        "functions": [
            {
                "name": "registerHints",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var chatTypes = Set.of(AbstractMessage.class, AssistantMessage.class, FunctionMessage.class, Message.class,\n\t\t\t\tMessageType.class, UserMessage.class, SystemMessage.class, FunctionCallbackContext.class,\n\t\t\t\tFunctionCallback.class, FunctionCallbackWrapper.class);\n\t\tfor (var c : chatTypes) {\n\t\t\thints.reflection().registerType(c);\n\t\t}\n\n\t\tMethod getDescription = ReflectionUtils.findMethod(FunctionCallback.class, \"getDescription\");\n\t\thints.reflection().registerMethod(getDescription, ExecutableMode.INVOKE);\n\t\tMethod getInputTypeSchema = ReflectionUtils.findMethod(FunctionCallback.class, \"getInputTypeSchema\");\n\t\thints.reflection().registerMethod(getInputTypeSchema, ExecutableMode.INVOKE);\n\t\tMethod getName = ReflectionUtils.findMethod(FunctionCallback.class, \"getName\");\n\t\thints.reflection().registerMethod(getName, ExecutableMode.INVOKE);\n\n\t\tfor (var r : Set.of(\"antlr4/org/springframework/ai/vectorstore/filter/antlr4/Filters.g4\",\n\t\t\t\t\"embedding/embedding-model-dimensions.properties\"))\n\t\t\thints.resources().registerResource(new ClassPathResource(r));",
                "is_abstract": "",
                "class_name": "SpringAiCoreRuntimeHints",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/aot/KnuddelsRuntimeHints.java",
        "class_names": [
            "KnuddelsRuntimeHints"
        ],
        "imports": "import org.springframework.core.io.ClassPathResource;\nimport org.springframework.aot.hint.RuntimeHints;\nimport org.springframework.aot.hint.RuntimeHintsRegistrar;",
        "package_import_paths": {
            "org.springframework.ai.aot.KnuddelsRuntimeHints": "org.springframework.ai.aot.KnuddelsRuntimeHints",
            "org.springframework.ai.aot.registerHints": "org.springframework.ai.aot.registerHints"
        },
        "package": "package org.springframework.ai.aot;",
        "property_declarations": [],
        "functions": [
            {
                "name": "registerHints",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "hints.resources().registerResource(new ClassPathResource(\"/com/knuddels/jtokkit/cl100k_base.tiktoken\"));",
                "is_abstract": "",
                "class_name": "KnuddelsRuntimeHints",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/vectorstore/VectorStore.java",
        "class_names": [],
        "imports": "import org.springframework.ai.document.Document;\nimport java.util.Optional;\nimport java.util.List;\nimport org.springframework.ai.document.DocumentWriter;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.add": "org.springframework.ai.vectorstore.add",
            "org.springframework.ai.vectorstore.accept": "org.springframework.ai.vectorstore.accept",
            "org.springframework.ai.vectorstore.delet": "org.springframework.ai.vectorstore.delet",
            "org.springframework.ai.vectorstore.similaritySearch": "org.springframework.ai.vectorstore.similaritySearch"
        },
        "package": "package org.springframework.ai.vectorstore;",
        "property_declarations": [],
        "functions": [
            {
                "name": "add",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "accept",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "add(documents);",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "delete",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "similaritySearch",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/vectorstore/SimpleVectorStore.java",
        "class_names": [
            "Similarity",
            "SimpleVectorStore",
            "EmbeddingMath"
        ],
        "imports": "import com.fasterxml.jackson.core.JsonProcessingException;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.io.*;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.slf4j.LoggerFactory;\nimport java.util.*;\nimport org.slf4j.Logger;\nimport org.springframework.ai.document.Document;\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport org.springframework.core.io.Resource;\nimport com.fasterxml.jackson.databind.ObjectWriter;\nimport java.nio.charset.StandardCharsets;\nimport org.springframework.ai.embedding.EmbeddingClient;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.SimpleVectorStor": "org.springframework.ai.vectorstore.SimpleVectorStor",
            "org.springframework.ai.vectorstore.Similarity": "org.springframework.ai.vectorstore.Similarity",
            "org.springframework.ai.vectorstore.EmbeddingMath": "org.springframework.ai.vectorstore.EmbeddingMath",
            "org.springframework.ai.vectorstore.add": "org.springframework.ai.vectorstore.add",
            "org.springframework.ai.vectorstore.delet": "org.springframework.ai.vectorstore.delet",
            "org.springframework.ai.vectorstore.similaritySearch": "org.springframework.ai.vectorstore.similaritySearch",
            "org.springframework.ai.vectorstore.sav": "org.springframework.ai.vectorstore.sav",
            "org.springframework.ai.vectorstore.load": "org.springframework.ai.vectorstore.load",
            "org.springframework.ai.vectorstore.getVectorDbAsJson": "org.springframework.ai.vectorstore.getVectorDbAsJson",
            "org.springframework.ai.vectorstore.getUserQueryEmbeddin": "org.springframework.ai.vectorstore.getUserQueryEmbeddin",
            "org.springframework.ai.vectorstore.cosineSimilarity": "org.springframework.ai.vectorstore.cosineSimilarity",
            "org.springframework.ai.vectorstore.dotProduct": "org.springframework.ai.vectorstore.dotProduct",
            "org.springframework.ai.vectorstore.norm": "org.springframework.ai.vectorstore.norm",
            "org.springframework.ai.vectorstore.logger": "org.springframework.ai.vectorstore.logger",
            "org.springframework.ai.vectorstore.stor": "org.springframework.ai.vectorstore.stor",
            "org.springframework.ai.vectorstore.embeddingClient": "org.springframework.ai.vectorstore.embeddingClient",
            "org.springframework.ai.vectorstore.key": "org.springframework.ai.vectorstore.key",
            "org.springframework.ai.vectorstore.scor": "org.springframework.ai.vectorstore.scor"
        },
        "package": "package org.springframework.ai.vectorstore;",
        "property_declarations": [
            "private static final Logger logger = LoggerFactory.getLogger(SimpleVectorStore.class);",
            "private double score;",
            "protected EmbeddingClient embeddingClient;",
            "private String key;",
            "protected Map<String, Document> store = new ConcurrentHashMap<>();"
        ],
        "functions": [
            {
                "name": "add",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "for (Document document : documents) {\n\t\t\tlogger.info(\"Calling EmbeddingClient for document id = {}\", document.getId());\n\t\t\tList<Double> embedding = this.embeddingClient.embed(document);\n\t\t\tdocument.setEmbedding(embedding);\n\t\t\tthis.store.put(document.getId(), document);\n\t\t}",
                "is_abstract": "",
                "class_name": "SimpleVectorStore",
                "annotations": []
            },
            {
                "name": "delete",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "for (String id : idList) {\n\t\t\tthis.store.remove(id);\n\t\t}\n\t\treturn Optional.of(true);",
                "is_abstract": "",
                "class_name": "SimpleVectorStore",
                "annotations": []
            },
            {
                "name": "similaritySearch",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (request.getFilterExpression() != null) {\n\t\t\tthrow new UnsupportedOperationException(\n\t\t\t\t\t\"The [\" + this.getClass() + \"] doesn't support metadata filtering!\");\n\t\t}\n\n\t\tList<Double> userQueryEmbedding = getUserQueryEmbedding(request.getQuery());\n\t\treturn this.store.values()\n\t\t\t.stream()\n\t\t\t.map(entry -> new Similarity(entry.getId(),\n\t\t\t\t\tEmbeddingMath.cosineSimilarity(userQueryEmbedding, entry.getEmbedding())))\n\t\t\t.filter(s -> s.score >= request.getSimilarityThreshold())\n\t\t\t.sorted(Comparator.<Similarity>comparingDouble(s -> s.score).reversed())\n\t\t\t.limit(request.getTopK())\n\t\t\t.map(s -> this.store.get(s.key))\n\t\t\t.toList();",
                "is_abstract": "",
                "class_name": "SimpleVectorStore",
                "annotations": []
            },
            {
                "name": "save",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String json = getVectorDbAsJson();\n\t\ttry {\n\t\t\tif (!file.exists()) {\n\t\t\t\tlogger.info(\"Creating new vector store file: {}\", file);\n\t\t\t\tfile.createNewFile();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlogger.info(\"Overwriting existing vector store file: {}\", file);\n\t\t\t}\n\t\t\ttry (OutputStream stream = new FileOutputStream(file);\n\t\t\t\t\tWriter writer = new OutputStreamWriter(stream, StandardCharsets.UTF_8)) {\n\t\t\t\twriter.write(json);\n\t\t\t\twriter.flush();\n\t\t\t}\n\t\t}\n\t\tcatch (IOException ex) {\n\t\t\tlogger.error(\"IOException occurred while saving vector store file.\", ex);\n\t\t\tthrow new RuntimeException(ex);\n\t\t}\n\t\tcatch (SecurityException ex) {\n\t\t\tlogger.error(\"SecurityException occurred while saving vector store file.\", ex);\n\t\t\tthrow new RuntimeException(ex);\n\t\t}\n\t\tcatch (NullPointerException ex) {\n\t\t\tlogger.error(\"NullPointerException occurred while saving vector store file.\", ex);\n\t\t\tthrow new RuntimeException(ex);\n\t\t}",
                "is_abstract": "",
                "class_name": "SimpleVectorStore",
                "annotations": []
            },
            {
                "name": "load",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "TypeReference<HashMap<String, Document>> typeRef = new TypeReference<>() {\n\t\t};\n\t\tObjectMapper objectMapper = new ObjectMapper();\n\t\ttry {\n\t\t\tMap<String, Document> deserializedMap = objectMapper.readValue(file, typeRef);\n\t\t\tthis.store = deserializedMap;\n\t\t}\n\t\tcatch (IOException ex) {\n\t\t\tthrow new RuntimeException(ex);\n\t\t}",
                "is_abstract": "",
                "class_name": "SimpleVectorStore",
                "annotations": []
            },
            {
                "name": "getVectorDbAsJson",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "ObjectMapper objectMapper = new ObjectMapper();\n\t\tObjectWriter objectWriter = objectMapper.writerWithDefaultPrettyPrinter();\n\t\tString json;\n\t\ttry {\n\t\t\tjson = objectWriter.writeValueAsString(this.store);\n\t\t}\n\t\tcatch (JsonProcessingException e) {\n\t\t\tthrow new RuntimeException(\"Error serializing documentMap to JSON.\", e);\n\t\t}\n\t\treturn json;",
                "is_abstract": "",
                "class_name": "SimpleVectorStore",
                "annotations": []
            },
            {
                "name": "getUserQueryEmbedding",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.embeddingClient.embed(query);",
                "is_abstract": "",
                "class_name": "SimpleVectorStore",
                "annotations": []
            },
            {
                "name": "cosineSimilarity",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (vectorX == null || vectorY == null) {\n\t\t\t\tthrow new RuntimeException(\"Vectors must not be null\");\n\t\t\t}\n\t\t\tif (vectorX.size() != vectorY.size()) {\n\t\t\t\tthrow new IllegalArgumentException(\"Vectors lengths must be equal\");\n\t\t\t}\n\n\t\t\tdouble dotProduct = dotProduct(vectorX, vectorY);\n\t\t\tdouble normX = norm(vectorX);\n\t\t\tdouble normY = norm(vectorY);\n\n\t\t\tif (normX == 0 || normY == 0) {\n\t\t\t\tthrow new IllegalArgumentException(\"Vectors cannot have zero norm\");\n\t\t\t}\n\n\t\t\treturn dotProduct / (Math.sqrt(normX) * Math.sqrt(normY));",
                "is_abstract": "",
                "class_name": "SimpleVectorStore Similarity EmbeddingMath",
                "annotations": []
            },
            {
                "name": "dotProduct",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (vectorX.size() != vectorY.size()) {\n\t\t\t\tthrow new IllegalArgumentException(\"Vectors lengths must be equal\");\n\t\t\t}\n\n\t\t\tdouble result = 0;\n\t\t\tfor (int i = 0; i < vectorX.size(); ++i) {\n\t\t\t\tresult += vectorX.get(i) * vectorY.get(i);\n\t\t\t}\n\n\t\t\treturn result;",
                "is_abstract": "",
                "class_name": "SimpleVectorStore Similarity EmbeddingMath",
                "annotations": []
            },
            {
                "name": "norm",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return dotProduct(vector, vector);",
                "is_abstract": "",
                "class_name": "SimpleVectorStore Similarity EmbeddingMath",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/vectorstore/SearchRequest.java",
        "class_names": [
            "SearchRequest"
        ],
        "imports": "import org.springframework.ai.vectorstore.filter.Filter;\nimport org.springframework.util.Assert;\nimport org.springframework.ai.vectorstore.filter.FilterExpressionTextParser;\nimport org.springframework.ai.document.Document;\nimport org.springframework.ai.vectorstore.filter.FilterExpressionBuilder;\nimport java.util.Objects;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.SearchRequest": "org.springframework.ai.vectorstore.SearchRequest",
            "org.springframework.ai.vectorstore.query": "org.springframework.ai.vectorstore.query",
            "org.springframework.ai.vectorstore.defaults": "org.springframework.ai.vectorstore.defaults",
            "org.springframework.ai.vectorstore.from": "org.springframework.ai.vectorstore.from",
            "org.springframework.ai.vectorstore.withQuery": "org.springframework.ai.vectorstore.withQuery",
            "org.springframework.ai.vectorstore.withTopK": "org.springframework.ai.vectorstore.withTopK",
            "org.springframework.ai.vectorstore.withSimilarityThreshold": "org.springframework.ai.vectorstore.withSimilarityThreshold",
            "org.springframework.ai.vectorstore.withSimilarityThresholdAll": "org.springframework.ai.vectorstore.withSimilarityThresholdAll",
            "org.springframework.ai.vectorstore.withFilterExpression": "org.springframework.ai.vectorstore.withFilterExpression",
            "org.springframework.ai.vectorstore.getQuery": "org.springframework.ai.vectorstore.getQuery",
            "org.springframework.ai.vectorstore.getTopK": "org.springframework.ai.vectorstore.getTopK",
            "org.springframework.ai.vectorstore.getSimilarityThreshold": "org.springframework.ai.vectorstore.getSimilarityThreshold",
            "org.springframework.ai.vectorstore.getFilterExpression": "org.springframework.ai.vectorstore.getFilterExpression",
            "org.springframework.ai.vectorstore.hasFilterExpression": "org.springframework.ai.vectorstore.hasFilterExpression",
            "org.springframework.ai.vectorstore.toStrin": "org.springframework.ai.vectorstore.toStrin",
            "org.springframework.ai.vectorstore.equals": "org.springframework.ai.vectorstore.equals",
            "org.springframework.ai.vectorstore.hashCod": "org.springframework.ai.vectorstore.hashCod",
            "org.springframework.ai.vectorstore.SIMILARITY_THRESHOLD_ACCEPT_ALL": "org.springframework.ai.vectorstore.SIMILARITY_THRESHOLD_ACCEPT_ALL",
            "org.springframework.ai.vectorstore.DEFAULT_TOP_K": "org.springframework.ai.vectorstore.DEFAULT_TOP_K",
            "org.springframework.ai.vectorstore.topK": "org.springframework.ai.vectorstore.topK",
            "org.springframework.ai.vectorstore.similarityThreshold": "org.springframework.ai.vectorstore.similarityThreshold",
            "org.springframework.ai.vectorstore.Filter": "org.springframework.ai.vectorstore.Filter"
        },
        "package": "package org.springframework.ai.vectorstore;",
        "property_declarations": [
            "private double similarityThreshold = SIMILARITY_THRESHOLD_ACCEPT_ALL;",
            "public String query;",
            "private int topK = DEFAULT_TOP_K;",
            "public static final double SIMILARITY_THRESHOLD_ACCEPT_ALL = 0.0;",
            "private Filter.Expression filterExpression;",
            "public static final int DEFAULT_TOP_K = 4;"
        ],
        "functions": [
            {
                "name": "query",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(query, \"Query can not be null.\");\n\t\treturn new SearchRequest(query);",
                "is_abstract": "",
                "class_name": "SearchRequest",
                "annotations": []
            },
            {
                "name": "defaults",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new SearchRequest(\"\");",
                "is_abstract": "",
                "class_name": "SearchRequest",
                "annotations": []
            },
            {
                "name": "from",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new SearchRequest(originalSearchRequest.getQuery()).withTopK(originalSearchRequest.getTopK())\n\t\t\t.withSimilarityThreshold(originalSearchRequest.getSimilarityThreshold())\n\t\t\t.withFilterExpression(originalSearchRequest.getFilterExpression());",
                "is_abstract": "",
                "class_name": "SearchRequest",
                "annotations": []
            },
            {
                "name": "withQuery",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(query, \"Query can not be null.\");\n\t\tthis.query = query;\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "SearchRequest",
                "annotations": []
            },
            {
                "name": "withTopK",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.isTrue(topK >= 0, \"TopK should be positive.\");\n\t\tthis.topK = topK;\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "SearchRequest",
                "annotations": []
            },
            {
                "name": "withSimilarityThreshold",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.isTrue(threshold >= 0 && threshold <= 1, \"Similarity threshold must be in [0,1] range.\");\n\t\tthis.similarityThreshold = threshold;\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "SearchRequest",
                "annotations": []
            },
            {
                "name": "withSimilarityThresholdAll",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return withSimilarityThreshold(SIMILARITY_THRESHOLD_ACCEPT_ALL);",
                "is_abstract": "",
                "class_name": "SearchRequest",
                "annotations": []
            },
            {
                "name": "withFilterExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.filterExpression = expression;\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "SearchRequest",
                "annotations": []
            },
            {
                "name": "withFilterExpression",
                "parameters": [
                    ""
                ],
                "return_type": "null",
                "body": "this.filterExpression = (textExpression != null) ? new FilterExpressionTextParser().parse(textExpression)\n\t\t\t\t: null;\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "SearchRequest",
                "annotations": []
            },
            {
                "name": "getQuery",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return query;",
                "is_abstract": "",
                "class_name": "SearchRequest",
                "annotations": []
            },
            {
                "name": "getTopK",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return topK;",
                "is_abstract": "",
                "class_name": "SearchRequest",
                "annotations": []
            },
            {
                "name": "getSimilarityThreshold",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return similarityThreshold;",
                "is_abstract": "",
                "class_name": "SearchRequest",
                "annotations": []
            },
            {
                "name": "getFilterExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return filterExpression;",
                "is_abstract": "",
                "class_name": "SearchRequest",
                "annotations": []
            },
            {
                "name": "hasFilterExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.filterExpression != null;",
                "is_abstract": "",
                "class_name": "SearchRequest",
                "annotations": []
            },
            {
                "name": "toString",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return \"SearchRequest{\" + \"query='\" + query + '\\'' + \", topK=\" + topK + \", similarityThreshold=\"\n\t\t\t\t+ similarityThreshold + \", filterExpression=\" + filterExpression + '}';",
                "is_abstract": "",
                "class_name": "SearchRequest",
                "annotations": []
            },
            {
                "name": "equals",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (this == o)\n\t\t\treturn true;\n\t\tif (o == null || getClass() != o.getClass())\n\t\t\treturn false;\n\t\tSearchRequest that = (SearchRequest) o;\n\t\treturn topK == that.topK && Double.compare(that.similarityThreshold, similarityThreshold) == 0\n\t\t\t\t&& Objects.equals(query, that.query) && Objects.equals(filterExpression, that.filterExpression);",
                "is_abstract": "",
                "class_name": "SearchRequest",
                "annotations": []
            },
            {
                "name": "hashCode",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return Objects.hash(query, topK, similarityThreshold, filterExpression);",
                "is_abstract": "",
                "class_name": "SearchRequest",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/vectorstore/filter/FilterExpressionBuilder.java",
        "class_names": [
            "FilterExpressionBuilder"
        ],
        "imports": "import org.springframework.ai.vectorstore.filter.Filter.Key;\nimport java.util.List;\nimport org.springframework.ai.vectorstore.filter.Filter.Value;\nimport org.springframework.ai.vectorstore.filter.Filter.ExpressionType;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.filter.FilterExpressionBuilder": "org.springframework.ai.vectorstore.filter.FilterExpressionBuilder",
            "org.springframework.ai.vectorstore.filter.build": "org.springframework.ai.vectorstore.filter.build",
            "org.springframework.ai.vectorstore.filter.eq": "org.springframework.ai.vectorstore.filter.eq",
            "org.springframework.ai.vectorstore.filter.n": "org.springframework.ai.vectorstore.filter.n",
            "org.springframework.ai.vectorstore.filter.gt": "org.springframework.ai.vectorstore.filter.gt",
            "org.springframework.ai.vectorstore.filter.lt": "org.springframework.ai.vectorstore.filter.lt",
            "org.springframework.ai.vectorstore.filter.and": "org.springframework.ai.vectorstore.filter.and",
            "org.springframework.ai.vectorstore.filter.or": "org.springframework.ai.vectorstore.filter.or",
            "org.springframework.ai.vectorstore.filter.in": "org.springframework.ai.vectorstore.filter.in",
            "org.springframework.ai.vectorstore.filter.nin": "org.springframework.ai.vectorstore.filter.nin",
            "org.springframework.ai.vectorstore.filter.grou": "org.springframework.ai.vectorstore.filter.grou",
            "org.springframework.ai.vectorstore.filter.not": "org.springframework.ai.vectorstore.filter.not"
        },
        "package": "package org.springframework.ai.vectorstore.filter;",
        "property_declarations": [],
        "functions": [
            {
                "name": "build",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (expression instanceof Filter.Group group) {\n\t\t\t\t// Remove the top-level grouping.\n\t\t\t\treturn group.content();\n\t\t\t}\n\t\t\telse if (expression instanceof Filter.Expression exp) {\n\t\t\t\treturn exp;\n\t\t\t}\n\t\t\tthrow new RuntimeException(\"Invalid expression: \" + expression);",
                "is_abstract": "",
                "class_name": "FilterExpressionBuilder",
                "annotations": []
            },
            {
                "name": "eq",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Op(new Filter.Expression(ExpressionType.EQ, new Key(key), new Value(value)));",
                "is_abstract": "",
                "class_name": "FilterExpressionBuilder",
                "annotations": []
            },
            {
                "name": "ne",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Op(new Filter.Expression(ExpressionType.NE, new Key(key), new Value(value)));",
                "is_abstract": "",
                "class_name": "FilterExpressionBuilder",
                "annotations": []
            },
            {
                "name": "gt",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Op(new Filter.Expression(ExpressionType.GT, new Key(key), new Value(value)));",
                "is_abstract": "",
                "class_name": "FilterExpressionBuilder",
                "annotations": []
            },
            {
                "name": "gte",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Op(new Filter.Expression(ExpressionType.GTE, new Key(key), new Value(value)));",
                "is_abstract": "",
                "class_name": "FilterExpressionBuilder",
                "annotations": []
            },
            {
                "name": "lt",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Op(new Filter.Expression(ExpressionType.LT, new Key(key), new Value(value)));",
                "is_abstract": "",
                "class_name": "FilterExpressionBuilder",
                "annotations": []
            },
            {
                "name": "lte",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Op(new Filter.Expression(ExpressionType.LTE, new Key(key), new Value(value)));",
                "is_abstract": "",
                "class_name": "FilterExpressionBuilder",
                "annotations": []
            },
            {
                "name": "and",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Op(new Filter.Expression(ExpressionType.AND, left.expression, right.expression));",
                "is_abstract": "",
                "class_name": "FilterExpressionBuilder",
                "annotations": []
            },
            {
                "name": "or",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Op(new Filter.Expression(ExpressionType.OR, left.expression, right.expression));",
                "is_abstract": "",
                "class_name": "FilterExpressionBuilder",
                "annotations": []
            },
            {
                "name": "in",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.in(key, List.of(values));",
                "is_abstract": "",
                "class_name": "FilterExpressionBuilder",
                "annotations": []
            },
            {
                "name": "nin",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.nin(key, List.of(values));",
                "is_abstract": "",
                "class_name": "FilterExpressionBuilder",
                "annotations": []
            },
            {
                "name": "group",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Op(new Filter.Group(content.build()));",
                "is_abstract": "",
                "class_name": "FilterExpressionBuilder",
                "annotations": []
            },
            {
                "name": "not",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Op(new Filter.Expression(ExpressionType.NOT, content.expression, null));",
                "is_abstract": "",
                "class_name": "FilterExpressionBuilder",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/vectorstore/filter/FilterHelper.java",
        "class_names": [
            "FilterHelper"
        ],
        "imports": "import java.util.ArrayList;\nimport java.util.List;\nimport org.springframework.ai.vectorstore.filter.Filter.ExpressionType;\nimport org.springframework.util.Assert;\nimport org.springframework.ai.vectorstore.filter.Filter.Expression;\nimport java.util.Map;\nimport org.springframework.ai.vectorstore.filter.Filter.Operand;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.filter.FilterHelper": "org.springframework.ai.vectorstore.filter.FilterHelper",
            "org.springframework.ai.vectorstore.filter.negat": "org.springframework.ai.vectorstore.filter.negat",
            "org.springframework.ai.vectorstore.filter.expandIn": "org.springframework.ai.vectorstore.filter.expandIn",
            "org.springframework.ai.vectorstore.filter.expandNin": "org.springframework.ai.vectorstore.filter.expandNin",
            "org.springframework.ai.vectorstore.filter.expandInNinExpressions": "org.springframework.ai.vectorstore.filter.expandInNinExpressions",
            "org.springframework.ai.vectorstore.filter.aggregat": "org.springframework.ai.vectorstore.filter.aggregat",
            "org.springframework.ai.vectorstore.filter.TYPE_NEGATION_MAP": "org.springframework.ai.vectorstore.filter.TYPE_NEGATION_MAP"
        },
        "package": "package org.springframework.ai.vectorstore.filter;",
        "property_declarations": [
            "private final static Map<ExpressionType, ExpressionType> TYPE_NEGATION_MAP = Map.of(ExpressionType.AND,\n\t\t\tExpressionType.OR, ExpressionType.OR, ExpressionType.AND, ExpressionType.EQ, ExpressionType.NE,\n\t\t\tExpressionType.NE, ExpressionType.EQ, ExpressionType.GT, ExpressionType.LTE, ExpressionType.GTE,\n\t\t\tExpressionType.LT, ExpressionType.LT, ExpressionType.GTE, ExpressionType.LTE, ExpressionType.GT,\n\t\t\tExpressionType.IN, ExpressionType.NIN, ExpressionType.NIN, ExpressionType.IN);"
        ],
        "functions": [
            {
                "name": "negate",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (operand instanceof Filter.Group group) {\n\t\t\tOperand inEx = negate(group.content());\n\t\t\tif (inEx instanceof Filter.Group inEx2) {\n\t\t\t\tinEx = inEx2.content();\n\t\t\t}\n\t\t\treturn new Filter.Group((Expression) inEx);\n\t\t}\n\t\telse if (operand instanceof Filter.Expression exp) {\n\t\t\tswitch (exp.type()) {\n\t\t\t\tcase NOT: // NOT(NOT(a)) = a\n\t\t\t\t\treturn negate(exp.left());\n\t\t\t\tcase AND: // NOT(a AND b) = NOT(a) OR NOT(b)\n\t\t\t\tcase OR: // NOT(a OR b) = NOT(a) AND NOT(b)\n\t\t\t\t\treturn new Filter.Expression(TYPE_NEGATION_MAP.get(exp.type()), negate(exp.left()),\n\t\t\t\t\t\t\tnegate(exp.right()));\n\t\t\t\tcase EQ: // NOT(e EQ b) = e NE b\n\t\t\t\tcase NE: // NOT(e NE b) = e EQ b\n\t\t\t\tcase GT: // NOT(e GT b) = e LTE b\n\t\t\t\tcase GTE: // NOT(e GTE b) = e LT b\n\t\t\t\tcase LT: // NOT(e LT b) = e GTE b\n\t\t\t\tcase LTE: // NOT(e LTE b) = e GT b\n\t\t\t\t\treturn new Filter.Expression(TYPE_NEGATION_MAP.get(exp.type()), exp.left(), exp.right());\n\t\t\t\tcase IN: // NOT(e IN [...]) = e NIN [...]\n\t\t\t\tcase NIN: // NOT(e NIN [...]) = e IN [...]\n\t\t\t\t\treturn new Filter.Expression(TYPE_NEGATION_MAP.get(exp.type()), exp.left(), exp.right());\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new IllegalArgumentException(\"Unknown expression type: \" + exp.type());\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthrow new IllegalArgumentException(\"Can not negate operand of type: \" + operand.getClass());\n\t\t}",
                "is_abstract": "",
                "class_name": "FilterHelper",
                "annotations": []
            },
            {
                "name": "expandIn",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.isTrue(exp.type() == ExpressionType.IN, \"Expected IN expressions but was: \" + exp.type());\n\t\texpandInNinExpressions(ExpressionType.OR, ExpressionType.EQ, exp, context, filterExpressionConverter);",
                "is_abstract": "",
                "class_name": "FilterHelper",
                "annotations": []
            },
            {
                "name": "expandNin",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.isTrue(exp.type() == ExpressionType.NIN, \"Expected NIN expressions but was: \" + exp.type());\n\t\texpandInNinExpressions(ExpressionType.AND, ExpressionType.NE, exp, context, filterExpressionConverter);",
                "is_abstract": "",
                "class_name": "FilterHelper",
                "annotations": []
            },
            {
                "name": "expandInNinExpressions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (exp.right() instanceof Filter.Value value) {\n\t\t\tif (value.value() instanceof List list) {\n\t\t\t\t// 1. foo IN [\"bar1\", \"bar2\", \"bar3\"] is equivalent to foo == \"bar1\" ||\n\t\t\t\t// foo == \"bar2\" || foo == \"bar3\"\n\t\t\t\t// or equivalent to OR(foo == \"bar1\" OR( foo == \"bar2\" OR(foo == \"bar3\")))\n\t\t\t\t// 2. foo IN [\"bar1\", \"bar2\", \"bar3\"] is equivalent to foo != \"bar1\" &&\n\t\t\t\t// foo != \"bar2\" && foo != \"bar3\"\n\t\t\t\t// or equivalent to AND(foo != \"bar1\" AND( foo != \"bar2\" OR(foo !=\n\t\t\t\t// \"bar3\")))\n\t\t\t\tList<Filter.Expression> eqExprs = new ArrayList<>();\n\t\t\t\tfor (Object o : list) {\n\t\t\t\t\teqExprs.add(new Filter.Expression(innerExpressionType, exp.left(), new Filter.Value(o)));\n\t\t\t\t}\n\t\t\t\tcontext.append(expressionConverter.convertExpression(aggregate(outerExpressionType, eqExprs)));\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// 1. foo IN [\"bar\"] is equivalent to foo == \"BAR\"\n\t\t\t\t// 2. foo NIN [\"bar\"] is equivalent to foo != \"BAR\"\n\t\t\t\tcontext.append(expressionConverter\n\t\t\t\t\t.convertExpression(new Filter.Expression(innerExpressionType, exp.left(), exp.right())));\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\"Filter IN right expression should be of Filter.Value type but was \" + exp.right().getClass());\n\t\t}",
                "is_abstract": "",
                "class_name": "FilterHelper",
                "annotations": []
            },
            {
                "name": "aggregate",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (expressions.size() == 1) {\n\t\t\treturn expressions.get(0);\n\t\t}\n\t\treturn new Filter.Expression(aggregateType, expressions.get(0),\n\t\t\t\taggregate(aggregateType, expressions.subList(1, expressions.size())));",
                "is_abstract": "",
                "class_name": "FilterHelper",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/vectorstore/filter/FilterExpressionConverter.java",
        "class_names": [],
        "imports": "",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.filter.convertExpression": "org.springframework.ai.vectorstore.filter.convertExpression"
        },
        "package": "package org.springframework.ai.vectorstore.filter;",
        "property_declarations": [],
        "functions": [
            {
                "name": "convertExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/vectorstore/filter/FilterExpressionTextParser.java",
        "class_names": [
            "FilterExpressionTextParser",
            "DescriptiveErrorListener",
            "FilterExpressionVisitor",
            "FilterExpressionParseException"
        ],
        "imports": "import java.util.stream.Collectors;\nimport org.antlr.v4.runtime.ANTLRErrorStrategy;\nimport java.util.List;\nimport java.util.concurrent.CopyOnWriteArrayList;\nimport org.antlr.v4.runtime.misc.ParseCancellationException;\nimport org.antlr.v4.runtime.RecognitionException;\nimport java.util.concurrent.ConcurrentHashMap;\nimport org.springframework.ai.vectorstore.filter.antlr4.FiltersParser;\nimport java.util.Map;\nimport org.springframework.ai.vectorstore.filter.antlr4.FiltersParser.NotExpressionContext;\nimport org.antlr.v4.runtime.CommonTokenStream;\nimport org.antlr.v4.runtime.BaseErrorListener;\nimport org.antlr.v4.runtime.CharStreams;\nimport org.springframework.core.NestedExceptionUtils;\nimport org.springframework.ai.vectorstore.filter.antlr4.FiltersLexer;\nimport java.util.ArrayList;\nimport org.antlr.v4.runtime.Recognizer;\nimport org.springframework.util.Assert;\nimport org.antlr.v4.runtime.BailErrorStrategy;\nimport org.springframework.ai.vectorstore.filter.antlr4.FiltersBaseVisitor;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.filter.FilterExpressionTextParser": "org.springframework.ai.vectorstore.filter.FilterExpressionTextParser",
            "org.springframework.ai.vectorstore.filter.FilterExpressionParseException": "org.springframework.ai.vectorstore.filter.FilterExpressionParseException",
            "org.springframework.ai.vectorstore.filter.FilterExpressionVisitor": "org.springframework.ai.vectorstore.filter.FilterExpressionVisitor",
            "org.springframework.ai.vectorstore.filter.DescriptiveErrorListener": "org.springframework.ai.vectorstore.filter.DescriptiveErrorListener",
            "org.springframework.ai.vectorstore.filter.pars": "org.springframework.ai.vectorstore.filter.pars",
            "org.springframework.ai.vectorstore.filter.clearCach": "org.springframework.ai.vectorstore.filter.clearCach",
            "org.springframework.ai.vectorstore.filter.getCach": "org.springframework.ai.vectorstore.filter.getCach",
            "org.springframework.ai.vectorstore.filter.visitWher": "org.springframework.ai.vectorstore.filter.visitWher",
            "org.springframework.ai.vectorstore.filter.visitIdentifier": "org.springframework.ai.vectorstore.filter.visitIdentifier",
            "org.springframework.ai.vectorstore.filter.visitTextConstant": "org.springframework.ai.vectorstore.filter.visitTextConstant",
            "org.springframework.ai.vectorstore.filter.removeOuterQuotes": "org.springframework.ai.vectorstore.filter.removeOuterQuotes",
            "org.springframework.ai.vectorstore.filter.visitIntegerConstant": "org.springframework.ai.vectorstore.filter.visitIntegerConstant",
            "org.springframework.ai.vectorstore.filter.visitDecimalConstant": "org.springframework.ai.vectorstore.filter.visitDecimalConstant",
            "org.springframework.ai.vectorstore.filter.visitBooleanConstant": "org.springframework.ai.vectorstore.filter.visitBooleanConstant",
            "org.springframework.ai.vectorstore.filter.visitConstantArray": "org.springframework.ai.vectorstore.filter.visitConstantArray",
            "org.springframework.ai.vectorstore.filter.visitInExpression": "org.springframework.ai.vectorstore.filter.visitInExpression",
            "org.springframework.ai.vectorstore.filter.visitNinExpression": "org.springframework.ai.vectorstore.filter.visitNinExpression",
            "org.springframework.ai.vectorstore.filter.visitCompareExpression": "org.springframework.ai.vectorstore.filter.visitCompareExpression",
            "org.springframework.ai.vectorstore.filter.covertCompar": "org.springframework.ai.vectorstore.filter.covertCompar",
            "org.springframework.ai.vectorstore.filter.visitAndExpression": "org.springframework.ai.vectorstore.filter.visitAndExpression",
            "org.springframework.ai.vectorstore.filter.visitOrExpression": "org.springframework.ai.vectorstore.filter.visitOrExpression",
            "org.springframework.ai.vectorstore.filter.visitGroupExpression": "org.springframework.ai.vectorstore.filter.visitGroupExpression",
            "org.springframework.ai.vectorstore.filter.visitNotExpression": "org.springframework.ai.vectorstore.filter.visitNotExpression",
            "org.springframework.ai.vectorstore.filter.castToExpression": "org.springframework.ai.vectorstore.filter.castToExpression",
            "org.springframework.ai.vectorstore.filter.syntaxError": "org.springframework.ai.vectorstore.filter.syntaxError",
            "org.springframework.ai.vectorstore.filter.WHERE_PREFIX": "org.springframework.ai.vectorstore.filter.WHERE_PREFIX",
            "org.springframework.ai.vectorstore.filter.errorListener": "org.springframework.ai.vectorstore.filter.errorListener",
            "org.springframework.ai.vectorstore.filter.errorHandler": "org.springframework.ai.vectorstore.filter.errorHandler",
            "org.springframework.ai.vectorstore.filter.cach": "org.springframework.ai.vectorstore.filter.cach",
            "org.springframework.ai.vectorstore.filter.COMP_EXPRESSION_TYPE_MAP": "org.springframework.ai.vectorstore.filter.COMP_EXPRESSION_TYPE_MAP",
            "org.springframework.ai.vectorstore.filter.INSTANCE": "org.springframework.ai.vectorstore.filter.INSTANCE",
            "org.springframework.ai.vectorstore.filter.errorMessages": "org.springframework.ai.vectorstore.filter.errorMessages"
        },
        "package": "package org.springframework.ai.vectorstore.filter;",
        "property_declarations": [
            "public final List<String> errorMessages = new CopyOnWriteArrayList<>();",
            "private final ANTLRErrorStrategy errorHandler;",
            "private final DescriptiveErrorListener errorListener;",
            "public static final DescriptiveErrorListener INSTANCE = new DescriptiveErrorListener();",
            "private static final Map<String, Filter.ExpressionType> COMP_EXPRESSION_TYPE_MAP = Map.of(\"==\",\n\t\t\t\tFilter.ExpressionType.EQ, \"!=\", Filter.ExpressionType.NE, \">\", Filter.ExpressionType.GT, \">=\",\n\t\t\t\tFilter.ExpressionType.GTE, \"<\", Filter.ExpressionType.LT, \"<=\", Filter.ExpressionType.LTE);",
            "private final Map<String, Filter.Expression> cache = new ConcurrentHashMap<>();",
            "private static final String WHERE_PREFIX = \"WHERE\";"
        ],
        "functions": [
            {
                "name": "parse",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.hasText(textFilterExpression, \"Expression should not be empty!\");\n\n\t\t// Prefix the expression with the compulsory WHERE keyword.\n\t\tif (!textFilterExpression.toUpperCase().startsWith(WHERE_PREFIX)) {\n\t\t\ttextFilterExpression = String.format(\"%s %s\", WHERE_PREFIX, textFilterExpression);\n\t\t}\n\n\t\tif (this.cache.containsKey(textFilterExpression)) {\n\t\t\treturn this.cache.get(textFilterExpression);\n\t\t}\n\n\t\tvar lexer = new FiltersLexer(CharStreams.fromString(textFilterExpression));\n\t\tvar tokens = new CommonTokenStream(lexer);\n\t\tvar parser = new FiltersParser(tokens);\n\n\t\tparser.removeErrorListeners();\n\t\tthis.errorListener.errorMessages.clear();\n\t\tparser.addErrorListener(this.errorListener);\n\n\t\tif (this.errorHandler != null) {\n\t\t\tparser.setErrorHandler(this.errorHandler);\n\t\t}\n\n\t\tvar filterExpressionVisitor = new FilterExpressionVisitor();\n\t\ttry {\n\t\t\tFilter.Operand operand = filterExpressionVisitor.visit(parser.where());\n\t\t\tvar filterExpression = filterExpressionVisitor.castToExpression(operand);\n\t\t\tthis.cache.putIfAbsent(textFilterExpression, filterExpression);\n\t\t\treturn filterExpression;\n\t\t}\n\t\tcatch (ParseCancellationException e) {\n\t\t\tvar msg = this.errorListener.errorMessages.stream().collect(Collectors.joining());\n\t\t\tvar rootCause = NestedExceptionUtils.getRootCause(e);\n\t\t\tthrow new FilterExpressionParseException(msg, rootCause);\n\t\t}",
                "is_abstract": "",
                "class_name": "FilterExpressionTextParser",
                "annotations": []
            },
            {
                "name": "clearCache",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.cache.clear();",
                "is_abstract": "",
                "class_name": "FilterExpressionTextParser",
                "annotations": []
            },
            {
                "name": "getCache",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return cache;",
                "is_abstract": "",
                "class_name": "FilterExpressionTextParser",
                "annotations": []
            },
            {
                "name": "visitWhere",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.visit(ctx.booleanExpression());",
                "is_abstract": "",
                "class_name": "FilterExpressionTextParser FilterExpressionParseException FilterExpressionVisitor",
                "annotations": []
            },
            {
                "name": "visitIdentifier",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Filter.Key(ctx.getText());",
                "is_abstract": "",
                "class_name": "FilterExpressionTextParser FilterExpressionParseException FilterExpressionVisitor",
                "annotations": []
            },
            {
                "name": "visitTextConstant",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String onceQuotedText = removeOuterQuotes(ctx.getText());\n\t\t\treturn new Filter.Value(onceQuotedText);",
                "is_abstract": "",
                "class_name": "FilterExpressionTextParser FilterExpressionParseException FilterExpressionVisitor",
                "annotations": []
            },
            {
                "name": "removeOuterQuotes",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return in.substring(1, in.length() - 1);",
                "is_abstract": "",
                "class_name": "FilterExpressionTextParser FilterExpressionParseException FilterExpressionVisitor",
                "annotations": []
            },
            {
                "name": "visitIntegerConstant",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Filter.Value(Integer.valueOf(ctx.getText()));",
                "is_abstract": "",
                "class_name": "FilterExpressionTextParser FilterExpressionParseException FilterExpressionVisitor",
                "annotations": []
            },
            {
                "name": "visitDecimalConstant",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Filter.Value(Double.valueOf(ctx.getText()));",
                "is_abstract": "",
                "class_name": "FilterExpressionTextParser FilterExpressionParseException FilterExpressionVisitor",
                "annotations": []
            },
            {
                "name": "visitBooleanConstant",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Filter.Value(Boolean.valueOf(ctx.getText()));",
                "is_abstract": "",
                "class_name": "FilterExpressionTextParser FilterExpressionParseException FilterExpressionVisitor",
                "annotations": []
            },
            {
                "name": "visitConstantArray",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "List<Object> list = new ArrayList<>();\n\t\t\tctx.constant().forEach(constantCtx -> {\n\t\t\t\tlist.add(((Filter.Value) this.visit(constantCtx)).value());\n\t\t\t});\n\t\t\treturn new Filter.Value(list);",
                "is_abstract": "",
                "class_name": "FilterExpressionTextParser FilterExpressionParseException FilterExpressionVisitor",
                "annotations": []
            },
            {
                "name": "visitInExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Filter.Expression(Filter.ExpressionType.IN, this.visitIdentifier(ctx.identifier()),\n\t\t\t\t\tthis.visitConstantArray(ctx.constantArray()));",
                "is_abstract": "",
                "class_name": "FilterExpressionTextParser FilterExpressionParseException FilterExpressionVisitor",
                "annotations": []
            },
            {
                "name": "visitNinExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Filter.Expression(Filter.ExpressionType.NIN, this.visitIdentifier(ctx.identifier()),\n\t\t\t\t\tthis.visitConstantArray(ctx.constantArray()));",
                "is_abstract": "",
                "class_name": "FilterExpressionTextParser FilterExpressionParseException FilterExpressionVisitor",
                "annotations": []
            },
            {
                "name": "visitCompareExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Filter.Expression(this.covertCompare(ctx.compare().getText()),\n\t\t\t\t\tthis.visitIdentifier(ctx.identifier()), this.visit(ctx.constant()));",
                "is_abstract": "",
                "class_name": "FilterExpressionTextParser FilterExpressionParseException FilterExpressionVisitor",
                "annotations": []
            },
            {
                "name": "covertCompare",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (!COMP_EXPRESSION_TYPE_MAP.containsKey(compare)) {\n\t\t\t\tthrow new RuntimeException(\"Unknown compare operator: \" + compare);\n\t\t\t}\n\t\t\treturn COMP_EXPRESSION_TYPE_MAP.get(compare);",
                "is_abstract": "",
                "class_name": "FilterExpressionTextParser FilterExpressionParseException FilterExpressionVisitor",
                "annotations": []
            },
            {
                "name": "visitAndExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Filter.Expression(Filter.ExpressionType.AND, this.visit(ctx.left), this.visit(ctx.right));",
                "is_abstract": "",
                "class_name": "FilterExpressionTextParser FilterExpressionParseException FilterExpressionVisitor",
                "annotations": []
            },
            {
                "name": "visitOrExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Filter.Expression(Filter.ExpressionType.OR, this.visit(ctx.left), this.visit(ctx.right));",
                "is_abstract": "",
                "class_name": "FilterExpressionTextParser FilterExpressionParseException FilterExpressionVisitor",
                "annotations": []
            },
            {
                "name": "visitGroupExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Filter.Group(castToExpression(this.visit(ctx.booleanExpression())));",
                "is_abstract": "",
                "class_name": "FilterExpressionTextParser FilterExpressionParseException FilterExpressionVisitor",
                "annotations": []
            },
            {
                "name": "visitNotExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Filter.Expression(Filter.ExpressionType.NOT, this.visit(ctx.booleanExpression()), null);",
                "is_abstract": "",
                "class_name": "FilterExpressionTextParser FilterExpressionParseException FilterExpressionVisitor",
                "annotations": []
            },
            {
                "name": "castToExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (expression instanceof Filter.Group group) {\n\t\t\t\t// Remove the top-level grouping.\n\t\t\t\treturn group.content();\n\t\t\t}\n\t\t\telse if (expression instanceof Filter.Expression exp) {\n\t\t\t\treturn exp;\n\t\t\t}\n\t\t\tthrow new RuntimeException(\"Invalid expression: \" + expression);",
                "is_abstract": "",
                "class_name": "FilterExpressionTextParser FilterExpressionParseException FilterExpressionVisitor",
                "annotations": []
            },
            {
                "name": "syntaxError",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String sourceName = recognizer.getInputStream().getSourceName();\n\n\t\t\tvar errorMessage = String.format(\"Source: %s, Line: %s:%s, Error: %s\", sourceName, line, charPositionInLine,\n\t\t\t\t\tmsg);\n\n\t\t\tthis.errorMessages.add(errorMessage);",
                "is_abstract": "",
                "class_name": "FilterExpressionTextParser FilterExpressionParseException FilterExpressionVisitor DescriptiveErrorListener",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/vectorstore/filter/Filter.java",
        "class_names": [
            "Filter"
        ],
        "imports": "",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.filter.Filter": "org.springframework.ai.vectorstore.filter.Filter"
        },
        "package": "package org.springframework.ai.vectorstore.filter;",
        "property_declarations": [],
        "functions": []
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/vectorstore/filter/converter/PineconeFilterExpressionConverter.java",
        "class_names": [
            "PineconeFilterExpressionConverter"
        ],
        "imports": "import org.springframework.ai.vectorstore.filter.Filter.Key;\nimport org.springframework.ai.vectorstore.filter.Filter.Expression;\nimport org.springframework.ai.vectorstore.filter.Filter.ExpressionType;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.filter.converter.PineconeFilterExpressionConverter": "org.springframework.ai.vectorstore.filter.converter.PineconeFilterExpressionConverter",
            "org.springframework.ai.vectorstore.filter.converter.doExpression": "org.springframework.ai.vectorstore.filter.converter.doExpression",
            "org.springframework.ai.vectorstore.filter.converter.getOperationSymbol": "org.springframework.ai.vectorstore.filter.converter.getOperationSymbol",
            "org.springframework.ai.vectorstore.filter.converter.doKey": "org.springframework.ai.vectorstore.filter.converter.doKey"
        },
        "package": "package org.springframework.ai.vectorstore.filter.converter;",
        "property_declarations": [],
        "functions": [
            {
                "name": "doExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "context.append(\"{\");\n\t\tif (exp.type() == ExpressionType.AND || exp.type() == ExpressionType.OR) {\n\t\t\tcontext.append(getOperationSymbol(exp));\n\t\t\tcontext.append(\"[\");\n\t\t\tthis.convertOperand(exp.left(), context);\n\t\t\tcontext.append(\",\");\n\t\t\tthis.convertOperand(exp.right(), context);\n\t\t\tcontext.append(\"]\");\n\t\t}\n\t\telse {\n\t\t\tthis.convertOperand(exp.left(), context);\n\t\t\tcontext.append(\"{\");\n\t\t\tcontext.append(getOperationSymbol(exp));\n\t\t\tthis.convertOperand(exp.right(), context);\n\t\t\tcontext.append(\"}\");\n\t\t}\n\t\tcontext.append(\"}\");",
                "is_abstract": "",
                "class_name": "PineconeFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "getOperationSymbol",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return \"\\\"$\" + exp.type().toString().toLowerCase() + \"\\\": \";",
                "is_abstract": "",
                "class_name": "PineconeFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "doKey",
                "parameters": [
                    ""
                ],
                "return_type": "key",
                "body": "var identifier = (hasOuterQuotes(key.key())) ? removeOuterQuotes(key.key()) : key.key();\n\t\tcontext.append(\"\\\"\" + identifier + \"\\\": \");",
                "is_abstract": "",
                "class_name": "PineconeFilterExpressionConverter",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/vectorstore/filter/converter/MilvusFilterExpressionConverter.java",
        "class_names": [
            "MilvusFilterExpressionConverter"
        ],
        "imports": "import org.springframework.ai.vectorstore.filter.Filter.Key;\nimport org.springframework.ai.vectorstore.filter.Filter.Group;\nimport org.springframework.ai.vectorstore.filter.Filter.Expression;\nimport org.springframework.ai.vectorstore.filter.Filter.ExpressionType;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.filter.converter.MilvusFilterExpressionConverter": "org.springframework.ai.vectorstore.filter.converter.MilvusFilterExpressionConverter",
            "org.springframework.ai.vectorstore.filter.converter.doExpression": "org.springframework.ai.vectorstore.filter.converter.doExpression",
            "org.springframework.ai.vectorstore.filter.converter.getOperationSymbol": "org.springframework.ai.vectorstore.filter.converter.getOperationSymbol",
            "org.springframework.ai.vectorstore.filter.converter.doGrou": "org.springframework.ai.vectorstore.filter.converter.doGrou",
            "org.springframework.ai.vectorstore.filter.converter.doKey": "org.springframework.ai.vectorstore.filter.converter.doKey"
        },
        "package": "package org.springframework.ai.vectorstore.filter.converter;",
        "property_declarations": [],
        "functions": [
            {
                "name": "doExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.convertOperand(exp.left(), context);\n\t\tcontext.append(getOperationSymbol(exp));\n\t\tthis.convertOperand(exp.right(), context);",
                "is_abstract": "",
                "class_name": "MilvusFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "getOperationSymbol",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "switch (exp.type()) {\n\t\t\tcase AND:\n\t\t\t\treturn \" && \";\n\t\t\tcase OR:\n\t\t\t\treturn \" || \";\n\t\t\tcase EQ:\n\t\t\t\treturn \" == \";\n\t\t\tcase NE:\n\t\t\t\treturn \" != \";\n\t\t\tcase LT:\n\t\t\t\treturn \" < \";\n\t\t\tcase LTE:\n\t\t\t\treturn \" <= \";\n\t\t\tcase GT:\n\t\t\t\treturn \" > \";\n\t\t\tcase GTE:\n\t\t\t\treturn \" >= \";\n\t\t\tcase IN:\n\t\t\t\treturn \" in \";\n\t\t\tcase NIN:\n\t\t\t\treturn \" nin \";\n\t\t\tdefault:\n\t\t\t\tthrow new RuntimeException(\"Not supported expression type:\" + exp.type());\n\t\t}",
                "is_abstract": "",
                "class_name": "MilvusFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "doGroup",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.convertOperand(new Expression(ExpressionType.AND, group.content(), group.content()), context); // trick",
                "is_abstract": "",
                "class_name": "MilvusFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "doKey",
                "parameters": [
                    ""
                ],
                "return_type": "key",
                "body": "var identifier = (hasOuterQuotes(key.key())) ? removeOuterQuotes(key.key()) : key.key();\n\t\tcontext.append(\"metadata[\\\"\" + identifier + \"\\\"]\");",
                "is_abstract": "",
                "class_name": "MilvusFilterExpressionConverter",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/vectorstore/filter/converter/AbstractFilterExpressionConverter.java",
        "class_names": [
            "AbstractFilterExpressionConverter"
        ],
        "imports": "import org.springframework.ai.vectorstore.filter.Filter;\nimport java.util.List;\nimport org.springframework.ai.vectorstore.filter.Filter.ExpressionType;\nimport org.springframework.ai.vectorstore.filter.Filter.Expression;\nimport org.springframework.ai.vectorstore.filter.Filter.Group;\nimport org.springframework.ai.vectorstore.filter.FilterExpressionConverter;\nimport org.springframework.ai.vectorstore.filter.Filter.Operand;\nimport org.springframework.ai.vectorstore.filter.FilterHelper;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.filter.converter.AbstractFilterExpressionConverter": "org.springframework.ai.vectorstore.filter.converter.AbstractFilterExpressionConverter",
            "org.springframework.ai.vectorstore.filter.converter.convertExpression": "org.springframework.ai.vectorstore.filter.converter.convertExpression",
            "org.springframework.ai.vectorstore.filter.converter.convertOperand": "org.springframework.ai.vectorstore.filter.converter.convertOperand",
            "org.springframework.ai.vectorstore.filter.converter.doNot": "org.springframework.ai.vectorstore.filter.converter.doNot",
            "org.springframework.ai.vectorstore.filter.converter.doExpression": "org.springframework.ai.vectorstore.filter.converter.doExpression",
            "org.springframework.ai.vectorstore.filter.converter.doKey": "org.springframework.ai.vectorstore.filter.converter.doKey",
            "org.springframework.ai.vectorstore.filter.converter.doValu": "org.springframework.ai.vectorstore.filter.converter.doValu",
            "org.springframework.ai.vectorstore.filter.converter.doSingleValu": "org.springframework.ai.vectorstore.filter.converter.doSingleValu",
            "org.springframework.ai.vectorstore.filter.converter.doGrou": "org.springframework.ai.vectorstore.filter.converter.doGrou",
            "org.springframework.ai.vectorstore.filter.converter.doStartGrou": "org.springframework.ai.vectorstore.filter.converter.doStartGrou",
            "org.springframework.ai.vectorstore.filter.converter.doEndGrou": "org.springframework.ai.vectorstore.filter.converter.doEndGrou",
            "org.springframework.ai.vectorstore.filter.converter.doStartValueRan": "org.springframework.ai.vectorstore.filter.converter.doStartValueRan",
            "org.springframework.ai.vectorstore.filter.converter.doEndValueRan": "org.springframework.ai.vectorstore.filter.converter.doEndValueRan",
            "org.springframework.ai.vectorstore.filter.converter.doAddValueRangeSpitter": "org.springframework.ai.vectorstore.filter.converter.doAddValueRangeSpitter",
            "org.springframework.ai.vectorstore.filter.converter.hasOuterQuotes": "org.springframework.ai.vectorstore.filter.converter.hasOuterQuotes",
            "org.springframework.ai.vectorstore.filter.converter.removeOuterQuotes": "org.springframework.ai.vectorstore.filter.converter.removeOuterQuotes"
        },
        "package": "package org.springframework.ai.vectorstore.filter.converter;",
        "property_declarations": [],
        "functions": [
            {
                "name": "convertExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.convertOperand(expression);",
                "is_abstract": "",
                "class_name": "AbstractFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "convertOperand",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var context = new StringBuilder();\n\t\tthis.convertOperand(operand, context);\n\t\treturn context.toString();",
                "is_abstract": "",
                "class_name": "AbstractFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "doNot",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// Default behavior is to convert the NOT expression into its semantically\n\t\t// equivalent negation expression.\n\t\t// Effectively removing the NOT types form the boolean expression tree before\n\t\t// passing it to the doExpression.\n\t\tthis.convertOperand(FilterHelper.negate(expression), context);",
                "is_abstract": "",
                "class_name": "AbstractFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "doExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "AbstractFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "doKey",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "AbstractFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "doValue",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (filterValue.value() instanceof List list) {\n\t\t\tdoStartValueRange(filterValue, context);\n\t\t\tint c = 0;\n\t\t\tfor (Object v : list) {\n\t\t\t\tthis.doSingleValue(v, context);\n\t\t\t\tif (c++ < list.size() - 1) {\n\t\t\t\t\tthis.doAddValueRangeSpitter(filterValue, context);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.doEndValueRange(filterValue, context);\n\t\t}\n\t\telse {\n\t\t\tthis.doSingleValue(filterValue.value(), context);\n\t\t}",
                "is_abstract": "",
                "class_name": "AbstractFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "doSingleValue",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (value instanceof String) {\n\t\t\tcontext.append(String.format(\"\\\"%s\\\"\", value));\n\t\t}\n\t\telse {\n\t\t\tcontext.append(value);\n\t\t}",
                "is_abstract": "",
                "class_name": "AbstractFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "doGroup",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.doStartGroup(group, context);\n\t\tthis.convertOperand(group.content(), context);\n\t\tthis.doEndGroup(group, context);",
                "is_abstract": "",
                "class_name": "AbstractFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "doStartGroup",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "AbstractFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "doEndGroup",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "AbstractFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "doStartValueRange",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "context.append(\"[\");",
                "is_abstract": "",
                "class_name": "AbstractFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "doEndValueRange",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "context.append(\"]\");",
                "is_abstract": "",
                "class_name": "AbstractFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "doAddValueRangeSpitter",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "context.append(\",\");",
                "is_abstract": "",
                "class_name": "AbstractFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "hasOuterQuotes",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "str = str.trim();\n\t\treturn (str.startsWith(\"\\\"\") && str.endsWith(\"\\\"\")) || (str.startsWith(\"'\") && str.endsWith(\"'\"));",
                "is_abstract": "",
                "class_name": "AbstractFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "removeOuterQuotes",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return in.substring(1, in.length() - 1);",
                "is_abstract": "",
                "class_name": "AbstractFilterExpressionConverter",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/vectorstore/filter/converter/PgVectorFilterExpressionConverter.java",
        "class_names": [
            "PgVectorFilterExpressionConverter"
        ],
        "imports": "import org.springframework.ai.vectorstore.filter.Filter.Key;\nimport org.springframework.ai.vectorstore.filter.Filter.Group;\nimport org.springframework.ai.vectorstore.filter.Filter.Expression;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.filter.converter.PgVectorFilterExpressionConverter": "org.springframework.ai.vectorstore.filter.converter.PgVectorFilterExpressionConverter",
            "org.springframework.ai.vectorstore.filter.converter.doExpression": "org.springframework.ai.vectorstore.filter.converter.doExpression",
            "org.springframework.ai.vectorstore.filter.converter.getOperationSymbol": "org.springframework.ai.vectorstore.filter.converter.getOperationSymbol",
            "org.springframework.ai.vectorstore.filter.converter.doKey": "org.springframework.ai.vectorstore.filter.converter.doKey",
            "org.springframework.ai.vectorstore.filter.converter.doStartGrou": "org.springframework.ai.vectorstore.filter.converter.doStartGrou",
            "org.springframework.ai.vectorstore.filter.converter.doEndGrou": "org.springframework.ai.vectorstore.filter.converter.doEndGrou"
        },
        "package": "package org.springframework.ai.vectorstore.filter.converter;",
        "property_declarations": [],
        "functions": [
            {
                "name": "doExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.convertOperand(expression.left(), context);\n\t\tcontext.append(getOperationSymbol(expression));\n\t\tthis.convertOperand(expression.right(), context);",
                "is_abstract": "",
                "class_name": "PgVectorFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "getOperationSymbol",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "switch (exp.type()) {\n\t\t\tcase AND:\n\t\t\t\treturn \" && \";\n\t\t\tcase OR:\n\t\t\t\treturn \" || \";\n\t\t\tcase EQ:\n\t\t\t\treturn \" == \";\n\t\t\tcase NE:\n\t\t\t\treturn \" != \";\n\t\t\tcase LT:\n\t\t\t\treturn \" < \";\n\t\t\tcase LTE:\n\t\t\t\treturn \" <= \";\n\t\t\tcase GT:\n\t\t\t\treturn \" > \";\n\t\t\tcase GTE:\n\t\t\t\treturn \" >= \";\n\t\t\tcase IN:\n\t\t\t\treturn \" in \";\n\t\t\tcase NIN:\n\t\t\t\treturn \" nin \";\n\t\t\tdefault:\n\t\t\t\tthrow new RuntimeException(\"Not supported expression type: \" + exp.type());\n\t\t}",
                "is_abstract": "",
                "class_name": "PgVectorFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "doKey",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "context.append(\"$.\" + key.key());",
                "is_abstract": "",
                "class_name": "PgVectorFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "doStartGroup",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "context.append(\"(\");",
                "is_abstract": "",
                "class_name": "PgVectorFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "doEndGroup",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "context.append(\")\");",
                "is_abstract": "",
                "class_name": "PgVectorFilterExpressionConverter",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/vectorstore/filter/converter/PrintFilterExpressionConverter.java",
        "class_names": [
            "PrintFilterExpressionConverter"
        ],
        "imports": "import org.springframework.ai.vectorstore.filter.Filter.Key;\nimport org.springframework.ai.vectorstore.filter.Filter.Group;\nimport org.springframework.ai.vectorstore.filter.Filter.Expression;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.filter.converter.PrintFilterExpressionConverter": "org.springframework.ai.vectorstore.filter.converter.PrintFilterExpressionConverter",
            "org.springframework.ai.vectorstore.filter.converter.doExpression": "org.springframework.ai.vectorstore.filter.converter.doExpression",
            "org.springframework.ai.vectorstore.filter.converter.doKey": "org.springframework.ai.vectorstore.filter.converter.doKey",
            "org.springframework.ai.vectorstore.filter.converter.doStartGrou": "org.springframework.ai.vectorstore.filter.converter.doStartGrou",
            "org.springframework.ai.vectorstore.filter.converter.doEndGrou": "org.springframework.ai.vectorstore.filter.converter.doEndGrou"
        },
        "package": "package org.springframework.ai.vectorstore.filter.converter;",
        "property_declarations": [],
        "functions": [
            {
                "name": "doExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.convertOperand(expression.left(), context);\n\t\tcontext.append(\" \" + expression.type() + \" \");\n\t\tthis.convertOperand(expression.right(), context);",
                "is_abstract": "",
                "class_name": "PrintFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "doKey",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "context.append(key.key());",
                "is_abstract": "",
                "class_name": "PrintFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "doStartGroup",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "context.append(\"(\");",
                "is_abstract": "",
                "class_name": "PrintFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "doEndGroup",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "context.append(\")\");",
                "is_abstract": "",
                "class_name": "PrintFilterExpressionConverter",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/vectorstore/filter/converter/ChromaFilterExpressionConverter.java",
        "class_names": [
            "ChromaFilterExpressionConverter"
        ],
        "imports": "import org.springframework.ai.vectorstore.filter.Filter;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.filter.converter.ChromaFilterExpressionConverter": "org.springframework.ai.vectorstore.filter.converter.ChromaFilterExpressionConverter"
        },
        "package": "package org.springframework.ai.vectorstore.filter.converter;",
        "property_declarations": [],
        "functions": []
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/vectorstore/filter/antlr4/FiltersListener.java",
        "class_names": [],
        "imports": "import org.antlr.v4.runtime.tree.ParseTreeListener;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.filter.antlr4.enterWher": "org.springframework.ai.vectorstore.filter.antlr4.enterWher",
            "org.springframework.ai.vectorstore.filter.antlr4.exitWher": "org.springframework.ai.vectorstore.filter.antlr4.exitWher",
            "org.springframework.ai.vectorstore.filter.antlr4.enterNinExpression": "org.springframework.ai.vectorstore.filter.antlr4.enterNinExpression",
            "org.springframework.ai.vectorstore.filter.antlr4.exitNinExpression": "org.springframework.ai.vectorstore.filter.antlr4.exitNinExpression",
            "org.springframework.ai.vectorstore.filter.antlr4.enterAndExpression": "org.springframework.ai.vectorstore.filter.antlr4.enterAndExpression",
            "org.springframework.ai.vectorstore.filter.antlr4.exitAndExpression": "org.springframework.ai.vectorstore.filter.antlr4.exitAndExpression",
            "org.springframework.ai.vectorstore.filter.antlr4.enterInExpression": "org.springframework.ai.vectorstore.filter.antlr4.enterInExpression",
            "org.springframework.ai.vectorstore.filter.antlr4.exitInExpression": "org.springframework.ai.vectorstore.filter.antlr4.exitInExpression",
            "org.springframework.ai.vectorstore.filter.antlr4.enterNotExpression": "org.springframework.ai.vectorstore.filter.antlr4.enterNotExpression",
            "org.springframework.ai.vectorstore.filter.antlr4.exitNotExpression": "org.springframework.ai.vectorstore.filter.antlr4.exitNotExpression",
            "org.springframework.ai.vectorstore.filter.antlr4.enterCompareExpression": "org.springframework.ai.vectorstore.filter.antlr4.enterCompareExpression",
            "org.springframework.ai.vectorstore.filter.antlr4.exitCompareExpression": "org.springframework.ai.vectorstore.filter.antlr4.exitCompareExpression",
            "org.springframework.ai.vectorstore.filter.antlr4.enterOrExpression": "org.springframework.ai.vectorstore.filter.antlr4.enterOrExpression",
            "org.springframework.ai.vectorstore.filter.antlr4.exitOrExpression": "org.springframework.ai.vectorstore.filter.antlr4.exitOrExpression",
            "org.springframework.ai.vectorstore.filter.antlr4.enterGroupExpression": "org.springframework.ai.vectorstore.filter.antlr4.enterGroupExpression",
            "org.springframework.ai.vectorstore.filter.antlr4.exitGroupExpression": "org.springframework.ai.vectorstore.filter.antlr4.exitGroupExpression",
            "org.springframework.ai.vectorstore.filter.antlr4.enterConstantArray": "org.springframework.ai.vectorstore.filter.antlr4.enterConstantArray",
            "org.springframework.ai.vectorstore.filter.antlr4.exitConstantArray": "org.springframework.ai.vectorstore.filter.antlr4.exitConstantArray",
            "org.springframework.ai.vectorstore.filter.antlr4.enterCompar": "org.springframework.ai.vectorstore.filter.antlr4.enterCompar",
            "org.springframework.ai.vectorstore.filter.antlr4.exitCompar": "org.springframework.ai.vectorstore.filter.antlr4.exitCompar",
            "org.springframework.ai.vectorstore.filter.antlr4.enterIdentifier": "org.springframework.ai.vectorstore.filter.antlr4.enterIdentifier",
            "org.springframework.ai.vectorstore.filter.antlr4.exitIdentifier": "org.springframework.ai.vectorstore.filter.antlr4.exitIdentifier",
            "org.springframework.ai.vectorstore.filter.antlr4.enterIntegerConstant": "org.springframework.ai.vectorstore.filter.antlr4.enterIntegerConstant",
            "org.springframework.ai.vectorstore.filter.antlr4.exitIntegerConstant": "org.springframework.ai.vectorstore.filter.antlr4.exitIntegerConstant",
            "org.springframework.ai.vectorstore.filter.antlr4.enterDecimalConstant": "org.springframework.ai.vectorstore.filter.antlr4.enterDecimalConstant",
            "org.springframework.ai.vectorstore.filter.antlr4.exitDecimalConstant": "org.springframework.ai.vectorstore.filter.antlr4.exitDecimalConstant",
            "org.springframework.ai.vectorstore.filter.antlr4.enterTextConstant": "org.springframework.ai.vectorstore.filter.antlr4.enterTextConstant",
            "org.springframework.ai.vectorstore.filter.antlr4.exitTextConstant": "org.springframework.ai.vectorstore.filter.antlr4.exitTextConstant",
            "org.springframework.ai.vectorstore.filter.antlr4.enterBooleanConstant": "org.springframework.ai.vectorstore.filter.antlr4.enterBooleanConstant",
            "org.springframework.ai.vectorstore.filter.antlr4.exitBooleanConstant": "org.springframework.ai.vectorstore.filter.antlr4.exitBooleanConstant"
        },
        "package": "package org.springframework.ai.vectorstore.filter.antlr4;",
        "property_declarations": [],
        "functions": [
            {
                "name": "enterWhere",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "exitWhere",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "enterNinExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "exitNinExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "enterAndExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "exitAndExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "enterInExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "exitInExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "enterNotExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "exitNotExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "enterCompareExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "exitCompareExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "enterOrExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "exitOrExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "enterGroupExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "exitGroupExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "enterConstantArray",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "exitConstantArray",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "enterCompare",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "exitCompare",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "enterIdentifier",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "exitIdentifier",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "enterIntegerConstant",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "exitIntegerConstant",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "enterDecimalConstant",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "exitDecimalConstant",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "enterTextConstant",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "exitTextConstant",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "enterBooleanConstant",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "exitBooleanConstant",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/vectorstore/filter/antlr4/FiltersLexer.java",
        "class_names": [
            "FiltersLexer"
        ],
        "imports": "import org.antlr.v4.runtime.atn.*;\nimport org.antlr.v4.runtime.*;\nimport org.antlr.v4.runtime.CharStream;\nimport org.antlr.v4.runtime.dfa.DFA;\nimport org.antlr.v4.runtime.Lexer;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.filter.antlr4.FiltersLexer": "org.springframework.ai.vectorstore.filter.antlr4.FiltersLexer",
            "org.springframework.ai.vectorstore.filter.antlr4.makeRuleNames": "org.springframework.ai.vectorstore.filter.antlr4.makeRuleNames",
            "org.springframework.ai.vectorstore.filter.antlr4.makeLiteralNames": "org.springframework.ai.vectorstore.filter.antlr4.makeLiteralNames",
            "org.springframework.ai.vectorstore.filter.antlr4.makeSymbolicNames": "org.springframework.ai.vectorstore.filter.antlr4.makeSymbolicNames",
            "org.springframework.ai.vectorstore.filter.antlr4.getTokenNames": "org.springframework.ai.vectorstore.filter.antlr4.getTokenNames",
            "org.springframework.ai.vectorstore.filter.antlr4.getVocabulary": "org.springframework.ai.vectorstore.filter.antlr4.getVocabulary",
            "org.springframework.ai.vectorstore.filter.antlr4.getGrammarFileNam": "org.springframework.ai.vectorstore.filter.antlr4.getGrammarFileNam",
            "org.springframework.ai.vectorstore.filter.antlr4.getRuleNames": "org.springframework.ai.vectorstore.filter.antlr4.getRuleNames",
            "org.springframework.ai.vectorstore.filter.antlr4.getSerializedATN": "org.springframework.ai.vectorstore.filter.antlr4.getSerializedATN",
            "org.springframework.ai.vectorstore.filter.antlr4.getChannelNames": "org.springframework.ai.vectorstore.filter.antlr4.getChannelNames",
            "org.springframework.ai.vectorstore.filter.antlr4.getModeNames": "org.springframework.ai.vectorstore.filter.antlr4.getModeNames",
            "org.springframework.ai.vectorstore.filter.antlr4.getATN": "org.springframework.ai.vectorstore.filter.antlr4.getATN",
            "org.springframework.ai.vectorstore.filter.antlr4._decisionToDFA": "org.springframework.ai.vectorstore.filter.antlr4._decisionToDFA",
            "org.springframework.ai.vectorstore.filter.antlr4._sharedContextCach": "org.springframework.ai.vectorstore.filter.antlr4._sharedContextCach",
            "org.springframework.ai.vectorstore.filter.antlr4.WHERE": "org.springframework.ai.vectorstore.filter.antlr4.WHERE",
            "org.springframework.ai.vectorstore.filter.antlr4.channelNames": "org.springframework.ai.vectorstore.filter.antlr4.channelNames",
            "org.springframework.ai.vectorstore.filter.antlr4.modeNames": "org.springframework.ai.vectorstore.filter.antlr4.modeNames",
            "org.springframework.ai.vectorstore.filter.antlr4.ruleNames": "org.springframework.ai.vectorstore.filter.antlr4.ruleNames",
            "org.springframework.ai.vectorstore.filter.antlr4._LITERAL_NAMES": "org.springframework.ai.vectorstore.filter.antlr4._LITERAL_NAMES",
            "org.springframework.ai.vectorstore.filter.antlr4._SYMBOLIC_NAMES": "org.springframework.ai.vectorstore.filter.antlr4._SYMBOLIC_NAMES",
            "org.springframework.ai.vectorstore.filter.antlr4.VOCABULARY": "org.springframework.ai.vectorstore.filter.antlr4.VOCABULARY",
            "org.springframework.ai.vectorstore.filter.antlr4.publi": "org.springframework.ai.vectorstore.filter.antlr4.publi",
            "org.springframework.ai.vectorstore.filter.antlr4._serializedATN": "org.springframework.ai.vectorstore.filter.antlr4._serializedATN",
            "org.springframework.ai.vectorstore.filter.antlr4._ATN": "org.springframework.ai.vectorstore.filter.antlr4._ATN"
        },
        "package": "package org.springframework.ai.vectorstore.filter.antlr4;",
        "property_declarations": [
            "protected static final PredictionContextCache _sharedContextCache = new PredictionContextCache();",
            "public static String[] channelNames = { \"DEFAULT_TOKEN_CHANNEL\", \"HIDDEN\" };",
            "public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);",
            "public static final ATN _ATN = new ATNDeserializer().deserialize(_serializedATN.toCharArray());",
            "private static final String[] _LITERAL_NAMES = makeLiteralNames();",
            "public static final String _serializedATN = \"\\u0004\\u0000\\u001a\\u00e5\\u0006\\uffff\\uffff\\u0002\\u0000\\u0007\\u0000\\u0002\"\n\t\t\t+ \"\\u0001\\u0007\\u0001\\u0002\\u0002\\u0007\\u0002\\u0002\\u0003\\u0007\\u0003\\u0002\"\n\t\t\t+ \"\\u0004\\u0007\\u0004\\u0002\\u0005\\u0007\\u0005\\u0002\\u0006\\u0007\\u0006\\u0002\"\n\t\t\t+ \"\\u0007\\u0007\\u0007\\u0002\\b\\u0007\\b\\u0002\\t\\u0007\\t\\u0002\\n\\u0007\\n\\u0002\"\n\t\t\t+ \"\\u000b\\u0007\\u000b\\u0002\\f\\u0007\\f\\u0002\\r\\u0007\\r\\u0002\\u000e\\u0007\\u000e\"\n\t\t\t+ \"\\u0002\\u000f\\u0007\\u000f\\u0002\\u0010\\u0007\\u0010\\u0002\\u0011\\u0007\\u0011\"\n\t\t\t+ \"\\u0002\\u0012\\u0007\\u0012\\u0002\\u0013\\u0007\\u0013\\u0002\\u0014\\u0007\\u0014\"\n\t\t\t+ \"\\u0002\\u0015\\u0007\\u0015\\u0002\\u0016\\u0007\\u0016\\u0002\\u0017\\u0007\\u0017\"\n\t\t\t+ \"\\u0002\\u0018\\u0007\\u0018\\u0002\\u0019\\u0007\\u0019\\u0002\\u001a\\u0007\\u001a\"\n\t\t\t+ \"\\u0002\\u001b\\u0007\\u001b\\u0002\\u001c\\u0007\\u001c\\u0001\\u0000\\u0001\\u0000\"\n\t\t\t+ \"\\u0001\\u0000\\u0001\\u0000\\u0001\\u0000\\u0001\\u0000\\u0001\\u0000\\u0001\\u0000\"\n\t\t\t+ \"\\u0001\\u0000\\u0001\\u0000\\u0003\\u0000F\\b\\u0000\\u0001\\u0001\\u0001\\u0001\"\n\t\t\t+ \"\\u0001\\u0002\\u0001\\u0002\\u0001\\u0003\\u0001\\u0003\\u0001\\u0004\\u0001\\u0004\"\n\t\t\t+ \"\\u0001\\u0005\\u0001\\u0005\\u0001\\u0006\\u0001\\u0006\\u0001\\u0007\\u0001\\u0007\"\n\t\t\t+ \"\\u0001\\u0007\\u0001\\b\\u0001\\b\\u0001\\t\\u0001\\t\\u0001\\n\\u0001\\n\\u0001\\u000b\"\n\t\t\t+ \"\\u0001\\u000b\\u0001\\u000b\\u0001\\f\\u0001\\f\\u0001\\r\\u0001\\r\\u0001\\r\\u0001\"\n\t\t\t+ \"\\u000e\\u0001\\u000e\\u0001\\u000e\\u0001\\u000f\\u0001\\u000f\\u0001\\u000f\\u0001\"\n\t\t\t+ \"\\u000f\\u0001\\u000f\\u0001\\u000f\\u0001\\u000f\\u0001\\u000f\\u0003\\u000fp\\b\"\n\t\t\t+ \"\\u000f\\u0001\\u0010\\u0001\\u0010\\u0001\\u0010\\u0001\\u0010\\u0001\\u0010\\u0001\"\n\t\t\t+ \"\\u0010\\u0003\\u0010x\\b\\u0010\\u0001\\u0011\\u0001\\u0011\\u0001\\u0011\\u0001\"\n\t\t\t+ \"\\u0011\\u0003\\u0011~\\b\\u0011\\u0001\\u0012\\u0001\\u0012\\u0001\\u0012\\u0001\"\n\t\t\t+ \"\\u0012\\u0001\\u0012\\u0001\\u0012\\u0003\\u0012\\u0086\\b\\u0012\\u0001\\u0013\\u0001\"\n\t\t\t+ \"\\u0013\\u0001\\u0013\\u0001\\u0013\\u0001\\u0013\\u0001\\u0013\\u0003\\u0013\\u008e\"\n\t\t\t+ \"\\b\\u0013\\u0001\\u0014\\u0001\\u0014\\u0001\\u0014\\u0001\\u0014\\u0001\\u0014\\u0001\"\n\t\t\t+ \"\\u0014\\u0001\\u0014\\u0001\\u0014\\u0001\\u0014\\u0001\\u0014\\u0001\\u0014\\u0001\"\n\t\t\t+ \"\\u0014\\u0001\\u0014\\u0001\\u0014\\u0001\\u0014\\u0001\\u0014\\u0001\\u0014\\u0001\"\n\t\t\t+ \"\\u0014\\u0003\\u0014\\u00a2\\b\\u0014\\u0001\\u0015\\u0001\\u0015\\u0001\\u0015\\u0001\"\n\t\t\t+ \"\\u0015\\u0005\\u0015\\u00a8\\b\\u0015\\n\\u0015\\f\\u0015\\u00ab\\t\\u0015\\u0001\\u0015\"\n\t\t\t+ \"\\u0001\\u0015\\u0001\\u0015\\u0001\\u0015\\u0001\\u0015\\u0005\\u0015\\u00b2\\b\\u0015\"\n\t\t\t+ \"\\n\\u0015\\f\\u0015\\u00b5\\t\\u0015\\u0001\\u0015\\u0003\\u0015\\u00b8\\b\\u0015\\u0001\"\n\t\t\t+ \"\\u0016\\u0004\\u0016\\u00bb\\b\\u0016\\u000b\\u0016\\f\\u0016\\u00bc\\u0001\\u0017\"\n\t\t\t+ \"\\u0001\\u0017\\u0001\\u0018\\u0001\\u0018\\u0004\\u0018\\u00c3\\b\\u0018\\u000b\\u0018\"\n\t\t\t+ \"\\f\\u0018\\u00c4\\u0001\\u0019\\u0004\\u0019\\u00c8\\b\\u0019\\u000b\\u0019\\f\\u0019\"\n\t\t\t+ \"\\u00c9\\u0001\\u0019\\u0001\\u0019\\u0005\\u0019\\u00ce\\b\\u0019\\n\\u0019\\f\\u0019\"\n\t\t\t+ \"\\u00d1\\t\\u0019\\u0001\\u0019\\u0001\\u0019\\u0004\\u0019\\u00d5\\b\\u0019\\u000b\"\n\t\t\t+ \"\\u0019\\f\\u0019\\u00d6\\u0003\\u0019\\u00d9\\b\\u0019\\u0001\\u001a\\u0001\\u001a\"\n\t\t\t+ \"\\u0001\\u001b\\u0001\\u001b\\u0001\\u001c\\u0004\\u001c\\u00e0\\b\\u001c\\u000b\\u001c\"\n\t\t\t+ \"\\f\\u001c\\u00e1\\u0001\\u001c\\u0001\\u001c\\u0000\\u0000\\u001d\\u0001\\u0001\\u0003\"\n\t\t\t+ \"\\u0002\\u0005\\u0003\\u0007\\u0004\\t\\u0005\\u000b\\u0006\\r\\u0007\\u000f\\b\\u0011\"\n\t\t\t+ \"\\t\\u0013\\n\\u0015\\u000b\\u0017\\f\\u0019\\r\\u001b\\u000e\\u001d\\u000f\\u001f\\u0010\"\n\t\t\t+ \"!\\u0011#\\u0012%\\u0013\\'\\u0014)\\u0015+\\u0016-\\u0017/\\u00181\\u00193\\u0000\"\n\t\t\t+ \"5\\u00007\\u00009\\u001a\\u0001\\u0000\\u0005\\u0002\\u0000\\'\\'\\\\\\\\\\u0002\\u0000\"\n\t\t\t+ \"\\\"\\\"\\\\\\\\\\u0001\\u000009\\u0002\\u0000AZaz\\u0003\\u0000\\t\\n\\r\\r  \\u00f9\\u0000\"\n\t\t\t+ \"\\u0001\\u0001\\u0000\\u0000\\u0000\\u0000\\u0003\\u0001\\u0000\\u0000\\u0000\\u0000\"\n\t\t\t+ \"\\u0005\\u0001\\u0000\\u0000\\u0000\\u0000\\u0007\\u0001\\u0000\\u0000\\u0000\\u0000\"\n\t\t\t+ \"\\t\\u0001\\u0000\\u0000\\u0000\\u0000\\u000b\\u0001\\u0000\\u0000\\u0000\\u0000\\r\"\n\t\t\t+ \"\\u0001\\u0000\\u0000\\u0000\\u0000\\u000f\\u0001\\u0000\\u0000\\u0000\\u0000\\u0011\"\n\t\t\t+ \"\\u0001\\u0000\\u0000\\u0000\\u0000\\u0013\\u0001\\u0000\\u0000\\u0000\\u0000\\u0015\"\n\t\t\t+ \"\\u0001\\u0000\\u0000\\u0000\\u0000\\u0017\\u0001\\u0000\\u0000\\u0000\\u0000\\u0019\"\n\t\t\t+ \"\\u0001\\u0000\\u0000\\u0000\\u0000\\u001b\\u0001\\u0000\\u0000\\u0000\\u0000\\u001d\"\n\t\t\t+ \"\\u0001\\u0000\\u0000\\u0000\\u0000\\u001f\\u0001\\u0000\\u0000\\u0000\\u0000!\\u0001\"\n\t\t\t+ \"\\u0000\\u0000\\u0000\\u0000#\\u0001\\u0000\\u0000\\u0000\\u0000%\\u0001\\u0000\\u0000\"\n\t\t\t+ \"\\u0000\\u0000\\'\\u0001\\u0000\\u0000\\u0000\\u0000)\\u0001\\u0000\\u0000\\u0000\"\n\t\t\t+ \"\\u0000+\\u0001\\u0000\\u0000\\u0000\\u0000-\\u0001\\u0000\\u0000\\u0000\\u0000/\"\n\t\t\t+ \"\\u0001\\u0000\\u0000\\u0000\\u00001\\u0001\\u0000\\u0000\\u0000\\u00009\\u0001\\u0000\"\n\t\t\t+ \"\\u0000\\u0000\\u0001E\\u0001\\u0000\\u0000\\u0000\\u0003G\\u0001\\u0000\\u0000\\u0000\"\n\t\t\t+ \"\\u0005I\\u0001\\u0000\\u0000\\u0000\\u0007K\\u0001\\u0000\\u0000\\u0000\\tM\\u0001\"\n\t\t\t+ \"\\u0000\\u0000\\u0000\\u000bO\\u0001\\u0000\\u0000\\u0000\\rQ\\u0001\\u0000\\u0000\"\n\t\t\t+ \"\\u0000\\u000fS\\u0001\\u0000\\u0000\\u0000\\u0011V\\u0001\\u0000\\u0000\\u0000\\u0013\"\n\t\t\t+ \"X\\u0001\\u0000\\u0000\\u0000\\u0015Z\\u0001\\u0000\\u0000\\u0000\\u0017\\\\\\u0001\"\n\t\t\t+ \"\\u0000\\u0000\\u0000\\u0019_\\u0001\\u0000\\u0000\\u0000\\u001ba\\u0001\\u0000\\u0000\"\n\t\t\t+ \"\\u0000\\u001dd\\u0001\\u0000\\u0000\\u0000\\u001fo\\u0001\\u0000\\u0000\\u0000!\"\n\t\t\t+ \"w\\u0001\\u0000\\u0000\\u0000#}\\u0001\\u0000\\u0000\\u0000%\\u0085\\u0001\\u0000\"\n\t\t\t+ \"\\u0000\\u0000\\'\\u008d\\u0001\\u0000\\u0000\\u0000)\\u00a1\\u0001\\u0000\\u0000\"\n\t\t\t+ \"\\u0000+\\u00b7\\u0001\\u0000\\u0000\\u0000-\\u00ba\\u0001\\u0000\\u0000\\u0000/\"\n\t\t\t+ \"\\u00be\\u0001\\u0000\\u0000\\u00001\\u00c2\\u0001\\u0000\\u0000\\u00003\\u00d8\\u0001\"\n\t\t\t+ \"\\u0000\\u0000\\u00005\\u00da\\u0001\\u0000\\u0000\\u00007\\u00dc\\u0001\\u0000\\u0000\"\n\t\t\t+ \"\\u00009\\u00df\\u0001\\u0000\\u0000\\u0000;<\\u0005W\\u0000\\u0000<=\\u0005H\\u0000\"\n\t\t\t+ \"\\u0000=>\\u0005E\\u0000\\u0000>?\\u0005R\\u0000\\u0000?F\\u0005E\\u0000\\u0000\"\n\t\t\t+ \"@A\\u0005w\\u0000\\u0000AB\\u0005h\\u0000\\u0000BC\\u0005e\\u0000\\u0000CD\\u0005\"\n\t\t\t+ \"r\\u0000\\u0000DF\\u0005e\\u0000\\u0000E;\\u0001\\u0000\\u0000\\u0000E@\\u0001\\u0000\"\n\t\t\t+ \"\\u0000\\u0000F\\u0002\\u0001\\u0000\\u0000\\u0000GH\\u0005.\\u0000\\u0000H\\u0004\"\n\t\t\t+ \"\\u0001\\u0000\\u0000\\u0000IJ\\u0005,\\u0000\\u0000J\\u0006\\u0001\\u0000\\u0000\"\n\t\t\t+ \"\\u0000KL\\u0005[\\u0000\\u0000L\\b\\u0001\\u0000\\u0000\\u0000MN\\u0005]\\u0000\"\n\t\t\t+ \"\\u0000N\\n\\u0001\\u0000\\u0000\\u0000OP\\u0005(\\u0000\\u0000P\\f\\u0001\\u0000\"\n\t\t\t+ \"\\u0000\\u0000QR\\u0005)\\u0000\\u0000R\\u000e\\u0001\\u0000\\u0000\\u0000ST\\u0005\"\n\t\t\t+ \"=\\u0000\\u0000TU\\u0005=\\u0000\\u0000U\\u0010\\u0001\\u0000\\u0000\\u0000VW\\u0005\"\n\t\t\t+ \"-\\u0000\\u0000W\\u0012\\u0001\\u0000\\u0000\\u0000XY\\u0005+\\u0000\\u0000Y\\u0014\"\n\t\t\t+ \"\\u0001\\u0000\\u0000\\u0000Z[\\u0005>\\u0000\\u0000[\\u0016\\u0001\\u0000\\u0000\"\n\t\t\t+ \"\\u0000\\\\]\\u0005>\\u0000\\u0000]^\\u0005=\\u0000\\u0000^\\u0018\\u0001\\u0000\\u0000\"\n\t\t\t+ \"\\u0000_`\\u0005<\\u0000\\u0000`\\u001a\\u0001\\u0000\\u0000\\u0000ab\\u0005<\\u0000\"\n\t\t\t+ \"\\u0000bc\\u0005=\\u0000\\u0000c\\u001c\\u0001\\u0000\\u0000\\u0000de\\u0005!\\u0000\"\n\t\t\t+ \"\\u0000ef\\u0005=\\u0000\\u0000f\\u001e\\u0001\\u0000\\u0000\\u0000gh\\u0005A\\u0000\"\n\t\t\t+ \"\\u0000hi\\u0005N\\u0000\\u0000ip\\u0005D\\u0000\\u0000jk\\u0005a\\u0000\\u0000\"\n\t\t\t+ \"kl\\u0005n\\u0000\\u0000lp\\u0005d\\u0000\\u0000mn\\u0005&\\u0000\\u0000np\\u0005\"\n\t\t\t+ \"&\\u0000\\u0000og\\u0001\\u0000\\u0000\\u0000oj\\u0001\\u0000\\u0000\\u0000om\\u0001\"\n\t\t\t+ \"\\u0000\\u0000\\u0000p \\u0001\\u0000\\u0000\\u0000qr\\u0005O\\u0000\\u0000rx\\u0005\"\n\t\t\t+ \"R\\u0000\\u0000st\\u0005o\\u0000\\u0000tx\\u0005r\\u0000\\u0000uv\\u0005|\\u0000\"\n\t\t\t+ \"\\u0000vx\\u0005|\\u0000\\u0000wq\\u0001\\u0000\\u0000\\u0000ws\\u0001\\u0000\\u0000\"\n\t\t\t+ \"\\u0000wu\\u0001\\u0000\\u0000\\u0000x\\\"\\u0001\\u0000\\u0000\\u0000yz\\u0005I\\u0000\"\n\t\t\t+ \"\\u0000z~\\u0005N\\u0000\\u0000{|\\u0005i\\u0000\\u0000|~\\u0005n\\u0000\\u0000\"\n\t\t\t+ \"}y\\u0001\\u0000\\u0000\\u0000}{\\u0001\\u0000\\u0000\\u0000~$\\u0001\\u0000\\u0000\"\n\t\t\t+ \"\\u0000\\u007f\\u0080\\u0005N\\u0000\\u0000\\u0080\\u0081\\u0005I\\u0000\\u0000\\u0081\"\n\t\t\t+ \"\\u0086\\u0005N\\u0000\\u0000\\u0082\\u0083\\u0005n\\u0000\\u0000\\u0083\\u0084\\u0005\"\n\t\t\t+ \"i\\u0000\\u0000\\u0084\\u0086\\u0005n\\u0000\\u0000\\u0085\\u007f\\u0001\\u0000\\u0000\"\n\t\t\t+ \"\\u0000\\u0085\\u0082\\u0001\\u0000\\u0000\\u0000\\u0086&\\u0001\\u0000\\u0000\\u0000\"\n\t\t\t+ \"\\u0087\\u0088\\u0005N\\u0000\\u0000\\u0088\\u0089\\u0005O\\u0000\\u0000\\u0089\\u008e\"\n\t\t\t+ \"\\u0005T\\u0000\\u0000\\u008a\\u008b\\u0005n\\u0000\\u0000\\u008b\\u008c\\u0005o\"\n\t\t\t+ \"\\u0000\\u0000\\u008c\\u008e\\u0005t\\u0000\\u0000\\u008d\\u0087\\u0001\\u0000\\u0000\"\n\t\t\t+ \"\\u0000\\u008d\\u008a\\u0001\\u0000\\u0000\\u0000\\u008e(\\u0001\\u0000\\u0000\\u0000\"\n\t\t\t+ \"\\u008f\\u0090\\u0005T\\u0000\\u0000\\u0090\\u0091\\u0005R\\u0000\\u0000\\u0091\\u0092\"\n\t\t\t+ \"\\u0005U\\u0000\\u0000\\u0092\\u00a2\\u0005E\\u0000\\u0000\\u0093\\u0094\\u0005t\"\n\t\t\t+ \"\\u0000\\u0000\\u0094\\u0095\\u0005r\\u0000\\u0000\\u0095\\u0096\\u0005u\\u0000\\u0000\"\n\t\t\t+ \"\\u0096\\u00a2\\u0005e\\u0000\\u0000\\u0097\\u0098\\u0005F\\u0000\\u0000\\u0098\\u0099\"\n\t\t\t+ \"\\u0005A\\u0000\\u0000\\u0099\\u009a\\u0005L\\u0000\\u0000\\u009a\\u009b\\u0005S\"\n\t\t\t+ \"\\u0000\\u0000\\u009b\\u00a2\\u0005E\\u0000\\u0000\\u009c\\u009d\\u0005f\\u0000\\u0000\"\n\t\t\t+ \"\\u009d\\u009e\\u0005a\\u0000\\u0000\\u009e\\u009f\\u0005l\\u0000\\u0000\\u009f\\u00a0\"\n\t\t\t+ \"\\u0005s\\u0000\\u0000\\u00a0\\u00a2\\u0005e\\u0000\\u0000\\u00a1\\u008f\\u0001\\u0000\"\n\t\t\t+ \"\\u0000\\u0000\\u00a1\\u0093\\u0001\\u0000\\u0000\\u0000\\u00a1\\u0097\\u0001\\u0000\"\n\t\t\t+ \"\\u0000\\u0000\\u00a1\\u009c\\u0001\\u0000\\u0000\\u0000\\u00a2*\\u0001\\u0000\\u0000\"\n\t\t\t+ \"\\u0000\\u00a3\\u00a9\\u0005\\'\\u0000\\u0000\\u00a4\\u00a8\\b\\u0000\\u0000\\u0000\"\n\t\t\t+ \"\\u00a5\\u00a6\\u0005\\\\\\u0000\\u0000\\u00a6\\u00a8\\t\\u0000\\u0000\\u0000\\u00a7\"\n\t\t\t+ \"\\u00a4\\u0001\\u0000\\u0000\\u0000\\u00a7\\u00a5\\u0001\\u0000\\u0000\\u0000\\u00a8\"\n\t\t\t+ \"\\u00ab\\u0001\\u0000\\u0000\\u0000\\u00a9\\u00a7\\u0001\\u0000\\u0000\\u0000\\u00a9\"\n\t\t\t+ \"\\u00aa\\u0001\\u0000\\u0000\\u0000\\u00aa\\u00ac\\u0001\\u0000\\u0000\\u0000\\u00ab\"\n\t\t\t+ \"\\u00a9\\u0001\\u0000\\u0000\\u0000\\u00ac\\u00b8\\u0005\\'\\u0000\\u0000\\u00ad\\u00b3\"\n\t\t\t+ \"\\u0005\\\"\\u0000\\u0000\\u00ae\\u00b2\\b\\u0001\\u0000\\u0000\\u00af\\u00b0\\u0005\"\n\t\t\t+ \"\\\\\\u0000\\u0000\\u00b0\\u00b2\\t\\u0000\\u0000\\u0000\\u00b1\\u00ae\\u0001\\u0000\"\n\t\t\t+ \"\\u0000\\u0000\\u00b1\\u00af\\u0001\\u0000\\u0000\\u0000\\u00b2\\u00b5\\u0001\\u0000\"\n\t\t\t+ \"\\u0000\\u0000\\u00b3\\u00b1\\u0001\\u0000\\u0000\\u0000\\u00b3\\u00b4\\u0001\\u0000\"\n\t\t\t+ \"\\u0000\\u0000\\u00b4\\u00b6\\u0001\\u0000\\u0000\\u0000\\u00b5\\u00b3\\u0001\\u0000\"\n\t\t\t+ \"\\u0000\\u0000\\u00b6\\u00b8\\u0005\\\"\\u0000\\u0000\\u00b7\\u00a3\\u0001\\u0000\\u0000\"\n\t\t\t+ \"\\u0000\\u00b7\\u00ad\\u0001\\u0000\\u0000\\u0000\\u00b8,\\u0001\\u0000\\u0000\\u0000\"\n\t\t\t+ \"\\u00b9\\u00bb\\u00035\\u001a\\u0000\\u00ba\\u00b9\\u0001\\u0000\\u0000\\u0000\\u00bb\"\n\t\t\t+ \"\\u00bc\\u0001\\u0000\\u0000\\u0000\\u00bc\\u00ba\\u0001\\u0000\\u0000\\u0000\\u00bc\"\n\t\t\t+ \"\\u00bd\\u0001\\u0000\\u0000\\u0000\\u00bd.\\u0001\\u0000\\u0000\\u0000\\u00be\\u00bf\"\n\t\t\t+ \"\\u00033\\u0019\\u0000\\u00bf0\\u0001\\u0000\\u0000\\u0000\\u00c0\\u00c3\\u00037\"\n\t\t\t+ \"\\u001b\\u0000\\u00c1\\u00c3\\u00035\\u001a\\u0000\\u00c2\\u00c0\\u0001\\u0000\\u0000\"\n\t\t\t+ \"\\u0000\\u00c2\\u00c1\\u0001\\u0000\\u0000\\u0000\\u00c3\\u00c4\\u0001\\u0000\\u0000\"\n\t\t\t+ \"\\u0000\\u00c4\\u00c2\\u0001\\u0000\\u0000\\u0000\\u00c4\\u00c5\\u0001\\u0000\\u0000\"\n\t\t\t+ \"\\u0000\\u00c52\\u0001\\u0000\\u0000\\u0000\\u00c6\\u00c8\\u00035\\u001a\\u0000\\u00c7\"\n\t\t\t+ \"\\u00c6\\u0001\\u0000\\u0000\\u0000\\u00c8\\u00c9\\u0001\\u0000\\u0000\\u0000\\u00c9\"\n\t\t\t+ \"\\u00c7\\u0001\\u0000\\u0000\\u0000\\u00c9\\u00ca\\u0001\\u0000\\u0000\\u0000\\u00ca\"\n\t\t\t+ \"\\u00cb\\u0001\\u0000\\u0000\\u0000\\u00cb\\u00cf\\u0005.\\u0000\\u0000\\u00cc\\u00ce\"\n\t\t\t+ \"\\u00035\\u001a\\u0000\\u00cd\\u00cc\\u0001\\u0000\\u0000\\u0000\\u00ce\\u00d1\\u0001\"\n\t\t\t+ \"\\u0000\\u0000\\u0000\\u00cf\\u00cd\\u0001\\u0000\\u0000\\u0000\\u00cf\\u00d0\\u0001\"\n\t\t\t+ \"\\u0000\\u0000\\u0000\\u00d0\\u00d9\\u0001\\u0000\\u0000\\u0000\\u00d1\\u00cf\\u0001\"\n\t\t\t+ \"\\u0000\\u0000\\u0000\\u00d2\\u00d4\\u0005.\\u0000\\u0000\\u00d3\\u00d5\\u00035\\u001a\"\n\t\t\t+ \"\\u0000\\u00d4\\u00d3\\u0001\\u0000\\u0000\\u0000\\u00d5\\u00d6\\u0001\\u0000\\u0000\"\n\t\t\t+ \"\\u0000\\u00d6\\u00d4\\u0001\\u0000\\u0000\\u0000\\u00d6\\u00d7\\u0001\\u0000\\u0000\"\n\t\t\t+ \"\\u0000\\u00d7\\u00d9\\u0001\\u0000\\u0000\\u0000\\u00d8\\u00c7\\u0001\\u0000\\u0000\"\n\t\t\t+ \"\\u0000\\u00d8\\u00d2\\u0001\\u0000\\u0000\\u0000\\u00d94\\u0001\\u0000\\u0000\\u0000\"\n\t\t\t+ \"\\u00da\\u00db\\u0007\\u0002\\u0000\\u0000\\u00db6\\u0001\\u0000\\u0000\\u0000\\u00dc\"\n\t\t\t+ \"\\u00dd\\u0007\\u0003\\u0000\\u0000\\u00dd8\\u0001\\u0000\\u0000\\u0000\\u00de\\u00e0\"\n\t\t\t+ \"\\u0007\\u0004\\u0000\\u0000\\u00df\\u00de\\u0001\\u0000\\u0000\\u0000\\u00e0\\u00e1\"\n\t\t\t+ \"\\u0001\\u0000\\u0000\\u0000\\u00e1\\u00df\\u0001\\u0000\\u0000\\u0000\\u00e1\\u00e2\"\n\t\t\t+ \"\\u0001\\u0000\\u0000\\u0000\\u00e2\\u00e3\\u0001\\u0000\\u0000\\u0000\\u00e3\\u00e4\"\n\t\t\t+ \"\\u0006\\u001c\\u0000\\u0000\\u00e4:\\u0001\\u0000\\u0000\\u0000\\u0015\\u0000Eo\"\n\t\t\t+ \"w}\\u0085\\u008d\\u00a1\\u00a7\\u00a9\\u00b1\\u00b3\\u00b7\\u00bc\\u00c2\\u00c4\\u00c9\"\n\t\t\t+ \"\\u00cf\\u00d6\\u00d8\\u00e1\\u0001\\u0000\\u0001\\u0000\";",
            "public static final int WHERE = 1, DOT = 2, COMMA = 3, LEFT_SQUARE_BRACKETS = 4, RIGHT_SQUARE_BRACKETS = 5,\n\t\t\tLEFT_PARENTHESIS = 6, RIGHT_PARENTHESIS = 7, EQUALS = 8, MINUS = 9, PLUS = 10, GT = 11, GE = 12, LT = 13,\n\t\t\tLE = 14, NE = 15, AND = 16, OR = 17, IN = 18, NIN = 19, NOT = 20, BOOLEAN_VALUE = 21, QUOTED_STRING = 22,\n\t\t\tINTEGER_VALUE = 23, DECIMAL_VALUE = 24, IDENTIFIER = 25, WS = 26;",
            "protected static final DFA[] _decisionToDFA;",
            "private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();",
            "@Deprecated\n\tpublic static final String[] tokenNames;",
            "public static final String[] ruleNames = makeRuleNames();",
            "public static String[] modeNames = { \"DEFAULT_MODE\" };"
        ],
        "functions": [
            {
                "name": "makeRuleNames",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new String[] { \"WHERE\", \"DOT\", \"COMMA\", \"LEFT_SQUARE_BRACKETS\", \"RIGHT_SQUARE_BRACKETS\",\n\t\t\t\t\"LEFT_PARENTHESIS\", \"RIGHT_PARENTHESIS\", \"EQUALS\", \"MINUS\", \"PLUS\", \"GT\", \"GE\", \"LT\", \"LE\", \"NE\", \"AND\",\n\t\t\t\t\"OR\", \"IN\", \"NIN\", \"NOT\", \"BOOLEAN_VALUE\", \"QUOTED_STRING\", \"INTEGER_VALUE\", \"DECIMAL_VALUE\",\n\t\t\t\t\"IDENTIFIER\", \"DECIMAL_DIGITS\", \"DIGIT\", \"LETTER\", \"WS\" };",
                "is_abstract": "",
                "class_name": "FiltersLexer",
                "annotations": []
            },
            {
                "name": "makeLiteralNames",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new String[] { null, null, \"'.'\", \"','\", \"'['\", \"']'\", \"'('\", \"')'\", \"'=='\", \"'-'\", \"'+'\", \"'>'\", \"'>='\",\n\t\t\t\t\"'<'\", \"'<='\", \"'!='\" };",
                "is_abstract": "",
                "class_name": "FiltersLexer",
                "annotations": []
            },
            {
                "name": "makeSymbolicNames",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new String[] { null, \"WHERE\", \"DOT\", \"COMMA\", \"LEFT_SQUARE_BRACKETS\", \"RIGHT_SQUARE_BRACKETS\",\n\t\t\t\t\"LEFT_PARENTHESIS\", \"RIGHT_PARENTHESIS\", \"EQUALS\", \"MINUS\", \"PLUS\", \"GT\", \"GE\", \"LT\", \"LE\", \"NE\", \"AND\",\n\t\t\t\t\"OR\", \"IN\", \"NIN\", \"NOT\", \"BOOLEAN_VALUE\", \"QUOTED_STRING\", \"INTEGER_VALUE\", \"DECIMAL_VALUE\",\n\t\t\t\t\"IDENTIFIER\", \"WS\" };",
                "is_abstract": "",
                "class_name": "FiltersLexer",
                "annotations": []
            },
            {
                "name": "getTokenNames",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return tokenNames;",
                "is_abstract": "",
                "class_name": "FiltersLexer",
                "annotations": []
            },
            {
                "name": "getVocabulary",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return VOCABULARY;",
                "is_abstract": "",
                "class_name": "FiltersLexer",
                "annotations": []
            },
            {
                "name": "getGrammarFileName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return \"Filters.g4\";",
                "is_abstract": "",
                "class_name": "FiltersLexer",
                "annotations": []
            },
            {
                "name": "getRuleNames",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return ruleNames;",
                "is_abstract": "",
                "class_name": "FiltersLexer",
                "annotations": []
            },
            {
                "name": "getSerializedATN",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return _serializedATN;",
                "is_abstract": "",
                "class_name": "FiltersLexer",
                "annotations": []
            },
            {
                "name": "getChannelNames",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return channelNames;",
                "is_abstract": "",
                "class_name": "FiltersLexer",
                "annotations": []
            },
            {
                "name": "getModeNames",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return modeNames;",
                "is_abstract": "",
                "class_name": "FiltersLexer",
                "annotations": []
            },
            {
                "name": "getATN",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return _ATN;",
                "is_abstract": "",
                "class_name": "FiltersLexer",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/vectorstore/filter/antlr4/FiltersBaseVisitor.java",
        "class_names": [
            "FiltersBaseVisitor"
        ],
        "imports": "import org.antlr.v4.runtime.tree.AbstractParseTreeVisitor;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.filter.antlr4.FiltersBaseVisitor": "org.springframework.ai.vectorstore.filter.antlr4.FiltersBaseVisitor",
            "org.springframework.ai.vectorstore.filter.antlr4.visitWher": "org.springframework.ai.vectorstore.filter.antlr4.visitWher",
            "org.springframework.ai.vectorstore.filter.antlr4.visitNinExpression": "org.springframework.ai.vectorstore.filter.antlr4.visitNinExpression",
            "org.springframework.ai.vectorstore.filter.antlr4.visitAndExpression": "org.springframework.ai.vectorstore.filter.antlr4.visitAndExpression",
            "org.springframework.ai.vectorstore.filter.antlr4.visitInExpression": "org.springframework.ai.vectorstore.filter.antlr4.visitInExpression",
            "org.springframework.ai.vectorstore.filter.antlr4.visitNotExpression": "org.springframework.ai.vectorstore.filter.antlr4.visitNotExpression",
            "org.springframework.ai.vectorstore.filter.antlr4.visitCompareExpression": "org.springframework.ai.vectorstore.filter.antlr4.visitCompareExpression",
            "org.springframework.ai.vectorstore.filter.antlr4.visitOrExpression": "org.springframework.ai.vectorstore.filter.antlr4.visitOrExpression",
            "org.springframework.ai.vectorstore.filter.antlr4.visitGroupExpression": "org.springframework.ai.vectorstore.filter.antlr4.visitGroupExpression",
            "org.springframework.ai.vectorstore.filter.antlr4.visitConstantArray": "org.springframework.ai.vectorstore.filter.antlr4.visitConstantArray",
            "org.springframework.ai.vectorstore.filter.antlr4.visitCompar": "org.springframework.ai.vectorstore.filter.antlr4.visitCompar",
            "org.springframework.ai.vectorstore.filter.antlr4.visitIdentifier": "org.springframework.ai.vectorstore.filter.antlr4.visitIdentifier",
            "org.springframework.ai.vectorstore.filter.antlr4.visitIntegerConstant": "org.springframework.ai.vectorstore.filter.antlr4.visitIntegerConstant",
            "org.springframework.ai.vectorstore.filter.antlr4.visitDecimalConstant": "org.springframework.ai.vectorstore.filter.antlr4.visitDecimalConstant",
            "org.springframework.ai.vectorstore.filter.antlr4.visitTextConstant": "org.springframework.ai.vectorstore.filter.antlr4.visitTextConstant",
            "org.springframework.ai.vectorstore.filter.antlr4.visitBooleanConstant": "org.springframework.ai.vectorstore.filter.antlr4.visitBooleanConstant"
        },
        "package": "package org.springframework.ai.vectorstore.filter.antlr4;",
        "property_declarations": [],
        "functions": [
            {
                "name": "visitWhere",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return visitChildren(ctx);",
                "is_abstract": "",
                "class_name": "FiltersBaseVisitor",
                "annotations": []
            },
            {
                "name": "visitNinExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return visitChildren(ctx);",
                "is_abstract": "",
                "class_name": "FiltersBaseVisitor",
                "annotations": []
            },
            {
                "name": "visitAndExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return visitChildren(ctx);",
                "is_abstract": "",
                "class_name": "FiltersBaseVisitor",
                "annotations": []
            },
            {
                "name": "visitInExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return visitChildren(ctx);",
                "is_abstract": "",
                "class_name": "FiltersBaseVisitor",
                "annotations": []
            },
            {
                "name": "visitNotExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return visitChildren(ctx);",
                "is_abstract": "",
                "class_name": "FiltersBaseVisitor",
                "annotations": []
            },
            {
                "name": "visitCompareExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return visitChildren(ctx);",
                "is_abstract": "",
                "class_name": "FiltersBaseVisitor",
                "annotations": []
            },
            {
                "name": "visitOrExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return visitChildren(ctx);",
                "is_abstract": "",
                "class_name": "FiltersBaseVisitor",
                "annotations": []
            },
            {
                "name": "visitGroupExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return visitChildren(ctx);",
                "is_abstract": "",
                "class_name": "FiltersBaseVisitor",
                "annotations": []
            },
            {
                "name": "visitConstantArray",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return visitChildren(ctx);",
                "is_abstract": "",
                "class_name": "FiltersBaseVisitor",
                "annotations": []
            },
            {
                "name": "visitCompare",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return visitChildren(ctx);",
                "is_abstract": "",
                "class_name": "FiltersBaseVisitor",
                "annotations": []
            },
            {
                "name": "visitIdentifier",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return visitChildren(ctx);",
                "is_abstract": "",
                "class_name": "FiltersBaseVisitor",
                "annotations": []
            },
            {
                "name": "visitIntegerConstant",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return visitChildren(ctx);",
                "is_abstract": "",
                "class_name": "FiltersBaseVisitor",
                "annotations": []
            },
            {
                "name": "visitDecimalConstant",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return visitChildren(ctx);",
                "is_abstract": "",
                "class_name": "FiltersBaseVisitor",
                "annotations": []
            },
            {
                "name": "visitTextConstant",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return visitChildren(ctx);",
                "is_abstract": "",
                "class_name": "FiltersBaseVisitor",
                "annotations": []
            },
            {
                "name": "visitBooleanConstant",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return visitChildren(ctx);",
                "is_abstract": "",
                "class_name": "FiltersBaseVisitor",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/vectorstore/filter/antlr4/FiltersParser.java",
        "class_names": [
            "ConstantArrayContext",
            "OrExpressionContext",
            "TextConstantContext",
            "CompareExpressionContext",
            "CompareContext",
            "IntegerConstantContext",
            "WhereContext",
            "ConstantContext",
            "NotExpressionContext",
            "GroupExpressionContext",
            "AndExpressionContext",
            "BooleanExpressionContext",
            "IdentifierContext",
            "DecimalConstantContext",
            "FiltersParser",
            "BooleanConstantContext",
            "NinExpressionContext",
            "InExpressionContext"
        ],
        "imports": "import org.antlr.v4.runtime.tree.*;\nimport java.util.List;\nimport org.antlr.v4.runtime.atn.*;\nimport org.antlr.v4.runtime.*;\nimport org.antlr.v4.runtime.dfa.DFA;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.filter.antlr4.FiltersParser": "org.springframework.ai.vectorstore.filter.antlr4.FiltersParser",
            "org.springframework.ai.vectorstore.filter.antlr4.WhereContext": "org.springframework.ai.vectorstore.filter.antlr4.WhereContext",
            "org.springframework.ai.vectorstore.filter.antlr4.BooleanExpressionContext": "org.springframework.ai.vectorstore.filter.antlr4.BooleanExpressionContext",
            "org.springframework.ai.vectorstore.filter.antlr4.NinExpressionContext": "org.springframework.ai.vectorstore.filter.antlr4.NinExpressionContext",
            "org.springframework.ai.vectorstore.filter.antlr4.AndExpressionContext": "org.springframework.ai.vectorstore.filter.antlr4.AndExpressionContext",
            "org.springframework.ai.vectorstore.filter.antlr4.InExpressionContext": "org.springframework.ai.vectorstore.filter.antlr4.InExpressionContext",
            "org.springframework.ai.vectorstore.filter.antlr4.NotExpressionContext": "org.springframework.ai.vectorstore.filter.antlr4.NotExpressionContext",
            "org.springframework.ai.vectorstore.filter.antlr4.CompareExpressionContext": "org.springframework.ai.vectorstore.filter.antlr4.CompareExpressionContext",
            "org.springframework.ai.vectorstore.filter.antlr4.OrExpressionContext": "org.springframework.ai.vectorstore.filter.antlr4.OrExpressionContext",
            "org.springframework.ai.vectorstore.filter.antlr4.GroupExpressionContext": "org.springframework.ai.vectorstore.filter.antlr4.GroupExpressionContext",
            "org.springframework.ai.vectorstore.filter.antlr4.ConstantArrayContext": "org.springframework.ai.vectorstore.filter.antlr4.ConstantArrayContext",
            "org.springframework.ai.vectorstore.filter.antlr4.CompareContext": "org.springframework.ai.vectorstore.filter.antlr4.CompareContext",
            "org.springframework.ai.vectorstore.filter.antlr4.IdentifierContext": "org.springframework.ai.vectorstore.filter.antlr4.IdentifierContext",
            "org.springframework.ai.vectorstore.filter.antlr4.ConstantContext": "org.springframework.ai.vectorstore.filter.antlr4.ConstantContext",
            "org.springframework.ai.vectorstore.filter.antlr4.DecimalConstantContext": "org.springframework.ai.vectorstore.filter.antlr4.DecimalConstantContext",
            "org.springframework.ai.vectorstore.filter.antlr4.TextConstantContext": "org.springframework.ai.vectorstore.filter.antlr4.TextConstantContext",
            "org.springframework.ai.vectorstore.filter.antlr4.BooleanConstantContext": "org.springframework.ai.vectorstore.filter.antlr4.BooleanConstantContext",
            "org.springframework.ai.vectorstore.filter.antlr4.IntegerConstantContext": "org.springframework.ai.vectorstore.filter.antlr4.IntegerConstantContext",
            "org.springframework.ai.vectorstore.filter.antlr4.makeRuleNames": "org.springframework.ai.vectorstore.filter.antlr4.makeRuleNames",
            "org.springframework.ai.vectorstore.filter.antlr4.makeLiteralNames": "org.springframework.ai.vectorstore.filter.antlr4.makeLiteralNames",
            "org.springframework.ai.vectorstore.filter.antlr4.makeSymbolicNames": "org.springframework.ai.vectorstore.filter.antlr4.makeSymbolicNames",
            "org.springframework.ai.vectorstore.filter.antlr4.getTokenNames": "org.springframework.ai.vectorstore.filter.antlr4.getTokenNames",
            "org.springframework.ai.vectorstore.filter.antlr4.getVocabulary": "org.springframework.ai.vectorstore.filter.antlr4.getVocabulary",
            "org.springframework.ai.vectorstore.filter.antlr4.getGrammarFileNam": "org.springframework.ai.vectorstore.filter.antlr4.getGrammarFileNam",
            "org.springframework.ai.vectorstore.filter.antlr4.getRuleNames": "org.springframework.ai.vectorstore.filter.antlr4.getRuleNames",
            "org.springframework.ai.vectorstore.filter.antlr4.getSerializedATN": "org.springframework.ai.vectorstore.filter.antlr4.getSerializedATN",
            "org.springframework.ai.vectorstore.filter.antlr4.getATN": "org.springframework.ai.vectorstore.filter.antlr4.getATN",
            "org.springframework.ai.vectorstore.filter.antlr4.WHERE": "org.springframework.ai.vectorstore.filter.antlr4.WHERE",
            "org.springframework.ai.vectorstore.filter.antlr4.booleanExpression": "org.springframework.ai.vectorstore.filter.antlr4.booleanExpression",
            "org.springframework.ai.vectorstore.filter.antlr4.EOF": "org.springframework.ai.vectorstore.filter.antlr4.EOF",
            "org.springframework.ai.vectorstore.filter.antlr4.getRuleIndex": "org.springframework.ai.vectorstore.filter.antlr4.getRuleIndex",
            "org.springframework.ai.vectorstore.filter.antlr4.enterRul": "org.springframework.ai.vectorstore.filter.antlr4.enterRul",
            "org.springframework.ai.vectorstore.filter.antlr4.exitRul": "org.springframework.ai.vectorstore.filter.antlr4.exitRul",
            "org.springframework.ai.vectorstore.filter.antlr4.accept": "org.springframework.ai.vectorstore.filter.antlr4.accept",
            "org.springframework.ai.vectorstore.filter.antlr4.wher": "org.springframework.ai.vectorstore.filter.antlr4.wher",
            "org.springframework.ai.vectorstore.filter.antlr4.copyFrom": "org.springframework.ai.vectorstore.filter.antlr4.copyFrom",
            "org.springframework.ai.vectorstore.filter.antlr4.identifier": "org.springframework.ai.vectorstore.filter.antlr4.identifier",
            "org.springframework.ai.vectorstore.filter.antlr4.constantArray": "org.springframework.ai.vectorstore.filter.antlr4.constantArray",
            "org.springframework.ai.vectorstore.filter.antlr4.NOT": "org.springframework.ai.vectorstore.filter.antlr4.NOT",
            "org.springframework.ai.vectorstore.filter.antlr4.IN": "org.springframework.ai.vectorstore.filter.antlr4.IN",
            "org.springframework.ai.vectorstore.filter.antlr4.NIN": "org.springframework.ai.vectorstore.filter.antlr4.NIN",
            "org.springframework.ai.vectorstore.filter.antlr4.AND": "org.springframework.ai.vectorstore.filter.antlr4.AND",
            "org.springframework.ai.vectorstore.filter.antlr4.compar": "org.springframework.ai.vectorstore.filter.antlr4.compar",
            "org.springframework.ai.vectorstore.filter.antlr4.constant": "org.springframework.ai.vectorstore.filter.antlr4.constant",
            "org.springframework.ai.vectorstore.filter.antlr4.OR": "org.springframework.ai.vectorstore.filter.antlr4.OR",
            "org.springframework.ai.vectorstore.filter.antlr4.LEFT_PARENTHESIS": "org.springframework.ai.vectorstore.filter.antlr4.LEFT_PARENTHESIS",
            "org.springframework.ai.vectorstore.filter.antlr4.RIGHT_PARENTHESIS": "org.springframework.ai.vectorstore.filter.antlr4.RIGHT_PARENTHESIS",
            "org.springframework.ai.vectorstore.filter.antlr4.LEFT_SQUARE_BRACKETS": "org.springframework.ai.vectorstore.filter.antlr4.LEFT_SQUARE_BRACKETS",
            "org.springframework.ai.vectorstore.filter.antlr4.RIGHT_SQUARE_BRACKETS": "org.springframework.ai.vectorstore.filter.antlr4.RIGHT_SQUARE_BRACKETS",
            "org.springframework.ai.vectorstore.filter.antlr4.COMMA": "org.springframework.ai.vectorstore.filter.antlr4.COMMA",
            "org.springframework.ai.vectorstore.filter.antlr4.EQUALS": "org.springframework.ai.vectorstore.filter.antlr4.EQUALS",
            "org.springframework.ai.vectorstore.filter.antlr4.GT": "org.springframework.ai.vectorstore.filter.antlr4.GT",
            "org.springframework.ai.vectorstore.filter.antlr4.GE": "org.springframework.ai.vectorstore.filter.antlr4.GE",
            "org.springframework.ai.vectorstore.filter.antlr4.LT": "org.springframework.ai.vectorstore.filter.antlr4.LT",
            "org.springframework.ai.vectorstore.filter.antlr4.LE": "org.springframework.ai.vectorstore.filter.antlr4.LE",
            "org.springframework.ai.vectorstore.filter.antlr4.NE": "org.springframework.ai.vectorstore.filter.antlr4.NE",
            "org.springframework.ai.vectorstore.filter.antlr4.IDENTIFIER": "org.springframework.ai.vectorstore.filter.antlr4.IDENTIFIER",
            "org.springframework.ai.vectorstore.filter.antlr4.DOT": "org.springframework.ai.vectorstore.filter.antlr4.DOT",
            "org.springframework.ai.vectorstore.filter.antlr4.QUOTED_STRING": "org.springframework.ai.vectorstore.filter.antlr4.QUOTED_STRING",
            "org.springframework.ai.vectorstore.filter.antlr4.DECIMAL_VALUE": "org.springframework.ai.vectorstore.filter.antlr4.DECIMAL_VALUE",
            "org.springframework.ai.vectorstore.filter.antlr4.MINUS": "org.springframework.ai.vectorstore.filter.antlr4.MINUS",
            "org.springframework.ai.vectorstore.filter.antlr4.PLUS": "org.springframework.ai.vectorstore.filter.antlr4.PLUS",
            "org.springframework.ai.vectorstore.filter.antlr4.BOOLEAN_VALUE": "org.springframework.ai.vectorstore.filter.antlr4.BOOLEAN_VALUE",
            "org.springframework.ai.vectorstore.filter.antlr4.INTEGER_VALUE": "org.springframework.ai.vectorstore.filter.antlr4.INTEGER_VALUE",
            "org.springframework.ai.vectorstore.filter.antlr4.sempred": "org.springframework.ai.vectorstore.filter.antlr4.sempred",
            "org.springframework.ai.vectorstore.filter.antlr4.booleanExpression_sempred": "org.springframework.ai.vectorstore.filter.antlr4.booleanExpression_sempred",
            "org.springframework.ai.vectorstore.filter.antlr4._decisionToDFA": "org.springframework.ai.vectorstore.filter.antlr4._decisionToDFA",
            "org.springframework.ai.vectorstore.filter.antlr4._sharedContextCach": "org.springframework.ai.vectorstore.filter.antlr4._sharedContextCach",
            "org.springframework.ai.vectorstore.filter.antlr4.RULE_wher": "org.springframework.ai.vectorstore.filter.antlr4.RULE_wher",
            "org.springframework.ai.vectorstore.filter.antlr4.ruleNames": "org.springframework.ai.vectorstore.filter.antlr4.ruleNames",
            "org.springframework.ai.vectorstore.filter.antlr4._LITERAL_NAMES": "org.springframework.ai.vectorstore.filter.antlr4._LITERAL_NAMES",
            "org.springframework.ai.vectorstore.filter.antlr4._SYMBOLIC_NAMES": "org.springframework.ai.vectorstore.filter.antlr4._SYMBOLIC_NAMES",
            "org.springframework.ai.vectorstore.filter.antlr4.VOCABULARY": "org.springframework.ai.vectorstore.filter.antlr4.VOCABULARY",
            "org.springframework.ai.vectorstore.filter.antlr4.publi": "org.springframework.ai.vectorstore.filter.antlr4.publi",
            "org.springframework.ai.vectorstore.filter.antlr4.left": "org.springframework.ai.vectorstore.filter.antlr4.left",
            "org.springframework.ai.vectorstore.filter.antlr4.operator": "org.springframework.ai.vectorstore.filter.antlr4.operator",
            "org.springframework.ai.vectorstore.filter.antlr4.right": "org.springframework.ai.vectorstore.filter.antlr4.right",
            "org.springframework.ai.vectorstore.filter.antlr4._serializedATN": "org.springframework.ai.vectorstore.filter.antlr4._serializedATN",
            "org.springframework.ai.vectorstore.filter.antlr4._ATN": "org.springframework.ai.vectorstore.filter.antlr4._ATN"
        },
        "package": "package org.springframework.ai.vectorstore.filter.antlr4;",
        "property_declarations": [
            "protected static final PredictionContextCache _sharedContextCache = new PredictionContextCache();",
            "public static final int RULE_where = 0, RULE_booleanExpression = 1, RULE_constantArray = 2, RULE_compare = 3,\n\t\t\tRULE_identifier = 4, RULE_constant = 5;",
            "public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);",
            "public static final ATN _ATN = new ATNDeserializer().deserialize(_serializedATN.toCharArray());",
            "private static final String[] _LITERAL_NAMES = makeLiteralNames();",
            "public static final int WHERE = 1, DOT = 2, COMMA = 3, LEFT_SQUARE_BRACKETS = 4, RIGHT_SQUARE_BRACKETS = 5,\n\t\t\tLEFT_PARENTHESIS = 6, RIGHT_PARENTHESIS = 7, EQUALS = 8, MINUS = 9, PLUS = 10, GT = 11, GE = 12, LT = 13,\n\t\t\tLE = 14, NE = 15, AND = 16, OR = 17, IN = 18, NIN = 19, NOT = 20, BOOLEAN_VALUE = 21, QUOTED_STRING = 22,\n\t\t\tINTEGER_VALUE = 23, DECIMAL_VALUE = 24, IDENTIFIER = 25, WS = 26;",
            "public Token operator;",
            "public static final String _serializedATN = \"\\u0004\\u0001\\u001aY\\u0002\\u0000\\u0007\\u0000\\u0002\\u0001\\u0007\\u0001\\u0002\"\n\t\t\t+ \"\\u0002\\u0007\\u0002\\u0002\\u0003\\u0007\\u0003\\u0002\\u0004\\u0007\\u0004\\u0002\"\n\t\t\t+ \"\\u0005\\u0007\\u0005\\u0001\\u0000\\u0001\\u0000\\u0001\\u0000\\u0001\\u0000\\u0001\"\n\t\t\t+ \"\\u0001\\u0001\\u0001\\u0001\\u0001\\u0001\\u0001\\u0001\\u0001\\u0001\\u0001\\u0001\"\n\t\t\t+ \"\\u0001\\u0001\\u0001\\u0001\\u0001\\u0001\\u0001\\u0001\\u0001\\u0001\\u0001\\u0001\"\n\t\t\t+ \"\\u0001\\u0003\\u0001\\u001e\\b\\u0001\\u0001\\u0001\\u0001\\u0001\\u0001\\u0001\\u0001\"\n\t\t\t+ \"\\u0001\\u0001\\u0001\\u0001\\u0001\\u0001\\u0001\\u0001\\u0001\\u0003\\u0001(\\b\"\n\t\t\t+ \"\\u0001\\u0001\\u0001\\u0001\\u0001\\u0001\\u0001\\u0001\\u0001\\u0001\\u0001\\u0001\"\n\t\t\t+ \"\\u0001\\u0005\\u00010\\b\\u0001\\n\\u0001\\f\\u00013\\t\\u0001\\u0001\\u0002\\u0001\"\n\t\t\t+ \"\\u0002\\u0001\\u0002\\u0001\\u0002\\u0005\\u00029\\b\\u0002\\n\\u0002\\f\\u0002<\\t\"\n\t\t\t+ \"\\u0002\\u0001\\u0002\\u0001\\u0002\\u0001\\u0003\\u0001\\u0003\\u0001\\u0004\\u0001\"\n\t\t\t+ \"\\u0004\\u0001\\u0004\\u0001\\u0004\\u0001\\u0004\\u0003\\u0004G\\b\\u0004\\u0001\"\n\t\t\t+ \"\\u0005\\u0003\\u0005J\\b\\u0005\\u0001\\u0005\\u0001\\u0005\\u0003\\u0005N\\b\\u0005\"\n\t\t\t+ \"\\u0001\\u0005\\u0001\\u0005\\u0004\\u0005R\\b\\u0005\\u000b\\u0005\\f\\u0005S\\u0001\"\n\t\t\t+ \"\\u0005\\u0003\\u0005W\\b\\u0005\\u0001\\u0005\\u0000\\u0001\\u0002\\u0006\\u0000\"\n\t\t\t+ \"\\u0002\\u0004\\u0006\\b\\n\\u0000\\u0002\\u0002\\u0000\\b\\b\\u000b\\u000f\\u0001\\u0000\"\n\t\t\t+ \"\\t\\nb\\u0000\\f\\u0001\\u0000\\u0000\\u0000\\u0002\\'\\u0001\\u0000\\u0000\\u0000\"\n\t\t\t+ \"\\u00044\\u0001\\u0000\\u0000\\u0000\\u0006?\\u0001\\u0000\\u0000\\u0000\\bF\\u0001\"\n\t\t\t+ \"\\u0000\\u0000\\u0000\\nV\\u0001\\u0000\\u0000\\u0000\\f\\r\\u0005\\u0001\\u0000\\u0000\"\n\t\t\t+ \"\\r\\u000e\\u0003\\u0002\\u0001\\u0000\\u000e\\u000f\\u0005\\u0000\\u0000\\u0001\\u000f\"\n\t\t\t+ \"\\u0001\\u0001\\u0000\\u0000\\u0000\\u0010\\u0011\\u0006\\u0001\\uffff\\uffff\\u0000\"\n\t\t\t+ \"\\u0011\\u0012\\u0003\\b\\u0004\\u0000\\u0012\\u0013\\u0003\\u0006\\u0003\\u0000\\u0013\"\n\t\t\t+ \"\\u0014\\u0003\\n\\u0005\\u0000\\u0014(\\u0001\\u0000\\u0000\\u0000\\u0015\\u0016\"\n\t\t\t+ \"\\u0003\\b\\u0004\\u0000\\u0016\\u0017\\u0005\\u0012\\u0000\\u0000\\u0017\\u0018\\u0003\"\n\t\t\t+ \"\\u0004\\u0002\\u0000\\u0018(\\u0001\\u0000\\u0000\\u0000\\u0019\\u001d\\u0003\\b\"\n\t\t\t+ \"\\u0004\\u0000\\u001a\\u001b\\u0005\\u0014\\u0000\\u0000\\u001b\\u001e\\u0005\\u0012\"\n\t\t\t+ \"\\u0000\\u0000\\u001c\\u001e\\u0005\\u0013\\u0000\\u0000\\u001d\\u001a\\u0001\\u0000\"\n\t\t\t+ \"\\u0000\\u0000\\u001d\\u001c\\u0001\\u0000\\u0000\\u0000\\u001e\\u001f\\u0001\\u0000\"\n\t\t\t+ \"\\u0000\\u0000\\u001f \\u0003\\u0004\\u0002\\u0000 (\\u0001\\u0000\\u0000\\u0000\"\n\t\t\t+ \"!\\\"\\u0005\\u0006\\u0000\\u0000\\\"#\\u0003\\u0002\\u0001\\u0000#$\\u0005\\u0007\\u0000\"\n\t\t\t+ \"\\u0000$(\\u0001\\u0000\\u0000\\u0000%&\\u0005\\u0014\\u0000\\u0000&(\\u0003\\u0002\"\n\t\t\t+ \"\\u0001\\u0001\\'\\u0010\\u0001\\u0000\\u0000\\u0000\\'\\u0015\\u0001\\u0000\\u0000\"\n\t\t\t+ \"\\u0000\\'\\u0019\\u0001\\u0000\\u0000\\u0000\\'!\\u0001\\u0000\\u0000\\u0000\\'%\\u0001\"\n\t\t\t+ \"\\u0000\\u0000\\u0000(1\\u0001\\u0000\\u0000\\u0000)*\\n\\u0004\\u0000\\u0000*+\\u0005\"\n\t\t\t+ \"\\u0010\\u0000\\u0000+0\\u0003\\u0002\\u0001\\u0005,-\\n\\u0003\\u0000\\u0000-.\\u0005\"\n\t\t\t+ \"\\u0011\\u0000\\u0000.0\\u0003\\u0002\\u0001\\u0004/)\\u0001\\u0000\\u0000\\u0000\"\n\t\t\t+ \"/,\\u0001\\u0000\\u0000\\u000003\\u0001\\u0000\\u0000\\u00001/\\u0001\\u0000\\u0000\"\n\t\t\t+ \"\\u000012\\u0001\\u0000\\u0000\\u00002\\u0003\\u0001\\u0000\\u0000\\u000031\\u0001\"\n\t\t\t+ \"\\u0000\\u0000\\u000045\\u0005\\u0004\\u0000\\u00005:\\u0003\\n\\u0005\\u000067\\u0005\"\n\t\t\t+ \"\\u0003\\u0000\\u000079\\u0003\\n\\u0005\\u000086\\u0001\\u0000\\u0000\\u00009<\\u0001\"\n\t\t\t+ \"\\u0000\\u0000\\u0000:8\\u0001\\u0000\\u0000\\u0000:;\\u0001\\u0000\\u0000\\u0000\"\n\t\t\t+ \";=\\u0001\\u0000\\u0000\\u0000<:\\u0001\\u0000\\u0000\\u0000=>\\u0005\\u0005\\u0000\"\n\t\t\t+ \"\\u0000>\\u0005\\u0001\\u0000\\u0000\\u0000?@\\u0007\\u0000\\u0000\\u0000@\\u0007\"\n\t\t\t+ \"\\u0001\\u0000\\u0000\\u0000AB\\u0005\\u0019\\u0000\\u0000BC\\u0005\\u0002\\u0000\"\n\t\t\t+ \"\\u0000CG\\u0005\\u0019\\u0000\\u0000DG\\u0005\\u0019\\u0000\\u0000EG\\u0005\\u0016\"\n\t\t\t+ \"\\u0000\\u0000FA\\u0001\\u0000\\u0000\\u0000FD\\u0001\\u0000\\u0000\\u0000FE\\u0001\"\n\t\t\t+ \"\\u0000\\u0000\\u0000G\\t\\u0001\\u0000\\u0000\\u0000HJ\\u0007\\u0001\\u0000\\u0000\"\n\t\t\t+ \"IH\\u0001\\u0000\\u0000\\u0000IJ\\u0001\\u0000\\u0000\\u0000JK\\u0001\\u0000\\u0000\"\n\t\t\t+ \"\\u0000KW\\u0005\\u0017\\u0000\\u0000LN\\u0007\\u0001\\u0000\\u0000ML\\u0001\\u0000\"\n\t\t\t+ \"\\u0000\\u0000MN\\u0001\\u0000\\u0000\\u0000NO\\u0001\\u0000\\u0000\\u0000OW\\u0005\"\n\t\t\t+ \"\\u0018\\u0000\\u0000PR\\u0005\\u0016\\u0000\\u0000QP\\u0001\\u0000\\u0000\\u0000\"\n\t\t\t+ \"RS\\u0001\\u0000\\u0000\\u0000SQ\\u0001\\u0000\\u0000\\u0000ST\\u0001\\u0000\\u0000\"\n\t\t\t+ \"\\u0000TW\\u0001\\u0000\\u0000\\u0000UW\\u0005\\u0015\\u0000\\u0000VI\\u0001\\u0000\"\n\t\t\t+ \"\\u0000\\u0000VM\\u0001\\u0000\\u0000\\u0000VQ\\u0001\\u0000\\u0000\\u0000VU\\u0001\"\n\t\t\t+ \"\\u0000\\u0000\\u0000W\\u000b\\u0001\\u0000\\u0000\\u0000\\n\\u001d\\'/1:FIMSV\";",
            "protected static final DFA[] _decisionToDFA;",
            "private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();",
            "@Deprecated\n\tpublic static final String[] tokenNames;",
            "public static final String[] ruleNames = makeRuleNames();",
            "public BooleanExpressionContext left;",
            "public BooleanExpressionContext right;"
        ],
        "functions": [
            {
                "name": "makeRuleNames",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new String[] { \"where\", \"booleanExpression\", \"constantArray\", \"compare\", \"identifier\", \"constant\" };",
                "is_abstract": "",
                "class_name": "FiltersParser",
                "annotations": []
            },
            {
                "name": "makeLiteralNames",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new String[] { null, null, \"'.'\", \"','\", \"'['\", \"']'\", \"'('\", \"')'\", \"'=='\", \"'-'\", \"'+'\", \"'>'\", \"'>='\",\n\t\t\t\t\"'<'\", \"'<='\", \"'!='\" };",
                "is_abstract": "",
                "class_name": "FiltersParser",
                "annotations": []
            },
            {
                "name": "makeSymbolicNames",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new String[] { null, \"WHERE\", \"DOT\", \"COMMA\", \"LEFT_SQUARE_BRACKETS\", \"RIGHT_SQUARE_BRACKETS\",\n\t\t\t\t\"LEFT_PARENTHESIS\", \"RIGHT_PARENTHESIS\", \"EQUALS\", \"MINUS\", \"PLUS\", \"GT\", \"GE\", \"LT\", \"LE\", \"NE\", \"AND\",\n\t\t\t\t\"OR\", \"IN\", \"NIN\", \"NOT\", \"BOOLEAN_VALUE\", \"QUOTED_STRING\", \"INTEGER_VALUE\", \"DECIMAL_VALUE\",\n\t\t\t\t\"IDENTIFIER\", \"WS\" };",
                "is_abstract": "",
                "class_name": "FiltersParser",
                "annotations": []
            },
            {
                "name": "getTokenNames",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return tokenNames;",
                "is_abstract": "",
                "class_name": "FiltersParser",
                "annotations": []
            },
            {
                "name": "getVocabulary",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return VOCABULARY;",
                "is_abstract": "",
                "class_name": "FiltersParser",
                "annotations": []
            },
            {
                "name": "getGrammarFileName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return \"Filters.g4\";",
                "is_abstract": "",
                "class_name": "FiltersParser",
                "annotations": []
            },
            {
                "name": "getRuleNames",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return ruleNames;",
                "is_abstract": "",
                "class_name": "FiltersParser",
                "annotations": []
            },
            {
                "name": "getSerializedATN",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return _serializedATN;",
                "is_abstract": "",
                "class_name": "FiltersParser",
                "annotations": []
            },
            {
                "name": "getATN",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return _ATN;",
                "is_abstract": "",
                "class_name": "FiltersParser",
                "annotations": [
                    "@SuppressWarnings(\"CheckReturnValue\")"
                ]
            },
            {
                "name": "WHERE",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return getToken(FiltersParser.WHERE, 0);",
                "is_abstract": "",
                "class_name": "FiltersParser WhereContext",
                "annotations": []
            },
            {
                "name": "booleanExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return getRuleContext(BooleanExpressionContext.class, 0);",
                "is_abstract": "",
                "class_name": "FiltersParser WhereContext",
                "annotations": []
            },
            {
                "name": "EOF",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return getToken(FiltersParser.EOF, 0);",
                "is_abstract": "",
                "class_name": "FiltersParser WhereContext",
                "annotations": []
            },
            {
                "name": "getRuleIndex",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return RULE_where;",
                "is_abstract": "",
                "class_name": "FiltersParser WhereContext",
                "annotations": []
            },
            {
                "name": "enterRule",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (listener instanceof FiltersListener)\n\t\t\t\t((FiltersListener) listener).enterWhere(this);",
                "is_abstract": "",
                "class_name": "FiltersParser WhereContext",
                "annotations": []
            },
            {
                "name": "exitRule",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (listener instanceof FiltersListener)\n\t\t\t\t((FiltersListener) listener).exitWhere(this);",
                "is_abstract": "",
                "class_name": "FiltersParser WhereContext",
                "annotations": []
            },
            {
                "name": "accept",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (visitor instanceof FiltersVisitor)\n\t\t\t\treturn ((FiltersVisitor<? extends T>) visitor).visitWhere(this);\n\t\t\telse\n\t\t\t\treturn visitor.visitChildren(this);",
                "is_abstract": "",
                "class_name": "FiltersParser WhereContext",
                "annotations": []
            },
            {
                "name": "where",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "WhereContext _localctx = new WhereContext(_ctx, getState());\n\t\tenterRule(_localctx, 0, RULE_where);\n\t\ttry {\n\t\t\tenterOuterAlt(_localctx, 1);\n\t\t\t{\n\t\t\t\tsetState(12);\n\t\t\t\tmatch(WHERE);\n\t\t\t\tsetState(13);\n\t\t\t\tbooleanExpression(0);\n\t\t\t\tsetState(14);\n\t\t\t\tmatch(EOF);\n\t\t\t}\n\t\t}\n\t\tcatch (RecognitionException re) {\n\t\t\t_localctx.exception = re;\n\t\t\t_errHandler.reportError(this, re);\n\t\t\t_errHandler.recover(this, re);\n\t\t}\n\t\tfinally {\n\t\t\texitRule();\n\t\t}\n\t\treturn _localctx;",
                "is_abstract": "",
                "class_name": "FiltersParser WhereContext",
                "annotations": [
                    "@SuppressWarnings(\"CheckReturnValue\")"
                ]
            },
            {
                "name": "copyFrom",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "super.copyFrom(ctx);",
                "is_abstract": "",
                "class_name": "FiltersParser WhereContext BooleanExpressionContext",
                "annotations": [
                    "@SuppressWarnings(\"CheckReturnValue\")"
                ]
            },
            {
                "name": "identifier",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return getRuleContext(IdentifierContext.class, 0);",
                "is_abstract": "",
                "class_name": "FiltersParser WhereContext BooleanExpressionContext NinExpressionContext",
                "annotations": []
            },
            {
                "name": "constantArray",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return getRuleContext(ConstantArrayContext.class, 0);",
                "is_abstract": "",
                "class_name": "FiltersParser WhereContext BooleanExpressionContext NinExpressionContext",
                "annotations": []
            },
            {
                "name": "NOT",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return getToken(FiltersParser.NOT, 0);",
                "is_abstract": "",
                "class_name": "FiltersParser WhereContext BooleanExpressionContext NinExpressionContext",
                "annotations": []
            },
            {
                "name": "IN",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return getToken(FiltersParser.IN, 0);",
                "is_abstract": "",
                "class_name": "FiltersParser WhereContext BooleanExpressionContext NinExpressionContext",
                "annotations": []
            },
            {
                "name": "NIN",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return getToken(FiltersParser.NIN, 0);",
                "is_abstract": "",
                "class_name": "FiltersParser WhereContext BooleanExpressionContext NinExpressionContext",
                "annotations": []
            },
            {
                "name": "AND",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return getToken(FiltersParser.AND, 0);",
                "is_abstract": "",
                "class_name": "FiltersParser WhereContext BooleanExpressionContext NinExpressionContext AndExpressionContext",
                "annotations": []
            },
            {
                "name": "compare",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return getRuleContext(CompareContext.class, 0);",
                "is_abstract": "",
                "class_name": "FiltersParser WhereContext BooleanExpressionContext NinExpressionContext AndExpressionContext InExpressionContext NotExpressionContext CompareExpressionContext",
                "annotations": []
            },
            {
                "name": "constant",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return getRuleContext(ConstantContext.class, 0);",
                "is_abstract": "",
                "class_name": "FiltersParser WhereContext BooleanExpressionContext NinExpressionContext AndExpressionContext InExpressionContext NotExpressionContext CompareExpressionContext",
                "annotations": []
            },
            {
                "name": "OR",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return getToken(FiltersParser.OR, 0);",
                "is_abstract": "",
                "class_name": "FiltersParser WhereContext BooleanExpressionContext NinExpressionContext AndExpressionContext InExpressionContext NotExpressionContext CompareExpressionContext OrExpressionContext",
                "annotations": []
            },
            {
                "name": "LEFT_PARENTHESIS",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return getToken(FiltersParser.LEFT_PARENTHESIS, 0);",
                "is_abstract": "",
                "class_name": "FiltersParser WhereContext BooleanExpressionContext NinExpressionContext AndExpressionContext InExpressionContext NotExpressionContext CompareExpressionContext OrExpressionContext GroupExpressionContext",
                "annotations": []
            },
            {
                "name": "RIGHT_PARENTHESIS",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return getToken(FiltersParser.RIGHT_PARENTHESIS, 0);",
                "is_abstract": "",
                "class_name": "FiltersParser WhereContext BooleanExpressionContext NinExpressionContext AndExpressionContext InExpressionContext NotExpressionContext CompareExpressionContext OrExpressionContext GroupExpressionContext",
                "annotations": []
            },
            {
                "name": "LEFT_SQUARE_BRACKETS",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return getToken(FiltersParser.LEFT_SQUARE_BRACKETS, 0);",
                "is_abstract": "",
                "class_name": "FiltersParser WhereContext BooleanExpressionContext NinExpressionContext AndExpressionContext InExpressionContext NotExpressionContext CompareExpressionContext OrExpressionContext GroupExpressionContext ConstantArrayContext",
                "annotations": []
            },
            {
                "name": "RIGHT_SQUARE_BRACKETS",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return getToken(FiltersParser.RIGHT_SQUARE_BRACKETS, 0);",
                "is_abstract": "",
                "class_name": "FiltersParser WhereContext BooleanExpressionContext NinExpressionContext AndExpressionContext InExpressionContext NotExpressionContext CompareExpressionContext OrExpressionContext GroupExpressionContext ConstantArrayContext",
                "annotations": []
            },
            {
                "name": "COMMA",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return getTokens(FiltersParser.COMMA);",
                "is_abstract": "",
                "class_name": "FiltersParser WhereContext BooleanExpressionContext NinExpressionContext AndExpressionContext InExpressionContext NotExpressionContext CompareExpressionContext OrExpressionContext GroupExpressionContext ConstantArrayContext",
                "annotations": []
            },
            {
                "name": "EQUALS",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return getToken(FiltersParser.EQUALS, 0);",
                "is_abstract": "",
                "class_name": "FiltersParser WhereContext BooleanExpressionContext NinExpressionContext AndExpressionContext InExpressionContext NotExpressionContext CompareExpressionContext OrExpressionContext GroupExpressionContext ConstantArrayContext CompareContext",
                "annotations": []
            },
            {
                "name": "GT",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return getToken(FiltersParser.GT, 0);",
                "is_abstract": "",
                "class_name": "FiltersParser WhereContext BooleanExpressionContext NinExpressionContext AndExpressionContext InExpressionContext NotExpressionContext CompareExpressionContext OrExpressionContext GroupExpressionContext ConstantArrayContext CompareContext",
                "annotations": []
            },
            {
                "name": "GE",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return getToken(FiltersParser.GE, 0);",
                "is_abstract": "",
                "class_name": "FiltersParser WhereContext BooleanExpressionContext NinExpressionContext AndExpressionContext InExpressionContext NotExpressionContext CompareExpressionContext OrExpressionContext GroupExpressionContext ConstantArrayContext CompareContext",
                "annotations": []
            },
            {
                "name": "LT",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return getToken(FiltersParser.LT, 0);",
                "is_abstract": "",
                "class_name": "FiltersParser WhereContext BooleanExpressionContext NinExpressionContext AndExpressionContext InExpressionContext NotExpressionContext CompareExpressionContext OrExpressionContext GroupExpressionContext ConstantArrayContext CompareContext",
                "annotations": []
            },
            {
                "name": "LE",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return getToken(FiltersParser.LE, 0);",
                "is_abstract": "",
                "class_name": "FiltersParser WhereContext BooleanExpressionContext NinExpressionContext AndExpressionContext InExpressionContext NotExpressionContext CompareExpressionContext OrExpressionContext GroupExpressionContext ConstantArrayContext CompareContext",
                "annotations": []
            },
            {
                "name": "NE",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return getToken(FiltersParser.NE, 0);",
                "is_abstract": "",
                "class_name": "FiltersParser WhereContext BooleanExpressionContext NinExpressionContext AndExpressionContext InExpressionContext NotExpressionContext CompareExpressionContext OrExpressionContext GroupExpressionContext ConstantArrayContext CompareContext",
                "annotations": []
            },
            {
                "name": "IDENTIFIER",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return getTokens(FiltersParser.IDENTIFIER);",
                "is_abstract": "",
                "class_name": "FiltersParser WhereContext BooleanExpressionContext NinExpressionContext AndExpressionContext InExpressionContext NotExpressionContext CompareExpressionContext OrExpressionContext GroupExpressionContext ConstantArrayContext CompareContext IdentifierContext",
                "annotations": []
            },
            {
                "name": "DOT",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return getToken(FiltersParser.DOT, 0);",
                "is_abstract": "",
                "class_name": "FiltersParser WhereContext BooleanExpressionContext NinExpressionContext AndExpressionContext InExpressionContext NotExpressionContext CompareExpressionContext OrExpressionContext GroupExpressionContext ConstantArrayContext CompareContext IdentifierContext",
                "annotations": []
            },
            {
                "name": "QUOTED_STRING",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return getToken(FiltersParser.QUOTED_STRING, 0);",
                "is_abstract": "",
                "class_name": "FiltersParser WhereContext BooleanExpressionContext NinExpressionContext AndExpressionContext InExpressionContext NotExpressionContext CompareExpressionContext OrExpressionContext GroupExpressionContext ConstantArrayContext CompareContext IdentifierContext",
                "annotations": []
            },
            {
                "name": "DECIMAL_VALUE",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return getToken(FiltersParser.DECIMAL_VALUE, 0);",
                "is_abstract": "",
                "class_name": "FiltersParser WhereContext BooleanExpressionContext NinExpressionContext AndExpressionContext InExpressionContext NotExpressionContext CompareExpressionContext OrExpressionContext GroupExpressionContext ConstantArrayContext CompareContext IdentifierContext ConstantContext DecimalConstantContext",
                "annotations": []
            },
            {
                "name": "MINUS",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return getToken(FiltersParser.MINUS, 0);",
                "is_abstract": "",
                "class_name": "FiltersParser WhereContext BooleanExpressionContext NinExpressionContext AndExpressionContext InExpressionContext NotExpressionContext CompareExpressionContext OrExpressionContext GroupExpressionContext ConstantArrayContext CompareContext IdentifierContext ConstantContext DecimalConstantContext",
                "annotations": []
            },
            {
                "name": "PLUS",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return getToken(FiltersParser.PLUS, 0);",
                "is_abstract": "",
                "class_name": "FiltersParser WhereContext BooleanExpressionContext NinExpressionContext AndExpressionContext InExpressionContext NotExpressionContext CompareExpressionContext OrExpressionContext GroupExpressionContext ConstantArrayContext CompareContext IdentifierContext ConstantContext DecimalConstantContext",
                "annotations": []
            },
            {
                "name": "BOOLEAN_VALUE",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return getToken(FiltersParser.BOOLEAN_VALUE, 0);",
                "is_abstract": "",
                "class_name": "FiltersParser WhereContext BooleanExpressionContext NinExpressionContext AndExpressionContext InExpressionContext NotExpressionContext CompareExpressionContext OrExpressionContext GroupExpressionContext ConstantArrayContext CompareContext IdentifierContext ConstantContext DecimalConstantContext TextConstantContext BooleanConstantContext",
                "annotations": []
            },
            {
                "name": "INTEGER_VALUE",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return getToken(FiltersParser.INTEGER_VALUE, 0);",
                "is_abstract": "",
                "class_name": "FiltersParser WhereContext BooleanExpressionContext NinExpressionContext AndExpressionContext InExpressionContext NotExpressionContext CompareExpressionContext OrExpressionContext GroupExpressionContext ConstantArrayContext CompareContext IdentifierContext ConstantContext DecimalConstantContext TextConstantContext BooleanConstantContext IntegerConstantContext",
                "annotations": []
            },
            {
                "name": "sempred",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "switch (ruleIndex) {\n\t\t\tcase 1:\n\t\t\t\treturn booleanExpression_sempred((BooleanExpressionContext) _localctx, predIndex);\n\t\t}\n\t\treturn true;",
                "is_abstract": "",
                "class_name": "FiltersParser WhereContext BooleanExpressionContext NinExpressionContext AndExpressionContext InExpressionContext NotExpressionContext CompareExpressionContext OrExpressionContext GroupExpressionContext ConstantArrayContext CompareContext IdentifierContext ConstantContext DecimalConstantContext TextConstantContext BooleanConstantContext IntegerConstantContext",
                "annotations": []
            },
            {
                "name": "booleanExpression_sempred",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "switch (predIndex) {\n\t\t\tcase 0:\n\t\t\t\treturn precpred(_ctx, 4);\n\t\t\tcase 1:\n\t\t\t\treturn precpred(_ctx, 3);\n\t\t}\n\t\treturn true;",
                "is_abstract": "",
                "class_name": "FiltersParser WhereContext BooleanExpressionContext NinExpressionContext AndExpressionContext InExpressionContext NotExpressionContext CompareExpressionContext OrExpressionContext GroupExpressionContext ConstantArrayContext CompareContext IdentifierContext ConstantContext DecimalConstantContext TextConstantContext BooleanConstantContext IntegerConstantContext",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/vectorstore/filter/antlr4/FiltersVisitor.java",
        "class_names": [],
        "imports": "import org.antlr.v4.runtime.tree.ParseTreeVisitor;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.filter.antlr4.visitWher": "org.springframework.ai.vectorstore.filter.antlr4.visitWher",
            "org.springframework.ai.vectorstore.filter.antlr4.visitNinExpression": "org.springframework.ai.vectorstore.filter.antlr4.visitNinExpression",
            "org.springframework.ai.vectorstore.filter.antlr4.visitAndExpression": "org.springframework.ai.vectorstore.filter.antlr4.visitAndExpression",
            "org.springframework.ai.vectorstore.filter.antlr4.visitInExpression": "org.springframework.ai.vectorstore.filter.antlr4.visitInExpression",
            "org.springframework.ai.vectorstore.filter.antlr4.visitNotExpression": "org.springframework.ai.vectorstore.filter.antlr4.visitNotExpression",
            "org.springframework.ai.vectorstore.filter.antlr4.visitCompareExpression": "org.springframework.ai.vectorstore.filter.antlr4.visitCompareExpression",
            "org.springframework.ai.vectorstore.filter.antlr4.visitOrExpression": "org.springframework.ai.vectorstore.filter.antlr4.visitOrExpression",
            "org.springframework.ai.vectorstore.filter.antlr4.visitGroupExpression": "org.springframework.ai.vectorstore.filter.antlr4.visitGroupExpression",
            "org.springframework.ai.vectorstore.filter.antlr4.visitConstantArray": "org.springframework.ai.vectorstore.filter.antlr4.visitConstantArray",
            "org.springframework.ai.vectorstore.filter.antlr4.visitCompar": "org.springframework.ai.vectorstore.filter.antlr4.visitCompar",
            "org.springframework.ai.vectorstore.filter.antlr4.visitIdentifier": "org.springframework.ai.vectorstore.filter.antlr4.visitIdentifier",
            "org.springframework.ai.vectorstore.filter.antlr4.visitIntegerConstant": "org.springframework.ai.vectorstore.filter.antlr4.visitIntegerConstant",
            "org.springframework.ai.vectorstore.filter.antlr4.visitDecimalConstant": "org.springframework.ai.vectorstore.filter.antlr4.visitDecimalConstant",
            "org.springframework.ai.vectorstore.filter.antlr4.visitTextConstant": "org.springframework.ai.vectorstore.filter.antlr4.visitTextConstant",
            "org.springframework.ai.vectorstore.filter.antlr4.visitBooleanConstant": "org.springframework.ai.vectorstore.filter.antlr4.visitBooleanConstant"
        },
        "package": "package org.springframework.ai.vectorstore.filter.antlr4;",
        "property_declarations": [],
        "functions": [
            {
                "name": "visitWhere",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "visitNinExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "visitAndExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "visitInExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "visitNotExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "visitCompareExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "visitOrExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "visitGroupExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "visitConstantArray",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "visitCompare",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "visitIdentifier",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "visitIntegerConstant",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "visitDecimalConstant",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "visitTextConstant",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "visitBooleanConstant",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-core/src/main/java/org/springframework/ai/vectorstore/filter/antlr4/FiltersBaseListener.java",
        "class_names": [
            "FiltersBaseListener"
        ],
        "imports": "import org.antlr.v4.runtime.ParserRuleContext;\nimport org.antlr.v4.runtime.tree.ErrorNode;\nimport org.antlr.v4.runtime.tree.TerminalNode;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.filter.antlr4.FiltersBaseListener": "org.springframework.ai.vectorstore.filter.antlr4.FiltersBaseListener",
            "org.springframework.ai.vectorstore.filter.antlr4.enterWher": "org.springframework.ai.vectorstore.filter.antlr4.enterWher",
            "org.springframework.ai.vectorstore.filter.antlr4.exitWher": "org.springframework.ai.vectorstore.filter.antlr4.exitWher",
            "org.springframework.ai.vectorstore.filter.antlr4.enterNinExpression": "org.springframework.ai.vectorstore.filter.antlr4.enterNinExpression",
            "org.springframework.ai.vectorstore.filter.antlr4.exitNinExpression": "org.springframework.ai.vectorstore.filter.antlr4.exitNinExpression",
            "org.springframework.ai.vectorstore.filter.antlr4.enterAndExpression": "org.springframework.ai.vectorstore.filter.antlr4.enterAndExpression",
            "org.springframework.ai.vectorstore.filter.antlr4.exitAndExpression": "org.springframework.ai.vectorstore.filter.antlr4.exitAndExpression",
            "org.springframework.ai.vectorstore.filter.antlr4.enterInExpression": "org.springframework.ai.vectorstore.filter.antlr4.enterInExpression",
            "org.springframework.ai.vectorstore.filter.antlr4.exitInExpression": "org.springframework.ai.vectorstore.filter.antlr4.exitInExpression",
            "org.springframework.ai.vectorstore.filter.antlr4.enterNotExpression": "org.springframework.ai.vectorstore.filter.antlr4.enterNotExpression",
            "org.springframework.ai.vectorstore.filter.antlr4.exitNotExpression": "org.springframework.ai.vectorstore.filter.antlr4.exitNotExpression",
            "org.springframework.ai.vectorstore.filter.antlr4.enterCompareExpression": "org.springframework.ai.vectorstore.filter.antlr4.enterCompareExpression",
            "org.springframework.ai.vectorstore.filter.antlr4.exitCompareExpression": "org.springframework.ai.vectorstore.filter.antlr4.exitCompareExpression",
            "org.springframework.ai.vectorstore.filter.antlr4.enterOrExpression": "org.springframework.ai.vectorstore.filter.antlr4.enterOrExpression",
            "org.springframework.ai.vectorstore.filter.antlr4.exitOrExpression": "org.springframework.ai.vectorstore.filter.antlr4.exitOrExpression",
            "org.springframework.ai.vectorstore.filter.antlr4.enterGroupExpression": "org.springframework.ai.vectorstore.filter.antlr4.enterGroupExpression",
            "org.springframework.ai.vectorstore.filter.antlr4.exitGroupExpression": "org.springframework.ai.vectorstore.filter.antlr4.exitGroupExpression",
            "org.springframework.ai.vectorstore.filter.antlr4.enterConstantArray": "org.springframework.ai.vectorstore.filter.antlr4.enterConstantArray",
            "org.springframework.ai.vectorstore.filter.antlr4.exitConstantArray": "org.springframework.ai.vectorstore.filter.antlr4.exitConstantArray",
            "org.springframework.ai.vectorstore.filter.antlr4.enterCompar": "org.springframework.ai.vectorstore.filter.antlr4.enterCompar",
            "org.springframework.ai.vectorstore.filter.antlr4.exitCompar": "org.springframework.ai.vectorstore.filter.antlr4.exitCompar",
            "org.springframework.ai.vectorstore.filter.antlr4.enterIdentifier": "org.springframework.ai.vectorstore.filter.antlr4.enterIdentifier",
            "org.springframework.ai.vectorstore.filter.antlr4.exitIdentifier": "org.springframework.ai.vectorstore.filter.antlr4.exitIdentifier",
            "org.springframework.ai.vectorstore.filter.antlr4.enterIntegerConstant": "org.springframework.ai.vectorstore.filter.antlr4.enterIntegerConstant",
            "org.springframework.ai.vectorstore.filter.antlr4.exitIntegerConstant": "org.springframework.ai.vectorstore.filter.antlr4.exitIntegerConstant",
            "org.springframework.ai.vectorstore.filter.antlr4.enterDecimalConstant": "org.springframework.ai.vectorstore.filter.antlr4.enterDecimalConstant",
            "org.springframework.ai.vectorstore.filter.antlr4.exitDecimalConstant": "org.springframework.ai.vectorstore.filter.antlr4.exitDecimalConstant",
            "org.springframework.ai.vectorstore.filter.antlr4.enterTextConstant": "org.springframework.ai.vectorstore.filter.antlr4.enterTextConstant",
            "org.springframework.ai.vectorstore.filter.antlr4.exitTextConstant": "org.springframework.ai.vectorstore.filter.antlr4.exitTextConstant",
            "org.springframework.ai.vectorstore.filter.antlr4.enterBooleanConstant": "org.springframework.ai.vectorstore.filter.antlr4.enterBooleanConstant",
            "org.springframework.ai.vectorstore.filter.antlr4.exitBooleanConstant": "org.springframework.ai.vectorstore.filter.antlr4.exitBooleanConstant",
            "org.springframework.ai.vectorstore.filter.antlr4.enterEveryRul": "org.springframework.ai.vectorstore.filter.antlr4.enterEveryRul",
            "org.springframework.ai.vectorstore.filter.antlr4.exitEveryRul": "org.springframework.ai.vectorstore.filter.antlr4.exitEveryRul",
            "org.springframework.ai.vectorstore.filter.antlr4.visitTerminal": "org.springframework.ai.vectorstore.filter.antlr4.visitTerminal",
            "org.springframework.ai.vectorstore.filter.antlr4.visitErrorNod": "org.springframework.ai.vectorstore.filter.antlr4.visitErrorNod"
        },
        "package": "package org.springframework.ai.vectorstore.filter.antlr4;",
        "property_declarations": [],
        "functions": [
            {
                "name": "enterWhere",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "FiltersBaseListener",
                "annotations": []
            },
            {
                "name": "exitWhere",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "FiltersBaseListener",
                "annotations": []
            },
            {
                "name": "enterNinExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "FiltersBaseListener",
                "annotations": []
            },
            {
                "name": "exitNinExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "FiltersBaseListener",
                "annotations": []
            },
            {
                "name": "enterAndExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "FiltersBaseListener",
                "annotations": []
            },
            {
                "name": "exitAndExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "FiltersBaseListener",
                "annotations": []
            },
            {
                "name": "enterInExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "FiltersBaseListener",
                "annotations": []
            },
            {
                "name": "exitInExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "FiltersBaseListener",
                "annotations": []
            },
            {
                "name": "enterNotExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "FiltersBaseListener",
                "annotations": []
            },
            {
                "name": "exitNotExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "FiltersBaseListener",
                "annotations": []
            },
            {
                "name": "enterCompareExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "FiltersBaseListener",
                "annotations": []
            },
            {
                "name": "exitCompareExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "FiltersBaseListener",
                "annotations": []
            },
            {
                "name": "enterOrExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "FiltersBaseListener",
                "annotations": []
            },
            {
                "name": "exitOrExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "FiltersBaseListener",
                "annotations": []
            },
            {
                "name": "enterGroupExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "FiltersBaseListener",
                "annotations": []
            },
            {
                "name": "exitGroupExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "FiltersBaseListener",
                "annotations": []
            },
            {
                "name": "enterConstantArray",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "FiltersBaseListener",
                "annotations": []
            },
            {
                "name": "exitConstantArray",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "FiltersBaseListener",
                "annotations": []
            },
            {
                "name": "enterCompare",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "FiltersBaseListener",
                "annotations": []
            },
            {
                "name": "exitCompare",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "FiltersBaseListener",
                "annotations": []
            },
            {
                "name": "enterIdentifier",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "FiltersBaseListener",
                "annotations": []
            },
            {
                "name": "exitIdentifier",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "FiltersBaseListener",
                "annotations": []
            },
            {
                "name": "enterIntegerConstant",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "FiltersBaseListener",
                "annotations": []
            },
            {
                "name": "exitIntegerConstant",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "FiltersBaseListener",
                "annotations": []
            },
            {
                "name": "enterDecimalConstant",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "FiltersBaseListener",
                "annotations": []
            },
            {
                "name": "exitDecimalConstant",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "FiltersBaseListener",
                "annotations": []
            },
            {
                "name": "enterTextConstant",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "FiltersBaseListener",
                "annotations": []
            },
            {
                "name": "exitTextConstant",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "FiltersBaseListener",
                "annotations": []
            },
            {
                "name": "enterBooleanConstant",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "FiltersBaseListener",
                "annotations": []
            },
            {
                "name": "exitBooleanConstant",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "FiltersBaseListener",
                "annotations": []
            },
            {
                "name": "enterEveryRule",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "FiltersBaseListener",
                "annotations": []
            },
            {
                "name": "exitEveryRule",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "FiltersBaseListener",
                "annotations": []
            },
            {
                "name": "visitTerminal",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "FiltersBaseListener",
                "annotations": []
            },
            {
                "name": "visitErrorNode",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "FiltersBaseListener",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-transformers/src/test/java/org/springframework/ai/transformers/ResourceCacheServiceTests.java",
        "class_names": [
            "ResourceCacheServiceTests"
        ],
        "imports": "import java.io.File;\nimport java.util.List;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport java.nio.file.Files;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.core.io.DefaultResourceLoader;\nimport org.junit.jupiter.api.io.TempDir;\nimport java.io.IOException;",
        "package_import_paths": {
            "org.springframework.ai.transformers.ResourceCacheServiceTests": "org.springframework.ai.transformers.ResourceCacheServiceTests",
            "org.springframework.ai.transformers.fileResourcesAreExcludedByDefault": "org.springframework.ai.transformers.fileResourcesAreExcludedByDefault",
            "org.springframework.ai.transformers.cacheFileResources": "org.springframework.ai.transformers.cacheFileResources",
            "org.springframework.ai.transformers.cacheFileResourcesFromSameParentFolder": "org.springframework.ai.transformers.cacheFileResourcesFromSameParentFolder",
            "org.springframework.ai.transformers.cacheHttpResources": "org.springframework.ai.transformers.cacheHttpResources",
            "org.springframework.ai.transformers.Fil": "org.springframework.ai.transformers.Fil"
        },
        "package": "package org.springframework.ai.transformers;",
        "property_declarations": [
            "@TempDir\n\tFile tempDir;"
        ],
        "functions": [
            {
                "name": "fileResourcesAreExcludedByDefault",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var cache = new ResourceCacheService(tempDir);\n\t\tvar originalResourceUri = \"file:src/main/resources/onnx/all-MiniLM-L6-v2/tokenizer.json\";\n\t\tvar cachedResource = cache.getCachedResource(originalResourceUri);\n\n\t\tassertThat(cachedResource).isEqualTo(new DefaultResourceLoader().getResource(originalResourceUri));\n\t\tassertThat(Files.list(tempDir.toPath()).count()).isEqualTo(0);",
                "is_abstract": "",
                "class_name": "ResourceCacheServiceTests",
                "annotations": []
            },
            {
                "name": "cacheFileResources",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var cache = new ResourceCacheService(tempDir);\n\n\t\tcache.setExcludedUriSchemas(List.of()); // erase the excluded schema names,\n\t\t\t\t\t\t\t\t\t\t\t\t// including 'file'.\n\n\t\tvar originalResourceUri = \"file:src/main/resources/onnx/all-MiniLM-L6-v2/tokenizer.json\";\n\t\tvar cachedResource1 = cache.getCachedResource(originalResourceUri);\n\n\t\tassertThat(cachedResource1).isNotEqualTo(new DefaultResourceLoader().getResource(originalResourceUri));\n\t\tassertThat(Files.list(tempDir.toPath()).count()).isEqualTo(1);\n\t\tassertThat(Files.list(Files.list(tempDir.toPath()).iterator().next()).count()).isEqualTo(1);\n\n\t\t// Attempt to cache the same resource again should return the already cached\n\t\t// resource.\n\t\tvar cachedResource2 = cache.getCachedResource(originalResourceUri);\n\n\t\tassertThat(cachedResource2).isNotEqualTo(new DefaultResourceLoader().getResource(originalResourceUri));\n\t\tassertThat(cachedResource2).isEqualTo(cachedResource1);\n\n\t\tassertThat(Files.list(tempDir.toPath()).count()).isEqualTo(1);\n\t\tassertThat(Files.list(Files.list(tempDir.toPath()).iterator().next()).count()).isEqualTo(1);",
                "is_abstract": "",
                "class_name": "ResourceCacheServiceTests",
                "annotations": []
            },
            {
                "name": "cacheFileResourcesFromSameParentFolder",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var cache = new ResourceCacheService(tempDir);\n\n\t\tcache.setExcludedUriSchemas(List.of()); // erase the excluded schema names,\n\t\t\t\t\t\t\t\t\t\t\t\t// including 'file'.\n\n\t\tvar originalResourceUri1 = \"file:src/main/resources/onnx/all-MiniLM-L6-v2/tokenizer.json\";\n\t\tvar cachedResource1 = cache.getCachedResource(originalResourceUri1);\n\n\t\t// Attempt to cache the same resource again should return the already cached\n\t\t// resource.\n\t\tvar originalResourceUri2 = \"file:src/main/resources/onnx/all-MiniLM-L6-v2/model.png\";\n\t\tvar cachedResource2 = cache.getCachedResource(originalResourceUri2);\n\n\t\tassertThat(cachedResource2).isNotEqualTo(new DefaultResourceLoader().getResource(originalResourceUri1));\n\t\tassertThat(cachedResource2).isNotEqualTo(cachedResource1);\n\n\t\tassertThat(Files.list(tempDir.toPath()).count()).isEqualTo(1)\n\t\t\t.describedAs(\n\t\t\t\t\t\"As both resources come from the same parent segments they should be cached in a single common parent.\");\n\t\tassertThat(Files.list(Files.list(tempDir.toPath()).iterator().next()).count()).isEqualTo(2);",
                "is_abstract": "",
                "class_name": "ResourceCacheServiceTests",
                "annotations": []
            },
            {
                "name": "cacheHttpResources",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var cache = new ResourceCacheService(tempDir);\n\n\t\tvar originalResourceUri1 = \"https://raw.githubusercontent.com/spring-projects/spring-ai/main/spring-ai-core/src/main/resources/embedding/embedding-model-dimensions.properties\";\n\t\tvar cachedResource1 = cache.getCachedResource(originalResourceUri1);\n\n\t\tassertThat(cachedResource1).isNotEqualTo(new DefaultResourceLoader().getResource(originalResourceUri1));\n\t\tassertThat(Files.list(tempDir.toPath()).count()).isEqualTo(1);\n\t\tassertThat(Files.list(Files.list(tempDir.toPath()).iterator().next()).count()).isEqualTo(1);",
                "is_abstract": "",
                "class_name": "ResourceCacheServiceTests",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-transformers/src/test/java/org/springframework/ai/transformers/TransformersEmbeddingClientTests.java",
        "class_names": [
            "TransformersEmbeddingClientTests"
        ],
        "imports": "import java.util.List;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.springframework.ai.document.Document;\nimport org.junit.jupiter.api.Test;\nimport java.text.DecimalFormat;\nimport org.springframework.ai.embedding.EmbeddingResponse;",
        "package_import_paths": {
            "org.springframework.ai.transformers.TransformersEmbeddingClientTests": "org.springframework.ai.transformers.TransformersEmbeddingClientTests",
            "org.springframework.ai.transformers.embed": "org.springframework.ai.transformers.embed",
            "org.springframework.ai.transformers.embedDocument": "org.springframework.ai.transformers.embedDocument",
            "org.springframework.ai.transformers.embedList": "org.springframework.ai.transformers.embedList",
            "org.springframework.ai.transformers.embedForRespons": "org.springframework.ai.transformers.embedForRespons",
            "org.springframework.ai.transformers.dimensions": "org.springframework.ai.transformers.dimensions",
            "org.springframework.ai.transformers.DF": "org.springframework.ai.transformers.DF"
        },
        "package": "package org.springframework.ai.transformers;",
        "property_declarations": [
            "private static DecimalFormat DF = new DecimalFormat(\"#.######\");"
        ],
        "functions": [
            {
                "name": "embed",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "TransformersEmbeddingClient embeddingClient = new TransformersEmbeddingClient();\n\t\tembeddingClient.afterPropertiesSet();\n\t\tList<Double> embed = embeddingClient.embed(\"Hello world\");\n\t\tassertThat(embed).hasSize(384);\n\t\tassertThat(DF.format(embed.get(0))).isEqualTo(DF.format(-0.19744634628295898));\n\t\tassertThat(DF.format(embed.get(383))).isEqualTo(DF.format(0.17298996448516846));",
                "is_abstract": "",
                "class_name": "TransformersEmbeddingClientTests",
                "annotations": []
            },
            {
                "name": "embedDocument",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "TransformersEmbeddingClient embeddingClient = new TransformersEmbeddingClient();\n\t\tembeddingClient.afterPropertiesSet();\n\t\tList<Double> embed = embeddingClient.embed(new Document(\"Hello world\"));\n\t\tassertThat(embed).hasSize(384);\n\t\tassertThat(DF.format(embed.get(0))).isEqualTo(DF.format(-0.19744634628295898));\n\t\tassertThat(DF.format(embed.get(383))).isEqualTo(DF.format(0.17298996448516846));",
                "is_abstract": "",
                "class_name": "TransformersEmbeddingClientTests",
                "annotations": []
            },
            {
                "name": "embedList",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "TransformersEmbeddingClient embeddingClient = new TransformersEmbeddingClient();\n\t\tembeddingClient.afterPropertiesSet();\n\t\tList<List<Double>> embed = embeddingClient.embed(List.of(\"Hello world\", \"World is big\"));\n\t\tassertThat(embed).hasSize(2);\n\t\tassertThat(embed.get(0)).hasSize(384);\n\t\tassertThat(DF.format(embed.get(0).get(0))).isEqualTo(DF.format(-0.19744634628295898));\n\t\tassertThat(DF.format(embed.get(0).get(383))).isEqualTo(DF.format(0.17298996448516846));\n\n\t\tassertThat(embed.get(1)).hasSize(384);\n\t\tassertThat(DF.format(embed.get(1).get(0))).isEqualTo(DF.format(0.4293745160102844));\n\t\tassertThat(DF.format(embed.get(1).get(383))).isEqualTo(DF.format(0.05501303821802139));\n\n\t\tassertThat(embed.get(0)).isNotEqualTo(embed.get(1));",
                "is_abstract": "",
                "class_name": "TransformersEmbeddingClientTests",
                "annotations": []
            },
            {
                "name": "embedForResponse",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "TransformersEmbeddingClient embeddingClient = new TransformersEmbeddingClient();\n\t\tembeddingClient.afterPropertiesSet();\n\t\tEmbeddingResponse embed = embeddingClient.embedForResponse(List.of(\"Hello world\", \"World is big\"));\n\t\tassertThat(embed.getResults()).hasSize(2);\n\t\tassertThat(embed.getMetadata()).isEmpty();\n\n\t\tassertThat(embed.getResults().get(0).getOutput()).hasSize(384);\n\t\tassertThat(DF.format(embed.getResults().get(0).getOutput().get(0))).isEqualTo(DF.format(-0.19744634628295898));\n\t\tassertThat(DF.format(embed.getResults().get(0).getOutput().get(383))).isEqualTo(DF.format(0.17298996448516846));\n\n\t\tassertThat(embed.getResults().get(1).getOutput()).hasSize(384);\n\t\tassertThat(DF.format(embed.getResults().get(1).getOutput().get(0))).isEqualTo(DF.format(0.4293745160102844));\n\t\tassertThat(DF.format(embed.getResults().get(1).getOutput().get(383))).isEqualTo(DF.format(0.05501303821802139));",
                "is_abstract": "",
                "class_name": "TransformersEmbeddingClientTests",
                "annotations": []
            },
            {
                "name": "dimensions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "TransformersEmbeddingClient embeddingClient = new TransformersEmbeddingClient();\n\t\tembeddingClient.afterPropertiesSet();\n\t\tassertThat(embeddingClient.dimensions()).isEqualTo(384);\n\t\t// cached\n\t\tassertThat(embeddingClient.dimensions()).isEqualTo(384);",
                "is_abstract": "",
                "class_name": "TransformersEmbeddingClientTests",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-transformers/src/test/java/org/springframework/ai/transformers/samples/ONNXSample.java",
        "class_names": [
            "ONNXSample"
        ],
        "imports": "import ai.onnxruntime.OnnxValue;\nimport ai.onnxruntime.OnnxTensor;\nimport ai.djl.ndarray.types.Shape;\nimport ai.djl.ndarray.NDManager;\nimport java.util.Map;\nimport java.util.HashMap;\nimport ai.onnxruntime.OrtEnvironment;\nimport ai.djl.ndarray.NDArray;\nimport ai.djl.huggingface.tokenizers.HuggingFaceTokenizer;\nimport org.springframework.core.io.DefaultResourceLoader;\nimport java.nio.FloatBuffer;\nimport ai.djl.ndarray.types.DataType;\nimport ai.djl.huggingface.tokenizers.Encoding;\nimport ai.onnxruntime.OrtSession;",
        "package_import_paths": {
            "org.springframework.ai.transformers.samples.ONNXSampl": "org.springframework.ai.transformers.samples.ONNXSampl",
            "org.springframework.ai.transformers.samples.meanPoolin": "org.springframework.ai.transformers.samples.meanPoolin",
            "org.springframework.ai.transformers.samples.main": "org.springframework.ai.transformers.samples.main",
            "org.springframework.ai.transformers.samples.creat": "org.springframework.ai.transformers.samples.creat"
        },
        "package": "package org.springframework.ai.transformers.samples;",
        "property_declarations": [],
        "functions": [
            {
                "name": "meanPooling",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "NDArray attentionMaskExpanded = attentionMask.expandDims(-1)\n\t\t\t.broadcast(tokenEmbeddings.getShape())\n\t\t\t.toType(DataType.FLOAT32, false);\n\n\t\t// Multiply token embeddings with expanded attention mask\n\t\tNDArray weightedEmbeddings = tokenEmbeddings.mul(attentionMaskExpanded);\n\n\t\t// Sum along the appropriate axis\n\t\tNDArray sumEmbeddings = weightedEmbeddings.sum(new int[] { 1 });\n\n\t\t// Clamp the attention mask sum to avoid division by zero\n\t\tNDArray sumMask = attentionMaskExpanded.sum(new int[] { 1 }).clip(1e-9f, Float.MAX_VALUE);\n\n\t\t// Divide sum embeddings by sum mask\n\t\treturn sumEmbeddings.div(sumMask);",
                "is_abstract": "",
                "class_name": "ONNXSample",
                "annotations": []
            },
            {
                "name": "main",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String TOKENIZER_URI = \"classpath:/onnx/tokenizer.json\";\n\t\tString MODEL_URI = \"classpath:/onnx/generative.onnx\";\n\n\t\tvar tokenizerResource = new DefaultResourceLoader().getResource(TOKENIZER_URI);\n\t\tvar modelResource = new DefaultResourceLoader().getResource(MODEL_URI);\n\n\t\tString[] sentences = new String[] { \"Hello world\" };\n\n\t\t// https://docs.djl.ai/extensions/tokenizers/index.html\n\t\tHuggingFaceTokenizer tokenizer = HuggingFaceTokenizer.newInstance(tokenizerResource.getInputStream(), Map.of());\n\t\tEncoding[] encodings = tokenizer.batchEncode(sentences);\n\n\t\tlong[][] input_ids0 = new long[encodings.length][];\n\t\tlong[][] attention_mask0 = new long[encodings.length][];\n\t\tlong[][] token_type_ids0 = new long[encodings.length][];\n\n\t\tfor (int i = 0; i < encodings.length; i++) {\n\t\t\tinput_ids0[i] = encodings[i].getIds();\n\t\t\tattention_mask0[i] = encodings[i].getAttentionMask();\n\t\t\ttoken_type_ids0[i] = encodings[i].getTypeIds();\n\t\t}\n\n\t\t// https://onnxruntime.ai/docs/get-started/with-java.html\n\t\tOrtEnvironment environment = OrtEnvironment.getEnvironment();\n\t\tOrtSession session = environment.createSession(modelResource.getContentAsByteArray());\n\n\t\tOnnxTensor inputIds = OnnxTensor.createTensor(environment, input_ids0);\n\t\tOnnxTensor attentionMask = OnnxTensor.createTensor(environment, attention_mask0);\n\t\tOnnxTensor tokenTypeIds = OnnxTensor.createTensor(environment, token_type_ids0);\n\n\t\tMap<String, OnnxTensor> inputs = new HashMap<>();\n\t\tinputs.put(\"input_ids\", inputIds);\n\t\tinputs.put(\"attention_mask\", attentionMask);\n\t\tinputs.put(\"token_type_ids\", tokenTypeIds);\n\n\t\ttry (OrtSession.Result results = session.run(inputs)) {\n\n\t\t\tOnnxValue lastHiddenState = results.get(0);\n\n\t\t\tfloat[][][] tokenEmbeddings = (float[][][]) lastHiddenState.getValue();\n\n\t\t\tSystem.out.println(tokenEmbeddings[0][0][0]);\n\t\t\tSystem.out.println(tokenEmbeddings[0][1][0]);\n\t\t\tSystem.out.println(tokenEmbeddings[0][2][0]);\n\t\t\tSystem.out.println(tokenEmbeddings[0][3][0]);\n\n\t\t\ttry (NDManager manager = NDManager.newBaseManager()) {\n\t\t\t\tNDArray ndTokenEmbeddings = create(tokenEmbeddings, manager);\n\t\t\t\tNDArray ndAttentionMask = manager.create(attention_mask0);\n\t\t\t\tSystem.out.println(ndTokenEmbeddings);\n\n\t\t\t\tvar embedding = meanPooling(ndTokenEmbeddings, ndAttentionMask);\n\t\t\t\tSystem.out.println(embedding);\n\t\t\t}\n\n\t\t}",
                "is_abstract": "",
                "class_name": "ONNXSample",
                "annotations": []
            },
            {
                "name": "create",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "FloatBuffer buffer = FloatBuffer.allocate(data.length * data[0].length * data[0][0].length);\n\t\tfor (float[][] data2 : data) {\n\t\t\tfor (float[] d : data2) {\n\t\t\t\tbuffer.put(d);\n\t\t\t}\n\t\t}\n\t\tbuffer.rewind();\n\t\treturn manager.create(buffer, new Shape(data.length, data[0].length, data[0][0].length));",
                "is_abstract": "",
                "class_name": "ONNXSample",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-transformers/src/main/java/org/springframework/ai/transformers/ResourceCacheService.java",
        "class_names": [
            "ResourceCacheService"
        ],
        "imports": "import java.util.ArrayList;\nimport java.io.File;\nimport org.springframework.util.StreamUtils;\nimport java.net.URI;\nimport java.util.List;\nimport org.springframework.util.Assert;\nimport org.springframework.core.io.FileUrlResource;\nimport org.springframework.util.StringUtils;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.springframework.util.FileCopyUtils;\nimport org.springframework.core.io.Resource;\nimport org.springframework.core.io.DefaultResourceLoader;\nimport java.util.UUID;\nimport java.io.IOException;",
        "package_import_paths": {
            "org.springframework.ai.transformers.ResourceCacheServi": "org.springframework.ai.transformers.ResourceCacheServi",
            "org.springframework.ai.transformers.setExcludedUriSchemas": "org.springframework.ai.transformers.setExcludedUriSchemas",
            "org.springframework.ai.transformers.getCachedResour": "org.springframework.ai.transformers.getCachedResour",
            "org.springframework.ai.transformers.getCachedFil": "org.springframework.ai.transformers.getCachedFil",
            "org.springframework.ai.transformers.pathWithoutLastSegment": "org.springframework.ai.transformers.pathWithoutLastSegment",
            "org.springframework.ai.transformers.getCacheNam": "org.springframework.ai.transformers.getCacheNam",
            "org.springframework.ai.transformers.deleteCacheFolder": "org.springframework.ai.transformers.deleteCacheFolder",
            "org.springframework.ai.transformers.logger": "org.springframework.ai.transformers.logger",
            "org.springframework.ai.transformers.cacheDirectory": "org.springframework.ai.transformers.cacheDirectory",
            "org.springframework.ai.transformers.excludedUriSchemas": "org.springframework.ai.transformers.excludedUriSchemas"
        },
        "package": "package org.springframework.ai.transformers;",
        "property_declarations": [
            "private List<String> excludedUriSchemas = new ArrayList<>(List.of(\"file\", \"classpath\"));",
            "private static final Log logger = LogFactory.getLog(ResourceCacheService.class);",
            "private final File cacheDirectory;"
        ],
        "functions": [
            {
                "name": "setExcludedUriSchemas",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(excludedUriSchemas, \"The excluded URI schemas list can not be null\");\n\t\tthis.excludedUriSchemas = excludedUriSchemas;",
                "is_abstract": "",
                "class_name": "ResourceCacheService",
                "annotations": []
            },
            {
                "name": "getCachedResource",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.getCachedResource(new DefaultResourceLoader().getResource(originalResourceUri));",
                "is_abstract": "",
                "class_name": "ResourceCacheService",
                "annotations": []
            },
            {
                "name": "getCachedFile",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var resourceParentFolder = new File(this.cacheDirectory,\n\t\t\t\tUUID.nameUUIDFromBytes(pathWithoutLastSegment(originalResource.getURI())).toString());\n\t\tresourceParentFolder.mkdirs();\n\t\tString newFileName = getCacheName(originalResource);\n\t\treturn new File(resourceParentFolder, newFileName);",
                "is_abstract": "",
                "class_name": "ResourceCacheService",
                "annotations": []
            },
            {
                "name": "pathWithoutLastSegment",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String path = uri.toASCIIString();\n\t\tvar pathBeforeLastSegment = path.substring(0, path.lastIndexOf('/') + 1);\n\t\treturn pathBeforeLastSegment.getBytes();",
                "is_abstract": "",
                "class_name": "ResourceCacheService",
                "annotations": []
            },
            {
                "name": "getCacheName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String fileName = originalResource.getFilename();\n\t\tString fragment = originalResource.getURI().getFragment();\n\t\treturn !StringUtils.hasText(fragment) ? fileName : fileName + \"_\" + fragment;",
                "is_abstract": "",
                "class_name": "ResourceCacheService",
                "annotations": []
            },
            {
                "name": "deleteCacheFolder",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (this.cacheDirectory.exists()) {\n\t\t\tlogger.info(\"Empty Model Cache at:\" + this.cacheDirectory.getAbsolutePath());\n\t\t\tthis.cacheDirectory.delete();\n\t\t\tthis.cacheDirectory.mkdirs();\n\t\t}",
                "is_abstract": "",
                "class_name": "ResourceCacheService",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-transformers/src/main/java/org/springframework/ai/transformers/TransformersEmbeddingClient.java",
        "class_names": [
            "TransformersEmbeddingClient"
        ],
        "imports": "import java.util.stream.Collectors;\nimport org.springframework.ai.document.MetadataMode;\nimport java.util.List;\nimport ai.djl.ndarray.types.Shape;\nimport org.springframework.ai.embedding.EmbeddingOptions;\nimport org.springframework.core.io.Resource;\nimport ai.djl.modality.nlp.preprocess.Tokenizer;\nimport org.springframework.util.StringUtils;\nimport ai.onnxruntime.OrtSession;\nimport ai.onnxruntime.OrtException;\nimport org.springframework.ai.embedding.Embedding;\nimport java.util.Map;\nimport org.apache.commons.logging.LogFactory;\nimport ai.djl.ndarray.NDArray;\nimport java.nio.FloatBuffer;\nimport ai.djl.huggingface.tokenizers.Encoding;\nimport org.springframework.ai.embedding.EmbeddingResponse;\nimport ai.onnxruntime.OnnxValue;\nimport ai.djl.ndarray.NDManager;\nimport org.apache.commons.logging.Log;\nimport org.springframework.beans.factory.InitializingBean;\nimport ai.djl.huggingface.tokenizers.HuggingFaceTokenizer;\nimport org.springframework.core.io.DefaultResourceLoader;\nimport java.util.Set;\nimport ai.djl.ndarray.types.DataType;\nimport java.util.ArrayList;\nimport ai.onnxruntime.OnnxTensor;\nimport org.springframework.util.Assert;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport org.springframework.ai.embedding.AbstractEmbeddingClient;\nimport org.springframework.ai.document.Document;\nimport org.springframework.ai.embedding.EmbeddingRequest;\nimport ai.onnxruntime.OrtEnvironment;",
        "package_import_paths": {
            "org.springframework.ai.transformers.TransformersEmbeddingClient": "org.springframework.ai.transformers.TransformersEmbeddingClient",
            "org.springframework.ai.transformers.setTokenizerOptions": "org.springframework.ai.transformers.setTokenizerOptions",
            "org.springframework.ai.transformers.setDisableCachin": "org.springframework.ai.transformers.setDisableCachin",
            "org.springframework.ai.transformers.setResourceCacheDirectory": "org.springframework.ai.transformers.setResourceCacheDirectory",
            "org.springframework.ai.transformers.setGpuDeviceId": "org.springframework.ai.transformers.setGpuDeviceId",
            "org.springframework.ai.transformers.setTokenizerResour": "org.springframework.ai.transformers.setTokenizerResour",
            "org.springframework.ai.transformers.setModelResour": "org.springframework.ai.transformers.setModelResour",
            "org.springframework.ai.transformers.setModelOutputNam": "org.springframework.ai.transformers.setModelOutputNam",
            "org.springframework.ai.transformers.afterPropertiesSet": "org.springframework.ai.transformers.afterPropertiesSet",
            "org.springframework.ai.transformers.getCachedResour": "org.springframework.ai.transformers.getCachedResour",
            "org.springframework.ai.transformers.embed": "org.springframework.ai.transformers.embed",
            "org.springframework.ai.transformers.embedForRespons": "org.springframework.ai.transformers.embedForRespons",
            "org.springframework.ai.transformers.call": "org.springframework.ai.transformers.call",
            "org.springframework.ai.transformers.removeUnknownModelInputs": "org.springframework.ai.transformers.removeUnknownModelInputs",
            "org.springframework.ai.transformers.creat": "org.springframework.ai.transformers.creat",
            "org.springframework.ai.transformers.meanPoolin": "org.springframework.ai.transformers.meanPoolin",
            "org.springframework.ai.transformers.toDoubleList": "org.springframework.ai.transformers.toDoubleList",
            "org.springframework.ai.transformers.toResour": "org.springframework.ai.transformers.toResour",
            "org.springframework.ai.transformers.logger": "org.springframework.ai.transformers.logger",
            "org.springframework.ai.transformers.DEFAULT_ONNX_TOKENIZER_URI": "org.springframework.ai.transformers.DEFAULT_ONNX_TOKENIZER_URI",
            "org.springframework.ai.transformers.DEFAULT_ONNX_MODEL_URI": "org.springframework.ai.transformers.DEFAULT_ONNX_MODEL_URI",
            "org.springframework.ai.transformers.DEFAULT_MODEL_OUTPUT_NAME": "org.springframework.ai.transformers.DEFAULT_MODEL_OUTPUT_NAME",
            "org.springframework.ai.transformers.EMBEDDING_AXIS": "org.springframework.ai.transformers.EMBEDDING_AXIS",
            "org.springframework.ai.transformers.tokenizerResour": "org.springframework.ai.transformers.tokenizerResour",
            "org.springframework.ai.transformers.modelResour": "org.springframework.ai.transformers.modelResour",
            "org.springframework.ai.transformers.gpuDeviceId": "org.springframework.ai.transformers.gpuDeviceId",
            "org.springframework.ai.transformers.tokenizer": "org.springframework.ai.transformers.tokenizer",
            "org.springframework.ai.transformers.environment": "org.springframework.ai.transformers.environment",
            "org.springframework.ai.transformers.session": "org.springframework.ai.transformers.session",
            "org.springframework.ai.transformers.metadataMod": "org.springframework.ai.transformers.metadataMod",
            "org.springframework.ai.transformers.resourceCacheDirectory": "org.springframework.ai.transformers.resourceCacheDirectory",
            "org.springframework.ai.transformers.disableCachin": "org.springframework.ai.transformers.disableCachin",
            "org.springframework.ai.transformers.cacheServi": "org.springframework.ai.transformers.cacheServi",
            "org.springframework.ai.transformers.tokenizerOptions": "org.springframework.ai.transformers.tokenizerOptions",
            "org.springframework.ai.transformers.modelOutputNam": "org.springframework.ai.transformers.modelOutputNam",
            "org.springframework.ai.transformers.onnxModelInputs": "org.springframework.ai.transformers.onnxModelInputs"
        },
        "package": "package org.springframework.ai.transformers;",
        "property_declarations": [
            "private boolean disableCaching = false;",
            "public final static String DEFAULT_ONNX_MODEL_URI = \"https://github.com/spring-projects/spring-ai/raw/main/models/spring-ai-transformers/src/main/resources/onnx/all-MiniLM-L6-v2/model.onnx\";",
            "private OrtSession session;",
            "private ResourceCacheService cacheService;",
            "private static final Log logger = LogFactory.getLog(TransformersEmbeddingClient.class);",
            "private final static int EMBEDDING_AXIS = 1;",
            "private Resource tokenizerResource = toResource(DEFAULT_ONNX_TOKENIZER_URI);",
            "private OrtEnvironment environment;",
            "private Set<String> onnxModelInputs;",
            "public final static String DEFAULT_ONNX_TOKENIZER_URI = \"https://raw.githubusercontent.com/spring-projects/spring-ai/main/models/spring-ai-transformers/src/main/resources/onnx/all-MiniLM-L6-v2/tokenizer.json\";",
            "private HuggingFaceTokenizer tokenizer;",
            "private int gpuDeviceId = -1;",
            "public Map<String, String> tokenizerOptions = Map.of();",
            "private final MetadataMode metadataMode;",
            "private Resource modelResource = toResource(DEFAULT_ONNX_MODEL_URI);",
            "private String resourceCacheDirectory;",
            "public final static String DEFAULT_MODEL_OUTPUT_NAME = \"last_hidden_state\";",
            "private String modelOutputName = DEFAULT_MODEL_OUTPUT_NAME;"
        ],
        "functions": [
            {
                "name": "setTokenizerOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.tokenizerOptions = tokenizerOptions;",
                "is_abstract": "",
                "class_name": "TransformersEmbeddingClient",
                "annotations": []
            },
            {
                "name": "setDisableCaching",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.disableCaching = disableCaching;",
                "is_abstract": "",
                "class_name": "TransformersEmbeddingClient",
                "annotations": []
            },
            {
                "name": "setResourceCacheDirectory",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.resourceCacheDirectory = resourceCacheDir;",
                "is_abstract": "",
                "class_name": "TransformersEmbeddingClient",
                "annotations": []
            },
            {
                "name": "setGpuDeviceId",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.gpuDeviceId = gpuDeviceId;",
                "is_abstract": "",
                "class_name": "TransformersEmbeddingClient",
                "annotations": []
            },
            {
                "name": "setTokenizerResource",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.tokenizerResource = tokenizerResource;",
                "is_abstract": "",
                "class_name": "TransformersEmbeddingClient",
                "annotations": []
            },
            {
                "name": "setModelResource",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.modelResource = modelResource;",
                "is_abstract": "",
                "class_name": "TransformersEmbeddingClient",
                "annotations": []
            },
            {
                "name": "setModelOutputName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.modelOutputName = modelOutputName;",
                "is_abstract": "",
                "class_name": "TransformersEmbeddingClient",
                "annotations": []
            },
            {
                "name": "afterPropertiesSet",
                "parameters": [
                    ""
                ],
                "return_type": "new",
                "body": "this.cacheService = StringUtils.hasText(this.resourceCacheDirectory)\n\t\t\t\t? new ResourceCacheService(this.resourceCacheDirectory) : new ResourceCacheService();\n\n\t\t// Create a pre-trained HuggingFaceTokenizer instance from tokenizerResource\n\t\t// InputStream.\n\t\tthis.tokenizer = HuggingFaceTokenizer.newInstance(getCachedResource(this.tokenizerResource).getInputStream(),\n\t\t\t\tthis.tokenizerOptions);\n\n\t\t// onnxruntime\n\t\tthis.environment = OrtEnvironment.getEnvironment();\n\n\t\tvar sessionOptions = new OrtSession.SessionOptions();\n\t\tif (this.gpuDeviceId >= 0) {\n\t\t\tsessionOptions.addCUDA(this.gpuDeviceId); // Run on a GPU or with another\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// provider\n\t\t}\n\t\tthis.session = this.environment.createSession(getCachedResource(this.modelResource).getContentAsByteArray(),\n\t\t\t\tsessionOptions);\n\n\t\tthis.onnxModelInputs = this.session.getInputNames();\n\t\tSet<String> onnxModelOutputs = this.session.getOutputNames();\n\n\t\tlogger.info(\"Model input names: \" + this.onnxModelInputs.stream().collect(Collectors.joining(\", \")));\n\t\tlogger.info(\"Model output names: \" + onnxModelOutputs.stream().collect(Collectors.joining(\", \")));\n\n\t\tAssert.isTrue(onnxModelOutputs.contains(this.modelOutputName),\n\t\t\t\t\"The generative output names doesn't contain expected: \" + this.modelOutputName);",
                "is_abstract": "",
                "class_name": "TransformersEmbeddingClient",
                "annotations": []
            },
            {
                "name": "getCachedResource",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.disableCaching ? resource : this.cacheService.getCachedResource(resource);",
                "is_abstract": "",
                "class_name": "TransformersEmbeddingClient",
                "annotations": []
            },
            {
                "name": "embed",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return embed(List.of(text)).get(0);",
                "is_abstract": "",
                "class_name": "TransformersEmbeddingClient",
                "annotations": []
            },
            {
                "name": "embedForResponse",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "List<Embedding> data = new ArrayList<>();\n\t\tList<List<Double>> embed = this.embed(texts);\n\t\tfor (int i = 0; i < embed.size(); i++) {\n\t\t\tdata.add(new Embedding(embed.get(i), i));\n\t\t}\n\t\treturn new EmbeddingResponse(data);",
                "is_abstract": "",
                "class_name": "TransformersEmbeddingClient",
                "annotations": []
            },
            {
                "name": "call",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "List<List<Double>> resultEmbeddings = new ArrayList<>();\n\n\t\ttry {\n\n\t\t\tEncoding[] encodings = this.tokenizer.batchEncode(request.getInstructions());\n\n\t\t\tlong[][] input_ids0 = new long[encodings.length][];\n\t\t\tlong[][] attention_mask0 = new long[encodings.length][];\n\t\t\tlong[][] token_type_ids0 = new long[encodings.length][];\n\n\t\t\tfor (int i = 0; i < encodings.length; i++) {\n\t\t\t\tinput_ids0[i] = encodings[i].getIds();\n\t\t\t\tattention_mask0[i] = encodings[i].getAttentionMask();\n\t\t\t\ttoken_type_ids0[i] = encodings[i].getTypeIds();\n\t\t\t}\n\n\t\t\tOnnxTensor inputIds = OnnxTensor.createTensor(this.environment, input_ids0);\n\t\t\tOnnxTensor attentionMask = OnnxTensor.createTensor(this.environment, attention_mask0);\n\t\t\tOnnxTensor tokenTypeIds = OnnxTensor.createTensor(this.environment, token_type_ids0);\n\n\t\t\tMap<String, OnnxTensor> modelInputs = Map.of(\"input_ids\", inputIds, \"attention_mask\", attentionMask,\n\t\t\t\t\t\"token_type_ids\", tokenTypeIds);\n\n\t\t\tmodelInputs = removeUnknownModelInputs(modelInputs);\n\n\t\t\t// The Run result object is AutoCloseable to prevent references from leaking\n\t\t\t// out. Once the Result object is\n\t\t\t// closed, all it\u2019s child OnnxValues are closed too.\n\t\t\ttry (OrtSession.Result results = this.session.run(modelInputs)) {\n\n\t\t\t\t// OnnxValue lastHiddenState = results.get(0);\n\t\t\t\tOnnxValue lastHiddenState = results.get(this.modelOutputName).get();\n\n\t\t\t\t// 0 - batch_size (1..x)\n\t\t\t\t// 1 - sequence_length (128)\n\t\t\t\t// 2 - embedding dimensions (384)\n\t\t\t\tfloat[][][] tokenEmbeddings = (float[][][]) lastHiddenState.getValue();\n\n\t\t\t\ttry (NDManager manager = NDManager.newBaseManager()) {\n\t\t\t\t\tNDArray ndTokenEmbeddings = create(tokenEmbeddings, manager);\n\t\t\t\t\tNDArray ndAttentionMask = manager.create(attention_mask0);\n\n\t\t\t\t\tNDArray embedding = meanPooling(ndTokenEmbeddings, ndAttentionMask);\n\n\t\t\t\t\tfor (int i = 0; i < embedding.size(0); i++) {\n\t\t\t\t\t\tresultEmbeddings.add(toDoubleList(embedding.get(i).toFloatArray()));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch (OrtException ex) {\n\t\t\tthrow new RuntimeException(ex);\n\t\t}\n\n\t\tvar indexCounter = new AtomicInteger(0);\n\t\treturn new EmbeddingResponse(\n\t\t\t\tresultEmbeddings.stream().map(e -> new Embedding(e, indexCounter.incrementAndGet())).toList());",
                "is_abstract": "",
                "class_name": "TransformersEmbeddingClient",
                "annotations": []
            },
            {
                "name": "removeUnknownModelInputs",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return modelInputs.entrySet()\n\t\t\t.stream()\n\t\t\t.filter(a -> onnxModelInputs.contains(a.getKey()))\n\t\t\t.collect(Collectors.toMap(e -> e.getKey(), e -> e.getValue()));",
                "is_abstract": "",
                "class_name": "TransformersEmbeddingClient",
                "annotations": []
            },
            {
                "name": "create",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "FloatBuffer buffer = FloatBuffer.allocate(data3d.length * data3d[0].length * data3d[0][0].length);\n\n\t\tfor (float[][] data2d : data3d) {\n\t\t\tfor (float[] data1d : data2d) {\n\t\t\t\tbuffer.put(data1d);\n\t\t\t}\n\t\t}\n\t\tbuffer.rewind();\n\n\t\treturn manager.create(buffer, new Shape(data3d.length, data3d[0].length, data3d[0][0].length));",
                "is_abstract": "",
                "class_name": "TransformersEmbeddingClient",
                "annotations": []
            },
            {
                "name": "meanPooling",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "NDArray attentionMaskExpanded = attentionMask.expandDims(-1)\n\t\t\t.broadcast(tokenEmbeddings.getShape())\n\t\t\t.toType(DataType.FLOAT32, false);\n\n\t\t// Multiply token embeddings with expanded attention mask\n\t\tNDArray weightedEmbeddings = tokenEmbeddings.mul(attentionMaskExpanded);\n\n\t\t// Sum along the appropriate axis\n\t\tNDArray sumEmbeddings = weightedEmbeddings.sum(new int[] { EMBEDDING_AXIS });\n\n\t\t// Clamp the attention mask sum to avoid division by zero\n\t\tNDArray sumMask = attentionMaskExpanded.sum(new int[] { EMBEDDING_AXIS }).clip(1e-9f, Float.MAX_VALUE);\n\n\t\t// Divide sum embeddings by sum mask\n\t\treturn sumEmbeddings.div(sumMask);",
                "is_abstract": "",
                "class_name": "TransformersEmbeddingClient",
                "annotations": []
            },
            {
                "name": "toDoubleList",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "List<Double> result = new ArrayList<>();\n\t\tif (floats != null && floats.length > 0) {\n\t\t\tfor (int i = 0; i < floats.length; i++) {\n\t\t\t\tresult.add((double) floats[i]);\n\t\t\t}\n\t\t}\n\t\treturn result;",
                "is_abstract": "",
                "class_name": "TransformersEmbeddingClient",
                "annotations": []
            },
            {
                "name": "toResource",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new DefaultResourceLoader().getResource(uri);",
                "is_abstract": "",
                "class_name": "TransformersEmbeddingClient",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-azure-openai/src/test/java/org/springframework/ai/azure/openai/AzureOpenAiEmbeddingClientIT.java",
        "class_names": [
            "TestConfiguration",
            "AzureOpenAiEmbeddingClientIT"
        ],
        "imports": "import java.util.List;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport com.azure.ai.openai.OpenAIClientBuilder;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport com.azure.core.credential.AzureKeyCredential;\nimport com.azure.ai.openai.OpenAIClient;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.boot.SpringBootConfiguration;\nimport org.springframework.ai.embedding.EmbeddingResponse;",
        "package_import_paths": {
            "org.springframework.ai.azure.openai.AzureOpenAiEmbeddingClientIT": "org.springframework.ai.azure.openai.AzureOpenAiEmbeddingClientIT",
            "org.springframework.ai.azure.openai.TestConfiguration": "org.springframework.ai.azure.openai.TestConfiguration",
            "org.springframework.ai.azure.openai.singleEmbeddin": "org.springframework.ai.azure.openai.singleEmbeddin",
            "org.springframework.ai.azure.openai.batchEmbeddin": "org.springframework.ai.azure.openai.batchEmbeddin",
            "org.springframework.ai.azure.openai.openAIClient": "org.springframework.ai.azure.openai.openAIClient",
            "org.springframework.ai.azure.openai.azureEmbeddingClient": "org.springframework.ai.azure.openai.azureEmbeddingClient",
            "org.springframework.ai.azure.openai.privat": "org.springframework.ai.azure.openai.privat"
        },
        "package": "package org.springframework.ai.azure.openai;",
        "property_declarations": [
            "@Autowired\n\tprivate AzureOpenAiEmbeddingClient embeddingClient;"
        ],
        "functions": [
            {
                "name": "singleEmbedding",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "assertThat(embeddingClient).isNotNull();\n\t\tEmbeddingResponse embeddingResponse = embeddingClient.embedForResponse(List.of(\"Hello World\"));\n\t\tassertThat(embeddingResponse.getResults()).hasSize(1);\n\t\tassertThat(embeddingResponse.getResults().get(0).getOutput()).isNotEmpty();\n\t\tSystem.out.println(embeddingClient.dimensions());\n\t\tassertThat(embeddingClient.dimensions()).isEqualTo(1536);",
                "is_abstract": "",
                "class_name": "AzureOpenAiEmbeddingClientIT",
                "annotations": []
            },
            {
                "name": "batchEmbedding",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "assertThat(embeddingClient).isNotNull();\n\t\tEmbeddingResponse embeddingResponse = embeddingClient\n\t\t\t.embedForResponse(List.of(\"Hello World\", \"World is big and salvation is near\"));\n\t\tassertThat(embeddingResponse.getResults()).hasSize(2);\n\t\tassertThat(embeddingResponse.getResults().get(0).getOutput()).isNotEmpty();\n\t\tassertThat(embeddingResponse.getResults().get(0).getIndex()).isEqualTo(0);\n\t\tassertThat(embeddingResponse.getResults().get(1).getOutput()).isNotEmpty();\n\t\tassertThat(embeddingResponse.getResults().get(1).getIndex()).isEqualTo(1);\n\n\t\tassertThat(embeddingClient.dimensions()).isEqualTo(1536);",
                "is_abstract": "",
                "class_name": "AzureOpenAiEmbeddingClientIT",
                "annotations": []
            },
            {
                "name": "openAIClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new OpenAIClientBuilder().credential(new AzureKeyCredential(System.getenv(\"AZURE_OPENAI_API_KEY\")))\n\t\t\t\t.endpoint(System.getenv(\"AZURE_OPENAI_ENDPOINT\"))\n\t\t\t\t.buildClient();",
                "is_abstract": "",
                "class_name": "AzureOpenAiEmbeddingClientIT TestConfiguration",
                "annotations": []
            },
            {
                "name": "azureEmbeddingClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new AzureOpenAiEmbeddingClient(openAIClient);",
                "is_abstract": "",
                "class_name": "AzureOpenAiEmbeddingClientIT TestConfiguration",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-azure-openai/src/test/java/org/springframework/ai/azure/openai/MockAiTestConfiguration.java",
        "class_names": [
            "MockWebServerFactoryBean",
            "MockMvcDispatcher",
            "MockAiTestConfiguration"
        ],
        "imports": "import org.springframework.lang.Nullable;\nimport org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\nimport okio.Buffer;\nimport okhttp3.mockwebserver.RecordedRequest;\nimport java.io.UnsupportedEncodingException;\nimport org.springframework.test.web.servlet.MvcResult;\nimport okhttp3.mockwebserver.MockWebServer;\nimport java.util.concurrent.ConcurrentLinkedDeque;\nimport org.springframework.util.StringUtils;\nimport java.io.IOException;\nimport org.springframework.beans.factory.DisposableBean;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\nimport java.nio.charset.Charset;\nimport org.slf4j.Logger;\nimport okhttp3.mockwebserver.MockResponse;\nimport org.springframework.context.annotation.Configuration;\nimport java.nio.charset.StandardCharsets;\nimport org.springframework.beans.factory.FactoryBean;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.beans.factory.InitializingBean;\nimport org.springframework.mock.web.MockHttpServletResponse;\nimport org.springframework.test.web.servlet.RequestBuilder;\nimport okhttp3.mockwebserver.Dispatcher;\nimport java.net.URI;\nimport java.util.Queue;\nimport org.springframework.util.Assert;\nimport java.util.Optional;\nimport org.springframework.context.SmartLifecycle;",
        "package_import_paths": {
            "org.springframework.ai.azure.openai.MockAiTestConfiguration": "org.springframework.ai.azure.openai.MockAiTestConfiguration",
            "org.springframework.ai.azure.openai.MockMvcDispatcher": "org.springframework.ai.azure.openai.MockMvcDispatcher",
            "org.springframework.ai.azure.openai.MockWebServerFactoryBean": "org.springframework.ai.azure.openai.MockWebServerFactoryBean",
            "org.springframework.ai.azure.openai.mockWebServer": "org.springframework.ai.azure.openai.mockWebServer",
            "org.springframework.ai.azure.openai.getMockMv": "org.springframework.ai.azure.openai.getMockMv",
            "org.springframework.ai.azure.openai.SuppressWarnings": "org.springframework.ai.azure.openai.SuppressWarnings",
            "org.springframework.ai.azure.openai.requestBuilderFrom": "org.springframework.ai.azure.openai.requestBuilderFrom",
            "org.springframework.ai.azure.openai.resolveRequestPath": "org.springframework.ai.azure.openai.resolveRequestPath",
            "org.springframework.ai.azure.openai.mockResponseFrom": "org.springframework.ai.azure.openai.mockResponseFrom",
            "org.springframework.ai.azure.openai.getBody": "org.springframework.ai.azure.openai.getBody",
            "org.springframework.ai.azure.openai.setDispatcher": "org.springframework.ai.azure.openai.setDispatcher",
            "org.springframework.ai.azure.openai.getDispatcher": "org.springframework.ai.azure.openai.getDispatcher",
            "org.springframework.ai.azure.openai.getLogger": "org.springframework.ai.azure.openai.getLogger",
            "org.springframework.ai.azure.openai.getObject": "org.springframework.ai.azure.openai.getObject",
            "org.springframework.ai.azure.openai.getObjectTy": "org.springframework.ai.azure.openai.getObjectTy",
            "org.springframework.ai.azure.openai.afterPropertiesSet": "org.springframework.ai.azure.openai.afterPropertiesSet",
            "org.springframework.ai.azure.openai.enqueu": "org.springframework.ai.azure.openai.enqueu",
            "org.springframework.ai.azure.openai.destroy": "org.springframework.ai.azure.openai.destroy",
            "org.springframework.ai.azure.openai.start": "org.springframework.ai.azure.openai.start",
            "org.springframework.ai.azure.openai.FALLBACK_CHARSET": "org.springframework.ai.azure.openai.FALLBACK_CHARSET",
            "org.springframework.ai.azure.openai.SPRING_AI_API_PATH": "org.springframework.ai.azure.openai.SPRING_AI_API_PATH",
            "org.springframework.ai.azure.openai.mockMv": "org.springframework.ai.azure.openai.mockMv",
            "org.springframework.ai.azure.openai.dispatcher": "org.springframework.ai.azure.openai.dispatcher",
            "org.springframework.ai.azure.openai.logger": "org.springframework.ai.azure.openai.logger",
            "org.springframework.ai.azure.openai.queuedResponses": "org.springframework.ai.azure.openai.queuedResponses"
        },
        "package": "package org.springframework.ai.azure.openai;",
        "property_declarations": [
            "private final Queue<MockResponse> queuedResponses = new ConcurrentLinkedDeque<>();",
            "public static final String SPRING_AI_API_PATH = \"/spring-ai/api\";",
            "private final MockMvc mockMvc;",
            "private MockWebServer mockWebServer;",
            "private Dispatcher dispatcher;",
            "private final Logger logger = LoggerFactory.getLogger(getClass().getName());",
            "public static final Charset FALLBACK_CHARSET = StandardCharsets.UTF_8;"
        ],
        "functions": [
            {
                "name": "mockWebServer",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "MockWebServerFactoryBean factoryBean = new MockWebServerFactoryBean();\n\t\tfactoryBean.setDispatcher(new MockMvcDispatcher(mockMvc));\n\t\treturn factoryBean;",
                "is_abstract": "",
                "class_name": "MockAiTestConfiguration",
                "annotations": []
            },
            {
                "name": "getMockMvc",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.mockMvc;",
                "is_abstract": "",
                "class_name": "MockAiTestConfiguration MockMvcDispatcher",
                "annotations": []
            },
            {
                "name": "SuppressWarnings",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "try {\n\t\t\t\tMvcResult result = getMockMvc().perform(requestBuilderFrom(request))\n\t\t\t\t\t.andExpect(status().isOk())\n\t\t\t\t\t.andReturn();\n\n\t\t\t\tMockHttpServletResponse response = result.getResponse();\n\n\t\t\t\treturn mockResponseFrom(response);\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}",
                "is_abstract": "",
                "class_name": "MockAiTestConfiguration MockMvcDispatcher",
                "annotations": [
                    "@SuppressWarnings(\"all\")"
                ]
            },
            {
                "name": "requestBuilderFrom",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String requestMethod = request.getMethod();\n\t\t\tString requestPath = resolveRequestPath(request);\n\n\t\t\tURI uri = URI.create(requestPath);\n\n\t\t\tBuffer requestBody = request.getBody();\n\n\t\t\tString content = requestBody.readUtf8();\n\n\t\t\treturn MockMvcRequestBuilders.request(requestMethod, uri).content(content);",
                "is_abstract": "",
                "class_name": "MockAiTestConfiguration MockMvcDispatcher",
                "annotations": []
            },
            {
                "name": "resolveRequestPath",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String requestPath = request.getPath();\n\t\t\tString pavedRequestPath = StringUtils.hasText(requestPath) ? requestPath : \"/\";\n\n\t\t\treturn pavedRequestPath.startsWith(SPRING_AI_API_PATH) ? pavedRequestPath\n\t\t\t\t\t: SPRING_AI_API_PATH.concat(pavedRequestPath);",
                "is_abstract": "",
                "class_name": "MockAiTestConfiguration MockMvcDispatcher",
                "annotations": []
            },
            {
                "name": "mockResponseFrom",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "MockResponse mockResponse = new MockResponse();\n\n\t\t\tfor (String headerName : response.getHeaderNames()) {\n\t\t\t\tString headerValue = response.getHeader(headerName);\n\t\t\t\tif (StringUtils.hasText(headerValue)) {\n\t\t\t\t\tmockResponse.addHeader(headerName, headerValue);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tmockResponse.setResponseCode(response.getStatus());\n\t\t\tmockResponse.setBody(getBody(response));\n\n\t\t\treturn mockResponse;",
                "is_abstract": "",
                "class_name": "MockAiTestConfiguration MockMvcDispatcher",
                "annotations": []
            },
            {
                "name": "getBody",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Charset responseCharacterEncoding = Charset.forName(response.getCharacterEncoding());\n\n\t\t\ttry {\n\t\t\t\treturn response.getContentAsString(FALLBACK_CHARSET);\n\t\t\t}\n\t\t\tcatch (UnsupportedEncodingException e) {\n\t\t\t\tthrow new RuntimeException(\"Failed to decode content using HttpServletResponse Charset [%s]\"\n\t\t\t\t\t.formatted(responseCharacterEncoding), e);\n\t\t\t}",
                "is_abstract": "",
                "class_name": "MockAiTestConfiguration MockMvcDispatcher",
                "annotations": []
            },
            {
                "name": "setDispatcher",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.dispatcher = dispatcher;",
                "is_abstract": "",
                "class_name": "MockAiTestConfiguration MockMvcDispatcher MockWebServerFactoryBean",
                "annotations": []
            },
            {
                "name": "getDispatcher",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return Optional.ofNullable(this.dispatcher);",
                "is_abstract": "",
                "class_name": "MockAiTestConfiguration MockMvcDispatcher MockWebServerFactoryBean",
                "annotations": []
            },
            {
                "name": "getLogger",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.logger;",
                "is_abstract": "",
                "class_name": "MockAiTestConfiguration MockMvcDispatcher MockWebServerFactoryBean",
                "annotations": []
            },
            {
                "name": "getObject",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return start(this.mockWebServer);",
                "is_abstract": "",
                "class_name": "MockAiTestConfiguration MockMvcDispatcher MockWebServerFactoryBean",
                "annotations": []
            },
            {
                "name": "getObjectType",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return MockWebServer.class;",
                "is_abstract": "",
                "class_name": "MockAiTestConfiguration MockMvcDispatcher MockWebServerFactoryBean",
                "annotations": []
            },
            {
                "name": "afterPropertiesSet",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.mockWebServer = new MockWebServer();\n\t\t\tthis.queuedResponses.forEach(this.mockWebServer::enqueue);\n\t\t\tgetDispatcher().ifPresent(this.mockWebServer::setDispatcher);",
                "is_abstract": "",
                "class_name": "MockAiTestConfiguration MockMvcDispatcher MockWebServerFactoryBean",
                "annotations": []
            },
            {
                "name": "enqueue",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(response, \"MockResponse must not be null\");\n\t\t\tthis.queuedResponses.add(response);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "MockAiTestConfiguration MockMvcDispatcher MockWebServerFactoryBean",
                "annotations": []
            },
            {
                "name": "destroy",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "try {\n\t\t\t\tthis.mockWebServer.shutdown();\n\t\t\t}\n\t\t\tcatch (IOException e) {\n\t\t\t\tgetLogger().warn(\"MockWebServer was not shutdown correctly: {}\", e.getMessage());\n\t\t\t\tgetLogger().trace(\"MockWebServer shutdown failure\", e);\n\t\t\t}",
                "is_abstract": "",
                "class_name": "MockAiTestConfiguration MockMvcDispatcher MockWebServerFactoryBean",
                "annotations": []
            },
            {
                "name": "start",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "try {\n\t\t\t\twebServer.start();\n\t\t\t\treturn webServer;\n\t\t\t}\n\t\t\tcatch (IOException e) {\n\t\t\t\tthrow new IllegalStateException(\"Failed to start MockWebServer\", e);\n\t\t\t}",
                "is_abstract": "",
                "class_name": "MockAiTestConfiguration MockMvcDispatcher MockWebServerFactoryBean",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-azure-openai/src/test/java/org/springframework/ai/azure/openai/AzureOpenAiChatClientIT.java",
        "class_names": [
            "TestConfiguration",
            "AzureOpenAiChatClientIT"
        ],
        "imports": "import java.util.stream.Collectors;\nimport java.util.List;\nimport org.springframework.ai.chat.Generation;\nimport com.azure.ai.openai.OpenAIClientBuilder;\nimport org.springframework.ai.chat.prompt.SystemPromptTemplate;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.ai.parser.MapOutputParser;\nimport org.springframework.ai.chat.messages.Message;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport java.util.Map;\nimport org.springframework.ai.parser.BeanOutputParser;\nimport java.util.Arrays;\nimport org.springframework.ai.chat.ChatResponse;\nimport org.springframework.ai.chat.messages.UserMessage;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.ai.parser.ListOutputParser;\nimport org.springframework.ai.chat.prompt.PromptTemplate;\nimport com.azure.core.credential.AzureKeyCredential;\nimport org.springframework.ai.chat.messages.AssistantMessage;\nimport org.springframework.boot.SpringBootConfiguration;\nimport org.springframework.ai.chat.prompt.Prompt;\nimport org.springframework.core.convert.support.DefaultConversionService;\nimport org.junit.jupiter.api.Test;\nimport java.util.Objects;\nimport com.azure.ai.openai.OpenAIClient;",
        "package_import_paths": {
            "org.springframework.ai.azure.openai.AzureOpenAiChatClientIT": "org.springframework.ai.azure.openai.AzureOpenAiChatClientIT",
            "org.springframework.ai.azure.openai.TestConfiguration": "org.springframework.ai.azure.openai.TestConfiguration",
            "org.springframework.ai.azure.openai.roleTest": "org.springframework.ai.azure.openai.roleTest",
            "org.springframework.ai.azure.openai.outputParser": "org.springframework.ai.azure.openai.outputParser",
            "org.springframework.ai.azure.openai.mapOutputParser": "org.springframework.ai.azure.openai.mapOutputParser",
            "org.springframework.ai.azure.openai.beanOutputParser": "org.springframework.ai.azure.openai.beanOutputParser",
            "org.springframework.ai.azure.openai.beanOutputParserRecords": "org.springframework.ai.azure.openai.beanOutputParserRecords",
            "org.springframework.ai.azure.openai.beanStreamOutputParserRecords": "org.springframework.ai.azure.openai.beanStreamOutputParserRecords",
            "org.springframework.ai.azure.openai.openAIClient": "org.springframework.ai.azure.openai.openAIClient",
            "org.springframework.ai.azure.openai.azureOpenAiChatClient": "org.springframework.ai.azure.openai.azureOpenAiChatClient",
            "org.springframework.ai.azure.openai.privat": "org.springframework.ai.azure.openai.privat"
        },
        "package": "package org.springframework.ai.azure.openai;",
        "property_declarations": [
            "@Autowired\n\tprivate AzureOpenAiChatClient chatClient;"
        ],
        "functions": [
            {
                "name": "roleTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Message systemMessage = new SystemPromptTemplate(\"\"\"\n\t\t\t\tYou are a helpful AI assistant. Your name is {name}.\n\t\t\t\tYou are an AI assistant that helps people find information.\n\t\t\t\tYour name is {name}\n\t\t\t\tYou should reply to the user's request with your name and also in the style of a {voice}.\n\t\t\t\t\"\"\").createMessage(Map.of(\"name\", \"Bob\", \"voice\", \"pirate\"));\n\n\t\tUserMessage userMessage = new UserMessage(\"Generate the names of 5 famous pirates.\");\n\n\t\tPrompt prompt = new Prompt(List.of(userMessage, systemMessage));\n\t\tChatResponse response = chatClient.call(prompt);\n\t\tassertThat(response.getResult().getOutput().getContent()).contains(\"Blackbeard\");",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatClientIT",
                "annotations": []
            },
            {
                "name": "outputParser",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "DefaultConversionService conversionService = new DefaultConversionService();\n\t\tListOutputParser outputParser = new ListOutputParser(conversionService);\n\n\t\tString format = outputParser.getFormat();\n\t\tString template = \"\"\"\n\t\t\t\tList five {subject}\n\t\t\t\t{format}\n\t\t\t\t\"\"\";\n\t\tPromptTemplate promptTemplate = new PromptTemplate(template,\n\t\t\t\tMap.of(\"subject\", \"ice cream flavors\", \"format\", format));\n\t\tPrompt prompt = new Prompt(promptTemplate.createMessage());\n\t\tGeneration generation = chatClient.call(prompt).getResult();\n\n\t\tList<String> list = outputParser.parse(generation.getOutput().getContent());\n\t\tassertThat(list).hasSize(5);",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatClientIT",
                "annotations": []
            },
            {
                "name": "mapOutputParser",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "MapOutputParser outputParser = new MapOutputParser();\n\n\t\tString format = outputParser.getFormat();\n\t\tString template = \"\"\"\n\t\t\t\tProvide me a List of {subject}\n\t\t\t\t{format}\n\t\t\t\t\"\"\";\n\t\tPromptTemplate promptTemplate = new PromptTemplate(template,\n\t\t\t\tMap.of(\"subject\", \"an array of numbers from 1 to 9 under they key name 'numbers'\", \"format\", format));\n\t\tPrompt prompt = new Prompt(promptTemplate.createMessage());\n\t\tGeneration generation = chatClient.call(prompt).getResult();\n\n\t\tMap<String, Object> result = outputParser.parse(generation.getOutput().getContent());\n\t\tassertThat(result.get(\"numbers\")).isEqualTo(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9));",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatClientIT",
                "annotations": []
            },
            {
                "name": "beanOutputParser",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "BeanOutputParser<ActorsFilms> outputParser = new BeanOutputParser<>(ActorsFilms.class);\n\n\t\tString format = outputParser.getFormat();\n\t\tString template = \"\"\"\n\t\t\t\tGenerate the filmography for a random actor.\n\t\t\t\t{format}\n\t\t\t\t\"\"\";\n\t\tPromptTemplate promptTemplate = new PromptTemplate(template, Map.of(\"format\", format));\n\t\tPrompt prompt = new Prompt(promptTemplate.createMessage());\n\t\tGeneration generation = chatClient.call(prompt).getResult();\n\n\t\tActorsFilms actorsFilms = outputParser.parse(generation.getOutput().getContent());\n\t\tassertThat(actorsFilms.actor()).isNotNull();",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatClientIT",
                "annotations": []
            },
            {
                "name": "beanOutputParserRecords",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "BeanOutputParser<ActorsFilmsRecord> outputParser = new BeanOutputParser<>(ActorsFilmsRecord.class);\n\n\t\tString format = outputParser.getFormat();\n\t\tString template = \"\"\"\n\t\t\t\tGenerate the filmography of 5 movies for Tom Hanks.\n\t\t\t\t{format}\n\t\t\t\t\"\"\";\n\t\tPromptTemplate promptTemplate = new PromptTemplate(template, Map.of(\"format\", format));\n\t\tPrompt prompt = new Prompt(promptTemplate.createMessage());\n\t\tGeneration generation = chatClient.call(prompt).getResult();\n\n\t\tActorsFilmsRecord actorsFilms = outputParser.parse(generation.getOutput().getContent());\n\t\tSystem.out.println(actorsFilms);\n\t\tassertThat(actorsFilms.actor()).isEqualTo(\"Tom Hanks\");\n\t\tassertThat(actorsFilms.movies()).hasSize(5);",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatClientIT",
                "annotations": []
            },
            {
                "name": "beanStreamOutputParserRecords",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "BeanOutputParser<ActorsFilmsRecord> outputParser = new BeanOutputParser<>(ActorsFilmsRecord.class);\n\n\t\tString format = outputParser.getFormat();\n\t\tString template = \"\"\"\n\t\t\t\tGenerate the filmography of 5 movies for Tom Hanks.\n\t\t\t\t{format}\n\t\t\t\t\"\"\";\n\t\tPromptTemplate promptTemplate = new PromptTemplate(template, Map.of(\"format\", format));\n\t\tPrompt prompt = new Prompt(promptTemplate.createMessage());\n\n\t\tString generationTextFromStream = chatClient.stream(prompt)\n\t\t\t.collectList()\n\t\t\t.block()\n\t\t\t.stream()\n\t\t\t.map(ChatResponse::getResults)\n\t\t\t.flatMap(List::stream)\n\t\t\t.map(Generation::getOutput)\n\t\t\t.map(AssistantMessage::getContent)\n\t\t\t.filter(Objects::nonNull)\n\t\t\t.collect(Collectors.joining());\n\n\t\tActorsFilmsRecord actorsFilms = outputParser.parse(generationTextFromStream);\n\t\tSystem.out.println(actorsFilms);\n\t\tassertThat(actorsFilms.actor()).isEqualTo(\"Tom Hanks\");\n\t\tassertThat(actorsFilms.movies()).hasSize(5);",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatClientIT",
                "annotations": []
            },
            {
                "name": "openAIClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new OpenAIClientBuilder().credential(new AzureKeyCredential(System.getenv(\"AZURE_OPENAI_API_KEY\")))\n\t\t\t\t.endpoint(System.getenv(\"AZURE_OPENAI_ENDPOINT\"))\n\t\t\t\t.buildClient();",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatClientIT TestConfiguration",
                "annotations": []
            },
            {
                "name": "azureOpenAiChatClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new AzureOpenAiChatClient(openAIClient,\n\t\t\t\t\tAzureOpenAiChatOptions.builder().withDeploymentName(\"gpt-35-turbo\").withMaxTokens(200).build());",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatClientIT TestConfiguration",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-azure-openai/src/test/java/org/springframework/ai/azure/openai/AzureChatCompletionsOptionsTests.java",
        "class_names": [
            "AzureChatCompletionsOptionsTests"
        ],
        "imports": "import org.junit.jupiter.params.provider.Arguments;\nimport org.springframework.ai.chat.prompt.Prompt;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.junit.jupiter.params.provider.MethodSource;\nimport java.util.stream.Stream;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\nimport com.azure.ai.openai.OpenAIClient;",
        "package_import_paths": {
            "org.springframework.ai.azure.openai.AzureChatCompletionsOptionsTests": "org.springframework.ai.azure.openai.AzureChatCompletionsOptionsTests",
            "org.springframework.ai.azure.openai.createRequestWithChatOptions": "org.springframework.ai.azure.openai.createRequestWithChatOptions",
            "org.springframework.ai.azure.openai.providePresencePenaltyAndFrequencyPenaltyTest": "org.springframework.ai.azure.openai.providePresencePenaltyAndFrequencyPenaltyTest",
            "org.springframework.ai.azure.openai.MethodSour": "org.springframework.ai.azure.openai.MethodSour"
        },
        "package": "package org.springframework.ai.azure.openai;",
        "property_declarations": [],
        "functions": [
            {
                "name": "createRequestWithChatOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "OpenAIClient mockClient = Mockito.mock(OpenAIClient.class);\n\t\tvar client = new AzureOpenAiChatClient(mockClient,\n\t\t\t\tAzureOpenAiChatOptions.builder().withDeploymentName(\"DEFAULT_MODEL\").withTemperature(66.6f).build());\n\n\t\tvar requestOptions = client.toAzureChatCompletionsOptions(new Prompt(\"Test message content\"));\n\n\t\tassertThat(requestOptions.getMessages()).hasSize(1);\n\n\t\tassertThat(requestOptions.getModel()).isEqualTo(\"DEFAULT_MODEL\");\n\t\tassertThat(requestOptions.getTemperature()).isEqualTo(66.6f);\n\n\t\trequestOptions = client.toAzureChatCompletionsOptions(new Prompt(\"Test message content\",\n\t\t\t\tAzureOpenAiChatOptions.builder().withDeploymentName(\"PROMPT_MODEL\").withTemperature(99.9f).build()));\n\n\t\tassertThat(requestOptions.getMessages()).hasSize(1);\n\n\t\tassertThat(requestOptions.getModel()).isEqualTo(\"PROMPT_MODEL\");\n\t\tassertThat(requestOptions.getTemperature()).isEqualTo(99.9f);",
                "is_abstract": "",
                "class_name": "AzureChatCompletionsOptionsTests",
                "annotations": []
            },
            {
                "name": "providePresencePenaltyAndFrequencyPenaltyTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return Stream.of(Arguments.of(0.0f, 0.0f), Arguments.of(0.0f, 1.0f), Arguments.of(1.0f, 0.0f),\n\t\t\t\tArguments.of(1.0f, 1.0f), Arguments.of(1.0f, null), Arguments.of(null, 1.0f), Arguments.of(null, null));",
                "is_abstract": "",
                "class_name": "AzureChatCompletionsOptionsTests",
                "annotations": []
            },
            {
                "name": "MethodSource",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var options = AzureOpenAiChatOptions.builder()\n\t\t\t.withMaxTokens(800)\n\t\t\t.withTemperature(0.7F)\n\t\t\t.withTopP(0.95F)\n\t\t\t.withPresencePenalty(presencePenalty)\n\t\t\t.withFrequencyPenalty(frequencyPenalty)\n\t\t\t.build();\n\n\t\tif (presencePenalty == null) {\n\t\t\tassertThat(options.getPresencePenalty()).isEqualTo(null);\n\t\t}\n\t\telse {\n\t\t\tassertThat(options.getPresencePenalty().floatValue()).isEqualTo(presencePenalty);\n\t\t}\n\n\t\tif (frequencyPenalty == null) {\n\t\t\tassertThat(options.getFrequencyPenalty()).isEqualTo(null);\n\t\t}\n\t\telse {\n\t\t\tassertThat(options.getFrequencyPenalty().floatValue()).isEqualTo(frequencyPenalty);\n\t\t}",
                "is_abstract": "",
                "class_name": "AzureChatCompletionsOptionsTests",
                "annotations": [
                    "@MethodSource(\"providePresencePenaltyAndFrequencyPenaltyTest\")"
                ]
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-azure-openai/src/test/java/org/springframework/ai/azure/openai/MockAzureOpenAiTestConfiguration.java",
        "class_names": [
            "MockAzureOpenAiTestConfiguration"
        ],
        "imports": "import org.springframework.context.annotation.Import;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.context.annotation.Bean;\nimport com.azure.ai.openai.OpenAIClientBuilder;\nimport okhttp3.mockwebserver.MockWebServer;\nimport com.azure.ai.openai.OpenAIClient;\nimport org.springframework.context.annotation.Profile;\nimport okhttp3.mockwebserver.Dispatcher;\nimport org.springframework.boot.SpringBootConfiguration;\nimport okhttp3.HttpUrl;",
        "package_import_paths": {
            "org.springframework.ai.azure.openai.MockAzureOpenAiTestConfiguration": "org.springframework.ai.azure.openai.MockAzureOpenAiTestConfiguration",
            "org.springframework.ai.azure.openai.microsoftAzureOpenAiClient": "org.springframework.ai.azure.openai.microsoftAzureOpenAiClient",
            "org.springframework.ai.azure.openai.azureOpenAiChatClient": "org.springframework.ai.azure.openai.azureOpenAiChatClient"
        },
        "package": "package org.springframework.ai.azure.openai;",
        "property_declarations": [],
        "functions": [
            {
                "name": "microsoftAzureOpenAiClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "HttpUrl baseUrl = webServer.url(MockAiTestConfiguration.SPRING_AI_API_PATH);\n\n\t\treturn new OpenAIClientBuilder().endpoint(baseUrl.toString()).buildClient();",
                "is_abstract": "",
                "class_name": "MockAzureOpenAiTestConfiguration",
                "annotations": []
            },
            {
                "name": "azureOpenAiChatClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new AzureOpenAiChatClient(microsoftAzureOpenAiClient);",
                "is_abstract": "",
                "class_name": "MockAzureOpenAiTestConfiguration",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-azure-openai/src/test/java/org/springframework/ai/azure/openai/AzureEmbeddingsOptionsTests.java",
        "class_names": [
            "AzureEmbeddingsOptionsTests"
        ],
        "imports": "import org.springframework.ai.document.MetadataMode;\nimport java.util.List;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.springframework.ai.embedding.EmbeddingRequest;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\nimport com.azure.ai.openai.OpenAIClient;",
        "package_import_paths": {
            "org.springframework.ai.azure.openai.AzureEmbeddingsOptionsTests": "org.springframework.ai.azure.openai.AzureEmbeddingsOptionsTests",
            "org.springframework.ai.azure.openai.createRequestWithChatOptions": "org.springframework.ai.azure.openai.createRequestWithChatOptions"
        },
        "package": "package org.springframework.ai.azure.openai;",
        "property_declarations": [],
        "functions": [
            {
                "name": "createRequestWithChatOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "OpenAIClient mockClient = Mockito.mock(OpenAIClient.class);\n\t\tvar client = new AzureOpenAiEmbeddingClient(mockClient, MetadataMode.EMBED,\n\t\t\t\tAzureOpenAiEmbeddingOptions.builder()\n\t\t\t\t\t.withDeploymentName(\"DEFAULT_MODEL\")\n\t\t\t\t\t.withUser(\"USER_TEST\")\n\t\t\t\t\t.build());\n\n\t\tvar requestOptions = client.toEmbeddingOptions(new EmbeddingRequest(List.of(\"Test message content\"), null));\n\n\t\tassertThat(requestOptions.getInput()).hasSize(1);\n\n\t\tassertThat(requestOptions.getModel()).isEqualTo(\"DEFAULT_MODEL\");\n\t\tassertThat(requestOptions.getUser()).isEqualTo(\"USER_TEST\");\n\n\t\trequestOptions = client.toEmbeddingOptions(new EmbeddingRequest(List.of(\"Test message content\"),\n\t\t\t\tAzureOpenAiEmbeddingOptions.builder()\n\t\t\t\t\t.withDeploymentName(\"PROMPT_MODEL\")\n\t\t\t\t\t.withUser(\"PROMPT_USER\")\n\t\t\t\t\t.build()));\n\n\t\tassertThat(requestOptions.getInput()).hasSize(1);\n\n\t\tassertThat(requestOptions.getModel()).isEqualTo(\"PROMPT_MODEL\");\n\t\tassertThat(requestOptions.getUser()).isEqualTo(\"PROMPT_USER\");",
                "is_abstract": "",
                "class_name": "AzureEmbeddingsOptionsTests",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-azure-openai/src/test/java/org/springframework/ai/azure/openai/function/MockWeatherService.java",
        "class_names": [
            "MockWeatherService"
        ],
        "imports": "import com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport com.fasterxml.jackson.annotation.JsonPropertyDescription;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport java.util.function.Function;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport com.fasterxml.jackson.annotation.JsonClassDescription;",
        "package_import_paths": {
            "org.springframework.ai.azure.openai.function.MockWeatherServi": "org.springframework.ai.azure.openai.function.MockWeatherServi",
            "org.springframework.ai.azure.openai.function.apply": "org.springframework.ai.azure.openai.function.apply",
            "org.springframework.ai.azure.openai.function.unitNam": "org.springframework.ai.azure.openai.function.unitNam"
        },
        "package": "package org.springframework.ai.azure.openai.function;",
        "property_declarations": [
            "public final String unitName;"
        ],
        "functions": [
            {
                "name": "apply",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "double temperature = 0;\n\t\tif (request.location().contains(\"Paris\")) {\n\t\t\ttemperature = 15;\n\t\t}\n\t\telse if (request.location().contains(\"Tokyo\")) {\n\t\t\ttemperature = 10;\n\t\t}\n\t\telse if (request.location().contains(\"San Francisco\")) {\n\t\t\ttemperature = 30;\n\t\t}\n\n\t\treturn new Response(temperature, 15, 20, 2, 53, 45, Unit.C);",
                "is_abstract": "",
                "class_name": "MockWeatherService",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-azure-openai/src/test/java/org/springframework/ai/azure/openai/function/AzureOpenAiChatClientFunctionCallIT.java",
        "class_names": [
            "TestConfiguration",
            "AzureOpenAiChatClientFunctionCallIT"
        ],
        "imports": "import java.util.List;\nimport com.azure.ai.openai.OpenAIClientBuilder;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.ai.chat.messages.Message;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.slf4j.Logger;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.ai.azure.openai.AzureOpenAiChatOptions;\nimport org.springframework.ai.chat.ChatResponse;\nimport org.springframework.ai.chat.messages.UserMessage;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.ai.azure.openai.AzureOpenAiChatClient;\nimport org.springframework.context.annotation.Bean;\nimport com.azure.core.credential.AzureKeyCredential;\nimport org.springframework.boot.SpringBootConfiguration;\nimport org.springframework.ai.model.function.FunctionCallbackWrapper;\nimport java.util.ArrayList;\nimport org.springframework.ai.chat.prompt.Prompt;\nimport org.junit.jupiter.api.Test;\nimport com.azure.ai.openai.OpenAIClient;",
        "package_import_paths": {
            "org.springframework.ai.azure.openai.function.AzureOpenAiChatClientFunctionCallIT": "org.springframework.ai.azure.openai.function.AzureOpenAiChatClientFunctionCallIT",
            "org.springframework.ai.azure.openai.function.TestConfiguration": "org.springframework.ai.azure.openai.function.TestConfiguration",
            "org.springframework.ai.azure.openai.function.functionCallTest": "org.springframework.ai.azure.openai.function.functionCallTest",
            "org.springframework.ai.azure.openai.function.openAIClient": "org.springframework.ai.azure.openai.function.openAIClient",
            "org.springframework.ai.azure.openai.function.azureOpenAiChatClient": "org.springframework.ai.azure.openai.function.azureOpenAiChatClient",
            "org.springframework.ai.azure.openai.function.logger": "org.springframework.ai.azure.openai.function.logger",
            "org.springframework.ai.azure.openai.function.privat": "org.springframework.ai.azure.openai.function.privat"
        },
        "package": "package org.springframework.ai.azure.openai.function;",
        "property_declarations": [
            "private static final Logger logger = LoggerFactory.getLogger(AzureOpenAiChatClientFunctionCallIT.class);",
            "@Autowired\n\tprivate AzureOpenAiChatClient chatClient;"
        ],
        "functions": [
            {
                "name": "functionCallTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "UserMessage userMessage = new UserMessage(\"What's the weather like in San Francisco, in Tokyo, and in Paris?\");\n\n\t\tList<Message> messages = new ArrayList<>(List.of(userMessage));\n\n\t\tvar promptOptions = AzureOpenAiChatOptions.builder()\n\t\t\t.withDeploymentName(\"gpt-4-0125-preview\")\n\t\t\t.withFunctionCallbacks(List.of(FunctionCallbackWrapper.builder(new MockWeatherService())\n\t\t\t\t.withName(\"getCurrentWeather\")\n\t\t\t\t.withDescription(\"Get the current weather in a given location\")\n\t\t\t\t.withResponseConverter((response) -> \"\" + response.temp() + response.unit())\n\t\t\t\t.build()))\n\t\t\t.build();\n\n\t\tChatResponse response = chatClient.call(new Prompt(messages, promptOptions));\n\n\t\tlogger.info(\"Response: {}\", response);\n\n\t\tassertThat(response.getResult().getOutput().getContent()).containsAnyOf(\"30.0\", \"30\");\n\t\tassertThat(response.getResult().getOutput().getContent()).containsAnyOf(\"10.0\", \"10\");\n\t\tassertThat(response.getResult().getOutput().getContent()).containsAnyOf(\"15.0\", \"15\");",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatClientFunctionCallIT",
                "annotations": []
            },
            {
                "name": "openAIClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new OpenAIClientBuilder().credential(new AzureKeyCredential(System.getenv(\"AZURE_OPENAI_API_KEY\")))\n\t\t\t\t.endpoint(System.getenv(\"AZURE_OPENAI_ENDPOINT\"))\n\t\t\t\t.buildClient();",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatClientFunctionCallIT TestConfiguration",
                "annotations": []
            },
            {
                "name": "azureOpenAiChatClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new AzureOpenAiChatClient(openAIClient,\n\t\t\t\t\tAzureOpenAiChatOptions.builder()\n\t\t\t\t\t\t.withDeploymentName(\"gpt-4-0125-preview\")\n\t\t\t\t\t\t.withMaxTokens(500)\n\t\t\t\t\t\t.build());",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatClientFunctionCallIT TestConfiguration",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-azure-openai/src/test/java/org/springframework/ai/azure/openai/metadata/AzureOpenAiChatClientMetadataTests.java",
        "class_names": [
            "TestConfiguration",
            "SpringAzureOpenAiChatCompletionsController",
            "AzureOpenAiChatClientMetadataTests"
        ],
        "imports": "import org.springframework.ai.azure.openai.MockAzureOpenAiTestConfiguration;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.ai.chat.Generation;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport com.azure.ai.openai.models.ContentFilterResult;\nimport com.azure.ai.openai.models.ContentFilterResultsForChoice;\nimport org.springframework.context.annotation.Profile;\nimport com.azure.ai.openai.models.ContentFilterSeverity;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.context.request.WebRequest;\nimport java.nio.charset.StandardCharsets;\nimport com.azure.ai.openai.models.ContentFilterResultDetailsForPrompt;\nimport org.springframework.ai.chat.ChatResponse;\nimport org.springframework.test.context.ActiveProfiles;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.ai.chat.metadata.*;\nimport org.springframework.ai.azure.openai.AzureOpenAiChatClient;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.http.MediaType;\nimport org.springframework.ai.chat.messages.AssistantMessage;\nimport org.springframework.boot.SpringBootConfiguration;\nimport org.springframework.ai.chat.prompt.Prompt;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.http.HttpStatusCode;\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.test.web.servlet.setup.MockMvcBuilders;",
        "package_import_paths": {
            "org.springframework.ai.azure.openai.metadata.AzureOpenAiChatClientMetadataTests": "org.springframework.ai.azure.openai.metadata.AzureOpenAiChatClientMetadataTests",
            "org.springframework.ai.azure.openai.metadata.TestConfiguration": "org.springframework.ai.azure.openai.metadata.TestConfiguration",
            "org.springframework.ai.azure.openai.metadata.SpringAzureOpenAiChatCompletionsController": "org.springframework.ai.azure.openai.metadata.SpringAzureOpenAiChatCompletionsController",
            "org.springframework.ai.azure.openai.metadata.azureOpenAiMetadataCapturedDuringGeneration": "org.springframework.ai.azure.openai.metadata.azureOpenAiMetadataCapturedDuringGeneration",
            "org.springframework.ai.azure.openai.metadata.assertPromptMetadat": "org.springframework.ai.azure.openai.metadata.assertPromptMetadat",
            "org.springframework.ai.azure.openai.metadata.assertGenerationMetadat": "org.springframework.ai.azure.openai.metadata.assertGenerationMetadat",
            "org.springframework.ai.azure.openai.metadata.assertChoiceMetadat": "org.springframework.ai.azure.openai.metadata.assertChoiceMetadat",
            "org.springframework.ai.azure.openai.metadata.assertContentFilterResultsForPrompt": "org.springframework.ai.azure.openai.metadata.assertContentFilterResultsForPrompt",
            "org.springframework.ai.azure.openai.metadata.assertContentFilterResults": "org.springframework.ai.azure.openai.metadata.assertContentFilterResults",
            "org.springframework.ai.azure.openai.metadata.assertContentFilterResult": "org.springframework.ai.azure.openai.metadata.assertContentFilterResult",
            "org.springframework.ai.azure.openai.metadata.mockMv": "org.springframework.ai.azure.openai.metadata.mockMv",
            "org.springframework.ai.azure.openai.metadata.PostMappin": "org.springframework.ai.azure.openai.metadata.PostMappin",
            "org.springframework.ai.azure.openai.metadata.getJson": "org.springframework.ai.azure.openai.metadata.getJson",
            "org.springframework.ai.azure.openai.metadata.privat": "org.springframework.ai.azure.openai.metadata.privat"
        },
        "package": "package org.springframework.ai.azure.openai.metadata;",
        "property_declarations": [
            "@Autowired\n\tprivate AzureOpenAiChatClient aiClient;"
        ],
        "functions": [
            {
                "name": "azureOpenAiMetadataCapturedDuringGeneration",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Prompt prompt = new Prompt(\"Can I fly like a bird?\");\n\n\t\tChatResponse response = this.aiClient.call(prompt);\n\n\t\tassertThat(response).isNotNull();\n\n\t\tGeneration generation = response.getResult();\n\n\t\tassertThat(generation).isNotNull()\n\t\t\t.extracting(Generation::getOutput)\n\t\t\t.extracting(AssistantMessage::getContent)\n\t\t\t.isEqualTo(\"No! You will actually land with a resounding thud. This is the way!\");\n\n\t\tassertPromptMetadata(response);\n\t\tassertGenerationMetadata(response);\n\t\tassertChoiceMetadata(generation);",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatClientMetadataTests",
                "annotations": []
            },
            {
                "name": "assertPromptMetadata",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "PromptMetadata promptMetadata = response.getMetadata().getPromptMetadata();\n\n\t\tassertThat(promptMetadata).isNotNull();\n\n\t\tPromptMetadata.PromptFilterMetadata promptFilterMetadata = promptMetadata.findByPromptIndex(0).orElse(null);\n\n\t\tassertThat(promptFilterMetadata).isNotNull();\n\t\tassertThat(promptFilterMetadata.getPromptIndex()).isZero();\n\t\tassertContentFilterResultsForPrompt(promptFilterMetadata.getContentFilterMetadata(),\n\t\t\t\tContentFilterSeverity.HIGH);",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatClientMetadataTests",
                "annotations": []
            },
            {
                "name": "assertGenerationMetadata",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "ChatResponseMetadata chatResponseMetadata = response.getMetadata();\n\n\t\tassertThat(chatResponseMetadata).isNotNull();\n\t\tassertThat(chatResponseMetadata.getRateLimit().getRequestsLimit())\n\t\t\t.isEqualTo(new EmptyRateLimit().getRequestsLimit());\n\n\t\tUsage usage = chatResponseMetadata.getUsage();\n\n\t\tassertThat(usage).isNotNull();\n\t\tassertThat(usage.getPromptTokens()).isEqualTo(58);\n\t\tassertThat(usage.getGenerationTokens()).isEqualTo(68);\n\t\tassertThat(usage.getTotalTokens()).isEqualTo(126);",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatClientMetadataTests",
                "annotations": []
            },
            {
                "name": "assertChoiceMetadata",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "ChatGenerationMetadata chatGenerationMetadata = generation.getMetadata();\n\n\t\tassertThat(chatGenerationMetadata).isNotNull();\n\t\tassertThat(chatGenerationMetadata.getFinishReason()).isEqualTo(\"stop\");\n\t\tassertContentFilterResults(chatGenerationMetadata.getContentFilterMetadata());",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatClientMetadataTests",
                "annotations": []
            },
            {
                "name": "assertContentFilterResultsForPrompt",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "assertThat(contentFilterResultForPrompt).isNotNull();\n\t\tassertContentFilterResult(contentFilterResultForPrompt.getHate());\n\t\tassertContentFilterResult(contentFilterResultForPrompt.getSelfHarm(), selfHarmSeverity);\n\t\tassertContentFilterResult(contentFilterResultForPrompt.getSexual());\n\t\tassertContentFilterResult(contentFilterResultForPrompt.getViolence());",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatClientMetadataTests",
                "annotations": []
            },
            {
                "name": "assertContentFilterResults",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "assertContentFilterResults(contentFilterResults, ContentFilterSeverity.SAFE);",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatClientMetadataTests",
                "annotations": []
            },
            {
                "name": "assertContentFilterResult",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "assertThat(contentFilterResult).isNotNull();\n\t\tassertContentFilterResult(contentFilterResult, contentFilterResult.getSeverity());",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatClientMetadataTests",
                "annotations": []
            },
            {
                "name": "mockMvc",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return MockMvcBuilders.standaloneSetup(new SpringAzureOpenAiChatCompletionsController()).build();",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatClientMetadataTests TestConfiguration",
                "annotations": [
                    "@RequestMapping(\"/spring-ai/api\")",
                    "@SuppressWarnings(\"all\")"
                ]
            },
            {
                "name": "PostMapping",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String json = getJson();\n\n\t\t\tResponseEntity<?> response = ResponseEntity.status(HttpStatusCode.valueOf(200))\n\t\t\t\t.contentType(MediaType.APPLICATION_JSON)\n\t\t\t\t.contentLength(json.getBytes(StandardCharsets.UTF_8).length)\n\t\t\t\t.body(getJson());\n\n\t\t\treturn response;",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatClientMetadataTests TestConfiguration SpringAzureOpenAiChatCompletionsController",
                "annotations": [
                    "@PostMapping(\"/openai/deployments/gpt-35-turbo/chat/completions\")"
                ]
            },
            {
                "name": "getJson",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return \"\"\"\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"chatcmpl-6v7mkQj980V1yBec6ETrKPRqFjNw9\",\n\t\t\t\t\t\t\t\"object\": \"chat.completion\",\n\t\t\t\t\t\t\t\"created\": 1679072642,\n\t\t\t\t\t\t\t\"model\": \"gpt-35-turbo\",\n\t\t\t\t\t\t\t\"choices\":[{\n\t\t\t\t\t\t\t\t\"index\": 0,\n\t\t\t\t\t\t\t\t\"content_filter_results\" : {\n\t\t\t\t\t\t\t\t\t\"error\" : null,\n\t\t\t\t\t\t\t\t\t\"hate\" : {\n\t\t\t\t\t\t\t\t\t\t\"filtered\" : false,\n\t\t\t\t\t\t\t\t\t\t\"severity\" : \"safe\"\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\"self_harm\" : {\n\t\t\t\t\t\t\t\t\t\t\"filtered\" : false,\n\t\t\t\t\t\t\t\t\t\t\"severity\" : \"safe\"\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\"sexual\" : {\n\t\t\t\t\t\t\t\t\t\t\"filtered\" : false,\n\t\t\t\t\t\t\t\t\t\t\"severity\" : \"safe\"\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\"violence\" : {\n\t\t\t\t\t\t\t\t\t\t\"filtered\" : false,\n\t\t\t\t\t\t\t\t\t\t\"severity\" : \"safe\"\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"finish_reason\": \"stop\",\n\t\t\t\t\t\t\t\t\"message\":{\n\t\t\t\t\t\t\t\t\t\"role\": \"user\",\n\t\t\t\t\t\t\t\t\t\"content\": \"No! You will actually land with a resounding thud. This is the way!\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\"usage\":{\n\t\t\t\t\t\t\t\t\"prompt_tokens\":58,\n\t\t\t\t\t\t\t\t\"completion_tokens\":68,\n\t\t\t\t\t\t\t\t\"total_tokens\":126\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"prompt_annotations\" : [{\n\t\t\t\t\t\t\t\t\"prompt_index\" : 0,\n\t\t\t\t\t\t\t\t\"content_filter_results\" : {\n\t\t\t\t\t\t\t\t\t\t\"error\" : null,\n\t\t\t\t\t\t\t\t\t\t\"hate\" : {\n\t\t\t\t\t\t\t\t\t\t\t\"filtered\" : false,\n\t\t\t\t\t\t\t\t\t\t\t\"severity\" : \"safe\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\"self_harm\" : {\n\t\t\t\t\t\t\t\t\t\t\t\"filtered\" : true,\n\t\t\t\t\t\t\t\t\t\t\t\"severity\" : \"high\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\"sexual\" : {\n\t\t\t\t\t\t\t\t\t\t\t\"filtered\" : false,\n\t\t\t\t\t\t\t\t\t\t\t\"severity\" : \"safe\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\"violence\" : {\n\t\t\t\t\t\t\t\t\t\t\t\"filtered\" : false,\n\t\t\t\t\t\t\t\t\t\t\t\"severity\" : \"safe\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t}\n\t\t\t\t\t\"\"\";",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatClientMetadataTests TestConfiguration SpringAzureOpenAiChatCompletionsController",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-azure-openai/src/test/java/org/springframework/ai/azure/openai/aot/AzureOpenAiRuntimeHintsTests.java",
        "class_names": [
            "AzureOpenAiRuntimeHintsTests"
        ],
        "imports": "import com.azure.ai.openai.OpenAIAsyncClient;\nimport static org.springframework.aot.hint.predicate.RuntimeHintsPredicates.resource;\nimport org.springframework.ai.aot.AiRuntimeHints;\nimport org.springframework.aot.hint.RuntimeHints;\nimport static org.assertj.core.api.AssertionsForClassTypes.assertThat;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.aot.hint.TypeReference;\nimport com.azure.ai.openai.OpenAIClient;\nimport java.util.Set;\nimport static org.springframework.aot.hint.predicate.RuntimeHintsPredicates.reflection;\nimport com.azure.ai.openai.models.ChatChoice;",
        "package_import_paths": {
            "org.springframework.ai.azure.openai.aot.AzureOpenAiRuntimeHintsTests": "org.springframework.ai.azure.openai.aot.AzureOpenAiRuntimeHintsTests",
            "org.springframework.ai.azure.openai.aot.registerHints": "org.springframework.ai.azure.openai.aot.registerHints"
        },
        "package": "package org.springframework.ai.azure.openai.aot;",
        "property_declarations": [],
        "functions": [
            {
                "name": "registerHints",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "RuntimeHints runtimeHints = new RuntimeHints();\n\t\tAzureOpenAiRuntimeHints openAiRuntimeHints = new AzureOpenAiRuntimeHints();\n\t\topenAiRuntimeHints.registerHints(runtimeHints, null);\n\n\t\tSet<TypeReference> azureModelTypes = AiRuntimeHints.findClassesInPackage(ChatChoice.class.getPackageName(),\n\t\t\t\t(metadataReader, metadataReaderFactory) -> true);\n\t\tfor (TypeReference modelType : azureModelTypes) {\n\t\t\tassertThat(runtimeHints).matches(reflection().onType(modelType));\n\t\t}\n\t\tassertThat(runtimeHints).matches(reflection().onType(OpenAIClient.class));\n\t\tassertThat(runtimeHints).matches(reflection().onType(OpenAIAsyncClient.class));\n\n\t\tassertThat(runtimeHints).matches(resource().forResource(\"/azure-ai-openai.properties\"));",
                "is_abstract": "",
                "class_name": "AzureOpenAiRuntimeHintsTests",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-azure-openai/src/main/java/org/springframework/ai/azure/openai/AzureOpenAiChatClient.java",
        "class_names": [
            "AzureOpenAiChatClient"
        ],
        "imports": "import com.azure.ai.openai.models.CompletionsFinishReason;\nimport java.util.List;\nimport com.azure.ai.openai.models.ChatResponseMessage;\nimport com.azure.ai.openai.models.ChatRequestMessage;\nimport org.springframework.ai.azure.openai.metadata.AzureOpenAiChatResponseMetadata;\nimport reactor.core.publisher.Flux;\nimport org.springframework.ai.chat.ChatClient;\nimport org.springframework.ai.chat.Generation;\nimport org.springframework.util.CollectionUtils;\nimport com.azure.ai.openai.models.ChatRequestUserMessage;\nimport com.azure.ai.openai.models.ChatCompletions;\nimport org.springframework.ai.model.function.FunctionCallbackContext;\nimport com.azure.ai.openai.models.ChatCompletionsToolCall;\nimport com.azure.ai.openai.models.ChatRequestToolMessage;\nimport com.azure.ai.openai.models.ChatCompletionsFunctionToolDefinition;\nimport org.springframework.ai.chat.messages.Message;\nimport com.azure.ai.openai.models.ChatRequestAssistantMessage;\nimport org.slf4j.Logger;\nimport com.azure.core.util.IterableStream;\nimport com.azure.ai.openai.models.ChatCompletionsToolDefinition;\nimport org.springframework.ai.chat.prompt.ChatOptions;\nimport org.springframework.ai.chat.ChatResponse;\nimport org.springframework.ai.chat.metadata.PromptMetadata.PromptFilterMetadata;\nimport java.util.HashSet;\nimport com.azure.ai.openai.models.ChatCompletionsFunctionToolCall;\nimport com.azure.ai.openai.models.ChatCompletionsOptions;\nimport com.azure.ai.openai.models.ContentFilterResultsForPrompt;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.ai.chat.metadata.PromptMetadata;\nimport com.azure.core.util.BinaryData;\nimport org.springframework.ai.model.ModelOptionsUtils;\nimport org.springframework.ai.model.function.AbstractFunctionCallSupport;\nimport java.util.Collections;\nimport java.util.Set;\nimport com.azure.ai.openai.models.ChatChoice;\nimport org.springframework.ai.chat.prompt.Prompt;\nimport org.springframework.util.Assert;\nimport com.azure.ai.openai.models.ChatRequestSystemMessage;\nimport com.azure.ai.openai.models.FunctionDefinition;\nimport com.azure.ai.openai.OpenAIClient;\nimport org.springframework.ai.chat.StreamingChatClient;\nimport org.springframework.ai.chat.metadata.ChatGenerationMetadata;",
        "package_import_paths": {
            "org.springframework.ai.azure.openai.AzureOpenAiChatClient": "org.springframework.ai.azure.openai.AzureOpenAiChatClient",
            "org.springframework.ai.azure.openai.Deprecated": "org.springframework.ai.azure.openai.Deprecated",
            "org.springframework.ai.azure.openai.getDefaultOptions": "org.springframework.ai.azure.openai.getDefaultOptions",
            "org.springframework.ai.azure.openai.call": "org.springframework.ai.azure.openai.call",
            "org.springframework.ai.azure.openai.stream": "org.springframework.ai.azure.openai.stream",
            "org.springframework.ai.azure.openai.toAzureChatCompletionsOptions": "org.springframework.ai.azure.openai.toAzureChatCompletionsOptions",
            "org.springframework.ai.azure.openai.getFunctionTools": "org.springframework.ai.azure.openai.getFunctionTools",
            "org.springframework.ai.azure.openai.fromSpringAiMess": "org.springframework.ai.azure.openai.fromSpringAiMess",
            "org.springframework.ai.azure.openai.generateChoiceMetadat": "org.springframework.ai.azure.openai.generateChoiceMetadat",
            "org.springframework.ai.azure.openai.generatePromptMetadat": "org.springframework.ai.azure.openai.generatePromptMetadat",
            "org.springframework.ai.azure.openai.nullSafeList": "org.springframework.ai.azure.openai.nullSafeList",
            "org.springframework.ai.azure.openai.mer": "org.springframework.ai.azure.openai.mer",
            "org.springframework.ai.azure.openai.doCreateToolResponseRequest": "org.springframework.ai.azure.openai.doCreateToolResponseRequest",
            "org.springframework.ai.azure.openai.doGetUserMessages": "org.springframework.ai.azure.openai.doGetUserMessages",
            "org.springframework.ai.azure.openai.doGetToolResponseMess": "org.springframework.ai.azure.openai.doGetToolResponseMess",
            "org.springframework.ai.azure.openai.doChatCompletion": "org.springframework.ai.azure.openai.doChatCompletion",
            "org.springframework.ai.azure.openai.isToolFunctionCall": "org.springframework.ai.azure.openai.isToolFunctionCall",
            "org.springframework.ai.azure.openai.DEFAULT_DEPLOYMENT_NAME": "org.springframework.ai.azure.openai.DEFAULT_DEPLOYMENT_NAME",
            "org.springframework.ai.azure.openai.DEFAULT_TEMPERATURE": "org.springframework.ai.azure.openai.DEFAULT_TEMPERATURE",
            "org.springframework.ai.azure.openai.logger": "org.springframework.ai.azure.openai.logger",
            "org.springframework.ai.azure.openai.defaultOptions": "org.springframework.ai.azure.openai.defaultOptions",
            "org.springframework.ai.azure.openai.openAIClient": "org.springframework.ai.azure.openai.openAIClient"
        },
        "package": "package org.springframework.ai.azure.openai;",
        "property_declarations": [
            "private final Logger logger = LoggerFactory.getLogger(getClass());",
            "private static final Float DEFAULT_TEMPERATURE = 0.7f;",
            "private static final String DEFAULT_DEPLOYMENT_NAME = \"gpt-35-turbo\";",
            "private AzureOpenAiChatOptions defaultOptions;",
            "private final OpenAIClient openAIClient;"
        ],
        "functions": [
            {
                "name": "Deprecated",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(defaultOptions, \"DefaultOptions must not be null\");\n\t\tthis.defaultOptions = defaultOptions;\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatClient",
                "annotations": [
                    "@Deprecated(forRemoval = true, since = \"0.8.0\")"
                ]
            },
            {
                "name": "getDefaultOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.defaultOptions;",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatClient",
                "annotations": []
            },
            {
                "name": "call",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "ChatCompletionsOptions options = toAzureChatCompletionsOptions(prompt);\n\t\toptions.setStream(false);\n\n\t\tlogger.trace(\"Azure ChatCompletionsOptions: {}\", options);\n\t\tChatCompletions chatCompletions = this.callWithFunctionSupport(options);\n\t\tlogger.trace(\"Azure ChatCompletions: {}\", chatCompletions);\n\n\t\tList<Generation> generations = chatCompletions.getChoices()\n\t\t\t.stream()\n\t\t\t.map(choice -> new Generation(choice.getMessage().getContent())\n\t\t\t\t.withGenerationMetadata(generateChoiceMetadata(choice)))\n\t\t\t.toList();\n\n\t\tPromptMetadata promptFilterMetadata = generatePromptMetadata(chatCompletions);\n\n\t\treturn new ChatResponse(generations,\n\t\t\t\tAzureOpenAiChatResponseMetadata.from(chatCompletions, promptFilterMetadata));",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatClient",
                "annotations": []
            },
            {
                "name": "stream",
                "parameters": [
                    ""
                ],
                "return_type": "null",
                "body": "ChatCompletionsOptions options = toAzureChatCompletionsOptions(prompt);\n\t\toptions.setStream(true);\n\n\t\tIterableStream<ChatCompletions> chatCompletionsStream = this.openAIClient\n\t\t\t.getChatCompletionsStream(options.getModel(), options);\n\n\t\treturn Flux.fromStream(chatCompletionsStream.stream()\n\t\t\t// Note: the first chat completions can be ignored when using Azure OpenAI\n\t\t\t// service which is a known service bug.\n\t\t\t.skip(1)\n\t\t\t.map(ChatCompletions::getChoices)\n\t\t\t.flatMap(List::stream)\n\t\t\t.map(choice -> {\n\t\t\t\tvar content = (choice.getDelta() != null) ? choice.getDelta().getContent() : null;\n\t\t\t\tvar generation = new Generation(content).withGenerationMetadata(generateChoiceMetadata(choice));\n\t\t\t\treturn new ChatResponse(List.of(generation));\n\t\t\t}));",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatClient",
                "annotations": []
            },
            {
                "name": "toAzureChatCompletionsOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Set<String> functionsForThisRequest = new HashSet<>();\n\n\t\tList<ChatRequestMessage> azureMessages = prompt.getInstructions()\n\t\t\t.stream()\n\t\t\t.map(this::fromSpringAiMessage)\n\t\t\t.toList();\n\n\t\tChatCompletionsOptions options = new ChatCompletionsOptions(azureMessages);\n\n\t\tif (this.defaultOptions != null) {\n\t\t\t// JSON merge doesn't due to Azure OpenAI service bug:\n\t\t\t// https://github.com/Azure/azure-sdk-for-java/issues/38183\n\t\t\t// options = ModelOptionsUtils.merge(options, this.defaultOptions,\n\t\t\t// ChatCompletionsOptions.class);\n\t\t\toptions = merge(options, this.defaultOptions);\n\n\t\t\tSet<String> defaultEnabledFunctions = this.handleFunctionCallbackConfigurations(this.defaultOptions,\n\t\t\t\t\t!IS_RUNTIME_CALL);\n\t\t\tfunctionsForThisRequest.addAll(defaultEnabledFunctions);\n\t\t}\n\n\t\tif (prompt.getOptions() != null) {\n\t\t\tif (prompt.getOptions() instanceof ChatOptions runtimeOptions) {\n\t\t\t\tAzureOpenAiChatOptions updatedRuntimeOptions = ModelOptionsUtils.copyToTarget(runtimeOptions,\n\t\t\t\t\t\tChatOptions.class, AzureOpenAiChatOptions.class);\n\t\t\t\t// JSON merge doesn't due to Azure OpenAI service bug:\n\t\t\t\t// https://github.com/Azure/azure-sdk-for-java/issues/38183\n\t\t\t\t// options = ModelOptionsUtils.merge(runtimeOptions, options,\n\t\t\t\t// ChatCompletionsOptions.class);\n\t\t\t\toptions = merge(updatedRuntimeOptions, options);\n\n\t\t\t\tSet<String> promptEnabledFunctions = this.handleFunctionCallbackConfigurations(updatedRuntimeOptions,\n\t\t\t\t\t\tIS_RUNTIME_CALL);\n\t\t\t\tfunctionsForThisRequest.addAll(promptEnabledFunctions);\n\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new IllegalArgumentException(\"Prompt options are not of type ChatCompletionsOptions:\"\n\t\t\t\t\t\t+ prompt.getOptions().getClass().getSimpleName());\n\t\t\t}\n\t\t}\n\n\t\t// Add the enabled functions definitions to the request's tools parameter.\n\n\t\tif (!CollectionUtils.isEmpty(functionsForThisRequest)) {\n\t\t\tList<ChatCompletionsFunctionToolDefinition> tools = this.getFunctionTools(functionsForThisRequest);\n\t\t\tList<ChatCompletionsToolDefinition> tools2 = tools.stream()\n\t\t\t\t.map(t -> ((ChatCompletionsToolDefinition) t))\n\t\t\t\t.toList();\n\t\t\toptions.setTools(tools2);\n\t\t}\n\n\t\treturn options;",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatClient",
                "annotations": []
            },
            {
                "name": "getFunctionTools",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.resolveFunctionCallbacks(functionNames).stream().map(functionCallback -> {\n\n\t\t\tFunctionDefinition functionDefinition = new FunctionDefinition(functionCallback.getName());\n\t\t\tfunctionDefinition.setDescription(functionCallback.getDescription());\n\t\t\tBinaryData parameters = BinaryData\n\t\t\t\t.fromObject(ModelOptionsUtils.jsonToMap(functionCallback.getInputTypeSchema()));\n\t\t\tfunctionDefinition.setParameters(parameters);\n\t\t\treturn new ChatCompletionsFunctionToolDefinition(functionDefinition);\n\t\t}).toList();",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatClient",
                "annotations": []
            },
            {
                "name": "fromSpringAiMessage",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "switch (message.getMessageType()) {\n\t\t\tcase USER:\n\t\t\t\treturn new ChatRequestUserMessage(message.getContent());\n\t\t\tcase SYSTEM:\n\t\t\t\treturn new ChatRequestSystemMessage(message.getContent());\n\t\t\tcase ASSISTANT:\n\t\t\t\treturn new ChatRequestAssistantMessage(message.getContent());\n\t\t\tdefault:\n\t\t\t\tthrow new IllegalArgumentException(\"Unknown message type \" + message.getMessageType());\n\t\t}",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatClient",
                "annotations": []
            },
            {
                "name": "generateChoiceMetadata",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return ChatGenerationMetadata.from(String.valueOf(choice.getFinishReason()), choice.getContentFilterResults());",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatClient",
                "annotations": []
            },
            {
                "name": "generatePromptMetadata",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "List<ContentFilterResultsForPrompt> promptFilterResults = nullSafeList(\n\t\t\t\tchatCompletions.getPromptFilterResults());\n\n\t\treturn PromptMetadata.of(promptFilterResults.stream()\n\t\t\t.map(promptFilterResult -> PromptFilterMetadata.from(promptFilterResult.getPromptIndex(),\n\t\t\t\t\tpromptFilterResult.getContentFilterResults()))\n\t\t\t.toList());",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatClient",
                "annotations": []
            },
            {
                "name": "nullSafeList",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return list != null ? list : Collections.emptyList();",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatClient",
                "annotations": []
            },
            {
                "name": "merge",
                "parameters": [
                    ""
                ],
                "return_type": "springAiOptions",
                "body": "if (springAiOptions == null) {\n\t\t\treturn azureOptions;\n\t\t}\n\n\t\tChatCompletionsOptions mergedAzureOptions = new ChatCompletionsOptions(azureOptions.getMessages());\n\t\tmergedAzureOptions.setStream(azureOptions.isStream());\n\n\t\tmergedAzureOptions.setMaxTokens(\n\t\t\t\t(azureOptions.getMaxTokens() != null) ? azureOptions.getMaxTokens() : springAiOptions.getMaxTokens());\n\n\t\tmergedAzureOptions.setLogitBias(\n\t\t\t\tazureOptions.getLogitBias() != null ? azureOptions.getLogitBias() : springAiOptions.getLogitBias());\n\n\t\tmergedAzureOptions.setStop(azureOptions.getStop() != null ? azureOptions.getStop() : springAiOptions.getStop());\n\n\t\tmergedAzureOptions.setTemperature(azureOptions.getTemperature());\n\t\tif (mergedAzureOptions.getTemperature() == null && springAiOptions.getTemperature() != null) {\n\t\t\tmergedAzureOptions.setTemperature(springAiOptions.getTemperature().doubleValue());\n\t\t}\n\n\t\tmergedAzureOptions.setTopP(azureOptions.getTopP());\n\t\tif (mergedAzureOptions.getTopP() == null && springAiOptions.getTopP() != null) {\n\t\t\tmergedAzureOptions.setTopP(springAiOptions.getTopP().doubleValue());\n\t\t}\n\n\t\tmergedAzureOptions.setFrequencyPenalty(azureOptions.getFrequencyPenalty());\n\t\tif (mergedAzureOptions.getFrequencyPenalty() == null && springAiOptions.getFrequencyPenalty() != null) {\n\t\t\tmergedAzureOptions.setFrequencyPenalty(springAiOptions.getFrequencyPenalty().doubleValue());\n\t\t}\n\n\t\tmergedAzureOptions.setPresencePenalty(azureOptions.getPresencePenalty());\n\t\tif (mergedAzureOptions.getPresencePenalty() == null && springAiOptions.getPresencePenalty() != null) {\n\t\t\tmergedAzureOptions.setPresencePenalty(springAiOptions.getPresencePenalty().doubleValue());\n\t\t}\n\n\t\tmergedAzureOptions.setN(azureOptions.getN() != null ? azureOptions.getN() : springAiOptions.getN());\n\n\t\tmergedAzureOptions.setUser(azureOptions.getUser() != null ? azureOptions.getUser() : springAiOptions.getUser());\n\n\t\tmergedAzureOptions\n\t\t\t.setModel(azureOptions.getModel() != null ? azureOptions.getModel() : springAiOptions.getDeploymentName());\n\n\t\treturn mergedAzureOptions;",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatClient",
                "annotations": []
            },
            {
                "name": "merge",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (springAiOptions == null) {\n\t\t\treturn azureOptions;\n\t\t}\n\n\t\tChatCompletionsOptions mergedAzureOptions = new ChatCompletionsOptions(azureOptions.getMessages());\n\t\tmergedAzureOptions = merge(azureOptions, mergedAzureOptions);\n\n\t\tmergedAzureOptions.setStream(azureOptions.isStream());\n\n\t\tif (springAiOptions.getMaxTokens() != null) {\n\t\t\tmergedAzureOptions.setMaxTokens(springAiOptions.getMaxTokens());\n\t\t}\n\n\t\tif (springAiOptions.getLogitBias() != null) {\n\t\t\tmergedAzureOptions.setLogitBias(springAiOptions.getLogitBias());\n\t\t}\n\n\t\tif (springAiOptions.getStop() != null) {\n\t\t\tmergedAzureOptions.setStop(springAiOptions.getStop());\n\t\t}\n\n\t\tif (springAiOptions.getTemperature() != null && springAiOptions.getTemperature() != null) {\n\t\t\tmergedAzureOptions.setTemperature(springAiOptions.getTemperature().doubleValue());\n\t\t}\n\n\t\tif (springAiOptions.getTopP() != null && springAiOptions.getTopP() != null) {\n\t\t\tmergedAzureOptions.setTopP(springAiOptions.getTopP().doubleValue());\n\t\t}\n\n\t\tif (springAiOptions.getFrequencyPenalty() != null && springAiOptions.getFrequencyPenalty() != null) {\n\t\t\tmergedAzureOptions.setFrequencyPenalty(springAiOptions.getFrequencyPenalty().doubleValue());\n\t\t}\n\n\t\tif (springAiOptions.getPresencePenalty() != null && springAiOptions.getPresencePenalty() != null) {\n\t\t\tmergedAzureOptions.setPresencePenalty(springAiOptions.getPresencePenalty().doubleValue());\n\t\t}\n\n\t\tif (springAiOptions.getN() != null) {\n\t\t\tmergedAzureOptions.setN(springAiOptions.getN());\n\t\t}\n\n\t\tif (springAiOptions.getUser() != null) {\n\t\t\tmergedAzureOptions.setUser(springAiOptions.getUser());\n\t\t}\n\n\t\tif (springAiOptions.getDeploymentName() != null) {\n\t\t\tmergedAzureOptions.setModel(springAiOptions.getDeploymentName());\n\t\t}\n\n\t\treturn mergedAzureOptions;",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatClient",
                "annotations": []
            },
            {
                "name": "doCreateToolResponseRequest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// Every tool-call item requires a separate function call and a response (TOOL)\n\t\t// message.\n\t\tfor (ChatCompletionsToolCall toolCall : ((ChatRequestAssistantMessage) responseMessage).getToolCalls()) {\n\n\t\t\tvar functionName = ((ChatCompletionsFunctionToolCall) toolCall).getFunction().getName();\n\t\t\tString functionArguments = ((ChatCompletionsFunctionToolCall) toolCall).getFunction().getArguments();\n\n\t\t\tif (!this.functionCallbackRegister.containsKey(functionName)) {\n\t\t\t\tthrow new IllegalStateException(\"No function callback found for function name: \" + functionName);\n\t\t\t}\n\n\t\t\tString functionResponse = this.functionCallbackRegister.get(functionName).call(functionArguments);\n\n\t\t\t// Add the function response to the conversation.\n\t\t\tconversationHistory.add(new ChatRequestToolMessage(functionResponse, toolCall.getId()));\n\t\t}\n\n\t\t// Recursively call chatCompletionWithTools until the model doesn't call a\n\t\t// functions anymore.\n\t\tChatCompletionsOptions newRequest = new ChatCompletionsOptions(conversationHistory);\n\n\t\tnewRequest = merge(previousRequest, newRequest);\n\n\t\treturn newRequest;",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatClient",
                "annotations": []
            },
            {
                "name": "doGetUserMessages",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return request.getMessages();",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatClient",
                "annotations": []
            },
            {
                "name": "doGetToolResponseMessage",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "ChatResponseMessage responseMessage = response.getChoices().get(0).getMessage();\n\t\tChatRequestAssistantMessage assistantMessage = new ChatRequestAssistantMessage(\"\");\n\t\tassistantMessage.setToolCalls(responseMessage.getToolCalls());\n\t\treturn assistantMessage;",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatClient",
                "annotations": []
            },
            {
                "name": "doChatCompletion",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.openAIClient.getChatCompletions(request.getModel(), request);",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatClient",
                "annotations": []
            },
            {
                "name": "isToolFunctionCall",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (chatCompletions == null || CollectionUtils.isEmpty(chatCompletions.getChoices())) {\n\t\t\treturn false;\n\t\t}\n\n\t\tvar choice = chatCompletions.getChoices().get(0);\n\n\t\tif (choice == null || choice.getFinishReason() == null) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn choice.getFinishReason() == CompletionsFinishReason.TOOL_CALLS;",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatClient",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-azure-openai/src/main/java/org/springframework/ai/azure/openai/AzureOpenAiEmbeddingClient.java",
        "class_names": [
            "AzureOpenAiEmbeddingClient"
        ],
        "imports": "import org.springframework.ai.document.MetadataMode;\nimport java.util.List;\nimport com.azure.ai.openai.models.EmbeddingsOptions;\nimport org.springframework.ai.embedding.EmbeddingOptions;\nimport org.springframework.ai.embedding.Embedding;\nimport com.azure.ai.openai.models.EmbeddingsUsage;\nimport org.slf4j.Logger;\nimport org.springframework.ai.embedding.EmbeddingResponse;\nimport org.slf4j.LoggerFactory;\nimport com.azure.ai.openai.models.EmbeddingItem;\nimport org.springframework.ai.model.ModelOptionsUtils;\nimport com.azure.ai.openai.models.Embeddings;\nimport java.util.ArrayList;\nimport org.springframework.ai.embedding.EmbeddingResponseMetadata;\nimport org.springframework.util.Assert;\nimport org.springframework.ai.embedding.AbstractEmbeddingClient;\nimport org.springframework.ai.document.Document;\nimport org.springframework.ai.embedding.EmbeddingRequest;\nimport com.azure.ai.openai.OpenAIClient;",
        "package_import_paths": {
            "org.springframework.ai.azure.openai.AzureOpenAiEmbeddingClient": "org.springframework.ai.azure.openai.AzureOpenAiEmbeddingClient",
            "org.springframework.ai.azure.openai.embed": "org.springframework.ai.azure.openai.embed",
            "org.springframework.ai.azure.openai.call": "org.springframework.ai.azure.openai.call",
            "org.springframework.ai.azure.openai.toEmbeddingOptions": "org.springframework.ai.azure.openai.toEmbeddingOptions",
            "org.springframework.ai.azure.openai.generateEmbeddingRespons": "org.springframework.ai.azure.openai.generateEmbeddingRespons",
            "org.springframework.ai.azure.openai.generateEmbeddingList": "org.springframework.ai.azure.openai.generateEmbeddingList",
            "org.springframework.ai.azure.openai.generateMetadat": "org.springframework.ai.azure.openai.generateMetadat",
            "org.springframework.ai.azure.openai.getDefaultOptions": "org.springframework.ai.azure.openai.getDefaultOptions",
            "org.springframework.ai.azure.openai.logger": "org.springframework.ai.azure.openai.logger",
            "org.springframework.ai.azure.openai.azureOpenAiClient": "org.springframework.ai.azure.openai.azureOpenAiClient",
            "org.springframework.ai.azure.openai.defaultOptions": "org.springframework.ai.azure.openai.defaultOptions",
            "org.springframework.ai.azure.openai.metadataMod": "org.springframework.ai.azure.openai.metadataMod"
        },
        "package": "package org.springframework.ai.azure.openai;",
        "property_declarations": [
            "private final AzureOpenAiEmbeddingOptions defaultOptions;",
            "private final OpenAIClient azureOpenAiClient;",
            "private final MetadataMode metadataMode;",
            "private static final Logger logger = LoggerFactory.getLogger(AzureOpenAiEmbeddingClient.class);"
        ],
        "functions": [
            {
                "name": "embed",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "logger.debug(\"Retrieving embeddings\");\n\n\t\tEmbeddingResponse response = this\n\t\t\t.call(new EmbeddingRequest(List.of(document.getFormattedContent(this.metadataMode)), null));\n\t\tlogger.debug(\"Embeddings retrieved\");\n\t\treturn response.getResults().stream().map(embedding -> embedding.getOutput()).flatMap(List::stream).toList();",
                "is_abstract": "",
                "class_name": "AzureOpenAiEmbeddingClient",
                "annotations": []
            },
            {
                "name": "call",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "logger.debug(\"Retrieving embeddings\");\n\n\t\tEmbeddingsOptions azureOptions = toEmbeddingOptions(embeddingRequest);\n\t\tEmbeddings embeddings = this.azureOpenAiClient.getEmbeddings(azureOptions.getModel(), azureOptions);\n\n\t\tlogger.debug(\"Embeddings retrieved\");\n\t\treturn generateEmbeddingResponse(embeddings);",
                "is_abstract": "",
                "class_name": "AzureOpenAiEmbeddingClient",
                "annotations": []
            },
            {
                "name": "toEmbeddingOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var azureOptions = new EmbeddingsOptions(embeddingRequest.getInstructions());\n\t\tif (this.defaultOptions != null) {\n\t\t\tazureOptions.setModel(this.defaultOptions.getDeploymentName());\n\t\t\tazureOptions.setUser(this.defaultOptions.getUser());\n\t\t}\n\t\tif (embeddingRequest.getOptions() != null && !EmbeddingOptions.EMPTY.equals(embeddingRequest.getOptions())) {\n\t\t\tazureOptions = ModelOptionsUtils.merge(embeddingRequest.getOptions(), azureOptions,\n\t\t\t\t\tEmbeddingsOptions.class);\n\t\t}\n\t\treturn azureOptions;",
                "is_abstract": "",
                "class_name": "AzureOpenAiEmbeddingClient",
                "annotations": []
            },
            {
                "name": "generateEmbeddingResponse",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "List<Embedding> data = generateEmbeddingList(embeddings.getData());\n\t\tEmbeddingResponseMetadata metadata = generateMetadata(embeddings.getUsage());\n\t\treturn new EmbeddingResponse(data, metadata);",
                "is_abstract": "",
                "class_name": "AzureOpenAiEmbeddingClient",
                "annotations": []
            },
            {
                "name": "generateEmbeddingList",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "List<Embedding> data = new ArrayList<>();\n\t\tfor (EmbeddingItem nativeDatum : nativeData) {\n\t\t\tList<Double> nativeDatumEmbedding = nativeDatum.getEmbedding();\n\t\t\tint nativeIndex = nativeDatum.getPromptIndex();\n\t\t\tEmbedding embedding = new Embedding(nativeDatumEmbedding, nativeIndex);\n\t\t\tdata.add(embedding);\n\t\t}\n\t\treturn data;",
                "is_abstract": "",
                "class_name": "AzureOpenAiEmbeddingClient",
                "annotations": []
            },
            {
                "name": "generateMetadata",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "EmbeddingResponseMetadata metadata = new EmbeddingResponseMetadata();\n\t\t// metadata.put(\"model\", model);\n\t\tmetadata.put(\"prompt-tokens\", embeddingsUsage.getPromptTokens());\n\t\tmetadata.put(\"total-tokens\", embeddingsUsage.getTotalTokens());\n\t\treturn metadata;",
                "is_abstract": "",
                "class_name": "AzureOpenAiEmbeddingClient",
                "annotations": []
            },
            {
                "name": "getDefaultOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.defaultOptions;",
                "is_abstract": "",
                "class_name": "AzureOpenAiEmbeddingClient",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-azure-openai/src/main/java/org/springframework/ai/azure/openai/AzureOpenAiChatOptions.java",
        "class_names": [
            "Builder",
            "AzureOpenAiChatOptions"
        ],
        "imports": "import java.util.ArrayList;\nimport java.util.List;\nimport com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport org.springframework.util.Assert;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport org.springframework.ai.model.function.FunctionCallingOptions;\nimport java.util.Map;\nimport org.springframework.ai.model.function.FunctionCallback;\nimport com.fasterxml.jackson.annotation.JsonIgnore;\nimport org.springframework.boot.context.properties.NestedConfigurationProperty;\nimport org.springframework.ai.chat.prompt.ChatOptions;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport java.util.Set;\nimport java.util.HashSet;",
        "package_import_paths": {
            "org.springframework.ai.azure.openai.AzureOpenAiChatOptions": "org.springframework.ai.azure.openai.AzureOpenAiChatOptions",
            "org.springframework.ai.azure.openai.Builder": "org.springframework.ai.azure.openai.Builder",
            "org.springframework.ai.azure.openai.builder": "org.springframework.ai.azure.openai.builder",
            "org.springframework.ai.azure.openai.withDeploymentNam": "org.springframework.ai.azure.openai.withDeploymentNam",
            "org.springframework.ai.azure.openai.withFrequencyPenalty": "org.springframework.ai.azure.openai.withFrequencyPenalty",
            "org.springframework.ai.azure.openai.withLogitBias": "org.springframework.ai.azure.openai.withLogitBias",
            "org.springframework.ai.azure.openai.withMaxTokens": "org.springframework.ai.azure.openai.withMaxTokens",
            "org.springframework.ai.azure.openai.withN": "org.springframework.ai.azure.openai.withN",
            "org.springframework.ai.azure.openai.withPresencePenalty": "org.springframework.ai.azure.openai.withPresencePenalty",
            "org.springframework.ai.azure.openai.withSto": "org.springframework.ai.azure.openai.withSto",
            "org.springframework.ai.azure.openai.withTemperatur": "org.springframework.ai.azure.openai.withTemperatur",
            "org.springframework.ai.azure.openai.withTopP": "org.springframework.ai.azure.openai.withTopP",
            "org.springframework.ai.azure.openai.withUser": "org.springframework.ai.azure.openai.withUser",
            "org.springframework.ai.azure.openai.withFunctionCallbacks": "org.springframework.ai.azure.openai.withFunctionCallbacks",
            "org.springframework.ai.azure.openai.withFunctions": "org.springframework.ai.azure.openai.withFunctions",
            "org.springframework.ai.azure.openai.withFunction": "org.springframework.ai.azure.openai.withFunction",
            "org.springframework.ai.azure.openai.build": "org.springframework.ai.azure.openai.build",
            "org.springframework.ai.azure.openai.getMaxTokens": "org.springframework.ai.azure.openai.getMaxTokens",
            "org.springframework.ai.azure.openai.setMaxTokens": "org.springframework.ai.azure.openai.setMaxTokens",
            "org.springframework.ai.azure.openai.getLogitBias": "org.springframework.ai.azure.openai.getLogitBias",
            "org.springframework.ai.azure.openai.setLogitBias": "org.springframework.ai.azure.openai.setLogitBias",
            "org.springframework.ai.azure.openai.getUser": "org.springframework.ai.azure.openai.getUser",
            "org.springframework.ai.azure.openai.setUser": "org.springframework.ai.azure.openai.setUser",
            "org.springframework.ai.azure.openai.getN": "org.springframework.ai.azure.openai.getN",
            "org.springframework.ai.azure.openai.setN": "org.springframework.ai.azure.openai.setN",
            "org.springframework.ai.azure.openai.getSto": "org.springframework.ai.azure.openai.getSto",
            "org.springframework.ai.azure.openai.setSto": "org.springframework.ai.azure.openai.setSto",
            "org.springframework.ai.azure.openai.getPresencePenalty": "org.springframework.ai.azure.openai.getPresencePenalty",
            "org.springframework.ai.azure.openai.setPresencePenalty": "org.springframework.ai.azure.openai.setPresencePenalty",
            "org.springframework.ai.azure.openai.getFrequencyPenalty": "org.springframework.ai.azure.openai.getFrequencyPenalty",
            "org.springframework.ai.azure.openai.setFrequencyPenalty": "org.springframework.ai.azure.openai.setFrequencyPenalty",
            "org.springframework.ai.azure.openai.getDeploymentNam": "org.springframework.ai.azure.openai.getDeploymentNam",
            "org.springframework.ai.azure.openai.setDeploymentNam": "org.springframework.ai.azure.openai.setDeploymentNam",
            "org.springframework.ai.azure.openai.getTemperatur": "org.springframework.ai.azure.openai.getTemperatur",
            "org.springframework.ai.azure.openai.setTemperatur": "org.springframework.ai.azure.openai.setTemperatur",
            "org.springframework.ai.azure.openai.getTopP": "org.springframework.ai.azure.openai.getTopP",
            "org.springframework.ai.azure.openai.setTopP": "org.springframework.ai.azure.openai.setTopP",
            "org.springframework.ai.azure.openai.getTopK": "org.springframework.ai.azure.openai.getTopK",
            "org.springframework.ai.azure.openai.setTopK": "org.springframework.ai.azure.openai.setTopK",
            "org.springframework.ai.azure.openai.getFunctionCallbacks": "org.springframework.ai.azure.openai.getFunctionCallbacks",
            "org.springframework.ai.azure.openai.setFunctionCallbacks": "org.springframework.ai.azure.openai.setFunctionCallbacks",
            "org.springframework.ai.azure.openai.getFunctions": "org.springframework.ai.azure.openai.getFunctions",
            "org.springframework.ai.azure.openai.setFunctions": "org.springframework.ai.azure.openai.setFunctions",
            "org.springframework.ai.azure.openai.maxTokens": "org.springframework.ai.azure.openai.maxTokens",
            "org.springframework.ai.azure.openai.temperatur": "org.springframework.ai.azure.openai.temperatur",
            "org.springframework.ai.azure.openai.topP": "org.springframework.ai.azure.openai.topP",
            "org.springframework.ai.azure.openai.logitBias": "org.springframework.ai.azure.openai.logitBias",
            "org.springframework.ai.azure.openai.user": "org.springframework.ai.azure.openai.user",
            "org.springframework.ai.azure.openai.n": "org.springframework.ai.azure.openai.n",
            "org.springframework.ai.azure.openai.sto": "org.springframework.ai.azure.openai.sto",
            "org.springframework.ai.azure.openai.presencePenalty": "org.springframework.ai.azure.openai.presencePenalty",
            "org.springframework.ai.azure.openai.frequencyPenalty": "org.springframework.ai.azure.openai.frequencyPenalty",
            "org.springframework.ai.azure.openai.deploymentNam": "org.springframework.ai.azure.openai.deploymentNam",
            "org.springframework.ai.azure.openai.privat": "org.springframework.ai.azure.openai.privat",
            "org.springframework.ai.azure.openai.options": "org.springframework.ai.azure.openai.options"
        },
        "package": "package org.springframework.ai.azure.openai;",
        "property_declarations": [
            "@JsonProperty(value = \"temperature\")\n\tprivate Float temperature;",
            "@JsonProperty(value = \"top_p\")\n\tprivate Float topP;",
            "@JsonProperty(value = \"frequency_penalty\")\n\tprivate Double frequencyPenalty;",
            "protected AzureOpenAiChatOptions options;",
            "@JsonProperty(value = \"max_tokens\")\n\tprivate Integer maxTokens;",
            "@JsonProperty(value = \"user\")\n\tprivate String user;",
            "@JsonProperty(value = \"logit_bias\")\n\tprivate Map<String, Integer> logitBias;",
            "@JsonProperty(value = \"stop\")\n\tprivate List<String> stop;",
            "@NestedConfigurationProperty\n\t@JsonIgnore\n\tprivate Set<String> functions = new HashSet<>();",
            "@JsonProperty(value = \"presence_penalty\")\n\tprivate Double presencePenalty;",
            "@NestedConfigurationProperty\n\t@JsonIgnore\n\tprivate List<FunctionCallback> functionCallbacks = new ArrayList<>();",
            "@JsonProperty(value = \"deployment_name\")\n\tprivate String deploymentName;",
            "@JsonProperty(value = \"n\")\n\tprivate Integer n;"
        ],
        "functions": [
            {
                "name": "builder",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Builder();",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatOptions",
                "annotations": []
            },
            {
                "name": "withDeploymentName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.deploymentName = deploymentName;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withFrequencyPenalty",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (frequencyPenalty != null) {\n\t\t\t\tthis.options.frequencyPenalty = frequencyPenalty.doubleValue();\n\t\t\t}\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withLogitBias",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.logitBias = logitBias;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withMaxTokens",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.maxTokens = maxTokens;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withN",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.n = n;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withPresencePenalty",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (presencePenalty != null) {\n\t\t\t\tthis.options.presencePenalty = presencePenalty.doubleValue();\n\t\t\t}\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withStop",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.stop = stop;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withTemperature",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.temperature = temperature;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withTopP",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.topP = topP;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withUser",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.user = user;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withFunctionCallbacks",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.functionCallbacks = functionCallbacks;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withFunctions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(functionNames, \"Function names must not be null\");\n\t\t\tthis.options.functions = functionNames;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withFunction",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.hasText(functionName, \"Function name must not be empty\");\n\t\t\tthis.options.functions.add(functionName);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "build",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.options;",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getMaxTokens",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.maxTokens;",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setMaxTokens",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.maxTokens = maxTokens;",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getLogitBias",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.logitBias;",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setLogitBias",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.logitBias = logitBias;",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getUser",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.user;",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setUser",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.user = user;",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getN",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.n;",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setN",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.n = n;",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getStop",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.stop;",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setStop",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.stop = stop;",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getPresencePenalty",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.presencePenalty;",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setPresencePenalty",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.presencePenalty = presencePenalty;",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getFrequencyPenalty",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.frequencyPenalty;",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setFrequencyPenalty",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.frequencyPenalty = frequencyPenalty;",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getDeploymentName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.deploymentName;",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setDeploymentName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.deploymentName = deploymentName;",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getTemperature",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.temperature;",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setTemperature",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.temperature = temperature;",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getTopP",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.topP;",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setTopP",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.topP = topP;",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getTopK",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "throw new UnsupportedOperationException(\"Unimplemented method 'getTopK'\");",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setTopK",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "throw new UnsupportedOperationException(\"Unimplemented method 'setTopK'\");",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getFunctionCallbacks",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.functionCallbacks;",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setFunctionCallbacks",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.functionCallbacks = functionCallbacks;",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getFunctions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.functions;",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setFunctions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.functions = functions;",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatOptions Builder",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-azure-openai/src/main/java/org/springframework/ai/azure/openai/AzureOpenAiEmbeddingOptions.java",
        "class_names": [
            "Builder",
            "AzureOpenAiEmbeddingOptions"
        ],
        "imports": "import org.springframework.ai.embedding.EmbeddingOptions;\nimport com.fasterxml.jackson.annotation.JsonProperty;",
        "package_import_paths": {
            "org.springframework.ai.azure.openai.AzureOpenAiEmbeddingOptions": "org.springframework.ai.azure.openai.AzureOpenAiEmbeddingOptions",
            "org.springframework.ai.azure.openai.Builder": "org.springframework.ai.azure.openai.Builder",
            "org.springframework.ai.azure.openai.builder": "org.springframework.ai.azure.openai.builder",
            "org.springframework.ai.azure.openai.withUser": "org.springframework.ai.azure.openai.withUser",
            "org.springframework.ai.azure.openai.withDeploymentNam": "org.springframework.ai.azure.openai.withDeploymentNam",
            "org.springframework.ai.azure.openai.build": "org.springframework.ai.azure.openai.build",
            "org.springframework.ai.azure.openai.getUser": "org.springframework.ai.azure.openai.getUser",
            "org.springframework.ai.azure.openai.setUser": "org.springframework.ai.azure.openai.setUser",
            "org.springframework.ai.azure.openai.getDeploymentNam": "org.springframework.ai.azure.openai.getDeploymentNam",
            "org.springframework.ai.azure.openai.setDeploymentNam": "org.springframework.ai.azure.openai.setDeploymentNam",
            "org.springframework.ai.azure.openai.user": "org.springframework.ai.azure.openai.user",
            "org.springframework.ai.azure.openai.deploymentNam": "org.springframework.ai.azure.openai.deploymentNam",
            "org.springframework.ai.azure.openai.options": "org.springframework.ai.azure.openai.options"
        },
        "package": "package org.springframework.ai.azure.openai;",
        "property_declarations": [
            "@JsonProperty(value = \"model\")\n\tprivate String deploymentName;",
            "private final AzureOpenAiEmbeddingOptions options = new AzureOpenAiEmbeddingOptions();",
            "@JsonProperty(value = \"user\")\n\tprivate String user;"
        ],
        "functions": [
            {
                "name": "builder",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Builder();",
                "is_abstract": "",
                "class_name": "AzureOpenAiEmbeddingOptions",
                "annotations": []
            },
            {
                "name": "withUser",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.setUser(user);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "AzureOpenAiEmbeddingOptions Builder",
                "annotations": []
            },
            {
                "name": "withDeploymentName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.setDeploymentName(model);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "AzureOpenAiEmbeddingOptions Builder",
                "annotations": []
            },
            {
                "name": "build",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.options;",
                "is_abstract": "",
                "class_name": "AzureOpenAiEmbeddingOptions Builder",
                "annotations": []
            },
            {
                "name": "getUser",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.user;",
                "is_abstract": "",
                "class_name": "AzureOpenAiEmbeddingOptions Builder",
                "annotations": []
            },
            {
                "name": "setUser",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.user = user;",
                "is_abstract": "",
                "class_name": "AzureOpenAiEmbeddingOptions Builder",
                "annotations": []
            },
            {
                "name": "getDeploymentName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.deploymentName;",
                "is_abstract": "",
                "class_name": "AzureOpenAiEmbeddingOptions Builder",
                "annotations": []
            },
            {
                "name": "setDeploymentName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.deploymentName = deploymentName;",
                "is_abstract": "",
                "class_name": "AzureOpenAiEmbeddingOptions Builder",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-azure-openai/src/main/java/org/springframework/ai/azure/openai/metadata/AzureOpenAiUsage.java",
        "class_names": [
            "AzureOpenAiUsage"
        ],
        "imports": "import com.azure.ai.openai.models.CompletionsUsage;\nimport org.springframework.util.Assert;\nimport org.springframework.ai.chat.metadata.Usage;\nimport com.azure.ai.openai.models.ChatCompletions;",
        "package_import_paths": {
            "org.springframework.ai.azure.openai.metadata.AzureOpenAiUs": "org.springframework.ai.azure.openai.metadata.AzureOpenAiUs",
            "org.springframework.ai.azure.openai.metadata.from": "org.springframework.ai.azure.openai.metadata.from",
            "org.springframework.ai.azure.openai.metadata.getUs": "org.springframework.ai.azure.openai.metadata.getUs",
            "org.springframework.ai.azure.openai.metadata.getPromptTokens": "org.springframework.ai.azure.openai.metadata.getPromptTokens",
            "org.springframework.ai.azure.openai.metadata.getGenerationTokens": "org.springframework.ai.azure.openai.metadata.getGenerationTokens",
            "org.springframework.ai.azure.openai.metadata.getTotalTokens": "org.springframework.ai.azure.openai.metadata.getTotalTokens",
            "org.springframework.ai.azure.openai.metadata.toStrin": "org.springframework.ai.azure.openai.metadata.toStrin",
            "org.springframework.ai.azure.openai.metadata.us": "org.springframework.ai.azure.openai.metadata.us"
        },
        "package": "package org.springframework.ai.azure.openai.metadata;",
        "property_declarations": [
            "private final CompletionsUsage usage;"
        ],
        "functions": [
            {
                "name": "from",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(chatCompletions, \"ChatCompletions must not be null\");\n\t\treturn from(chatCompletions.getUsage());",
                "is_abstract": "",
                "class_name": "AzureOpenAiUsage",
                "annotations": []
            },
            {
                "name": "getUsage",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.usage;",
                "is_abstract": "",
                "class_name": "AzureOpenAiUsage",
                "annotations": []
            },
            {
                "name": "getPromptTokens",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return (long) getUsage().getPromptTokens();",
                "is_abstract": "",
                "class_name": "AzureOpenAiUsage",
                "annotations": []
            },
            {
                "name": "getGenerationTokens",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return (long) getUsage().getCompletionTokens();",
                "is_abstract": "",
                "class_name": "AzureOpenAiUsage",
                "annotations": []
            },
            {
                "name": "getTotalTokens",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return (long) getUsage().getTotalTokens();",
                "is_abstract": "",
                "class_name": "AzureOpenAiUsage",
                "annotations": []
            },
            {
                "name": "toString",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return getUsage().toString();",
                "is_abstract": "",
                "class_name": "AzureOpenAiUsage",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-azure-openai/src/main/java/org/springframework/ai/azure/openai/metadata/AzureOpenAiChatResponseMetadata.java",
        "class_names": [
            "AzureOpenAiChatResponseMetadata"
        ],
        "imports": "import org.springframework.util.Assert;\nimport org.springframework.ai.chat.metadata.PromptMetadata;\nimport org.springframework.ai.chat.metadata.Usage;\nimport com.azure.ai.openai.models.ChatCompletions;\nimport org.springframework.ai.chat.metadata.ChatResponseMetadata;",
        "package_import_paths": {
            "org.springframework.ai.azure.openai.metadata.AzureOpenAiChatResponseMetadat": "org.springframework.ai.azure.openai.metadata.AzureOpenAiChatResponseMetadat",
            "org.springframework.ai.azure.openai.metadata.SuppressWarnings": "org.springframework.ai.azure.openai.metadata.SuppressWarnings",
            "org.springframework.ai.azure.openai.metadata.getId": "org.springframework.ai.azure.openai.metadata.getId",
            "org.springframework.ai.azure.openai.metadata.getUs": "org.springframework.ai.azure.openai.metadata.getUs",
            "org.springframework.ai.azure.openai.metadata.getPromptMetadat": "org.springframework.ai.azure.openai.metadata.getPromptMetadat",
            "org.springframework.ai.azure.openai.metadata.toStrin": "org.springframework.ai.azure.openai.metadata.toStrin",
            "org.springframework.ai.azure.openai.metadata.AI_METADATA_STRING": "org.springframework.ai.azure.openai.metadata.AI_METADATA_STRING",
            "org.springframework.ai.azure.openai.metadata.id": "org.springframework.ai.azure.openai.metadata.id",
            "org.springframework.ai.azure.openai.metadata.us": "org.springframework.ai.azure.openai.metadata.us",
            "org.springframework.ai.azure.openai.metadata.promptMetadat": "org.springframework.ai.azure.openai.metadata.promptMetadat"
        },
        "package": "package org.springframework.ai.azure.openai.metadata;",
        "property_declarations": [
            "private final PromptMetadata promptMetadata;",
            "private final String id;",
            "protected static final String AI_METADATA_STRING = \"{ @type: %1$s, id: %2$s, usage: %3$s, rateLimit: %4$s }\";",
            "private final Usage usage;"
        ],
        "functions": [
            {
                "name": "SuppressWarnings",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(chatCompletions, \"Azure OpenAI ChatCompletions must not be null\");\n\t\tString id = chatCompletions.getId();\n\t\tAzureOpenAiUsage usage = AzureOpenAiUsage.from(chatCompletions);\n\t\tAzureOpenAiChatResponseMetadata chatResponseMetadata = new AzureOpenAiChatResponseMetadata(id, usage,\n\t\t\t\tpromptFilterMetadata);\n\t\treturn chatResponseMetadata;",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatResponseMetadata",
                "annotations": [
                    "@SuppressWarnings(\"all\")"
                ]
            },
            {
                "name": "getId",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.id;",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatResponseMetadata",
                "annotations": []
            },
            {
                "name": "getUsage",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.usage;",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatResponseMetadata",
                "annotations": []
            },
            {
                "name": "getPromptMetadata",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.promptMetadata;",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatResponseMetadata",
                "annotations": []
            },
            {
                "name": "toString",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return AI_METADATA_STRING.formatted(getClass().getTypeName(), getId(), getUsage(), getRateLimit());",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatResponseMetadata",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-azure-openai/src/main/java/org/springframework/ai/azure/openai/aot/AzureOpenAiRuntimeHints.java",
        "class_names": [
            "AzureOpenAiRuntimeHints"
        ],
        "imports": "import com.azure.ai.openai.OpenAIAsyncClient;\nimport org.springframework.lang.Nullable;\nimport org.springframework.aot.hint.MemberCategory;\nimport org.springframework.core.io.support.PathMatchingResourcePatternResolver;\nimport org.springframework.ai.aot.AiRuntimeHints;\nimport org.springframework.aot.hint.RuntimeHints;\nimport org.springframework.aot.hint.RuntimeHintsRegistrar;\nimport com.azure.ai.openai.OpenAIClient;\nimport org.springframework.lang.NonNull;\nimport com.azure.ai.openai.models.ChatChoice;",
        "package_import_paths": {
            "org.springframework.ai.azure.openai.aot.AzureOpenAiRuntimeHints": "org.springframework.ai.azure.openai.aot.AzureOpenAiRuntimeHints",
            "org.springframework.ai.azure.openai.aot.registerHints": "org.springframework.ai.azure.openai.aot.registerHints"
        },
        "package": "package org.springframework.ai.azure.openai.aot;",
        "property_declarations": [],
        "functions": [
            {
                "name": "registerHints",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var mcs = MemberCategory.values();\n\n\t\thints.reflection().registerType(OpenAIClient.class, mcs);\n\t\thints.reflection().registerType(OpenAIAsyncClient.class, mcs);\n\n\t\t// Register all com.azure.ai.openai.models.* classes\n\t\tAiRuntimeHints\n\t\t\t.findClassesInPackage(ChatChoice.class.getPackageName(), (metadataReader, metadataReaderFactory) -> true)\n\t\t\t.forEach(clazz -> hints.reflection().registerType(clazz, mcs));\n\n\t\thints.proxies().registerJdkProxy(com.azure.ai.openai.implementation.OpenAIClientImpl.OpenAIClientService.class);\n\n\t\ttry {\n\t\t\tvar resolver = new PathMatchingResourcePatternResolver();\n\t\t\tfor (var resourceMatch : resolver.getResources(\"/azure-ai-openai.properties\"))\n\t\t\t\thints.resources().registerResource(resourceMatch);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}",
                "is_abstract": "",
                "class_name": "AzureOpenAiRuntimeHints",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-anthropic/src/test/java/org/springframework/ai/anthropic/AnthropicTestConfiguration.java",
        "class_names": [
            "AnthropicTestConfiguration"
        ],
        "imports": "import org.springframework.context.annotation.Bean;\nimport org.springframework.boot.SpringBootConfiguration;\nimport org.springframework.util.StringUtils;\nimport org.springframework.ai.anthropic.api.AnthropicApi;",
        "package_import_paths": {
            "org.springframework.ai.anthropic.AnthropicTestConfiguration": "org.springframework.ai.anthropic.AnthropicTestConfiguration",
            "org.springframework.ai.anthropic.anthropicApi": "org.springframework.ai.anthropic.anthropicApi",
            "org.springframework.ai.anthropic.getApiKey": "org.springframework.ai.anthropic.getApiKey",
            "org.springframework.ai.anthropic.openAiChatClient": "org.springframework.ai.anthropic.openAiChatClient"
        },
        "package": "package org.springframework.ai.anthropic;",
        "property_declarations": [],
        "functions": [
            {
                "name": "anthropicApi",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new AnthropicApi(getApiKey());",
                "is_abstract": "",
                "class_name": "AnthropicTestConfiguration",
                "annotations": []
            },
            {
                "name": "getApiKey",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String apiKey = System.getenv(\"ANTHROPIC_API_KEY\");\n\t\tif (!StringUtils.hasText(apiKey)) {\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\"You must provide an API key.  Put it in an environment variable under the name ANTHROPIC_API_KEY\");\n\t\t}\n\t\treturn apiKey;",
                "is_abstract": "",
                "class_name": "AnthropicTestConfiguration",
                "annotations": []
            },
            {
                "name": "openAiChatClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "AnthropicChatClient anthropicChatClient = new AnthropicChatClient(api);\n\t\treturn anthropicChatClient;",
                "is_abstract": "",
                "class_name": "AnthropicTestConfiguration",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-anthropic/src/test/java/org/springframework/ai/anthropic/ChatCompletionRequestTests.java",
        "class_names": [
            "ChatCompletionRequestTests"
        ],
        "imports": "import org.junit.jupiter.api.Test;\nimport org.springframework.ai.chat.prompt.Prompt;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.springframework.ai.anthropic.api.AnthropicApi;",
        "package_import_paths": {
            "org.springframework.ai.anthropic.ChatCompletionRequestTests": "org.springframework.ai.anthropic.ChatCompletionRequestTests",
            "org.springframework.ai.anthropic.createRequestWithChatOptions": "org.springframework.ai.anthropic.createRequestWithChatOptions"
        },
        "package": "package org.springframework.ai.anthropic;",
        "property_declarations": [],
        "functions": [
            {
                "name": "createRequestWithChatOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var client = new AnthropicChatClient(new AnthropicApi(\"TEST\"),\n\t\t\t\tAnthropicChatOptions.builder().withModel(\"DEFAULT_MODEL\").withTemperature(66.6f).build());\n\n\t\tvar request = client.createRequest(new Prompt(\"Test message content\"), false);\n\n\t\tassertThat(request.messages()).hasSize(1);\n\t\tassertThat(request.stream()).isFalse();\n\n\t\tassertThat(request.model()).isEqualTo(\"DEFAULT_MODEL\");\n\t\tassertThat(request.temperature()).isEqualTo(66.6f);\n\n\t\trequest = client.createRequest(new Prompt(\"Test message content\",\n\t\t\t\tAnthropicChatOptions.builder().withModel(\"PROMPT_MODEL\").withTemperature(99.9f).build()), true);\n\n\t\tassertThat(request.messages()).hasSize(1);\n\t\tassertThat(request.stream()).isTrue();\n\n\t\tassertThat(request.model()).isEqualTo(\"PROMPT_MODEL\");\n\t\tassertThat(request.temperature()).isEqualTo(99.9f);",
                "is_abstract": "",
                "class_name": "ChatCompletionRequestTests",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-anthropic/src/test/java/org/springframework/ai/anthropic/AnthropicChatClientIT.java",
        "class_names": [
            "AnthropicChatClientIT"
        ],
        "imports": "import java.util.stream.Collectors;\nimport org.springframework.util.MimeTypeUtils;\nimport org.springframework.ai.anthropic.api.tool.MockWeatherService;\nimport java.util.List;\nimport org.springframework.ai.chat.Generation;\nimport org.springframework.ai.chat.ChatClient;\nimport org.springframework.ai.chat.prompt.SystemPromptTemplate;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.core.io.Resource;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.ai.parser.MapOutputParser;\nimport java.io.IOException;\nimport org.springframework.ai.chat.messages.Message;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.slf4j.Logger;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport java.util.Map;\nimport org.springframework.ai.parser.BeanOutputParser;\nimport org.springframework.beans.factory.annotation.Value;\nimport java.util.Arrays;\nimport org.springframework.ai.chat.ChatResponse;\nimport org.springframework.ai.chat.messages.UserMessage;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.ai.chat.messages.Media;\nimport org.springframework.ai.chat.prompt.PromptTemplate;\nimport org.springframework.ai.parser.ListOutputParser;\nimport org.springframework.ai.chat.messages.AssistantMessage;\nimport org.springframework.ai.model.function.FunctionCallbackWrapper;\nimport java.util.ArrayList;\nimport org.springframework.ai.chat.prompt.Prompt;\nimport org.springframework.core.io.ClassPathResource;\nimport org.springframework.core.convert.support.DefaultConversionService;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.anthropic.api.AnthropicApi;\nimport org.springframework.ai.chat.StreamingChatClient;",
        "package_import_paths": {
            "org.springframework.ai.anthropic.AnthropicChatClientIT": "org.springframework.ai.anthropic.AnthropicChatClientIT",
            "org.springframework.ai.anthropic.roleTest": "org.springframework.ai.anthropic.roleTest",
            "org.springframework.ai.anthropic.outputParser": "org.springframework.ai.anthropic.outputParser",
            "org.springframework.ai.anthropic.mapOutputParser": "org.springframework.ai.anthropic.mapOutputParser",
            "org.springframework.ai.anthropic.beanOutputParserRecords": "org.springframework.ai.anthropic.beanOutputParserRecords",
            "org.springframework.ai.anthropic.beanStreamOutputParserRecords": "org.springframework.ai.anthropic.beanStreamOutputParserRecords",
            "org.springframework.ai.anthropic.multiModalityTest": "org.springframework.ai.anthropic.multiModalityTest",
            "org.springframework.ai.anthropic.functionCallTest": "org.springframework.ai.anthropic.functionCallTest",
            "org.springframework.ai.anthropic.logger": "org.springframework.ai.anthropic.logger",
            "org.springframework.ai.anthropic.protected": "org.springframework.ai.anthropic.protected",
            "org.springframework.ai.anthropic.systemResour": "org.springframework.ai.anthropic.systemResour"
        },
        "package": "package org.springframework.ai.anthropic;",
        "property_declarations": [
            "private static final Logger logger = LoggerFactory.getLogger(AnthropicChatClientIT.class);",
            "@Autowired\n\tprotected StreamingChatClient streamingChatClient;",
            "@Autowired\n\tprotected ChatClient chatClient;",
            "@Value(\"classpath:/prompts/system-message.st\")\n\tprivate Resource systemResource;"
        ],
        "functions": [
            {
                "name": "roleTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "UserMessage userMessage = new UserMessage(\n\t\t\t\t\"Tell me about 3 famous pirates from the Golden Age of Piracy and why they did.\");\n\t\tSystemPromptTemplate systemPromptTemplate = new SystemPromptTemplate(systemResource);\n\t\tMessage systemMessage = systemPromptTemplate.createMessage(Map.of(\"name\", \"Bob\", \"voice\", \"pirate\"));\n\t\tPrompt prompt = new Prompt(List.of(userMessage, systemMessage));\n\t\tChatResponse response = chatClient.call(prompt);\n\t\tassertThat(response.getResults()).hasSize(1);\n\t\tassertThat(response.getMetadata().getUsage().getGenerationTokens()).isGreaterThan(0);\n\t\tassertThat(response.getMetadata().getUsage().getPromptTokens()).isGreaterThan(0);\n\t\tassertThat(response.getMetadata().getUsage().getTotalTokens())\n\t\t\t.isEqualTo(response.getMetadata().getUsage().getPromptTokens()\n\t\t\t\t\t+ response.getMetadata().getUsage().getGenerationTokens());\n\t\tGeneration generation = response.getResults().get(0);\n\t\tassertThat(generation.getOutput().getContent()).contains(\"Blackbeard\");\n\t\tassertThat(generation.getMetadata().getFinishReason()).isEqualTo(\"end_turn\");\n\t\tlogger.info(response.toString());",
                "is_abstract": "",
                "class_name": "AnthropicChatClientIT",
                "annotations": []
            },
            {
                "name": "outputParser",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "DefaultConversionService conversionService = new DefaultConversionService();\n\t\tListOutputParser outputParser = new ListOutputParser(conversionService);\n\n\t\tString format = outputParser.getFormat();\n\t\tString template = \"\"\"\n\t\t\t\tList five {subject}\n\t\t\t\t{format}\n\t\t\t\t\"\"\";\n\t\tPromptTemplate promptTemplate = new PromptTemplate(template,\n\t\t\t\tMap.of(\"subject\", \"ice cream flavors\", \"format\", format));\n\t\tPrompt prompt = new Prompt(promptTemplate.createMessage());\n\t\tGeneration generation = this.chatClient.call(prompt).getResult();\n\n\t\tList<String> list = outputParser.parse(generation.getOutput().getContent());\n\t\tassertThat(list).hasSize(5);",
                "is_abstract": "",
                "class_name": "AnthropicChatClientIT",
                "annotations": []
            },
            {
                "name": "mapOutputParser",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "MapOutputParser outputParser = new MapOutputParser();\n\n\t\tString format = outputParser.getFormat();\n\t\tString template = \"\"\"\n\t\t\t\tProvide me a List of {subject}\n\t\t\t\t{format}\n\t\t\t\t\"\"\";\n\t\tPromptTemplate promptTemplate = new PromptTemplate(template,\n\t\t\t\tMap.of(\"subject\", \"an array of numbers from 1 to 9 under they key name 'numbers'\", \"format\", format));\n\t\tPrompt prompt = new Prompt(promptTemplate.createMessage());\n\t\tGeneration generation = chatClient.call(prompt).getResult();\n\n\t\tMap<String, Object> result = outputParser.parse(generation.getOutput().getContent());\n\t\tassertThat(result.get(\"numbers\")).isEqualTo(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9));",
                "is_abstract": "",
                "class_name": "AnthropicChatClientIT",
                "annotations": []
            },
            {
                "name": "beanOutputParserRecords",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "BeanOutputParser<ActorsFilmsRecord> outputParser = new BeanOutputParser<>(ActorsFilmsRecord.class);\n\n\t\tString format = outputParser.getFormat();\n\t\tString template = \"\"\"\n\t\t\t\tGenerate the filmography of 5 movies for Tom Hanks.\n\t\t\t\t{format}\n\t\t\t\t\"\"\";\n\t\tPromptTemplate promptTemplate = new PromptTemplate(template, Map.of(\"format\", format));\n\t\tPrompt prompt = new Prompt(promptTemplate.createMessage());\n\t\tGeneration generation = chatClient.call(prompt).getResult();\n\n\t\tActorsFilmsRecord actorsFilms = outputParser.parse(generation.getOutput().getContent());\n\t\tlogger.info(\"\" + actorsFilms);\n\t\tassertThat(actorsFilms.actor()).isEqualTo(\"Tom Hanks\");\n\t\tassertThat(actorsFilms.movies()).hasSize(5);",
                "is_abstract": "",
                "class_name": "AnthropicChatClientIT",
                "annotations": []
            },
            {
                "name": "beanStreamOutputParserRecords",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "BeanOutputParser<ActorsFilmsRecord> outputParser = new BeanOutputParser<>(ActorsFilmsRecord.class);\n\n\t\tString format = outputParser.getFormat();\n\t\tString template = \"\"\"\n\t\t\t\tGenerate the filmography of 5 movies for Tom Hanks.\n\t\t\t\t{format}\n\t\t\t\t\"\"\";\n\t\tPromptTemplate promptTemplate = new PromptTemplate(template, Map.of(\"format\", format));\n\t\tPrompt prompt = new Prompt(promptTemplate.createMessage());\n\n\t\tString generationTextFromStream = streamingChatClient.stream(prompt)\n\t\t\t.collectList()\n\t\t\t.block()\n\t\t\t.stream()\n\t\t\t.map(ChatResponse::getResults)\n\t\t\t.flatMap(List::stream)\n\t\t\t.map(Generation::getOutput)\n\t\t\t.map(AssistantMessage::getContent)\n\t\t\t.collect(Collectors.joining());\n\n\t\tActorsFilmsRecord actorsFilms = outputParser.parse(generationTextFromStream);\n\t\tlogger.info(\"\" + actorsFilms);\n\t\tassertThat(actorsFilms.actor()).isEqualTo(\"Tom Hanks\");\n\t\tassertThat(actorsFilms.movies()).hasSize(5);",
                "is_abstract": "",
                "class_name": "AnthropicChatClientIT",
                "annotations": []
            },
            {
                "name": "multiModalityTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "byte[] imageData = new ClassPathResource(\"/test.png\").getContentAsByteArray();\n\n\t\tvar userMessage = new UserMessage(\"Explain what do you see on this picture?\",\n\t\t\t\tList.of(new Media(MimeTypeUtils.IMAGE_PNG, imageData)));\n\n\t\tChatResponse response = chatClient.call(new Prompt(List.of(userMessage)));\n\n\t\tlogger.info(response.getResult().getOutput().getContent());\n\t\tassertThat(response.getResult().getOutput().getContent()).contains(\"bananas\", \"apple\", \"basket\");",
                "is_abstract": "",
                "class_name": "AnthropicChatClientIT",
                "annotations": []
            },
            {
                "name": "functionCallTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "UserMessage userMessage = new UserMessage(\n\t\t\t\t\"What's the weather like in San Francisco, Tokyo and Paris? Return the result in Celsius.\");\n\n\t\tList<Message> messages = new ArrayList<>(List.of(userMessage));\n\n\t\tvar promptOptions = AnthropicChatOptions.builder()\n\t\t\t.withModel(AnthropicApi.ChatModel.CLAUDE_3_OPUS.getValue())\n\t\t\t.withFunctionCallbacks(List.of(FunctionCallbackWrapper.builder(new MockWeatherService())\n\t\t\t\t.withName(\"getCurrentWeather\")\n\t\t\t\t.withDescription(\"Get the weather in location\")\n\t\t\t\t.build()))\n\t\t\t.build();\n\n\t\tChatResponse response = chatClient.call(new Prompt(messages, promptOptions));\n\n\t\tlogger.info(\"Response: {}\", response);\n\n\t\tGeneration generation = response.getResults().get(0);\n\t\tassertThat(generation.getOutput().getContent()).containsAnyOf(\"30.0\", \"30\");\n\t\tassertThat(generation.getOutput().getContent()).containsAnyOf(\"10.0\", \"10\");\n\t\tassertThat(generation.getOutput().getContent()).containsAnyOf(\"15.0\", \"15\");",
                "is_abstract": "",
                "class_name": "AnthropicChatClientIT",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-anthropic/src/test/java/org/springframework/ai/anthropic/api/AnthropicApiIT.java",
        "class_names": [
            "AnthropicApiIT"
        ],
        "imports": "import org.springframework.ai.anthropic.api.AnthropicApi.Role;\nimport org.springframework.ai.anthropic.api.AnthropicApi.StreamResponse;\nimport java.util.List;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.springframework.ai.anthropic.api.AnthropicApi.ChatCompletionRequest;\nimport reactor.core.publisher.Flux;\nimport org.springframework.http.ResponseEntity;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.anthropic.api.AnthropicApi.MediaContent;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.ai.anthropic.api.AnthropicApi.RequestMessage;\nimport org.springframework.ai.anthropic.api.AnthropicApi.ChatCompletion;",
        "package_import_paths": {
            "org.springframework.ai.anthropic.api.AnthropicApiIT": "org.springframework.ai.anthropic.api.AnthropicApiIT",
            "org.springframework.ai.anthropic.api.chatCompletionEntity": "org.springframework.ai.anthropic.api.chatCompletionEntity",
            "org.springframework.ai.anthropic.api.chatCompletionStream": "org.springframework.ai.anthropic.api.chatCompletionStream",
            "org.springframework.ai.anthropic.api.anthropicApi": "org.springframework.ai.anthropic.api.anthropicApi"
        },
        "package": "package org.springframework.ai.anthropic.api;",
        "property_declarations": [
            "AnthropicApi anthropicApi = new AnthropicApi(System.getenv(\"ANTHROPIC_API_KEY\"));"
        ],
        "functions": [
            {
                "name": "chatCompletionEntity",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "RequestMessage chatCompletionMessage = new RequestMessage(List.of(new MediaContent(\"Tell me a Joke?\")),\n\t\t\t\tRole.USER);\n\t\tResponseEntity<ChatCompletion> response = anthropicApi\n\t\t\t.chatCompletionEntity(new ChatCompletionRequest(AnthropicApi.ChatModel.CLAUDE_3_OPUS.getValue(),\n\t\t\t\t\tList.of(chatCompletionMessage), null, 100, 0.8f, false));\n\n\t\tSystem.out.println(response);\n\t\tassertThat(response).isNotNull();\n\t\tassertThat(response.getBody()).isNotNull();",
                "is_abstract": "",
                "class_name": "AnthropicApiIT",
                "annotations": []
            },
            {
                "name": "chatCompletionStream",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "RequestMessage chatCompletionMessage = new RequestMessage(List.of(new MediaContent(\"Tell me a Joke?\")),\n\t\t\t\tRole.USER);\n\n\t\tFlux<StreamResponse> response = anthropicApi\n\t\t\t.chatCompletionStream(new ChatCompletionRequest(AnthropicApi.ChatModel.CLAUDE_3_OPUS.getValue(),\n\t\t\t\t\tList.of(chatCompletionMessage), null, 100, 0.8f, true));\n\n\t\tassertThat(response).isNotNull();\n\n\t\tList<StreamResponse> bla = response.collectList().block();\n\t\tassertThat(bla).isNotNull();\n\n\t\tbla.stream().forEach(r -> System.out.println(r));",
                "is_abstract": "",
                "class_name": "AnthropicApiIT",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-anthropic/src/test/java/org/springframework/ai/anthropic/api/tool/MockWeatherService.java",
        "class_names": [
            "MockWeatherService"
        ],
        "imports": "import com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport com.fasterxml.jackson.annotation.JsonPropertyDescription;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport java.util.function.Function;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport com.fasterxml.jackson.annotation.JsonClassDescription;",
        "package_import_paths": {
            "org.springframework.ai.anthropic.api.tool.MockWeatherServi": "org.springframework.ai.anthropic.api.tool.MockWeatherServi",
            "org.springframework.ai.anthropic.api.tool.apply": "org.springframework.ai.anthropic.api.tool.apply",
            "org.springframework.ai.anthropic.api.tool.unitNam": "org.springframework.ai.anthropic.api.tool.unitNam"
        },
        "package": "package org.springframework.ai.anthropic.api.tool;",
        "property_declarations": [
            "public final String unitName;"
        ],
        "functions": [
            {
                "name": "apply",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "double temperature = 0;\n\t\tif (request.location().contains(\"Paris\")) {\n\t\t\ttemperature = 15;\n\t\t}\n\t\telse if (request.location().contains(\"Tokyo\")) {\n\t\t\ttemperature = 10;\n\t\t}\n\t\telse if (request.location().contains(\"San Francisco\")) {\n\t\t\ttemperature = 30;\n\t\t}\n\n\t\treturn new Response(temperature, Unit.C);",
                "is_abstract": "",
                "class_name": "MockWeatherService",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-anthropic/src/test/java/org/springframework/ai/anthropic/api/tool/AnthropicApiToolIT.java",
        "class_names": [
            "AnthropicApiToolIT"
        ],
        "imports": "import org.springframework.ai.anthropic.api.AnthropicApi.Role;\nimport java.util.List;\nimport org.springframework.util.CollectionUtils;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport java.util.concurrent.ConcurrentHashMap;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.springframework.ai.anthropic.api.AnthropicApi.MediaContent.Type;\nimport org.slf4j.Logger;\nimport java.util.function.Function;\nimport org.springframework.ai.anthropic.api.AnthropicApi.MediaContent;\nimport org.springframework.ai.anthropic.api.AnthropicApi.ChatCompletionRequest;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.ai.model.ModelOptionsUtils;\nimport org.springframework.ai.anthropic.api.AnthropicApi.Tool;\nimport java.util.ArrayList;\nimport org.springframework.http.ResponseEntity;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.anthropic.api.AnthropicApi;\nimport org.springframework.ai.anthropic.api.AnthropicApi.RequestMessage;\nimport org.springframework.ai.anthropic.api.AnthropicApi.ChatCompletion;",
        "package_import_paths": {
            "org.springframework.ai.anthropic.api.tool.AnthropicApiToolIT": "org.springframework.ai.anthropic.api.tool.AnthropicApiToolIT",
            "org.springframework.ai.anthropic.api.tool.toolCalls": "org.springframework.ai.anthropic.api.tool.toolCalls",
            "org.springframework.ai.anthropic.api.tool.doCall": "org.springframework.ai.anthropic.api.tool.doCall",
            "org.springframework.ai.anthropic.api.tool.logger": "org.springframework.ai.anthropic.api.tool.logger",
            "org.springframework.ai.anthropic.api.tool.anthropicApi": "org.springframework.ai.anthropic.api.tool.anthropicApi",
            "org.springframework.ai.anthropic.api.tool.FUNCTIONS": "org.springframework.ai.anthropic.api.tool.FUNCTIONS",
            "org.springframework.ai.anthropic.api.tool.tools": "org.springframework.ai.anthropic.api.tool.tools"
        },
        "package": "package org.springframework.ai.anthropic.api.tool;",
        "property_declarations": [
            "AnthropicApi anthropicApi = new AnthropicApi(System.getenv(\"ANTHROPIC_API_KEY\"));",
            "private static final Logger logger = LoggerFactory.getLogger(AnthropicApiLegacyToolIT.class);",
            "public static final ConcurrentHashMap<String, Function> FUNCTIONS = new ConcurrentHashMap<>();",
            "List<Tool> tools = List.of(new Tool(\"getCurrentWeather\",\n\t\t\t\"Get the weather in location. Return temperature in 30\u00b0F or 30\u00b0C format.\", ModelOptionsUtils.jsonToMap(\"\"\"\n\t\t\t\t\t{\n\t\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\t\"properties\": {\n\t\t\t\t\t\t\t\"location\": {\n\t\t\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\t\t\"description\": \"The city and state e.g. San Francisco, CA\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"unit\": {\n\t\t\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\t\t\"enum\": [\"C\", \"F\"]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"required\": [\"location\", \"unit\"]\n\t\t\t\t\t}\n\t\t\t\t\t\"\"\")));"
        ],
        "functions": [
            {
                "name": "toolCalls",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "List<RequestMessage> messageConversation = new ArrayList<>();\n\n\t\tRequestMessage chatCompletionMessage = new RequestMessage(List.of(new MediaContent(\n\t\t\t\t\"What's the weather like in San Francisco, Tokyo, and Paris? Show the temperature in Celsius.\")),\n\t\t\t\tRole.USER);\n\n\t\tmessageConversation.add(chatCompletionMessage);\n\n\t\tResponseEntity<ChatCompletion> chatCompletion = doCall(messageConversation);\n\n\t\tvar responseText = chatCompletion.getBody().content().get(0).text();\n\t\tlogger.info(\"FINAL RESPONSE: \" + responseText);\n\n\t\tassertThat(responseText).contains(\"15\");\n\t\tassertThat(responseText).contains(\"10\");\n\t\tassertThat(responseText).contains(\"30\");",
                "is_abstract": "",
                "class_name": "AnthropicApiToolIT",
                "annotations": []
            },
            {
                "name": "doCall",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "ChatCompletionRequest chatCompletionRequest = ChatCompletionRequest.builder()\n\t\t\t.withModel(AnthropicApi.ChatModel.CLAUDE_3_OPUS)\n\t\t\t.withMessages(messageConversation)\n\t\t\t.withMaxTokens(1500)\n\t\t\t.withTemperature(0.8f)\n\t\t\t.withTools(tools)\n\t\t\t.build();\n\n\t\tResponseEntity<ChatCompletion> response = anthropicApi.chatCompletionEntity(chatCompletionRequest);\n\n\t\tList<MediaContent> toolToUseList = response.getBody()\n\t\t\t.content()\n\t\t\t.stream()\n\t\t\t.filter(c -> c.type() == MediaContent.Type.TOOL_USE)\n\t\t\t.toList();\n\n\t\tif (CollectionUtils.isEmpty(toolToUseList)) {\n\t\t\treturn response;\n\t\t}\n\t\t// Add use tool message to the conversation history\n\t\tmessageConversation.add(new RequestMessage(response.getBody().content(), Role.ASSISTANT));\n\n\t\tList<MediaContent> toolResults = new ArrayList<>();\n\n\t\tfor (MediaContent toolToUse : toolToUseList) {\n\n\t\t\tvar id = toolToUse.id();\n\t\t\tvar name = toolToUse.name();\n\t\t\tvar input = toolToUse.input();\n\n\t\t\tlogger.info(\"FunctionCalls from the LLM: \" + name);\n\n\t\t\tMockWeatherService.Request request = ModelOptionsUtils.mapToClass(input, MockWeatherService.Request.class);\n\n\t\t\tlogger.info(\"Resolved function request param: \" + request);\n\n\t\t\tObject functionCallResponseData = FUNCTIONS.get(name).apply(request);\n\n\t\t\tString content = ModelOptionsUtils.toJsonString(functionCallResponseData);\n\n\t\t\tlogger.info(\"Function response : \" + content);\n\n\t\t\ttoolResults.add(new MediaContent(Type.TOOL_RESULT, id, content));\n\t\t}\n\n\t\t// Add function response message to the conversation history\n\t\tmessageConversation.add(new RequestMessage(toolResults, Role.USER));\n\n\t\treturn doCall(messageConversation);",
                "is_abstract": "",
                "class_name": "AnthropicApiToolIT",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-anthropic/src/test/java/org/springframework/ai/anthropic/api/tool/AnthropicApiLegacyToolIT.java",
        "class_names": [
            "AnthropicApiLegacyToolIT"
        ],
        "imports": "import org.springframework.ai.anthropic.api.AnthropicApi.Role;\nimport java.util.List;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport java.util.concurrent.ConcurrentHashMap;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.slf4j.Logger;\nimport java.util.function.Function;\nimport org.springframework.ai.anthropic.api.AnthropicApi.MediaContent;\nimport org.springframework.ai.anthropic.api.AnthropicApi.ChatCompletionRequest;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.ai.model.ModelOptionsUtils;\nimport org.springframework.ai.anthropic.api.tool.XmlHelper.Tools.ToolDescription.Parameter;\nimport org.springframework.ai.anthropic.api.tool.XmlHelper.Tools;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.ai.anthropic.api.tool.XmlHelper.Tools.ToolDescription;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.anthropic.api.AnthropicApi;\nimport org.springframework.ai.anthropic.api.AnthropicApi.RequestMessage;\nimport org.springframework.ai.anthropic.api.AnthropicApi.ChatCompletion;\nimport org.springframework.ai.anthropic.api.tool.XmlHelper.FunctionCalls;",
        "package_import_paths": {
            "org.springframework.ai.anthropic.api.tool.AnthropicApiLegacyToolIT": "org.springframework.ai.anthropic.api.tool.AnthropicApiLegacyToolIT",
            "org.springframework.ai.anthropic.api.tool.toolCalls": "org.springframework.ai.anthropic.api.tool.toolCalls",
            "org.springframework.ai.anthropic.api.tool.doCall": "org.springframework.ai.anthropic.api.tool.doCall",
            "org.springframework.ai.anthropic.api.tool.logger": "org.springframework.ai.anthropic.api.tool.logger",
            "org.springframework.ai.anthropic.api.tool.anthropicApi": "org.springframework.ai.anthropic.api.tool.anthropicApi",
            "org.springframework.ai.anthropic.api.tool.TOO_SYSTEM_PROMPT_TEMPLATE": "org.springframework.ai.anthropic.api.tool.TOO_SYSTEM_PROMPT_TEMPLATE",
            "org.springframework.ai.anthropic.api.tool.FUNCTIONS": "org.springframework.ai.anthropic.api.tool.FUNCTIONS"
        },
        "package": "package org.springframework.ai.anthropic.api.tool;",
        "property_declarations": [
            "public static final String TOO_SYSTEM_PROMPT_TEMPLATE = \"\"\"\n\t\t\tIn this environment you have access to a set of tools you can use to answer the user's question.\n\n\t\t\tYou may call them like this:\n\t\t\t<function_calls>\n\t\t\t\t<invoke>\n\t\t\t\t\t<tool_name>$TOOL_NAME</tool_name>\n\t\t\t\t\t<parameters>\n\t\t\t\t\t\t<$PARAMETER_NAME>$PARAMETER_VALUE</$PARAMETER_NAME>\n\t\t\t\t\t\t...\n\t\t\t\t\t</parameters>\n\t\t\t\t</invoke>\n\t\t\t</function_calls>\n\n\t\t\tHere are the tools available:\n\t\t\t<tools>%s</tools>\n\t\t\t\"\"\";",
            "AnthropicApi anthropicApi = new AnthropicApi(System.getenv(\"ANTHROPIC_API_KEY\"));",
            "private static final Logger logger = LoggerFactory.getLogger(AnthropicApiLegacyToolIT.class);",
            "public static final ConcurrentHashMap<String, Function> FUNCTIONS = new ConcurrentHashMap<>();"
        ],
        "functions": [
            {
                "name": "toolCalls",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String toolDescription = XmlHelper.toXml(new Tools(List.of(new ToolDescription(\"getCurrentWeather\",\n\t\t\t\t\"Get the weather in location. Return temperature in 30\u00b0F or 30\u00b0C format.\",\n\t\t\t\tList.of(new Parameter(\"location\", \"string\", \"The city and state e.g. San Francisco, CA\"),\n\t\t\t\t\t\tnew Parameter(\"unit\", \"enum\", \"Temperature unit. Use only C or F. Default is C.\"))))));\n\n\t\tlogger.info(\"TOOLS: \" + toolDescription);\n\n\t\tString systemPrompt = String.format(TOO_SYSTEM_PROMPT_TEMPLATE, toolDescription);\n\n\t\tRequestMessage chatCompletionMessage = new RequestMessage(\n\t\t\t\tList.of(new MediaContent(\"What's the weather like in Paris? Show the temperature in Celsius.\")),\n\t\t\t\t// \"What's the weather like in San Francisco, Tokyo, and Paris? Show the\n\t\t\t\t// temperature in Celsius.\")),\n\t\t\t\tRole.USER);\n\n\t\tChatCompletionRequest chatCompletionRequest = new ChatCompletionRequest(\n\t\t\t\tAnthropicApi.ChatModel.CLAUDE_3_OPUS.getValue(), List.of(chatCompletionMessage), systemPrompt, 500,\n\t\t\t\t0.8f, false);\n\n\t\tResponseEntity<ChatCompletion> chatCompletion = doCall(chatCompletionRequest);\n\n\t\tvar responseText = chatCompletion.getBody().content().get(0).text();\n\t\tlogger.info(\"FINAL RESPONSE: \" + responseText);\n\n\t\tassertThat(responseText).contains(\"15\");",
                "is_abstract": "",
                "class_name": "AnthropicApiLegacyToolIT",
                "annotations": []
            },
            {
                "name": "doCall",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "ResponseEntity<ChatCompletion> response = anthropicApi.chatCompletionEntity(chatCompletionRequest);\n\n\t\tFunctionCalls functionCalls = XmlHelper.extractFunctionCalls(response.getBody().content().get(0).text());\n\n\t\tif (functionCalls == null) {\n\t\t\treturn response;\n\t\t}\n\n\t\tlogger.info(\"FunctionCalls from the LLM: \" + functionCalls);\n\n\t\tMockWeatherService.Request request = ModelOptionsUtils.mapToClass(functionCalls.invoke().parameters(),\n\t\t\t\tMockWeatherService.Request.class);\n\n\t\tlogger.info(\"Resolved function request param: \" + request);\n\n\t\tObject functionCallResponseData = FUNCTIONS.get(functionCalls.invoke().toolName()).apply(request);\n\n\t\tXmlHelper.FunctionResults functionResults = new XmlHelper.FunctionResults(List\n\t\t\t.of(new XmlHelper.FunctionResults.Result(functionCalls.invoke().toolName(), functionCallResponseData)));\n\n\t\tString content = XmlHelper.toXml(functionResults);\n\n\t\tlogger.info(\"Function response XML : \" + content);\n\n\t\tRequestMessage chatCompletionMessage2 = new RequestMessage(List.of(new MediaContent(content)), Role.USER);\n\n\t\treturn doCall(new ChatCompletionRequest(AnthropicApi.ChatModel.CLAUDE_3_OPUS.getValue(),\n\t\t\t\tList.of(chatCompletionMessage2), null, 500, 0.8f, false));",
                "is_abstract": "",
                "class_name": "AnthropicApiLegacyToolIT",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-anthropic/src/test/java/org/springframework/ai/anthropic/api/tool/XmlHelper.java",
        "class_names": [
            "XmlHelper"
        ],
        "imports": "import com.fasterxml.jackson.databind.JsonMappingException;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport java.util.List;\nimport com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\nimport java.util.regex.Pattern;\nimport java.util.Map;\nimport java.util.regex.Matcher;\nimport com.fasterxml.jackson.dataformat.xml.XmlMapper;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;\nimport org.springframework.util.StringUtils;",
        "package_import_paths": {
            "org.springframework.ai.anthropic.api.tool.XmlHelper": "org.springframework.ai.anthropic.api.tool.XmlHelper",
            "org.springframework.ai.anthropic.api.tool.extractFunctionCallsXmlBlo": "org.springframework.ai.anthropic.api.tool.extractFunctionCallsXmlBlo",
            "org.springframework.ai.anthropic.api.tool.extractFunctionCalls": "org.springframework.ai.anthropic.api.tool.extractFunctionCalls",
            "org.springframework.ai.anthropic.api.tool.toXml": "org.springframework.ai.anthropic.api.tool.toXml",
            "org.springframework.ai.anthropic.api.tool.main": "org.springframework.ai.anthropic.api.tool.main",
            "org.springframework.ai.anthropic.api.tool.FUNCTION_CALLS_REGEX": "org.springframework.ai.anthropic.api.tool.FUNCTION_CALLS_REGEX",
            "org.springframework.ai.anthropic.api.tool.FUNCTION_CALLS_PATTERN": "org.springframework.ai.anthropic.api.tool.FUNCTION_CALLS_PATTERN",
            "org.springframework.ai.anthropic.api.tool.xmlMapper": "org.springframework.ai.anthropic.api.tool.xmlMapper"
        },
        "package": "package org.springframework.ai.anthropic.api.tool;",
        "property_declarations": [
            "private static final Pattern FUNCTION_CALLS_PATTERN = Pattern.compile(FUNCTION_CALLS_REGEX, Pattern.DOTALL);",
            "private static final String FUNCTION_CALLS_REGEX = \"<function_calls>.*?</function_calls>\";",
            "private static final XmlMapper xmlMapper = new XmlMapper();"
        ],
        "functions": [
            {
                "name": "extractFunctionCallsXmlBlock",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (!StringUtils.hasText(text)) {\n\t\t\treturn \"\";\n\t\t}\n\n\t\tMatcher matcher = FUNCTION_CALLS_PATTERN.matcher(text);\n\n\t\t// Find and print the XML block\n\t\treturn (matcher.find()) ? matcher.group() : \"\";",
                "is_abstract": "",
                "class_name": "XmlHelper",
                "annotations": []
            },
            {
                "name": "extractFunctionCalls",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String xml = extractFunctionCallsXmlBlock(text);\n\n\t\tif (!StringUtils.hasText(xml)) {\n\t\t\treturn null;\n\t\t}\n\n\t\ttry {\n\t\t\tFunctionCalls functionCalls = xmlMapper.readValue(xml, FunctionCalls.class);\n\t\t\treturn functionCalls;\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\treturn null;\n\t\t}",
                "is_abstract": "",
                "class_name": "XmlHelper",
                "annotations": []
            },
            {
                "name": "toXml",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "try {\n\t\t\treturn xmlMapper.writerWithDefaultPrettyPrinter().writeValueAsString(object);\n\t\t}\n\t\tcatch (JsonProcessingException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn \"\";\n\t\t}",
                "is_abstract": "",
                "class_name": "XmlHelper",
                "annotations": []
            },
            {
                "name": "main",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String sample = \"\"\"\n\t\t\t\t<function_calls>\n\t\t\t\t\t<invoke>\n\t\t\t\t\t\t<tool_name>getCurrentWeather</tool_name>\n\t\t\t\t\t\t<parameters>\n\t\t\t\t\t\t\t<location>San Francisco, CA</location>\n\t\t\t\t\t\t\t<unit>Celsius</unit>\n\t\t\t\t\t\t</parameters>\n\t\t\t\t\t</invoke>\n\t\t\t\t</function_calls>\n\t\t\t\t\"\"\";\n\n\t\tSystem.out.println(extractFunctionCalls(sample));\n\n\t\tvar toolDescription = new Tools.ToolDescription(\"getCurrentWeather\",\n\t\t\t\t\"Get the weather in location. Return temperature in 30\u00b0F or 30\u00b0C format.\",\n\t\t\t\tList.of(new Tools.ToolDescription.Parameter(\"location\", \"string\",\n\t\t\t\t\t\t\"The city and state e.g. San Francisco, CA\"),\n\t\t\t\t\t\tnew Tools.ToolDescription.Parameter(\"unit\", \"enum\", \"Temperature unit\")));\n\n\t\tSystem.out.println(toXml(new Tools(List.of(toolDescription))));",
                "is_abstract": "",
                "class_name": "XmlHelper",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-anthropic/src/test/java/org/springframework/ai/anthropic/aot/AnthropicRuntimeHintsTests.java",
        "class_names": [
            "AnthropicRuntimeHintsTests"
        ],
        "imports": "import org.springframework.aot.hint.RuntimeHints;\nimport static org.assertj.core.api.AssertionsForClassTypes.assertThat;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.aot.hint.TypeReference;\nimport org.springframework.ai.anthropic.api.AnthropicApi;\nimport java.util.Set;\nimport static org.springframework.ai.aot.AiRuntimeHints.findJsonAnnotatedClassesInPackage;\nimport static org.springframework.aot.hint.predicate.RuntimeHintsPredicates.reflection;",
        "package_import_paths": {
            "org.springframework.ai.anthropic.aot.AnthropicRuntimeHintsTests": "org.springframework.ai.anthropic.aot.AnthropicRuntimeHintsTests",
            "org.springframework.ai.anthropic.aot.registerHints": "org.springframework.ai.anthropic.aot.registerHints"
        },
        "package": "package org.springframework.ai.anthropic.aot;",
        "property_declarations": [],
        "functions": [
            {
                "name": "registerHints",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "RuntimeHints runtimeHints = new RuntimeHints();\n\t\tAnthropicRuntimeHints anthropicRuntimeHints = new AnthropicRuntimeHints();\n\t\tanthropicRuntimeHints.registerHints(runtimeHints, null);\n\n\t\tSet<TypeReference> jsonAnnotatedClasses = findJsonAnnotatedClassesInPackage(AnthropicApi.class);\n\t\tfor (TypeReference jsonAnnotatedClass : jsonAnnotatedClasses) {\n\t\t\tassertThat(runtimeHints).matches(reflection().onType(jsonAnnotatedClass));\n\t\t}",
                "is_abstract": "",
                "class_name": "AnthropicRuntimeHintsTests",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-anthropic/src/main/java/org/springframework/ai/anthropic/AnthropicChatClient.java",
        "class_names": [
            "ChatCompletionBuilder",
            "AnthropicChatClient"
        ],
        "imports": "import java.util.concurrent.atomic.AtomicReference;\nimport java.util.stream.Collectors;\nimport org.springframework.ai.anthropic.api.AnthropicApi.Role;\nimport org.springframework.ai.retry.RetryUtils;\nimport java.util.List;\nimport org.springframework.retry.support.RetryTemplate;\nimport org.springframework.ai.chat.Generation;\nimport org.springframework.ai.chat.ChatClient;\nimport reactor.core.publisher.Flux;\nimport java.util.Base64;\nimport org.springframework.util.CollectionUtils;\nimport org.springframework.ai.anthropic.api.AnthropicApi.Usage;\nimport org.springframework.ai.model.function.FunctionCallbackContext;\nimport org.springframework.ai.anthropic.api.AnthropicApi.StreamResponse;\nimport org.springframework.ai.anthropic.api.AnthropicApi.MediaContent.Type;\nimport org.slf4j.Logger;\nimport java.util.Map;\nimport org.springframework.ai.anthropic.api.AnthropicApi.MediaContent;\nimport org.springframework.ai.anthropic.metadata.AnthropicChatResponseMetadata;\nimport org.springframework.ai.chat.prompt.ChatOptions;\nimport org.springframework.ai.anthropic.api.AnthropicApi.ChatCompletionRequest;\nimport org.springframework.ai.chat.ChatResponse;\nimport org.springframework.ai.chat.messages.MessageType;\nimport java.util.HashSet;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.ai.chat.StreamingChatClient;\nimport org.springframework.ai.model.ModelOptionsUtils;\nimport org.springframework.ai.model.function.AbstractFunctionCallSupport;\nimport java.util.Set;\nimport java.util.ArrayList;\nimport org.springframework.ai.chat.prompt.Prompt;\nimport org.springframework.util.Assert;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.ai.anthropic.api.AnthropicApi;\nimport org.springframework.ai.anthropic.api.AnthropicApi.RequestMessage;\nimport org.springframework.ai.chat.metadata.ChatGenerationMetadata;\nimport org.springframework.ai.anthropic.api.AnthropicApi.ChatCompletion;",
        "package_import_paths": {
            "org.springframework.ai.anthropic.AnthropicChatClient": "org.springframework.ai.anthropic.AnthropicChatClient",
            "org.springframework.ai.anthropic.ChatCompletionBuilder": "org.springframework.ai.anthropic.ChatCompletionBuilder",
            "org.springframework.ai.anthropic.call": "org.springframework.ai.anthropic.call",
            "org.springframework.ai.anthropic.stream": "org.springframework.ai.anthropic.stream",
            "org.springframework.ai.anthropic.toChatRespons": "org.springframework.ai.anthropic.toChatRespons",
            "org.springframework.ai.anthropic.fromMediaDat": "org.springframework.ai.anthropic.fromMediaDat",
            "org.springframework.ai.anthropic.createRequest": "org.springframework.ai.anthropic.createRequest",
            "org.springframework.ai.anthropic.getFunctionTools": "org.springframework.ai.anthropic.getFunctionTools",
            "org.springframework.ai.anthropic.withTy": "org.springframework.ai.anthropic.withTy",
            "org.springframework.ai.anthropic.withId": "org.springframework.ai.anthropic.withId",
            "org.springframework.ai.anthropic.withRol": "org.springframework.ai.anthropic.withRol",
            "org.springframework.ai.anthropic.withContent": "org.springframework.ai.anthropic.withContent",
            "org.springframework.ai.anthropic.withModel": "org.springframework.ai.anthropic.withModel",
            "org.springframework.ai.anthropic.withStopReason": "org.springframework.ai.anthropic.withStopReason",
            "org.springframework.ai.anthropic.withStopSequen": "org.springframework.ai.anthropic.withStopSequen",
            "org.springframework.ai.anthropic.withUs": "org.springframework.ai.anthropic.withUs",
            "org.springframework.ai.anthropic.build": "org.springframework.ai.anthropic.build",
            "org.springframework.ai.anthropic.doCreateToolResponseRequest": "org.springframework.ai.anthropic.doCreateToolResponseRequest",
            "org.springframework.ai.anthropic.doGetUserMessages": "org.springframework.ai.anthropic.doGetUserMessages",
            "org.springframework.ai.anthropic.doGetToolResponseMess": "org.springframework.ai.anthropic.doGetToolResponseMess",
            "org.springframework.ai.anthropic.doChatCompletion": "org.springframework.ai.anthropic.doChatCompletion",
            "org.springframework.ai.anthropic.SuppressWarnings": "org.springframework.ai.anthropic.SuppressWarnings",
            "org.springframework.ai.anthropic.logger": "org.springframework.ai.anthropic.logger",
            "org.springframework.ai.anthropic.DEFAULT_MODEL_NAME": "org.springframework.ai.anthropic.DEFAULT_MODEL_NAME",
            "org.springframework.ai.anthropic.DEFAULT_MAX_TOKENS": "org.springframework.ai.anthropic.DEFAULT_MAX_TOKENS",
            "org.springframework.ai.anthropic.DEFAULT_TEMPERATURE": "org.springframework.ai.anthropic.DEFAULT_TEMPERATURE",
            "org.springframework.ai.anthropic.anthropicApi": "org.springframework.ai.anthropic.anthropicApi",
            "org.springframework.ai.anthropic.defaultOptions": "org.springframework.ai.anthropic.defaultOptions",
            "org.springframework.ai.anthropic.retryTemplat": "org.springframework.ai.anthropic.retryTemplat",
            "org.springframework.ai.anthropic.ty": "org.springframework.ai.anthropic.ty",
            "org.springframework.ai.anthropic.id": "org.springframework.ai.anthropic.id",
            "org.springframework.ai.anthropic.rol": "org.springframework.ai.anthropic.rol",
            "org.springframework.ai.anthropic.content": "org.springframework.ai.anthropic.content",
            "org.springframework.ai.anthropic.model": "org.springframework.ai.anthropic.model",
            "org.springframework.ai.anthropic.stopReason": "org.springframework.ai.anthropic.stopReason",
            "org.springframework.ai.anthropic.stopSequen": "org.springframework.ai.anthropic.stopSequen",
            "org.springframework.ai.anthropic.us": "org.springframework.ai.anthropic.us"
        },
        "package": "package org.springframework.ai.anthropic;",
        "property_declarations": [
            "private Role role;",
            "private String model;",
            "private List<MediaContent> content;",
            "private String id;",
            "private String stopReason;",
            "public static final Float DEFAULT_TEMPERATURE = 0.8f;",
            "private static final Logger logger = LoggerFactory.getLogger(AnthropicChatClient.class);",
            "private AnthropicChatOptions defaultOptions;",
            "public static final Integer DEFAULT_MAX_TOKENS = 500;",
            "private String stopSequence;",
            "private Usage usage;",
            "public final AnthropicApi anthropicApi;",
            "private String type;",
            "public final RetryTemplate retryTemplate;",
            "public static final String DEFAULT_MODEL_NAME = AnthropicApi.ChatModel.CLAUDE_3_OPUS.getValue();"
        ],
        "functions": [
            {
                "name": "call",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "ChatCompletionRequest request = createRequest(prompt, false);\n\n\t\treturn this.retryTemplate.execute(ctx -> {\n\t\t\tResponseEntity<ChatCompletion> completionEntity = this.callWithFunctionSupport(request);\n\t\t\treturn toChatResponse(completionEntity.getBody());\n\t\t});",
                "is_abstract": "",
                "class_name": "AnthropicChatClient",
                "annotations": []
            },
            {
                "name": "stream",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "ChatCompletionRequest request = createRequest(prompt, true);\n\n\t\tFlux<StreamResponse> response = this.anthropicApi.chatCompletionStream(request);\n\n\t\tAtomicReference<ChatCompletionBuilder> chatCompletionReference = new AtomicReference<>();\n\n\t\t// https://docs.anthropic.com/claude/reference/messages-streaming\n\n\t\treturn response.map(chunk -> {\n\n\t\t\tif (chunk.type().equals(\"message_start\")) {\n\t\t\t\tchatCompletionReference.set(new ChatCompletionBuilder());\n\t\t\t\tchatCompletionReference.get()\n\t\t\t\t\t.withType(chunk.type())\n\t\t\t\t\t.withId(chunk.message().id())\n\t\t\t\t\t.withRole(chunk.message().role())\n\t\t\t\t\t.withModel(chunk.message().model())\n\t\t\t\t\t.withUsage(chunk.message().usage())\n\t\t\t\t\t.withContent(new ArrayList<>());\n\t\t\t}\n\t\t\telse if (chunk.type().equals(\"content_block_start\")) {\n\t\t\t\tvar content = new MediaContent(chunk.contentBlock().type(), null, chunk.contentBlock().text(),\n\t\t\t\t\t\tchunk.index());\n\t\t\t\tchatCompletionReference.get().withType(chunk.type()).withContent(List.of(content));\n\t\t\t}\n\t\t\telse if (chunk.type().equals(\"content_block_delta\")) {\n\t\t\t\tvar content = new MediaContent(Type.TEXT_DELTA, null, (String) chunk.delta().get(\"text\"),\n\t\t\t\t\t\tchunk.index());\n\t\t\t\tchatCompletionReference.get().withType(chunk.type()).withContent(List.of(content));\n\t\t\t}\n\t\t\telse if (chunk.type().equals(\"message_delta\")) {\n\n\t\t\t\tChatCompletion delta = ModelOptionsUtils.mapToClass(chunk.delta(), ChatCompletion.class);\n\n\t\t\t\tchatCompletionReference.get().withType(chunk.type());\n\t\t\t\tif (delta.id() != null) {\n\t\t\t\t\tchatCompletionReference.get().withId(delta.id());\n\t\t\t\t}\n\t\t\t\tif (delta.role() != null) {\n\t\t\t\t\tchatCompletionReference.get().withRole(delta.role());\n\t\t\t\t}\n\t\t\t\tif (delta.model() != null) {\n\t\t\t\t\tchatCompletionReference.get().withModel(delta.model());\n\t\t\t\t}\n\t\t\t\tif (delta.usage() != null) {\n\t\t\t\t\tchatCompletionReference.get().withUsage(delta.usage());\n\t\t\t\t}\n\t\t\t\tif (delta.content() != null) {\n\t\t\t\t\tchatCompletionReference.get().withContent(delta.content());\n\t\t\t\t}\n\t\t\t\tif (delta.stopReason() != null) {\n\t\t\t\t\tchatCompletionReference.get().withStopReason(delta.stopReason());\n\t\t\t\t}\n\t\t\t\tif (delta.stopSequence() != null) {\n\t\t\t\t\tchatCompletionReference.get().withStopSequence(delta.stopSequence());\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tchatCompletionReference.get().withType(chunk.type()).withContent(List.of());\n\t\t\t}\n\t\t\treturn chatCompletionReference.get().build();\n\n\t\t}).map(this::toChatResponse);",
                "is_abstract": "",
                "class_name": "AnthropicChatClient",
                "annotations": []
            },
            {
                "name": "toChatResponse",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (chatCompletion == null) {\n\t\t\tlogger.warn(\"Null chat completion returned\");\n\t\t\treturn new ChatResponse(List.of());\n\t\t}\n\n\t\tList<Generation> generations = chatCompletion.content().stream().map(content -> {\n\t\t\treturn new Generation(content.text(), Map.of())\n\t\t\t\t.withGenerationMetadata(ChatGenerationMetadata.from(chatCompletion.stopReason(), null));\n\t\t}).toList();\n\n\t\treturn new ChatResponse(generations, AnthropicChatResponseMetadata.from(chatCompletion));",
                "is_abstract": "",
                "class_name": "AnthropicChatClient",
                "annotations": []
            },
            {
                "name": "fromMediaData",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (mediaData instanceof byte[] bytes) {\n\t\t\treturn Base64.getEncoder().encodeToString(bytes);\n\t\t}\n\t\telse if (mediaData instanceof String text) {\n\t\t\treturn text;\n\t\t}\n\t\telse {\n\t\t\tthrow new IllegalArgumentException(\"Unsupported media data type: \" + mediaData.getClass().getSimpleName());\n\t\t}",
                "is_abstract": "",
                "class_name": "AnthropicChatClient",
                "annotations": []
            },
            {
                "name": "createRequest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Set<String> functionsForThisRequest = new HashSet<>();\n\n\t\tList<RequestMessage> userMessages = prompt.getInstructions()\n\t\t\t.stream()\n\t\t\t.filter(m -> m.getMessageType() != MessageType.SYSTEM)\n\t\t\t.map(m -> {\n\t\t\t\tList<MediaContent> contents = new ArrayList<>(List.of(new MediaContent(m.getContent())));\n\t\t\t\tif (!CollectionUtils.isEmpty(m.getMedia())) {\n\t\t\t\t\tList<MediaContent> mediaContent = m.getMedia()\n\t\t\t\t\t\t.stream()\n\t\t\t\t\t\t.map(media -> new MediaContent(media.getMimeType().toString(),\n\t\t\t\t\t\t\t\tthis.fromMediaData(media.getData())))\n\t\t\t\t\t\t.toList();\n\t\t\t\t\tcontents.addAll(mediaContent);\n\t\t\t\t}\n\t\t\t\treturn new RequestMessage(contents, Role.valueOf(m.getMessageType().name()));\n\t\t\t})\n\t\t\t.toList();\n\n\t\tString systemPrompt = prompt.getInstructions()\n\t\t\t.stream()\n\t\t\t.filter(m -> m.getMessageType() == MessageType.SYSTEM)\n\t\t\t.map(m -> m.getContent())\n\t\t\t.collect(Collectors.joining(System.lineSeparator()));\n\n\t\tChatCompletionRequest request = new ChatCompletionRequest(this.defaultOptions.getModel(), userMessages,\n\t\t\t\tsystemPrompt, this.defaultOptions.getMaxTokens(), this.defaultOptions.getTemperature(), stream);\n\n\t\tif (prompt.getOptions() != null) {\n\t\t\tif (prompt.getOptions() instanceof ChatOptions runtimeOptions) {\n\t\t\t\tAnthropicChatOptions updatedRuntimeOptions = ModelOptionsUtils.copyToTarget(runtimeOptions,\n\t\t\t\t\t\tChatOptions.class, AnthropicChatOptions.class);\n\n\t\t\t\tSet<String> promptEnabledFunctions = this.handleFunctionCallbackConfigurations(updatedRuntimeOptions,\n\t\t\t\t\t\tIS_RUNTIME_CALL);\n\t\t\t\tfunctionsForThisRequest.addAll(promptEnabledFunctions);\n\n\t\t\t\trequest = ModelOptionsUtils.merge(updatedRuntimeOptions, request, ChatCompletionRequest.class);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new IllegalArgumentException(\"Prompt options are not of type ChatOptions: \"\n\t\t\t\t\t\t+ prompt.getOptions().getClass().getSimpleName());\n\t\t\t}\n\t\t}\n\n\t\tif (this.defaultOptions != null) {\n\t\t\tSet<String> defaultEnabledFunctions = this.handleFunctionCallbackConfigurations(this.defaultOptions,\n\t\t\t\t\t!IS_RUNTIME_CALL);\n\t\t\tfunctionsForThisRequest.addAll(defaultEnabledFunctions);\n\n\t\t\trequest = ModelOptionsUtils.merge(request, this.defaultOptions, ChatCompletionRequest.class);\n\t\t}\n\n\t\tif (!CollectionUtils.isEmpty(functionsForThisRequest)) {\n\n\t\t\tList<AnthropicApi.Tool> tools = getFunctionTools(functionsForThisRequest);\n\n\t\t\trequest = ChatCompletionRequest.from(request).withTools(tools).build();\n\t\t}\n\n\t\treturn request;",
                "is_abstract": "",
                "class_name": "AnthropicChatClient",
                "annotations": []
            },
            {
                "name": "getFunctionTools",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.resolveFunctionCallbacks(functionNames).stream().map(functionCallback -> {\n\t\t\tvar description = functionCallback.getDescription();\n\t\t\tvar name = functionCallback.getName();\n\t\t\tString inputSchema = functionCallback.getInputTypeSchema();\n\t\t\treturn new AnthropicApi.Tool(name, description, ModelOptionsUtils.jsonToMap(inputSchema));\n\t\t}).toList();",
                "is_abstract": "",
                "class_name": "AnthropicChatClient",
                "annotations": []
            },
            {
                "name": "withType",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.type = type;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "AnthropicChatClient ChatCompletionBuilder",
                "annotations": []
            },
            {
                "name": "withId",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.id = id;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "AnthropicChatClient ChatCompletionBuilder",
                "annotations": []
            },
            {
                "name": "withRole",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.role = role;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "AnthropicChatClient ChatCompletionBuilder",
                "annotations": []
            },
            {
                "name": "withContent",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.content = content;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "AnthropicChatClient ChatCompletionBuilder",
                "annotations": []
            },
            {
                "name": "withModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.model = model;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "AnthropicChatClient ChatCompletionBuilder",
                "annotations": []
            },
            {
                "name": "withStopReason",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.stopReason = stopReason;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "AnthropicChatClient ChatCompletionBuilder",
                "annotations": []
            },
            {
                "name": "withStopSequence",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.stopSequence = stopSequence;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "AnthropicChatClient ChatCompletionBuilder",
                "annotations": []
            },
            {
                "name": "withUsage",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.usage = usage;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "AnthropicChatClient ChatCompletionBuilder",
                "annotations": []
            },
            {
                "name": "build",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new ChatCompletion(this.id, this.type, this.role, this.content, this.model, this.stopReason,\n\t\t\t\t\tthis.stopSequence, this.usage);",
                "is_abstract": "",
                "class_name": "AnthropicChatClient ChatCompletionBuilder",
                "annotations": []
            },
            {
                "name": "doCreateToolResponseRequest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "List<MediaContent> toolToUseList = responseMessage.content()\n\t\t\t.stream()\n\t\t\t.filter(c -> c.type() == MediaContent.Type.TOOL_USE)\n\t\t\t.toList();\n\n\t\tList<MediaContent> toolResults = new ArrayList<>();\n\n\t\tfor (MediaContent toolToUse : toolToUseList) {\n\n\t\t\tvar functionCallId = toolToUse.id();\n\t\t\tvar functionName = toolToUse.name();\n\t\t\tvar functionArguments = toolToUse.input();\n\n\t\t\tif (!this.functionCallbackRegister.containsKey(functionName)) {\n\t\t\t\tthrow new IllegalStateException(\"No function callback found for function name: \" + functionName);\n\t\t\t}\n\n\t\t\tString functionResponse = this.functionCallbackRegister.get(functionName)\n\t\t\t\t.call(ModelOptionsUtils.toJsonString(functionArguments));\n\n\t\t\ttoolResults.add(new MediaContent(Type.TOOL_RESULT, functionCallId, functionResponse));\n\t\t}\n\n\t\t// Add the function response to the conversation.\n\t\tconversationHistory.add(new RequestMessage(toolResults, Role.USER));\n\n\t\t// Recursively call chatCompletionWithTools until the model doesn't call a\n\t\t// functions anymore.\n\t\treturn ChatCompletionRequest.from(previousRequest).withMessages(conversationHistory).build();",
                "is_abstract": "",
                "class_name": "AnthropicChatClient ChatCompletionBuilder",
                "annotations": []
            },
            {
                "name": "doGetUserMessages",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return request.messages();",
                "is_abstract": "",
                "class_name": "AnthropicChatClient ChatCompletionBuilder",
                "annotations": []
            },
            {
                "name": "doGetToolResponseMessage",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new RequestMessage(response.getBody().content(), Role.ASSISTANT);",
                "is_abstract": "",
                "class_name": "AnthropicChatClient ChatCompletionBuilder",
                "annotations": []
            },
            {
                "name": "doChatCompletion",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.anthropicApi.chatCompletionEntity(request);",
                "is_abstract": "",
                "class_name": "AnthropicChatClient ChatCompletionBuilder",
                "annotations": []
            },
            {
                "name": "SuppressWarnings",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (response == null || response.getBody() == null || CollectionUtils.isEmpty(response.getBody().content())) {\n\t\t\treturn false;\n\t\t}\n\t\treturn response.getBody().content().stream().anyMatch(content -> content.type() == MediaContent.Type.TOOL_USE);",
                "is_abstract": "",
                "class_name": "AnthropicChatClient ChatCompletionBuilder",
                "annotations": [
                    "@SuppressWarnings(\"null\")"
                ]
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-anthropic/src/main/java/org/springframework/ai/anthropic/AnthropicChatOptions.java",
        "class_names": [
            "Builder",
            "AnthropicChatOptions"
        ],
        "imports": "import java.util.ArrayList;\nimport java.util.List;\nimport com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport org.springframework.ai.anthropic.api.AnthropicApi.ChatCompletionRequest;\nimport org.springframework.util.Assert;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport org.springframework.ai.model.function.FunctionCallingOptions;\nimport org.springframework.ai.model.function.FunctionCallback;\nimport com.fasterxml.jackson.annotation.JsonIgnore;\nimport org.springframework.boot.context.properties.NestedConfigurationProperty;\nimport org.springframework.ai.chat.prompt.ChatOptions;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport java.util.Set;\nimport java.util.HashSet;",
        "package_import_paths": {
            "org.springframework.ai.anthropic.AnthropicChatOptions": "org.springframework.ai.anthropic.AnthropicChatOptions",
            "org.springframework.ai.anthropic.Builder": "org.springframework.ai.anthropic.Builder",
            "org.springframework.ai.anthropic.builder": "org.springframework.ai.anthropic.builder",
            "org.springframework.ai.anthropic.withModel": "org.springframework.ai.anthropic.withModel",
            "org.springframework.ai.anthropic.withMaxTokens": "org.springframework.ai.anthropic.withMaxTokens",
            "org.springframework.ai.anthropic.withMetadat": "org.springframework.ai.anthropic.withMetadat",
            "org.springframework.ai.anthropic.withStopSequences": "org.springframework.ai.anthropic.withStopSequences",
            "org.springframework.ai.anthropic.withTemperatur": "org.springframework.ai.anthropic.withTemperatur",
            "org.springframework.ai.anthropic.withTopP": "org.springframework.ai.anthropic.withTopP",
            "org.springframework.ai.anthropic.withTopK": "org.springframework.ai.anthropic.withTopK",
            "org.springframework.ai.anthropic.withFunctionCallbacks": "org.springframework.ai.anthropic.withFunctionCallbacks",
            "org.springframework.ai.anthropic.withFunctions": "org.springframework.ai.anthropic.withFunctions",
            "org.springframework.ai.anthropic.withFunction": "org.springframework.ai.anthropic.withFunction",
            "org.springframework.ai.anthropic.build": "org.springframework.ai.anthropic.build",
            "org.springframework.ai.anthropic.getModel": "org.springframework.ai.anthropic.getModel",
            "org.springframework.ai.anthropic.setModel": "org.springframework.ai.anthropic.setModel",
            "org.springframework.ai.anthropic.getMaxTokens": "org.springframework.ai.anthropic.getMaxTokens",
            "org.springframework.ai.anthropic.setMaxTokens": "org.springframework.ai.anthropic.setMaxTokens",
            "org.springframework.ai.anthropic.getMetadat": "org.springframework.ai.anthropic.getMetadat",
            "org.springframework.ai.anthropic.setMetadat": "org.springframework.ai.anthropic.setMetadat",
            "org.springframework.ai.anthropic.getStopSequences": "org.springframework.ai.anthropic.getStopSequences",
            "org.springframework.ai.anthropic.setStopSequences": "org.springframework.ai.anthropic.setStopSequences",
            "org.springframework.ai.anthropic.getTemperatur": "org.springframework.ai.anthropic.getTemperatur",
            "org.springframework.ai.anthropic.setTemperatur": "org.springframework.ai.anthropic.setTemperatur",
            "org.springframework.ai.anthropic.getTopP": "org.springframework.ai.anthropic.getTopP",
            "org.springframework.ai.anthropic.setTopP": "org.springframework.ai.anthropic.setTopP",
            "org.springframework.ai.anthropic.getTopK": "org.springframework.ai.anthropic.getTopK",
            "org.springframework.ai.anthropic.setTopK": "org.springframework.ai.anthropic.setTopK",
            "org.springframework.ai.anthropic.getFunctionCallbacks": "org.springframework.ai.anthropic.getFunctionCallbacks",
            "org.springframework.ai.anthropic.setFunctionCallbacks": "org.springframework.ai.anthropic.setFunctionCallbacks",
            "org.springframework.ai.anthropic.getFunctions": "org.springframework.ai.anthropic.getFunctions",
            "org.springframework.ai.anthropic.setFunctions": "org.springframework.ai.anthropic.setFunctions",
            "org.springframework.ai.anthropic.model": "org.springframework.ai.anthropic.model",
            "org.springframework.ai.anthropic.maxTokens": "org.springframework.ai.anthropic.maxTokens",
            "org.springframework.ai.anthropic.metadat": "org.springframework.ai.anthropic.metadat",
            "org.springframework.ai.anthropic.stopSequences": "org.springframework.ai.anthropic.stopSequences",
            "org.springframework.ai.anthropic.temperatur": "org.springframework.ai.anthropic.temperatur",
            "org.springframework.ai.anthropic.topP": "org.springframework.ai.anthropic.topP",
            "org.springframework.ai.anthropic.topK": "org.springframework.ai.anthropic.topK",
            "org.springframework.ai.anthropic.privat": "org.springframework.ai.anthropic.privat",
            "org.springframework.ai.anthropic.options": "org.springframework.ai.anthropic.options"
        },
        "package": "package org.springframework.ai.anthropic;",
        "property_declarations": [
            "private @JsonProperty(\"top_k\") Integer topK;",
            "private @JsonProperty(\"model\") String model;",
            "private @JsonProperty(\"temperature\") Float temperature;",
            "private @JsonProperty(\"stop_sequences\") List<String> stopSequences;",
            "@NestedConfigurationProperty\n\t@JsonIgnore\n\tprivate List<FunctionCallback> functionCallbacks = new ArrayList<>();",
            "@NestedConfigurationProperty\n\t@JsonIgnore\n\tprivate Set<String> functions = new HashSet<>();",
            "private final AnthropicChatOptions options = new AnthropicChatOptions();",
            "private @JsonProperty(\"metadata\") ChatCompletionRequest.Metadata metadata;",
            "private @JsonProperty(\"max_tokens\") Integer maxTokens;",
            "private @JsonProperty(\"top_p\") Float topP;"
        ],
        "functions": [
            {
                "name": "builder",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Builder();",
                "is_abstract": "",
                "class_name": "AnthropicChatOptions",
                "annotations": []
            },
            {
                "name": "withModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.model = model;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "AnthropicChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withMaxTokens",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.maxTokens = maxTokens;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "AnthropicChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withMetadata",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.metadata = metadata;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "AnthropicChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withStopSequences",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.stopSequences = stopSequences;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "AnthropicChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withTemperature",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.temperature = temperature;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "AnthropicChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withTopP",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.topP = topP;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "AnthropicChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withTopK",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.topK = topK;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "AnthropicChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withFunctionCallbacks",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.functionCallbacks = functionCallbacks;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "AnthropicChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withFunctions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(functionNames, \"Function names must not be null\");\n\t\t\tthis.options.functions = functionNames;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "AnthropicChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withFunction",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.hasText(functionName, \"Function name must not be empty\");\n\t\t\tthis.options.functions.add(functionName);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "AnthropicChatOptions Builder",
                "annotations": []
            },
            {
                "name": "build",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.options;",
                "is_abstract": "",
                "class_name": "AnthropicChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return model;",
                "is_abstract": "",
                "class_name": "AnthropicChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.model = model;",
                "is_abstract": "",
                "class_name": "AnthropicChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getMaxTokens",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.maxTokens;",
                "is_abstract": "",
                "class_name": "AnthropicChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setMaxTokens",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.maxTokens = maxTokens;",
                "is_abstract": "",
                "class_name": "AnthropicChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getMetadata",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.metadata;",
                "is_abstract": "",
                "class_name": "AnthropicChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setMetadata",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.metadata = metadata;",
                "is_abstract": "",
                "class_name": "AnthropicChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getStopSequences",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.stopSequences;",
                "is_abstract": "",
                "class_name": "AnthropicChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setStopSequences",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.stopSequences = stopSequences;",
                "is_abstract": "",
                "class_name": "AnthropicChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getTemperature",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.temperature;",
                "is_abstract": "",
                "class_name": "AnthropicChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setTemperature",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.temperature = temperature;",
                "is_abstract": "",
                "class_name": "AnthropicChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getTopP",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.topP;",
                "is_abstract": "",
                "class_name": "AnthropicChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setTopP",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.topP = topP;",
                "is_abstract": "",
                "class_name": "AnthropicChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getTopK",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.topK;",
                "is_abstract": "",
                "class_name": "AnthropicChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setTopK",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.topK = topK;",
                "is_abstract": "",
                "class_name": "AnthropicChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getFunctionCallbacks",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.functionCallbacks;",
                "is_abstract": "",
                "class_name": "AnthropicChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setFunctionCallbacks",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(functionCallbacks, \"FunctionCallbacks must not be null\");\n\t\tthis.functionCallbacks = functionCallbacks;",
                "is_abstract": "",
                "class_name": "AnthropicChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getFunctions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.functions;",
                "is_abstract": "",
                "class_name": "AnthropicChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setFunctions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(functions, \"Function must not be null\");\n\t\tthis.functions = functions;",
                "is_abstract": "",
                "class_name": "AnthropicChatOptions Builder",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-anthropic/src/main/java/org/springframework/ai/anthropic/api/AnthropicApi.java",
        "class_names": [
            "ChatCompletionRequestBuilder",
            "AnthropicApi"
        ],
        "imports": "import org.springframework.ai.retry.RetryUtils;\nimport java.util.List;\nimport com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport org.springframework.util.Assert;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport reactor.core.publisher.Flux;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.reactive.function.client.WebClient;\nimport java.util.Map;\nimport java.util.function.Predicate;\nimport org.springframework.ai.model.ModelOptionsUtils;\nimport org.springframework.web.client.RestClient;\nimport java.util.function.Consumer;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.MediaType;\nimport org.springframework.web.client.ResponseErrorHandler;\nimport reactor.core.publisher.Mono;",
        "package_import_paths": {
            "org.springframework.ai.anthropic.api.AnthropicApi": "org.springframework.ai.anthropic.api.AnthropicApi",
            "org.springframework.ai.anthropic.api.ChatCompletionRequestBuilder": "org.springframework.ai.anthropic.api.ChatCompletionRequestBuilder",
            "org.springframework.ai.anthropic.api.getValu": "org.springframework.ai.anthropic.api.getValu",
            "org.springframework.ai.anthropic.api.builder": "org.springframework.ai.anthropic.api.builder",
            "org.springframework.ai.anthropic.api.from": "org.springframework.ai.anthropic.api.from",
            "org.springframework.ai.anthropic.api.withModel": "org.springframework.ai.anthropic.api.withModel",
            "org.springframework.ai.anthropic.api.withMessages": "org.springframework.ai.anthropic.api.withMessages",
            "org.springframework.ai.anthropic.api.withSystem": "org.springframework.ai.anthropic.api.withSystem",
            "org.springframework.ai.anthropic.api.withMaxTokens": "org.springframework.ai.anthropic.api.withMaxTokens",
            "org.springframework.ai.anthropic.api.withMetadat": "org.springframework.ai.anthropic.api.withMetadat",
            "org.springframework.ai.anthropic.api.withStopSequences": "org.springframework.ai.anthropic.api.withStopSequences",
            "org.springframework.ai.anthropic.api.withStream": "org.springframework.ai.anthropic.api.withStream",
            "org.springframework.ai.anthropic.api.withTemperatur": "org.springframework.ai.anthropic.api.withTemperatur",
            "org.springframework.ai.anthropic.api.withTopP": "org.springframework.ai.anthropic.api.withTopP",
            "org.springframework.ai.anthropic.api.withTopK": "org.springframework.ai.anthropic.api.withTopK",
            "org.springframework.ai.anthropic.api.withTools": "org.springframework.ai.anthropic.api.withTools",
            "org.springframework.ai.anthropic.api.build": "org.springframework.ai.anthropic.api.build",
            "org.springframework.ai.anthropic.api.chatCompletionEntity": "org.springframework.ai.anthropic.api.chatCompletionEntity",
            "org.springframework.ai.anthropic.api.chatCompletionStream": "org.springframework.ai.anthropic.api.chatCompletionStream",
            "org.springframework.ai.anthropic.api.HEADER_X_API_KEY": "org.springframework.ai.anthropic.api.HEADER_X_API_KEY",
            "org.springframework.ai.anthropic.api.HEADER_ANTHROPIC_VERSION": "org.springframework.ai.anthropic.api.HEADER_ANTHROPIC_VERSION",
            "org.springframework.ai.anthropic.api.HEADER_ANTHROPIC_BETA": "org.springframework.ai.anthropic.api.HEADER_ANTHROPIC_BETA",
            "org.springframework.ai.anthropic.api.DEFAULT_BASE_URL": "org.springframework.ai.anthropic.api.DEFAULT_BASE_URL",
            "org.springframework.ai.anthropic.api.DEFAULT_ANTHROPIC_VERSION": "org.springframework.ai.anthropic.api.DEFAULT_ANTHROPIC_VERSION",
            "org.springframework.ai.anthropic.api.DEFAULT_ANTHROPIC_BETA_VERSION": "org.springframework.ai.anthropic.api.DEFAULT_ANTHROPIC_BETA_VERSION",
            "org.springframework.ai.anthropic.api.SSE_DONE_PREDICATE": "org.springframework.ai.anthropic.api.SSE_DONE_PREDICATE",
            "org.springframework.ai.anthropic.api.restClient": "org.springframework.ai.anthropic.api.restClient",
            "org.springframework.ai.anthropic.api.webClient": "org.springframework.ai.anthropic.api.webClient",
            "org.springframework.ai.anthropic.api.valu": "org.springframework.ai.anthropic.api.valu",
            "org.springframework.ai.anthropic.api.model": "org.springframework.ai.anthropic.api.model",
            "org.springframework.ai.anthropic.api.messages": "org.springframework.ai.anthropic.api.messages",
            "org.springframework.ai.anthropic.api.system": "org.springframework.ai.anthropic.api.system",
            "org.springframework.ai.anthropic.api.maxTokens": "org.springframework.ai.anthropic.api.maxTokens",
            "org.springframework.ai.anthropic.api.ChatCompletionRequest": "org.springframework.ai.anthropic.api.ChatCompletionRequest",
            "org.springframework.ai.anthropic.api.stopSequences": "org.springframework.ai.anthropic.api.stopSequences",
            "org.springframework.ai.anthropic.api.stream": "org.springframework.ai.anthropic.api.stream",
            "org.springframework.ai.anthropic.api.temperatur": "org.springframework.ai.anthropic.api.temperatur",
            "org.springframework.ai.anthropic.api.topP": "org.springframework.ai.anthropic.api.topP",
            "org.springframework.ai.anthropic.api.topK": "org.springframework.ai.anthropic.api.topK",
            "org.springframework.ai.anthropic.api.tools": "org.springframework.ai.anthropic.api.tools"
        },
        "package": "package org.springframework.ai.anthropic.api;",
        "property_declarations": [
            "private ChatCompletionRequest.Metadata metadata;",
            "private Float topP;",
            "private Float temperature;",
            "private static final String HEADER_ANTHROPIC_VERSION = \"anthropic-version\";",
            "private List<Tool> tools;",
            "private static final Predicate<String> SSE_DONE_PREDICATE = \"[DONE]\"::equals;",
            "public static final String DEFAULT_ANTHROPIC_BETA_VERSION = \"tools-2024-04-04\";",
            "private List<RequestMessage> messages;",
            "private Integer maxTokens;",
            "private WebClient webClient;",
            "private static final String HEADER_ANTHROPIC_BETA = \"anthropic-beta\";",
            "public static final String DEFAULT_BASE_URL = \"https://api.anthropic.com\";",
            "private String model;",
            "public static final String DEFAULT_ANTHROPIC_VERSION = \"2023-06-01\";",
            "private Integer topK;",
            "private static final String HEADER_X_API_KEY = \"x-api-key\";",
            "private List<String> stopSequences;",
            "private final RestClient restClient;",
            "public final String value;",
            "private String system;",
            "private Boolean stream = false;"
        ],
        "functions": [
            {
                "name": "getValue",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.value;",
                "is_abstract": "",
                "class_name": "AnthropicApi",
                "annotations": [
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"model\")",
                    "@JsonProperty(\"messages\")",
                    "@JsonProperty(\"system\")",
                    "@JsonProperty(\"max_tokens\")",
                    "@JsonProperty(\"metadata\")",
                    "@JsonProperty(\"stop_sequences\")",
                    "@JsonProperty(\"stream\")",
                    "@JsonProperty(\"temperature\")",
                    "@JsonProperty(\"top_p\")",
                    "@JsonProperty(\"top_k\")",
                    "@JsonProperty(\"tools\")",
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"user_id\")"
                ]
            },
            {
                "name": "builder",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new ChatCompletionRequestBuilder();",
                "is_abstract": "",
                "class_name": "AnthropicApi",
                "annotations": []
            },
            {
                "name": "from",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new ChatCompletionRequestBuilder(request);",
                "is_abstract": "",
                "class_name": "AnthropicApi",
                "annotations": []
            },
            {
                "name": "withModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.model = model.getValue();\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "AnthropicApi ChatCompletionRequestBuilder",
                "annotations": []
            },
            {
                "name": "withMessages",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.messages = messages;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "AnthropicApi ChatCompletionRequestBuilder",
                "annotations": []
            },
            {
                "name": "withSystem",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.system = system;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "AnthropicApi ChatCompletionRequestBuilder",
                "annotations": []
            },
            {
                "name": "withMaxTokens",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.maxTokens = maxTokens;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "AnthropicApi ChatCompletionRequestBuilder",
                "annotations": []
            },
            {
                "name": "withMetadata",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.metadata = metadata;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "AnthropicApi ChatCompletionRequestBuilder",
                "annotations": []
            },
            {
                "name": "withStopSequences",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.stopSequences = stopSequences;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "AnthropicApi ChatCompletionRequestBuilder",
                "annotations": []
            },
            {
                "name": "withStream",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.stream = stream;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "AnthropicApi ChatCompletionRequestBuilder",
                "annotations": []
            },
            {
                "name": "withTemperature",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.temperature = temperature;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "AnthropicApi ChatCompletionRequestBuilder",
                "annotations": []
            },
            {
                "name": "withTopP",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.topP = topP;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "AnthropicApi ChatCompletionRequestBuilder",
                "annotations": []
            },
            {
                "name": "withTopK",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.topK = topK;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "AnthropicApi ChatCompletionRequestBuilder",
                "annotations": []
            },
            {
                "name": "withTools",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.tools = tools;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "AnthropicApi ChatCompletionRequestBuilder",
                "annotations": []
            },
            {
                "name": "build",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new ChatCompletionRequest(model, messages, system, maxTokens, metadata, stopSequences, stream,\n\t\t\t\t\ttemperature, topP, topK, tools);",
                "is_abstract": "",
                "class_name": "AnthropicApi ChatCompletionRequestBuilder",
                "annotations": [
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"content\")",
                    "@JsonProperty(\"role\")",
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"type\")",
                    "@JsonProperty(\"source\")",
                    "@JsonProperty(\"text\")",
                    "@JsonProperty(\"index\")",
                    "@JsonProperty(\"id\")",
                    "@JsonProperty(\"name\")",
                    "@JsonProperty(\"input\")",
                    "@JsonProperty(\"tool_use_id\")",
                    "@JsonProperty(\"content\")",
                    "@JsonProperty(\"tool_use\")",
                    "@JsonProperty(\"tool_result\")",
                    "@JsonProperty(\"text\")",
                    "@JsonProperty(\"text_delta\")",
                    "@JsonProperty(\"image\")",
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"type\")",
                    "@JsonProperty(\"media_type\")",
                    "@JsonProperty(\"data\")",
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"name\")",
                    "@JsonProperty(\"description\")",
                    "@JsonProperty(\"input_schema\")",
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"id\")",
                    "@JsonProperty(\"type\")",
                    "@JsonProperty(\"role\")",
                    "@JsonProperty(\"content\")",
                    "@JsonProperty(\"model\")",
                    "@JsonProperty(\"stop_reason\")",
                    "@JsonProperty(\"stop_sequence\")",
                    "@JsonProperty(\"usage\")",
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"input_tokens\")",
                    "@JsonProperty(\"output_tokens\")",
                    "@JsonProperty(\"user\")",
                    "@JsonProperty(\"assistant\")",
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"type\")",
                    "@JsonProperty(\"index\")",
                    "@JsonProperty(\"message\")",
                    "@JsonProperty(\"content_block\")",
                    "@JsonProperty(\"delta\")"
                ]
            },
            {
                "name": "chatCompletionEntity",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(chatRequest, \"The request body can not be null.\");\n\t\tAssert.isTrue(!chatRequest.stream(), \"Request must set the steam property to false.\");\n\n\t\treturn this.restClient.post().uri(\"/v1/messages\").body(chatRequest).retrieve().toEntity(ChatCompletion.class);",
                "is_abstract": "",
                "class_name": "AnthropicApi ChatCompletionRequestBuilder",
                "annotations": []
            },
            {
                "name": "chatCompletionStream",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(chatRequest, \"The request body can not be null.\");\n\t\tAssert.isTrue(chatRequest.stream(), \"Request must set the steam property to true.\");\n\n\t\treturn this.webClient.post()\n\t\t\t.uri(\"/v1/messages\")\n\t\t\t.body(Mono.just(chatRequest), ChatCompletionRequest.class)\n\t\t\t.retrieve()\n\t\t\t.bodyToFlux(String.class)\n\t\t\t.takeUntil(SSE_DONE_PREDICATE)\n\t\t\t.filter(SSE_DONE_PREDICATE.negate())\n\t\t\t.map(content -> ModelOptionsUtils.jsonToObject(content, StreamResponse.class));",
                "is_abstract": "",
                "class_name": "AnthropicApi ChatCompletionRequestBuilder",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-anthropic/src/main/java/org/springframework/ai/anthropic/metadata/AnthropicRateLimit.java",
        "class_names": [
            "AnthropicRateLimit"
        ],
        "imports": "import org.springframework.ai.chat.metadata.RateLimit;\nimport java.time.Duration;",
        "package_import_paths": {
            "org.springframework.ai.anthropic.metadata.AnthropicRateLimit": "org.springframework.ai.anthropic.metadata.AnthropicRateLimit",
            "org.springframework.ai.anthropic.metadata.getRequestsLimit": "org.springframework.ai.anthropic.metadata.getRequestsLimit",
            "org.springframework.ai.anthropic.metadata.getTokensLimit": "org.springframework.ai.anthropic.metadata.getTokensLimit",
            "org.springframework.ai.anthropic.metadata.getRequestsRemainin": "org.springframework.ai.anthropic.metadata.getRequestsRemainin",
            "org.springframework.ai.anthropic.metadata.getTokensRemainin": "org.springframework.ai.anthropic.metadata.getTokensRemainin",
            "org.springframework.ai.anthropic.metadata.getRequestsReset": "org.springframework.ai.anthropic.metadata.getRequestsReset",
            "org.springframework.ai.anthropic.metadata.getTokensReset": "org.springframework.ai.anthropic.metadata.getTokensReset",
            "org.springframework.ai.anthropic.metadata.toStrin": "org.springframework.ai.anthropic.metadata.toStrin",
            "org.springframework.ai.anthropic.metadata.RATE_LIMIT_STRING": "org.springframework.ai.anthropic.metadata.RATE_LIMIT_STRING",
            "org.springframework.ai.anthropic.metadata.requestsLimit": "org.springframework.ai.anthropic.metadata.requestsLimit",
            "org.springframework.ai.anthropic.metadata.requestsRemainin": "org.springframework.ai.anthropic.metadata.requestsRemainin",
            "org.springframework.ai.anthropic.metadata.tokensLimit": "org.springframework.ai.anthropic.metadata.tokensLimit",
            "org.springframework.ai.anthropic.metadata.tokensRemainin": "org.springframework.ai.anthropic.metadata.tokensRemainin",
            "org.springframework.ai.anthropic.metadata.requestsReset": "org.springframework.ai.anthropic.metadata.requestsReset",
            "org.springframework.ai.anthropic.metadata.tokensReset": "org.springframework.ai.anthropic.metadata.tokensReset"
        },
        "package": "package org.springframework.ai.anthropic.metadata;",
        "property_declarations": [
            "private static final String RATE_LIMIT_STRING = \"{ @type: %1$s, requestsLimit: %2$s, requestsRemaining: %3$s, requestsReset: %4$s, tokensLimit: %5$s; tokensRemaining: %6$s; tokensReset: %7$s }\";",
            "private final Long requestsRemaining;",
            "private final Long tokensRemaining;",
            "private final Duration tokensReset;",
            "private final Long requestsLimit;",
            "private final Duration requestsReset;",
            "private final Long tokensLimit;"
        ],
        "functions": [
            {
                "name": "getRequestsLimit",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.requestsLimit;",
                "is_abstract": "",
                "class_name": "AnthropicRateLimit",
                "annotations": []
            },
            {
                "name": "getTokensLimit",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.tokensLimit;",
                "is_abstract": "",
                "class_name": "AnthropicRateLimit",
                "annotations": []
            },
            {
                "name": "getRequestsRemaining",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.requestsRemaining;",
                "is_abstract": "",
                "class_name": "AnthropicRateLimit",
                "annotations": []
            },
            {
                "name": "getTokensRemaining",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.tokensRemaining;",
                "is_abstract": "",
                "class_name": "AnthropicRateLimit",
                "annotations": []
            },
            {
                "name": "getRequestsReset",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.requestsReset;",
                "is_abstract": "",
                "class_name": "AnthropicRateLimit",
                "annotations": []
            },
            {
                "name": "getTokensReset",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.tokensReset;",
                "is_abstract": "",
                "class_name": "AnthropicRateLimit",
                "annotations": []
            },
            {
                "name": "toString",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return RATE_LIMIT_STRING.formatted(getClass().getName(), getRequestsLimit(), getRequestsRemaining(),\n\t\t\t\tgetRequestsReset(), getTokensLimit(), getTokensRemaining(), getTokensReset());",
                "is_abstract": "",
                "class_name": "AnthropicRateLimit",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-anthropic/src/main/java/org/springframework/ai/anthropic/metadata/AnthropicUsage.java",
        "class_names": [
            "AnthropicUsage"
        ],
        "imports": "import org.springframework.ai.chat.metadata.Usage;\nimport org.springframework.ai.anthropic.api.AnthropicApi;\nimport org.springframework.util.Assert;",
        "package_import_paths": {
            "org.springframework.ai.anthropic.metadata.AnthropicUs": "org.springframework.ai.anthropic.metadata.AnthropicUs",
            "org.springframework.ai.anthropic.metadata.from": "org.springframework.ai.anthropic.metadata.from",
            "org.springframework.ai.anthropic.metadata.getUs": "org.springframework.ai.anthropic.metadata.getUs",
            "org.springframework.ai.anthropic.metadata.getPromptTokens": "org.springframework.ai.anthropic.metadata.getPromptTokens",
            "org.springframework.ai.anthropic.metadata.getGenerationTokens": "org.springframework.ai.anthropic.metadata.getGenerationTokens",
            "org.springframework.ai.anthropic.metadata.getTotalTokens": "org.springframework.ai.anthropic.metadata.getTotalTokens",
            "org.springframework.ai.anthropic.metadata.toStrin": "org.springframework.ai.anthropic.metadata.toStrin",
            "org.springframework.ai.anthropic.metadata.AnthropicApi": "org.springframework.ai.anthropic.metadata.AnthropicApi"
        },
        "package": "package org.springframework.ai.anthropic.metadata;",
        "property_declarations": [
            "private final AnthropicApi.Usage usage;"
        ],
        "functions": [
            {
                "name": "from",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new AnthropicUsage(usage);",
                "is_abstract": "",
                "class_name": "AnthropicUsage",
                "annotations": []
            },
            {
                "name": "getUsage",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.usage;",
                "is_abstract": "",
                "class_name": "AnthropicUsage",
                "annotations": []
            },
            {
                "name": "getPromptTokens",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return getUsage().inputTokens().longValue();",
                "is_abstract": "",
                "class_name": "AnthropicUsage",
                "annotations": []
            },
            {
                "name": "getGenerationTokens",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return getUsage().outputTokens().longValue();",
                "is_abstract": "",
                "class_name": "AnthropicUsage",
                "annotations": []
            },
            {
                "name": "getTotalTokens",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.getPromptTokens() + this.getGenerationTokens();",
                "is_abstract": "",
                "class_name": "AnthropicUsage",
                "annotations": []
            },
            {
                "name": "toString",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return getUsage().toString();",
                "is_abstract": "",
                "class_name": "AnthropicUsage",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-anthropic/src/main/java/org/springframework/ai/anthropic/metadata/AnthropicChatResponseMetadata.java",
        "class_names": [
            "AnthropicChatResponseMetadata"
        ],
        "imports": "import org.springframework.lang.Nullable;\nimport org.springframework.util.Assert;\nimport org.springframework.ai.anthropic.api.AnthropicApi;\nimport org.springframework.ai.chat.metadata.*;",
        "package_import_paths": {
            "org.springframework.ai.anthropic.metadata.AnthropicChatResponseMetadat": "org.springframework.ai.anthropic.metadata.AnthropicChatResponseMetadat",
            "org.springframework.ai.anthropic.metadata.from": "org.springframework.ai.anthropic.metadata.from",
            "org.springframework.ai.anthropic.metadata.getId": "org.springframework.ai.anthropic.metadata.getId",
            "org.springframework.ai.anthropic.metadata.getRateLimit": "org.springframework.ai.anthropic.metadata.getRateLimit",
            "org.springframework.ai.anthropic.metadata.getUs": "org.springframework.ai.anthropic.metadata.getUs",
            "org.springframework.ai.anthropic.metadata.withRateLimit": "org.springframework.ai.anthropic.metadata.withRateLimit",
            "org.springframework.ai.anthropic.metadata.toStrin": "org.springframework.ai.anthropic.metadata.toStrin",
            "org.springframework.ai.anthropic.metadata.AI_METADATA_STRING": "org.springframework.ai.anthropic.metadata.AI_METADATA_STRING",
            "org.springframework.ai.anthropic.metadata.id": "org.springframework.ai.anthropic.metadata.id",
            "org.springframework.ai.anthropic.metadata.privat": "org.springframework.ai.anthropic.metadata.privat",
            "org.springframework.ai.anthropic.metadata.us": "org.springframework.ai.anthropic.metadata.us"
        },
        "package": "package org.springframework.ai.anthropic.metadata;",
        "property_declarations": [
            "private final String id;",
            "protected static final String AI_METADATA_STRING = \"{ @type: %1$s, id: %2$s, usage: %3$s, rateLimit: %4$s }\";",
            "private final Usage usage;",
            "@Nullable\n\tprivate RateLimit rateLimit;"
        ],
        "functions": [
            {
                "name": "from",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(result, \"Anthropic ChatCompletionResult must not be null\");\n\t\tAnthropicUsage usage = AnthropicUsage.from(result.usage());\n\t\treturn new AnthropicChatResponseMetadata(result.id(), usage);",
                "is_abstract": "",
                "class_name": "AnthropicChatResponseMetadata",
                "annotations": []
            },
            {
                "name": "getId",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.id;",
                "is_abstract": "",
                "class_name": "AnthropicChatResponseMetadata",
                "annotations": []
            },
            {
                "name": "getRateLimit",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "RateLimit rl = this.rateLimit;\n\t\treturn rl != null ? rl : new EmptyRateLimit();",
                "is_abstract": "",
                "class_name": "AnthropicChatResponseMetadata",
                "annotations": []
            },
            {
                "name": "getUsage",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Usage usage = this.usage;\n\t\treturn usage != null ? usage : new EmptyUsage();",
                "is_abstract": "",
                "class_name": "AnthropicChatResponseMetadata",
                "annotations": []
            },
            {
                "name": "withRateLimit",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.rateLimit = rateLimit;\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "AnthropicChatResponseMetadata",
                "annotations": []
            },
            {
                "name": "toString",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return AI_METADATA_STRING.formatted(getClass().getName(), getId(), getUsage(), getRateLimit());",
                "is_abstract": "",
                "class_name": "AnthropicChatResponseMetadata",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-anthropic/src/main/java/org/springframework/ai/anthropic/aot/AnthropicRuntimeHints.java",
        "class_names": [
            "AnthropicRuntimeHints"
        ],
        "imports": "import org.springframework.lang.Nullable;\nimport org.springframework.aot.hint.MemberCategory;\nimport org.springframework.aot.hint.RuntimeHints;\nimport org.springframework.aot.hint.RuntimeHintsRegistrar;\nimport org.springframework.ai.anthropic.api.AnthropicApi;\nimport org.springframework.lang.NonNull;\nimport static org.springframework.ai.aot.AiRuntimeHints.findJsonAnnotatedClassesInPackage;",
        "package_import_paths": {
            "org.springframework.ai.anthropic.aot.AnthropicRuntimeHints": "org.springframework.ai.anthropic.aot.AnthropicRuntimeHints",
            "org.springframework.ai.anthropic.aot.registerHints": "org.springframework.ai.anthropic.aot.registerHints"
        },
        "package": "package org.springframework.ai.anthropic.aot;",
        "property_declarations": [],
        "functions": [
            {
                "name": "registerHints",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var mcs = MemberCategory.values();\n\t\tfor (var tr : findJsonAnnotatedClassesInPackage(AnthropicApi.class))\n\t\t\thints.reflection().registerType(tr, mcs);",
                "is_abstract": "",
                "class_name": "AnthropicRuntimeHints",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-ollama/src/test/java/org/springframework/ai/ollama/OllamaChatClientIT.java",
        "class_names": [
            "OllamaChatClientIT",
            "TestConfiguration"
        ],
        "imports": "import java.util.stream.Collectors;\nimport java.util.List;\nimport org.springframework.ai.chat.Generation;\nimport org.springframework.ai.chat.prompt.SystemPromptTemplate;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.junit.jupiter.api.Disabled;\nimport org.springframework.ai.chat.prompt.ChatOptionsBuilder;\nimport org.springframework.ai.ollama.api.OllamaApi;\nimport org.testcontainers.containers.GenericContainer;\nimport org.springframework.ai.parser.MapOutputParser;\nimport java.io.IOException;\nimport org.springframework.ai.chat.messages.Message;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport java.util.Map;\nimport org.apache.commons.logging.LogFactory;\nimport org.springframework.ai.parser.BeanOutputParser;\nimport java.util.Arrays;\nimport org.springframework.ai.chat.ChatResponse;\nimport org.springframework.ai.chat.messages.UserMessage;\nimport org.springframework.context.annotation.Bean;\nimport org.apache.commons.logging.Log;\nimport org.springframework.ai.chat.metadata.Usage;\nimport org.springframework.ai.ollama.api.OllamaOptions;\nimport org.springframework.ai.parser.ListOutputParser;\nimport org.springframework.ai.chat.prompt.PromptTemplate;\nimport org.springframework.ai.chat.messages.AssistantMessage;\nimport org.springframework.boot.SpringBootConfiguration;\nimport org.testcontainers.junit.jupiter.Testcontainers;\nimport org.springframework.ai.chat.prompt.Prompt;\nimport org.springframework.core.convert.support.DefaultConversionService;\nimport org.junit.jupiter.api.Test;\nimport org.testcontainers.junit.jupiter.Container;",
        "package_import_paths": {
            "org.springframework.ai.ollama.OllamaChatClientIT": "org.springframework.ai.ollama.OllamaChatClientIT",
            "org.springframework.ai.ollama.TestConfiguration": "org.springframework.ai.ollama.TestConfiguration",
            "org.springframework.ai.ollama.beforeAll": "org.springframework.ai.ollama.beforeAll",
            "org.springframework.ai.ollama.roleTest": "org.springframework.ai.ollama.roleTest",
            "org.springframework.ai.ollama.usageTest": "org.springframework.ai.ollama.usageTest",
            "org.springframework.ai.ollama.outputParser": "org.springframework.ai.ollama.outputParser",
            "org.springframework.ai.ollama.mapOutputParser": "org.springframework.ai.ollama.mapOutputParser",
            "org.springframework.ai.ollama.beanOutputParserRecords": "org.springframework.ai.ollama.beanOutputParserRecords",
            "org.springframework.ai.ollama.beanStreamOutputParserRecords": "org.springframework.ai.ollama.beanStreamOutputParserRecords",
            "org.springframework.ai.ollama.ollamaApi": "org.springframework.ai.ollama.ollamaApi",
            "org.springframework.ai.ollama.ollamaChat": "org.springframework.ai.ollama.ollamaChat",
            "org.springframework.ai.ollama.MODEL": "org.springframework.ai.ollama.MODEL",
            "org.springframework.ai.ollama.logger": "org.springframework.ai.ollama.logger",
            "org.springframework.ai.ollama.stati": "org.springframework.ai.ollama.stati",
            "org.springframework.ai.ollama.baseUrl": "org.springframework.ai.ollama.baseUrl",
            "org.springframework.ai.ollama.privat": "org.springframework.ai.ollama.privat"
        },
        "package": "package org.springframework.ai.ollama;",
        "property_declarations": [
            "private static String MODEL = \"mistral\";",
            "@Container\n\tstatic GenericContainer<?> ollamaContainer = new GenericContainer<>(\"ollama/ollama:0.1.29\").withExposedPorts(11434);",
            "private static final Log logger = LogFactory.getLog(OllamaChatClientIT.class);",
            "static String baseUrl;",
            "@Autowired\n\tprivate OllamaChatClient client;"
        ],
        "functions": [
            {
                "name": "beforeAll",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "logger.info(\"Start pulling the '\" + MODEL + \" ' generative ... would take several minutes ...\");\n\t\tollamaContainer.execInContainer(\"ollama\", \"pull\", MODEL);\n\t\tlogger.info(MODEL + \" pulling competed!\");\n\n\t\tbaseUrl = \"http://\" + ollamaContainer.getHost() + \":\" + ollamaContainer.getMappedPort(11434);",
                "is_abstract": "",
                "class_name": "OllamaChatClientIT",
                "annotations": []
            },
            {
                "name": "roleTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Message systemMessage = new SystemPromptTemplate(\"\"\"\n\t\t\t\tYou are a helpful AI assistant. Your name is {name}.\n\t\t\t\tYou are an AI assistant that helps people find information.\n\t\t\t\tYour name is {name}\n\t\t\t\tYou should reply to the user's request with your name and also in the style of a {voice}.\n\t\t\t\t\"\"\").createMessage(Map.of(\"name\", \"Bob\", \"voice\", \"pirate\"));\n\n\t\tUserMessage userMessage = new UserMessage(\"Tell me about 5 famous pirates from the Golden Age of Piracy.\");\n\n\t\t// portable/generic options\n\t\tvar portableOptions = ChatOptionsBuilder.builder().withTemperature(0.7f).build();\n\n\t\tPrompt prompt = new Prompt(List.of(userMessage, systemMessage), portableOptions);\n\n\t\tChatResponse response = client.call(prompt);\n\t\tassertThat(response.getResult().getOutput().getContent()).contains(\"Blackbeard\");\n\n\t\t// ollama specific options\n\t\tvar ollamaOptions = new OllamaOptions().withLowVRAM(true);\n\n\t\tresponse = client.call(new Prompt(List.of(userMessage, systemMessage), ollamaOptions));\n\t\tassertThat(response.getResult().getOutput().getContent()).contains(\"Blackbeard\");",
                "is_abstract": "",
                "class_name": "OllamaChatClientIT",
                "annotations": []
            },
            {
                "name": "usageTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Prompt prompt = new Prompt(\"Tell me a joke\");\n\t\tChatResponse response = client.call(prompt);\n\t\tUsage usage = response.getMetadata().getUsage();\n\n\t\tassertThat(usage).isNotNull();\n\t\tassertThat(usage.getPromptTokens()).isPositive();\n\t\tassertThat(usage.getGenerationTokens()).isPositive();\n\t\tassertThat(usage.getTotalTokens()).isPositive();",
                "is_abstract": "",
                "class_name": "OllamaChatClientIT",
                "annotations": []
            },
            {
                "name": "outputParser",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "DefaultConversionService conversionService = new DefaultConversionService();\n\t\tListOutputParser outputParser = new ListOutputParser(conversionService);\n\n\t\tString format = outputParser.getFormat();\n\t\tString template = \"\"\"\n\t\t\t\tList five {subject}\n\t\t\t\t{format}\n\t\t\t\t\"\"\";\n\t\tPromptTemplate promptTemplate = new PromptTemplate(template,\n\t\t\t\tMap.of(\"subject\", \"ice cream flavors.\", \"format\", format));\n\t\tPrompt prompt = new Prompt(promptTemplate.createMessage());\n\t\tGeneration generation = this.client.call(prompt).getResult();\n\n\t\tList<String> list = outputParser.parse(generation.getOutput().getContent());\n\t\tassertThat(list).hasSize(5);",
                "is_abstract": "",
                "class_name": "OllamaChatClientIT",
                "annotations": []
            },
            {
                "name": "mapOutputParser",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "MapOutputParser outputParser = new MapOutputParser();\n\n\t\tString format = outputParser.getFormat();\n\t\tString template = \"\"\"\n\t\t\t\tRemove Markdown code blocks from the output.\n\t\t\t\tProvide me a List of {subject}\n\t\t\t\t{format}\n\t\t\t\t\"\"\";\n\t\tPromptTemplate promptTemplate = new PromptTemplate(template,\n\t\t\t\tMap.of(\"subject\", \"an array of numbers from 1 to 9 under they key name 'numbers'\", \"format\", format));\n\t\tPrompt prompt = new Prompt(promptTemplate.createMessage());\n\n\t\tGeneration generation = client.call(prompt).getResult();\n\n\t\tMap<String, Object> result = outputParser.parse(generation.getOutput().getContent());\n\t\tassertThat(result.get(\"numbers\")).isEqualTo(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9));",
                "is_abstract": "",
                "class_name": "OllamaChatClientIT",
                "annotations": []
            },
            {
                "name": "beanOutputParserRecords",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "BeanOutputParser<ActorsFilmsRecord> outputParser = new BeanOutputParser<>(ActorsFilmsRecord.class);\n\n\t\tString format = outputParser.getFormat();\n\t\tString template = \"\"\"\n\t\t\t\tGenerate the filmography of 5 movies for Tom Hanks.\n\t\t\t\t{format}\n\t\t\t\t\"\"\";\n\t\tPromptTemplate promptTemplate = new PromptTemplate(template, Map.of(\"format\", format));\n\t\tPrompt prompt = new Prompt(promptTemplate.createMessage());\n\t\tGeneration generation = client.call(prompt).getResult();\n\n\t\tActorsFilmsRecord actorsFilms = outputParser.parse(generation.getOutput().getContent());\n\t\tassertThat(actorsFilms.actor()).isEqualTo(\"Tom Hanks\");\n\t\tassertThat(actorsFilms.movies()).hasSize(5);",
                "is_abstract": "",
                "class_name": "OllamaChatClientIT",
                "annotations": []
            },
            {
                "name": "beanStreamOutputParserRecords",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "BeanOutputParser<ActorsFilmsRecord> outputParser = new BeanOutputParser<>(ActorsFilmsRecord.class);\n\n\t\tString format = outputParser.getFormat();\n\t\tString template = \"\"\"\n\t\t\t\tGenerate the filmography of 5 movies for Tom Hanks.\n\t\t\t\t{format}\n\t\t\t\tRemove Markdown code blocks from the output.\n\t\t\t\t\"\"\";\n\t\tPromptTemplate promptTemplate = new PromptTemplate(template, Map.of(\"format\", format));\n\t\tPrompt prompt = new Prompt(promptTemplate.createMessage());\n\n\t\tString generationTextFromStream = client.stream(prompt)\n\t\t\t.collectList()\n\t\t\t.block()\n\t\t\t.stream()\n\t\t\t.map(ChatResponse::getResults)\n\t\t\t.flatMap(List::stream)\n\t\t\t.map(Generation::getOutput)\n\t\t\t.map(AssistantMessage::getContent)\n\t\t\t.collect(Collectors.joining());\n\n\t\tActorsFilmsRecord actorsFilms = outputParser.parse(generationTextFromStream);\n\n\t\tassertThat(actorsFilms.actor()).isEqualTo(\"Tom Hanks\");\n\t\tassertThat(actorsFilms.movies()).hasSize(5);",
                "is_abstract": "",
                "class_name": "OllamaChatClientIT",
                "annotations": []
            },
            {
                "name": "ollamaApi",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new OllamaApi(baseUrl);",
                "is_abstract": "",
                "class_name": "OllamaChatClientIT TestConfiguration",
                "annotations": []
            },
            {
                "name": "ollamaChat",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new OllamaChatClient(ollamaApi).withModel(MODEL)\n\t\t\t\t.withDefaultOptions(OllamaOptions.create().withModel(MODEL).withTemperature(0.9f));",
                "is_abstract": "",
                "class_name": "OllamaChatClientIT TestConfiguration",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-ollama/src/test/java/org/springframework/ai/ollama/OllamaChatClientMultimodalIT.java",
        "class_names": [
            "TestConfiguration",
            "OllamaChatClientMultimodalIT"
        ],
        "imports": "import org.springframework.util.MimeTypeUtils;\nimport java.util.List;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.junit.jupiter.api.Disabled;\nimport org.springframework.ai.ollama.api.OllamaApi;\nimport org.testcontainers.containers.GenericContainer;\nimport java.io.IOException;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.apache.commons.logging.LogFactory;\nimport org.springframework.ai.chat.ChatResponse;\nimport org.springframework.ai.chat.messages.UserMessage;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.ai.chat.messages.Media;\nimport org.apache.commons.logging.Log;\nimport org.springframework.ai.ollama.api.OllamaOptions;\nimport org.springframework.boot.SpringBootConfiguration;\nimport org.testcontainers.junit.jupiter.Testcontainers;\nimport org.springframework.ai.chat.prompt.Prompt;\nimport org.springframework.core.io.ClassPathResource;\nimport org.junit.jupiter.api.Test;\nimport org.testcontainers.junit.jupiter.Container;",
        "package_import_paths": {
            "org.springframework.ai.ollama.OllamaChatClientMultimodalIT": "org.springframework.ai.ollama.OllamaChatClientMultimodalIT",
            "org.springframework.ai.ollama.TestConfiguration": "org.springframework.ai.ollama.TestConfiguration",
            "org.springframework.ai.ollama.beforeAll": "org.springframework.ai.ollama.beforeAll",
            "org.springframework.ai.ollama.multiModalityTest": "org.springframework.ai.ollama.multiModalityTest",
            "org.springframework.ai.ollama.ollamaApi": "org.springframework.ai.ollama.ollamaApi",
            "org.springframework.ai.ollama.ollamaChat": "org.springframework.ai.ollama.ollamaChat",
            "org.springframework.ai.ollama.MODEL": "org.springframework.ai.ollama.MODEL",
            "org.springframework.ai.ollama.logger": "org.springframework.ai.ollama.logger",
            "org.springframework.ai.ollama.stati": "org.springframework.ai.ollama.stati",
            "org.springframework.ai.ollama.baseUrl": "org.springframework.ai.ollama.baseUrl",
            "org.springframework.ai.ollama.privat": "org.springframework.ai.ollama.privat"
        },
        "package": "package org.springframework.ai.ollama;",
        "property_declarations": [
            "private static String MODEL = \"llava\";",
            "private static final Log logger = LogFactory.getLog(OllamaChatClientIT.class);",
            "@Container\n\tstatic GenericContainer<?> ollamaContainer = new GenericContainer<>(\"ollama/ollama:0.1.29\").withExposedPorts(11434);",
            "static String baseUrl;",
            "@Autowired\n\tprivate OllamaChatClient client;"
        ],
        "functions": [
            {
                "name": "beforeAll",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "logger.info(\"Start pulling the '\" + MODEL + \" ' generative ... would take several minutes ...\");\n\t\tollamaContainer.execInContainer(\"ollama\", \"pull\", MODEL);\n\t\tlogger.info(MODEL + \" pulling competed!\");\n\n\t\tbaseUrl = \"http://\" + ollamaContainer.getHost() + \":\" + ollamaContainer.getMappedPort(11434);",
                "is_abstract": "",
                "class_name": "OllamaChatClientMultimodalIT",
                "annotations": []
            },
            {
                "name": "multiModalityTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "byte[] imageData = new ClassPathResource(\"/test.png\").getContentAsByteArray();\n\n\t\tvar userMessage = new UserMessage(\"Explain what do you see on this picture?\",\n\t\t\t\tList.of(new Media(MimeTypeUtils.IMAGE_PNG, imageData)));\n\n\t\tChatResponse response = client.call(new Prompt(List.of(userMessage)));\n\n\t\tlogger.info(response.getResult().getOutput().getContent());\n\t\tassertThat(response.getResult().getOutput().getContent()).contains(\"bananas\", \"apple\", \"basket\");",
                "is_abstract": "",
                "class_name": "OllamaChatClientMultimodalIT",
                "annotations": []
            },
            {
                "name": "ollamaApi",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new OllamaApi(baseUrl);",
                "is_abstract": "",
                "class_name": "OllamaChatClientMultimodalIT TestConfiguration",
                "annotations": []
            },
            {
                "name": "ollamaChat",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new OllamaChatClient(ollamaApi, OllamaOptions.create().withModel(MODEL).withTemperature(0.9f));",
                "is_abstract": "",
                "class_name": "OllamaChatClientMultimodalIT TestConfiguration",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-ollama/src/test/java/org/springframework/ai/ollama/OllamaEmbeddingRequestTests.java",
        "class_names": [
            "OllamaEmbeddingRequestTests"
        ],
        "imports": "import org.springframework.ai.embedding.EmbeddingOptions;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.springframework.ai.ollama.api.OllamaOptions;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.ollama.api.OllamaApi;",
        "package_import_paths": {
            "org.springframework.ai.ollama.OllamaEmbeddingRequestTests": "org.springframework.ai.ollama.OllamaEmbeddingRequestTests",
            "org.springframework.ai.ollama.ollamaEmbeddingRequestDefaultOptions": "org.springframework.ai.ollama.ollamaEmbeddingRequestDefaultOptions",
            "org.springframework.ai.ollama.ollamaEmbeddingRequestRequestOptions": "org.springframework.ai.ollama.ollamaEmbeddingRequestRequestOptions",
            "org.springframework.ai.ollama.client": "org.springframework.ai.ollama.client"
        },
        "package": "package org.springframework.ai.ollama;",
        "property_declarations": [
            "OllamaEmbeddingClient client = new OllamaEmbeddingClient(new OllamaApi()).withDefaultOptions(\n\t\t\tnew OllamaOptions().withModel(\"DEFAULT_MODEL\").withMainGPU(11).withUseMMap(true).withNumGPU(1));"
        ],
        "functions": [
            {
                "name": "ollamaEmbeddingRequestDefaultOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var request = client.ollamaEmbeddingRequest(\"Hello\", null);\n\n\t\tassertThat(request.model()).isEqualTo(\"DEFAULT_MODEL\");\n\t\tassertThat(request.options().get(\"num_gpu\")).isEqualTo(1);\n\t\tassertThat(request.options().get(\"main_gpu\")).isEqualTo(11);\n\t\tassertThat(request.options().get(\"use_mmap\")).isEqualTo(true);\n\t\tassertThat(request.prompt()).isEqualTo(\"Hello\");",
                "is_abstract": "",
                "class_name": "OllamaEmbeddingRequestTests",
                "annotations": []
            },
            {
                "name": "ollamaEmbeddingRequestRequestOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "EmbeddingOptions promptOptions = new OllamaOptions().withModel(\"PROMPT_MODEL\")\n\t\t\t.withMainGPU(22)\n\t\t\t.withUseMMap(true)\n\t\t\t.withNumGPU(2);\n\n\t\tvar request = client.ollamaEmbeddingRequest(\"Hello\", promptOptions);\n\n\t\tassertThat(request.model()).isEqualTo(\"PROMPT_MODEL\");\n\t\tassertThat(request.options().get(\"num_gpu\")).isEqualTo(2);\n\t\tassertThat(request.options().get(\"main_gpu\")).isEqualTo(22);\n\t\tassertThat(request.options().get(\"use_mmap\")).isEqualTo(true);\n\t\tassertThat(request.prompt()).isEqualTo(\"Hello\");",
                "is_abstract": "",
                "class_name": "OllamaEmbeddingRequestTests",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-ollama/src/test/java/org/springframework/ai/ollama/OllamaChatRequestTests.java",
        "class_names": [
            "OllamaChatRequestTests"
        ],
        "imports": "import org.springframework.ai.chat.prompt.Prompt;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.springframework.ai.ollama.api.OllamaOptions;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.chat.prompt.ChatOptionsBuilder;\nimport org.springframework.ai.chat.prompt.ChatOptions;\nimport org.springframework.ai.ollama.api.OllamaApi;",
        "package_import_paths": {
            "org.springframework.ai.ollama.OllamaChatRequestTests": "org.springframework.ai.ollama.OllamaChatRequestTests",
            "org.springframework.ai.ollama.createRequestWithDefaultOptions": "org.springframework.ai.ollama.createRequestWithDefaultOptions",
            "org.springframework.ai.ollama.createRequestWithPromptOllamaOptions": "org.springframework.ai.ollama.createRequestWithPromptOllamaOptions",
            "org.springframework.ai.ollama.createRequestWithPromptPortableChatOptions": "org.springframework.ai.ollama.createRequestWithPromptPortableChatOptions",
            "org.springframework.ai.ollama.createRequestWithPromptOptionsModelOverrid": "org.springframework.ai.ollama.createRequestWithPromptOptionsModelOverrid",
            "org.springframework.ai.ollama.createRequestWithDefaultOptionsModelOverrid": "org.springframework.ai.ollama.createRequestWithDefaultOptionsModelOverrid",
            "org.springframework.ai.ollama.client": "org.springframework.ai.ollama.client"
        },
        "package": "package org.springframework.ai.ollama;",
        "property_declarations": [
            "OllamaChatClient client = new OllamaChatClient(new OllamaApi()).withDefaultOptions(\n\t\t\tnew OllamaOptions().withModel(\"MODEL_NAME\").withTopK(99).withTemperature(66.6f).withNumGPU(1));"
        ],
        "functions": [
            {
                "name": "createRequestWithDefaultOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var request = client.ollamaChatRequest(new Prompt(\"Test message content\"), false);\n\n\t\tassertThat(request.messages()).hasSize(1);\n\t\tassertThat(request.stream()).isFalse();\n\n\t\tassertThat(request.model()).isEqualTo(\"MODEL_NAME\");\n\t\tassertThat(request.options().get(\"temperature\")).isEqualTo(66.6);\n\t\tassertThat(request.options().get(\"top_k\")).isEqualTo(99);\n\t\tassertThat(request.options().get(\"num_gpu\")).isEqualTo(1);\n\t\tassertThat(request.options().get(\"top_p\")).isNull();",
                "is_abstract": "",
                "class_name": "OllamaChatRequestTests",
                "annotations": []
            },
            {
                "name": "createRequestWithPromptOllamaOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// Runtime options should override the default options.\n\t\tOllamaOptions promptOptions = new OllamaOptions().withTemperature(0.8f).withTopP(0.5f).withNumGPU(2);\n\n\t\tvar request = client.ollamaChatRequest(new Prompt(\"Test message content\", promptOptions), true);\n\n\t\tassertThat(request.messages()).hasSize(1);\n\t\tassertThat(request.stream()).isTrue();\n\n\t\tassertThat(request.model()).isEqualTo(\"MODEL_NAME\");\n\t\tassertThat(request.options().get(\"temperature\")).isEqualTo(0.8);\n\t\tassertThat(request.options().get(\"top_k\")).isEqualTo(99); // still the default\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// value.\n\t\tassertThat(request.options().get(\"num_gpu\")).isEqualTo(2);\n\t\tassertThat(request.options().get(\"top_p\")).isEqualTo(0.5); // new field introduced\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// by the\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// promptOptions.",
                "is_abstract": "",
                "class_name": "OllamaChatRequestTests",
                "annotations": []
            },
            {
                "name": "createRequestWithPromptPortableChatOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// Ollama runtime options.\n\t\tChatOptions portablePromptOptions = ChatOptionsBuilder.builder()\n\t\t\t.withTemperature(0.9f)\n\t\t\t.withTopK(100)\n\t\t\t.withTopP(0.6f)\n\t\t\t.build();\n\n\t\tvar request = client.ollamaChatRequest(new Prompt(\"Test message content\", portablePromptOptions), true);\n\n\t\tassertThat(request.messages()).hasSize(1);\n\t\tassertThat(request.stream()).isTrue();\n\n\t\tassertThat(request.model()).isEqualTo(\"MODEL_NAME\");\n\t\tassertThat(request.options().get(\"temperature\")).isEqualTo(0.9);\n\t\tassertThat(request.options().get(\"top_k\")).isEqualTo(100);\n\t\tassertThat(request.options().get(\"num_gpu\")).isEqualTo(1); // default value.\n\t\tassertThat(request.options().get(\"top_p\")).isEqualTo(0.6);",
                "is_abstract": "",
                "class_name": "OllamaChatRequestTests",
                "annotations": []
            },
            {
                "name": "createRequestWithPromptOptionsModelOverride",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// Ollama runtime options.\n\t\tOllamaOptions promptOptions = new OllamaOptions().withModel(\"PROMPT_MODEL\");\n\n\t\tvar request = client.ollamaChatRequest(new Prompt(\"Test message content\", promptOptions), true);\n\n\t\tassertThat(request.model()).isEqualTo(\"PROMPT_MODEL\");",
                "is_abstract": "",
                "class_name": "OllamaChatRequestTests",
                "annotations": []
            },
            {
                "name": "createRequestWithDefaultOptionsModelOverride",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "OllamaChatClient client2 = new OllamaChatClient(new OllamaApi())\n\t\t\t.withDefaultOptions(new OllamaOptions().withModel(\"DEFAULT_OPTIONS_MODEL\"));\n\n\t\tvar request = client2.ollamaChatRequest(new Prompt(\"Test message content\"), true);\n\n\t\tassertThat(request.model()).isEqualTo(\"DEFAULT_OPTIONS_MODEL\");\n\n\t\t// Prompt options should override the default options.\n\t\tOllamaOptions promptOptions = new OllamaOptions().withModel(\"PROMPT_MODEL\");\n\n\t\trequest = client2.ollamaChatRequest(new Prompt(\"Test message content\", promptOptions), true);\n\n\t\tassertThat(request.model()).isEqualTo(\"PROMPT_MODEL\");",
                "is_abstract": "",
                "class_name": "OllamaChatRequestTests",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-ollama/src/test/java/org/springframework/ai/ollama/OllamaEmbeddingClientIT.java",
        "class_names": [
            "TestConfiguration",
            "OllamaEmbeddingClientIT"
        ],
        "imports": "import org.springframework.ai.embedding.EmbeddingResponse;\nimport java.util.List;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.springframework.context.annotation.Bean;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.Disabled;\nimport org.testcontainers.junit.jupiter.Container;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.boot.SpringBootConfiguration;\nimport org.springframework.ai.ollama.api.OllamaApi;\nimport org.springframework.ai.ollama.api.OllamaApiIT;\nimport org.testcontainers.containers.GenericContainer;\nimport org.testcontainers.junit.jupiter.Testcontainers;\nimport java.io.IOException;",
        "package_import_paths": {
            "org.springframework.ai.ollama.OllamaEmbeddingClientIT": "org.springframework.ai.ollama.OllamaEmbeddingClientIT",
            "org.springframework.ai.ollama.TestConfiguration": "org.springframework.ai.ollama.TestConfiguration",
            "org.springframework.ai.ollama.beforeAll": "org.springframework.ai.ollama.beforeAll",
            "org.springframework.ai.ollama.singleEmbeddin": "org.springframework.ai.ollama.singleEmbeddin",
            "org.springframework.ai.ollama.ollamaApi": "org.springframework.ai.ollama.ollamaApi",
            "org.springframework.ai.ollama.ollamaEmbeddin": "org.springframework.ai.ollama.ollamaEmbeddin",
            "org.springframework.ai.ollama.logger": "org.springframework.ai.ollama.logger",
            "org.springframework.ai.ollama.stati": "org.springframework.ai.ollama.stati",
            "org.springframework.ai.ollama.baseUrl": "org.springframework.ai.ollama.baseUrl",
            "org.springframework.ai.ollama.privat": "org.springframework.ai.ollama.privat"
        },
        "package": "package org.springframework.ai.ollama;",
        "property_declarations": [
            "static String baseUrl;",
            "@Autowired\n\tprivate OllamaEmbeddingClient embeddingClient;",
            "private static final Log logger = LogFactory.getLog(OllamaApiIT.class);",
            "@Container\n\tstatic GenericContainer<?> ollamaContainer = new GenericContainer<>(\"ollama/ollama:0.1.29\").withExposedPorts(11434);"
        ],
        "functions": [
            {
                "name": "beforeAll",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "logger.info(\"Start pulling the 'orca-mini' generative (3GB) ... would take several minutes ...\");\n\t\tollamaContainer.execInContainer(\"ollama\", \"pull\", \"orca-mini\");\n\t\tlogger.info(\"orca-mini pulling competed!\");\n\n\t\tbaseUrl = \"http://\" + ollamaContainer.getHost() + \":\" + ollamaContainer.getMappedPort(11434);",
                "is_abstract": "",
                "class_name": "OllamaEmbeddingClientIT",
                "annotations": []
            },
            {
                "name": "singleEmbedding",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "assertThat(embeddingClient).isNotNull();\n\t\tEmbeddingResponse embeddingResponse = embeddingClient.embedForResponse(List.of(\"Hello World\"));\n\t\tassertThat(embeddingResponse.getResults()).hasSize(1);\n\t\tassertThat(embeddingResponse.getResults().get(0).getOutput()).isNotEmpty();\n\t\tassertThat(embeddingClient.dimensions()).isEqualTo(3200);",
                "is_abstract": "",
                "class_name": "OllamaEmbeddingClientIT",
                "annotations": []
            },
            {
                "name": "ollamaApi",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new OllamaApi(baseUrl);",
                "is_abstract": "",
                "class_name": "OllamaEmbeddingClientIT TestConfiguration",
                "annotations": []
            },
            {
                "name": "ollamaEmbedding",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new OllamaEmbeddingClient(ollamaApi).withModel(\"orca-mini\");",
                "is_abstract": "",
                "class_name": "OllamaEmbeddingClientIT TestConfiguration",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-ollama/src/test/java/org/springframework/ai/ollama/api/OllamaApiIT.java",
        "class_names": [
            "OllamaApiIT"
        ],
        "imports": "import java.util.stream.Collectors;\nimport java.util.List;\nimport reactor.core.publisher.Flux;\nimport org.junit.jupiter.api.Disabled;\nimport org.testcontainers.containers.GenericContainer;\nimport java.io.IOException;\nimport org.springframework.ai.ollama.api.OllamaApi.EmbeddingResponse;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.apache.commons.logging.LogFactory;\nimport org.springframework.ai.ollama.api.OllamaApi.Message;\nimport org.springframework.ai.ollama.api.OllamaApi.EmbeddingRequest;\nimport org.springframework.ai.ollama.api.OllamaApi.Message.Role;\nimport org.springframework.ai.ollama.api.OllamaApi.GenerateResponse;\nimport org.springframework.ai.ollama.api.OllamaApi.GenerateRequest;\nimport org.apache.commons.logging.Log;\nimport org.springframework.ai.ollama.api.OllamaApi.ChatRequest;\nimport org.testcontainers.junit.jupiter.Testcontainers;\nimport org.springframework.ai.ollama.api.OllamaApi.ChatResponse;\nimport org.junit.jupiter.api.Test;\nimport org.testcontainers.junit.jupiter.Container;",
        "package_import_paths": {
            "org.springframework.ai.ollama.api.OllamaApiIT": "org.springframework.ai.ollama.api.OllamaApiIT",
            "org.springframework.ai.ollama.api.beforeAll": "org.springframework.ai.ollama.api.beforeAll",
            "org.springframework.ai.ollama.api.generation": "org.springframework.ai.ollama.api.generation",
            "org.springframework.ai.ollama.api.chat": "org.springframework.ai.ollama.api.chat",
            "org.springframework.ai.ollama.api.streamingChat": "org.springframework.ai.ollama.api.streamingChat",
            "org.springframework.ai.ollama.api.embedText": "org.springframework.ai.ollama.api.embedText",
            "org.springframework.ai.ollama.api.logger": "org.springframework.ai.ollama.api.logger",
            "org.springframework.ai.ollama.api.stati": "org.springframework.ai.ollama.api.stati",
            "org.springframework.ai.ollama.api.ollamaApi": "org.springframework.ai.ollama.api.ollamaApi"
        },
        "package": "package org.springframework.ai.ollama.api;",
        "property_declarations": [
            "static OllamaApi ollamaApi;",
            "private static final Log logger = LogFactory.getLog(OllamaApiIT.class);",
            "@Container\n\tstatic GenericContainer<?> ollamaContainer = new GenericContainer<>(\"ollama/ollama:0.1.29\").withExposedPorts(11434);"
        ],
        "functions": [
            {
                "name": "beforeAll",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "logger.info(\"Start pulling the 'orca-mini' generative (3GB) ... would take several minutes ...\");\n\t\tollamaContainer.execInContainer(\"ollama\", \"pull\", \"orca-mini\");\n\t\tlogger.info(\"orca-mini pulling competed!\");\n\n\t\tollamaApi = new OllamaApi(\"http://\" + ollamaContainer.getHost() + \":\" + ollamaContainer.getMappedPort(11434));",
                "is_abstract": "",
                "class_name": "OllamaApiIT",
                "annotations": []
            },
            {
                "name": "generation",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var request = GenerateRequest\n\t\t\t.builder(\"What is the capital of Bulgaria and what is the size? What it the national anthem?\")\n\t\t\t.withModel(\"orca-mini\")\n\t\t\t.withStream(false)\n\t\t\t.build();\n\n\t\tGenerateResponse response = ollamaApi.generate(request);\n\n\t\tSystem.out.println(response);\n\n\t\tassertThat(response).isNotNull();\n\t\tassertThat(response.model()).isEqualTo(response.model());\n\t\tassertThat(response.response()).contains(\"Sofia\");",
                "is_abstract": "",
                "class_name": "OllamaApiIT",
                "annotations": []
            },
            {
                "name": "chat",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var request = ChatRequest.builder(\"orca-mini\")\n\t\t\t.withStream(false)\n\t\t\t.withMessages(List.of(\n\t\t\t\t\tMessage.builder(Role.SYSTEM)\n\t\t\t\t\t\t.withContent(\"You are geography teacher. You are talking to a student.\")\n\t\t\t\t\t\t.build(),\n\t\t\t\t\tMessage.builder(Role.USER)\n\t\t\t\t\t\t.withContent(\"What is the capital of Bulgaria and what is the size? \"\n\t\t\t\t\t\t\t\t+ \"What it the national anthem?\")\n\t\t\t\t\t\t.build()))\n\t\t\t.withOptions(OllamaOptions.create().withTemperature(0.9f))\n\t\t\t.build();\n\n\t\tChatResponse response = ollamaApi.chat(request);\n\n\t\tSystem.out.println(response);\n\n\t\tassertThat(response).isNotNull();\n\t\tassertThat(response.model()).isEqualTo(response.model());\n\t\tassertThat(response.done()).isTrue();\n\t\tassertThat(response.message().role()).isEqualTo(Role.ASSISTANT);\n\t\tassertThat(response.message().content()).contains(\"Sofia\");",
                "is_abstract": "",
                "class_name": "OllamaApiIT",
                "annotations": []
            },
            {
                "name": "streamingChat",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var request = ChatRequest.builder(\"orca-mini\")\n\t\t\t.withStream(true)\n\t\t\t.withMessages(List.of(Message.builder(Role.USER)\n\t\t\t\t.withContent(\"What is the capital of Bulgaria and what is the size? \" + \"What it the national anthem?\")\n\t\t\t\t.build()))\n\t\t\t.withOptions(OllamaOptions.create().withTemperature(0.9f).toMap())\n\t\t\t.build();\n\n\t\tFlux<ChatResponse> response = ollamaApi.streamingChat(request);\n\n\t\tList<ChatResponse> responses = response.collectList().block();\n\t\tSystem.out.println(responses);\n\n\t\tassertThat(response).isNotNull();\n\t\tassertThat(responses.stream()\n\t\t\t.filter(r -> r.message() != null)\n\t\t\t.map(r -> r.message().content())\n\t\t\t.collect(Collectors.joining(System.lineSeparator()))).contains(\"Sofia\");\n\n\t\tChatResponse lastResponse = responses.get(responses.size() - 1);\n\t\tassertThat(lastResponse.message().content()).isEmpty();\n\t\tassertThat(lastResponse.done()).isTrue();",
                "is_abstract": "",
                "class_name": "OllamaApiIT",
                "annotations": []
            },
            {
                "name": "embedText",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "EmbeddingRequest request = new EmbeddingRequest(\"orca-mini\", \"I like to eat apples\");\n\n\t\tEmbeddingResponse response = ollamaApi.embeddings(request);\n\n\t\tassertThat(response).isNotNull();\n\t\tassertThat(response.embedding()).hasSize(3200);",
                "is_abstract": "",
                "class_name": "OllamaApiIT",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-ollama/src/test/java/org/springframework/ai/ollama/api/OllamaModelOptionsTests.java",
        "class_names": [
            "OllamaModelOptionsTests"
        ],
        "imports": "import org.junit.jupiter.api.Test;\nimport java.util.List;\nimport static org.assertj.core.api.Assertions.assertThat;",
        "package_import_paths": {
            "org.springframework.ai.ollama.api.OllamaModelOptionsTests": "org.springframework.ai.ollama.api.OllamaModelOptionsTests",
            "org.springframework.ai.ollama.api.testOptions": "org.springframework.ai.ollama.api.testOptions"
        },
        "package": "package org.springframework.ai.ollama.api;",
        "property_declarations": [],
        "functions": [
            {
                "name": "testOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var options = OllamaOptions.create().withTemperature(3.14f).withTopK(30).withStop(List.of(\"a\", \"b\", \"c\"));\n\n\t\tvar optionsMap = options.toMap();\n\t\tSystem.out.println(optionsMap);\n\t\tassertThat(optionsMap).containsEntry(\"temperature\", 3.14);\n\t\tassertThat(optionsMap).containsEntry(\"top_k\", 30);\n\t\tassertThat(optionsMap).containsEntry(\"stop\", List.of(\"a\", \"b\", \"c\"));",
                "is_abstract": "",
                "class_name": "OllamaModelOptionsTests",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-ollama/src/test/java/org/springframework/ai/ollama/aot/OllamaRuntimeHintsTests.java",
        "class_names": [
            "OllamaRuntimeHintsTests"
        ],
        "imports": "import java.util.Set;\nimport org.springframework.aot.hint.RuntimeHints;\nimport static org.springframework.aot.hint.predicate.RuntimeHintsPredicates.*;\nimport static org.assertj.core.api.AssertionsForClassTypes.*;\nimport org.springframework.ai.ollama.api.OllamaOptions;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.aot.hint.TypeReference;\nimport org.springframework.ai.ollama.api.OllamaApi;\nimport static org.springframework.ai.aot.AiRuntimeHints.findJsonAnnotatedClassesInPackage;",
        "package_import_paths": {
            "org.springframework.ai.ollama.aot.OllamaRuntimeHintsTests": "org.springframework.ai.ollama.aot.OllamaRuntimeHintsTests",
            "org.springframework.ai.ollama.aot.registerHints": "org.springframework.ai.ollama.aot.registerHints"
        },
        "package": "package org.springframework.ai.ollama.aot;",
        "property_declarations": [],
        "functions": [
            {
                "name": "registerHints",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "RuntimeHints runtimeHints = new RuntimeHints();\n\t\tOllamaRuntimeHints ollamaRuntimeHints = new OllamaRuntimeHints();\n\t\tollamaRuntimeHints.registerHints(runtimeHints, null);\n\n\t\tSet<TypeReference> jsonAnnotatedClasses = findJsonAnnotatedClassesInPackage(OllamaApi.class);\n\t\tfor (TypeReference jsonAnnotatedClass : jsonAnnotatedClasses) {\n\t\t\tassertThat(runtimeHints).matches(reflection().onType(jsonAnnotatedClass));\n\t\t}\n\n\t\tjsonAnnotatedClasses = findJsonAnnotatedClassesInPackage(OllamaOptions.class);\n\t\tfor (TypeReference jsonAnnotatedClass : jsonAnnotatedClasses) {\n\t\t\tassertThat(runtimeHints).matches(reflection().onType(jsonAnnotatedClass));\n\t\t}",
                "is_abstract": "",
                "class_name": "OllamaRuntimeHintsTests",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-ollama/src/main/java/org/springframework/ai/ollama/OllamaEmbeddingClient.java",
        "class_names": [
            "OllamaEmbeddingClient"
        ],
        "imports": "import java.util.ArrayList;\nimport org.springframework.ai.embedding.Embedding;\nimport java.util.List;\nimport org.springframework.ai.embedding.EmbeddingOptions;\nimport org.springframework.util.Assert;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.ai.embedding.AbstractEmbeddingClient;\nimport org.slf4j.Logger;\nimport org.springframework.ai.document.Document;\nimport org.springframework.ai.ollama.api.OllamaApi;\nimport org.springframework.ai.ollama.api.OllamaOptions;\nimport org.springframework.ai.model.ModelOptionsUtils;\nimport org.springframework.util.StringUtils;\nimport org.springframework.ai.embedding.EmbeddingClient;\nimport org.springframework.ai.ollama.api.OllamaApi.EmbeddingRequest;\nimport org.springframework.ai.embedding.EmbeddingResponse;",
        "package_import_paths": {
            "org.springframework.ai.ollama.OllamaEmbeddingClient": "org.springframework.ai.ollama.OllamaEmbeddingClient",
            "org.springframework.ai.ollama.withModel": "org.springframework.ai.ollama.withModel",
            "org.springframework.ai.ollama.withDefaultOptions": "org.springframework.ai.ollama.withDefaultOptions",
            "org.springframework.ai.ollama.embed": "org.springframework.ai.ollama.embed",
            "org.springframework.ai.ollama.call": "org.springframework.ai.ollama.call",
            "org.springframework.ai.ollama.ollamaEmbeddingRequest": "org.springframework.ai.ollama.ollamaEmbeddingRequest",
            "org.springframework.ai.ollama.logger": "org.springframework.ai.ollama.logger",
            "org.springframework.ai.ollama.ollamaApi": "org.springframework.ai.ollama.ollamaApi",
            "org.springframework.ai.ollama.defaultOptions": "org.springframework.ai.ollama.defaultOptions"
        },
        "package": "package org.springframework.ai.ollama;",
        "property_declarations": [
            "private OllamaOptions defaultOptions = OllamaOptions.create().withModel(OllamaOptions.DEFAULT_MODEL);",
            "private final Logger logger = LoggerFactory.getLogger(getClass());",
            "private final OllamaApi ollamaApi;"
        ],
        "functions": [
            {
                "name": "withModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.defaultOptions.setModel(model);\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "OllamaEmbeddingClient",
                "annotations": []
            },
            {
                "name": "withDefaultOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.defaultOptions = options;\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "OllamaEmbeddingClient",
                "annotations": []
            },
            {
                "name": "embed",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return embed(document.getContent());",
                "is_abstract": "",
                "class_name": "OllamaEmbeddingClient",
                "annotations": []
            },
            {
                "name": "call",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notEmpty(request.getInstructions(), \"At least one text is required!\");\n\t\tif (request.getInstructions().size() != 1) {\n\t\t\tlogger.warn(\n\t\t\t\t\t\"Ollama Embedding does not support batch embedding. Will make multiple API calls to embed(Document)\");\n\t\t}\n\n\t\tList<List<Double>> embeddingList = new ArrayList<>();\n\t\tfor (String inputContent : request.getInstructions()) {\n\n\t\t\tvar ollamaEmbeddingRequest = ollamaEmbeddingRequest(inputContent, request.getOptions());\n\n\t\t\tOllamaApi.EmbeddingResponse response = this.ollamaApi.embeddings(ollamaEmbeddingRequest);\n\n\t\t\tembeddingList.add(response.embedding());\n\t\t}\n\t\tvar indexCounter = new AtomicInteger(0);\n\n\t\tList<Embedding> embeddings = embeddingList.stream()\n\t\t\t.map(e -> new Embedding(e, indexCounter.getAndIncrement()))\n\t\t\t.toList();\n\t\treturn new EmbeddingResponse(embeddings);",
                "is_abstract": "",
                "class_name": "OllamaEmbeddingClient",
                "annotations": []
            },
            {
                "name": "ollamaEmbeddingRequest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// runtime options\n\t\tOllamaOptions runtimeOptions = null;\n\t\tif (options != null) {\n\t\t\tif (options instanceof OllamaOptions ollamaOptions) {\n\t\t\t\truntimeOptions = ollamaOptions;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// currently EmbeddingOptions does not have any portable options to be\n\t\t\t\t// merged.\n\t\t\t\truntimeOptions = null;\n\t\t\t}\n\t\t}\n\n\t\tOllamaOptions mergedOptions = ModelOptionsUtils.merge(runtimeOptions, this.defaultOptions, OllamaOptions.class);\n\n\t\t// Override the model.\n\t\tif (!StringUtils.hasText(mergedOptions.getModel())) {\n\t\t\tthrow new IllegalArgumentException(\"Model is not set!\");\n\t\t}\n\t\tString model = mergedOptions.getModel();\n\t\treturn new EmbeddingRequest(model, inputContent, null,\n\t\t\t\tOllamaOptions.filterNonSupportedFields(mergedOptions.toMap()));",
                "is_abstract": "",
                "class_name": "OllamaEmbeddingClient",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-ollama/src/main/java/org/springframework/ai/ollama/OllamaChatClient.java",
        "class_names": [
            "OllamaChatClient"
        ],
        "imports": "import java.util.List;\nimport org.springframework.ai.chat.Generation;\nimport org.springframework.ai.chat.ChatClient;\nimport reactor.core.publisher.Flux;\nimport java.util.Base64;\nimport org.springframework.util.CollectionUtils;\nimport org.springframework.util.StringUtils;\nimport org.springframework.ai.ollama.api.OllamaApi;\nimport org.springframework.ai.chat.messages.Message;\nimport org.springframework.ai.ollama.metadata.OllamaChatResponseMetadata;\nimport org.springframework.ai.chat.prompt.ChatOptions;\nimport org.springframework.ai.chat.ChatResponse;\nimport org.springframework.ai.chat.messages.MessageType;\nimport org.springframework.ai.ollama.api.OllamaApi.Message.Role;\nimport org.springframework.ai.ollama.api.OllamaOptions;\nimport org.springframework.ai.model.ModelOptionsUtils;\nimport org.springframework.ai.chat.prompt.Prompt;\nimport org.springframework.util.Assert;\nimport org.springframework.ai.chat.StreamingChatClient;\nimport org.springframework.ai.chat.metadata.ChatGenerationMetadata;",
        "package_import_paths": {
            "org.springframework.ai.ollama.OllamaChatClient": "org.springframework.ai.ollama.OllamaChatClient",
            "org.springframework.ai.ollama.withModel": "org.springframework.ai.ollama.withModel",
            "org.springframework.ai.ollama.withDefaultOptions": "org.springframework.ai.ollama.withDefaultOptions",
            "org.springframework.ai.ollama.call": "org.springframework.ai.ollama.call",
            "org.springframework.ai.ollama.stream": "org.springframework.ai.ollama.stream",
            "org.springframework.ai.ollama.ollamaChatRequest": "org.springframework.ai.ollama.ollamaChatRequest",
            "org.springframework.ai.ollama.fromMediaDat": "org.springframework.ai.ollama.fromMediaDat",
            "org.springframework.ai.ollama.toRol": "org.springframework.ai.ollama.toRol",
            "org.springframework.ai.ollama.chatApi": "org.springframework.ai.ollama.chatApi",
            "org.springframework.ai.ollama.defaultOptions": "org.springframework.ai.ollama.defaultOptions"
        },
        "package": "package org.springframework.ai.ollama;",
        "property_declarations": [
            "private final OllamaApi chatApi;",
            "private OllamaOptions defaultOptions;"
        ],
        "functions": [
            {
                "name": "withModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.defaultOptions.setModel(model);\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "OllamaChatClient",
                "annotations": []
            },
            {
                "name": "withDefaultOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.defaultOptions = options;\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "OllamaChatClient",
                "annotations": []
            },
            {
                "name": "call",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "OllamaApi.ChatResponse response = this.chatApi.chat(ollamaChatRequest(prompt, false));\n\n\t\tvar generator = new Generation(response.message().content());\n\t\tif (response.promptEvalCount() != null && response.evalCount() != null) {\n\t\t\tgenerator = generator.withGenerationMetadata(ChatGenerationMetadata.from(\"unknown\", null));\n\t\t}\n\t\treturn new ChatResponse(List.of(generator), OllamaChatResponseMetadata.from(response));",
                "is_abstract": "",
                "class_name": "OllamaChatClient",
                "annotations": []
            },
            {
                "name": "stream",
                "parameters": [
                    ""
                ],
                "return_type": "new",
                "body": "Flux<OllamaApi.ChatResponse> response = this.chatApi.streamingChat(ollamaChatRequest(prompt, true));\n\n\t\treturn response.map(chunk -> {\n\t\t\tGeneration generation = (chunk.message() != null) ? new Generation(chunk.message().content())\n\t\t\t\t\t: new Generation(\"\");\n\t\t\tif (Boolean.TRUE.equals(chunk.done())) {\n\t\t\t\tgeneration = generation.withGenerationMetadata(ChatGenerationMetadata.from(\"unknown\", null));\n\t\t\t}\n\t\t\treturn new ChatResponse(List.of(generation), OllamaChatResponseMetadata.from(chunk));\n\t\t});",
                "is_abstract": "",
                "class_name": "OllamaChatClient",
                "annotations": []
            },
            {
                "name": "ollamaChatRequest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "List<OllamaApi.Message> ollamaMessages = prompt.getInstructions()\n\t\t\t.stream()\n\t\t\t.filter(message -> message.getMessageType() == MessageType.USER\n\t\t\t\t\t|| message.getMessageType() == MessageType.ASSISTANT\n\t\t\t\t\t|| message.getMessageType() == MessageType.SYSTEM)\n\t\t\t.map(m -> {\n\t\t\t\tvar messageBuilder = OllamaApi.Message.builder(toRole(m)).withContent(m.getContent());\n\n\t\t\t\tif (!CollectionUtils.isEmpty(m.getMedia())) {\n\t\t\t\t\tmessageBuilder\n\t\t\t\t\t\t.withImages(m.getMedia().stream().map(media -> this.fromMediaData(media.getData())).toList());\n\t\t\t\t}\n\t\t\t\treturn messageBuilder.build();\n\t\t\t})\n\t\t\t.toList();\n\n\t\t// runtime options\n\t\tOllamaOptions runtimeOptions = null;\n\t\tif (prompt.getOptions() != null) {\n\t\t\tif (prompt.getOptions() instanceof ChatOptions runtimeChatOptions) {\n\t\t\t\truntimeOptions = ModelOptionsUtils.copyToTarget(runtimeChatOptions, ChatOptions.class,\n\t\t\t\t\t\tOllamaOptions.class);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new IllegalArgumentException(\"Prompt options are not of type ChatOptions: \"\n\t\t\t\t\t\t+ prompt.getOptions().getClass().getSimpleName());\n\t\t\t}\n\t\t}\n\n\t\tOllamaOptions mergedOptions = ModelOptionsUtils.merge(runtimeOptions, this.defaultOptions, OllamaOptions.class);\n\n\t\t// Override the model.\n\t\tif (!StringUtils.hasText(mergedOptions.getModel())) {\n\t\t\tthrow new IllegalArgumentException(\"Model is not set!\");\n\t\t}\n\n\t\tString model = mergedOptions.getModel();\n\t\tOllamaApi.ChatRequest.Builder requestBuilder = OllamaApi.ChatRequest.builder(model)\n\t\t\t.withStream(stream)\n\t\t\t.withMessages(ollamaMessages)\n\t\t\t.withOptions(mergedOptions);\n\n\t\tif (mergedOptions.getFormat() != null) {\n\t\t\trequestBuilder.withFormat(mergedOptions.getFormat());\n\t\t}\n\n\t\tif (mergedOptions.getKeepAlive() != null) {\n\t\t\trequestBuilder.withKeepAlive(mergedOptions.getKeepAlive());\n\t\t}\n\n\t\treturn requestBuilder.build();",
                "is_abstract": "",
                "class_name": "OllamaChatClient",
                "annotations": []
            },
            {
                "name": "fromMediaData",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (mediaData instanceof byte[] bytes) {\n\t\t\treturn Base64.getEncoder().encodeToString(bytes);\n\t\t}\n\t\telse if (mediaData instanceof String text) {\n\t\t\treturn text;\n\t\t}\n\t\telse {\n\t\t\tthrow new IllegalArgumentException(\"Unsupported media data type: \" + mediaData.getClass().getSimpleName());\n\t\t}",
                "is_abstract": "",
                "class_name": "OllamaChatClient",
                "annotations": []
            },
            {
                "name": "toRole",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "switch (message.getMessageType()) {\n\t\t\tcase USER:\n\t\t\t\treturn Role.USER;\n\t\t\tcase ASSISTANT:\n\t\t\t\treturn Role.ASSISTANT;\n\t\t\tcase SYSTEM:\n\t\t\t\treturn Role.SYSTEM;\n\t\t\tdefault:\n\t\t\t\tthrow new IllegalArgumentException(\"Unsupported message type: \" + message.getMessageType());\n\t\t}",
                "is_abstract": "",
                "class_name": "OllamaChatClient",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-ollama/src/main/java/org/springframework/ai/ollama/api/OllamaOptions.java",
        "class_names": [
            "OllamaOptions"
        ],
        "imports": "import java.util.stream.Collectors;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport java.util.List;\nimport com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.springframework.ai.embedding.EmbeddingOptions;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport java.util.Map;\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport org.springframework.ai.chat.prompt.ChatOptions;\nimport com.fasterxml.jackson.annotation.JsonProperty;",
        "package_import_paths": {
            "org.springframework.ai.ollama.api.OllamaOptions": "org.springframework.ai.ollama.api.OllamaOptions",
            "org.springframework.ai.ollama.api.withModel": "org.springframework.ai.ollama.api.withModel",
            "org.springframework.ai.ollama.api.getModel": "org.springframework.ai.ollama.api.getModel",
            "org.springframework.ai.ollama.api.setModel": "org.springframework.ai.ollama.api.setModel",
            "org.springframework.ai.ollama.api.withFormat": "org.springframework.ai.ollama.api.withFormat",
            "org.springframework.ai.ollama.api.withKeepAliv": "org.springframework.ai.ollama.api.withKeepAliv",
            "org.springframework.ai.ollama.api.withUseNUMA": "org.springframework.ai.ollama.api.withUseNUMA",
            "org.springframework.ai.ollama.api.withNumCtx": "org.springframework.ai.ollama.api.withNumCtx",
            "org.springframework.ai.ollama.api.withNumBatch": "org.springframework.ai.ollama.api.withNumBatch",
            "org.springframework.ai.ollama.api.withNumGQA": "org.springframework.ai.ollama.api.withNumGQA",
            "org.springframework.ai.ollama.api.withNumGPU": "org.springframework.ai.ollama.api.withNumGPU",
            "org.springframework.ai.ollama.api.withMainGPU": "org.springframework.ai.ollama.api.withMainGPU",
            "org.springframework.ai.ollama.api.withLowVRAM": "org.springframework.ai.ollama.api.withLowVRAM",
            "org.springframework.ai.ollama.api.withF16KV": "org.springframework.ai.ollama.api.withF16KV",
            "org.springframework.ai.ollama.api.withLogitsAll": "org.springframework.ai.ollama.api.withLogitsAll",
            "org.springframework.ai.ollama.api.withVocabOnly": "org.springframework.ai.ollama.api.withVocabOnly",
            "org.springframework.ai.ollama.api.withUseMM": "org.springframework.ai.ollama.api.withUseMM",
            "org.springframework.ai.ollama.api.withUseMLo": "org.springframework.ai.ollama.api.withUseMLo",
            "org.springframework.ai.ollama.api.withRopeFrequencyBas": "org.springframework.ai.ollama.api.withRopeFrequencyBas",
            "org.springframework.ai.ollama.api.withRopeFrequencyScal": "org.springframework.ai.ollama.api.withRopeFrequencyScal",
            "org.springframework.ai.ollama.api.withNumThread": "org.springframework.ai.ollama.api.withNumThread",
            "org.springframework.ai.ollama.api.withNumK": "org.springframework.ai.ollama.api.withNumK",
            "org.springframework.ai.ollama.api.withSeed": "org.springframework.ai.ollama.api.withSeed",
            "org.springframework.ai.ollama.api.withNumPredict": "org.springframework.ai.ollama.api.withNumPredict",
            "org.springframework.ai.ollama.api.withTopK": "org.springframework.ai.ollama.api.withTopK",
            "org.springframework.ai.ollama.api.withTopP": "org.springframework.ai.ollama.api.withTopP",
            "org.springframework.ai.ollama.api.withTfsZ": "org.springframework.ai.ollama.api.withTfsZ",
            "org.springframework.ai.ollama.api.withTypicalP": "org.springframework.ai.ollama.api.withTypicalP",
            "org.springframework.ai.ollama.api.withRepeatLastN": "org.springframework.ai.ollama.api.withRepeatLastN",
            "org.springframework.ai.ollama.api.withTemperatur": "org.springframework.ai.ollama.api.withTemperatur",
            "org.springframework.ai.ollama.api.withRepeatPenalty": "org.springframework.ai.ollama.api.withRepeatPenalty",
            "org.springframework.ai.ollama.api.withPresencePenalty": "org.springframework.ai.ollama.api.withPresencePenalty",
            "org.springframework.ai.ollama.api.withFrequencyPenalty": "org.springframework.ai.ollama.api.withFrequencyPenalty",
            "org.springframework.ai.ollama.api.withMirostat": "org.springframework.ai.ollama.api.withMirostat",
            "org.springframework.ai.ollama.api.withMirostatTau": "org.springframework.ai.ollama.api.withMirostatTau",
            "org.springframework.ai.ollama.api.withMirostatEt": "org.springframework.ai.ollama.api.withMirostatEt",
            "org.springframework.ai.ollama.api.withPenalizeNewlin": "org.springframework.ai.ollama.api.withPenalizeNewlin",
            "org.springframework.ai.ollama.api.withSto": "org.springframework.ai.ollama.api.withSto",
            "org.springframework.ai.ollama.api.getFormat": "org.springframework.ai.ollama.api.getFormat",
            "org.springframework.ai.ollama.api.setFormat": "org.springframework.ai.ollama.api.setFormat",
            "org.springframework.ai.ollama.api.getKeepAliv": "org.springframework.ai.ollama.api.getKeepAliv",
            "org.springframework.ai.ollama.api.setKeepAliv": "org.springframework.ai.ollama.api.setKeepAliv",
            "org.springframework.ai.ollama.api.getUseNUMA": "org.springframework.ai.ollama.api.getUseNUMA",
            "org.springframework.ai.ollama.api.setUseNUMA": "org.springframework.ai.ollama.api.setUseNUMA",
            "org.springframework.ai.ollama.api.getNumCtx": "org.springframework.ai.ollama.api.getNumCtx",
            "org.springframework.ai.ollama.api.setNumCtx": "org.springframework.ai.ollama.api.setNumCtx",
            "org.springframework.ai.ollama.api.getNumBatch": "org.springframework.ai.ollama.api.getNumBatch",
            "org.springframework.ai.ollama.api.setNumBatch": "org.springframework.ai.ollama.api.setNumBatch",
            "org.springframework.ai.ollama.api.getNumGQA": "org.springframework.ai.ollama.api.getNumGQA",
            "org.springframework.ai.ollama.api.setNumGQA": "org.springframework.ai.ollama.api.setNumGQA",
            "org.springframework.ai.ollama.api.getNumGPU": "org.springframework.ai.ollama.api.getNumGPU",
            "org.springframework.ai.ollama.api.setNumGPU": "org.springframework.ai.ollama.api.setNumGPU",
            "org.springframework.ai.ollama.api.getMainGPU": "org.springframework.ai.ollama.api.getMainGPU",
            "org.springframework.ai.ollama.api.setMainGPU": "org.springframework.ai.ollama.api.setMainGPU",
            "org.springframework.ai.ollama.api.getLowVRAM": "org.springframework.ai.ollama.api.getLowVRAM",
            "org.springframework.ai.ollama.api.setLowVRAM": "org.springframework.ai.ollama.api.setLowVRAM",
            "org.springframework.ai.ollama.api.getF16KV": "org.springframework.ai.ollama.api.getF16KV",
            "org.springframework.ai.ollama.api.setF16KV": "org.springframework.ai.ollama.api.setF16KV",
            "org.springframework.ai.ollama.api.getLogitsAll": "org.springframework.ai.ollama.api.getLogitsAll",
            "org.springframework.ai.ollama.api.setLogitsAll": "org.springframework.ai.ollama.api.setLogitsAll",
            "org.springframework.ai.ollama.api.getVocabOnly": "org.springframework.ai.ollama.api.getVocabOnly",
            "org.springframework.ai.ollama.api.setVocabOnly": "org.springframework.ai.ollama.api.setVocabOnly",
            "org.springframework.ai.ollama.api.getUseMM": "org.springframework.ai.ollama.api.getUseMM",
            "org.springframework.ai.ollama.api.setUseMM": "org.springframework.ai.ollama.api.setUseMM",
            "org.springframework.ai.ollama.api.getUseMLo": "org.springframework.ai.ollama.api.getUseMLo",
            "org.springframework.ai.ollama.api.setUseMLo": "org.springframework.ai.ollama.api.setUseMLo",
            "org.springframework.ai.ollama.api.getRopeFrequencyBas": "org.springframework.ai.ollama.api.getRopeFrequencyBas",
            "org.springframework.ai.ollama.api.setRopeFrequencyBas": "org.springframework.ai.ollama.api.setRopeFrequencyBas",
            "org.springframework.ai.ollama.api.getRopeFrequencyScal": "org.springframework.ai.ollama.api.getRopeFrequencyScal",
            "org.springframework.ai.ollama.api.setRopeFrequencyScal": "org.springframework.ai.ollama.api.setRopeFrequencyScal",
            "org.springframework.ai.ollama.api.getNumThread": "org.springframework.ai.ollama.api.getNumThread",
            "org.springframework.ai.ollama.api.setNumThread": "org.springframework.ai.ollama.api.setNumThread",
            "org.springframework.ai.ollama.api.getNumK": "org.springframework.ai.ollama.api.getNumK",
            "org.springframework.ai.ollama.api.setNumK": "org.springframework.ai.ollama.api.setNumK",
            "org.springframework.ai.ollama.api.getSeed": "org.springframework.ai.ollama.api.getSeed",
            "org.springframework.ai.ollama.api.setSeed": "org.springframework.ai.ollama.api.setSeed",
            "org.springframework.ai.ollama.api.getNumPredict": "org.springframework.ai.ollama.api.getNumPredict",
            "org.springframework.ai.ollama.api.setNumPredict": "org.springframework.ai.ollama.api.setNumPredict",
            "org.springframework.ai.ollama.api.getTopK": "org.springframework.ai.ollama.api.getTopK",
            "org.springframework.ai.ollama.api.setTopK": "org.springframework.ai.ollama.api.setTopK",
            "org.springframework.ai.ollama.api.getTopP": "org.springframework.ai.ollama.api.getTopP",
            "org.springframework.ai.ollama.api.setTopP": "org.springframework.ai.ollama.api.setTopP",
            "org.springframework.ai.ollama.api.getTfsZ": "org.springframework.ai.ollama.api.getTfsZ",
            "org.springframework.ai.ollama.api.setTfsZ": "org.springframework.ai.ollama.api.setTfsZ",
            "org.springframework.ai.ollama.api.getTypicalP": "org.springframework.ai.ollama.api.getTypicalP",
            "org.springframework.ai.ollama.api.setTypicalP": "org.springframework.ai.ollama.api.setTypicalP",
            "org.springframework.ai.ollama.api.getRepeatLastN": "org.springframework.ai.ollama.api.getRepeatLastN",
            "org.springframework.ai.ollama.api.setRepeatLastN": "org.springframework.ai.ollama.api.setRepeatLastN",
            "org.springframework.ai.ollama.api.getTemperatur": "org.springframework.ai.ollama.api.getTemperatur",
            "org.springframework.ai.ollama.api.setTemperatur": "org.springframework.ai.ollama.api.setTemperatur",
            "org.springframework.ai.ollama.api.getRepeatPenalty": "org.springframework.ai.ollama.api.getRepeatPenalty",
            "org.springframework.ai.ollama.api.setRepeatPenalty": "org.springframework.ai.ollama.api.setRepeatPenalty",
            "org.springframework.ai.ollama.api.getPresencePenalty": "org.springframework.ai.ollama.api.getPresencePenalty",
            "org.springframework.ai.ollama.api.setPresencePenalty": "org.springframework.ai.ollama.api.setPresencePenalty",
            "org.springframework.ai.ollama.api.getFrequencyPenalty": "org.springframework.ai.ollama.api.getFrequencyPenalty",
            "org.springframework.ai.ollama.api.setFrequencyPenalty": "org.springframework.ai.ollama.api.setFrequencyPenalty",
            "org.springframework.ai.ollama.api.getMirostat": "org.springframework.ai.ollama.api.getMirostat",
            "org.springframework.ai.ollama.api.setMirostat": "org.springframework.ai.ollama.api.setMirostat",
            "org.springframework.ai.ollama.api.getMirostatTau": "org.springframework.ai.ollama.api.getMirostatTau",
            "org.springframework.ai.ollama.api.setMirostatTau": "org.springframework.ai.ollama.api.setMirostatTau",
            "org.springframework.ai.ollama.api.getMirostatEt": "org.springframework.ai.ollama.api.getMirostatEt",
            "org.springframework.ai.ollama.api.setMirostatEt": "org.springframework.ai.ollama.api.setMirostatEt",
            "org.springframework.ai.ollama.api.getPenalizeNewlin": "org.springframework.ai.ollama.api.getPenalizeNewlin",
            "org.springframework.ai.ollama.api.setPenalizeNewlin": "org.springframework.ai.ollama.api.setPenalizeNewlin",
            "org.springframework.ai.ollama.api.getSto": "org.springframework.ai.ollama.api.getSto",
            "org.springframework.ai.ollama.api.setSto": "org.springframework.ai.ollama.api.setSto",
            "org.springframework.ai.ollama.api.toM": "org.springframework.ai.ollama.api.toM",
            "org.springframework.ai.ollama.api.creat": "org.springframework.ai.ollama.api.creat",
            "org.springframework.ai.ollama.api.filterNonSupportedFields": "org.springframework.ai.ollama.api.filterNonSupportedFields",
            "org.springframework.ai.ollama.api.DEFAULT_MODEL": "org.springframework.ai.ollama.api.DEFAULT_MODEL",
            "org.springframework.ai.ollama.api.NON_SUPPORTED_FIELDS": "org.springframework.ai.ollama.api.NON_SUPPORTED_FIELDS",
            "org.springframework.ai.ollama.api.useNUMA": "org.springframework.ai.ollama.api.useNUMA",
            "org.springframework.ai.ollama.api.numCtx": "org.springframework.ai.ollama.api.numCtx",
            "org.springframework.ai.ollama.api.numBatch": "org.springframework.ai.ollama.api.numBatch",
            "org.springframework.ai.ollama.api.numGQA": "org.springframework.ai.ollama.api.numGQA",
            "org.springframework.ai.ollama.api.numGPU": "org.springframework.ai.ollama.api.numGPU",
            "org.springframework.ai.ollama.api.mainGPU": "org.springframework.ai.ollama.api.mainGPU",
            "org.springframework.ai.ollama.api.lowVRAM": "org.springframework.ai.ollama.api.lowVRAM",
            "org.springframework.ai.ollama.api.f16KV": "org.springframework.ai.ollama.api.f16KV",
            "org.springframework.ai.ollama.api.logitsAll": "org.springframework.ai.ollama.api.logitsAll",
            "org.springframework.ai.ollama.api.vocabOnly": "org.springframework.ai.ollama.api.vocabOnly",
            "org.springframework.ai.ollama.api.useMM": "org.springframework.ai.ollama.api.useMM",
            "org.springframework.ai.ollama.api.useMLo": "org.springframework.ai.ollama.api.useMLo",
            "org.springframework.ai.ollama.api.ropeFrequencyBas": "org.springframework.ai.ollama.api.ropeFrequencyBas",
            "org.springframework.ai.ollama.api.ropeFrequencyScal": "org.springframework.ai.ollama.api.ropeFrequencyScal",
            "org.springframework.ai.ollama.api.numThread": "org.springframework.ai.ollama.api.numThread",
            "org.springframework.ai.ollama.api.numK": "org.springframework.ai.ollama.api.numK",
            "org.springframework.ai.ollama.api.seed": "org.springframework.ai.ollama.api.seed",
            "org.springframework.ai.ollama.api.numPredict": "org.springframework.ai.ollama.api.numPredict",
            "org.springframework.ai.ollama.api.topK": "org.springframework.ai.ollama.api.topK",
            "org.springframework.ai.ollama.api.topP": "org.springframework.ai.ollama.api.topP",
            "org.springframework.ai.ollama.api.tfsZ": "org.springframework.ai.ollama.api.tfsZ",
            "org.springframework.ai.ollama.api.typicalP": "org.springframework.ai.ollama.api.typicalP",
            "org.springframework.ai.ollama.api.repeatLastN": "org.springframework.ai.ollama.api.repeatLastN",
            "org.springframework.ai.ollama.api.temperatur": "org.springframework.ai.ollama.api.temperatur",
            "org.springframework.ai.ollama.api.repeatPenalty": "org.springframework.ai.ollama.api.repeatPenalty",
            "org.springframework.ai.ollama.api.presencePenalty": "org.springframework.ai.ollama.api.presencePenalty",
            "org.springframework.ai.ollama.api.frequencyPenalty": "org.springframework.ai.ollama.api.frequencyPenalty",
            "org.springframework.ai.ollama.api.mirostat": "org.springframework.ai.ollama.api.mirostat",
            "org.springframework.ai.ollama.api.mirostatTau": "org.springframework.ai.ollama.api.mirostatTau",
            "org.springframework.ai.ollama.api.mirostatEt": "org.springframework.ai.ollama.api.mirostatEt",
            "org.springframework.ai.ollama.api.penalizeNewlin": "org.springframework.ai.ollama.api.penalizeNewlin",
            "org.springframework.ai.ollama.api.sto": "org.springframework.ai.ollama.api.sto",
            "org.springframework.ai.ollama.api.model": "org.springframework.ai.ollama.api.model",
            "org.springframework.ai.ollama.api.format": "org.springframework.ai.ollama.api.format",
            "org.springframework.ai.ollama.api.keepAliv": "org.springframework.ai.ollama.api.keepAliv"
        },
        "package": "package org.springframework.ai.ollama.api;",
        "property_declarations": [
            "@JsonProperty(\"typical_p\") private Float typicalP;",
            "@JsonProperty(\"mirostat_eta\") private Float mirostatEta;",
            "@JsonProperty(\"repeat_penalty\") private Float repeatPenalty;",
            "@JsonProperty(\"num_gqa\") private Integer numGQA;",
            "@JsonProperty(\"tfs_z\") private Float tfsZ;",
            "@JsonProperty(\"repeat_last_n\") private Integer repeatLastN;",
            "@JsonProperty(\"top_p\") private Float topP;",
            "@JsonProperty(\"mirostat\") private Integer mirostat;",
            "@JsonProperty(\"num_gpu\") private Integer numGPU;",
            "@JsonProperty(\"logits_all\") private Boolean logitsAll;",
            "@JsonProperty(\"use_mmap\") private Boolean useMMap;",
            "@JsonProperty(\"vocab_only\") private Boolean vocabOnly;",
            "@JsonProperty(\"seed\") private Integer seed;",
            "@JsonProperty(\"num_keep\") private Integer numKeep;",
            "@JsonProperty(\"num_ctx\") private Integer numCtx;",
            "public static final String DEFAULT_MODEL = OllamaModel.MISTRAL.id();",
            "@JsonProperty(\"rope_frequency_base\") private Float ropeFrequencyBase;",
            "@JsonProperty(\"keep_alive\") private String keepAlive;",
            "@JsonProperty(\"num_batch\") private Integer numBatch;",
            "@JsonProperty(\"num_predict\") private Integer numPredict;",
            "@JsonProperty(\"stop\") private List<String> stop;",
            "@JsonProperty(\"frequency_penalty\") private Float frequencyPenalty;",
            "private static final List<String> NON_SUPPORTED_FIELDS = List.of(\"model\", \"format\", \"keep_alive\");",
            "@JsonProperty(\"presence_penalty\") private Float presencePenalty;",
            "@JsonProperty(\"model\") private String model;",
            "@JsonProperty(\"f16_kv\") private Boolean f16KV;",
            "@JsonProperty(\"penalize_newline\") private Boolean penalizeNewline;",
            "@JsonProperty(\"numa\") private Boolean useNUMA;",
            "@JsonProperty(\"main_gpu\")private Integer mainGPU;",
            "@JsonProperty(\"low_vram\") private Boolean lowVRAM;",
            "@JsonProperty(\"num_thread\") private Integer numThread;",
            "@JsonProperty(\"use_mlock\") private Boolean useMLock;",
            "@JsonProperty(\"top_k\") private Integer topK;",
            "@JsonProperty(\"temperature\") private Float temperature;",
            "@JsonProperty(\"format\") private String format;",
            "@JsonProperty(\"mirostat_tau\") private Float mirostatTau;",
            "@JsonProperty(\"rope_frequency_scale\") private Float ropeFrequencyScale;"
        ],
        "functions": [
            {
                "name": "withModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.model = model;\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "getModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return model;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "setModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.model = model;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "withFormat",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.format = format;\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "withKeepAlive",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.keepAlive = keepAlive;\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "withUseNUMA",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.useNUMA = useNUMA;\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "withNumCtx",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.numCtx = numCtx;\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "withNumBatch",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.numBatch = numBatch;\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "withNumGQA",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.numGQA = numGQA;\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "withNumGPU",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.numGPU = numGPU;\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "withMainGPU",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.mainGPU = mainGPU;\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "withLowVRAM",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.lowVRAM = lowVRAM;\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "withF16KV",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.f16KV = f16KV;\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "withLogitsAll",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.logitsAll = logitsAll;\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "withVocabOnly",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.vocabOnly = vocabOnly;\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "withUseMMap",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.useMMap = useMMap;\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "withUseMLock",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.useMLock = useMLock;\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "withRopeFrequencyBase",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.ropeFrequencyBase = ropeFrequencyBase;\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "withRopeFrequencyScale",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.ropeFrequencyScale = ropeFrequencyScale;\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "withNumThread",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.numThread = numThread;\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "withNumKeep",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.numKeep = numKeep;\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "withSeed",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.seed = seed;\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "withNumPredict",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.numPredict = numPredict;\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "withTopK",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.topK = topK;\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "withTopP",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.topP = topP;\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "withTfsZ",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.tfsZ = tfsZ;\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "withTypicalP",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.typicalP = typicalP;\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "withRepeatLastN",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.repeatLastN = repeatLastN;\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "withTemperature",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.temperature = temperature;\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "withRepeatPenalty",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.repeatPenalty = repeatPenalty;\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "withPresencePenalty",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.presencePenalty = presencePenalty;\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "withFrequencyPenalty",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.frequencyPenalty = frequencyPenalty;\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "withMirostat",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.mirostat = mirostat;\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "withMirostatTau",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.mirostatTau = mirostatTau;\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "withMirostatEta",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.mirostatEta = mirostatEta;\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "withPenalizeNewline",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.penalizeNewline = penalizeNewline;\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "withStop",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.stop = stop;\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "getFormat",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.format;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "setFormat",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.format = format;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "getKeepAlive",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.keepAlive;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "setKeepAlive",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.keepAlive = keepAlive;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "getUseNUMA",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.useNUMA;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "setUseNUMA",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.useNUMA = useNUMA;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "getNumCtx",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.numCtx;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "setNumCtx",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.numCtx = numCtx;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "getNumBatch",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.numBatch;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "setNumBatch",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.numBatch = numBatch;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "getNumGQA",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.numGQA;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "setNumGQA",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.numGQA = numGQA;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "getNumGPU",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.numGPU;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "setNumGPU",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.numGPU = numGPU;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "getMainGPU",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.mainGPU;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "setMainGPU",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.mainGPU = mainGPU;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "getLowVRAM",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.lowVRAM;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "setLowVRAM",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.lowVRAM = lowVRAM;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "getF16KV",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.f16KV;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "setF16KV",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.f16KV = f16kv;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "getLogitsAll",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.logitsAll;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "setLogitsAll",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.logitsAll = logitsAll;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "getVocabOnly",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.vocabOnly;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "setVocabOnly",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.vocabOnly = vocabOnly;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "getUseMMap",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.useMMap;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "setUseMMap",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.useMMap = useMMap;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "getUseMLock",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.useMLock;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "setUseMLock",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.useMLock = useMLock;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "getRopeFrequencyBase",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.ropeFrequencyBase;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "setRopeFrequencyBase",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.ropeFrequencyBase = ropeFrequencyBase;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "getRopeFrequencyScale",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.ropeFrequencyScale;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "setRopeFrequencyScale",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.ropeFrequencyScale = ropeFrequencyScale;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "getNumThread",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.numThread;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "setNumThread",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.numThread = numThread;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "getNumKeep",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.numKeep;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "setNumKeep",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.numKeep = numKeep;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "getSeed",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.seed;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "setSeed",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.seed = seed;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "getNumPredict",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.numPredict;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "setNumPredict",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.numPredict = numPredict;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "getTopK",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.topK;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "setTopK",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.topK = topK;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "getTopP",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.topP;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "setTopP",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.topP = topP;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "getTfsZ",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.tfsZ;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "setTfsZ",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.tfsZ = tfsZ;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "getTypicalP",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.typicalP;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "setTypicalP",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.typicalP = typicalP;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "getRepeatLastN",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.repeatLastN;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "setRepeatLastN",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.repeatLastN = repeatLastN;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "getTemperature",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.temperature;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "setTemperature",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.temperature = temperature;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "getRepeatPenalty",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.repeatPenalty;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "setRepeatPenalty",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.repeatPenalty = repeatPenalty;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "getPresencePenalty",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.presencePenalty;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "setPresencePenalty",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.presencePenalty = presencePenalty;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "getFrequencyPenalty",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.frequencyPenalty;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "setFrequencyPenalty",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.frequencyPenalty = frequencyPenalty;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "getMirostat",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.mirostat;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "setMirostat",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.mirostat = mirostat;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "getMirostatTau",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.mirostatTau;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "setMirostatTau",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.mirostatTau = mirostatTau;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "getMirostatEta",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.mirostatEta;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "setMirostatEta",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.mirostatEta = mirostatEta;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "getPenalizeNewline",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.penalizeNewline;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "setPenalizeNewline",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.penalizeNewline = penalizeNewline;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "getStop",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.stop;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "setStop",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.stop = stop;",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "toMap",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "try {\n\t\t\tvar json = new ObjectMapper().writeValueAsString(this);\n\t\t\treturn new ObjectMapper().readValue(json, new TypeReference<Map<String, Object>>() {\n\t\t\t});\n\t\t}\n\t\tcatch (JsonProcessingException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "create",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new OllamaOptions();",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            },
            {
                "name": "filterNonSupportedFields",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return options.entrySet().stream()\n\t\t\t.filter(e -> !NON_SUPPORTED_FIELDS.contains(e.getKey()))\n\t\t\t.collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));",
                "is_abstract": "",
                "class_name": "OllamaOptions",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-ollama/src/main/java/org/springframework/ai/ollama/api/OllamaModel.java",
        "class_names": [],
        "imports": "",
        "package_import_paths": {
            "org.springframework.ai.ollama.api.id": "org.springframework.ai.ollama.api.id"
        },
        "package": "package org.springframework.ai.ollama.api;",
        "property_declarations": [
            "private final String id;"
        ],
        "functions": [
            {
                "name": "id",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.id;",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-ollama/src/main/java/org/springframework/ai/ollama/api/OllamaApi.java",
        "class_names": [
            "Builder",
            "OllamaApi",
            "OllamaResponseErrorHandler"
        ],
        "imports": "import java.util.List;\nimport reactor.core.publisher.Flux;\nimport java.util.function.Consumer;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport java.time.Instant;\nimport java.io.IOException;\nimport reactor.core.publisher.Mono;\nimport java.util.Map;\nimport org.apache.commons.logging.LogFactory;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.web.client.ResponseErrorHandler;\nimport java.time.Duration;\nimport org.springframework.util.StreamUtils;\nimport com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport org.apache.commons.logging.Log;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.client.ClientHttpResponse;\nimport org.springframework.web.client.RestClient;\nimport org.springframework.util.Assert;\nimport org.springframework.web.reactive.function.client.WebClient;\nimport java.util.Objects;",
        "package_import_paths": {
            "org.springframework.ai.ollama.api.OllamaApi": "org.springframework.ai.ollama.api.OllamaApi",
            "org.springframework.ai.ollama.api.OllamaResponseErrorHandler": "org.springframework.ai.ollama.api.OllamaResponseErrorHandler",
            "org.springframework.ai.ollama.api.Builder": "org.springframework.ai.ollama.api.Builder",
            "org.springframework.ai.ollama.api.hasError": "org.springframework.ai.ollama.api.hasError",
            "org.springframework.ai.ollama.api.handleError": "org.springframework.ai.ollama.api.handleError",
            "org.springframework.ai.ollama.api.builder": "org.springframework.ai.ollama.api.builder",
            "org.springframework.ai.ollama.api.withModel": "org.springframework.ai.ollama.api.withModel",
            "org.springframework.ai.ollama.api.withFormat": "org.springframework.ai.ollama.api.withFormat",
            "org.springframework.ai.ollama.api.withOptions": "org.springframework.ai.ollama.api.withOptions",
            "org.springframework.ai.ollama.api.withSystem": "org.springframework.ai.ollama.api.withSystem",
            "org.springframework.ai.ollama.api.withTemplat": "org.springframework.ai.ollama.api.withTemplat",
            "org.springframework.ai.ollama.api.withContext": "org.springframework.ai.ollama.api.withContext",
            "org.springframework.ai.ollama.api.withStream": "org.springframework.ai.ollama.api.withStream",
            "org.springframework.ai.ollama.api.withRaw": "org.springframework.ai.ollama.api.withRaw",
            "org.springframework.ai.ollama.api.withImages": "org.springframework.ai.ollama.api.withImages",
            "org.springframework.ai.ollama.api.withKeepAliv": "org.springframework.ai.ollama.api.withKeepAliv",
            "org.springframework.ai.ollama.api.build": "org.springframework.ai.ollama.api.build",
            "org.springframework.ai.ollama.api.generat": "org.springframework.ai.ollama.api.generat",
            "org.springframework.ai.ollama.api.generateStreamin": "org.springframework.ai.ollama.api.generateStreamin",
            "org.springframework.ai.ollama.api.withContent": "org.springframework.ai.ollama.api.withContent",
            "org.springframework.ai.ollama.api.withMessages": "org.springframework.ai.ollama.api.withMessages",
            "org.springframework.ai.ollama.api.chat": "org.springframework.ai.ollama.api.chat",
            "org.springframework.ai.ollama.api.streamingChat": "org.springframework.ai.ollama.api.streamingChat",
            "org.springframework.ai.ollama.api.embeddings": "org.springframework.ai.ollama.api.embeddings",
            "org.springframework.ai.ollama.api.logger": "org.springframework.ai.ollama.api.logger",
            "org.springframework.ai.ollama.api.DEFAULT_BASE_URL": "org.springframework.ai.ollama.api.DEFAULT_BASE_URL",
            "org.springframework.ai.ollama.api.REQUEST_BODY_NULL_ERROR": "org.springframework.ai.ollama.api.REQUEST_BODY_NULL_ERROR",
            "org.springframework.ai.ollama.api.responseErrorHandler": "org.springframework.ai.ollama.api.responseErrorHandler",
            "org.springframework.ai.ollama.api.restClient": "org.springframework.ai.ollama.api.restClient",
            "org.springframework.ai.ollama.api.webClient": "org.springframework.ai.ollama.api.webClient",
            "org.springframework.ai.ollama.api.model": "org.springframework.ai.ollama.api.model",
            "org.springframework.ai.ollama.api.prompt": "org.springframework.ai.ollama.api.prompt",
            "org.springframework.ai.ollama.api.format": "org.springframework.ai.ollama.api.format",
            "org.springframework.ai.ollama.api.options": "org.springframework.ai.ollama.api.options",
            "org.springframework.ai.ollama.api.system": "org.springframework.ai.ollama.api.system",
            "org.springframework.ai.ollama.api.templat": "org.springframework.ai.ollama.api.templat",
            "org.springframework.ai.ollama.api.context": "org.springframework.ai.ollama.api.context",
            "org.springframework.ai.ollama.api.stream": "org.springframework.ai.ollama.api.stream",
            "org.springframework.ai.ollama.api.raw": "org.springframework.ai.ollama.api.raw",
            "org.springframework.ai.ollama.api.images": "org.springframework.ai.ollama.api.images",
            "org.springframework.ai.ollama.api.keepAliv": "org.springframework.ai.ollama.api.keepAliv",
            "org.springframework.ai.ollama.api.rol": "org.springframework.ai.ollama.api.rol",
            "org.springframework.ai.ollama.api.content": "org.springframework.ai.ollama.api.content",
            "org.springframework.ai.ollama.api.messages": "org.springframework.ai.ollama.api.messages"
        },
        "package": "package org.springframework.ai.ollama.api;",
        "property_declarations": [
            "public static final String REQUEST_BODY_NULL_ERROR = \"The request body can not be null.\";",
            "private final static String DEFAULT_BASE_URL = \"http://localhost:11434\";",
            "private final WebClient webClient;",
            "private Map<String, Object> options;",
            "private final Role role;",
            "private Map<String, Object> options = Map.of();",
            "private List<String> images;",
            "private final String prompt;",
            "private String keepAlive;",
            "private boolean stream = false;",
            "private String model;",
            "private String format;",
            "private String template;",
            "private final ResponseErrorHandler responseErrorHandler;",
            "private static final Log logger = LogFactory.getLog(OllamaApi.class);",
            "private Boolean stream;",
            "private final RestClient restClient;",
            "private List<Integer> context;",
            "private List<Message> messages = List.of();",
            "private String content;",
            "private String system;",
            "private final String model;",
            "private Boolean raw;"
        ],
        "functions": [
            {
                "name": "hasError",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return response.getStatusCode().isError();",
                "is_abstract": "",
                "class_name": "OllamaApi OllamaResponseErrorHandler",
                "annotations": []
            },
            {
                "name": "handleError",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (response.getStatusCode().isError()) {\n\t\t\t\tint statusCode = response.getStatusCode().value();\n\t\t\t\tString statusText = response.getStatusText();\n\t\t\t\tString message = StreamUtils.copyToString(response.getBody(), java.nio.charset.StandardCharsets.UTF_8);\n\t\t\t\tlogger.warn(String.format(\"[%s] %s - %s\", statusCode, statusText, message));\n\t\t\t\tthrow new RuntimeException(String.format(\"[%s] %s - %s\", statusCode, statusText, message));\n\t\t\t}",
                "is_abstract": "",
                "class_name": "OllamaApi OllamaResponseErrorHandler",
                "annotations": [
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"model\")",
                    "@JsonProperty(\"prompt\")",
                    "@JsonProperty(\"format\")",
                    "@JsonProperty(\"options\")",
                    "@JsonProperty(\"system\")",
                    "@JsonProperty(\"template\")",
                    "@JsonProperty(\"context\")",
                    "@JsonProperty(\"stream\")",
                    "@JsonProperty(\"raw\")",
                    "@JsonProperty(\"images\")",
                    "@JsonProperty(\"keep_alive\")"
                ]
            },
            {
                "name": "builder",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Builder(prompt);",
                "is_abstract": "",
                "class_name": "OllamaApi OllamaResponseErrorHandler",
                "annotations": []
            },
            {
                "name": "withModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.model = model;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "OllamaApi OllamaResponseErrorHandler Builder",
                "annotations": []
            },
            {
                "name": "withFormat",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.format = format;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "OllamaApi OllamaResponseErrorHandler Builder",
                "annotations": []
            },
            {
                "name": "withOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options = options;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "OllamaApi OllamaResponseErrorHandler Builder",
                "annotations": []
            },
            {
                "name": "withSystem",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.system = system;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "OllamaApi OllamaResponseErrorHandler Builder",
                "annotations": []
            },
            {
                "name": "withTemplate",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.template = template;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "OllamaApi OllamaResponseErrorHandler Builder",
                "annotations": []
            },
            {
                "name": "withContext",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.context = context;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "OllamaApi OllamaResponseErrorHandler Builder",
                "annotations": []
            },
            {
                "name": "withStream",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.stream = stream;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "OllamaApi OllamaResponseErrorHandler Builder",
                "annotations": []
            },
            {
                "name": "withRaw",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.raw = raw;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "OllamaApi OllamaResponseErrorHandler Builder",
                "annotations": []
            },
            {
                "name": "withImages",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.images = images;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "OllamaApi OllamaResponseErrorHandler Builder",
                "annotations": []
            },
            {
                "name": "withKeepAlive",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.keepAlive = keepAlive;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "OllamaApi OllamaResponseErrorHandler Builder",
                "annotations": []
            },
            {
                "name": "build",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new GenerateRequest(model, prompt, format, options, system, template, context, stream, raw, images, keepAlive);",
                "is_abstract": "",
                "class_name": "OllamaApi OllamaResponseErrorHandler Builder",
                "annotations": [
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"model\")",
                    "@JsonProperty(\"created_at\")",
                    "@JsonProperty(\"response\")",
                    "@JsonProperty(\"done\")",
                    "@JsonProperty(\"context\")",
                    "@JsonProperty(\"total_duration\")",
                    "@JsonProperty(\"load_duration\")",
                    "@JsonProperty(\"prompt_eval_count\")",
                    "@JsonProperty(\"prompt_eval_duration\")",
                    "@JsonProperty(\"eval_count\")",
                    "@JsonProperty(\"eval_duration\")"
                ]
            },
            {
                "name": "generate",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(completionRequest, REQUEST_BODY_NULL_ERROR);\n\t\tAssert.isTrue(completionRequest.stream() == false, \"Stream mode must be disabled.\");\n\n\t\treturn this.restClient.post()\n\t\t\t.uri(\"/api/generate\")\n\t\t\t.body(completionRequest)\n\t\t\t.retrieve()\n\t\t\t.onStatus(this.responseErrorHandler)\n\t\t\t.body(GenerateResponse.class);",
                "is_abstract": "",
                "class_name": "OllamaApi OllamaResponseErrorHandler Builder",
                "annotations": []
            },
            {
                "name": "generateStreaming",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(completionRequest, REQUEST_BODY_NULL_ERROR);\n\t\tAssert.isTrue(completionRequest.stream(), \"Request must set the steam property to true.\");\n\n\t\treturn webClient.post()\n\t\t\t.uri(\"/api/generate\")\n\t\t\t.body(Mono.just(completionRequest), GenerateRequest.class)\n\t\t\t.retrieve()\n\t\t\t.bodyToFlux(GenerateResponse.class)\n\t\t\t.handle((data, sink) -> {\n\t\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\t\tlogger.trace(data);\n\t\t\t\t}\n\t\t\t\tsink.next(data);\n\t\t\t});",
                "is_abstract": "",
                "class_name": "OllamaApi OllamaResponseErrorHandler Builder",
                "annotations": [
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"role\")",
                    "@JsonProperty(\"content\")",
                    "@JsonProperty(\"images\")",
                    "@JsonProperty(\"system\")",
                    "@JsonProperty(\"user\")",
                    "@JsonProperty(\"assistant\")"
                ]
            },
            {
                "name": "withContent",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.content = content;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "OllamaApi OllamaResponseErrorHandler Builder Builder",
                "annotations": []
            },
            {
                "name": "withMessages",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.messages = messages;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "OllamaApi OllamaResponseErrorHandler Builder Builder Builder",
                "annotations": []
            },
            {
                "name": "chat",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(chatRequest, REQUEST_BODY_NULL_ERROR);\n\t\tAssert.isTrue(!chatRequest.stream(), \"Stream mode must be disabled.\");\n\n\t\treturn this.restClient.post()\n\t\t\t.uri(\"/api/chat\")\n\t\t\t.body(chatRequest)\n\t\t\t.retrieve()\n\t\t\t.onStatus(this.responseErrorHandler)\n\t\t\t.body(ChatResponse.class);",
                "is_abstract": "",
                "class_name": "OllamaApi OllamaResponseErrorHandler Builder Builder Builder",
                "annotations": []
            },
            {
                "name": "streamingChat",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(chatRequest, REQUEST_BODY_NULL_ERROR);\n\t\tAssert.isTrue(chatRequest.stream(), \"Request must set the steam property to true.\");\n\n\t\treturn webClient.post()\n\t\t\t.uri(\"/api/chat\")\n\t\t\t.body(Mono.just(chatRequest), GenerateRequest.class)\n\t\t\t.retrieve()\n\t\t\t.bodyToFlux(ChatResponse.class)\n\t\t\t.handle((data, sink) -> {\n\t\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\t\tlogger.trace(data);\n\t\t\t\t}\n\t\t\t\tsink.next(data);\n\t\t\t});",
                "is_abstract": "",
                "class_name": "OllamaApi OllamaResponseErrorHandler Builder Builder Builder",
                "annotations": [
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"model\")",
                    "@JsonProperty(\"prompt\")",
                    "@JsonProperty(\"keep_alive\")",
                    "@JsonProperty(\"options\")",
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"embedding\")"
                ]
            },
            {
                "name": "embeddings",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(embeddingRequest, REQUEST_BODY_NULL_ERROR);\n\n\t\treturn this.restClient.post()\n\t\t\t.uri(\"/api/embeddings\")\n\t\t\t.body(embeddingRequest)\n\t\t\t.retrieve()\n\t\t\t.onStatus(this.responseErrorHandler)\n\t\t\t.body(EmbeddingResponse.class);",
                "is_abstract": "",
                "class_name": "OllamaApi OllamaResponseErrorHandler Builder Builder Builder",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-ollama/src/main/java/org/springframework/ai/ollama/metadata/OllamaChatResponseMetadata.java",
        "class_names": [
            "OllamaChatResponseMetadata"
        ],
        "imports": "import org.springframework.ai.chat.metadata.Usage;\nimport org.springframework.ai.ollama.api.OllamaApi;\nimport org.springframework.ai.chat.metadata.ChatResponseMetadata;\nimport org.springframework.util.Assert;",
        "package_import_paths": {
            "org.springframework.ai.ollama.metadata.OllamaChatResponseMetadat": "org.springframework.ai.ollama.metadata.OllamaChatResponseMetadat",
            "org.springframework.ai.ollama.metadata.from": "org.springframework.ai.ollama.metadata.from",
            "org.springframework.ai.ollama.metadata.getUs": "org.springframework.ai.ollama.metadata.getUs",
            "org.springframework.ai.ollama.metadata.toStrin": "org.springframework.ai.ollama.metadata.toStrin",
            "org.springframework.ai.ollama.metadata.AI_METADATA_STRING": "org.springframework.ai.ollama.metadata.AI_METADATA_STRING",
            "org.springframework.ai.ollama.metadata.us": "org.springframework.ai.ollama.metadata.us"
        },
        "package": "package org.springframework.ai.ollama.metadata;",
        "property_declarations": [
            "private final Usage usage;",
            "protected static final String AI_METADATA_STRING = \"{ @type: %1$s, usage: %2$s, rateLimit: %3$s }\";"
        ],
        "functions": [
            {
                "name": "from",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(response, \"OllamaApi.ChatResponse must not be null\");\n\t\tUsage usage = OllamaUsage.from(response);\n\t\treturn new OllamaChatResponseMetadata(usage);",
                "is_abstract": "",
                "class_name": "OllamaChatResponseMetadata",
                "annotations": []
            },
            {
                "name": "getUsage",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.usage;",
                "is_abstract": "",
                "class_name": "OllamaChatResponseMetadata",
                "annotations": []
            },
            {
                "name": "toString",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return AI_METADATA_STRING.formatted(getClass().getTypeName(), getUsage(), getRateLimit());",
                "is_abstract": "",
                "class_name": "OllamaChatResponseMetadata",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-ollama/src/main/java/org/springframework/ai/ollama/metadata/OllamaUsage.java",
        "class_names": [
            "OllamaUsage"
        ],
        "imports": "import org.springframework.ai.ollama.api.OllamaApi;\nimport java.util.Optional;\nimport org.springframework.ai.chat.metadata.Usage;\nimport org.springframework.util.Assert;",
        "package_import_paths": {
            "org.springframework.ai.ollama.metadata.OllamaUs": "org.springframework.ai.ollama.metadata.OllamaUs",
            "org.springframework.ai.ollama.metadata.from": "org.springframework.ai.ollama.metadata.from",
            "org.springframework.ai.ollama.metadata.getPromptTokens": "org.springframework.ai.ollama.metadata.getPromptTokens",
            "org.springframework.ai.ollama.metadata.getGenerationTokens": "org.springframework.ai.ollama.metadata.getGenerationTokens",
            "org.springframework.ai.ollama.metadata.toStrin": "org.springframework.ai.ollama.metadata.toStrin",
            "org.springframework.ai.ollama.metadata.AI_USAGE_STRING": "org.springframework.ai.ollama.metadata.AI_USAGE_STRING",
            "org.springframework.ai.ollama.metadata.OllamaApi": "org.springframework.ai.ollama.metadata.OllamaApi"
        },
        "package": "package org.springframework.ai.ollama.metadata;",
        "property_declarations": [
            "protected static final String AI_USAGE_STRING = \"{ promptTokens: %1$d, generationTokens: %2$d, totalTokens: %3$d }\";",
            "private final OllamaApi.ChatResponse response;"
        ],
        "functions": [
            {
                "name": "from",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(response, \"OllamaApi.ChatResponse must not be null\");\n\t\treturn new OllamaUsage(response);",
                "is_abstract": "",
                "class_name": "OllamaUsage",
                "annotations": []
            },
            {
                "name": "getPromptTokens",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return Optional.ofNullable(response.promptEvalCount()).map(Integer::longValue).orElse(0L);",
                "is_abstract": "",
                "class_name": "OllamaUsage",
                "annotations": []
            },
            {
                "name": "getGenerationTokens",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return Optional.ofNullable(response.evalCount()).map(Integer::longValue).orElse(0L);",
                "is_abstract": "",
                "class_name": "OllamaUsage",
                "annotations": []
            },
            {
                "name": "toString",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return AI_USAGE_STRING.formatted(getPromptTokens(), getGenerationTokens(), getTotalTokens());",
                "is_abstract": "",
                "class_name": "OllamaUsage",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-ollama/src/main/java/org/springframework/ai/ollama/aot/OllamaRuntimeHints.java",
        "class_names": [
            "OllamaRuntimeHints"
        ],
        "imports": "import org.springframework.aot.hint.MemberCategory;\nimport org.springframework.aot.hint.RuntimeHints;\nimport org.springframework.aot.hint.RuntimeHintsRegistrar;\nimport org.springframework.ai.ollama.api.OllamaOptions;\nimport org.springframework.ai.ollama.api.OllamaApi;\nimport static org.springframework.ai.aot.AiRuntimeHints.findJsonAnnotatedClassesInPackage;",
        "package_import_paths": {
            "org.springframework.ai.ollama.aot.OllamaRuntimeHints": "org.springframework.ai.ollama.aot.OllamaRuntimeHints",
            "org.springframework.ai.ollama.aot.registerHints": "org.springframework.ai.ollama.aot.registerHints"
        },
        "package": "package org.springframework.ai.ollama.aot;",
        "property_declarations": [],
        "functions": [
            {
                "name": "registerHints",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var mcs = MemberCategory.values();\n\t\tfor (var tr : findJsonAnnotatedClassesInPackage(OllamaApi.class))\n\t\t\thints.reflection().registerType(tr, mcs);\n\t\tfor (var tr : findJsonAnnotatedClassesInPackage(OllamaOptions.class))\n\t\t\thints.reflection().registerType(tr, mcs);",
                "is_abstract": "",
                "class_name": "OllamaRuntimeHints",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-vertex-ai-gemini/src/test/java/org/springframework/ai/vertexai/gemini/VertexAiGeminiChatClientIT.java",
        "class_names": [
            "TestConfiguration",
            "VertexAiGeminiChatClientIT"
        ],
        "imports": "import java.util.stream.Collectors;\nimport org.springframework.util.MimeTypeUtils;\nimport java.util.List;\nimport org.springframework.ai.chat.Generation;\nimport org.springframework.ai.chat.prompt.SystemPromptTemplate;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.core.io.Resource;\nimport com.google.cloud.vertexai.Transport;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.ai.parser.MapOutputParser;\nimport java.io.IOException;\nimport org.springframework.ai.chat.messages.Message;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport java.util.Map;\nimport org.springframework.ai.parser.BeanOutputParser;\nimport org.springframework.beans.factory.annotation.Value;\nimport java.util.Arrays;\nimport org.springframework.ai.chat.ChatResponse;\nimport org.springframework.ai.chat.messages.UserMessage;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.ai.chat.messages.Media;\nimport org.springframework.ai.chat.prompt.PromptTemplate;\nimport org.springframework.ai.parser.ListOutputParser;\nimport org.springframework.ai.chat.messages.AssistantMessage;\nimport com.google.cloud.vertexai.VertexAI;\nimport org.springframework.boot.SpringBootConfiguration;\nimport org.springframework.ai.chat.prompt.Prompt;\nimport org.springframework.core.io.ClassPathResource;\nimport org.springframework.core.convert.support.DefaultConversionService;\nimport org.junit.jupiter.api.Test;",
        "package_import_paths": {
            "org.springframework.ai.vertexai.gemini.VertexAiGeminiChatClientIT": "org.springframework.ai.vertexai.gemini.VertexAiGeminiChatClientIT",
            "org.springframework.ai.vertexai.gemini.TestConfiguration": "org.springframework.ai.vertexai.gemini.TestConfiguration",
            "org.springframework.ai.vertexai.gemini.roleTest": "org.springframework.ai.vertexai.gemini.roleTest",
            "org.springframework.ai.vertexai.gemini.outputParser": "org.springframework.ai.vertexai.gemini.outputParser",
            "org.springframework.ai.vertexai.gemini.mapOutputParser": "org.springframework.ai.vertexai.gemini.mapOutputParser",
            "org.springframework.ai.vertexai.gemini.beanOutputParserRecords": "org.springframework.ai.vertexai.gemini.beanOutputParserRecords",
            "org.springframework.ai.vertexai.gemini.textStream": "org.springframework.ai.vertexai.gemini.textStream",
            "org.springframework.ai.vertexai.gemini.beanStreamOutputParserRecords": "org.springframework.ai.vertexai.gemini.beanStreamOutputParserRecords",
            "org.springframework.ai.vertexai.gemini.multiModalityTest": "org.springframework.ai.vertexai.gemini.multiModalityTest",
            "org.springframework.ai.vertexai.gemini.vertexAiApi": "org.springframework.ai.vertexai.gemini.vertexAiApi",
            "org.springframework.ai.vertexai.gemini.vertexAiEmbeddin": "org.springframework.ai.vertexai.gemini.vertexAiEmbeddin",
            "org.springframework.ai.vertexai.gemini.privat": "org.springframework.ai.vertexai.gemini.privat",
            "org.springframework.ai.vertexai.gemini.systemResour": "org.springframework.ai.vertexai.gemini.systemResour"
        },
        "package": "package org.springframework.ai.vertexai.gemini;",
        "property_declarations": [
            "@Autowired\n\tprivate VertexAiGeminiChatClient client;",
            "@Value(\"classpath:/prompts/system-message.st\")\n\tprivate Resource systemResource;"
        ],
        "functions": [
            {
                "name": "roleTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String request = \"Tell me about 3 famous pirates from the Golden Age of Piracy and why they did.\";\n\t\tString name = \"Bob\";\n\t\tString voice = \"pirate\";\n\t\tUserMessage userMessage = new UserMessage(request);\n\t\tSystemPromptTemplate systemPromptTemplate = new SystemPromptTemplate(systemResource);\n\t\tMessage systemMessage = systemPromptTemplate.createMessage(Map.of(\"name\", name, \"voice\", voice));\n\t\tPrompt prompt = new Prompt(List.of(userMessage, systemMessage));\n\t\tChatResponse response = client.call(prompt);\n\t\tassertThat(response.getResult().getOutput().getContent()).contains(\"Blackbeard\");",
                "is_abstract": "",
                "class_name": "VertexAiGeminiChatClientIT",
                "annotations": []
            },
            {
                "name": "outputParser",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "DefaultConversionService conversionService = new DefaultConversionService();\n\t\tListOutputParser outputParser = new ListOutputParser(conversionService);\n\n\t\tString format = outputParser.getFormat();\n\t\tString template = \"\"\"\n\t\t\t\tList five {subject}\n\t\t\t\t{format}\n\t\t\t\t\"\"\";\n\t\tPromptTemplate promptTemplate = new PromptTemplate(template,\n\t\t\t\tMap.of(\"subject\", \"ice cream flavors.\", \"format\", format));\n\t\tPrompt prompt = new Prompt(promptTemplate.createMessage());\n\t\tGeneration generation = this.client.call(prompt).getResult();\n\n\t\tList<String> list = outputParser.parse(generation.getOutput().getContent());\n\t\tassertThat(list).hasSize(5);",
                "is_abstract": "",
                "class_name": "VertexAiGeminiChatClientIT",
                "annotations": []
            },
            {
                "name": "mapOutputParser",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "MapOutputParser outputParser = new MapOutputParser();\n\n\t\tString format = outputParser.getFormat();\n\t\tString template = \"\"\"\n\t\t\t\tProvide me a List of {subject}\n\t\t\t\tRemove the ```json outer brackets.\n\t\t\t\t{format}\n\t\t\t\t\"\"\";\n\t\tPromptTemplate promptTemplate = new PromptTemplate(template,\n\t\t\t\tMap.of(\"subject\", \"an array of numbers from 1 to 9 under they key name 'numbers'\", \"format\", format));\n\t\tPrompt prompt = new Prompt(promptTemplate.createMessage());\n\t\tGeneration generation = client.call(prompt).getResult();\n\n\t\tMap<String, Object> result = outputParser.parse(generation.getOutput().getContent());\n\t\tassertThat(result.get(\"numbers\")).isEqualTo(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9));",
                "is_abstract": "",
                "class_name": "VertexAiGeminiChatClientIT",
                "annotations": []
            },
            {
                "name": "beanOutputParserRecords",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "BeanOutputParser<ActorsFilmsRecord> outputParser = new BeanOutputParser<>(ActorsFilmsRecord.class);\n\n\t\tString format = outputParser.getFormat();\n\t\tString template = \"\"\"\n\t\t\t\tGenerate the filmography of 5 movies for Tom Hanks.\n\t\t\t\tRemove the ```json outer brackets.\n\t\t\t\t{format}\n\t\t\t\t\"\"\";\n\t\tPromptTemplate promptTemplate = new PromptTemplate(template, Map.of(\"format\", format));\n\t\tPrompt prompt = new Prompt(promptTemplate.createMessage());\n\t\tGeneration generation = client.call(prompt).getResult();\n\n\t\tActorsFilmsRecord actorsFilms = outputParser.parse(generation.getOutput().getContent());\n\t\tassertThat(actorsFilms.actor()).isEqualTo(\"Tom Hanks\");\n\t\tassertThat(actorsFilms.movies()).hasSize(5);",
                "is_abstract": "",
                "class_name": "VertexAiGeminiChatClientIT",
                "annotations": []
            },
            {
                "name": "textStream",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String generationTextFromStream = client.stream(new Prompt(\"Explain Bulgaria? Answer in 10 paragraphs.\"))\n\t\t\t.collectList()\n\t\t\t.block()\n\t\t\t.stream()\n\t\t\t.map(ChatResponse::getResults)\n\t\t\t.flatMap(List::stream)\n\t\t\t.map(Generation::getOutput)\n\t\t\t.map(AssistantMessage::getContent)\n\t\t\t.collect(Collectors.joining());\n\n\t\t// logger.info(\"\" + actorsFilms);\n\t\tassertThat(generationTextFromStream).isNotEmpty();",
                "is_abstract": "",
                "class_name": "VertexAiGeminiChatClientIT",
                "annotations": []
            },
            {
                "name": "beanStreamOutputParserRecords",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "BeanOutputParser<ActorsFilmsRecord> outputParser = new BeanOutputParser<>(ActorsFilmsRecord.class);\n\n\t\tString format = outputParser.getFormat();\n\t\tString template = \"\"\"\n\t\t\t\tGenerate the filmography of 5 movies for Tom Hanks.\n\t\t\t\tRemove the ```json outer brackets.\n\t\t\t\t{format}\n\t\t\t\t\"\"\";\n\t\tPromptTemplate promptTemplate = new PromptTemplate(template, Map.of(\"format\", format));\n\t\tPrompt prompt = new Prompt(promptTemplate.createMessage());\n\n\t\tString generationTextFromStream = client.stream(prompt)\n\t\t\t.collectList()\n\t\t\t.block()\n\t\t\t.stream()\n\t\t\t.map(ChatResponse::getResults)\n\t\t\t.flatMap(List::stream)\n\t\t\t.map(Generation::getOutput)\n\t\t\t.map(AssistantMessage::getContent)\n\t\t\t.collect(Collectors.joining());\n\n\t\tActorsFilmsRecord actorsFilms = outputParser.parse(generationTextFromStream);\n\t\t// logger.info(\"\" + actorsFilms);\n\t\tassertThat(actorsFilms.actor()).isEqualTo(\"Tom Hanks\");\n\t\tassertThat(actorsFilms.movies()).hasSize(5);",
                "is_abstract": "",
                "class_name": "VertexAiGeminiChatClientIT",
                "annotations": []
            },
            {
                "name": "multiModalityTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "byte[] data = new ClassPathResource(\"/vertex.test.png\").getContentAsByteArray();\n\n\t\tvar userMessage = new UserMessage(\"Explain what do you see o this picture?\",\n\t\t\t\tList.of(new Media(MimeTypeUtils.IMAGE_PNG, data)));\n\n\t\tChatResponse response = client.call(new Prompt(List.of(userMessage)));\n\n\t\t// Response should contain something like:\n\t\t// I see a bunch of bananas in a golden basket. The bananas are ripe and yellow.\n\t\t// There are also some red apples in the basket. The basket is sitting on a table.\n\t\t// The background is a blurred light blue color.'\n\t\tassertThat(response.getResult().getOutput().getContent()).contains(\"bananas\", \"apple\", \"basket\");\n\n\t\t// Error with image from URL:\n\t\t// com.google.api.gax.rpc.InvalidArgumentException:\n\t\t// io.grpc.StatusRuntimeException: INVALID_ARGUMENT: Only GCS URIs are supported\n\t\t// in file_uri and please make sure that the path is a valid GCS path.\n\n\t\t// String imageUrl =\n\t\t// \"https://storage.googleapis.com/github-repo/img/gemini/multimodality_usecases_overview/banana-apple.jpg\";\n\n\t\t// userMessage = new UserMessage(\"Explain what do you see o this picture?\",\n\t\t// List.of(new Media(MimeTypeDetector.getMimeType(imageUrl), imageUrl)));\n\t\t// response = client.call(new Prompt(List.of(userMessage)));\n\n\t\t// assertThat(response.getResult().getOutput().getContent()).contains(\"bananas\",\n\t\t// \"apple\", \"basket\");\n\n\t\t// https://github.com/GoogleCloudPlatform/generative-ai/blob/main/gemini/use-cases/intro_multimodal_use_cases.ipynb",
                "is_abstract": "",
                "class_name": "VertexAiGeminiChatClientIT",
                "annotations": []
            },
            {
                "name": "vertexAiApi",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String projectId = System.getenv(\"VERTEX_AI_GEMINI_PROJECT_ID\");\n\t\t\tString location = System.getenv(\"VERTEX_AI_GEMINI_LOCATION\");\n\t\t\treturn new VertexAI.Builder().setProjectId(projectId)\n\t\t\t\t.setLocation(location)\n\t\t\t\t.setTransport(Transport.REST)\n\t\t\t\t.build();",
                "is_abstract": "",
                "class_name": "VertexAiGeminiChatClientIT TestConfiguration",
                "annotations": []
            },
            {
                "name": "vertexAiEmbedding",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new VertexAiGeminiChatClient(vertexAi,\n\t\t\t\t\tVertexAiGeminiChatOptions.builder()\n\t\t\t\t\t\t.withModel(VertexAiGeminiChatClient.ChatModel.GEMINI_PRO_VISION.getValue())\n\t\t\t\t\t\t.build());",
                "is_abstract": "",
                "class_name": "VertexAiGeminiChatClientIT TestConfiguration",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-vertex-ai-gemini/src/test/java/org/springframework/ai/vertexai/gemini/function/VertexAiGeminiChatClientFunctionCallingIT.java",
        "class_names": [
            "TestConfiguration",
            "VertexAiGeminiChatClientFunctionCallingIT"
        ],
        "imports": "import java.util.stream.Collectors;\nimport java.util.List;\nimport org.springframework.ai.vertexai.gemini.VertexAiGeminiChatOptions;\nimport org.springframework.ai.chat.Generation;\nimport reactor.core.publisher.Flux;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport com.google.cloud.vertexai.Transport;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.ai.chat.messages.Message;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.slf4j.Logger;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.ai.vertexai.gemini.VertexAiGeminiChatClient;\nimport org.springframework.ai.chat.ChatResponse;\nimport org.junit.jupiter.api.AfterEach;\nimport org.springframework.ai.chat.messages.UserMessage;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.ai.chat.messages.AssistantMessage;\nimport com.google.cloud.vertexai.VertexAI;\nimport org.springframework.boot.SpringBootConfiguration;\nimport org.springframework.ai.model.function.FunctionCallbackWrapper;\nimport java.util.ArrayList;\nimport org.springframework.ai.chat.prompt.Prompt;\nimport org.springframework.ai.model.function.FunctionCallbackWrapper.Builder.SchemaType;\nimport org.junit.jupiter.api.Test;",
        "package_import_paths": {
            "org.springframework.ai.vertexai.gemini.function.VertexAiGeminiChatClientFunctionCallingIT": "org.springframework.ai.vertexai.gemini.function.VertexAiGeminiChatClientFunctionCallingIT",
            "org.springframework.ai.vertexai.gemini.function.TestConfiguration": "org.springframework.ai.vertexai.gemini.function.TestConfiguration",
            "org.springframework.ai.vertexai.gemini.function.afterEach": "org.springframework.ai.vertexai.gemini.function.afterEach",
            "org.springframework.ai.vertexai.gemini.function.functionCallExplicitOpenApiSchem": "org.springframework.ai.vertexai.gemini.function.functionCallExplicitOpenApiSchem",
            "org.springframework.ai.vertexai.gemini.function.functionCallTestInferredOpenApiSchem": "org.springframework.ai.vertexai.gemini.function.functionCallTestInferredOpenApiSchem",
            "org.springframework.ai.vertexai.gemini.function.functionCallTestInferredOpenApiSchemaStream": "org.springframework.ai.vertexai.gemini.function.functionCallTestInferredOpenApiSchemaStream",
            "org.springframework.ai.vertexai.gemini.function.vertexAiApi": "org.springframework.ai.vertexai.gemini.function.vertexAiApi",
            "org.springframework.ai.vertexai.gemini.function.vertexAiEmbeddin": "org.springframework.ai.vertexai.gemini.function.vertexAiEmbeddin",
            "org.springframework.ai.vertexai.gemini.function.logger": "org.springframework.ai.vertexai.gemini.function.logger",
            "org.springframework.ai.vertexai.gemini.function.privat": "org.springframework.ai.vertexai.gemini.function.privat"
        },
        "package": "package org.springframework.ai.vertexai.gemini.function;",
        "property_declarations": [
            "@Autowired\n\tprivate VertexAiGeminiChatClient vertexGeminiClient;",
            "private final Logger logger = LoggerFactory.getLogger(getClass());"
        ],
        "functions": [
            {
                "name": "afterEach",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "try {\n\t\t\tThread.sleep(3000);\n\t\t}\n\t\tcatch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t}",
                "is_abstract": "",
                "class_name": "VertexAiGeminiChatClientFunctionCallingIT",
                "annotations": []
            },
            {
                "name": "functionCallExplicitOpenApiSchema",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "UserMessage userMessage = new UserMessage(\n\t\t\t\t\"What's the weather like in San Francisco, in Paris and in Tokyo, Japan? Use Multi-turn function calling. Provide answer for all requested locations.\");\n\n\t\tList<Message> messages = new ArrayList<>(List.of(userMessage));\n\n\t\tString openApiSchema = \"\"\"\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"OBJECT\",\n\t\t\t\t\t\"properties\": {\n\t\t\t\t\t  \"location\": {\n\t\t\t\t\t\t\"type\": \"STRING\",\n\t\t\t\t\t\t\"description\": \"The city and state e.g. San Francisco, CA\"\n\t\t\t\t\t  },\n\t\t\t\t\t  \"unit\" : {\n\t\t\t\t\t\t\"type\" : \"STRING\",\n\t\t\t\t\t\t\"enum\" : [ \"C\", \"F\" ],\n\t\t\t\t\t\t\"description\" : \"Temperature unit\"\n\t\t\t\t\t  }\n\t\t\t\t\t},\n\t\t\t\t\t\"required\": [\"location\", \"unit\"]\n\t\t\t\t  }\n\t\t\t\t\t\"\"\";\n\n\t\tvar promptOptions = VertexAiGeminiChatOptions.builder()\n\t\t\t.withModel(VertexAiGeminiChatClient.ChatModel.GEMINI_PRO.getValue())\n\t\t\t.withFunctionCallbacks(List.of(FunctionCallbackWrapper.builder(new MockWeatherService())\n\t\t\t\t.withName(\"getCurrentWeather\")\n\t\t\t\t.withDescription(\"Get the current weather in a given location\")\n\t\t\t\t.withInputTypeSchema(openApiSchema)\n\t\t\t\t.build()))\n\t\t\t.build();\n\n\t\tChatResponse response = vertexGeminiClient.call(new Prompt(messages, promptOptions));\n\n\t\tlogger.info(\"Response: {}\", response);\n\n\t\t// System.out.println(response.getResult().getOutput().getContent());\n\t\tassertThat(response.getResult().getOutput().getContent()).containsAnyOf(\"30.0\", \"30\");\n\t\tassertThat(response.getResult().getOutput().getContent()).containsAnyOf(\"10.0\", \"10\");\n\t\tassertThat(response.getResult().getOutput().getContent()).containsAnyOf(\"15.0\", \"15\");",
                "is_abstract": "",
                "class_name": "VertexAiGeminiChatClientFunctionCallingIT",
                "annotations": []
            },
            {
                "name": "functionCallTestInferredOpenApiSchema",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// UserMessage userMessage = new UserMessage(\"What's the weather like in San\n\t\t// Francisco, Paris and Tokyo?\");\n\t\tUserMessage userMessage = new UserMessage(\"What's the weather like in Paris?\");\n\n\t\tList<Message> messages = new ArrayList<>(List.of(userMessage));\n\n\t\tvar promptOptions = VertexAiGeminiChatOptions.builder()\n\t\t\t.withModel(VertexAiGeminiChatClient.ChatModel.GEMINI_PRO.getValue())\n\t\t\t.withFunctionCallbacks(List.of(FunctionCallbackWrapper.builder(new MockWeatherService())\n\t\t\t\t.withSchemaType(SchemaType.OPEN_API_SCHEMA)\n\t\t\t\t.withName(\"getCurrentWeather\")\n\t\t\t\t.withDescription(\"Get the current weather in a given location\")\n\t\t\t\t.build()))\n\t\t\t.build();\n\n\t\tChatResponse response = vertexGeminiClient.call(new Prompt(messages, promptOptions));\n\n\t\tlogger.info(\"Response: {}\", response);\n\n\t\t// System.out.println(response.getResult().getOutput().getContent());\n\t\t// assertThat(response.getResult().getOutput().getContent()).containsAnyOf(\"30.0\",\n\t\t// \"30\");\n\t\t// assertThat(response.getResult().getOutput().getContent()).containsAnyOf(\"10.0\",\n\t\t// \"10\");\n\t\tassertThat(response.getResult().getOutput().getContent()).containsAnyOf(\"15.0\", \"15\");",
                "is_abstract": "",
                "class_name": "VertexAiGeminiChatClientFunctionCallingIT",
                "annotations": []
            },
            {
                "name": "functionCallTestInferredOpenApiSchemaStream",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "UserMessage userMessage = new UserMessage(\n\t\t\t\t\"What's the weather like in San Francisco, in Paris and in Tokyo, Japan? Use Multi-turn function calling. Provide answer for all requested locations.\");\n\n\t\tList<Message> messages = new ArrayList<>(List.of(userMessage));\n\n\t\tvar promptOptions = VertexAiGeminiChatOptions.builder()\n\t\t\t.withModel(VertexAiGeminiChatClient.ChatModel.GEMINI_PRO.getValue())\n\t\t\t.withFunctionCallbacks(List.of(FunctionCallbackWrapper.builder(new MockWeatherService())\n\t\t\t\t.withSchemaType(SchemaType.OPEN_API_SCHEMA)\n\t\t\t\t.withName(\"getCurrentWeather\")\n\t\t\t\t.withDescription(\"Get the current weather in a given location\")\n\t\t\t\t.build()))\n\t\t\t.build();\n\n\t\tFlux<ChatResponse> response = vertexGeminiClient.stream(new Prompt(messages, promptOptions));\n\n\t\tString responseString = response.collectList()\n\t\t\t.block()\n\t\t\t.stream()\n\t\t\t.map(ChatResponse::getResults)\n\t\t\t.flatMap(List::stream)\n\t\t\t.map(Generation::getOutput)\n\t\t\t.map(AssistantMessage::getContent)\n\t\t\t.collect(Collectors.joining());\n\n\t\tlogger.info(\"Response: {}\", responseString);\n\n\t\tassertThat(responseString).containsAnyOf(\"15.0\", \"15\");\n\t\tassertThat(responseString).containsAnyOf(\"30.0\", \"30\");\n\t\tassertThat(responseString).containsAnyOf(\"10.0\", \"10\");",
                "is_abstract": "",
                "class_name": "VertexAiGeminiChatClientFunctionCallingIT",
                "annotations": []
            },
            {
                "name": "vertexAiApi",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String projectId = System.getenv(\"VERTEX_AI_GEMINI_PROJECT_ID\");\n\t\t\tString location = System.getenv(\"VERTEX_AI_GEMINI_LOCATION\");\n\t\t\treturn new VertexAI.Builder().setLocation(location)\n\t\t\t\t.setProjectId(projectId)\n\t\t\t\t.setTransport(Transport.REST)\n\t\t\t\t.build();",
                "is_abstract": "",
                "class_name": "VertexAiGeminiChatClientFunctionCallingIT TestConfiguration",
                "annotations": []
            },
            {
                "name": "vertexAiEmbedding",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new VertexAiGeminiChatClient(vertexAi,\n\t\t\t\t\tVertexAiGeminiChatOptions.builder()\n\t\t\t\t\t\t.withModel(VertexAiGeminiChatClient.ChatModel.GEMINI_PRO.getValue())\n\t\t\t\t\t\t.withTemperature(0.9f)\n\t\t\t\t\t\t.build());",
                "is_abstract": "",
                "class_name": "VertexAiGeminiChatClientFunctionCallingIT TestConfiguration",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-vertex-ai-gemini/src/test/java/org/springframework/ai/vertexai/gemini/function/MockWeatherService.java",
        "class_names": [
            "MockWeatherService"
        ],
        "imports": "import com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport com.fasterxml.jackson.annotation.JsonPropertyDescription;\nimport org.slf4j.LoggerFactory;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport org.slf4j.Logger;\nimport java.util.function.Function;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport com.fasterxml.jackson.annotation.JsonClassDescription;",
        "package_import_paths": {
            "org.springframework.ai.vertexai.gemini.function.MockWeatherServi": "org.springframework.ai.vertexai.gemini.function.MockWeatherServi",
            "org.springframework.ai.vertexai.gemini.function.apply": "org.springframework.ai.vertexai.gemini.function.apply",
            "org.springframework.ai.vertexai.gemini.function.logger": "org.springframework.ai.vertexai.gemini.function.logger",
            "org.springframework.ai.vertexai.gemini.function.unitNam": "org.springframework.ai.vertexai.gemini.function.unitNam"
        },
        "package": "package org.springframework.ai.vertexai.gemini.function;",
        "property_declarations": [
            "private final Logger logger = LoggerFactory.getLogger(getClass());",
            "public final String unitName;"
        ],
        "functions": [
            {
                "name": "apply",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "double temperature = 0;\n\t\tif (request.location().contains(\"Paris\")) {\n\t\t\ttemperature = 15;\n\t\t}\n\t\telse if (request.location().contains(\"Tokyo\")) {\n\t\t\ttemperature = 10;\n\t\t}\n\t\telse if (request.location().contains(\"San Francisco\")) {\n\t\t\ttemperature = 30;\n\t\t}\n\n\t\tlogger.info(\"Request is {}, response temperature is {}\", request, temperature);\n\t\treturn new Response(temperature, 15, 20, 2, 53, 45, Unit.C);",
                "is_abstract": "",
                "class_name": "MockWeatherService",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-vertex-ai-gemini/src/test/java/org/springframework/ai/vertexai/gemini/aot/VertexAiGeminiRuntimeHintsTests.java",
        "class_names": [
            "VertexAiGeminiRuntimeHintsTests"
        ],
        "imports": "import org.springframework.aot.hint.RuntimeHints;\nimport static org.assertj.core.api.AssertionsForClassTypes.assertThat;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.aot.hint.TypeReference;\nimport org.springframework.ai.vertexai.gemini.VertexAiGeminiChatClient;\nimport java.util.Set;\nimport static org.springframework.ai.aot.AiRuntimeHints.findJsonAnnotatedClassesInPackage;\nimport static org.springframework.aot.hint.predicate.RuntimeHintsPredicates.reflection;",
        "package_import_paths": {
            "org.springframework.ai.vertexai.gemini.aot.VertexAiGeminiRuntimeHintsTests": "org.springframework.ai.vertexai.gemini.aot.VertexAiGeminiRuntimeHintsTests",
            "org.springframework.ai.vertexai.gemini.aot.registerHints": "org.springframework.ai.vertexai.gemini.aot.registerHints"
        },
        "package": "package org.springframework.ai.vertexai.gemini.aot;",
        "property_declarations": [],
        "functions": [
            {
                "name": "registerHints",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "RuntimeHints runtimeHints = new RuntimeHints();\n\t\tVertexAiGeminiRuntimeHints vertexAiGeminiRuntimeHints = new VertexAiGeminiRuntimeHints();\n\t\tvertexAiGeminiRuntimeHints.registerHints(runtimeHints, null);\n\t\tSet<TypeReference> jsonAnnotatedClasses = findJsonAnnotatedClassesInPackage(VertexAiGeminiChatClient.class);\n\t\tfor (TypeReference jsonAnnotatedClass : jsonAnnotatedClasses) {\n\t\t\tassertThat(runtimeHints).matches(reflection().onType(jsonAnnotatedClass));\n\t\t}",
                "is_abstract": "",
                "class_name": "VertexAiGeminiRuntimeHintsTests",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-vertex-ai-gemini/src/main/java/org/springframework/ai/vertexai/gemini/VertexAiGeminiChatClient.java",
        "class_names": [
            "VertexAiGeminiChatClient"
        ],
        "imports": "import java.util.stream.Collectors;\nimport java.util.List;\nimport com.google.cloud.vertexai.api.Content;\nimport com.google.cloud.vertexai.api.GenerateContentResponse;\nimport org.springframework.ai.chat.ChatClient;\nimport reactor.core.publisher.Flux;\nimport org.springframework.ai.chat.Generation;\nimport com.google.cloud.vertexai.api.Tool;\nimport com.google.cloud.vertexai.generativeai.ResponseStream;\nimport org.springframework.util.CollectionUtils;\nimport org.springframework.ai.model.function.FunctionCallbackContext;\nimport org.springframework.lang.NonNull;\nimport org.springframework.util.StringUtils;\nimport com.google.cloud.vertexai.generativeai.PartMaker;\nimport org.springframework.ai.chat.messages.Message;\nimport org.springframework.ai.vertexai.gemini.metadata.VertexAiChatResponseMetadata;\nimport org.springframework.beans.factory.DisposableBean;\nimport com.google.cloud.vertexai.generativeai.GenerativeModel;\nimport com.google.protobuf.Struct;\nimport org.springframework.ai.chat.prompt.ChatOptions;\nimport org.springframework.ai.chat.ChatResponse;\nimport org.springframework.ai.chat.messages.MessageType;\nimport java.util.HashSet;\nimport org.springframework.ai.chat.messages.UserMessage;\nimport com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.google.cloud.vertexai.api.GenerationConfig;\nimport org.springframework.ai.model.ModelOptionsUtils;\nimport org.springframework.ai.model.function.AbstractFunctionCallSupport;\nimport org.springframework.ai.chat.messages.AssistantMessage;\nimport com.google.cloud.vertexai.VertexAI;\nimport java.util.Set;\nimport com.google.cloud.vertexai.api.FunctionResponse;\nimport com.google.cloud.vertexai.api.FunctionCall;\nimport com.google.cloud.vertexai.api.Schema;\nimport java.util.ArrayList;\nimport org.springframework.ai.chat.prompt.Prompt;\nimport org.springframework.util.Assert;\nimport com.google.protobuf.util.JsonFormat;\nimport com.google.cloud.vertexai.api.Part;\nimport org.springframework.ai.vertexai.gemini.metadata.VertexAiUsage;\nimport org.springframework.ai.chat.StreamingChatClient;\nimport com.google.cloud.vertexai.api.FunctionDeclaration;",
        "package_import_paths": {
            "org.springframework.ai.vertexai.gemini.VertexAiGeminiChatClient": "org.springframework.ai.vertexai.gemini.VertexAiGeminiChatClient",
            "org.springframework.ai.vertexai.gemini.getValu": "org.springframework.ai.vertexai.gemini.getValu",
            "org.springframework.ai.vertexai.gemini.call": "org.springframework.ai.vertexai.gemini.call",
            "org.springframework.ai.vertexai.gemini.stream": "org.springframework.ai.vertexai.gemini.stream",
            "org.springframework.ai.vertexai.gemini.toChatResponseMetadat": "org.springframework.ai.vertexai.gemini.toChatResponseMetadat",
            "org.springframework.ai.vertexai.gemini.createGeminiRequest": "org.springframework.ai.vertexai.gemini.createGeminiRequest",
            "org.springframework.ai.vertexai.gemini.toGenerationConfi": "org.springframework.ai.vertexai.gemini.toGenerationConfi",
            "org.springframework.ai.vertexai.gemini.toGeminiContent": "org.springframework.ai.vertexai.gemini.toGeminiContent",
            "org.springframework.ai.vertexai.gemini.toGeminiMessageTy": "org.springframework.ai.vertexai.gemini.toGeminiMessageTy",
            "org.springframework.ai.vertexai.gemini.messageToGeminiParts": "org.springframework.ai.vertexai.gemini.messageToGeminiParts",
            "org.springframework.ai.vertexai.gemini.getFunctionTools": "org.springframework.ai.vertexai.gemini.getFunctionTools",
            "org.springframework.ai.vertexai.gemini.structToJson": "org.springframework.ai.vertexai.gemini.structToJson",
            "org.springframework.ai.vertexai.gemini.jsonToStruct": "org.springframework.ai.vertexai.gemini.jsonToStruct",
            "org.springframework.ai.vertexai.gemini.jsonToSchem": "org.springframework.ai.vertexai.gemini.jsonToSchem",
            "org.springframework.ai.vertexai.gemini.destroy": "org.springframework.ai.vertexai.gemini.destroy",
            "org.springframework.ai.vertexai.gemini.doCreateToolResponseRequest": "org.springframework.ai.vertexai.gemini.doCreateToolResponseRequest",
            "org.springframework.ai.vertexai.gemini.doGetUserMessages": "org.springframework.ai.vertexai.gemini.doGetUserMessages",
            "org.springframework.ai.vertexai.gemini.doGetToolResponseMess": "org.springframework.ai.vertexai.gemini.doGetToolResponseMess",
            "org.springframework.ai.vertexai.gemini.doChatCompletion": "org.springframework.ai.vertexai.gemini.doChatCompletion",
            "org.springframework.ai.vertexai.gemini.isToolFunctionCall": "org.springframework.ai.vertexai.gemini.isToolFunctionCall",
            "org.springframework.ai.vertexai.gemini.IS_RUNTIME_CALL": "org.springframework.ai.vertexai.gemini.IS_RUNTIME_CALL",
            "org.springframework.ai.vertexai.gemini.vertexAI": "org.springframework.ai.vertexai.gemini.vertexAI",
            "org.springframework.ai.vertexai.gemini.defaultOptions": "org.springframework.ai.vertexai.gemini.defaultOptions",
            "org.springframework.ai.vertexai.gemini.generationConfi": "org.springframework.ai.vertexai.gemini.generationConfi",
            "org.springframework.ai.vertexai.gemini.valu": "org.springframework.ai.vertexai.gemini.valu"
        },
        "package": "package org.springframework.ai.vertexai.gemini;",
        "property_declarations": [
            "private final GenerationConfig generationConfig;",
            "public final String value;",
            "private final VertexAiGeminiChatOptions defaultOptions;",
            "private final VertexAI vertexAI;",
            "private final static boolean IS_RUNTIME_CALL = true;"
        ],
        "functions": [
            {
                "name": "getValue",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.value;",
                "is_abstract": "",
                "class_name": "VertexAiGeminiChatClient",
                "annotations": []
            },
            {
                "name": "call",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var geminiRequest = createGeminiRequest(prompt);\n\n\t\tGenerateContentResponse response = this.callWithFunctionSupport(geminiRequest);\n\n\t\tList<Generation> generations = response.getCandidatesList()\n\t\t\t.stream()\n\t\t\t.map(candidate -> candidate.getContent().getPartsList())\n\t\t\t.flatMap(List::stream)\n\t\t\t.map(Part::getText)\n\t\t\t.map(t -> new Generation(t.toString()))\n\t\t\t.toList();\n\n\t\treturn new ChatResponse(generations, toChatResponseMetadata(response));",
                "is_abstract": "",
                "class_name": "VertexAiGeminiChatClient",
                "annotations": []
            },
            {
                "name": "stream",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "try {\n\n\t\t\tvar request = createGeminiRequest(prompt);\n\n\t\t\tResponseStream<GenerateContentResponse> responseStream = request.model\n\t\t\t\t.generateContentStream(request.contents);\n\n\t\t\treturn Flux.fromStream(responseStream.stream()).map(response -> {\n\t\t\t\tresponse = handleFunctionCallOrReturn(request, response);\n\t\t\t\tList<Generation> generations = response.getCandidatesList()\n\t\t\t\t\t.stream()\n\t\t\t\t\t.map(candidate -> candidate.getContent().getPartsList())\n\t\t\t\t\t.flatMap(List::stream)\n\t\t\t\t\t.map(Part::getText)\n\t\t\t\t\t.map(t -> new Generation(t.toString()))\n\t\t\t\t\t.toList();\n\n\t\t\t\treturn new ChatResponse(generations, toChatResponseMetadata(response));\n\t\t\t});\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new RuntimeException(\"Failed to generate content\", e);\n\t\t}",
                "is_abstract": "",
                "class_name": "VertexAiGeminiChatClient",
                "annotations": []
            },
            {
                "name": "toChatResponseMetadata",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new VertexAiChatResponseMetadata(new VertexAiUsage(response.getUsageMetadata()));",
                "is_abstract": "",
                "class_name": "VertexAiGeminiChatClient",
                "annotations": [
                    "@JsonInclude(Include.NON_NULL)"
                ]
            },
            {
                "name": "createGeminiRequest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Set<String> functionsForThisRequest = new HashSet<>();\n\n\t\tGenerationConfig generationConfig = this.generationConfig;\n\n\t\tvar generativeModelBuilder = new GenerativeModel.Builder().setModelName(this.defaultOptions.getModel())\n\t\t\t.setVertexAi(this.vertexAI);\n\n\t\tVertexAiGeminiChatOptions updatedRuntimeOptions = null;\n\n\t\tif (prompt.getOptions() != null) {\n\t\t\tif (prompt.getOptions() instanceof ChatOptions runtimeOptions) {\n\t\t\t\tupdatedRuntimeOptions = ModelOptionsUtils.copyToTarget(runtimeOptions, ChatOptions.class,\n\t\t\t\t\t\tVertexAiGeminiChatOptions.class);\n\n\t\t\t\tfunctionsForThisRequest\n\t\t\t\t\t.addAll(handleFunctionCallbackConfigurations(updatedRuntimeOptions, IS_RUNTIME_CALL));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new IllegalArgumentException(\"Prompt options are not of type ChatOptions: \"\n\t\t\t\t\t\t+ prompt.getOptions().getClass().getSimpleName());\n\t\t\t}\n\t\t}\n\n\t\tif (this.defaultOptions != null) {\n\n\t\t\tfunctionsForThisRequest.addAll(handleFunctionCallbackConfigurations(this.defaultOptions, !IS_RUNTIME_CALL));\n\n\t\t\tif (updatedRuntimeOptions == null) {\n\t\t\t\tupdatedRuntimeOptions = VertexAiGeminiChatOptions.builder().build();\n\t\t\t}\n\n\t\t\tupdatedRuntimeOptions = ModelOptionsUtils.merge(updatedRuntimeOptions, this.defaultOptions,\n\t\t\t\t\tVertexAiGeminiChatOptions.class);\n\n\t\t}\n\n\t\tif (updatedRuntimeOptions != null) {\n\n\t\t\tif (StringUtils.hasText(updatedRuntimeOptions.getModel())\n\t\t\t\t\t&& !updatedRuntimeOptions.getModel().equals(this.defaultOptions.getModel())) {\n\t\t\t\t// Override model name\n\t\t\t\tgenerativeModelBuilder.setModelName(updatedRuntimeOptions.getModel());\n\t\t\t}\n\n\t\t\tgenerationConfig = toGenerationConfig(updatedRuntimeOptions);\n\t\t}\n\n\t\t// Add the enabled functions definitions to the request's tools parameter.\n\t\tif (!CollectionUtils.isEmpty(functionsForThisRequest)) {\n\t\t\tList<Tool> tools = this.getFunctionTools(functionsForThisRequest);\n\t\t\tgenerativeModelBuilder.setTools(tools);\n\t\t}\n\n\t\tgenerativeModelBuilder.setGenerationConfig(generationConfig);\n\n\t\tGenerativeModel generativeModel = generativeModelBuilder.build();\n\n\t\treturn new GeminiRequest(toGeminiContent(prompt), generativeModel);",
                "is_abstract": "",
                "class_name": "VertexAiGeminiChatClient",
                "annotations": []
            },
            {
                "name": "toGenerationConfig",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "GenerationConfig.Builder generationConfigBuilder = GenerationConfig.newBuilder();\n\n\t\tif (options.getTemperature() != null) {\n\t\t\tgenerationConfigBuilder.setTemperature(options.getTemperature());\n\t\t}\n\t\tif (options.getMaxOutputTokens() != null) {\n\t\t\tgenerationConfigBuilder.setMaxOutputTokens(options.getMaxOutputTokens());\n\t\t}\n\t\tif (options.getTopK() != null) {\n\t\t\tgenerationConfigBuilder.setTopK(options.getTopK());\n\t\t}\n\t\tif (options.getTopP() != null) {\n\t\t\tgenerationConfigBuilder.setTopP(options.getTopP());\n\t\t}\n\t\tif (options.getCandidateCount() != null) {\n\t\t\tgenerationConfigBuilder.setCandidateCount(options.getCandidateCount());\n\t\t}\n\t\tif (options.getStopSequences() != null) {\n\t\t\tgenerationConfigBuilder.addAllStopSequences(options.getStopSequences());\n\t\t}\n\n\t\treturn generationConfigBuilder.build();",
                "is_abstract": "",
                "class_name": "VertexAiGeminiChatClient",
                "annotations": []
            },
            {
                "name": "toGeminiContent",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String systemContext = prompt.getInstructions()\n\t\t\t.stream()\n\t\t\t.filter(m -> m.getMessageType() == MessageType.SYSTEM)\n\t\t\t.map(m -> m.getContent())\n\t\t\t.collect(Collectors.joining(System.lineSeparator()));\n\n\t\tList<Content> contents = prompt.getInstructions()\n\t\t\t.stream()\n\t\t\t.filter(m -> m.getMessageType() == MessageType.USER || m.getMessageType() == MessageType.ASSISTANT)\n\t\t\t.map(message -> Content.newBuilder()\n\t\t\t\t.setRole(toGeminiMessageType(message.getMessageType()).getValue())\n\t\t\t\t.addAllParts(messageToGeminiParts(message, systemContext))\n\t\t\t\t.build())\n\t\t\t.toList();\n\n\t\treturn contents;",
                "is_abstract": "",
                "class_name": "VertexAiGeminiChatClient",
                "annotations": []
            },
            {
                "name": "toGeminiMessageType",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(type, \"Message type must not be null\");\n\n\t\tswitch (type) {\n\t\t\tcase USER:\n\t\t\t\treturn GeminiMessageType.USER;\n\t\t\tcase ASSISTANT:\n\t\t\t\treturn GeminiMessageType.MODEL;\n\t\t\tdefault:\n\t\t\t\tthrow new IllegalArgumentException(\"Unsupported message type: \" + type);\n\t\t}",
                "is_abstract": "",
                "class_name": "VertexAiGeminiChatClient",
                "annotations": []
            },
            {
                "name": "messageToGeminiParts",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (message instanceof UserMessage userMessage) {\n\n\t\t\tString messageTextContent = (userMessage.getContent() == null) ? \"null\" : userMessage.getContent();\n\t\t\tif (StringUtils.hasText(systemContext)) {\n\t\t\t\tmessageTextContent = systemContext + \"\\n\\n\" + messageTextContent;\n\t\t\t}\n\t\t\tPart textPart = Part.newBuilder().setText(messageTextContent).build();\n\n\t\t\tList<Part> parts = new ArrayList<>(List.of(textPart));\n\n\t\t\tList<Part> mediaParts = userMessage.getMedia()\n\t\t\t\t.stream()\n\t\t\t\t.map(mediaData -> PartMaker.fromMimeTypeAndData(mediaData.getMimeType().toString(),\n\t\t\t\t\t\tmediaData.getData()))\n\t\t\t\t.toList();\n\n\t\t\tif (!CollectionUtils.isEmpty(mediaParts)) {\n\t\t\t\tparts.addAll(mediaParts);\n\t\t\t}\n\n\t\t\treturn parts;\n\t\t}\n\t\telse if (message instanceof AssistantMessage assistantMessage) {\n\t\t\treturn List.of(Part.newBuilder().setText(assistantMessage.getContent()).build());\n\t\t}\n\t\telse {\n\t\t\tthrow new IllegalArgumentException(\"Gemini doesn't support message type: \" + message.getClass());\n\t\t}",
                "is_abstract": "",
                "class_name": "VertexAiGeminiChatClient",
                "annotations": []
            },
            {
                "name": "getFunctionTools",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.resolveFunctionCallbacks(functionNames).stream().map(functionCallback -> {\n\t\t\tFunctionDeclaration functionDeclaration = FunctionDeclaration.newBuilder()\n\t\t\t\t.setName(functionCallback.getName())\n\t\t\t\t.setDescription(functionCallback.getDescription())\n\t\t\t\t.setParameters(jsonToSchema(functionCallback.getInputTypeSchema()))\n\t\t\t\t// .setParameters(toOpenApiSchema(functionCallback.getInputTypeSchema()))\n\t\t\t\t.build();\n\n\t\t\treturn Tool.newBuilder().addFunctionDeclarations(functionDeclaration).build();\n\t\t}).toList();",
                "is_abstract": "",
                "class_name": "VertexAiGeminiChatClient",
                "annotations": []
            },
            {
                "name": "structToJson",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "try {\n\t\t\treturn JsonFormat.printer().print(struct);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}",
                "is_abstract": "",
                "class_name": "VertexAiGeminiChatClient",
                "annotations": []
            },
            {
                "name": "jsonToStruct",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "try {\n\t\t\tvar structBuilder = Struct.newBuilder();\n\t\t\tJsonFormat.parser().ignoringUnknownFields().merge(json, structBuilder);\n\t\t\treturn structBuilder.build();\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}",
                "is_abstract": "",
                "class_name": "VertexAiGeminiChatClient",
                "annotations": []
            },
            {
                "name": "jsonToSchema",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "try {\n\t\t\tvar schemaBuilder = Schema.newBuilder();\n\t\t\tJsonFormat.parser().ignoringUnknownFields().merge(json, schemaBuilder);\n\t\t\treturn schemaBuilder.build();\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}",
                "is_abstract": "",
                "class_name": "VertexAiGeminiChatClient",
                "annotations": []
            },
            {
                "name": "destroy",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (this.vertexAI != null) {\n\t\t\tthis.vertexAI.close();\n\t\t}",
                "is_abstract": "",
                "class_name": "VertexAiGeminiChatClient",
                "annotations": []
            },
            {
                "name": "doCreateToolResponseRequest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "FunctionCall functionCall = responseMessage.getPartsList().iterator().next().getFunctionCall();\n\n\t\tvar functionName = functionCall.getName();\n\t\tString functionArguments = structToJson(functionCall.getArgs());\n\n\t\tif (!this.functionCallbackRegister.containsKey(functionName)) {\n\t\t\tthrow new IllegalStateException(\"No function callback found for function name: \" + functionName);\n\t\t}\n\n\t\tString functionResponse = this.functionCallbackRegister.get(functionName).call(functionArguments);\n\n\t\tContent contentFnResp = Content.newBuilder()\n\t\t\t.addParts(Part.newBuilder()\n\t\t\t\t.setFunctionResponse(FunctionResponse.newBuilder()\n\t\t\t\t\t.setName(functionCall.getName())\n\t\t\t\t\t.setResponse(jsonToStruct(functionResponse))\n\t\t\t\t\t.build())\n\t\t\t\t.build())\n\t\t\t.build();\n\n\t\tconversationHistory.add(contentFnResp);\n\n\t\treturn new GeminiRequest(conversationHistory, previousRequest.model());",
                "is_abstract": "",
                "class_name": "VertexAiGeminiChatClient",
                "annotations": []
            },
            {
                "name": "doGetUserMessages",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return request.contents;",
                "is_abstract": "",
                "class_name": "VertexAiGeminiChatClient",
                "annotations": []
            },
            {
                "name": "doGetToolResponseMessage",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return response.getCandidatesList().get(0).getContent();",
                "is_abstract": "",
                "class_name": "VertexAiGeminiChatClient",
                "annotations": []
            },
            {
                "name": "doChatCompletion",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "try {\n\t\t\treturn request.model.generateContent(request.contents);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new RuntimeException(\"Failed to generate content\", e);\n\t\t}",
                "is_abstract": "",
                "class_name": "VertexAiGeminiChatClient",
                "annotations": []
            },
            {
                "name": "isToolFunctionCall",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (response == null || CollectionUtils.isEmpty(response.getCandidatesList())\n\t\t\t\t|| response.getCandidatesList().get(0).getContent() == null\n\t\t\t\t|| CollectionUtils.isEmpty(response.getCandidatesList().get(0).getContent().getPartsList())) {\n\t\t\treturn false;\n\t\t}\n\t\treturn response.getCandidatesList().get(0).getContent().getPartsList().get(0).hasFunctionCall();",
                "is_abstract": "",
                "class_name": "VertexAiGeminiChatClient",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-vertex-ai-gemini/src/main/java/org/springframework/ai/vertexai/gemini/VertexAiGeminiChatOptions.java",
        "class_names": [
            "Builder",
            "VertexAiGeminiChatOptions"
        ],
        "imports": "import java.util.ArrayList;\nimport java.util.List;\nimport com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport org.springframework.util.Assert;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport org.springframework.ai.model.function.FunctionCallingOptions;\nimport org.springframework.ai.model.function.FunctionCallback;\nimport com.fasterxml.jackson.annotation.JsonIgnore;\nimport org.springframework.boot.context.properties.NestedConfigurationProperty;\nimport org.springframework.ai.chat.prompt.ChatOptions;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport java.util.Set;\nimport java.util.HashSet;",
        "package_import_paths": {
            "org.springframework.ai.vertexai.gemini.VertexAiGeminiChatOptions": "org.springframework.ai.vertexai.gemini.VertexAiGeminiChatOptions",
            "org.springframework.ai.vertexai.gemini.Builder": "org.springframework.ai.vertexai.gemini.Builder",
            "org.springframework.ai.vertexai.gemini.builder": "org.springframework.ai.vertexai.gemini.builder",
            "org.springframework.ai.vertexai.gemini.withStopSequences": "org.springframework.ai.vertexai.gemini.withStopSequences",
            "org.springframework.ai.vertexai.gemini.withTemperatur": "org.springframework.ai.vertexai.gemini.withTemperatur",
            "org.springframework.ai.vertexai.gemini.withTopP": "org.springframework.ai.vertexai.gemini.withTopP",
            "org.springframework.ai.vertexai.gemini.withTopK": "org.springframework.ai.vertexai.gemini.withTopK",
            "org.springframework.ai.vertexai.gemini.withCandidateCount": "org.springframework.ai.vertexai.gemini.withCandidateCount",
            "org.springframework.ai.vertexai.gemini.withMaxOutputTokens": "org.springframework.ai.vertexai.gemini.withMaxOutputTokens",
            "org.springframework.ai.vertexai.gemini.withModel": "org.springframework.ai.vertexai.gemini.withModel",
            "org.springframework.ai.vertexai.gemini.withFunctionCallbacks": "org.springframework.ai.vertexai.gemini.withFunctionCallbacks",
            "org.springframework.ai.vertexai.gemini.withFunctions": "org.springframework.ai.vertexai.gemini.withFunctions",
            "org.springframework.ai.vertexai.gemini.withFunction": "org.springframework.ai.vertexai.gemini.withFunction",
            "org.springframework.ai.vertexai.gemini.build": "org.springframework.ai.vertexai.gemini.build",
            "org.springframework.ai.vertexai.gemini.getStopSequences": "org.springframework.ai.vertexai.gemini.getStopSequences",
            "org.springframework.ai.vertexai.gemini.setStopSequences": "org.springframework.ai.vertexai.gemini.setStopSequences",
            "org.springframework.ai.vertexai.gemini.getTemperatur": "org.springframework.ai.vertexai.gemini.getTemperatur",
            "org.springframework.ai.vertexai.gemini.setTemperatur": "org.springframework.ai.vertexai.gemini.setTemperatur",
            "org.springframework.ai.vertexai.gemini.getTopP": "org.springframework.ai.vertexai.gemini.getTopP",
            "org.springframework.ai.vertexai.gemini.setTopP": "org.springframework.ai.vertexai.gemini.setTopP",
            "org.springframework.ai.vertexai.gemini.getTopK": "org.springframework.ai.vertexai.gemini.getTopK",
            "org.springframework.ai.vertexai.gemini.setTopK": "org.springframework.ai.vertexai.gemini.setTopK",
            "org.springframework.ai.vertexai.gemini.getCandidateCount": "org.springframework.ai.vertexai.gemini.getCandidateCount",
            "org.springframework.ai.vertexai.gemini.setCandidateCount": "org.springframework.ai.vertexai.gemini.setCandidateCount",
            "org.springframework.ai.vertexai.gemini.getMaxOutputTokens": "org.springframework.ai.vertexai.gemini.getMaxOutputTokens",
            "org.springframework.ai.vertexai.gemini.setMaxOutputTokens": "org.springframework.ai.vertexai.gemini.setMaxOutputTokens",
            "org.springframework.ai.vertexai.gemini.getModel": "org.springframework.ai.vertexai.gemini.getModel",
            "org.springframework.ai.vertexai.gemini.setModel": "org.springframework.ai.vertexai.gemini.setModel",
            "org.springframework.ai.vertexai.gemini.getFunctionCallbacks": "org.springframework.ai.vertexai.gemini.getFunctionCallbacks",
            "org.springframework.ai.vertexai.gemini.setFunctionCallbacks": "org.springframework.ai.vertexai.gemini.setFunctionCallbacks",
            "org.springframework.ai.vertexai.gemini.getFunctions": "org.springframework.ai.vertexai.gemini.getFunctions",
            "org.springframework.ai.vertexai.gemini.setFunctions": "org.springframework.ai.vertexai.gemini.setFunctions",
            "org.springframework.ai.vertexai.gemini.hashCod": "org.springframework.ai.vertexai.gemini.hashCod",
            "org.springframework.ai.vertexai.gemini.equals": "org.springframework.ai.vertexai.gemini.equals",
            "org.springframework.ai.vertexai.gemini.stopSequences": "org.springframework.ai.vertexai.gemini.stopSequences",
            "org.springframework.ai.vertexai.gemini.temperatur": "org.springframework.ai.vertexai.gemini.temperatur",
            "org.springframework.ai.vertexai.gemini.topP": "org.springframework.ai.vertexai.gemini.topP",
            "org.springframework.ai.vertexai.gemini.topK": "org.springframework.ai.vertexai.gemini.topK",
            "org.springframework.ai.vertexai.gemini.candidateCount": "org.springframework.ai.vertexai.gemini.candidateCount",
            "org.springframework.ai.vertexai.gemini.maxOutputTokens": "org.springframework.ai.vertexai.gemini.maxOutputTokens",
            "org.springframework.ai.vertexai.gemini.model": "org.springframework.ai.vertexai.gemini.model",
            "org.springframework.ai.vertexai.gemini.privat": "org.springframework.ai.vertexai.gemini.privat",
            "org.springframework.ai.vertexai.gemini.options": "org.springframework.ai.vertexai.gemini.options"
        },
        "package": "package org.springframework.ai.vertexai.gemini;",
        "property_declarations": [
            "private @JsonProperty(\"candidateCount\") Integer candidateCount;",
            "private @JsonProperty(\"temperature\") Float temperature;",
            "private VertexAiGeminiChatOptions options = new VertexAiGeminiChatOptions();",
            "private @JsonProperty(\"topK\") Float topK;",
            "private @JsonProperty(\"stopSequences\") List<String> stopSequences;",
            "@NestedConfigurationProperty\n\t@JsonIgnore\n\tprivate Set<String> functions = new HashSet<>();",
            "private @JsonProperty(\"maxOutputTokens\") Integer maxOutputTokens;",
            "@NestedConfigurationProperty\n\t@JsonIgnore\n\tprivate List<FunctionCallback> functionCallbacks = new ArrayList<>();",
            "private @JsonProperty(\"topP\") Float topP;",
            "private @JsonProperty(\"modelName\") String model;"
        ],
        "functions": [
            {
                "name": "builder",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Builder();",
                "is_abstract": "",
                "class_name": "VertexAiGeminiChatOptions",
                "annotations": []
            },
            {
                "name": "withStopSequences",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.setStopSequences(stopSequences);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "VertexAiGeminiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withTemperature",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.setTemperature(temperature);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "VertexAiGeminiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withTopP",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.setTopP(topP);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "VertexAiGeminiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withTopK",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.setTopK(topK);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "VertexAiGeminiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withCandidateCount",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.setCandidateCount(candidateCount);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "VertexAiGeminiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withMaxOutputTokens",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.setMaxOutputTokens(maxOutputTokens);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "VertexAiGeminiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.setModel(modelName);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "VertexAiGeminiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withFunctionCallbacks",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.functionCallbacks = functionCallbacks;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "VertexAiGeminiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withFunctions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(functionNames, \"Function names must not be null\");\n\t\t\tthis.options.functions = functionNames;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "VertexAiGeminiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withFunction",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.hasText(functionName, \"Function name must not be empty\");\n\t\t\tthis.options.functions.add(functionName);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "VertexAiGeminiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "build",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.options;",
                "is_abstract": "",
                "class_name": "VertexAiGeminiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getStopSequences",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.stopSequences;",
                "is_abstract": "",
                "class_name": "VertexAiGeminiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setStopSequences",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.stopSequences = stopSequences;",
                "is_abstract": "",
                "class_name": "VertexAiGeminiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getTemperature",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.temperature;",
                "is_abstract": "",
                "class_name": "VertexAiGeminiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setTemperature",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.temperature = temperature;",
                "is_abstract": "",
                "class_name": "VertexAiGeminiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getTopP",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.topP;",
                "is_abstract": "",
                "class_name": "VertexAiGeminiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setTopP",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.topP = topP;",
                "is_abstract": "",
                "class_name": "VertexAiGeminiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getTopK",
                "parameters": [
                    ""
                ],
                "return_type": "null",
                "body": "return (this.topK != null) ? this.topK.intValue() : null;",
                "is_abstract": "",
                "class_name": "VertexAiGeminiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setTopK",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.topK = topK;",
                "is_abstract": "",
                "class_name": "VertexAiGeminiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setTopK",
                "parameters": [
                    ""
                ],
                "return_type": "null",
                "body": "this.topK = (topK != null) ? topK.floatValue() : null;",
                "is_abstract": "",
                "class_name": "VertexAiGeminiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getCandidateCount",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.candidateCount;",
                "is_abstract": "",
                "class_name": "VertexAiGeminiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setCandidateCount",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.candidateCount = candidateCount;",
                "is_abstract": "",
                "class_name": "VertexAiGeminiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getMaxOutputTokens",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.maxOutputTokens;",
                "is_abstract": "",
                "class_name": "VertexAiGeminiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setMaxOutputTokens",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.maxOutputTokens = maxOutputTokens;",
                "is_abstract": "",
                "class_name": "VertexAiGeminiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.model;",
                "is_abstract": "",
                "class_name": "VertexAiGeminiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.model = modelName;",
                "is_abstract": "",
                "class_name": "VertexAiGeminiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getFunctionCallbacks",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.functionCallbacks;",
                "is_abstract": "",
                "class_name": "VertexAiGeminiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setFunctionCallbacks",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.functionCallbacks = functionCallbacks;",
                "is_abstract": "",
                "class_name": "VertexAiGeminiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getFunctions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.functions;",
                "is_abstract": "",
                "class_name": "VertexAiGeminiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setFunctions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.functions = functions;",
                "is_abstract": "",
                "class_name": "VertexAiGeminiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "hashCode",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "final int prime = 31;\n\t\tint result = 1;\n\t\tresult = prime * result + ((stopSequences == null) ? 0 : stopSequences.hashCode());\n\t\tresult = prime * result + ((temperature == null) ? 0 : temperature.hashCode());\n\t\tresult = prime * result + ((topP == null) ? 0 : topP.hashCode());\n\t\tresult = prime * result + ((topK == null) ? 0 : topK.hashCode());\n\t\tresult = prime * result + ((candidateCount == null) ? 0 : candidateCount.hashCode());\n\t\tresult = prime * result + ((maxOutputTokens == null) ? 0 : maxOutputTokens.hashCode());\n\t\tresult = prime * result + ((model == null) ? 0 : model.hashCode());\n\t\tresult = prime * result + ((functionCallbacks == null) ? 0 : functionCallbacks.hashCode());\n\t\tresult = prime * result + ((functions == null) ? 0 : functions.hashCode());\n\t\treturn result;",
                "is_abstract": "",
                "class_name": "VertexAiGeminiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "equals",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (this == obj)\n\t\t\treturn true;\n\t\tif (obj == null)\n\t\t\treturn false;\n\t\tif (getClass() != obj.getClass())\n\t\t\treturn false;\n\t\tVertexAiGeminiChatOptions other = (VertexAiGeminiChatOptions) obj;\n\t\tif (stopSequences == null) {\n\t\t\tif (other.stopSequences != null)\n\t\t\t\treturn false;\n\t\t}\n\t\telse if (!stopSequences.equals(other.stopSequences))\n\t\t\treturn false;\n\t\tif (temperature == null) {\n\t\t\tif (other.temperature != null)\n\t\t\t\treturn false;\n\t\t}\n\t\telse if (!temperature.equals(other.temperature))\n\t\t\treturn false;\n\t\tif (topP == null) {\n\t\t\tif (other.topP != null)\n\t\t\t\treturn false;\n\t\t}\n\t\telse if (!topP.equals(other.topP))\n\t\t\treturn false;\n\t\tif (topK == null) {\n\t\t\tif (other.topK != null)\n\t\t\t\treturn false;\n\t\t}\n\t\telse if (!topK.equals(other.topK))\n\t\t\treturn false;\n\t\tif (candidateCount == null) {\n\t\t\tif (other.candidateCount != null)\n\t\t\t\treturn false;\n\t\t}\n\t\telse if (!candidateCount.equals(other.candidateCount))\n\t\t\treturn false;\n\t\tif (maxOutputTokens == null) {\n\t\t\tif (other.maxOutputTokens != null)\n\t\t\t\treturn false;\n\t\t}\n\t\telse if (!maxOutputTokens.equals(other.maxOutputTokens))\n\t\t\treturn false;\n\t\tif (model == null) {\n\t\t\tif (other.model != null)\n\t\t\t\treturn false;\n\t\t}\n\t\telse if (!model.equals(other.model))\n\t\t\treturn false;\n\t\tif (functionCallbacks == null) {\n\t\t\tif (other.functionCallbacks != null)\n\t\t\t\treturn false;\n\t\t}\n\t\telse if (!functionCallbacks.equals(other.functionCallbacks))\n\t\t\treturn false;\n\t\tif (functions == null) {\n\t\t\tif (other.functions != null)\n\t\t\t\treturn false;\n\t\t}\n\t\telse if (!functions.equals(other.functions))\n\t\t\treturn false;\n\t\treturn true;",
                "is_abstract": "",
                "class_name": "VertexAiGeminiChatOptions Builder",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-vertex-ai-gemini/src/main/java/org/springframework/ai/vertexai/gemini/MimeTypeDetector.java",
        "class_names": [
            "MimeTypeDetector"
        ],
        "imports": "import org.springframework.util.MimeTypeUtils;\nimport java.io.File;\nimport java.net.URI;\nimport java.nio.file.Path;\nimport java.util.Map;\nimport java.util.HashMap;\nimport org.springframework.core.io.Resource;\nimport org.springframework.util.MimeType;\nimport java.net.URL;\nimport java.io.IOException;",
        "package_import_paths": {
            "org.springframework.ai.vertexai.gemini.MimeTypeDetector": "org.springframework.ai.vertexai.gemini.MimeTypeDetector",
            "org.springframework.ai.vertexai.gemini.getMimeTy": "org.springframework.ai.vertexai.gemini.getMimeTy",
            "org.springframework.ai.vertexai.gemini.GEMINI_MIME_TYPES": "org.springframework.ai.vertexai.gemini.GEMINI_MIME_TYPES"
        },
        "package": "package org.springframework.ai.vertexai.gemini;",
        "property_declarations": [
            "private static final Map<String, MimeType> GEMINI_MIME_TYPES = new HashMap<>();"
        ],
        "functions": [
            {
                "name": "getMimeType",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return getMimeType(url.getFile());",
                "is_abstract": "",
                "class_name": "MimeTypeDetector",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-vertex-ai-gemini/src/main/java/org/springframework/ai/vertexai/gemini/metadata/VertexAiChatResponseMetadata.java",
        "class_names": [
            "VertexAiChatResponseMetadata"
        ],
        "imports": "import org.springframework.ai.chat.metadata.Usage;\nimport org.springframework.ai.chat.metadata.ChatResponseMetadata;",
        "package_import_paths": {
            "org.springframework.ai.vertexai.gemini.metadata.VertexAiChatResponseMetadat": "org.springframework.ai.vertexai.gemini.metadata.VertexAiChatResponseMetadat",
            "org.springframework.ai.vertexai.gemini.metadata.getUs": "org.springframework.ai.vertexai.gemini.metadata.getUs",
            "org.springframework.ai.vertexai.gemini.metadata.us": "org.springframework.ai.vertexai.gemini.metadata.us"
        },
        "package": "package org.springframework.ai.vertexai.gemini.metadata;",
        "property_declarations": [
            "private final VertexAiUsage usage;"
        ],
        "functions": [
            {
                "name": "getUsage",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.usage;",
                "is_abstract": "",
                "class_name": "VertexAiChatResponseMetadata",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-vertex-ai-gemini/src/main/java/org/springframework/ai/vertexai/gemini/metadata/VertexAiUsage.java",
        "class_names": [
            "VertexAiUsage"
        ],
        "imports": "import org.springframework.ai.chat.metadata.Usage;\nimport com.google.cloud.vertexai.api.GenerateContentResponse.UsageMetadata;\nimport org.springframework.util.Assert;",
        "package_import_paths": {
            "org.springframework.ai.vertexai.gemini.metadata.VertexAiUs": "org.springframework.ai.vertexai.gemini.metadata.VertexAiUs",
            "org.springframework.ai.vertexai.gemini.metadata.getPromptTokens": "org.springframework.ai.vertexai.gemini.metadata.getPromptTokens",
            "org.springframework.ai.vertexai.gemini.metadata.getGenerationTokens": "org.springframework.ai.vertexai.gemini.metadata.getGenerationTokens",
            "org.springframework.ai.vertexai.gemini.metadata.usageMetadat": "org.springframework.ai.vertexai.gemini.metadata.usageMetadat"
        },
        "package": "package org.springframework.ai.vertexai.gemini.metadata;",
        "property_declarations": [
            "private final UsageMetadata usageMetadata;"
        ],
        "functions": [
            {
                "name": "getPromptTokens",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return Long.valueOf(usageMetadata.getPromptTokenCount());",
                "is_abstract": "",
                "class_name": "VertexAiUsage",
                "annotations": []
            },
            {
                "name": "getGenerationTokens",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return Long.valueOf(usageMetadata.getCandidatesTokenCount());",
                "is_abstract": "",
                "class_name": "VertexAiUsage",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-vertex-ai-gemini/src/main/java/org/springframework/ai/vertexai/gemini/aot/VertexAiGeminiRuntimeHints.java",
        "class_names": [
            "VertexAiGeminiRuntimeHints"
        ],
        "imports": "import org.springframework.aot.hint.MemberCategory;\nimport org.springframework.aot.hint.RuntimeHints;\nimport org.springframework.aot.hint.RuntimeHintsRegistrar;\nimport org.springframework.ai.vertexai.gemini.VertexAiGeminiChatClient;\nimport static org.springframework.ai.aot.AiRuntimeHints.findJsonAnnotatedClassesInPackage;",
        "package_import_paths": {
            "org.springframework.ai.vertexai.gemini.aot.VertexAiGeminiRuntimeHints": "org.springframework.ai.vertexai.gemini.aot.VertexAiGeminiRuntimeHints",
            "org.springframework.ai.vertexai.gemini.aot.registerHints": "org.springframework.ai.vertexai.gemini.aot.registerHints"
        },
        "package": "package org.springframework.ai.vertexai.gemini.aot;",
        "property_declarations": [],
        "functions": [
            {
                "name": "registerHints",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var mcs = MemberCategory.values();\n\t\tfor (var tr : findJsonAnnotatedClassesInPackage(VertexAiGeminiChatClient.class))\n\t\t\thints.reflection().registerType(tr, mcs);",
                "is_abstract": "",
                "class_name": "VertexAiGeminiRuntimeHints",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-huggingface/src/test/java/org/springframework/ai/huggingface/HuggingfaceTestConfiguration.java",
        "class_names": [
            "HuggingfaceTestConfiguration"
        ],
        "imports": "import org.springframework.context.annotation.Bean;\nimport org.springframework.boot.SpringBootConfiguration;\nimport org.springframework.util.StringUtils;",
        "package_import_paths": {
            "org.springframework.ai.huggingface.HuggingfaceTestConfiguration": "org.springframework.ai.huggingface.HuggingfaceTestConfiguration",
            "org.springframework.ai.huggingface.huggingfaceChatClient": "org.springframework.ai.huggingface.huggingfaceChatClient"
        },
        "package": "package org.springframework.ai.huggingface;",
        "property_declarations": [],
        "functions": [
            {
                "name": "huggingfaceChatClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String apiKey = System.getenv(\"HUGGINGFACE_API_KEY\");\n\t\tif (!StringUtils.hasText(apiKey)) {\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\"You must provide an API key.  Put it in an environment variable under the name HUGGINGFACE_API_KEY\");\n\t\t}\n\t\t// Created aws-mistral-7b-instruct-v0-1-805 via\n\t\t// https://ui.endpoints.huggingface.co/\n\t\tHuggingfaceChatClient huggingfaceChatClient = new HuggingfaceChatClient(apiKey,\n\t\t\t\t\"https://f6hg7b3cvlmntp5i.us-east-1.aws.endpoints.huggingface.cloud\");\n\t\treturn huggingfaceChatClient;",
                "is_abstract": "",
                "class_name": "HuggingfaceTestConfiguration",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-huggingface/src/test/java/org/springframework/ai/huggingface/client/ClientIT.java",
        "class_names": [
            "ClientIT"
        ],
        "imports": "import org.springframework.ai.chat.prompt.Prompt;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.Disabled;\nimport org.springframework.ai.huggingface.HuggingfaceChatClient;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.ai.chat.ChatResponse;",
        "package_import_paths": {
            "org.springframework.ai.huggingface.client.ClientIT": "org.springframework.ai.huggingface.client.ClientIT",
            "org.springframework.ai.huggingface.client.helloWorldCompletion": "org.springframework.ai.huggingface.client.helloWorldCompletion",
            "org.springframework.ai.huggingface.client.protected": "org.springframework.ai.huggingface.client.protected"
        },
        "package": "package org.springframework.ai.huggingface.client;",
        "property_declarations": [
            "@Autowired\n\tprotected HuggingfaceChatClient huggingfaceChatClient;"
        ],
        "functions": [
            {
                "name": "helloWorldCompletion",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String mistral7bInstruct = \"\"\"\n\t\t\t\t[INST] You are a helpful code assistant. Your task is to generate a valid JSON object based on the given information:\n\t\t\t\tname: John\n\t\t\t\tlastname: Smith\n\t\t\t\taddress: #1 Samuel St.\n\t\t\t\tJust generate the JSON object without explanations:\n\t\t\t\t[/INST]\n\t\t\t\t \"\"\";\n\t\tPrompt prompt = new Prompt(mistral7bInstruct);\n\t\tChatResponse chatResponse = huggingfaceChatClient.call(prompt);\n\t\tassertThat(chatResponse.getResult().getOutput().getContent()).isNotEmpty();\n\t\tString expectedResponse = \"\"\"\n\t\t\t\t```json\n\t\t\t\t{\n\t\t\t\t    \"name\": \"John\",\n\t\t\t\t    \"lastname\": \"Smith\",\n\t\t\t\t    \"address\": \"#1 Samuel St.\"\n\t\t\t\t}\n\t\t\t\t```\"\"\";\n\t\tassertThat(chatResponse.getResult().getOutput().getContent()).isEqualTo(expectedResponse);\n\t\tassertThat(chatResponse.getResult().getOutput().getProperties()).containsKey(\"generated_tokens\");\n\t\tassertThat(chatResponse.getResult().getOutput().getProperties()).containsEntry(\"generated_tokens\", 39);",
                "is_abstract": "",
                "class_name": "ClientIT",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-huggingface/src/main/java/org/springframework/ai/huggingface/HuggingfaceChatClient.java",
        "class_names": [
            "HuggingfaceChatClient"
        ],
        "imports": "import org.springframework.ai.huggingface.model.GenerateParameters;\nimport java.util.ArrayList;\nimport org.springframework.ai.chat.prompt.Prompt;\nimport java.util.List;\nimport org.springframework.ai.huggingface.model.GenerateRequest;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.springframework.ai.chat.ChatClient;\nimport org.springframework.ai.chat.Generation;\nimport org.springframework.ai.huggingface.model.AllOfGenerateResponseDetails;\nimport org.springframework.ai.huggingface.model.GenerateResponse;\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport java.util.Map;\nimport org.springframework.ai.huggingface.invoker.ApiClient;\nimport org.springframework.ai.huggingface.api.TextGenerationInferenceApi;\nimport org.springframework.ai.chat.ChatResponse;",
        "package_import_paths": {
            "org.springframework.ai.huggingface.HuggingfaceChatClient": "org.springframework.ai.huggingface.HuggingfaceChatClient",
            "org.springframework.ai.huggingface.call": "org.springframework.ai.huggingface.call",
            "org.springframework.ai.huggingface.getMaxNewTokens": "org.springframework.ai.huggingface.getMaxNewTokens",
            "org.springframework.ai.huggingface.setMaxNewTokens": "org.springframework.ai.huggingface.setMaxNewTokens",
            "org.springframework.ai.huggingface.apiToken": "org.springframework.ai.huggingface.apiToken",
            "org.springframework.ai.huggingface.apiClient": "org.springframework.ai.huggingface.apiClient",
            "org.springframework.ai.huggingface.objectMapper": "org.springframework.ai.huggingface.objectMapper",
            "org.springframework.ai.huggingface.textGenApi": "org.springframework.ai.huggingface.textGenApi",
            "org.springframework.ai.huggingface.maxNewTokens": "org.springframework.ai.huggingface.maxNewTokens"
        },
        "package": "package org.springframework.ai.huggingface;",
        "property_declarations": [
            "private ObjectMapper objectMapper = new ObjectMapper();",
            "private TextGenerationInferenceApi textGenApi = new TextGenerationInferenceApi();",
            "private final String apiToken;",
            "private int maxNewTokens = 1000;",
            "private ApiClient apiClient = new ApiClient();"
        ],
        "functions": [
            {
                "name": "call",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "GenerateRequest generateRequest = new GenerateRequest();\n\t\tgenerateRequest.setInputs(prompt.getContents());\n\t\tGenerateParameters generateParameters = new GenerateParameters();\n\t\t// TODO - need to expose API to set parameters per call.\n\t\tgenerateParameters.setMaxNewTokens(maxNewTokens);\n\t\tgenerateRequest.setParameters(generateParameters);\n\t\tGenerateResponse generateResponse = this.textGenApi.generate(generateRequest);\n\t\tString generatedText = generateResponse.getGeneratedText();\n\t\tList<Generation> generations = new ArrayList<>();\n\t\tAllOfGenerateResponseDetails allOfGenerateResponseDetails = generateResponse.getDetails();\n\t\tMap<String, Object> detailsMap = objectMapper.convertValue(allOfGenerateResponseDetails,\n\t\t\t\tnew TypeReference<Map<String, Object>>() {\n\t\t\t\t});\n\t\tGeneration generation = new Generation(generatedText, detailsMap);\n\t\tgenerations.add(generation);\n\t\treturn new ChatResponse(generations);",
                "is_abstract": "",
                "class_name": "HuggingfaceChatClient",
                "annotations": []
            },
            {
                "name": "getMaxNewTokens",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return maxNewTokens;",
                "is_abstract": "",
                "class_name": "HuggingfaceChatClient",
                "annotations": []
            },
            {
                "name": "setMaxNewTokens",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.maxNewTokens = maxNewTokens;",
                "is_abstract": "",
                "class_name": "HuggingfaceChatClient",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-stability-ai/src/test/java/org/springframework/ai/stabilityai/StabilityAiImageClientIT.java",
        "class_names": [
            "StabilityAiImageClientIT"
        ],
        "imports": "import java.io.File;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport java.util.Base64;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport java.io.FileOutputStream;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.ai.image.*;\nimport java.io.IOException;\nimport org.springframework.ai.stabilityai.api.StabilityAiImageOptions;",
        "package_import_paths": {
            "org.springframework.ai.stabilityai.StabilityAiImageClientIT": "org.springframework.ai.stabilityai.StabilityAiImageClientIT",
            "org.springframework.ai.stabilityai.imageAsBase64Test": "org.springframework.ai.stabilityai.imageAsBase64Test",
            "org.springframework.ai.stabilityai.writeFil": "org.springframework.ai.stabilityai.writeFil",
            "org.springframework.ai.stabilityai.protected": "org.springframework.ai.stabilityai.protected"
        },
        "package": "package org.springframework.ai.stabilityai;",
        "property_declarations": [
            "@Autowired\n\tprotected ImageClient stabilityAiImageClient;"
        ],
        "functions": [
            {
                "name": "imageAsBase64Test",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "StabilityAiImageOptions imageOptions = StabilityAiImageOptions.builder()\n\t\t\t.withStylePreset(StyleEnum.PHOTOGRAPHIC)\n\t\t\t.build();\n\n\t\tvar instructions = \"\"\"\n\t\t\t\tA light cream colored mini golden doodle.\n\t\t\t\t\"\"\";\n\n\t\tImagePrompt imagePrompt = new ImagePrompt(instructions, imageOptions);\n\n\t\tImageResponse imageResponse = this.stabilityAiImageClient.call(imagePrompt);\n\n\t\tImageGeneration imageGeneration = imageResponse.getResult();\n\t\tImage image = imageGeneration.getOutput();\n\n\t\tassertThat(image.getB64Json()).isNotEmpty();\n\n\t\twriteFile(image);",
                "is_abstract": "",
                "class_name": "StabilityAiImageClientIT",
                "annotations": []
            },
            {
                "name": "writeFile",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "byte[] imageBytes = Base64.getDecoder().decode(image.getB64Json());\n\t\tString systemTempDir = System.getProperty(\"java.io.tmpdir\");\n\t\tString filePath = systemTempDir + File.separator + \"dog.png\";\n\t\tFile file = new File(filePath);\n\t\ttry (FileOutputStream fos = new FileOutputStream(file)) {\n\t\t\tfos.write(imageBytes);\n\t\t}",
                "is_abstract": "",
                "class_name": "StabilityAiImageClientIT",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-stability-ai/src/test/java/org/springframework/ai/stabilityai/StabilityAiImageTestConfiguration.java",
        "class_names": [
            "StabilityAiImageTestConfiguration"
        ],
        "imports": "import org.springframework.context.annotation.Bean;\nimport org.springframework.ai.stabilityai.api.StabilityAiApi;\nimport org.springframework.boot.SpringBootConfiguration;\nimport org.springframework.util.StringUtils;",
        "package_import_paths": {
            "org.springframework.ai.stabilityai.StabilityAiImageTestConfiguration": "org.springframework.ai.stabilityai.StabilityAiImageTestConfiguration",
            "org.springframework.ai.stabilityai.stabilityAiApi": "org.springframework.ai.stabilityai.stabilityAiApi",
            "org.springframework.ai.stabilityai.stabilityAiImageClient": "org.springframework.ai.stabilityai.stabilityAiImageClient",
            "org.springframework.ai.stabilityai.getApiKey": "org.springframework.ai.stabilityai.getApiKey"
        },
        "package": "package org.springframework.ai.stabilityai;",
        "property_declarations": [],
        "functions": [
            {
                "name": "stabilityAiApi",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new StabilityAiApi(getApiKey());",
                "is_abstract": "",
                "class_name": "StabilityAiImageTestConfiguration",
                "annotations": []
            },
            {
                "name": "stabilityAiImageClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new StabilityAiImageClient(stabilityAiApi);",
                "is_abstract": "",
                "class_name": "StabilityAiImageTestConfiguration",
                "annotations": []
            },
            {
                "name": "getApiKey",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String apiKey = System.getenv(\"STABILITYAI_API_KEY\");\n\t\tif (!StringUtils.hasText(apiKey)) {\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\"You must provide an API key.  Put it in an environment variable under the name STABILITYAI_API_KEY\");\n\t\t}\n\t\treturn apiKey;",
                "is_abstract": "",
                "class_name": "StabilityAiImageTestConfiguration",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-stability-ai/src/test/java/org/springframework/ai/stabilityai/StabilityAiApiIT.java",
        "class_names": [
            "StabilityAiApiIT"
        ],
        "imports": "import java.io.File;\nimport java.util.List;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport java.util.Base64;\nimport java.io.FileOutputStream;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.stabilityai.api.StabilityAiApi;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport java.io.IOException;",
        "package_import_paths": {
            "org.springframework.ai.stabilityai.StabilityAiApiIT": "org.springframework.ai.stabilityai.StabilityAiApiIT",
            "org.springframework.ai.stabilityai.generateIm": "org.springframework.ai.stabilityai.generateIm",
            "org.springframework.ai.stabilityai.writeToFil": "org.springframework.ai.stabilityai.writeToFil",
            "org.springframework.ai.stabilityai.stabilityAiApi": "org.springframework.ai.stabilityai.stabilityAiApi"
        },
        "package": "package org.springframework.ai.stabilityai;",
        "property_declarations": [
            "StabilityAiApi stabilityAiApi = new StabilityAiApi(System.getenv(\"STABILITYAI_API_KEY\"));"
        ],
        "functions": [
            {
                "name": "generateImage",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "List<StabilityAiApi.GenerateImageRequest.TextPrompts> textPrompts = List\n\t\t\t.of(new StabilityAiApi.GenerateImageRequest.TextPrompts(\n\t\t\t\t\t\"A light cream colored mini golden doodle holding a sign that says 'Heading to BARCADE !'\", 0.5f));\n\t\tvar builder = StabilityAiApi.GenerateImageRequest.builder()\n\t\t\t.withTextPrompts(textPrompts)\n\t\t\t.withHeight(1024)\n\t\t\t.withWidth(1024)\n\t\t\t.withCfgScale(7f)\n\t\t\t.withSamples(1)\n\t\t\t.withSeed(123L)\n\t\t\t.withSteps(30)\n\t\t\t.withStylePreset(\"photographic\");\n\t\tStabilityAiApi.GenerateImageRequest request = builder.build();\n\t\tStabilityAiApi.GenerateImageResponse response = stabilityAiApi.generateImage(request);\n\n\t\tassertThat(response).isNotNull();\n\t\tList<StabilityAiApi.GenerateImageResponse.Artifacts> artifacts = response.artifacts();\n\t\twriteToFile(artifacts);\n\t\tassertThat(artifacts).hasSize(1);\n\t\tvar firstArtifact = artifacts.get(0);\n\t\tassertThat(firstArtifact.base64()).isNotEmpty();\n\t\tassertThat(firstArtifact.seed()).isPositive();\n\t\tassertThat(firstArtifact.finishReason()).isEqualTo(\"SUCCESS\");",
                "is_abstract": "",
                "class_name": "StabilityAiApiIT",
                "annotations": []
            },
            {
                "name": "writeToFile",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "int counter = 0;\n\t\tString systemTempDir = System.getProperty(\"java.io.tmpdir\");\n\t\tfor (StabilityAiApi.GenerateImageResponse.Artifacts artifact : artifacts) {\n\t\t\tcounter++;\n\t\t\tbyte[] imageBytes = Base64.getDecoder().decode(artifact.base64());\n\t\t\tString fileName = String.format(\"dog%d.png\", counter);\n\t\t\tString filePath = systemTempDir + File.separator + fileName;\n\t\t\tFile file = new File(filePath);\n\t\t\ttry (FileOutputStream fos = new FileOutputStream(file)) {\n\t\t\t\tfos.write(imageBytes);\n\t\t\t}\n\t\t}",
                "is_abstract": "",
                "class_name": "StabilityAiApiIT",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-stability-ai/src/main/java/org/springframework/ai/stabilityai/StyleEnum.java",
        "class_names": [],
        "imports": "",
        "package_import_paths": {
            "org.springframework.ai.stabilityai.toStrin": "org.springframework.ai.stabilityai.toStrin",
            "org.springframework.ai.stabilityai.text": "org.springframework.ai.stabilityai.text"
        },
        "package": "package org.springframework.ai.stabilityai;",
        "property_declarations": [
            "private final String text;"
        ],
        "functions": [
            {
                "name": "toString",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return text;",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-stability-ai/src/main/java/org/springframework/ai/stabilityai/StabilityAiImageClient.java",
        "class_names": [
            "StabilityAiImageClient"
        ],
        "imports": "import java.util.stream.Collectors;\nimport org.springframework.ai.image.ImageResponseMetadata;\nimport org.springframework.ai.image.Image;\nimport java.util.List;\nimport org.springframework.util.Assert;\nimport org.slf4j.LoggerFactory;\nimport org.slf4j.Logger;\nimport org.springframework.ai.image.ImageResponse;\nimport org.springframework.ai.image.ImageOptions;\nimport org.springframework.ai.model.ModelOptionsUtils;\nimport org.springframework.ai.stabilityai.api.StabilityAiApi;\nimport org.springframework.ai.image.ImageGeneration;\nimport org.springframework.ai.image.ImagePrompt;\nimport org.springframework.ai.image.ImageClient;\nimport org.springframework.ai.stabilityai.api.StabilityAiImageOptions;",
        "package_import_paths": {
            "org.springframework.ai.stabilityai.StabilityAiImageClient": "org.springframework.ai.stabilityai.StabilityAiImageClient",
            "org.springframework.ai.stabilityai.getOptions": "org.springframework.ai.stabilityai.getOptions",
            "org.springframework.ai.stabilityai.call": "org.springframework.ai.stabilityai.call",
            "org.springframework.ai.stabilityai.getGenerateImageRequest": "org.springframework.ai.stabilityai.getGenerateImageRequest",
            "org.springframework.ai.stabilityai.convertRespons": "org.springframework.ai.stabilityai.convertRespons",
            "org.springframework.ai.stabilityai.convertOptions": "org.springframework.ai.stabilityai.convertOptions",
            "org.springframework.ai.stabilityai.logger": "org.springframework.ai.stabilityai.logger",
            "org.springframework.ai.stabilityai.options": "org.springframework.ai.stabilityai.options",
            "org.springframework.ai.stabilityai.stabilityAiApi": "org.springframework.ai.stabilityai.stabilityAiApi"
        },
        "package": "package org.springframework.ai.stabilityai;",
        "property_declarations": [
            "private final StabilityAiApi stabilityAiApi;",
            "private StabilityAiImageOptions options;",
            "private final Logger logger = LoggerFactory.getLogger(getClass());"
        ],
        "functions": [
            {
                "name": "getOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.options;",
                "is_abstract": "",
                "class_name": "StabilityAiImageClient",
                "annotations": []
            },
            {
                "name": "call",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "ImageOptions runtimeOptions = imagePrompt.getOptions();\n\n\t\t// Merge the runtime options passed via the prompt with the StabilityAiImageClient\n\t\t// options configured via Autoconfiguration.\n\t\t// Runtime options overwrite StabilityAiImageClient options\n\t\tStabilityAiImageOptions optionsToUse = ModelOptionsUtils.merge(runtimeOptions, this.options,\n\t\t\t\tStabilityAiImageOptions.class);\n\n\t\t// Copy the org.springframework.ai.model derived ImagePrompt and ImageOptions data\n\t\t// types to the data types used in StabilityAiApi\n\t\tStabilityAiApi.GenerateImageRequest generateImageRequest = getGenerateImageRequest(imagePrompt, optionsToUse);\n\n\t\t// Make the request\n\t\tStabilityAiApi.GenerateImageResponse generateImageResponse = this.stabilityAiApi\n\t\t\t.generateImage(generateImageRequest);\n\n\t\t// Convert to org.springframework.ai.model derived ImageResponse data type\n\t\treturn convertResponse(generateImageResponse);",
                "is_abstract": "",
                "class_name": "StabilityAiImageClient",
                "annotations": []
            },
            {
                "name": "getGenerateImageRequest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "StabilityAiApi.GenerateImageRequest.Builder builder = new StabilityAiApi.GenerateImageRequest.Builder();\n\t\tStabilityAiApi.GenerateImageRequest generateImageRequest = builder\n\t\t\t.withTextPrompts(stabilityAiImagePrompt.getInstructions()\n\t\t\t\t.stream()\n\t\t\t\t.map(message -> new StabilityAiApi.GenerateImageRequest.TextPrompts(message.getText(),\n\t\t\t\t\t\tmessage.getWeight()))\n\t\t\t\t.collect(Collectors.toList()))\n\t\t\t.withHeight(optionsToUse.getHeight())\n\t\t\t.withWidth(optionsToUse.getWidth())\n\t\t\t.withCfgScale(optionsToUse.getCfgScale())\n\t\t\t.withClipGuidancePreset(optionsToUse.getClipGuidancePreset())\n\t\t\t.withSampler(optionsToUse.getSampler())\n\t\t\t.withSamples(optionsToUse.getN())\n\t\t\t.withSeed(optionsToUse.getSeed())\n\t\t\t.withSteps(optionsToUse.getSteps())\n\t\t\t.withStylePreset(optionsToUse.getStylePreset())\n\t\t\t.build();\n\t\treturn generateImageRequest;",
                "is_abstract": "",
                "class_name": "StabilityAiImageClient",
                "annotations": []
            },
            {
                "name": "convertResponse",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "List<ImageGeneration> imageGenerationList = generateImageResponse.artifacts().stream().map(entry -> {\n\t\t\treturn new ImageGeneration(new Image(null, entry.base64()),\n\t\t\t\t\tnew StabilityAiImageGenerationMetadata(entry.finishReason(), entry.seed()));\n\t\t}).toList();\n\n\t\treturn new ImageResponse(imageGenerationList, ImageResponseMetadata.NULL);",
                "is_abstract": "",
                "class_name": "StabilityAiImageClient",
                "annotations": []
            },
            {
                "name": "convertOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "StabilityAiImageOptions.Builder builder = StabilityAiImageOptions.builder();\n\t\tif (runtimeOptions == null) {\n\t\t\treturn builder.build();\n\t\t}\n\t\tif (runtimeOptions.getN() != null) {\n\t\t\tbuilder.withN(runtimeOptions.getN());\n\t\t}\n\t\tif (runtimeOptions.getModel() != null) {\n\t\t\tbuilder.withModel(runtimeOptions.getModel());\n\t\t}\n\t\tif (runtimeOptions.getResponseFormat() != null) {\n\t\t\tbuilder.withResponseFormat(runtimeOptions.getResponseFormat());\n\t\t}\n\t\tif (runtimeOptions.getWidth() != null) {\n\t\t\tbuilder.withWidth(runtimeOptions.getWidth());\n\t\t}\n\t\tif (runtimeOptions.getHeight() != null) {\n\t\t\tbuilder.withHeight(runtimeOptions.getHeight());\n\t\t}\n\t\tif (runtimeOptions instanceof StabilityAiImageOptions) {\n\t\t\tStabilityAiImageOptions stabilityAiImageOptions = (StabilityAiImageOptions) runtimeOptions;\n\t\t\tif (stabilityAiImageOptions.getCfgScale() != null) {\n\t\t\t\tbuilder.withCfgScale(stabilityAiImageOptions.getCfgScale());\n\t\t\t}\n\t\t\tif (stabilityAiImageOptions.getClipGuidancePreset() != null) {\n\t\t\t\tbuilder.withClipGuidancePreset(stabilityAiImageOptions.getClipGuidancePreset());\n\t\t\t}\n\t\t\tif (stabilityAiImageOptions.getSampler() != null) {\n\t\t\t\tbuilder.withSampler(stabilityAiImageOptions.getSampler());\n\t\t\t}\n\t\t\tif (stabilityAiImageOptions.getSeed() != null) {\n\t\t\t\tbuilder.withSeed(stabilityAiImageOptions.getSeed());\n\t\t\t}\n\t\t\tif (stabilityAiImageOptions.getSteps() != null) {\n\t\t\t\tbuilder.withSteps(stabilityAiImageOptions.getSteps());\n\t\t\t}\n\t\t\tif (stabilityAiImageOptions.getStylePreset() != null) {\n\t\t\t\tbuilder.withStylePreset(stabilityAiImageOptions.getStylePreset());\n\t\t\t}\n\t\t}\n\t\treturn builder.build();",
                "is_abstract": "",
                "class_name": "StabilityAiImageClient",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-stability-ai/src/main/java/org/springframework/ai/stabilityai/StabilityAiImageGenerationMetadata.java",
        "class_names": [
            "StabilityAiImageGenerationMetadata"
        ],
        "imports": "import org.springframework.ai.image.ImageGenerationMetadata;\nimport java.util.Objects;",
        "package_import_paths": {
            "org.springframework.ai.stabilityai.StabilityAiImageGenerationMetadat": "org.springframework.ai.stabilityai.StabilityAiImageGenerationMetadat",
            "org.springframework.ai.stabilityai.getFinishReason": "org.springframework.ai.stabilityai.getFinishReason",
            "org.springframework.ai.stabilityai.getSeed": "org.springframework.ai.stabilityai.getSeed",
            "org.springframework.ai.stabilityai.toStrin": "org.springframework.ai.stabilityai.toStrin",
            "org.springframework.ai.stabilityai.equals": "org.springframework.ai.stabilityai.equals",
            "org.springframework.ai.stabilityai.hashCod": "org.springframework.ai.stabilityai.hashCod",
            "org.springframework.ai.stabilityai.finishReason": "org.springframework.ai.stabilityai.finishReason",
            "org.springframework.ai.stabilityai.seed": "org.springframework.ai.stabilityai.seed"
        },
        "package": "package org.springframework.ai.stabilityai;",
        "property_declarations": [
            "private Long seed;",
            "private String finishReason;"
        ],
        "functions": [
            {
                "name": "getFinishReason",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.finishReason;",
                "is_abstract": "",
                "class_name": "StabilityAiImageGenerationMetadata",
                "annotations": []
            },
            {
                "name": "getSeed",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.seed;",
                "is_abstract": "",
                "class_name": "StabilityAiImageGenerationMetadata",
                "annotations": []
            },
            {
                "name": "toString",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return \"StabilityAiImageGenerationMetadata{\" + \"finishReason='\" + this.finishReason + '\\'' + \", seed=\"\n\t\t\t\t+ this.seed + '}';",
                "is_abstract": "",
                "class_name": "StabilityAiImageGenerationMetadata",
                "annotations": []
            },
            {
                "name": "equals",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (this == o)\n\t\t\treturn true;\n\t\tif (!(o instanceof StabilityAiImageGenerationMetadata that))\n\t\t\treturn false;\n\t\treturn Objects.equals(this.finishReason, that.finishReason) && Objects.equals(this.seed, that.seed);",
                "is_abstract": "",
                "class_name": "StabilityAiImageGenerationMetadata",
                "annotations": []
            },
            {
                "name": "hashCode",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return Objects.hash(this.finishReason, this.seed);",
                "is_abstract": "",
                "class_name": "StabilityAiImageGenerationMetadata",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-stability-ai/src/main/java/org/springframework/ai/stabilityai/api/StabilityAiImageOptions.java",
        "class_names": [
            "Builder",
            "StabilityAiImageOptions"
        ],
        "imports": "import com.fasterxml.jackson.annotation.JsonInclude;\nimport org.springframework.ai.image.ImageOptions;\nimport java.util.Objects;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport org.springframework.ai.stabilityai.StyleEnum;",
        "package_import_paths": {
            "org.springframework.ai.stabilityai.api.StabilityAiImageOptions": "org.springframework.ai.stabilityai.api.StabilityAiImageOptions",
            "org.springframework.ai.stabilityai.api.Builder": "org.springframework.ai.stabilityai.api.Builder",
            "org.springframework.ai.stabilityai.api.builder": "org.springframework.ai.stabilityai.api.builder",
            "org.springframework.ai.stabilityai.api.withN": "org.springframework.ai.stabilityai.api.withN",
            "org.springframework.ai.stabilityai.api.withModel": "org.springframework.ai.stabilityai.api.withModel",
            "org.springframework.ai.stabilityai.api.withWidth": "org.springframework.ai.stabilityai.api.withWidth",
            "org.springframework.ai.stabilityai.api.withHeight": "org.springframework.ai.stabilityai.api.withHeight",
            "org.springframework.ai.stabilityai.api.withResponseFormat": "org.springframework.ai.stabilityai.api.withResponseFormat",
            "org.springframework.ai.stabilityai.api.withCfgScal": "org.springframework.ai.stabilityai.api.withCfgScal",
            "org.springframework.ai.stabilityai.api.withClipGuidancePreset": "org.springframework.ai.stabilityai.api.withClipGuidancePreset",
            "org.springframework.ai.stabilityai.api.withSampler": "org.springframework.ai.stabilityai.api.withSampler",
            "org.springframework.ai.stabilityai.api.withSeed": "org.springframework.ai.stabilityai.api.withSeed",
            "org.springframework.ai.stabilityai.api.withSteps": "org.springframework.ai.stabilityai.api.withSteps",
            "org.springframework.ai.stabilityai.api.withSamples": "org.springframework.ai.stabilityai.api.withSamples",
            "org.springframework.ai.stabilityai.api.withStylePreset": "org.springframework.ai.stabilityai.api.withStylePreset",
            "org.springframework.ai.stabilityai.api.build": "org.springframework.ai.stabilityai.api.build",
            "org.springframework.ai.stabilityai.api.getN": "org.springframework.ai.stabilityai.api.getN",
            "org.springframework.ai.stabilityai.api.setN": "org.springframework.ai.stabilityai.api.setN",
            "org.springframework.ai.stabilityai.api.getModel": "org.springframework.ai.stabilityai.api.getModel",
            "org.springframework.ai.stabilityai.api.setModel": "org.springframework.ai.stabilityai.api.setModel",
            "org.springframework.ai.stabilityai.api.getWidth": "org.springframework.ai.stabilityai.api.getWidth",
            "org.springframework.ai.stabilityai.api.setWidth": "org.springframework.ai.stabilityai.api.setWidth",
            "org.springframework.ai.stabilityai.api.getHeight": "org.springframework.ai.stabilityai.api.getHeight",
            "org.springframework.ai.stabilityai.api.setHeight": "org.springframework.ai.stabilityai.api.setHeight",
            "org.springframework.ai.stabilityai.api.getResponseFormat": "org.springframework.ai.stabilityai.api.getResponseFormat",
            "org.springframework.ai.stabilityai.api.setResponseFormat": "org.springframework.ai.stabilityai.api.setResponseFormat",
            "org.springframework.ai.stabilityai.api.getCfgScal": "org.springframework.ai.stabilityai.api.getCfgScal",
            "org.springframework.ai.stabilityai.api.setCfgScal": "org.springframework.ai.stabilityai.api.setCfgScal",
            "org.springframework.ai.stabilityai.api.getClipGuidancePreset": "org.springframework.ai.stabilityai.api.getClipGuidancePreset",
            "org.springframework.ai.stabilityai.api.setClipGuidancePreset": "org.springframework.ai.stabilityai.api.setClipGuidancePreset",
            "org.springframework.ai.stabilityai.api.getSampler": "org.springframework.ai.stabilityai.api.getSampler",
            "org.springframework.ai.stabilityai.api.setSampler": "org.springframework.ai.stabilityai.api.setSampler",
            "org.springframework.ai.stabilityai.api.getSeed": "org.springframework.ai.stabilityai.api.getSeed",
            "org.springframework.ai.stabilityai.api.setSeed": "org.springframework.ai.stabilityai.api.setSeed",
            "org.springframework.ai.stabilityai.api.getSteps": "org.springframework.ai.stabilityai.api.getSteps",
            "org.springframework.ai.stabilityai.api.setSteps": "org.springframework.ai.stabilityai.api.setSteps",
            "org.springframework.ai.stabilityai.api.getStylePreset": "org.springframework.ai.stabilityai.api.getStylePreset",
            "org.springframework.ai.stabilityai.api.setStylePreset": "org.springframework.ai.stabilityai.api.setStylePreset",
            "org.springframework.ai.stabilityai.api.equals": "org.springframework.ai.stabilityai.api.equals",
            "org.springframework.ai.stabilityai.api.hashCod": "org.springframework.ai.stabilityai.api.hashCod",
            "org.springframework.ai.stabilityai.api.toStrin": "org.springframework.ai.stabilityai.api.toStrin",
            "org.springframework.ai.stabilityai.api.n": "org.springframework.ai.stabilityai.api.n",
            "org.springframework.ai.stabilityai.api.model": "org.springframework.ai.stabilityai.api.model",
            "org.springframework.ai.stabilityai.api.width": "org.springframework.ai.stabilityai.api.width",
            "org.springframework.ai.stabilityai.api.height": "org.springframework.ai.stabilityai.api.height",
            "org.springframework.ai.stabilityai.api.responseFormat": "org.springframework.ai.stabilityai.api.responseFormat",
            "org.springframework.ai.stabilityai.api.cfgScal": "org.springframework.ai.stabilityai.api.cfgScal",
            "org.springframework.ai.stabilityai.api.clipGuidancePreset": "org.springframework.ai.stabilityai.api.clipGuidancePreset",
            "org.springframework.ai.stabilityai.api.sampler": "org.springframework.ai.stabilityai.api.sampler",
            "org.springframework.ai.stabilityai.api.seed": "org.springframework.ai.stabilityai.api.seed",
            "org.springframework.ai.stabilityai.api.steps": "org.springframework.ai.stabilityai.api.steps",
            "org.springframework.ai.stabilityai.api.stylePreset": "org.springframework.ai.stabilityai.api.stylePreset",
            "org.springframework.ai.stabilityai.api.options": "org.springframework.ai.stabilityai.api.options"
        },
        "package": "package org.springframework.ai.stabilityai.api;",
        "property_declarations": [
            "private String model = StabilityAiApi.DEFAULT_IMAGE_MODEL;",
            "@JsonProperty(\"seed\")\n\tprivate Long seed;",
            "@JsonProperty(\"style_preset\")\n\tprivate String stylePreset;",
            "@JsonProperty(\"sampler\")\n\tprivate String sampler;",
            "@JsonProperty(\"steps\")\n\tprivate Integer steps;",
            "@JsonProperty(\"height\")\n\tprivate Integer height;",
            "@JsonProperty(\"clip_guidance_preset\")\n\tprivate String clipGuidancePreset;",
            "@JsonProperty(\"cfg_scale\")\n\tprivate Float cfgScale;",
            "@JsonProperty(\"samples\")\n\tprivate Integer n;",
            "@JsonProperty(\"width\")\n\tprivate Integer width;",
            "private String responseFormat;",
            "private final StabilityAiImageOptions options;"
        ],
        "functions": [
            {
                "name": "builder",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Builder();",
                "is_abstract": "",
                "class_name": "StabilityAiImageOptions",
                "annotations": []
            },
            {
                "name": "withN",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "options.setN(n);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "StabilityAiImageOptions Builder",
                "annotations": []
            },
            {
                "name": "withModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "options.setModel(model);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "StabilityAiImageOptions Builder",
                "annotations": []
            },
            {
                "name": "withWidth",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "options.setWidth(width);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "StabilityAiImageOptions Builder",
                "annotations": []
            },
            {
                "name": "withHeight",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "options.setHeight(height);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "StabilityAiImageOptions Builder",
                "annotations": []
            },
            {
                "name": "withResponseFormat",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "options.setResponseFormat(responseFormat);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "StabilityAiImageOptions Builder",
                "annotations": []
            },
            {
                "name": "withCfgScale",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "options.setCfgScale(cfgScale);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "StabilityAiImageOptions Builder",
                "annotations": []
            },
            {
                "name": "withClipGuidancePreset",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "options.setClipGuidancePreset(clipGuidancePreset);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "StabilityAiImageOptions Builder",
                "annotations": []
            },
            {
                "name": "withSampler",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "options.setSampler(sampler);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "StabilityAiImageOptions Builder",
                "annotations": []
            },
            {
                "name": "withSeed",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "options.setSeed(seed);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "StabilityAiImageOptions Builder",
                "annotations": []
            },
            {
                "name": "withSteps",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "options.setSteps(steps);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "StabilityAiImageOptions Builder",
                "annotations": []
            },
            {
                "name": "withSamples",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "options.setN(samples);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "StabilityAiImageOptions Builder",
                "annotations": []
            },
            {
                "name": "withStylePreset",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "options.setStylePreset(stylePreset);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "StabilityAiImageOptions Builder",
                "annotations": []
            },
            {
                "name": "build",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return options;",
                "is_abstract": "",
                "class_name": "StabilityAiImageOptions Builder",
                "annotations": []
            },
            {
                "name": "getN",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return n;",
                "is_abstract": "",
                "class_name": "StabilityAiImageOptions Builder",
                "annotations": []
            },
            {
                "name": "setN",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.n = n;",
                "is_abstract": "",
                "class_name": "StabilityAiImageOptions Builder",
                "annotations": []
            },
            {
                "name": "getModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return model;",
                "is_abstract": "",
                "class_name": "StabilityAiImageOptions Builder",
                "annotations": []
            },
            {
                "name": "setModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.model = model;",
                "is_abstract": "",
                "class_name": "StabilityAiImageOptions Builder",
                "annotations": []
            },
            {
                "name": "getWidth",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return width;",
                "is_abstract": "",
                "class_name": "StabilityAiImageOptions Builder",
                "annotations": []
            },
            {
                "name": "setWidth",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.width = width;",
                "is_abstract": "",
                "class_name": "StabilityAiImageOptions Builder",
                "annotations": []
            },
            {
                "name": "getHeight",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return height;",
                "is_abstract": "",
                "class_name": "StabilityAiImageOptions Builder",
                "annotations": []
            },
            {
                "name": "setHeight",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.height = height;",
                "is_abstract": "",
                "class_name": "StabilityAiImageOptions Builder",
                "annotations": []
            },
            {
                "name": "getResponseFormat",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return responseFormat;",
                "is_abstract": "",
                "class_name": "StabilityAiImageOptions Builder",
                "annotations": []
            },
            {
                "name": "setResponseFormat",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.responseFormat = responseFormat;",
                "is_abstract": "",
                "class_name": "StabilityAiImageOptions Builder",
                "annotations": []
            },
            {
                "name": "getCfgScale",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return cfgScale;",
                "is_abstract": "",
                "class_name": "StabilityAiImageOptions Builder",
                "annotations": []
            },
            {
                "name": "setCfgScale",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.cfgScale = cfgScale;",
                "is_abstract": "",
                "class_name": "StabilityAiImageOptions Builder",
                "annotations": []
            },
            {
                "name": "getClipGuidancePreset",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return clipGuidancePreset;",
                "is_abstract": "",
                "class_name": "StabilityAiImageOptions Builder",
                "annotations": []
            },
            {
                "name": "setClipGuidancePreset",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.clipGuidancePreset = clipGuidancePreset;",
                "is_abstract": "",
                "class_name": "StabilityAiImageOptions Builder",
                "annotations": []
            },
            {
                "name": "getSampler",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return sampler;",
                "is_abstract": "",
                "class_name": "StabilityAiImageOptions Builder",
                "annotations": []
            },
            {
                "name": "setSampler",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.sampler = sampler;",
                "is_abstract": "",
                "class_name": "StabilityAiImageOptions Builder",
                "annotations": []
            },
            {
                "name": "getSeed",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return seed;",
                "is_abstract": "",
                "class_name": "StabilityAiImageOptions Builder",
                "annotations": []
            },
            {
                "name": "setSeed",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.seed = seed;",
                "is_abstract": "",
                "class_name": "StabilityAiImageOptions Builder",
                "annotations": []
            },
            {
                "name": "getSteps",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return steps;",
                "is_abstract": "",
                "class_name": "StabilityAiImageOptions Builder",
                "annotations": []
            },
            {
                "name": "setSteps",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.steps = steps;",
                "is_abstract": "",
                "class_name": "StabilityAiImageOptions Builder",
                "annotations": []
            },
            {
                "name": "getStylePreset",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return stylePreset;",
                "is_abstract": "",
                "class_name": "StabilityAiImageOptions Builder",
                "annotations": []
            },
            {
                "name": "setStylePreset",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.stylePreset = stylePreset;",
                "is_abstract": "",
                "class_name": "StabilityAiImageOptions Builder",
                "annotations": []
            },
            {
                "name": "equals",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (this == o)\n\t\t\treturn true;\n\t\tif (!(o instanceof StabilityAiImageOptions that))\n\t\t\treturn false;\n\t\treturn Objects.equals(n, that.n) && Objects.equals(model, that.model) && Objects.equals(width, that.width)\n\t\t\t\t&& Objects.equals(height, that.height) && Objects.equals(responseFormat, that.responseFormat)\n\t\t\t\t&& Objects.equals(cfgScale, that.cfgScale)\n\t\t\t\t&& Objects.equals(clipGuidancePreset, that.clipGuidancePreset) && Objects.equals(sampler, that.sampler)\n\t\t\t\t&& Objects.equals(seed, that.seed) && Objects.equals(steps, that.steps)\n\t\t\t\t&& Objects.equals(stylePreset, that.stylePreset);",
                "is_abstract": "",
                "class_name": "StabilityAiImageOptions Builder",
                "annotations": []
            },
            {
                "name": "hashCode",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return Objects.hash(n, model, width, height, responseFormat, cfgScale, clipGuidancePreset, sampler, seed, steps,\n\t\t\t\tstylePreset);",
                "is_abstract": "",
                "class_name": "StabilityAiImageOptions Builder",
                "annotations": []
            },
            {
                "name": "toString",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return \"StabilityAiImageOptions{\" + \"n=\" + n + \", model='\" + model + '\\'' + \", width=\" + width + \", height=\"\n\t\t\t\t+ height + \", responseFormat='\" + responseFormat + '\\'' + \", cfgScale=\" + cfgScale\n\t\t\t\t+ \", clipGuidancePreset='\" + clipGuidancePreset + '\\'' + \", sampler='\" + sampler + '\\'' + \", seed=\"\n\t\t\t\t+ seed + \", steps=\" + steps + \", stylePreset='\" + stylePreset + '\\'' + '}';",
                "is_abstract": "",
                "class_name": "StabilityAiImageOptions Builder",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-stability-ai/src/main/java/org/springframework/ai/stabilityai/api/StabilityAiApi.java",
        "class_names": [
            "Builder",
            "StabilityAiApi"
        ],
        "imports": "import org.springframework.ai.retry.RetryUtils;\nimport java.util.List;\nimport org.springframework.util.Assert;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport java.util.function.Consumer;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.MediaType;\nimport org.springframework.web.client.RestClient;",
        "package_import_paths": {
            "org.springframework.ai.stabilityai.api.StabilityAiApi": "org.springframework.ai.stabilityai.api.StabilityAiApi",
            "org.springframework.ai.stabilityai.api.Builder": "org.springframework.ai.stabilityai.api.Builder",
            "org.springframework.ai.stabilityai.api.builder": "org.springframework.ai.stabilityai.api.builder",
            "org.springframework.ai.stabilityai.api.withTextPrompts": "org.springframework.ai.stabilityai.api.withTextPrompts",
            "org.springframework.ai.stabilityai.api.withHeight": "org.springframework.ai.stabilityai.api.withHeight",
            "org.springframework.ai.stabilityai.api.withWidth": "org.springframework.ai.stabilityai.api.withWidth",
            "org.springframework.ai.stabilityai.api.withCfgScal": "org.springframework.ai.stabilityai.api.withCfgScal",
            "org.springframework.ai.stabilityai.api.withClipGuidancePreset": "org.springframework.ai.stabilityai.api.withClipGuidancePreset",
            "org.springframework.ai.stabilityai.api.withSampler": "org.springframework.ai.stabilityai.api.withSampler",
            "org.springframework.ai.stabilityai.api.withSamples": "org.springframework.ai.stabilityai.api.withSamples",
            "org.springframework.ai.stabilityai.api.withSeed": "org.springframework.ai.stabilityai.api.withSeed",
            "org.springframework.ai.stabilityai.api.withSteps": "org.springframework.ai.stabilityai.api.withSteps",
            "org.springframework.ai.stabilityai.api.withStylePreset": "org.springframework.ai.stabilityai.api.withStylePreset",
            "org.springframework.ai.stabilityai.api.build": "org.springframework.ai.stabilityai.api.build",
            "org.springframework.ai.stabilityai.api.generateIm": "org.springframework.ai.stabilityai.api.generateIm",
            "org.springframework.ai.stabilityai.api.DEFAULT_IMAGE_MODEL": "org.springframework.ai.stabilityai.api.DEFAULT_IMAGE_MODEL",
            "org.springframework.ai.stabilityai.api.DEFAULT_BASE_URL": "org.springframework.ai.stabilityai.api.DEFAULT_BASE_URL",
            "org.springframework.ai.stabilityai.api.restClient": "org.springframework.ai.stabilityai.api.restClient",
            "org.springframework.ai.stabilityai.api.apiKey": "org.springframework.ai.stabilityai.api.apiKey",
            "org.springframework.ai.stabilityai.api.model": "org.springframework.ai.stabilityai.api.model",
            "org.springframework.ai.stabilityai.api.textPrompts": "org.springframework.ai.stabilityai.api.textPrompts",
            "org.springframework.ai.stabilityai.api.height": "org.springframework.ai.stabilityai.api.height",
            "org.springframework.ai.stabilityai.api.width": "org.springframework.ai.stabilityai.api.width",
            "org.springframework.ai.stabilityai.api.cfgScal": "org.springframework.ai.stabilityai.api.cfgScal",
            "org.springframework.ai.stabilityai.api.clipGuidancePreset": "org.springframework.ai.stabilityai.api.clipGuidancePreset",
            "org.springframework.ai.stabilityai.api.sampler": "org.springframework.ai.stabilityai.api.sampler",
            "org.springframework.ai.stabilityai.api.samples": "org.springframework.ai.stabilityai.api.samples",
            "org.springframework.ai.stabilityai.api.seed": "org.springframework.ai.stabilityai.api.seed",
            "org.springframework.ai.stabilityai.api.steps": "org.springframework.ai.stabilityai.api.steps",
            "org.springframework.ai.stabilityai.api.stylePreset": "org.springframework.ai.stabilityai.api.stylePreset"
        },
        "package": "package org.springframework.ai.stabilityai.api;",
        "property_declarations": [
            "Integer samples;",
            "String clipGuidancePreset;",
            "Integer height;",
            "Integer width;",
            "private final String apiKey;",
            "private final RestClient restClient;",
            "String sampler;",
            "public static final String DEFAULT_IMAGE_MODEL = \"stable-diffusion-v1-6\";",
            "Long seed;",
            "String stylePreset;",
            "Float cfgScale;",
            "private final String model;",
            "List<TextPrompts> textPrompts;",
            "public static final String DEFAULT_BASE_URL = \"https://api.stability.ai/v1\";",
            "Integer steps;"
        ],
        "functions": [
            {
                "name": "builder",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Builder();",
                "is_abstract": "",
                "class_name": "StabilityAiApi",
                "annotations": []
            },
            {
                "name": "withTextPrompts",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.textPrompts = textPrompts;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "StabilityAiApi Builder",
                "annotations": []
            },
            {
                "name": "withHeight",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.height = height;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "StabilityAiApi Builder",
                "annotations": []
            },
            {
                "name": "withWidth",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.width = width;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "StabilityAiApi Builder",
                "annotations": []
            },
            {
                "name": "withCfgScale",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.cfgScale = cfgScale;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "StabilityAiApi Builder",
                "annotations": []
            },
            {
                "name": "withClipGuidancePreset",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.clipGuidancePreset = clipGuidancePreset;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "StabilityAiApi Builder",
                "annotations": []
            },
            {
                "name": "withSampler",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.sampler = sampler;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "StabilityAiApi Builder",
                "annotations": []
            },
            {
                "name": "withSamples",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.samples = samples;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "StabilityAiApi Builder",
                "annotations": []
            },
            {
                "name": "withSeed",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.seed = seed;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "StabilityAiApi Builder",
                "annotations": []
            },
            {
                "name": "withSteps",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.steps = steps;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "StabilityAiApi Builder",
                "annotations": []
            },
            {
                "name": "withStylePreset",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.stylePreset = stylePreset;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "StabilityAiApi Builder",
                "annotations": []
            },
            {
                "name": "build",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new GenerateImageRequest(textPrompts, height, width, cfgScale, clipGuidancePreset, sampler,\n\t\t\t\t\t\tsamples, seed, steps, stylePreset);",
                "is_abstract": "",
                "class_name": "StabilityAiApi Builder",
                "annotations": [
                    "@JsonInclude(JsonInclude.Include.NON_NULL)",
                    "@JsonProperty(\"result\")",
                    "@JsonProperty(\"artifacts\")",
                    "@JsonProperty(\"seed\")",
                    "@JsonProperty(\"base64\")",
                    "@JsonProperty(\"finishReason\")"
                ]
            },
            {
                "name": "generateImage",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(request, \"The request body can not be null.\");\n\t\treturn this.restClient.post()\n\t\t\t.uri(\"/generation/{model}/text-to-image\", this.model)\n\t\t\t.body(request)\n\t\t\t.retrieve()\n\t\t\t.body(GenerateImageResponse.class);",
                "is_abstract": "",
                "class_name": "StabilityAiApi Builder",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/OpenAiTestConfiguration.java",
        "class_names": [
            "OpenAiTestConfiguration"
        ],
        "imports": "import org.springframework.ai.openai.api.OpenAiApi;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.ai.openai.api.OpenAiImageApi;\nimport org.springframework.util.StringUtils;\nimport org.springframework.ai.embedding.EmbeddingClient;\nimport org.springframework.boot.SpringBootConfiguration;\nimport org.springframework.ai.openai.api.OpenAiAudioApi;",
        "package_import_paths": {
            "org.springframework.ai.openai.OpenAiTestConfiguration": "org.springframework.ai.openai.OpenAiTestConfiguration",
            "org.springframework.ai.openai.openAiApi": "org.springframework.ai.openai.openAiApi",
            "org.springframework.ai.openai.openAiImageApi": "org.springframework.ai.openai.openAiImageApi",
            "org.springframework.ai.openai.openAiAudioApi": "org.springframework.ai.openai.openAiAudioApi",
            "org.springframework.ai.openai.getApiKey": "org.springframework.ai.openai.getApiKey",
            "org.springframework.ai.openai.openAiChatClient": "org.springframework.ai.openai.openAiChatClient",
            "org.springframework.ai.openai.openAiTranscriptionClient": "org.springframework.ai.openai.openAiTranscriptionClient",
            "org.springframework.ai.openai.openAiAudioSpeechClient": "org.springframework.ai.openai.openAiAudioSpeechClient",
            "org.springframework.ai.openai.openAiImageClient": "org.springframework.ai.openai.openAiImageClient",
            "org.springframework.ai.openai.openAiEmbeddingClient": "org.springframework.ai.openai.openAiEmbeddingClient"
        },
        "package": "package org.springframework.ai.openai;",
        "property_declarations": [],
        "functions": [
            {
                "name": "openAiApi",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new OpenAiApi(getApiKey());",
                "is_abstract": "",
                "class_name": "OpenAiTestConfiguration",
                "annotations": []
            },
            {
                "name": "openAiImageApi",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new OpenAiImageApi(getApiKey());",
                "is_abstract": "",
                "class_name": "OpenAiTestConfiguration",
                "annotations": []
            },
            {
                "name": "openAiAudioApi",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new OpenAiAudioApi(getApiKey());",
                "is_abstract": "",
                "class_name": "OpenAiTestConfiguration",
                "annotations": []
            },
            {
                "name": "getApiKey",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String apiKey = System.getenv(\"OPENAI_API_KEY\");\n\t\tif (!StringUtils.hasText(apiKey)) {\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\"You must provide an API key.  Put it in an environment variable under the name OPENAI_API_KEY\");\n\t\t}\n\t\treturn apiKey;",
                "is_abstract": "",
                "class_name": "OpenAiTestConfiguration",
                "annotations": []
            },
            {
                "name": "openAiChatClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "OpenAiChatClient openAiChatClient = new OpenAiChatClient(api);\n\t\treturn openAiChatClient;",
                "is_abstract": "",
                "class_name": "OpenAiTestConfiguration",
                "annotations": []
            },
            {
                "name": "openAiTranscriptionClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "OpenAiAudioTranscriptionClient openAiTranscriptionClient = new OpenAiAudioTranscriptionClient(api);\n\t\treturn openAiTranscriptionClient;",
                "is_abstract": "",
                "class_name": "OpenAiTestConfiguration",
                "annotations": []
            },
            {
                "name": "openAiAudioSpeechClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "OpenAiAudioSpeechClient openAiAudioSpeechClient = new OpenAiAudioSpeechClient(api);\n\t\treturn openAiAudioSpeechClient;",
                "is_abstract": "",
                "class_name": "OpenAiTestConfiguration",
                "annotations": []
            },
            {
                "name": "openAiImageClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "OpenAiImageClient openAiImageClient = new OpenAiImageClient(imageApi);\n\t\t// openAiImageClient.setModel(\"foobar\");\n\t\treturn openAiImageClient;",
                "is_abstract": "",
                "class_name": "OpenAiTestConfiguration",
                "annotations": []
            },
            {
                "name": "openAiEmbeddingClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new OpenAiEmbeddingClient(api);",
                "is_abstract": "",
                "class_name": "OpenAiTestConfiguration",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/ChatCompletionRequestTests.java",
        "class_names": [
            "ChatCompletionRequestTests"
        ],
        "imports": "import org.springframework.ai.chat.prompt.Prompt;\nimport org.springframework.ai.openai.api.OpenAiApi;\nimport java.util.List;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.openai.api.tool.MockWeatherService;\nimport org.springframework.ai.model.function.FunctionCallbackWrapper;",
        "package_import_paths": {
            "org.springframework.ai.openai.ChatCompletionRequestTests": "org.springframework.ai.openai.ChatCompletionRequestTests",
            "org.springframework.ai.openai.createRequestWithChatOptions": "org.springframework.ai.openai.createRequestWithChatOptions",
            "org.springframework.ai.openai.promptOptionsTools": "org.springframework.ai.openai.promptOptionsTools",
            "org.springframework.ai.openai.defaultOptionsTools": "org.springframework.ai.openai.defaultOptionsTools"
        },
        "package": "package org.springframework.ai.openai;",
        "property_declarations": [],
        "functions": [
            {
                "name": "createRequestWithChatOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var client = new OpenAiChatClient(new OpenAiApi(\"TEST\"),\n\t\t\t\tOpenAiChatOptions.builder().withModel(\"DEFAULT_MODEL\").withTemperature(66.6f).build());\n\n\t\tvar request = client.createRequest(new Prompt(\"Test message content\"), false);\n\n\t\tassertThat(request.messages()).hasSize(1);\n\t\tassertThat(request.stream()).isFalse();\n\n\t\tassertThat(request.model()).isEqualTo(\"DEFAULT_MODEL\");\n\t\tassertThat(request.temperature()).isEqualTo(66.6f);\n\n\t\trequest = client.createRequest(new Prompt(\"Test message content\",\n\t\t\t\tOpenAiChatOptions.builder().withModel(\"PROMPT_MODEL\").withTemperature(99.9f).build()), true);\n\n\t\tassertThat(request.messages()).hasSize(1);\n\t\tassertThat(request.stream()).isTrue();\n\n\t\tassertThat(request.model()).isEqualTo(\"PROMPT_MODEL\");\n\t\tassertThat(request.temperature()).isEqualTo(99.9f);",
                "is_abstract": "",
                "class_name": "ChatCompletionRequestTests",
                "annotations": []
            },
            {
                "name": "promptOptionsTools",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "final String TOOL_FUNCTION_NAME = \"CurrentWeather\";\n\n\t\tvar client = new OpenAiChatClient(new OpenAiApi(\"TEST\"),\n\t\t\t\tOpenAiChatOptions.builder().withModel(\"DEFAULT_MODEL\").build());\n\n\t\tvar request = client.createRequest(new Prompt(\"Test message content\",\n\t\t\t\tOpenAiChatOptions.builder()\n\t\t\t\t\t.withModel(\"PROMPT_MODEL\")\n\t\t\t\t\t.withFunctionCallbacks(List.of(FunctionCallbackWrapper.builder(new MockWeatherService())\n\t\t\t\t\t\t.withName(TOOL_FUNCTION_NAME)\n\t\t\t\t\t\t.withDescription(\"Get the weather in location\")\n\t\t\t\t\t\t.withResponseConverter((response) -> \"\" + response.temp() + response.unit())\n\t\t\t\t\t\t.build()))\n\t\t\t\t\t.build()),\n\t\t\t\tfalse);\n\n\t\tassertThat(client.getFunctionCallbackRegister()).hasSize(1);\n\t\tassertThat(client.getFunctionCallbackRegister()).containsKeys(TOOL_FUNCTION_NAME);\n\n\t\tassertThat(request.messages()).hasSize(1);\n\t\tassertThat(request.stream()).isFalse();\n\t\tassertThat(request.model()).isEqualTo(\"PROMPT_MODEL\");\n\n\t\tassertThat(request.tools()).hasSize(1);\n\t\tassertThat(request.tools().get(0).function().name()).isEqualTo(TOOL_FUNCTION_NAME);",
                "is_abstract": "",
                "class_name": "ChatCompletionRequestTests",
                "annotations": []
            },
            {
                "name": "defaultOptionsTools",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "final String TOOL_FUNCTION_NAME = \"CurrentWeather\";\n\n\t\tvar client = new OpenAiChatClient(new OpenAiApi(\"TEST\"),\n\t\t\t\tOpenAiChatOptions.builder()\n\t\t\t\t\t.withModel(\"DEFAULT_MODEL\")\n\t\t\t\t\t.withFunctionCallbacks(List.of(FunctionCallbackWrapper.builder(new MockWeatherService())\n\t\t\t\t\t\t.withName(TOOL_FUNCTION_NAME)\n\t\t\t\t\t\t.withDescription(\"Get the weather in location\")\n\t\t\t\t\t\t.withResponseConverter((response) -> \"\" + response.temp() + response.unit())\n\t\t\t\t\t\t.build()))\n\t\t\t\t\t.build());\n\n\t\tvar request = client.createRequest(new Prompt(\"Test message content\"), false);\n\n\t\tassertThat(client.getFunctionCallbackRegister()).hasSize(1);\n\t\tassertThat(client.getFunctionCallbackRegister()).containsKeys(TOOL_FUNCTION_NAME);\n\t\tassertThat(client.getFunctionCallbackRegister().get(TOOL_FUNCTION_NAME).getDescription())\n\t\t\t.isEqualTo(\"Get the weather in location\");\n\n\t\tassertThat(request.messages()).hasSize(1);\n\t\tassertThat(request.stream()).isFalse();\n\t\tassertThat(request.model()).isEqualTo(\"DEFAULT_MODEL\");\n\n\t\tassertThat(request.tools()).as(\"Default Options callback functions are not automatically enabled!\")\n\t\t\t.isNullOrEmpty();\n\n\t\t// Explicitly enable the function\n\t\trequest = client.createRequest(new Prompt(\"Test message content\",\n\t\t\t\tOpenAiChatOptions.builder().withFunction(TOOL_FUNCTION_NAME).build()), false);\n\n\t\tassertThat(request.tools()).hasSize(1);\n\t\tassertThat(request.tools().get(0).function().name()).as(\"Explicitly enabled function\")\n\t\t\t.isEqualTo(TOOL_FUNCTION_NAME);\n\n\t\t// Override the default options function with one from the prompt\n\t\trequest = client.createRequest(new Prompt(\"Test message content\",\n\t\t\t\tOpenAiChatOptions.builder()\n\t\t\t\t\t.withFunctionCallbacks(List.of(FunctionCallbackWrapper.builder(new MockWeatherService())\n\t\t\t\t\t\t.withName(TOOL_FUNCTION_NAME)\n\t\t\t\t\t\t.withDescription(\"Overridden function description\")\n\t\t\t\t\t\t.build()))\n\t\t\t\t\t.build()),\n\t\t\t\tfalse);\n\n\t\tassertThat(request.tools()).hasSize(1);\n\t\tassertThat(request.tools().get(0).function().name()).as(\"Explicitly enabled function\")\n\t\t\t.isEqualTo(TOOL_FUNCTION_NAME);\n\n\t\tassertThat(client.getFunctionCallbackRegister()).hasSize(1);\n\t\tassertThat(client.getFunctionCallbackRegister()).containsKeys(TOOL_FUNCTION_NAME);\n\t\tassertThat(client.getFunctionCallbackRegister().get(TOOL_FUNCTION_NAME).getDescription())\n\t\t\t.isEqualTo(\"Overridden function description\");",
                "is_abstract": "",
                "class_name": "ChatCompletionRequestTests",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/OpenAiChatClientWithChatResponseMetadataTests.java",
        "class_names": [
            "Config",
            "OpenAiChatClientWithChatResponseMetadataTests"
        ],
        "imports": "import static org.springframework.test.web.client.match.MockRestRequestMatchers.method;\nimport static org.springframework.test.web.client.match.MockRestRequestMatchers.requestTo;\nimport org.springframework.ai.openai.OpenAiChatClient;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.ai.chat.ChatResponse;\nimport org.springframework.ai.openai.metadata.support.OpenAiApiResponseHeaders;\nimport java.time.Duration;\nimport org.springframework.ai.openai.api.OpenAiApi;\nimport org.junit.jupiter.api.AfterEach;\nimport org.springframework.ai.chat.metadata.*;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.test.web.client.MockRestServiceServer;\nimport static org.springframework.test.web.client.match.MockRestRequestMatchers.header;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.http.MediaType;\nimport org.springframework.web.client.RestClient;\nimport org.springframework.boot.SpringBootConfiguration;\nimport org.springframework.boot.test.autoconfigure.web.client.RestClientTest;\nimport org.springframework.ai.chat.prompt.Prompt;\nimport org.junit.jupiter.api.Test;\nimport static org.springframework.test.web.client.response.MockRestResponseCreators.withSuccess;",
        "package_import_paths": {
            "org.springframework.ai.openai.chat.OpenAiChatClientWithChatResponseMetadataTests": "org.springframework.ai.openai.chat.OpenAiChatClientWithChatResponseMetadataTests",
            "org.springframework.ai.openai.chat.Confi": "org.springframework.ai.openai.chat.Confi",
            "org.springframework.ai.openai.chat.resetMockServer": "org.springframework.ai.openai.chat.resetMockServer",
            "org.springframework.ai.openai.chat.aiResponseContainsAiMetadat": "org.springframework.ai.openai.chat.aiResponseContainsAiMetadat",
            "org.springframework.ai.openai.chat.prepareMo": "org.springframework.ai.openai.chat.prepareMo",
            "org.springframework.ai.openai.chat.getJson": "org.springframework.ai.openai.chat.getJson",
            "org.springframework.ai.openai.chat.chatCompletionApi": "org.springframework.ai.openai.chat.chatCompletionApi",
            "org.springframework.ai.openai.chat.openAiClient": "org.springframework.ai.openai.chat.openAiClient",
            "org.springframework.ai.openai.chat.TEST_API_KEY": "org.springframework.ai.openai.chat.TEST_API_KEY",
            "org.springframework.ai.openai.chat.privat": "org.springframework.ai.openai.chat.privat"
        },
        "package": "package org.springframework.ai.openai.chat;",
        "property_declarations": [
            "private static String TEST_API_KEY = \"sk-1234567890\";",
            "@Autowired\n\tprivate MockRestServiceServer server;",
            "@Autowired\n\tprivate OpenAiChatClient openAiChatClient;"
        ],
        "functions": [
            {
                "name": "resetMockServer",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "server.reset();",
                "is_abstract": "",
                "class_name": "OpenAiChatClientWithChatResponseMetadataTests",
                "annotations": []
            },
            {
                "name": "aiResponseContainsAiMetadata",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "prepareMock();\n\n\t\tPrompt prompt = new Prompt(\"Reach for the sky.\");\n\n\t\tChatResponse response = this.openAiChatClient.call(prompt);\n\n\t\tassertThat(response).isNotNull();\n\n\t\tChatResponseMetadata chatResponseMetadata = response.getMetadata();\n\n\t\tassertThat(chatResponseMetadata).isNotNull();\n\n\t\tUsage usage = chatResponseMetadata.getUsage();\n\n\t\tassertThat(usage).isNotNull();\n\t\tassertThat(usage.getPromptTokens()).isEqualTo(9L);\n\t\tassertThat(usage.getGenerationTokens()).isEqualTo(12L);\n\t\tassertThat(usage.getTotalTokens()).isEqualTo(21L);\n\n\t\tRateLimit rateLimit = chatResponseMetadata.getRateLimit();\n\n\t\tDuration expectedRequestsReset = Duration.ofDays(2L)\n\t\t\t.plus(Duration.ofHours(16L))\n\t\t\t.plus(Duration.ofMinutes(15))\n\t\t\t.plus(Duration.ofSeconds(29L));\n\n\t\tDuration expectedTokensReset = Duration.ofHours(27L)\n\t\t\t.plus(Duration.ofSeconds(55L))\n\t\t\t.plus(Duration.ofMillis(451L));\n\n\t\tassertThat(rateLimit).isNotNull();\n\t\tassertThat(rateLimit.getRequestsLimit()).isEqualTo(4000L);\n\t\tassertThat(rateLimit.getRequestsRemaining()).isEqualTo(999);\n\t\tassertThat(rateLimit.getRequestsReset()).isEqualTo(expectedRequestsReset);\n\t\tassertThat(rateLimit.getTokensLimit()).isEqualTo(725_000L);\n\t\tassertThat(rateLimit.getTokensRemaining()).isEqualTo(112_358L);\n\t\tassertThat(rateLimit.getTokensReset()).isEqualTo(expectedTokensReset);\n\n\t\tPromptMetadata promptMetadata = response.getMetadata().getPromptMetadata();\n\n\t\tassertThat(promptMetadata).isNotNull();\n\t\tassertThat(promptMetadata).isEmpty();\n\n\t\tresponse.getResults().forEach(generation -> {\n\t\t\tChatGenerationMetadata chatGenerationMetadata = generation.getMetadata();\n\t\t\tassertThat(chatGenerationMetadata).isNotNull();\n\t\t\tassertThat(chatGenerationMetadata.getFinishReason()).isEqualTo(\"STOP\");\n\t\t\tassertThat(chatGenerationMetadata.<Object>getContentFilterMetadata()).isNull();\n\t\t});",
                "is_abstract": "",
                "class_name": "OpenAiChatClientWithChatResponseMetadataTests",
                "annotations": []
            },
            {
                "name": "prepareMock",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "HttpHeaders httpHeaders = new HttpHeaders();\n\t\thttpHeaders.set(OpenAiApiResponseHeaders.REQUESTS_LIMIT_HEADER.getName(), \"4000\");\n\t\thttpHeaders.set(OpenAiApiResponseHeaders.REQUESTS_REMAINING_HEADER.getName(), \"999\");\n\t\thttpHeaders.set(OpenAiApiResponseHeaders.REQUESTS_RESET_HEADER.getName(), \"2d16h15m29s\");\n\t\thttpHeaders.set(OpenAiApiResponseHeaders.TOKENS_LIMIT_HEADER.getName(), \"725000\");\n\t\thttpHeaders.set(OpenAiApiResponseHeaders.TOKENS_REMAINING_HEADER.getName(), \"112358\");\n\t\thttpHeaders.set(OpenAiApiResponseHeaders.TOKENS_RESET_HEADER.getName(), \"27h55s451ms\");\n\n\t\tserver.expect(requestTo(\"/v1/chat/completions\"))\n\t\t\t.andExpect(method(HttpMethod.POST))\n\t\t\t.andExpect(header(HttpHeaders.AUTHORIZATION, \"Bearer \" + TEST_API_KEY))\n\t\t\t.andRespond(withSuccess(getJson(), MediaType.APPLICATION_JSON).headers(httpHeaders));",
                "is_abstract": "",
                "class_name": "OpenAiChatClientWithChatResponseMetadataTests",
                "annotations": []
            },
            {
                "name": "getJson",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return \"\"\"\n\t\t\t\t\t{\n\t\t\t\t\t  \"id\": \"chatcmpl-123\",\n\t\t\t\t\t  \"object\": \"chat.completion\",\n\t\t\t\t\t  \"created\": 1677652288,\n\t\t\t\t\t  \"model\": \"gpt-3.5-turbo-0613\",\n\t\t\t\t\t  \"choices\": [{\n\t\t\t\t\t\t\"index\": 0,\n\t\t\t\t\t\t\"message\": {\n\t\t\t\t\t\t  \"role\": \"assistant\",\n\t\t\t\t\t\t  \"content\": \"I surrender!\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"finish_reason\": \"stop\"\n\t\t\t\t\t  }],\n\t\t\t\t\t  \"usage\": {\n\t\t\t\t\t\t\"prompt_tokens\": 9,\n\t\t\t\t\t\t\"completion_tokens\": 12,\n\t\t\t\t\t\t\"total_tokens\": 21\n\t\t\t\t\t  }\n\t\t\t\t\t}\n\t\t\t\t\"\"\";",
                "is_abstract": "",
                "class_name": "OpenAiChatClientWithChatResponseMetadataTests",
                "annotations": []
            },
            {
                "name": "chatCompletionApi",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new OpenAiApi(\"\", TEST_API_KEY, builder);",
                "is_abstract": "",
                "class_name": "OpenAiChatClientWithChatResponseMetadataTests Config",
                "annotations": []
            },
            {
                "name": "openAiClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new OpenAiChatClient(openAiApi);",
                "is_abstract": "",
                "class_name": "OpenAiChatClientWithChatResponseMetadataTests Config",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/OpenAiChatClientIT.java",
        "class_names": [
            "OpenAiChatClientIT"
        ],
        "imports": "import java.util.stream.Collectors;\nimport org.springframework.util.MimeTypeUtils;\nimport java.util.List;\nimport org.springframework.ai.chat.Generation;\nimport reactor.core.publisher.Flux;\nimport org.springframework.ai.chat.prompt.SystemPromptTemplate;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.ai.openai.OpenAiTestConfiguration;\nimport org.springframework.core.io.Resource;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.ai.parser.MapOutputParser;\nimport java.io.IOException;\nimport org.springframework.ai.chat.messages.Message;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.slf4j.Logger;\nimport java.util.Map;\nimport org.springframework.ai.parser.BeanOutputParser;\nimport org.springframework.beans.factory.annotation.Value;\nimport java.util.Arrays;\nimport org.springframework.ai.chat.ChatResponse;\nimport org.springframework.ai.openai.api.OpenAiApi;\nimport org.springframework.ai.chat.messages.UserMessage;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.ai.chat.messages.Media;\nimport org.springframework.ai.chat.prompt.PromptTemplate;\nimport org.springframework.ai.parser.ListOutputParser;\nimport org.springframework.ai.chat.messages.AssistantMessage;\nimport org.springframework.ai.model.function.FunctionCallbackWrapper;\nimport org.springframework.ai.openai.OpenAiChatOptions;\nimport java.util.ArrayList;\nimport org.springframework.ai.chat.prompt.Prompt;\nimport org.springframework.core.io.ClassPathResource;\nimport org.springframework.core.convert.support.DefaultConversionService;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.openai.api.tool.MockWeatherService;\nimport org.springframework.ai.openai.testutils.AbstractIT;",
        "package_import_paths": {
            "org.springframework.ai.openai.chat.OpenAiChatClientIT": "org.springframework.ai.openai.chat.OpenAiChatClientIT",
            "org.springframework.ai.openai.chat.roleTest": "org.springframework.ai.openai.chat.roleTest",
            "org.springframework.ai.openai.chat.outputParser": "org.springframework.ai.openai.chat.outputParser",
            "org.springframework.ai.openai.chat.mapOutputParser": "org.springframework.ai.openai.chat.mapOutputParser",
            "org.springframework.ai.openai.chat.beanOutputParser": "org.springframework.ai.openai.chat.beanOutputParser",
            "org.springframework.ai.openai.chat.beanOutputParserRecords": "org.springframework.ai.openai.chat.beanOutputParserRecords",
            "org.springframework.ai.openai.chat.beanStreamOutputParserRecords": "org.springframework.ai.openai.chat.beanStreamOutputParserRecords",
            "org.springframework.ai.openai.chat.functionCallTest": "org.springframework.ai.openai.chat.functionCallTest",
            "org.springframework.ai.openai.chat.streamFunctionCallTest": "org.springframework.ai.openai.chat.streamFunctionCallTest",
            "org.springframework.ai.openai.chat.multiModalityEmbeddedIm": "org.springframework.ai.openai.chat.multiModalityEmbeddedIm",
            "org.springframework.ai.openai.chat.multiModalityImageUrl": "org.springframework.ai.openai.chat.multiModalityImageUrl",
            "org.springframework.ai.openai.chat.streamingMultiModalityImageUrl": "org.springframework.ai.openai.chat.streamingMultiModalityImageUrl",
            "org.springframework.ai.openai.chat.logger": "org.springframework.ai.openai.chat.logger",
            "org.springframework.ai.openai.chat.systemResour": "org.springframework.ai.openai.chat.systemResour"
        },
        "package": "package org.springframework.ai.openai.chat;",
        "property_declarations": [
            "private static final Logger logger = LoggerFactory.getLogger(OpenAiChatClientIT.class);",
            "@Value(\"classpath:/prompts/system-message.st\")\n\tprivate Resource systemResource;"
        ],
        "functions": [
            {
                "name": "roleTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "UserMessage userMessage = new UserMessage(\n\t\t\t\t\"Tell me about 3 famous pirates from the Golden Age of Piracy and why they did.\");\n\t\tSystemPromptTemplate systemPromptTemplate = new SystemPromptTemplate(systemResource);\n\t\tMessage systemMessage = systemPromptTemplate.createMessage(Map.of(\"name\", \"Bob\", \"voice\", \"pirate\"));\n\t\tPrompt prompt = new Prompt(List.of(userMessage, systemMessage));\n\t\tChatResponse response = chatClient.call(prompt);\n\t\tassertThat(response.getResults()).hasSize(1);\n\t\tassertThat(response.getResults().get(0).getOutput().getContent()).contains(\"Blackbeard\");\n\t\t// needs fine tuning... evaluateQuestionAndAnswer(request, response, false);",
                "is_abstract": "",
                "class_name": "OpenAiChatClientIT",
                "annotations": []
            },
            {
                "name": "outputParser",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "DefaultConversionService conversionService = new DefaultConversionService();\n\t\tListOutputParser outputParser = new ListOutputParser(conversionService);\n\n\t\tString format = outputParser.getFormat();\n\t\tString template = \"\"\"\n\t\t\t\tList five {subject}\n\t\t\t\t{format}\n\t\t\t\t\"\"\";\n\t\tPromptTemplate promptTemplate = new PromptTemplate(template,\n\t\t\t\tMap.of(\"subject\", \"ice cream flavors\", \"format\", format));\n\t\tPrompt prompt = new Prompt(promptTemplate.createMessage());\n\t\tGeneration generation = this.chatClient.call(prompt).getResult();\n\n\t\tList<String> list = outputParser.parse(generation.getOutput().getContent());\n\t\tassertThat(list).hasSize(5);",
                "is_abstract": "",
                "class_name": "OpenAiChatClientIT",
                "annotations": []
            },
            {
                "name": "mapOutputParser",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "MapOutputParser outputParser = new MapOutputParser();\n\n\t\tString format = outputParser.getFormat();\n\t\tString template = \"\"\"\n\t\t\t\tProvide me a List of {subject}\n\t\t\t\t{format}\n\t\t\t\t\"\"\";\n\t\tPromptTemplate promptTemplate = new PromptTemplate(template,\n\t\t\t\tMap.of(\"subject\", \"an array of numbers from 1 to 9 under they key name 'numbers'\", \"format\", format));\n\t\tPrompt prompt = new Prompt(promptTemplate.createMessage());\n\t\tGeneration generation = chatClient.call(prompt).getResult();\n\n\t\tMap<String, Object> result = outputParser.parse(generation.getOutput().getContent());\n\t\tassertThat(result.get(\"numbers\")).isEqualTo(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9));",
                "is_abstract": "",
                "class_name": "OpenAiChatClientIT",
                "annotations": []
            },
            {
                "name": "beanOutputParser",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "BeanOutputParser<ActorsFilms> outputParser = new BeanOutputParser<>(ActorsFilms.class);\n\n\t\tString format = outputParser.getFormat();\n\t\tString template = \"\"\"\n\t\t\t\tGenerate the filmography for a random actor.\n\t\t\t\t{format}\n\t\t\t\t\"\"\";\n\t\tPromptTemplate promptTemplate = new PromptTemplate(template, Map.of(\"format\", format));\n\t\tPrompt prompt = new Prompt(promptTemplate.createMessage());\n\t\tGeneration generation = chatClient.call(prompt).getResult();\n\n\t\tActorsFilms actorsFilms = outputParser.parse(generation.getOutput().getContent());",
                "is_abstract": "",
                "class_name": "OpenAiChatClientIT",
                "annotations": []
            },
            {
                "name": "beanOutputParserRecords",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "BeanOutputParser<ActorsFilmsRecord> outputParser = new BeanOutputParser<>(ActorsFilmsRecord.class);\n\n\t\tString format = outputParser.getFormat();\n\t\tString template = \"\"\"\n\t\t\t\tGenerate the filmography of 5 movies for Tom Hanks.\n\t\t\t\t{format}\n\t\t\t\t\"\"\";\n\t\tPromptTemplate promptTemplate = new PromptTemplate(template, Map.of(\"format\", format));\n\t\tPrompt prompt = new Prompt(promptTemplate.createMessage());\n\t\tGeneration generation = chatClient.call(prompt).getResult();\n\n\t\tActorsFilmsRecord actorsFilms = outputParser.parse(generation.getOutput().getContent());\n\t\tlogger.info(\"\" + actorsFilms);\n\t\tassertThat(actorsFilms.actor()).isEqualTo(\"Tom Hanks\");\n\t\tassertThat(actorsFilms.movies()).hasSize(5);",
                "is_abstract": "",
                "class_name": "OpenAiChatClientIT",
                "annotations": []
            },
            {
                "name": "beanStreamOutputParserRecords",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "BeanOutputParser<ActorsFilmsRecord> outputParser = new BeanOutputParser<>(ActorsFilmsRecord.class);\n\n\t\tString format = outputParser.getFormat();\n\t\tString template = \"\"\"\n\t\t\t\tGenerate the filmography of 5 movies for Tom Hanks.\n\t\t\t\t{format}\n\t\t\t\t\"\"\";\n\t\tPromptTemplate promptTemplate = new PromptTemplate(template, Map.of(\"format\", format));\n\t\tPrompt prompt = new Prompt(promptTemplate.createMessage());\n\n\t\tString generationTextFromStream = streamingChatClient.stream(prompt)\n\t\t\t.collectList()\n\t\t\t.block()\n\t\t\t.stream()\n\t\t\t.map(ChatResponse::getResults)\n\t\t\t.flatMap(List::stream)\n\t\t\t.map(Generation::getOutput)\n\t\t\t.map(AssistantMessage::getContent)\n\t\t\t.collect(Collectors.joining());\n\n\t\tActorsFilmsRecord actorsFilms = outputParser.parse(generationTextFromStream);\n\t\tlogger.info(\"\" + actorsFilms);\n\t\tassertThat(actorsFilms.actor()).isEqualTo(\"Tom Hanks\");\n\t\tassertThat(actorsFilms.movies()).hasSize(5);",
                "is_abstract": "",
                "class_name": "OpenAiChatClientIT",
                "annotations": []
            },
            {
                "name": "functionCallTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "UserMessage userMessage = new UserMessage(\"What's the weather like in San Francisco, Tokyo, and Paris?\");\n\n\t\tList<Message> messages = new ArrayList<>(List.of(userMessage));\n\n\t\tvar promptOptions = OpenAiChatOptions.builder()\n\t\t\t.withModel(OpenAiApi.ChatModel.GPT_4_TURBO_PREVIEW.getValue())\n\t\t\t.withFunctionCallbacks(List.of(FunctionCallbackWrapper.builder(new MockWeatherService())\n\t\t\t\t.withName(\"getCurrentWeather\")\n\t\t\t\t.withDescription(\"Get the weather in location\")\n\t\t\t\t.withResponseConverter((response) -> \"\" + response.temp() + response.unit())\n\t\t\t\t.build()))\n\t\t\t.build();\n\n\t\tChatResponse response = chatClient.call(new Prompt(messages, promptOptions));\n\n\t\tlogger.info(\"Response: {}\", response);\n\n\t\tassertThat(response.getResult().getOutput().getContent()).containsAnyOf(\"30.0\", \"30\");\n\t\tassertThat(response.getResult().getOutput().getContent()).containsAnyOf(\"10.0\", \"10\");\n\t\tassertThat(response.getResult().getOutput().getContent()).containsAnyOf(\"15.0\", \"15\");",
                "is_abstract": "",
                "class_name": "OpenAiChatClientIT",
                "annotations": []
            },
            {
                "name": "streamFunctionCallTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "UserMessage userMessage = new UserMessage(\"What's the weather like in San Francisco, Tokyo, and Paris?\");\n\n\t\tList<Message> messages = new ArrayList<>(List.of(userMessage));\n\n\t\tvar promptOptions = OpenAiChatOptions.builder()\n\t\t\t// .withModel(OpenAiApi.ChatModel.GPT_4_TURBO_PREVIEW.getValue())\n\t\t\t.withFunctionCallbacks(List.of(FunctionCallbackWrapper.builder(new MockWeatherService())\n\t\t\t\t.withName(\"getCurrentWeather\")\n\t\t\t\t.withDescription(\"Get the weather in location\")\n\t\t\t\t.withResponseConverter((response) -> \"\" + response.temp() + response.unit())\n\t\t\t\t.build()))\n\t\t\t.build();\n\n\t\tFlux<ChatResponse> response = streamingChatClient.stream(new Prompt(messages, promptOptions));\n\n\t\tString content = response.collectList()\n\t\t\t.block()\n\t\t\t.stream()\n\t\t\t.map(ChatResponse::getResults)\n\t\t\t.flatMap(List::stream)\n\t\t\t.map(Generation::getOutput)\n\t\t\t.map(AssistantMessage::getContent)\n\t\t\t.collect(Collectors.joining());\n\t\tlogger.info(\"Response: {}\", content);\n\n\t\tassertThat(content).containsAnyOf(\"30.0\", \"30\");\n\t\tassertThat(content).containsAnyOf(\"10.0\", \"10\");\n\t\tassertThat(content).containsAnyOf(\"15.0\", \"15\");",
                "is_abstract": "",
                "class_name": "OpenAiChatClientIT",
                "annotations": []
            },
            {
                "name": "multiModalityEmbeddedImage",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "byte[] imageData = new ClassPathResource(\"/test.png\").getContentAsByteArray();\n\n\t\tvar userMessage = new UserMessage(\"Explain what do you see on this picture?\",\n\t\t\t\tList.of(new Media(MimeTypeUtils.IMAGE_PNG, imageData)));\n\n\t\tChatResponse response = chatClient.call(new Prompt(List.of(userMessage),\n\t\t\t\tOpenAiChatOptions.builder().withModel(OpenAiApi.ChatModel.GPT_4_VISION_PREVIEW.getValue()).build()));\n\n\t\tlogger.info(response.getResult().getOutput().getContent());\n\t\tassertThat(response.getResult().getOutput().getContent()).contains(\"bananas\", \"apple\", \"bowl\");",
                "is_abstract": "",
                "class_name": "OpenAiChatClientIT",
                "annotations": []
            },
            {
                "name": "multiModalityImageUrl",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var userMessage = new UserMessage(\"Explain what do you see on this picture?\",\n\t\t\t\tList.of(new Media(MimeTypeUtils.IMAGE_PNG,\n\t\t\t\t\t\t\"https://docs.spring.io/spring-ai/reference/1.0-SNAPSHOT/_images/multimodal.test.png\")));\n\n\t\tChatResponse response = chatClient.call(new Prompt(List.of(userMessage),\n\t\t\t\tOpenAiChatOptions.builder().withModel(OpenAiApi.ChatModel.GPT_4_VISION_PREVIEW.getValue()).build()));\n\n\t\tlogger.info(response.getResult().getOutput().getContent());\n\t\tassertThat(response.getResult().getOutput().getContent()).contains(\"bananas\", \"apple\", \"bowl\");",
                "is_abstract": "",
                "class_name": "OpenAiChatClientIT",
                "annotations": []
            },
            {
                "name": "streamingMultiModalityImageUrl",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var userMessage = new UserMessage(\"Explain what do you see on this picture?\",\n\t\t\t\tList.of(new Media(MimeTypeUtils.IMAGE_PNG,\n\t\t\t\t\t\t\"https://docs.spring.io/spring-ai/reference/1.0-SNAPSHOT/_images/multimodal.test.png\")));\n\n\t\tFlux<ChatResponse> response = streamingChatClient.stream(new Prompt(List.of(userMessage),\n\t\t\t\tOpenAiChatOptions.builder().withModel(OpenAiApi.ChatModel.GPT_4_VISION_PREVIEW.getValue()).build()));\n\n\t\tString content = response.collectList()\n\t\t\t.block()\n\t\t\t.stream()\n\t\t\t.map(ChatResponse::getResults)\n\t\t\t.flatMap(List::stream)\n\t\t\t.map(Generation::getOutput)\n\t\t\t.map(AssistantMessage::getContent)\n\t\t\t.collect(Collectors.joining());\n\t\tlogger.info(\"Response: {}\", content);\n\t\tassertThat(content).contains(\"bananas\", \"apple\", \"bowl\");",
                "is_abstract": "",
                "class_name": "OpenAiChatClientIT",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/OpenAiRetryTests.java",
        "class_names": [
            "TestRetryListener",
            "OpenAiRetryTests"
        ],
        "imports": "import org.springframework.ai.retry.RetryUtils;\nimport org.springframework.ai.document.MetadataMode;\nimport java.util.List;\nimport org.springframework.ai.openai.audio.transcription.AudioTranscriptionResponse;\nimport org.springframework.retry.support.RetryTemplate;\nimport reactor.core.publisher.Flux;\nimport org.springframework.ai.openai.OpenAiImageOptions;\nimport org.springframework.ai.image.ImageMessage;\nimport org.springframework.ai.retry.TransientAiException;\nimport org.springframework.ai.openai.audio.transcription.AudioTranscriptionPrompt;\nimport org.springframework.ai.openai.api.OpenAiApi.EmbeddingRequest;\nimport org.springframework.ai.openai.api.OpenAiAudioApi.TranscriptResponseFormat;\nimport org.springframework.ai.openai.api.OpenAiApi.ChatCompletionRequest;\nimport org.springframework.ai.openai.api.OpenAiAudioApi;\nimport org.springframework.ai.openai.OpenAiChatClient;\nimport org.springframework.retry.RetryContext;\nimport org.mockito.Mock;\nimport org.springframework.ai.openai.api.OpenAiImageApi.OpenAiImageRequest;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.springframework.ai.openai.OpenAiEmbeddingOptions;\nimport org.springframework.ai.openai.api.OpenAiApi.ChatCompletionFinishReason;\nimport org.springframework.ai.openai.api.OpenAiImageApi.OpenAiImageResponse;\nimport org.springframework.ai.openai.api.OpenAiApi;\nimport org.springframework.ai.openai.api.OpenAiAudioApi.StructuredResponse;\nimport org.springframework.retry.RetryListener;\nimport org.springframework.ai.openai.OpenAiAudioTranscriptionClient;\nimport org.springframework.ai.openai.api.OpenAiApi.ChatCompletionMessage;\nimport org.springframework.ai.openai.api.OpenAiAudioApi.TranscriptionRequest;\nimport org.springframework.retry.RetryCallback;\nimport org.springframework.ai.openai.api.OpenAiApi.ChatCompletion;\nimport org.springframework.ai.openai.OpenAiAudioTranscriptionOptions;\nimport org.springframework.ai.image.ImagePrompt;\nimport org.springframework.ai.openai.api.OpenAiImageApi.Data;\nimport static org.mockito.Mockito.when;\nimport static org.mockito.ArgumentMatchers.isA;\nimport org.springframework.ai.openai.api.OpenAiApi.ChatCompletionChunk;\nimport org.springframework.ai.openai.OpenAiChatOptions;\nimport org.springframework.ai.openai.api.OpenAiApi.Embedding;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.springframework.ai.chat.prompt.Prompt;\nimport org.springframework.ai.openai.api.OpenAiApi.ChatCompletionMessage.Role;\nimport org.springframework.core.io.ClassPathResource;\nimport org.springframework.http.ResponseEntity;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.openai.api.OpenAiApi.EmbeddingList;\nimport org.springframework.ai.openai.api.OpenAiImageApi;\nimport org.springframework.ai.openai.OpenAiImageClient;\nimport org.mockito.junit.jupiter.MockitoExtension;\nimport java.util.Optional;\nimport org.springframework.ai.openai.OpenAiEmbeddingClient;",
        "package_import_paths": {
            "org.springframework.ai.openai.chat.OpenAiRetryTests": "org.springframework.ai.openai.chat.OpenAiRetryTests",
            "org.springframework.ai.openai.chat.TestRetryListener": "org.springframework.ai.openai.chat.TestRetryListener",
            "org.springframework.ai.openai.chat.onSuccess": "org.springframework.ai.openai.chat.onSuccess",
            "org.springframework.ai.openai.chat.onError": "org.springframework.ai.openai.chat.onError",
            "org.springframework.ai.openai.chat.beforeEach": "org.springframework.ai.openai.chat.beforeEach",
            "org.springframework.ai.openai.chat.openAiChatTransientError": "org.springframework.ai.openai.chat.openAiChatTransientError",
            "org.springframework.ai.openai.chat.openAiChatNonTransientError": "org.springframework.ai.openai.chat.openAiChatNonTransientError",
            "org.springframework.ai.openai.chat.openAiChatStreamTransientError": "org.springframework.ai.openai.chat.openAiChatStreamTransientError",
            "org.springframework.ai.openai.chat.openAiChatStreamNonTransientError": "org.springframework.ai.openai.chat.openAiChatStreamNonTransientError",
            "org.springframework.ai.openai.chat.openAiEmbeddingTransientError": "org.springframework.ai.openai.chat.openAiEmbeddingTransientError",
            "org.springframework.ai.openai.chat.openAiEmbeddingNonTransientError": "org.springframework.ai.openai.chat.openAiEmbeddingNonTransientError",
            "org.springframework.ai.openai.chat.openAiAudioTranscriptionTransientError": "org.springframework.ai.openai.chat.openAiAudioTranscriptionTransientError",
            "org.springframework.ai.openai.chat.openAiAudioTranscriptionNonTransientError": "org.springframework.ai.openai.chat.openAiAudioTranscriptionNonTransientError",
            "org.springframework.ai.openai.chat.openAiImageTransientError": "org.springframework.ai.openai.chat.openAiImageTransientError",
            "org.springframework.ai.openai.chat.openAiImageNonTransientError": "org.springframework.ai.openai.chat.openAiImageNonTransientError",
            "org.springframework.ai.openai.chat.onErrorRetryCount": "org.springframework.ai.openai.chat.onErrorRetryCount",
            "org.springframework.ai.openai.chat.onSuccessRetryCount": "org.springframework.ai.openai.chat.onSuccessRetryCount",
            "org.springframework.ai.openai.chat.retryListener": "org.springframework.ai.openai.chat.retryListener",
            "org.springframework.ai.openai.chat.retryTemplat": "org.springframework.ai.openai.chat.retryTemplat",
            "org.springframework.ai.openai.chat.OpenAiApi": "org.springframework.ai.openai.chat.OpenAiApi",
            "org.springframework.ai.openai.chat.OpenAiAudioApi": "org.springframework.ai.openai.chat.OpenAiAudioApi",
            "org.springframework.ai.openai.chat.OpenAiImageApi": "org.springframework.ai.openai.chat.OpenAiImageApi",
            "org.springframework.ai.openai.chat.chatClient": "org.springframework.ai.openai.chat.chatClient",
            "org.springframework.ai.openai.chat.embeddingClient": "org.springframework.ai.openai.chat.embeddingClient",
            "org.springframework.ai.openai.chat.audioTranscriptionClient": "org.springframework.ai.openai.chat.audioTranscriptionClient",
            "org.springframework.ai.openai.chat.imageClient": "org.springframework.ai.openai.chat.imageClient"
        },
        "package": "package org.springframework.ai.openai.chat;",
        "property_declarations": [
            "private @Mock OpenAiAudioApi openAiAudioApi;",
            "private OpenAiChatClient chatClient;",
            "private @Mock OpenAiImageApi openAiImageApi;",
            "private TestRetryListener retryListener;",
            "private OpenAiAudioTranscriptionClient audioTranscriptionClient;",
            "private RetryTemplate retryTemplate;",
            "private OpenAiImageClient imageClient;",
            "private @Mock OpenAiApi openAiApi;",
            "int onErrorRetryCount = 0;",
            "int onSuccessRetryCount = 0;",
            "private OpenAiEmbeddingClient embeddingClient;"
        ],
        "functions": [
            {
                "name": "onSuccess",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "onSuccessRetryCount = context.getRetryCount();",
                "is_abstract": "",
                "class_name": "OpenAiRetryTests TestRetryListener",
                "annotations": []
            },
            {
                "name": "onError",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "onErrorRetryCount = context.getRetryCount();",
                "is_abstract": "",
                "class_name": "OpenAiRetryTests TestRetryListener",
                "annotations": []
            },
            {
                "name": "beforeEach",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "retryTemplate = RetryUtils.DEFAULT_RETRY_TEMPLATE;\n\t\tretryListener = new TestRetryListener();\n\t\tretryTemplate.registerListener(retryListener);\n\n\t\tchatClient = new OpenAiChatClient(openAiApi, OpenAiChatOptions.builder().build(), null, retryTemplate);\n\t\tembeddingClient = new OpenAiEmbeddingClient(openAiApi, MetadataMode.EMBED,\n\t\t\t\tOpenAiEmbeddingOptions.builder().build(), retryTemplate);\n\t\taudioTranscriptionClient = new OpenAiAudioTranscriptionClient(openAiAudioApi,\n\t\t\t\tOpenAiAudioTranscriptionOptions.builder()\n\t\t\t\t\t.withModel(\"model\")\n\t\t\t\t\t.withResponseFormat(TranscriptResponseFormat.JSON)\n\t\t\t\t\t.build(),\n\t\t\t\tretryTemplate);\n\t\timageClient = new OpenAiImageClient(openAiImageApi, OpenAiImageOptions.builder().build(), retryTemplate);",
                "is_abstract": "",
                "class_name": "OpenAiRetryTests TestRetryListener",
                "annotations": []
            },
            {
                "name": "openAiChatTransientError",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var choice = new ChatCompletion.Choice(ChatCompletionFinishReason.STOP, 0,\n\t\t\t\tnew ChatCompletionMessage(\"Response\", Role.ASSISTANT), null);\n\t\tChatCompletion expectedChatCompletion = new ChatCompletion(\"id\", List.of(choice), 666l, \"model\", null, null,\n\t\t\t\tnew OpenAiApi.Usage(10, 10, 10));\n\n\t\twhen(openAiApi.chatCompletionEntity(isA(ChatCompletionRequest.class)))\n\t\t\t.thenThrow(new TransientAiException(\"Transient Error 1\"))\n\t\t\t.thenThrow(new TransientAiException(\"Transient Error 2\"))\n\t\t\t.thenReturn(ResponseEntity.of(Optional.of(expectedChatCompletion)));\n\n\t\tvar result = chatClient.call(new Prompt(\"text\"));\n\n\t\tassertThat(result).isNotNull();\n\t\tassertThat(result.getResult().getOutput().getContent()).isSameAs(\"Response\");\n\t\tassertThat(retryListener.onSuccessRetryCount).isEqualTo(2);\n\t\tassertThat(retryListener.onErrorRetryCount).isEqualTo(2);",
                "is_abstract": "",
                "class_name": "OpenAiRetryTests TestRetryListener",
                "annotations": []
            },
            {
                "name": "openAiChatNonTransientError",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "when(openAiApi.chatCompletionEntity(isA(ChatCompletionRequest.class)))\n\t\t\t\t.thenThrow(new RuntimeException(\"Non Transient Error\"));\n\t\tassertThrows(RuntimeException.class, () -> chatClient.call(new Prompt(\"text\")));",
                "is_abstract": "",
                "class_name": "OpenAiRetryTests TestRetryListener",
                "annotations": []
            },
            {
                "name": "openAiChatStreamTransientError",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var choice = new ChatCompletionChunk.ChunkChoice(ChatCompletionFinishReason.STOP, 0,\n\t\t\t\tnew ChatCompletionMessage(\"Response\", Role.ASSISTANT), null);\n\t\tChatCompletionChunk expectedChatCompletion = new ChatCompletionChunk(\"id\", List.of(choice), 666l, \"model\", null,\n\t\t\t\tnull);\n\n\t\twhen(openAiApi.chatCompletionStream(isA(ChatCompletionRequest.class)))\n\t\t\t.thenThrow(new TransientAiException(\"Transient Error 1\"))\n\t\t\t.thenThrow(new TransientAiException(\"Transient Error 2\"))\n\t\t\t.thenReturn(Flux.just(expectedChatCompletion));\n\n\t\tvar result = chatClient.stream(new Prompt(\"text\"));\n\n\t\tassertThat(result).isNotNull();\n\t\tassertThat(result.collectList().block().get(0).getResult().getOutput().getContent()).isSameAs(\"Response\");\n\t\tassertThat(retryListener.onSuccessRetryCount).isEqualTo(2);\n\t\tassertThat(retryListener.onErrorRetryCount).isEqualTo(2);",
                "is_abstract": "",
                "class_name": "OpenAiRetryTests TestRetryListener",
                "annotations": []
            },
            {
                "name": "openAiChatStreamNonTransientError",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "when(openAiApi.chatCompletionStream(isA(ChatCompletionRequest.class)))\n\t\t\t\t.thenThrow(new RuntimeException(\"Non Transient Error\"));\n\t\tassertThrows(RuntimeException.class, () -> chatClient.stream(new Prompt(\"text\")));",
                "is_abstract": "",
                "class_name": "OpenAiRetryTests TestRetryListener",
                "annotations": []
            },
            {
                "name": "openAiEmbeddingTransientError",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "EmbeddingList<Embedding> expectedEmbeddings = new EmbeddingList<>(\"list\",\n\t\t\t\tList.of(new Embedding(0, List.of(9.9, 8.8))), \"model\", new OpenAiApi.Usage(10, 10, 10));\n\n\t\twhen(openAiApi.embeddings(isA(EmbeddingRequest.class))).thenThrow(new TransientAiException(\"Transient Error 1\"))\n\t\t\t.thenThrow(new TransientAiException(\"Transient Error 2\"))\n\t\t\t.thenReturn(ResponseEntity.of(Optional.of(expectedEmbeddings)));\n\n\t\tvar result = embeddingClient\n\t\t\t.call(new org.springframework.ai.embedding.EmbeddingRequest(List.of(\"text1\", \"text2\"), null));\n\n\t\tassertThat(result).isNotNull();\n\t\tassertThat(result.getResult().getOutput()).isEqualTo(List.of(9.9, 8.8));\n\t\tassertThat(retryListener.onSuccessRetryCount).isEqualTo(2);\n\t\tassertThat(retryListener.onErrorRetryCount).isEqualTo(2);",
                "is_abstract": "",
                "class_name": "OpenAiRetryTests TestRetryListener",
                "annotations": []
            },
            {
                "name": "openAiEmbeddingNonTransientError",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "when(openAiApi.embeddings(isA(EmbeddingRequest.class)))\n\t\t\t\t.thenThrow(new RuntimeException(\"Non Transient Error\"));\n\t\tassertThrows(RuntimeException.class, () -> embeddingClient\n\t\t\t\t.call(new org.springframework.ai.embedding.EmbeddingRequest(List.of(\"text1\", \"text2\"), null)));",
                "is_abstract": "",
                "class_name": "OpenAiRetryTests TestRetryListener",
                "annotations": []
            },
            {
                "name": "openAiAudioTranscriptionTransientError",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var expectedResponse = new StructuredResponse(\"nl\", 6.7f, \"Transcription Text\", List.of(), List.of());\n\n\t\twhen(openAiAudioApi.createTranscription(isA(TranscriptionRequest.class), isA(Class.class)))\n\t\t\t.thenThrow(new TransientAiException(\"Transient Error 1\"))\n\t\t\t.thenThrow(new TransientAiException(\"Transient Error 2\"))\n\t\t\t.thenReturn(ResponseEntity.of(Optional.of(expectedResponse)));\n\n\t\tAudioTranscriptionResponse result = audioTranscriptionClient\n\t\t\t.call(new AudioTranscriptionPrompt(new ClassPathResource(\"speech/jfk.flac\")));\n\n\t\tassertThat(result).isNotNull();\n\t\tassertThat(result.getResult().getOutput()).isEqualTo(expectedResponse.text());\n\t\tassertThat(retryListener.onSuccessRetryCount).isEqualTo(2);\n\t\tassertThat(retryListener.onErrorRetryCount).isEqualTo(2);",
                "is_abstract": "",
                "class_name": "OpenAiRetryTests TestRetryListener",
                "annotations": []
            },
            {
                "name": "openAiAudioTranscriptionNonTransientError",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "when(openAiAudioApi.createTranscription(isA(TranscriptionRequest.class), isA(Class.class)))\n\t\t\t\t.thenThrow(new RuntimeException(\"Transient Error 1\"));\n\t\tassertThrows(RuntimeException.class, () -> audioTranscriptionClient\n\t\t\t\t.call(new AudioTranscriptionPrompt(new ClassPathResource(\"speech/jfk.flac\"))));",
                "is_abstract": "",
                "class_name": "OpenAiRetryTests TestRetryListener",
                "annotations": []
            },
            {
                "name": "openAiImageTransientError",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var expectedResponse = new OpenAiImageResponse(678l, List.of(new Data(\"url678\", \"b64\", \"prompt\")));\n\n\t\twhen(openAiImageApi.createImage(isA(OpenAiImageRequest.class)))\n\t\t\t.thenThrow(new TransientAiException(\"Transient Error 1\"))\n\t\t\t.thenThrow(new TransientAiException(\"Transient Error 2\"))\n\t\t\t.thenReturn(ResponseEntity.of(Optional.of(expectedResponse)));\n\n\t\tvar result = imageClient.call(new ImagePrompt(List.of(new ImageMessage(\"Image Message\"))));\n\n\t\tassertThat(result).isNotNull();\n\t\tassertThat(result.getResult().getOutput().getUrl()).isEqualTo(\"url678\");\n\t\tassertThat(retryListener.onSuccessRetryCount).isEqualTo(2);\n\t\tassertThat(retryListener.onErrorRetryCount).isEqualTo(2);",
                "is_abstract": "",
                "class_name": "OpenAiRetryTests TestRetryListener",
                "annotations": []
            },
            {
                "name": "openAiImageNonTransientError",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "when(openAiImageApi.createImage(isA(OpenAiImageRequest.class)))\n\t\t\t\t.thenThrow(new RuntimeException(\"Transient Error 1\"));\n\t\tassertThrows(RuntimeException.class,\n\t\t\t\t() -> imageClient.call(new ImagePrompt(List.of(new ImageMessage(\"Image Message\")))));",
                "is_abstract": "",
                "class_name": "OpenAiRetryTests TestRetryListener",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/OpenAiChatClient2IT.java",
        "class_names": [
            "Config",
            "OpenAiChatClient2IT"
        ],
        "imports": "import org.springframework.boot.test.context.SpringBootTest;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport com.fasterxml.jackson.core.JacksonException;\nimport org.springframework.ai.openai.api.OpenAiApi.ChatCompletionRequest;\nimport org.springframework.ai.openai.OpenAiChatClient;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.slf4j.Logger;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.ai.chat.ChatResponse;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport org.springframework.ai.openai.api.OpenAiApi;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.boot.SpringBootConfiguration;\nimport com.fasterxml.jackson.databind.JsonMappingException;\nimport org.springframework.ai.openai.OpenAiChatOptions;\nimport org.springframework.ai.chat.prompt.Prompt;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.junit.jupiter.api.Test;\nimport com.fasterxml.jackson.databind.DeserializationFeature;",
        "package_import_paths": {
            "org.springframework.ai.openai.chat.OpenAiChatClient2IT": "org.springframework.ai.openai.chat.OpenAiChatClient2IT",
            "org.springframework.ai.openai.chat.Confi": "org.springframework.ai.openai.chat.Confi",
            "org.springframework.ai.openai.chat.responseFormatTest": "org.springframework.ai.openai.chat.responseFormatTest",
            "org.springframework.ai.openai.chat.isValidJson": "org.springframework.ai.openai.chat.isValidJson",
            "org.springframework.ai.openai.chat.chatCompletionApi": "org.springframework.ai.openai.chat.chatCompletionApi",
            "org.springframework.ai.openai.chat.openAiClient": "org.springframework.ai.openai.chat.openAiClient",
            "org.springframework.ai.openai.chat.logger": "org.springframework.ai.openai.chat.logger",
            "org.springframework.ai.openai.chat.privat": "org.springframework.ai.openai.chat.privat",
            "org.springframework.ai.openai.chat.MAPPER": "org.springframework.ai.openai.chat.MAPPER"
        },
        "package": "package org.springframework.ai.openai.chat;",
        "property_declarations": [
            "private final Logger logger = LoggerFactory.getLogger(getClass());",
            "@Autowired\n\tprivate OpenAiChatClient openAiChatClient;",
            "private static ObjectMapper MAPPER = new ObjectMapper().enable(DeserializationFeature.FAIL_ON_TRAILING_TOKENS);"
        ],
        "functions": [
            {
                "name": "responseFormatTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// 400 - ResponseError[error=Error[message='json' is not one of ['json_object',\n\t\t// 'text'] -\n\t\t// 'response_format.type', type=invalid_request_error, param=null, code=null]]\n\n\t\t// 400 - ResponseError[error=Error[message='messages' must contain the word 'json'\n\t\t// in some form, to use\n\t\t// 'response_format' of type 'json_object'., type=invalid_request_error,\n\t\t// param=messages, code=null]]\n\n\t\tPrompt prompt = new Prompt(\"List 8 planets. Use JSON response\",\n\t\t\t\tOpenAiChatOptions.builder()\n\t\t\t\t\t.withResponseFormat(new ChatCompletionRequest.ResponseFormat(\"json_object\"))\n\t\t\t\t\t.build());\n\n\t\tChatResponse response = this.openAiChatClient.call(prompt);\n\n\t\tassertThat(response).isNotNull();\n\n\t\tString content = response.getResult().getOutput().getContent();\n\n\t\tlogger.info(\"Response content: {}\", content);\n\n\t\tassertThat(isValidJson(content)).isTrue();",
                "is_abstract": "",
                "class_name": "OpenAiChatClient2IT",
                "annotations": []
            },
            {
                "name": "isValidJson",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "try {\n\t\t\tMAPPER.readTree(json);\n\t\t}\n\t\tcatch (JacksonException e) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;",
                "is_abstract": "",
                "class_name": "OpenAiChatClient2IT",
                "annotations": []
            },
            {
                "name": "chatCompletionApi",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new OpenAiApi(System.getenv(\"OPENAI_API_KEY\"));",
                "is_abstract": "",
                "class_name": "OpenAiChatClient2IT Config",
                "annotations": []
            },
            {
                "name": "openAiClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new OpenAiChatClient(openAiApi);",
                "is_abstract": "",
                "class_name": "OpenAiChatClient2IT Config",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/ActorsFilms.java",
        "class_names": [
            "ActorsFilms"
        ],
        "imports": "import java.util.List;",
        "package_import_paths": {
            "org.springframework.ai.openai.chat.ActorsFilms": "org.springframework.ai.openai.chat.ActorsFilms",
            "org.springframework.ai.openai.chat.getActor": "org.springframework.ai.openai.chat.getActor",
            "org.springframework.ai.openai.chat.setActor": "org.springframework.ai.openai.chat.setActor",
            "org.springframework.ai.openai.chat.getMovies": "org.springframework.ai.openai.chat.getMovies",
            "org.springframework.ai.openai.chat.setMovies": "org.springframework.ai.openai.chat.setMovies",
            "org.springframework.ai.openai.chat.toStrin": "org.springframework.ai.openai.chat.toStrin",
            "org.springframework.ai.openai.chat.actor": "org.springframework.ai.openai.chat.actor",
            "org.springframework.ai.openai.chat.movies": "org.springframework.ai.openai.chat.movies"
        },
        "package": "package org.springframework.ai.openai.chat;",
        "property_declarations": [
            "private String actor;",
            "private List<String> movies;"
        ],
        "functions": [
            {
                "name": "getActor",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return actor;",
                "is_abstract": "",
                "class_name": "ActorsFilms",
                "annotations": []
            },
            {
                "name": "setActor",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.actor = actor;",
                "is_abstract": "",
                "class_name": "ActorsFilms",
                "annotations": []
            },
            {
                "name": "getMovies",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return movies;",
                "is_abstract": "",
                "class_name": "ActorsFilms",
                "annotations": []
            },
            {
                "name": "setMovies",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.movies = movies;",
                "is_abstract": "",
                "class_name": "ActorsFilms",
                "annotations": []
            },
            {
                "name": "toString",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return \"ActorsFilms{\" + \"actor='\" + actor + '\\'' + \", movies=\" + movies + '}';",
                "is_abstract": "",
                "class_name": "ActorsFilms",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/acme/AcmeIT.java",
        "class_names": [
            "AcmeIT"
        ],
        "imports": "import java.util.stream.Collectors;\nimport java.util.List;\nimport org.springframework.ai.chat.prompt.SystemPromptTemplate;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.ai.openai.OpenAiTestConfiguration;\nimport org.springframework.core.io.Resource;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.ai.openai.OpenAiChatClient;\nimport org.springframework.ai.chat.messages.Message;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.slf4j.Logger;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport java.util.Map;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.ai.chat.ChatResponse;\nimport org.springframework.ai.transformer.splitter.TokenTextSplitter;\nimport org.springframework.ai.reader.JsonReader;\nimport org.springframework.ai.chat.messages.UserMessage;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.ai.chat.prompt.Prompt;\nimport org.springframework.ai.document.Document;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.vectorstore.VectorStore;\nimport org.springframework.ai.vectorstore.SimpleVectorStore;\nimport org.springframework.ai.openai.testutils.AbstractIT;\nimport org.springframework.ai.openai.OpenAiEmbeddingClient;",
        "package_import_paths": {
            "org.springframework.ai.openai.acme.AcmeIT": "org.springframework.ai.openai.acme.AcmeIT",
            "org.springframework.ai.openai.acme.beanTest": "org.springframework.ai.openai.acme.beanTest",
            "org.springframework.ai.openai.acme.acmeChain": "org.springframework.ai.openai.acme.acmeChain",
            "org.springframework.ai.openai.acme.getSystemMess": "org.springframework.ai.openai.acme.getSystemMess",
            "org.springframework.ai.openai.acme.logger": "org.springframework.ai.openai.acme.logger",
            "org.springframework.ai.openai.acme.bikesResour": "org.springframework.ai.openai.acme.bikesResour",
            "org.springframework.ai.openai.acme.systemBikePrompt": "org.springframework.ai.openai.acme.systemBikePrompt",
            "org.springframework.ai.openai.acme.privat": "org.springframework.ai.openai.acme.privat"
        },
        "package": "package org.springframework.ai.openai.acme;",
        "property_declarations": [
            "@Autowired\n\tprivate OpenAiChatClient chatClient;",
            "private static final Logger logger = LoggerFactory.getLogger(AcmeIT.class);",
            "@Value(\"classpath:/prompts/acme/system-qa.st\")\n\tprivate Resource systemBikePrompt;",
            "@Autowired\n\tprivate OpenAiEmbeddingClient embeddingClient;",
            "@Value(\"classpath:/data/acme/bikes.json\")\n\tprivate Resource bikesResource;"
        ],
        "functions": [
            {
                "name": "beanTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "assertThat(bikesResource).isNotNull();\n\t\tassertThat(embeddingClient).isNotNull();\n\t\tassertThat(chatClient).isNotNull();",
                "is_abstract": "",
                "class_name": "AcmeIT",
                "annotations": []
            },
            {
                "name": "acmeChain",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// Step 1 - load documents\n\t\tJsonReader jsonReader = new JsonReader(bikesResource, \"name\", \"price\", \"shortDescription\", \"description\");\n\n\t\tvar textSplitter = new TokenTextSplitter();\n\n\t\t// Step 2 - Create embeddings and save to vector store\n\n\t\tlogger.info(\"Creating Embeddings...\");\n\t\tVectorStore vectorStore = new SimpleVectorStore(embeddingClient);\n\n\t\tvectorStore.accept(textSplitter.apply(jsonReader.get()));\n\n\t\t// Now user query\n\n\t\tlogger.info(\"Retrieving relevant documents\");\n\t\tString userQuery = \"What bike is good for city commuting?\";\n\n\t\t// \"Tell me more about the bike 'The SonicRide 8S'\" ;\n\t\t// \"How much does the SonicRide 8S cost?\";\n\n\t\t// Eventually include metadata in query.\n\t\tList<Document> similarDocuments = vectorStore.similaritySearch(userQuery);\n\t\tlogger.info(String.format(\"Found %s relevant documents.\", similarDocuments.size()));\n\n\t\t// Try the case where not product was specified, so query over whatever docs might\n\t\t// be relevant.\n\n\t\tMessage systemMessage = getSystemMessage(similarDocuments);\n\t\tUserMessage userMessage = new UserMessage(userQuery);\n\n\t\t// Create the prompt ad-hoc for now, need to put in system message and user\n\t\t// message via ChatPromptTemplate or some other message building mechanic;\n\t\tlogger.info(\"Asking AI generative to reply to question.\");\n\t\tPrompt prompt = new Prompt(List.of(systemMessage, userMessage));\n\t\tlogger.info(\"AI responded.\");\n\t\tChatResponse response = chatClient.call(prompt);\n\n\t\tevaluateQuestionAndAnswer(userQuery, response, true);",
                "is_abstract": "",
                "class_name": "AcmeIT",
                "annotations": []
            },
            {
                "name": "getSystemMessage",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String documents = similarDocuments.stream()\n\t\t\t.map(entry -> entry.getContent())\n\t\t\t.collect(Collectors.joining(System.lineSeparator()));\n\n\t\tSystemPromptTemplate systemPromptTemplate = new SystemPromptTemplate(systemBikePrompt);\n\t\tMessage systemMessage = systemPromptTemplate.createMessage(Map.of(\"documents\", documents));\n\t\treturn systemMessage;",
                "is_abstract": "",
                "class_name": "AcmeIT",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/transformer/MetadataTransformerIT.java",
        "class_names": [
            "MetadataTransformerIT",
            "OpenAiTestConfiguration"
        ],
        "imports": "import java.util.List;\nimport org.springframework.ai.transformer.KeywordMetadataEnricher;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.util.StringUtils;\nimport org.springframework.ai.openai.OpenAiChatClient;\nimport java.io.IOException;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport java.util.Map;\nimport org.springframework.ai.document.DefaultContentFormatter;\nimport org.springframework.ai.openai.api.OpenAiApi;\nimport org.springframework.ai.transformer.ContentFormatTransformer;\nimport org.springframework.context.annotation.Bean;\nimport java.util.HashMap;\nimport org.springframework.ai.transformer.SummaryMetadataEnricher.SummaryType;\nimport org.springframework.boot.SpringBootConfiguration;\nimport org.springframework.ai.transformer.SummaryMetadataEnricher;\nimport org.springframework.ai.document.Document;\nimport org.junit.jupiter.api.Test;",
        "package_import_paths": {
            "org.springframework.ai.openai.transformer.MetadataTransformerIT": "org.springframework.ai.openai.transformer.MetadataTransformerIT",
            "org.springframework.ai.openai.transformer.OpenAiTestConfiguration": "org.springframework.ai.openai.transformer.OpenAiTestConfiguration",
            "org.springframework.ai.openai.transformer.testKeywordExtractor": "org.springframework.ai.openai.transformer.testKeywordExtractor",
            "org.springframework.ai.openai.transformer.testSummaryExtractor": "org.springframework.ai.openai.transformer.testSummaryExtractor",
            "org.springframework.ai.openai.transformer.testContentFormatEnricher": "org.springframework.ai.openai.transformer.testContentFormatEnricher",
            "org.springframework.ai.openai.transformer.openAiApi": "org.springframework.ai.openai.transformer.openAiApi",
            "org.springframework.ai.openai.transformer.openAiChatClient": "org.springframework.ai.openai.transformer.openAiChatClient",
            "org.springframework.ai.openai.transformer.keywordMetadat": "org.springframework.ai.openai.transformer.keywordMetadat",
            "org.springframework.ai.openai.transformer.summaryMetadat": "org.springframework.ai.openai.transformer.summaryMetadat",
            "org.springframework.ai.openai.transformer.defaultContentFormatter": "org.springframework.ai.openai.transformer.defaultContentFormatter",
            "org.springframework.ai.openai.transformer.contentFormatTransformer": "org.springframework.ai.openai.transformer.contentFormatTransformer",
            "org.springframework.ai.openai.transformer.KeywordMetadataEnricher": "org.springframework.ai.openai.transformer.KeywordMetadataEnricher",
            "org.springframework.ai.openai.transformer.SummaryMetadataEnricher": "org.springframework.ai.openai.transformer.SummaryMetadataEnricher",
            "org.springframework.ai.openai.transformer.ContentFormatTransformer": "org.springframework.ai.openai.transformer.ContentFormatTransformer",
            "org.springframework.ai.openai.transformer.DefaultContentFormatter": "org.springframework.ai.openai.transformer.DefaultContentFormatter",
            "org.springframework.ai.openai.transformer.document1": "org.springframework.ai.openai.transformer.document1",
            "org.springframework.ai.openai.transformer.document2": "org.springframework.ai.openai.transformer.document2"
        },
        "package": "package org.springframework.ai.openai.transformer;",
        "property_declarations": [
            "Document document1 = new Document(\"Somewhere in the Andes, they believe to this very day that the\"\n\t\t\t+ \" future is behind you. It comes up from behind your back, surprising and unforeseeable, while the past \"\n\t\t\t+ \" is always before your eyes, that which has already happened. When they talk about the past, the people of\"\n\t\t\t+ \" the Aymara tribe point in front of them. You walk forward facing the past and you turn back toward the future.\",\n\t\t\tnew HashMap<>(Map.of(\"key\", \"value\")));",
            "Document document2 = new Document(\n\t\t\t\"The Spring Framework is divided into modules. Applications can choose which modules\"\n\t\t\t\t\t+ \" they need. At the heart are the modules of the core container, including a configuration generative and a \"\n\t\t\t\t\t+ \"dependency injection mechanism. Beyond that, the Spring Framework provides foundational support \"\n\t\t\t\t\t+ \" for different application architectures, including messaging, transactional data and persistence, \"\n\t\t\t\t\t+ \"and web. It also includes the Servlet-based Spring MVC web framework and, in parallel, the Spring \"\n\t\t\t\t\t+ \"WebFlux reactive web framework.\");",
            "@Autowired\n\tSummaryMetadataEnricher summaryMetadataEnricher;",
            "@Autowired\n\tDefaultContentFormatter defaultContentFormatter;",
            "@Autowired\n\tKeywordMetadataEnricher keywordMetadataEnricher;",
            "@Autowired\n\tContentFormatTransformer contentFormatTransformer;"
        ],
        "functions": [
            {
                "name": "testKeywordExtractor",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var updatedDocuments = keywordMetadataEnricher.apply(List.of(document1, document2));\n\n\t\tList<Map<String, Object>> keywords = updatedDocuments.stream().map(d -> d.getMetadata()).toList();\n\n\t\tassertThat(updatedDocuments.size()).isEqualTo(2);\n\t\tvar keywords1 = keywords.get(0);\n\t\tvar keywords2 = keywords.get(1);\n\t\tassertThat(keywords1).containsKeys(\"excerpt_keywords\");\n\t\tassertThat(keywords2).containsKeys(\"excerpt_keywords\");\n\n\t\tassertThat((String) keywords1.get(\"excerpt_keywords\")).contains(\"Andes\", \"Aymara\");\n\t\tassertThat((String) keywords2.get(\"excerpt_keywords\")).contains(\"Spring Framework\", \"dependency injection\");",
                "is_abstract": "",
                "class_name": "MetadataTransformerIT",
                "annotations": []
            },
            {
                "name": "testSummaryExtractor",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var updatedDocuments = summaryMetadataEnricher.apply(List.of(document1, document2));\n\n\t\tList<Map<String, Object>> summaries = updatedDocuments.stream().map(d -> d.getMetadata()).toList();\n\n\t\tassertThat(summaries.size()).isEqualTo(2);\n\t\tvar summary1 = summaries.get(0);\n\t\tvar summary2 = summaries.get(1);\n\t\tassertThat(summary1).containsKeys(\"section_summary\", \"next_section_summary\");\n\t\tassertThat(summary1).doesNotContainKeys(\"prev_section_summary\");\n\t\tassertThat(summary2).containsKeys(\"section_summary\", \"prev_section_summary\");\n\t\tassertThat(summary2).doesNotContainKeys(\"next_section_summary\");\n\n\t\tassertThat((String) summary1.get(\"section_summary\")).isNotEmpty();\n\t\tassertThat((String) summary1.get(\"next_section_summary\")).isNotEmpty();\n\t\tassertThat((String) summary2.get(\"section_summary\")).isNotEmpty();\n\t\tassertThat((String) summary2.get(\"prev_section_summary\")).isNotEmpty();\n\n\t\tassertThat((String) summary1.get(\"section_summary\")).isEqualTo((String) summary2.get(\"prev_section_summary\"));\n\t\tassertThat((String) summary1.get(\"next_section_summary\")).isEqualTo((String) summary2.get(\"section_summary\"));",
                "is_abstract": "",
                "class_name": "MetadataTransformerIT",
                "annotations": []
            },
            {
                "name": "testContentFormatEnricher",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "assertThat(((DefaultContentFormatter) document1.getContentFormatter()).getExcludedEmbedMetadataKeys())\n\t\t\t.doesNotContain(\"NewEmbedKey\");\n\t\tassertThat(((DefaultContentFormatter) document1.getContentFormatter()).getExcludedInferenceMetadataKeys())\n\t\t\t.doesNotContain(\"NewInferenceKey\");\n\n\t\tassertThat(((DefaultContentFormatter) document2.getContentFormatter()).getExcludedEmbedMetadataKeys())\n\t\t\t.doesNotContain(\"NewEmbedKey\");\n\t\tassertThat(((DefaultContentFormatter) document2.getContentFormatter()).getExcludedInferenceMetadataKeys())\n\t\t\t.doesNotContain(\"NewInferenceKey\");\n\n\t\tList<Document> enrichedDocuments = contentFormatTransformer.apply(List.of(document1, document2));\n\n\t\tassertThat(enrichedDocuments.size()).isEqualTo(2);\n\t\tvar doc1 = enrichedDocuments.get(0);\n\t\tvar doc2 = enrichedDocuments.get(1);\n\n\t\tassertThat(doc1).isEqualTo(document1);\n\t\tassertThat(doc2).isEqualTo(document2);\n\n\t\tassertThat(((DefaultContentFormatter) doc1.getContentFormatter()).getTextTemplate())\n\t\t\t.isSameAs(defaultContentFormatter.getTextTemplate());\n\t\tassertThat(((DefaultContentFormatter) doc1.getContentFormatter()).getExcludedEmbedMetadataKeys())\n\t\t\t.contains(\"NewEmbedKey\");\n\t\tassertThat(((DefaultContentFormatter) doc1.getContentFormatter()).getExcludedInferenceMetadataKeys())\n\t\t\t.contains(\"NewInferenceKey\");\n\n\t\tassertThat(((DefaultContentFormatter) doc2.getContentFormatter()).getTextTemplate())\n\t\t\t.isSameAs(defaultContentFormatter.getTextTemplate());\n\t\tassertThat(((DefaultContentFormatter) doc2.getContentFormatter()).getExcludedEmbedMetadataKeys())\n\t\t\t.contains(\"NewEmbedKey\");\n\t\tassertThat(((DefaultContentFormatter) doc2.getContentFormatter()).getExcludedInferenceMetadataKeys())\n\t\t\t.contains(\"NewInferenceKey\");",
                "is_abstract": "",
                "class_name": "MetadataTransformerIT",
                "annotations": []
            },
            {
                "name": "openAiApi",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String apiKey = System.getenv(\"OPENAI_API_KEY\");\n\t\t\tif (!StringUtils.hasText(apiKey)) {\n\t\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\t\"You must provide an API key.  Put it in an environment variable under the name OPENAI_API_KEY\");\n\t\t\t}\n\t\t\treturn new OpenAiApi(apiKey);",
                "is_abstract": "",
                "class_name": "MetadataTransformerIT OpenAiTestConfiguration",
                "annotations": []
            },
            {
                "name": "openAiChatClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "OpenAiChatClient openAiChatClient = new OpenAiChatClient(openAiApi);\n\t\t\treturn openAiChatClient;",
                "is_abstract": "",
                "class_name": "MetadataTransformerIT OpenAiTestConfiguration",
                "annotations": []
            },
            {
                "name": "keywordMetadata",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new KeywordMetadataEnricher(aiClient, 5);",
                "is_abstract": "",
                "class_name": "MetadataTransformerIT OpenAiTestConfiguration",
                "annotations": []
            },
            {
                "name": "summaryMetadata",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new SummaryMetadataEnricher(aiClient,\n\t\t\t\t\tList.of(SummaryType.PREVIOUS, SummaryType.CURRENT, SummaryType.NEXT));",
                "is_abstract": "",
                "class_name": "MetadataTransformerIT OpenAiTestConfiguration",
                "annotations": []
            },
            {
                "name": "defaultContentFormatter",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return DefaultContentFormatter.builder()\n\t\t\t\t.withExcludedEmbedMetadataKeys(\"NewEmbedKey\")\n\t\t\t\t.withExcludedInferenceMetadataKeys(\"NewInferenceKey\")\n\t\t\t\t.build();",
                "is_abstract": "",
                "class_name": "MetadataTransformerIT OpenAiTestConfiguration",
                "annotations": []
            },
            {
                "name": "contentFormatTransformer",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new ContentFormatTransformer(defaultContentFormatter, false);",
                "is_abstract": "",
                "class_name": "MetadataTransformerIT OpenAiTestConfiguration",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/embedding/EmbeddingIT.java",
        "class_names": [
            "EmbeddingIT"
        ],
        "imports": "import java.util.List;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.ai.embedding.EmbeddingRequest;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.ai.openai.OpenAiEmbeddingOptions;\nimport org.springframework.ai.embedding.EmbeddingResponse;\nimport org.springframework.ai.openai.OpenAiEmbeddingClient;",
        "package_import_paths": {
            "org.springframework.ai.openai.embedding.EmbeddingIT": "org.springframework.ai.openai.embedding.EmbeddingIT",
            "org.springframework.ai.openai.embedding.defaultEmbeddin": "org.springframework.ai.openai.embedding.defaultEmbeddin",
            "org.springframework.ai.openai.embedding.embedding3Lar": "org.springframework.ai.openai.embedding.embedding3Lar",
            "org.springframework.ai.openai.embedding.textEmbeddingAda002": "org.springframework.ai.openai.embedding.textEmbeddingAda002",
            "org.springframework.ai.openai.embedding.privat": "org.springframework.ai.openai.embedding.privat"
        },
        "package": "package org.springframework.ai.openai.embedding;",
        "property_declarations": [
            "@Autowired\n\tprivate OpenAiEmbeddingClient embeddingClient;"
        ],
        "functions": [
            {
                "name": "defaultEmbedding",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "assertThat(embeddingClient).isNotNull();\n\n\t\tEmbeddingResponse embeddingResponse = embeddingClient.embedForResponse(List.of(\"Hello World\"));\n\t\tassertThat(embeddingResponse.getResults()).hasSize(1);\n\t\tassertThat(embeddingResponse.getResults().get(0)).isNotNull();\n\t\tassertThat(embeddingResponse.getResults().get(0).getOutput()).hasSize(1536);\n\t\tassertThat(embeddingResponse.getMetadata()).containsEntry(\"model\", \"text-embedding-ada-002\");\n\t\tassertThat(embeddingResponse.getMetadata()).containsEntry(\"total-tokens\", 2);\n\t\tassertThat(embeddingResponse.getMetadata()).containsEntry(\"prompt-tokens\", 2);\n\n\t\tassertThat(embeddingClient.dimensions()).isEqualTo(1536);",
                "is_abstract": "",
                "class_name": "EmbeddingIT",
                "annotations": []
            },
            {
                "name": "embedding3Large",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "EmbeddingResponse embeddingResponse = embeddingClient.call(new EmbeddingRequest(List.of(\"Hello World\"),\n\t\t\t\tOpenAiEmbeddingOptions.builder().withModel(\"text-embedding-3-large\").build()));\n\t\tassertThat(embeddingResponse.getResults()).hasSize(1);\n\t\tassertThat(embeddingResponse.getResults().get(0)).isNotNull();\n\t\tassertThat(embeddingResponse.getResults().get(0).getOutput()).hasSize(3072);\n\t\tassertThat(embeddingResponse.getMetadata()).containsEntry(\"model\", \"text-embedding-3-large\");\n\t\tassertThat(embeddingResponse.getMetadata()).containsEntry(\"total-tokens\", 2);\n\t\tassertThat(embeddingResponse.getMetadata()).containsEntry(\"prompt-tokens\", 2);\n\n\t\t// assertThat(embeddingClient.dimensions()).isEqualTo(3072);",
                "is_abstract": "",
                "class_name": "EmbeddingIT",
                "annotations": []
            },
            {
                "name": "textEmbeddingAda002",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "EmbeddingResponse embeddingResponse = embeddingClient.call(new EmbeddingRequest(List.of(\"Hello World\"),\n\t\t\t\tOpenAiEmbeddingOptions.builder().withModel(\"text-embedding-3-small\").build()));\n\t\tassertThat(embeddingResponse.getResults()).hasSize(1);\n\t\tassertThat(embeddingResponse.getResults().get(0)).isNotNull();\n\t\tassertThat(embeddingResponse.getResults().get(0).getOutput()).hasSize(1536);\n\n\t\tassertThat(embeddingResponse.getMetadata()).containsEntry(\"model\", \"text-embedding-3-small\");\n\t\tassertThat(embeddingResponse.getMetadata()).containsEntry(\"total-tokens\", 2);\n\t\tassertThat(embeddingResponse.getMetadata()).containsEntry(\"prompt-tokens\", 2);\n\n\t\t// assertThat(embeddingClient.dimensions()).isEqualTo(3072);",
                "is_abstract": "",
                "class_name": "EmbeddingIT",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/image/OpenAiImageClientIT.java",
        "class_names": [
            "OpenAiImageClientIT"
        ],
        "imports": "import org.springframework.ai.openai.metadata.OpenAiImageGenerationMetadata;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.ai.openai.OpenAiTestConfiguration;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.ai.openai.testutils.AbstractIT;\nimport org.springframework.ai.image.*;\nimport org.assertj.core.api.Assertions;",
        "package_import_paths": {
            "org.springframework.ai.openai.image.OpenAiImageClientIT": "org.springframework.ai.openai.image.OpenAiImageClientIT",
            "org.springframework.ai.openai.image.imageAsUrlTest": "org.springframework.ai.openai.image.imageAsUrlTest"
        },
        "package": "package org.springframework.ai.openai.image;",
        "property_declarations": [],
        "functions": [
            {
                "name": "imageAsUrlTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var options = ImageOptionsBuilder.builder().withHeight(1024).withWidth(1024).build();\n\n\t\tvar instructions = \"\"\"\n\t\t\t\tA light cream colored mini golden doodle with a sign that contains the message \"I'm on my way to BARCADE!\".\"\"\";\n\n\t\tImagePrompt imagePrompt = new ImagePrompt(instructions, options);\n\n\t\tImageResponse imageResponse = imageClient.call(imagePrompt);\n\n\t\tassertThat(imageResponse.getResults()).hasSize(1);\n\n\t\tImageResponseMetadata imageResponseMetadata = imageResponse.getMetadata();\n\t\tassertThat(imageResponseMetadata.created()).isPositive();\n\n\t\tvar generation = imageResponse.getResult();\n\t\tImage image = generation.getOutput();\n\t\tassertThat(image.getUrl()).isNotEmpty();\n\t\t// System.out.println(image.getUrl());\n\t\tassertThat(image.getB64Json()).isNull();\n\n\t\tvar imageGenerationMetadata = generation.getMetadata();\n\t\tAssertions.assertThat(imageGenerationMetadata).isInstanceOf(OpenAiImageGenerationMetadata.class);\n\n\t\tOpenAiImageGenerationMetadata openAiImageGenerationMetadata = (OpenAiImageGenerationMetadata) imageGenerationMetadata;\n\n\t\tassertThat(openAiImageGenerationMetadata).isNotNull();\n\t\tassertThat(openAiImageGenerationMetadata.getRevisedPrompt()).isNotBlank();",
                "is_abstract": "",
                "class_name": "OpenAiImageClientIT",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/image/OpenAiImageClientWithImageResponseMetadataTests.java",
        "class_names": [
            "Config",
            "OpenAiImageClientWithImageResponseMetadataTests"
        ],
        "imports": "import java.util.List;\nimport org.springframework.ai.image.ImageGeneration;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.ai.openai.metadata.support.OpenAiApiResponseHeaders;\nimport org.springframework.ai.image.ImageResponseMetadata;\nimport org.junit.jupiter.api.AfterEach;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.test.web.client.MockRestServiceServer;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.http.MediaType;\nimport org.springframework.ai.image.ImagePrompt;\nimport org.springframework.web.client.RestClient;\nimport org.springframework.boot.SpringBootConfiguration;\nimport org.springframework.boot.test.autoconfigure.web.client.RestClientTest;\nimport org.springframework.ai.image.ImageResponse;\nimport org.junit.jupiter.api.Test;\nimport static org.springframework.test.web.client.match.MockRestRequestMatchers.*;\nimport org.springframework.ai.openai.api.OpenAiImageApi;\nimport org.springframework.ai.openai.OpenAiImageClient;\nimport static org.springframework.test.web.client.response.MockRestResponseCreators.withSuccess;",
        "package_import_paths": {
            "org.springframework.ai.openai.image.OpenAiImageClientWithImageResponseMetadataTests": "org.springframework.ai.openai.image.OpenAiImageClientWithImageResponseMetadataTests",
            "org.springframework.ai.openai.image.Confi": "org.springframework.ai.openai.image.Confi",
            "org.springframework.ai.openai.image.resetMockServer": "org.springframework.ai.openai.image.resetMockServer",
            "org.springframework.ai.openai.image.aiResponseContainsImageResponseMetadat": "org.springframework.ai.openai.image.aiResponseContainsImageResponseMetadat",
            "org.springframework.ai.openai.image.prepareMo": "org.springframework.ai.openai.image.prepareMo",
            "org.springframework.ai.openai.image.getJson": "org.springframework.ai.openai.image.getJson",
            "org.springframework.ai.openai.image.imageGenerationApi": "org.springframework.ai.openai.image.imageGenerationApi",
            "org.springframework.ai.openai.image.openAiImageClient": "org.springframework.ai.openai.image.openAiImageClient",
            "org.springframework.ai.openai.image.TEST_API_KEY": "org.springframework.ai.openai.image.TEST_API_KEY",
            "org.springframework.ai.openai.image.privat": "org.springframework.ai.openai.image.privat"
        },
        "package": "package org.springframework.ai.openai.image;",
        "property_declarations": [
            "@Autowired\n\tprivate OpenAiImageClient openAiImageClient;",
            "private static String TEST_API_KEY = \"sk-1234567890\";",
            "@Autowired\n\tprivate MockRestServiceServer server;"
        ],
        "functions": [
            {
                "name": "resetMockServer",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "server.reset();",
                "is_abstract": "",
                "class_name": "OpenAiImageClientWithImageResponseMetadataTests",
                "annotations": []
            },
            {
                "name": "aiResponseContainsImageResponseMetadata",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "prepareMock();\n\n\t\tImagePrompt prompt = new ImagePrompt(\"Create an image of a mini golden doodle dog.\");\n\n\t\tImageResponse response = this.openAiImageClient.call(prompt);\n\n\t\tassertThat(response).isNotNull();\n\t\tList<ImageGeneration> imageGenerations = response.getResults();\n\t\tassertThat(imageGenerations).isNotNull();\n\t\tassertThat(imageGenerations).hasSize(2);\n\n\t\tImageResponseMetadata imageResponseMetadata = response.getMetadata();\n\n\t\tassertThat(imageResponseMetadata).isNotNull();\n\n\t\tLong created = imageResponseMetadata.created();\n\n\t\tassertThat(created).isNotNull();\n\t\tassertThat(created).isEqualTo(1589478378);\n\n\t\tImageResponseMetadata responseMetadata = response.getMetadata();\n\n\t\tassertThat(responseMetadata).isNotNull();",
                "is_abstract": "",
                "class_name": "OpenAiImageClientWithImageResponseMetadataTests",
                "annotations": []
            },
            {
                "name": "prepareMock",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "HttpHeaders httpHeaders = new HttpHeaders();\n\t\thttpHeaders.set(OpenAiApiResponseHeaders.REQUESTS_LIMIT_HEADER.getName(), \"4000\");\n\t\thttpHeaders.set(OpenAiApiResponseHeaders.REQUESTS_REMAINING_HEADER.getName(), \"999\");\n\t\thttpHeaders.set(OpenAiApiResponseHeaders.REQUESTS_RESET_HEADER.getName(), \"2d16h15m29s\");\n\t\thttpHeaders.set(OpenAiApiResponseHeaders.TOKENS_LIMIT_HEADER.getName(), \"725000\");\n\t\thttpHeaders.set(OpenAiApiResponseHeaders.TOKENS_REMAINING_HEADER.getName(), \"112358\");\n\t\thttpHeaders.set(OpenAiApiResponseHeaders.TOKENS_RESET_HEADER.getName(), \"27h55s451ms\");\n\n\t\tserver.expect(requestTo(\"v1/images/generations\"))\n\t\t\t.andExpect(method(HttpMethod.POST))\n\t\t\t.andExpect(header(HttpHeaders.AUTHORIZATION, \"Bearer \" + TEST_API_KEY))\n\t\t\t.andRespond(withSuccess(getJson(), MediaType.APPLICATION_JSON).headers(httpHeaders));",
                "is_abstract": "",
                "class_name": "OpenAiImageClientWithImageResponseMetadataTests",
                "annotations": []
            },
            {
                "name": "getJson",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return \"\"\"\n\t\t\t\t\t{\n\t\t\t\t\t  \"created\": 1589478378,\n\t\t\t\t\t  \"data\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t  \"url\": \"https://upload.wikimedia.org/wikipedia/commons/4/4e/Mini_Golden_Doodle.jpg\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t  \"url\": \"https://upload.wikimedia.org/wikipedia/commons/8/85/Goldendoodle_puppy_Marty.jpg\"\n\t\t\t\t\t\t}\n\t\t\t\t\t  ]\n\t\t\t\t\t}\n\t\t\t\t\"\"\";",
                "is_abstract": "",
                "class_name": "OpenAiImageClientWithImageResponseMetadataTests",
                "annotations": []
            },
            {
                "name": "imageGenerationApi",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new OpenAiImageApi(\"\", TEST_API_KEY, builder);",
                "is_abstract": "",
                "class_name": "OpenAiImageClientWithImageResponseMetadataTests Config",
                "annotations": []
            },
            {
                "name": "openAiImageClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new OpenAiImageClient(openAiImageApi);",
                "is_abstract": "",
                "class_name": "OpenAiImageClientWithImageResponseMetadataTests Config",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/audio/transcription/OpenAiTranscriptionClientWithTranscriptionResponseMetadataTests.java",
        "class_names": [
            "Config",
            "OpenAiTranscriptionClientWithTranscriptionResponseMetadataTests"
        ],
        "imports": "import org.springframework.ai.retry.RetryUtils;\nimport static org.springframework.test.web.client.match.MockRestRequestMatchers.method;\nimport org.springframework.ai.openai.metadata.audio.OpenAiAudioTranscriptionResponseMetadata;\nimport org.springframework.core.io.Resource;\nimport static org.springframework.test.web.client.match.MockRestRequestMatchers.requestTo;\nimport org.springframework.ai.openai.api.OpenAiAudioApi;\nimport org.springframework.ai.openai.metadata.audio.OpenAiAudioTranscriptionMetadata;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.ai.openai.metadata.support.OpenAiApiResponseHeaders;\nimport java.time.Duration;\nimport org.junit.jupiter.api.AfterEach;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.test.web.client.MockRestServiceServer;\nimport org.springframework.ai.openai.OpenAiAudioTranscriptionClient;\nimport static org.springframework.test.web.client.match.MockRestRequestMatchers.header;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.http.MediaType;\nimport org.springframework.web.client.RestClient;\nimport org.springframework.boot.SpringBootConfiguration;\nimport org.springframework.boot.test.autoconfigure.web.client.RestClientTest;\nimport org.springframework.core.io.ClassPathResource;\nimport org.springframework.ai.chat.metadata.RateLimit;\nimport org.junit.jupiter.api.Test;\nimport static org.springframework.test.web.client.response.MockRestResponseCreators.withSuccess;",
        "package_import_paths": {
            "org.springframework.ai.openai.audio.transcription.OpenAiTranscriptionClientWithTranscriptionResponseMetadataTests": "org.springframework.ai.openai.audio.transcription.OpenAiTranscriptionClientWithTranscriptionResponseMetadataTests",
            "org.springframework.ai.openai.audio.transcription.Confi": "org.springframework.ai.openai.audio.transcription.Confi",
            "org.springframework.ai.openai.audio.transcription.resetMockServer": "org.springframework.ai.openai.audio.transcription.resetMockServer",
            "org.springframework.ai.openai.audio.transcription.aiResponseContainsAiMetadat": "org.springframework.ai.openai.audio.transcription.aiResponseContainsAiMetadat",
            "org.springframework.ai.openai.audio.transcription.prepareMo": "org.springframework.ai.openai.audio.transcription.prepareMo",
            "org.springframework.ai.openai.audio.transcription.getJson": "org.springframework.ai.openai.audio.transcription.getJson",
            "org.springframework.ai.openai.audio.transcription.chatCompletionApi": "org.springframework.ai.openai.audio.transcription.chatCompletionApi",
            "org.springframework.ai.openai.audio.transcription.openAiClient": "org.springframework.ai.openai.audio.transcription.openAiClient",
            "org.springframework.ai.openai.audio.transcription.TEST_API_KEY": "org.springframework.ai.openai.audio.transcription.TEST_API_KEY",
            "org.springframework.ai.openai.audio.transcription.privat": "org.springframework.ai.openai.audio.transcription.privat"
        },
        "package": "package org.springframework.ai.openai.audio.transcription;",
        "property_declarations": [
            "private static String TEST_API_KEY = \"sk-1234567890\";",
            "@Autowired\n\tprivate MockRestServiceServer server;",
            "@Autowired\n\tprivate OpenAiAudioTranscriptionClient openAiTranscriptionClient;"
        ],
        "functions": [
            {
                "name": "resetMockServer",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "server.reset();",
                "is_abstract": "",
                "class_name": "OpenAiTranscriptionClientWithTranscriptionResponseMetadataTests",
                "annotations": []
            },
            {
                "name": "aiResponseContainsAiMetadata",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "prepareMock();\n\n\t\tResource audioFile = new ClassPathResource(\"speech/jfk.flac\");\n\n\t\tAudioTranscriptionPrompt transcriptionRequest = new AudioTranscriptionPrompt(audioFile);\n\n\t\tAudioTranscriptionResponse response = this.openAiTranscriptionClient.call(transcriptionRequest);\n\n\t\tassertThat(response).isNotNull();\n\n\t\tOpenAiAudioTranscriptionResponseMetadata transcriptionResponseMetadata = response.getMetadata();\n\n\t\tassertThat(transcriptionResponseMetadata).isNotNull();\n\n\t\tRateLimit rateLimit = transcriptionResponseMetadata.getRateLimit();\n\n\t\tDuration expectedRequestsReset = Duration.ofDays(2L)\n\t\t\t.plus(Duration.ofHours(16L))\n\t\t\t.plus(Duration.ofMinutes(15))\n\t\t\t.plus(Duration.ofSeconds(29L));\n\n\t\tDuration expectedTokensReset = Duration.ofHours(27L)\n\t\t\t.plus(Duration.ofSeconds(55L))\n\t\t\t.plus(Duration.ofMillis(451L));\n\n\t\tassertThat(rateLimit).isNotNull();\n\t\tassertThat(rateLimit.getRequestsLimit()).isEqualTo(4000L);\n\t\tassertThat(rateLimit.getRequestsRemaining()).isEqualTo(999);\n\t\tassertThat(rateLimit.getRequestsReset()).isEqualTo(expectedRequestsReset);\n\t\tassertThat(rateLimit.getTokensLimit()).isEqualTo(725_000L);\n\t\tassertThat(rateLimit.getTokensRemaining()).isEqualTo(112_358L);\n\t\tassertThat(rateLimit.getTokensReset()).isEqualTo(expectedTokensReset);\n\n\t\tresponse.getResults().forEach(transcript -> {\n\t\t\tOpenAiAudioTranscriptionMetadata transcriptionMetadata = transcript.getMetadata();\n\t\t\tassertThat(transcriptionMetadata).isNotNull();\n\t\t});",
                "is_abstract": "",
                "class_name": "OpenAiTranscriptionClientWithTranscriptionResponseMetadataTests",
                "annotations": []
            },
            {
                "name": "prepareMock",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "HttpHeaders httpHeaders = new HttpHeaders();\n\t\thttpHeaders.set(OpenAiApiResponseHeaders.REQUESTS_LIMIT_HEADER.getName(), \"4000\");\n\t\thttpHeaders.set(OpenAiApiResponseHeaders.REQUESTS_REMAINING_HEADER.getName(), \"999\");\n\t\thttpHeaders.set(OpenAiApiResponseHeaders.REQUESTS_RESET_HEADER.getName(), \"2d16h15m29s\");\n\t\thttpHeaders.set(OpenAiApiResponseHeaders.TOKENS_LIMIT_HEADER.getName(), \"725000\");\n\t\thttpHeaders.set(OpenAiApiResponseHeaders.TOKENS_REMAINING_HEADER.getName(), \"112358\");\n\t\thttpHeaders.set(OpenAiApiResponseHeaders.TOKENS_RESET_HEADER.getName(), \"27h55s451ms\");\n\n\t\tserver.expect(requestTo(\"/v1/audio/transcriptions\"))\n\t\t\t.andExpect(method(HttpMethod.POST))\n\t\t\t.andExpect(header(HttpHeaders.AUTHORIZATION, \"Bearer \" + TEST_API_KEY))\n\t\t\t.andRespond(withSuccess(getJson(), MediaType.APPLICATION_JSON).headers(httpHeaders));",
                "is_abstract": "",
                "class_name": "OpenAiTranscriptionClientWithTranscriptionResponseMetadataTests",
                "annotations": []
            },
            {
                "name": "getJson",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return \"\"\"\n\t\t\t\t\t{\n\t\t\t\t\t  \"id\": \"chatcmpl-123\",\n\t\t\t\t\t  \"object\": \"chat.completion\",\n\t\t\t\t\t  \"created\": 1677652288,\n\t\t\t\t\t  \"model\": \"gpt-3.5-turbo-0613\",\n\t\t\t\t\t  \"choices\": [{\n\t\t\t\t\t\t\"index\": 0,\n\t\t\t\t\t\t\"message\": {\n\t\t\t\t\t\t  \"role\": \"assistant\",\n\t\t\t\t\t\t  \"content\": \"I surrender!\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"finish_reason\": \"stop\"\n\t\t\t\t\t  }],\n\t\t\t\t\t  \"usage\": {\n\t\t\t\t\t\t\"prompt_tokens\": 9,\n\t\t\t\t\t\t\"completion_tokens\": 12,\n\t\t\t\t\t\t\"total_tokens\": 21\n\t\t\t\t\t  }\n\t\t\t\t\t}\n\t\t\t\t\"\"\";",
                "is_abstract": "",
                "class_name": "OpenAiTranscriptionClientWithTranscriptionResponseMetadataTests",
                "annotations": []
            },
            {
                "name": "chatCompletionApi",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new OpenAiAudioApi(\"\", TEST_API_KEY, builder, RetryUtils.DEFAULT_RESPONSE_ERROR_HANDLER);",
                "is_abstract": "",
                "class_name": "OpenAiTranscriptionClientWithTranscriptionResponseMetadataTests Config",
                "annotations": []
            },
            {
                "name": "openAiClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new OpenAiAudioTranscriptionClient(openAiAudioApi);",
                "is_abstract": "",
                "class_name": "OpenAiTranscriptionClientWithTranscriptionResponseMetadataTests Config",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/audio/transcription/OpenAiTranscriptionClientIT.java",
        "class_names": [
            "OpenAiTranscriptionClientIT"
        ],
        "imports": "import static org.assertj.core.api.Assertions.assertThat;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.ai.openai.OpenAiTestConfiguration;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.core.io.Resource;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.ai.openai.OpenAiAudioTranscriptionOptions;\nimport org.springframework.ai.openai.testutils.AbstractIT;\nimport org.springframework.ai.openai.api.OpenAiAudioApi.TranscriptResponseFormat;\nimport org.springframework.ai.openai.api.OpenAiAudioApi;",
        "package_import_paths": {
            "org.springframework.ai.openai.audio.transcription.OpenAiTranscriptionClientIT": "org.springframework.ai.openai.audio.transcription.OpenAiTranscriptionClientIT",
            "org.springframework.ai.openai.audio.transcription.transcriptionTest": "org.springframework.ai.openai.audio.transcription.transcriptionTest",
            "org.springframework.ai.openai.audio.transcription.transcriptionTestWithOptions": "org.springframework.ai.openai.audio.transcription.transcriptionTestWithOptions",
            "org.springframework.ai.openai.audio.transcription.audioFil": "org.springframework.ai.openai.audio.transcription.audioFil"
        },
        "package": "package org.springframework.ai.openai.audio.transcription;",
        "property_declarations": [
            "@Value(\"classpath:/speech/jfk.flac\")\n\tprivate Resource audioFile;"
        ],
        "functions": [
            {
                "name": "transcriptionTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "OpenAiAudioTranscriptionOptions transcriptionOptions = OpenAiAudioTranscriptionOptions.builder()\n\t\t\t.withResponseFormat(TranscriptResponseFormat.TEXT)\n\t\t\t.withTemperature(0f)\n\t\t\t.build();\n\t\tAudioTranscriptionPrompt transcriptionRequest = new AudioTranscriptionPrompt(audioFile, transcriptionOptions);\n\t\tAudioTranscriptionResponse response = transcriptionClient.call(transcriptionRequest);\n\t\tassertThat(response.getResults()).hasSize(1);\n\t\tassertThat(response.getResults().get(0).getOutput().toLowerCase().contains(\"fellow\")).isTrue();",
                "is_abstract": "",
                "class_name": "OpenAiTranscriptionClientIT",
                "annotations": []
            },
            {
                "name": "transcriptionTestWithOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "OpenAiAudioApi.TranscriptResponseFormat responseFormat = OpenAiAudioApi.TranscriptResponseFormat.VTT;\n\n\t\tOpenAiAudioTranscriptionOptions transcriptionOptions = OpenAiAudioTranscriptionOptions.builder()\n\t\t\t.withLanguage(\"en\")\n\t\t\t.withPrompt(\"Ask not this, but ask that\")\n\t\t\t.withTemperature(0f)\n\t\t\t.withResponseFormat(responseFormat)\n\t\t\t.build();\n\t\tAudioTranscriptionPrompt transcriptionRequest = new AudioTranscriptionPrompt(audioFile, transcriptionOptions);\n\t\tAudioTranscriptionResponse response = transcriptionClient.call(transcriptionRequest);\n\t\tassertThat(response.getResults()).hasSize(1);\n\t\tassertThat(response.getResults().get(0).getOutput().toLowerCase().contains(\"fellow\")).isTrue();",
                "is_abstract": "",
                "class_name": "OpenAiTranscriptionClientIT",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/audio/transcription/TranscriptionClientTests.java",
        "class_names": [
            "TranscriptionClientTests"
        ],
        "imports": "import static org.mockito.Mockito.doCallRealMethod;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.mockito.Mockito.doAnswer;\nimport static org.mockito.Mockito.times;\nimport static org.mockito.ArgumentMatchers.eq;\nimport org.springframework.ai.openai.OpenAiAudioTranscriptionClient;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\nimport org.springframework.core.io.Resource;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\nimport static org.mockito.ArgumentMatchers.isA;\nimport static org.mockito.Mockito.verifyNoMoreInteractions;",
        "package_import_paths": {
            "org.springframework.ai.openai.audio.transcription.TranscriptionClientTests": "org.springframework.ai.openai.audio.transcription.TranscriptionClientTests",
            "org.springframework.ai.openai.audio.transcription.transcrbeRequestReturnsResponseCorrectly": "org.springframework.ai.openai.audio.transcription.transcrbeRequestReturnsResponseCorrectly"
        },
        "package": "package org.springframework.ai.openai.audio.transcription;",
        "property_declarations": [],
        "functions": [
            {
                "name": "transcrbeRequestReturnsResponseCorrectly",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Resource mockAudioFile = Mockito.mock(Resource.class);\n\n\t\tOpenAiAudioTranscriptionClient mockClient = Mockito.mock(OpenAiAudioTranscriptionClient.class);\n\n\t\tString mockTranscription = \"All your bases are belong to us\";\n\n\t\t// Create a mock Transcript\n\t\tAudioTranscription transcript = Mockito.mock(AudioTranscription.class);\n\t\twhen(transcript.getOutput()).thenReturn(mockTranscription);\n\n\t\t// Create a mock TranscriptionResponse with the mock Transcript\n\t\tAudioTranscriptionResponse response = Mockito.mock(AudioTranscriptionResponse.class);\n\t\twhen(response.getResult()).thenReturn(transcript);\n\n\t\t// Transcript transcript = spy(new Transcript(responseMessage));\n\t\t// TranscriptionResponse response = spy(new\n\t\t// TranscriptionResponse(Collections.singletonList(transcript)));\n\n\t\tdoCallRealMethod().when(mockClient).call(any(Resource.class));\n\n\t\tdoAnswer(invocationOnMock -> {\n\n\t\t\tAudioTranscriptionPrompt transcriptionRequest = invocationOnMock.getArgument(0);\n\n\t\t\tassertThat(transcriptionRequest).isNotNull();\n\t\t\tassertThat(transcriptionRequest.getInstructions()).isEqualTo(mockAudioFile);\n\n\t\t\treturn response;\n\n\t\t}).when(mockClient).call(any(AudioTranscriptionPrompt.class));\n\n\t\tassertThat(mockClient.call(mockAudioFile)).isEqualTo(mockTranscription);\n\n\t\tverify(mockClient, times(1)).call(eq(mockAudioFile));\n\t\tverify(mockClient, times(1)).call(isA(AudioTranscriptionPrompt.class));\n\t\tverify(response, times(1)).getResult();\n\t\tverify(transcript, times(1)).getOutput();\n\t\tverifyNoMoreInteractions(mockClient, transcript, response);",
                "is_abstract": "",
                "class_name": "TranscriptionClientTests",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/audio/speech/OpenAiSpeechClientIT.java",
        "class_names": [
            "OpenAiSpeechClientIT"
        ],
        "imports": "import java.util.List;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport reactor.core.publisher.Flux;\nimport org.springframework.ai.openai.metadata.audio.OpenAiAudioSpeechResponseMetadata;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.ai.openai.OpenAiTestConfiguration;\nimport org.springframework.ai.openai.OpenAiAudioSpeechOptions;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.ai.openai.testutils.AbstractIT;\nimport org.springframework.ai.openai.api.OpenAiAudioApi;",
        "package_import_paths": {
            "org.springframework.ai.openai.audio.speech.OpenAiSpeechClientIT": "org.springframework.ai.openai.audio.speech.OpenAiSpeechClientIT",
            "org.springframework.ai.openai.audio.speech.shouldSuccessfullyStreamAudioBytesForEmptyMess": "org.springframework.ai.openai.audio.speech.shouldSuccessfullyStreamAudioBytesForEmptyMess",
            "org.springframework.ai.openai.audio.speech.shouldProduceAudioBytesDirectlyFromMess": "org.springframework.ai.openai.audio.speech.shouldProduceAudioBytesDirectlyFromMess",
            "org.springframework.ai.openai.audio.speech.shouldGenerateNonEmptyMp3AudioFromSpeechPrompt": "org.springframework.ai.openai.audio.speech.shouldGenerateNonEmptyMp3AudioFromSpeechPrompt",
            "org.springframework.ai.openai.audio.speech.speechRateLimitTest": "org.springframework.ai.openai.audio.speech.speechRateLimitTest",
            "org.springframework.ai.openai.audio.speech.shouldStreamNonEmptyResponsesForValidSpeechPrompts": "org.springframework.ai.openai.audio.speech.shouldStreamNonEmptyResponsesForValidSpeechPrompts",
            "org.springframework.ai.openai.audio.speech.SPEED": "org.springframework.ai.openai.audio.speech.SPEED"
        },
        "package": "package org.springframework.ai.openai.audio.speech;",
        "property_declarations": [
            "private static final Float SPEED = 1.0f;"
        ],
        "functions": [
            {
                "name": "shouldSuccessfullyStreamAudioBytesForEmptyMessage",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Flux<byte[]> response = speechClient.stream(\"Today is a wonderful day to build something people love!\");\n\t\tassertThat(response).isNotNull();\n\t\tassertThat(response.collectList().block()).isNotNull();\n\t\tSystem.out.println(response.collectList().block());",
                "is_abstract": "",
                "class_name": "OpenAiSpeechClientIT",
                "annotations": []
            },
            {
                "name": "shouldProduceAudioBytesDirectlyFromMessage",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "byte[] audioBytes = speechClient.call(\"Today is a wonderful day to build something people love!\");\n\t\tassertThat(audioBytes).hasSizeGreaterThan(0);",
                "is_abstract": "",
                "class_name": "OpenAiSpeechClientIT",
                "annotations": []
            },
            {
                "name": "shouldGenerateNonEmptyMp3AudioFromSpeechPrompt",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "OpenAiAudioSpeechOptions speechOptions = OpenAiAudioSpeechOptions.builder()\n\t\t\t.withVoice(OpenAiAudioApi.SpeechRequest.Voice.ALLOY)\n\t\t\t.withSpeed(SPEED)\n\t\t\t.withResponseFormat(OpenAiAudioApi.SpeechRequest.AudioResponseFormat.MP3)\n\t\t\t.withModel(OpenAiAudioApi.TtsModel.TTS_1.value)\n\t\t\t.build();\n\t\tSpeechPrompt speechPrompt = new SpeechPrompt(\"Today is a wonderful day to build something people love!\",\n\t\t\t\tspeechOptions);\n\t\tSpeechResponse response = speechClient.call(speechPrompt);\n\t\tbyte[] audioBytes = response.getResult().getOutput();\n\t\tassertThat(response.getResults()).hasSize(1);\n\t\tassertThat(response.getResults().get(0).getOutput()).isNotEmpty();\n\t\tassertThat(audioBytes).hasSizeGreaterThan(0);",
                "is_abstract": "",
                "class_name": "OpenAiSpeechClientIT",
                "annotations": []
            },
            {
                "name": "speechRateLimitTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "OpenAiAudioSpeechOptions speechOptions = OpenAiAudioSpeechOptions.builder()\n\t\t\t.withVoice(OpenAiAudioApi.SpeechRequest.Voice.ALLOY)\n\t\t\t.withSpeed(SPEED)\n\t\t\t.withResponseFormat(OpenAiAudioApi.SpeechRequest.AudioResponseFormat.MP3)\n\t\t\t.withModel(OpenAiAudioApi.TtsModel.TTS_1.value)\n\t\t\t.build();\n\t\tSpeechPrompt speechPrompt = new SpeechPrompt(\"Today is a wonderful day to build something people love!\",\n\t\t\t\tspeechOptions);\n\t\tSpeechResponse response = speechClient.call(speechPrompt);\n\t\tOpenAiAudioSpeechResponseMetadata metadata = response.getMetadata();\n\t\tassertThat(metadata).isNotNull();\n\t\tassertThat(metadata.getRateLimit()).isNotNull();\n\t\tassertThat(metadata.getRateLimit().getRequestsLimit()).isPositive();\n\t\tassertThat(metadata.getRateLimit().getRequestsLimit()).isPositive();",
                "is_abstract": "",
                "class_name": "OpenAiSpeechClientIT",
                "annotations": []
            },
            {
                "name": "shouldStreamNonEmptyResponsesForValidSpeechPrompts",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "OpenAiAudioSpeechOptions speechOptions = OpenAiAudioSpeechOptions.builder()\n\t\t\t.withVoice(OpenAiAudioApi.SpeechRequest.Voice.ALLOY)\n\t\t\t.withSpeed(SPEED)\n\t\t\t.withResponseFormat(OpenAiAudioApi.SpeechRequest.AudioResponseFormat.MP3)\n\t\t\t.withModel(OpenAiAudioApi.TtsModel.TTS_1.value)\n\t\t\t.build();\n\n\t\tSpeechPrompt speechPrompt = new SpeechPrompt(\"Today is a wonderful day to build something people love!\",\n\t\t\t\tspeechOptions);\n\t\tFlux<SpeechResponse> responseFlux = speechClient.stream(speechPrompt);\n\t\tassertThat(responseFlux).isNotNull();\n\t\tList<SpeechResponse> responses = responseFlux.collectList().block();\n\t\tassertThat(responses).isNotNull();\n\t\tresponses.forEach(response -> {\n\t\t\tSystem.out.println(\"Audio data chunk size: \" + response.getResult().getOutput().length);\n\t\t\tassertThat(response.getResult().getOutput()).isNotEmpty();\n\t\t});",
                "is_abstract": "",
                "class_name": "OpenAiSpeechClientIT",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/audio/speech/OpenAiSpeechClientWithSpeechResponseMetadataTests.java",
        "class_names": [
            "OpenAiSpeechClientWithSpeechResponseMetadataTests",
            "Config"
        ],
        "imports": "import org.springframework.ai.retry.RetryUtils;\nimport org.springframework.ai.openai.api.OpenAiAudioApi;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.ai.openai.OpenAiAudioSpeechOptions;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.ai.openai.metadata.support.OpenAiApiResponseHeaders;\nimport java.time.Duration;\nimport org.junit.jupiter.api.AfterEach;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.test.web.client.MockRestServiceServer;\nimport org.springframework.ai.openai.metadata.audio.OpenAiAudioSpeechResponseMetadata;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.http.MediaType;\nimport org.springframework.web.client.RestClient;\nimport org.springframework.boot.SpringBootConfiguration;\nimport org.springframework.boot.test.autoconfigure.web.client.RestClientTest;\nimport org.springframework.ai.openai.OpenAiAudioSpeechClient;\nimport org.junit.jupiter.api.Test;\nimport static org.springframework.test.web.client.match.MockRestRequestMatchers.*;\nimport static org.springframework.test.web.client.response.MockRestResponseCreators.withSuccess;",
        "package_import_paths": {
            "org.springframework.ai.openai.audio.speech.OpenAiSpeechClientWithSpeechResponseMetadataTests": "org.springframework.ai.openai.audio.speech.OpenAiSpeechClientWithSpeechResponseMetadataTests",
            "org.springframework.ai.openai.audio.speech.Confi": "org.springframework.ai.openai.audio.speech.Confi",
            "org.springframework.ai.openai.audio.speech.resetMockServer": "org.springframework.ai.openai.audio.speech.resetMockServer",
            "org.springframework.ai.openai.audio.speech.aiResponseContainsImageResponseMetadat": "org.springframework.ai.openai.audio.speech.aiResponseContainsImageResponseMetadat",
            "org.springframework.ai.openai.audio.speech.prepareMo": "org.springframework.ai.openai.audio.speech.prepareMo",
            "org.springframework.ai.openai.audio.speech.openAiAudioSpeechClient": "org.springframework.ai.openai.audio.speech.openAiAudioSpeechClient",
            "org.springframework.ai.openai.audio.speech.openAiAudioApi": "org.springframework.ai.openai.audio.speech.openAiAudioApi",
            "org.springframework.ai.openai.audio.speech.TEST_API_KEY": "org.springframework.ai.openai.audio.speech.TEST_API_KEY",
            "org.springframework.ai.openai.audio.speech.SPEED": "org.springframework.ai.openai.audio.speech.SPEED",
            "org.springframework.ai.openai.audio.speech.privat": "org.springframework.ai.openai.audio.speech.privat"
        },
        "package": "package org.springframework.ai.openai.audio.speech;",
        "property_declarations": [
            "@Autowired\n\tprivate OpenAiAudioSpeechClient openAiSpeechClient;",
            "private static String TEST_API_KEY = \"sk-1234567890\";",
            "@Autowired\n\tprivate MockRestServiceServer server;",
            "private static final Float SPEED = 1.0f;"
        ],
        "functions": [
            {
                "name": "resetMockServer",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "server.reset();",
                "is_abstract": "",
                "class_name": "OpenAiSpeechClientWithSpeechResponseMetadataTests",
                "annotations": []
            },
            {
                "name": "aiResponseContainsImageResponseMetadata",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "prepareMock();\n\n\t\tOpenAiAudioSpeechOptions speechOptions = OpenAiAudioSpeechOptions.builder()\n\t\t\t.withVoice(OpenAiAudioApi.SpeechRequest.Voice.ALLOY)\n\t\t\t.withSpeed(SPEED)\n\t\t\t.withResponseFormat(OpenAiAudioApi.SpeechRequest.AudioResponseFormat.MP3)\n\t\t\t.withModel(OpenAiAudioApi.TtsModel.TTS_1.value)\n\t\t\t.build();\n\n\t\tSpeechPrompt speechPrompt = new SpeechPrompt(\"Today is a wonderful day to build something people love!\",\n\t\t\t\tspeechOptions);\n\t\tSpeechResponse response = openAiSpeechClient.call(speechPrompt);\n\n\t\tbyte[] audioBytes = response.getResult().getOutput();\n\t\tassertThat(audioBytes).hasSizeGreaterThan(0);\n\n\t\tOpenAiAudioSpeechResponseMetadata speechResponseMetadata = response.getMetadata();\n\t\tassertThat(speechResponseMetadata).isNotNull();\n\t\tvar requestLimit = speechResponseMetadata.getRateLimit();\n\t\tLong requestsLimit = requestLimit.getRequestsLimit();\n\t\tLong tokensLimit = requestLimit.getTokensLimit();\n\t\tLong tokensRemaining = requestLimit.getTokensRemaining();\n\t\tLong requestsRemaining = requestLimit.getRequestsRemaining();\n\t\tDuration requestsReset = requestLimit.getRequestsReset();\n\t\tassertThat(requestsLimit).isNotNull();\n\t\tassertThat(requestsLimit).isEqualTo(4000L);\n\t\tassertThat(tokensLimit).isEqualTo(725000L);\n\t\tassertThat(tokensRemaining).isEqualTo(112358L);\n\t\tassertThat(requestsRemaining).isEqualTo(999L);\n\t\tassertThat(requestsReset).isEqualTo(Duration.parse(\"PT64H15M29S\"));",
                "is_abstract": "",
                "class_name": "OpenAiSpeechClientWithSpeechResponseMetadataTests",
                "annotations": []
            },
            {
                "name": "prepareMock",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "HttpHeaders httpHeaders = new HttpHeaders();\n\t\thttpHeaders.set(OpenAiApiResponseHeaders.REQUESTS_LIMIT_HEADER.getName(), \"4000\");\n\t\thttpHeaders.set(OpenAiApiResponseHeaders.REQUESTS_REMAINING_HEADER.getName(), \"999\");\n\t\thttpHeaders.set(OpenAiApiResponseHeaders.REQUESTS_RESET_HEADER.getName(), \"2d16h15m29s\");\n\t\thttpHeaders.set(OpenAiApiResponseHeaders.TOKENS_LIMIT_HEADER.getName(), \"725000\");\n\t\thttpHeaders.set(OpenAiApiResponseHeaders.TOKENS_REMAINING_HEADER.getName(), \"112358\");\n\t\thttpHeaders.set(OpenAiApiResponseHeaders.TOKENS_RESET_HEADER.getName(), \"27h55s451ms\");\n\t\thttpHeaders.setContentType(MediaType.APPLICATION_OCTET_STREAM);\n\n\t\tserver.expect(requestTo(\"/v1/audio/speech\"))\n\t\t\t.andExpect(method(HttpMethod.POST))\n\t\t\t.andExpect(header(HttpHeaders.AUTHORIZATION, \"Bearer \" + TEST_API_KEY))\n\t\t\t.andRespond(withSuccess(\"Audio bytes as string\", MediaType.APPLICATION_OCTET_STREAM).headers(httpHeaders));",
                "is_abstract": "",
                "class_name": "OpenAiSpeechClientWithSpeechResponseMetadataTests",
                "annotations": []
            },
            {
                "name": "openAiAudioSpeechClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new OpenAiAudioSpeechClient(openAiAudioApi);",
                "is_abstract": "",
                "class_name": "OpenAiSpeechClientWithSpeechResponseMetadataTests Config",
                "annotations": []
            },
            {
                "name": "openAiAudioApi",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new OpenAiAudioApi(\"\", TEST_API_KEY, builder, RetryUtils.DEFAULT_RESPONSE_ERROR_HANDLER);",
                "is_abstract": "",
                "class_name": "OpenAiSpeechClientWithSpeechResponseMetadataTests Config",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/audio/api/OpenAiAudioApiIT.java",
        "class_names": [
            "OpenAiAudioApiIT"
        ],
        "imports": "import org.springframework.ai.openai.api.OpenAiAudioApi.SpeechRequest.Voice;\nimport java.io.File;\nimport org.springframework.ai.openai.api.OpenAiAudioApi.StructuredResponse;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.springframework.ai.openai.api.OpenAiAudioApi.SpeechRequest;\nimport org.springframework.ai.openai.api.OpenAiAudioApi.TranscriptionRequest;\nimport org.springframework.ai.openai.api.OpenAiAudioApi.WhisperModel;\nimport org.springframework.util.FileCopyUtils;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.ai.openai.api.OpenAiAudioApi.TranslationRequest;\nimport org.springframework.ai.openai.api.OpenAiAudioApi.TtsModel;\nimport org.springframework.ai.openai.api.OpenAiAudioApi;\nimport java.io.IOException;",
        "package_import_paths": {
            "org.springframework.ai.openai.audio.api.OpenAiAudioApiIT": "org.springframework.ai.openai.audio.api.OpenAiAudioApiIT",
            "org.springframework.ai.openai.audio.api.SuppressWarnings": "org.springframework.ai.openai.audio.api.SuppressWarnings",
            "org.springframework.ai.openai.audio.api.audioApi": "org.springframework.ai.openai.audio.api.audioApi"
        },
        "package": "package org.springframework.ai.openai.audio.api;",
        "property_declarations": [
            "OpenAiAudioApi audioApi = new OpenAiAudioApi(System.getenv(\"OPENAI_API_KEY\"));"
        ],
        "functions": [
            {
                "name": "SuppressWarnings",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "byte[] speech = audioApi\n\t\t\t.createSpeech(SpeechRequest.builder()\n\t\t\t\t.withModel(TtsModel.TTS_1_HD.getValue())\n\t\t\t\t.withInput(\"Hello, my name is Chris and I love Spring A.I.\")\n\t\t\t\t.withVoice(Voice.ONYX)\n\t\t\t\t.build())\n\t\t\t.getBody();\n\n\t\tassertThat(speech).isNotEmpty();\n\n\t\tFileCopyUtils.copy(speech, new File(\"target/speech.mp3\"));\n\n\t\tStructuredResponse translation = audioApi\n\t\t\t.createTranslation(\n\t\t\t\t\tTranslationRequest.builder().withModel(WhisperModel.WHISPER_1.getValue()).withFile(speech).build(),\n\t\t\t\t\tStructuredResponse.class)\n\t\t\t.getBody();\n\n\t\tassertThat(translation.text().replaceAll(\",\", \"\")).isEqualTo(\"Hello my name is Chris and I love Spring AI.\");\n\n\t\tStructuredResponse transcriptionEnglish = audioApi.createTranscription(\n\t\t\t\tTranscriptionRequest.builder().withModel(WhisperModel.WHISPER_1.getValue()).withFile(speech).build(),\n\t\t\t\tStructuredResponse.class)\n\t\t\t.getBody();\n\n\t\tassertThat(transcriptionEnglish.text().replaceAll(\",\", \"\"))\n\t\t\t.isEqualTo(\"Hello my name is Chris and I love Spring AI.\");\n\n\t\tStructuredResponse transcriptionDutch = audioApi\n\t\t\t.createTranscription(TranscriptionRequest.builder().withFile(speech).withLanguage(\"nl\").build(),\n\t\t\t\t\tStructuredResponse.class)\n\t\t\t.getBody();\n\n\t\tassertThat(transcriptionDutch.text()).isEqualTo(\"Hallo, mijn naam is Chris en ik hou van Spring AI.\");",
                "is_abstract": "",
                "class_name": "OpenAiAudioApiIT",
                "annotations": [
                    "@SuppressWarnings(\"null\")"
                ]
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/api/RestClientBuilderTests.java",
        "class_names": [
            "RestClientBuilderTests"
        ],
        "imports": "import static org.assertj.core.api.Assertions.assertThat;\nimport org.springframework.web.util.DefaultUriBuilderFactory;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.web.client.RestClient.Builder;\nimport org.springframework.http.client.SimpleClientHttpRequestFactory;\nimport org.springframework.web.client.RestClient;\nimport org.springframework.web.client.RestTemplate;",
        "package_import_paths": {
            "org.springframework.ai.openai.api.RestClientBuilderTests": "org.springframework.ai.openai.api.RestClientBuilderTests",
            "org.springframework.ai.openai.api.test1": "org.springframework.ai.openai.api.test1",
            "org.springframework.ai.openai.api.test2": "org.springframework.ai.openai.api.test2",
            "org.springframework.ai.openai.api.test3": "org.springframework.ai.openai.api.test3",
            "org.springframework.ai.openai.api.test4": "org.springframework.ai.openai.api.test4",
            "org.springframework.ai.openai.api.test": "org.springframework.ai.openai.api.test",
            "org.springframework.ai.openai.api.BASE_URL": "org.springframework.ai.openai.api.BASE_URL"
        },
        "package": "package org.springframework.ai.openai.api;",
        "property_declarations": [
            "public static final String BASE_URL = \"https://dog.ceo\";"
        ],
        "functions": [
            {
                "name": "test1",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "test(RestClient.builder(), BASE_URL);",
                "is_abstract": "",
                "class_name": "RestClientBuilderTests",
                "annotations": []
            },
            {
                "name": "test2",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "RestTemplate restTemplate = new RestTemplate();\n\t\ttest(RestClient.builder(restTemplate), BASE_URL);",
                "is_abstract": "",
                "class_name": "RestClientBuilderTests",
                "annotations": []
            },
            {
                "name": "test3",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "RestTemplate restTemplate = new RestTemplate();\n\t\trestTemplate.setUriTemplateHandler(new DefaultUriBuilderFactory(BASE_URL));\n\t\ttest(RestClient.builder(restTemplate), BASE_URL);",
                "is_abstract": "",
                "class_name": "RestClientBuilderTests",
                "annotations": []
            },
            {
                "name": "test4",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var clientHttpRequestFactory = new SimpleClientHttpRequestFactory();\n\t\tclientHttpRequestFactory.setConnectTimeout(5000);\n\t\t// clientHttpRequestFactory.setProxy(new Proxy(Type.HTTP,\n\t\t// InetSocketAddress.createUnresolved(\"localhost\", 80)));\n\t\tRestClient.Builder builder = RestClient.builder().requestFactory(clientHttpRequestFactory);\n\t\ttest(builder, BASE_URL);",
                "is_abstract": "",
                "class_name": "RestClientBuilderTests",
                "annotations": []
            },
            {
                "name": "test",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var restClient = restClientBuilder.baseUrl(baseUrl).build();\n\t\tString res = restClient.get().uri(\"/api/breeds/list/all\").retrieve().body(String.class);\n\n\t\tassertThat(res).isNotNull();",
                "is_abstract": "",
                "class_name": "RestClientBuilderTests",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/api/OpenAiApiIT.java",
        "class_names": [
            "OpenAiApiIT"
        ],
        "imports": "import org.springframework.ai.openai.api.OpenAiApi.Embedding;\nimport org.springframework.ai.openai.api.OpenAiApi.ChatCompletionMessage.Role;\nimport java.util.List;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport reactor.core.publisher.Flux;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.ai.openai.api.OpenAiApi.ChatCompletionMessage;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.openai.api.OpenAiApi.EmbeddingList;\nimport org.springframework.ai.openai.api.OpenAiApi.ChatCompletion;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.ai.openai.api.OpenAiApi.ChatCompletionRequest;\nimport org.springframework.ai.openai.api.OpenAiApi.ChatCompletionChunk;",
        "package_import_paths": {
            "org.springframework.ai.openai.api.OpenAiApiIT": "org.springframework.ai.openai.api.OpenAiApiIT",
            "org.springframework.ai.openai.api.chatCompletionEntity": "org.springframework.ai.openai.api.chatCompletionEntity",
            "org.springframework.ai.openai.api.chatCompletionStream": "org.springframework.ai.openai.api.chatCompletionStream",
            "org.springframework.ai.openai.api.embeddings": "org.springframework.ai.openai.api.embeddings",
            "org.springframework.ai.openai.api.openAiApi": "org.springframework.ai.openai.api.openAiApi"
        },
        "package": "package org.springframework.ai.openai.api;",
        "property_declarations": [
            "OpenAiApi openAiApi = new OpenAiApi(System.getenv(\"OPENAI_API_KEY\"));"
        ],
        "functions": [
            {
                "name": "chatCompletionEntity",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "ChatCompletionMessage chatCompletionMessage = new ChatCompletionMessage(\"Hello world\", Role.USER);\n\t\tResponseEntity<ChatCompletion> response = openAiApi.chatCompletionEntity(\n\t\t\t\tnew ChatCompletionRequest(List.of(chatCompletionMessage), \"gpt-3.5-turbo\", 0.8f, false));\n\n\t\tassertThat(response).isNotNull();\n\t\tassertThat(response.getBody()).isNotNull();",
                "is_abstract": "",
                "class_name": "OpenAiApiIT",
                "annotations": []
            },
            {
                "name": "chatCompletionStream",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "ChatCompletionMessage chatCompletionMessage = new ChatCompletionMessage(\"Hello world\", Role.USER);\n\t\tFlux<ChatCompletionChunk> response = openAiApi.chatCompletionStream(\n\t\t\t\tnew ChatCompletionRequest(List.of(chatCompletionMessage), \"gpt-3.5-turbo\", 0.8f, true));\n\n\t\tassertThat(response).isNotNull();\n\t\tassertThat(response.collectList().block()).isNotNull();",
                "is_abstract": "",
                "class_name": "OpenAiApiIT",
                "annotations": []
            },
            {
                "name": "embeddings",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "ResponseEntity<EmbeddingList<Embedding>> response = openAiApi\n\t\t\t.embeddings(new OpenAiApi.EmbeddingRequest<String>(\"Hello world\"));\n\n\t\tassertThat(response).isNotNull();\n\t\tassertThat(response.getBody().data()).hasSize(1);\n\t\tassertThat(response.getBody().data().get(0).embedding()).hasSize(1536);",
                "is_abstract": "",
                "class_name": "OpenAiApiIT",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/api/tool/MockWeatherService.java",
        "class_names": [
            "MockWeatherService"
        ],
        "imports": "import com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport com.fasterxml.jackson.annotation.JsonPropertyDescription;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport java.util.function.Function;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport com.fasterxml.jackson.annotation.JsonClassDescription;",
        "package_import_paths": {
            "org.springframework.ai.openai.api.tool.MockWeatherServi": "org.springframework.ai.openai.api.tool.MockWeatherServi",
            "org.springframework.ai.openai.api.tool.apply": "org.springframework.ai.openai.api.tool.apply",
            "org.springframework.ai.openai.api.tool.unitNam": "org.springframework.ai.openai.api.tool.unitNam"
        },
        "package": "package org.springframework.ai.openai.api.tool;",
        "property_declarations": [
            "public final String unitName;"
        ],
        "functions": [
            {
                "name": "apply",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "double temperature = 0;\n\t\tif (request.location().contains(\"Paris\")) {\n\t\t\ttemperature = 15;\n\t\t}\n\t\telse if (request.location().contains(\"Tokyo\")) {\n\t\t\ttemperature = 10;\n\t\t}\n\t\telse if (request.location().contains(\"San Francisco\")) {\n\t\t\ttemperature = 30;\n\t\t}\n\n\t\treturn new Response(temperature, 15, 20, 2, 53, 45, Unit.C);",
                "is_abstract": "",
                "class_name": "MockWeatherService",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/api/tool/OpenAiApiToolFunctionCallIT.java",
        "class_names": [
            "OpenAiApiToolFunctionCallIT"
        ],
        "imports": "import java.util.List;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.ai.openai.api.OpenAiApi.ChatCompletionRequest;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.slf4j.Logger;\nimport org.springframework.ai.openai.api.OpenAiApi.FunctionTool.Type;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport org.springframework.ai.openai.api.OpenAiApi;\nimport org.springframework.ai.openai.api.OpenAiApi.ChatCompletionRequest.ToolChoiceBuilder;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.ai.openai.api.OpenAiApi.ChatCompletionMessage;\nimport org.springframework.ai.model.ModelOptionsUtils;\nimport org.springframework.ai.openai.api.OpenAiApi.ChatCompletion;\nimport java.util.ArrayList;\nimport org.springframework.ai.openai.api.OpenAiApi.ChatCompletionMessage.Role;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.springframework.http.ResponseEntity;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.openai.api.OpenAiApi.ChatCompletionMessage.ToolCall;",
        "package_import_paths": {
            "org.springframework.ai.openai.api.tool.OpenAiApiToolFunctionCallIT": "org.springframework.ai.openai.api.tool.OpenAiApiToolFunctionCallIT",
            "org.springframework.ai.openai.api.tool.SuppressWarnings": "org.springframework.ai.openai.api.tool.SuppressWarnings",
            "org.springframework.ai.openai.api.tool.fromJson": "org.springframework.ai.openai.api.tool.fromJson",
            "org.springframework.ai.openai.api.tool.logger": "org.springframework.ai.openai.api.tool.logger",
            "org.springframework.ai.openai.api.tool.weatherServi": "org.springframework.ai.openai.api.tool.weatherServi",
            "org.springframework.ai.openai.api.tool.completionApi": "org.springframework.ai.openai.api.tool.completionApi"
        },
        "package": "package org.springframework.ai.openai.api.tool;",
        "property_declarations": [
            "private final Logger logger = LoggerFactory.getLogger(OpenAiApiToolFunctionCallIT.class);",
            "OpenAiApi completionApi = new OpenAiApi(System.getenv(\"OPENAI_API_KEY\"));",
            "MockWeatherService weatherService = new MockWeatherService();"
        ],
        "functions": [
            {
                "name": "SuppressWarnings",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// Step 1: send the conversation and available functions to the model\n\t\tvar message = new ChatCompletionMessage(\"What's the weather like in San Francisco, Tokyo, and Paris?\",\n\t\t\t\tRole.USER);\n\n\t\tvar functionTool = new OpenAiApi.FunctionTool(Type.FUNCTION,\n\t\t\t\tnew OpenAiApi.FunctionTool.Function(\n\t\t\t\t\t\t\"Get the weather in location. Return temperature in 30\u00b0F or 30\u00b0C format.\", \"getCurrentWeather\",\n\t\t\t\t\t\tModelOptionsUtils.jsonToMap(\"\"\"\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\t\t\t\t\"properties\": {\n\t\t\t\t\t\t\t\t\t\t\"location\": {\n\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\t\t\t\t\t\"description\": \"The city and state e.g. San Francisco, CA\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\"lat\": {\n\t\t\t\t\t\t\t\t\t\t\t\"type\": \"number\",\n\t\t\t\t\t\t\t\t\t\t\t\"description\": \"The city latitude\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\"lon\": {\n\t\t\t\t\t\t\t\t\t\t\t\"type\": \"number\",\n\t\t\t\t\t\t\t\t\t\t\t\"description\": \"The city longitude\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\"unit\": {\n\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\t\t\t\t\t\"enum\": [\"C\", \"F\"]\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\"required\": [\"location\", \"lat\", \"lon\", \"unit\"]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\"\"\")));\n\n\t\tList<ChatCompletionMessage> messages = new ArrayList<>(List.of(message));\n\n\t\tChatCompletionRequest chatCompletionRequest = new ChatCompletionRequest(messages, \"gpt-4-turbo-preview\",\n\t\t\t\tList.of(functionTool), ToolChoiceBuilder.AUTO);\n\t\t// List.of(functionTool), ToolChoiceBuilder.FUNCTION(\"getCurrentWeather\"));\n\n\t\tResponseEntity<ChatCompletion> chatCompletion = completionApi.chatCompletionEntity(chatCompletionRequest);\n\n\t\tassertThat(chatCompletion.getBody()).isNotNull();\n\t\tassertThat(chatCompletion.getBody().choices()).isNotEmpty();\n\n\t\tChatCompletionMessage responseMessage = chatCompletion.getBody().choices().get(0).message();\n\n\t\tassertThat(responseMessage.role()).isEqualTo(Role.ASSISTANT);\n\t\tassertThat(responseMessage.toolCalls()).isNotNull();\n\n\t\t// Check if the model wanted to call a function\n\t\tif (responseMessage.toolCalls() != null) {\n\n\t\t\t// extend conversation with assistant's reply.\n\t\t\tmessages.add(responseMessage);\n\n\t\t\t// Send the info for each function call and function response to the model.\n\t\t\tfor (ToolCall toolCall : responseMessage.toolCalls()) {\n\t\t\t\tvar functionName = toolCall.function().name();\n\t\t\t\tif (\"getCurrentWeather\".equals(functionName)) {\n\t\t\t\t\tMockWeatherService.Request weatherRequest = fromJson(toolCall.function().arguments(),\n\t\t\t\t\t\t\tMockWeatherService.Request.class);\n\n\t\t\t\t\tMockWeatherService.Response weatherResponse = weatherService.apply(weatherRequest);\n\n\t\t\t\t\t// extend conversation with function response.\n\t\t\t\t\tmessages.add(new ChatCompletionMessage(\"\" + weatherResponse.temp() + weatherRequest.unit(),\n\t\t\t\t\t\t\tRole.TOOL, functionName, toolCall.id(), null));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar functionResponseRequest = new ChatCompletionRequest(messages, \"gpt-4-turbo-preview\", 0.8f);\n\n\t\t\tResponseEntity<ChatCompletion> chatCompletion2 = completionApi\n\t\t\t\t.chatCompletionEntity(functionResponseRequest);\n\n\t\t\tlogger.info(\"Final response: \" + chatCompletion2.getBody());\n\n\t\t\tassertThat(chatCompletion2.getBody().choices()).isNotEmpty();\n\n\t\t\tassertThat(chatCompletion2.getBody().choices().get(0).message().role()).isEqualTo(Role.ASSISTANT);\n\t\t\tassertThat(chatCompletion2.getBody().choices().get(0).message().content()).contains(\"San Francisco\")\n\t\t\t\t.containsAnyOf(\"30.0\u00b0C\", \"30\u00b0C\");\n\t\t\tassertThat(chatCompletion2.getBody().choices().get(0).message().content()).contains(\"Tokyo\")\n\t\t\t\t.containsAnyOf(\"10.0\u00b0C\", \"10\u00b0C\");\n\t\t\t;\n\t\t\tassertThat(chatCompletion2.getBody().choices().get(0).message().content()).contains(\"Paris\")\n\t\t\t\t.containsAnyOf(\"15.0\u00b0C\", \"15\u00b0C\");\n\t\t\t;\n\t\t}",
                "is_abstract": "",
                "class_name": "OpenAiApiToolFunctionCallIT",
                "annotations": [
                    "@SuppressWarnings(\"null\")"
                ]
            },
            {
                "name": "fromJson",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "try {\n\t\t\treturn new ObjectMapper().readValue(json, targetClass);\n\t\t}\n\t\tcatch (JsonProcessingException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}",
                "is_abstract": "",
                "class_name": "OpenAiApiToolFunctionCallIT",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/metadata/support/OpenAiResponseHeaderExtractorTests.java",
        "class_names": [
            "OpenAiResponseHeaderExtractorTests"
        ],
        "imports": "import java.time.Duration;\nimport org.junit.jupiter.api.Test;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.springframework.ai.openai.metadata.support.OpenAiResponseHeaderExtractor.DurationFormatter;",
        "package_import_paths": {
            "org.springframework.ai.openai.metadata.support.OpenAiResponseHeaderExtractorTests": "org.springframework.ai.openai.metadata.support.OpenAiResponseHeaderExtractorTests",
            "org.springframework.ai.openai.metadata.support.parseTimeAsDurationWithDaysHoursMinutesSeconds": "org.springframework.ai.openai.metadata.support.parseTimeAsDurationWithDaysHoursMinutesSeconds",
            "org.springframework.ai.openai.metadata.support.parseTimeAsDurationWithMinutesSecondsMicrosecondsAndMicroseconds": "org.springframework.ai.openai.metadata.support.parseTimeAsDurationWithMinutesSecondsMicrosecondsAndMicroseconds",
            "org.springframework.ai.openai.metadata.support.parseTimeAsDurationWithDaysMinutesAndMilliseconds": "org.springframework.ai.openai.metadata.support.parseTimeAsDurationWithDaysMinutesAndMilliseconds"
        },
        "package": "package org.springframework.ai.openai.metadata.support;",
        "property_declarations": [],
        "functions": [
            {
                "name": "parseTimeAsDurationWithDaysHoursMinutesSeconds",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Duration actual = DurationFormatter.TIME_UNIT.parse(\"6d18h22m45s\");\n\t\tDuration expected = Duration.ofDays(6L)\n\t\t\t.plus(Duration.ofHours(18L))\n\t\t\t.plus(Duration.ofMinutes(22))\n\t\t\t.plus(Duration.ofSeconds(45L));\n\n\t\tassertThat(actual).isEqualTo(expected);",
                "is_abstract": "",
                "class_name": "OpenAiResponseHeaderExtractorTests",
                "annotations": []
            },
            {
                "name": "parseTimeAsDurationWithMinutesSecondsMicrosecondsAndMicroseconds",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Duration actual = DurationFormatter.TIME_UNIT.parse(\"42m18s451ms21541ns\");\n\t\tDuration expected = Duration.ofMinutes(42L)\n\t\t\t.plus(Duration.ofSeconds(18L))\n\t\t\t.plus(Duration.ofMillis(451))\n\t\t\t.plus(Duration.ofNanos(21541L));\n\n\t\tassertThat(actual).isEqualTo(expected);",
                "is_abstract": "",
                "class_name": "OpenAiResponseHeaderExtractorTests",
                "annotations": []
            },
            {
                "name": "parseTimeAsDurationWithDaysMinutesAndMilliseconds",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Duration actual = DurationFormatter.TIME_UNIT.parse(\"2d15m981ms\");\n\t\tDuration expected = Duration.ofDays(2L).plus(Duration.ofMinutes(15L)).plus(Duration.ofMillis(981L));\n\n\t\tassertThat(actual).isEqualTo(expected);",
                "is_abstract": "",
                "class_name": "OpenAiResponseHeaderExtractorTests",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/testutils/AbstractIT.java",
        "class_names": [
            "AbstractIT"
        ],
        "imports": "import java.util.List;\nimport org.springframework.ai.chat.ChatClient;\nimport org.springframework.ai.chat.messages.SystemMessage;\nimport org.springframework.core.io.Resource;\nimport org.springframework.ai.chat.messages.Message;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.slf4j.Logger;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport java.util.Map;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.ai.chat.ChatResponse;\nimport org.springframework.ai.image.ImageClient;\nimport static org.assertj.core.api.Assertions.fail;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.ai.openai.OpenAiAudioTranscriptionClient;\nimport org.springframework.ai.chat.prompt.PromptTemplate;\nimport org.springframework.ai.chat.prompt.Prompt;\nimport org.springframework.ai.openai.OpenAiAudioSpeechClient;\nimport org.springframework.ai.chat.StreamingChatClient;",
        "package_import_paths": {
            "org.springframework.ai.openai.testutils.AbstractIT": "org.springframework.ai.openai.testutils.AbstractIT",
            "org.springframework.ai.openai.testutils.evaluateQuestionAndAnswer": "org.springframework.ai.openai.testutils.evaluateQuestionAndAnswer",
            "org.springframework.ai.openai.testutils.logger": "org.springframework.ai.openai.testutils.logger",
            "org.springframework.ai.openai.testutils.protected": "org.springframework.ai.openai.testutils.protected",
            "org.springframework.ai.openai.testutils.qaEvaluatorAccurateAnswerResour": "org.springframework.ai.openai.testutils.qaEvaluatorAccurateAnswerResour",
            "org.springframework.ai.openai.testutils.qaEvaluatorNotRelatedResour": "org.springframework.ai.openai.testutils.qaEvaluatorNotRelatedResour",
            "org.springframework.ai.openai.testutils.qaEvaluatorFactBasedAnswerResour": "org.springframework.ai.openai.testutils.qaEvaluatorFactBasedAnswerResour",
            "org.springframework.ai.openai.testutils.userEvaluatorResour": "org.springframework.ai.openai.testutils.userEvaluatorResour"
        },
        "package": "package org.springframework.ai.openai.testutils;",
        "property_declarations": [
            "@Autowired\n\tprotected OpenAiAudioSpeechClient speechClient;",
            "@Autowired\n\tprotected StreamingChatClient streamingChatClient;",
            "@Autowired\n\tprotected ChatClient chatClient;",
            "@Autowired\n\tprotected OpenAiAudioTranscriptionClient transcriptionClient;",
            "private static final Logger logger = LoggerFactory.getLogger(AbstractIT.class);",
            "@Autowired\n\tprotected ImageClient imageClient;",
            "@Value(\"classpath:/prompts/eval/qa-evaluator-not-related-message.st\")\n\tprotected Resource qaEvaluatorNotRelatedResource;",
            "@Value(\"classpath:/prompts/eval/qa-evaluator-fact-based-answer.st\")\n\tprotected Resource qaEvaluatorFactBasedAnswerResource;",
            "@Value(\"classpath:/prompts/eval/user-evaluator-message.st\")\n\tprotected Resource userEvaluatorResource;",
            "@Value(\"classpath:/prompts/eval/qa-evaluator-accurate-answer.st\")\n\tprotected Resource qaEvaluatorAccurateAnswerResource;"
        ],
        "functions": [
            {
                "name": "evaluateQuestionAndAnswer",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "assertThat(response).isNotNull();\n\t\tString answer = response.getResult().getOutput().getContent();\n\t\tlogger.info(\"Question: \" + question);\n\t\tlogger.info(\"Answer:\" + answer);\n\t\tPromptTemplate userPromptTemplate = new PromptTemplate(userEvaluatorResource,\n\t\t\t\tMap.of(\"question\", question, \"answer\", answer));\n\t\tSystemMessage systemMessage;\n\t\tif (factBased) {\n\t\t\tsystemMessage = new SystemMessage(qaEvaluatorFactBasedAnswerResource);\n\t\t}\n\t\telse {\n\t\t\tsystemMessage = new SystemMessage(qaEvaluatorAccurateAnswerResource);\n\t\t}\n\t\tMessage userMessage = userPromptTemplate.createMessage();\n\t\tPrompt prompt = new Prompt(List.of(userMessage, systemMessage));\n\t\tString yesOrNo = chatClient.call(prompt).getResult().getOutput().getContent();\n\t\tlogger.info(\"Is Answer related to question: \" + yesOrNo);\n\t\tif (yesOrNo.equalsIgnoreCase(\"no\")) {\n\t\t\tSystemMessage notRelatedSystemMessage = new SystemMessage(qaEvaluatorNotRelatedResource);\n\t\t\tprompt = new Prompt(List.of(userMessage, notRelatedSystemMessage));\n\t\t\tString reasonForFailure = chatClient.call(prompt).getResult().getOutput().getContent();\n\t\t\tfail(reasonForFailure);\n\t\t}\n\t\telse {\n\t\t\tlogger.info(\"Answer is related to question.\");\n\t\t\tassertThat(yesOrNo).isEqualTo(\"YES\");\n\t\t}",
                "is_abstract": "",
                "class_name": "AbstractIT",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/aot/OpenAiRuntimeHintsTests.java",
        "class_names": [
            "OpenAiRuntimeHintsTests"
        ],
        "imports": "import org.springframework.ai.openai.api.OpenAiApi;\nimport org.springframework.aot.hint.RuntimeHints;\nimport static org.assertj.core.api.AssertionsForClassTypes.assertThat;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.aot.hint.TypeReference;\nimport java.util.Set;\nimport static org.springframework.ai.aot.AiRuntimeHints.findJsonAnnotatedClassesInPackage;\nimport static org.springframework.aot.hint.predicate.RuntimeHintsPredicates.reflection;",
        "package_import_paths": {
            "org.springframework.ai.openai.aot.OpenAiRuntimeHintsTests": "org.springframework.ai.openai.aot.OpenAiRuntimeHintsTests",
            "org.springframework.ai.openai.aot.registerHints": "org.springframework.ai.openai.aot.registerHints"
        },
        "package": "package org.springframework.ai.openai.aot;",
        "property_declarations": [],
        "functions": [
            {
                "name": "registerHints",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "RuntimeHints runtimeHints = new RuntimeHints();\n\t\tOpenAiRuntimeHints openAiRuntimeHints = new OpenAiRuntimeHints();\n\t\topenAiRuntimeHints.registerHints(runtimeHints, null);\n\n\t\tSet<TypeReference> jsonAnnotatedClasses = findJsonAnnotatedClassesInPackage(OpenAiApi.class);\n\t\tfor (TypeReference jsonAnnotatedClass : jsonAnnotatedClasses) {\n\t\t\tassertThat(runtimeHints).matches(reflection().onType(jsonAnnotatedClass));\n\t\t}",
                "is_abstract": "",
                "class_name": "OpenAiRuntimeHintsTests",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-openai/src/test/java/org/springframework/ai/openai/vectorstore/SimplePersistentVectorStoreIT.java",
        "class_names": [
            "SimplePersistentVectorStoreIT",
            "ProductMetadataGenerator"
        ],
        "imports": "import java.io.File;\nimport org.springframework.ai.reader.JsonReader;\nimport org.springframework.ai.reader.JsonMetadataGenerator;\nimport java.util.List;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.springframework.ai.document.Document;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport java.nio.file.Path;\nimport java.util.Map;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.core.io.Resource;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.ai.vectorstore.SimpleVectorStore;\nimport org.springframework.ai.embedding.EmbeddingClient;\nimport org.junit.jupiter.api.io.TempDir;\nimport org.junit.jupiter.api.io.CleanupMode;",
        "package_import_paths": {
            "org.springframework.ai.openai.vectorstore.SimplePersistentVectorStoreIT": "org.springframework.ai.openai.vectorstore.SimplePersistentVectorStoreIT",
            "org.springframework.ai.openai.vectorstore.ProductMetadataGenerator": "org.springframework.ai.openai.vectorstore.ProductMetadataGenerator",
            "org.springframework.ai.openai.vectorstore.persist": "org.springframework.ai.openai.vectorstore.persist",
            "org.springframework.ai.openai.vectorstore.generat": "org.springframework.ai.openai.vectorstore.generat",
            "org.springframework.ai.openai.vectorstore.bikesJsonResour": "org.springframework.ai.openai.vectorstore.bikesJsonResour",
            "org.springframework.ai.openai.vectorstore.privat": "org.springframework.ai.openai.vectorstore.privat"
        },
        "package": "package org.springframework.ai.openai.vectorstore;",
        "property_declarations": [
            "@Value(\"file:src/test/resources/data/acme/bikes.json\")\n\tprivate Resource bikesJsonResource;",
            "@Autowired\n\tprivate EmbeddingClient embeddingClient;"
        ],
        "functions": [
            {
                "name": "persist",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "JsonReader jsonReader = new JsonReader(bikesJsonResource, new ProductMetadataGenerator(), \"price\", \"name\",\n\t\t\t\t\"shortDescription\", \"description\", \"tags\");\n\t\tList<Document> documents = jsonReader.get();\n\t\tSimpleVectorStore vectorStore = new SimpleVectorStore(this.embeddingClient);\n\t\tvectorStore.add(documents);\n\n\t\tFile tempFile = new File(workingDir.toFile(), \"temp.txt\");\n\t\tvectorStore.save(tempFile);\n\t\tassertThat(tempFile).isNotEmpty();\n\t\tassertThat(tempFile).content().contains(\"Velo 99 XR1 AXS\");\n\t\tSimpleVectorStore vectorStore2 = new SimpleVectorStore(this.embeddingClient);\n\n\t\tvectorStore2.load(tempFile);\n\t\tList<Document> similaritySearch = vectorStore2.similaritySearch(\"Velo 99 XR1 AXS\");\n\t\tassertThat(similaritySearch).isNotEmpty();\n\t\tassertThat(similaritySearch.get(0).getMetadata()).containsEntry(\"name\", \"Velo 99 XR1 AXS\");",
                "is_abstract": "",
                "class_name": "SimplePersistentVectorStoreIT",
                "annotations": [
                    "@TempDir(cleanup = CleanupMode.ON_SUCCESS)"
                ]
            },
            {
                "name": "generate",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return Map.of(\"name\", jsonMap.get(\"name\"));",
                "is_abstract": "",
                "class_name": "SimplePersistentVectorStoreIT ProductMetadataGenerator",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-openai/src/main/java/org/springframework/ai/openai/OpenAiImageClient.java",
        "class_names": [
            "OpenAiImageClient"
        ],
        "imports": "import org.springframework.ai.retry.RetryUtils;\nimport org.springframework.ai.image.ImageResponseMetadata;\nimport org.springframework.ai.image.Image;\nimport java.util.List;\nimport org.springframework.ai.openai.metadata.OpenAiImageGenerationMetadata;\nimport org.springframework.retry.support.RetryTemplate;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.util.Assert;\nimport org.slf4j.Logger;\nimport org.springframework.ai.image.ImageResponse;\nimport org.springframework.ai.image.ImageOptions;\nimport org.springframework.ai.openai.metadata.OpenAiImageResponseMetadata;\nimport org.springframework.ai.model.ModelOptionsUtils;\nimport org.springframework.ai.image.ImageGeneration;\nimport org.springframework.ai.openai.api.OpenAiImageApi;\nimport org.springframework.ai.image.ImagePrompt;\nimport org.springframework.ai.image.ImageClient;",
        "package_import_paths": {
            "org.springframework.ai.openai.OpenAiImageClient": "org.springframework.ai.openai.OpenAiImageClient",
            "org.springframework.ai.openai.getDefaultOptions": "org.springframework.ai.openai.getDefaultOptions",
            "org.springframework.ai.openai.call": "org.springframework.ai.openai.call",
            "org.springframework.ai.openai.convertRespons": "org.springframework.ai.openai.convertRespons",
            "org.springframework.ai.openai.toOpenAiImageOptions": "org.springframework.ai.openai.toOpenAiImageOptions",
            "org.springframework.ai.openai.logger": "org.springframework.ai.openai.logger",
            "org.springframework.ai.openai.defaultOptions": "org.springframework.ai.openai.defaultOptions",
            "org.springframework.ai.openai.openAiImageApi": "org.springframework.ai.openai.openAiImageApi",
            "org.springframework.ai.openai.retryTemplat": "org.springframework.ai.openai.retryTemplat"
        },
        "package": "package org.springframework.ai.openai;",
        "property_declarations": [
            "private OpenAiImageOptions defaultOptions;",
            "public final RetryTemplate retryTemplate;",
            "private final static Logger logger = LoggerFactory.getLogger(OpenAiImageClient.class);",
            "private final OpenAiImageApi openAiImageApi;"
        ],
        "functions": [
            {
                "name": "getDefaultOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.defaultOptions;",
                "is_abstract": "",
                "class_name": "OpenAiImageClient",
                "annotations": []
            },
            {
                "name": "call",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.retryTemplate.execute(ctx -> {\n\n\t\t\tString instructions = imagePrompt.getInstructions().get(0).getText();\n\n\t\t\tOpenAiImageApi.OpenAiImageRequest imageRequest = new OpenAiImageApi.OpenAiImageRequest(instructions,\n\t\t\t\t\tOpenAiImageApi.DEFAULT_IMAGE_MODEL);\n\n\t\t\tif (this.defaultOptions != null) {\n\t\t\t\timageRequest = ModelOptionsUtils.merge(this.defaultOptions, imageRequest,\n\t\t\t\t\t\tOpenAiImageApi.OpenAiImageRequest.class);\n\t\t\t}\n\n\t\t\tif (imagePrompt.getOptions() != null) {\n\t\t\t\timageRequest = ModelOptionsUtils.merge(toOpenAiImageOptions(imagePrompt.getOptions()), imageRequest,\n\t\t\t\t\t\tOpenAiImageApi.OpenAiImageRequest.class);\n\t\t\t}\n\n\t\t\t// Make the request\n\t\t\tResponseEntity<OpenAiImageApi.OpenAiImageResponse> imageResponseEntity = this.openAiImageApi\n\t\t\t\t.createImage(imageRequest);\n\n\t\t\t// Convert to org.springframework.ai.model derived ImageResponse data type\n\t\t\treturn convertResponse(imageResponseEntity, imageRequest);\n\t\t});",
                "is_abstract": "",
                "class_name": "OpenAiImageClient",
                "annotations": []
            },
            {
                "name": "convertResponse",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "OpenAiImageApi.OpenAiImageResponse imageApiResponse = imageResponseEntity.getBody();\n\t\tif (imageApiResponse == null) {\n\t\t\tlogger.warn(\"No image response returned for request: {}\", openAiImageRequest);\n\t\t\treturn new ImageResponse(List.of());\n\t\t}\n\n\t\tList<ImageGeneration> imageGenerationList = imageApiResponse.data().stream().map(entry -> {\n\t\t\treturn new ImageGeneration(new Image(entry.url(), entry.b64Json()),\n\t\t\t\t\tnew OpenAiImageGenerationMetadata(entry.revisedPrompt()));\n\t\t}).toList();\n\n\t\tImageResponseMetadata openAiImageResponseMetadata = OpenAiImageResponseMetadata.from(imageApiResponse);\n\t\treturn new ImageResponse(imageGenerationList, openAiImageResponseMetadata);",
                "is_abstract": "",
                "class_name": "OpenAiImageClient",
                "annotations": []
            },
            {
                "name": "toOpenAiImageOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "OpenAiImageOptions.Builder openAiImageOptionsBuilder = OpenAiImageOptions.builder();\n\t\tif (runtimeImageOptions != null) {\n\t\t\t// Handle portable image options\n\t\t\tif (runtimeImageOptions.getN() != null) {\n\t\t\t\topenAiImageOptionsBuilder.withN(runtimeImageOptions.getN());\n\t\t\t}\n\t\t\tif (runtimeImageOptions.getModel() != null) {\n\t\t\t\topenAiImageOptionsBuilder.withModel(runtimeImageOptions.getModel());\n\t\t\t}\n\t\t\tif (runtimeImageOptions.getResponseFormat() != null) {\n\t\t\t\topenAiImageOptionsBuilder.withResponseFormat(runtimeImageOptions.getResponseFormat());\n\t\t\t}\n\t\t\tif (runtimeImageOptions.getWidth() != null) {\n\t\t\t\topenAiImageOptionsBuilder.withWidth(runtimeImageOptions.getWidth());\n\t\t\t}\n\t\t\tif (runtimeImageOptions.getHeight() != null) {\n\t\t\t\topenAiImageOptionsBuilder.withHeight(runtimeImageOptions.getHeight());\n\t\t\t}\n\t\t\t// Handle OpenAI specific image options\n\t\t\tif (runtimeImageOptions instanceof OpenAiImageOptions) {\n\t\t\t\tOpenAiImageOptions runtimeOpenAiImageOptions = (OpenAiImageOptions) runtimeImageOptions;\n\t\t\t\tif (runtimeOpenAiImageOptions.getQuality() != null) {\n\t\t\t\t\topenAiImageOptionsBuilder.withQuality(runtimeOpenAiImageOptions.getQuality());\n\t\t\t\t}\n\t\t\t\tif (runtimeOpenAiImageOptions.getStyle() != null) {\n\t\t\t\t\topenAiImageOptionsBuilder.withStyle(runtimeOpenAiImageOptions.getStyle());\n\t\t\t\t}\n\t\t\t\tif (runtimeOpenAiImageOptions.getUser() != null) {\n\t\t\t\t\topenAiImageOptionsBuilder.withUser(runtimeOpenAiImageOptions.getUser());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn openAiImageOptionsBuilder.build();",
                "is_abstract": "",
                "class_name": "OpenAiImageClient",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-openai/src/main/java/org/springframework/ai/openai/OpenAiAudioSpeechOptions.java",
        "class_names": [
            "Builder",
            "OpenAiAudioSpeechOptions"
        ],
        "imports": "import org.springframework.ai.openai.api.OpenAiAudioApi.SpeechRequest.Voice;\nimport org.springframework.ai.openai.api.OpenAiAudioApi.SpeechRequest.AudioResponseFormat;\nimport org.springframework.ai.model.ModelOptions;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.fasterxml.jackson.annotation.JsonProperty;",
        "package_import_paths": {
            "org.springframework.ai.openai.OpenAiAudioSpeechOptions": "org.springframework.ai.openai.OpenAiAudioSpeechOptions",
            "org.springframework.ai.openai.Builder": "org.springframework.ai.openai.Builder",
            "org.springframework.ai.openai.builder": "org.springframework.ai.openai.builder",
            "org.springframework.ai.openai.withModel": "org.springframework.ai.openai.withModel",
            "org.springframework.ai.openai.withInput": "org.springframework.ai.openai.withInput",
            "org.springframework.ai.openai.withVoi": "org.springframework.ai.openai.withVoi",
            "org.springframework.ai.openai.withResponseFormat": "org.springframework.ai.openai.withResponseFormat",
            "org.springframework.ai.openai.withSpeed": "org.springframework.ai.openai.withSpeed",
            "org.springframework.ai.openai.build": "org.springframework.ai.openai.build",
            "org.springframework.ai.openai.getModel": "org.springframework.ai.openai.getModel",
            "org.springframework.ai.openai.getInput": "org.springframework.ai.openai.getInput",
            "org.springframework.ai.openai.getVoi": "org.springframework.ai.openai.getVoi",
            "org.springframework.ai.openai.getResponseFormat": "org.springframework.ai.openai.getResponseFormat",
            "org.springframework.ai.openai.getSpeed": "org.springframework.ai.openai.getSpeed",
            "org.springframework.ai.openai.hashCod": "org.springframework.ai.openai.hashCod",
            "org.springframework.ai.openai.setModel": "org.springframework.ai.openai.setModel",
            "org.springframework.ai.openai.setInput": "org.springframework.ai.openai.setInput",
            "org.springframework.ai.openai.setVoi": "org.springframework.ai.openai.setVoi",
            "org.springframework.ai.openai.setResponseFormat": "org.springframework.ai.openai.setResponseFormat",
            "org.springframework.ai.openai.setSpeed": "org.springframework.ai.openai.setSpeed",
            "org.springframework.ai.openai.equals": "org.springframework.ai.openai.equals",
            "org.springframework.ai.openai.toStrin": "org.springframework.ai.openai.toStrin",
            "org.springframework.ai.openai.model": "org.springframework.ai.openai.model",
            "org.springframework.ai.openai.input": "org.springframework.ai.openai.input",
            "org.springframework.ai.openai.voi": "org.springframework.ai.openai.voi",
            "org.springframework.ai.openai.responseFormat": "org.springframework.ai.openai.responseFormat",
            "org.springframework.ai.openai.speed": "org.springframework.ai.openai.speed",
            "org.springframework.ai.openai.options": "org.springframework.ai.openai.options"
        },
        "package": "package org.springframework.ai.openai;",
        "property_declarations": [
            "@JsonProperty(\"input\")\n\tprivate String input;",
            "@JsonProperty(\"voice\")\n\tprivate Voice voice;",
            "@JsonProperty(\"model\")\n\tprivate String model;",
            "@JsonProperty(\"response_format\")\n\tprivate AudioResponseFormat responseFormat;",
            "@JsonProperty(\"speed\")\n\tprivate Float speed;",
            "private final OpenAiAudioSpeechOptions options = new OpenAiAudioSpeechOptions();"
        ],
        "functions": [
            {
                "name": "builder",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Builder();",
                "is_abstract": "",
                "class_name": "OpenAiAudioSpeechOptions",
                "annotations": []
            },
            {
                "name": "withModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "options.model = model;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "OpenAiAudioSpeechOptions Builder",
                "annotations": []
            },
            {
                "name": "withInput",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "options.input = input;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "OpenAiAudioSpeechOptions Builder",
                "annotations": []
            },
            {
                "name": "withVoice",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "options.voice = voice;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "OpenAiAudioSpeechOptions Builder",
                "annotations": []
            },
            {
                "name": "withResponseFormat",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "options.responseFormat = responseFormat;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "OpenAiAudioSpeechOptions Builder",
                "annotations": []
            },
            {
                "name": "withSpeed",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "options.speed = speed;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "OpenAiAudioSpeechOptions Builder",
                "annotations": []
            },
            {
                "name": "build",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return options;",
                "is_abstract": "",
                "class_name": "OpenAiAudioSpeechOptions Builder",
                "annotations": []
            },
            {
                "name": "getModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return model;",
                "is_abstract": "",
                "class_name": "OpenAiAudioSpeechOptions Builder",
                "annotations": []
            },
            {
                "name": "getInput",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return input;",
                "is_abstract": "",
                "class_name": "OpenAiAudioSpeechOptions Builder",
                "annotations": []
            },
            {
                "name": "getVoice",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return voice;",
                "is_abstract": "",
                "class_name": "OpenAiAudioSpeechOptions Builder",
                "annotations": []
            },
            {
                "name": "getResponseFormat",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return responseFormat;",
                "is_abstract": "",
                "class_name": "OpenAiAudioSpeechOptions Builder",
                "annotations": []
            },
            {
                "name": "getSpeed",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return speed;",
                "is_abstract": "",
                "class_name": "OpenAiAudioSpeechOptions Builder",
                "annotations": []
            },
            {
                "name": "hashCode",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "final int prime = 31;\n\t\tint result = 1;\n\t\tresult = prime * result + ((model == null) ? 0 : model.hashCode());\n\t\tresult = prime * result + ((input == null) ? 0 : input.hashCode());\n\t\tresult = prime * result + ((voice == null) ? 0 : voice.hashCode());\n\t\tresult = prime * result + ((responseFormat == null) ? 0 : responseFormat.hashCode());\n\t\tresult = prime * result + ((speed == null) ? 0 : speed.hashCode());\n\t\treturn result;",
                "is_abstract": "",
                "class_name": "OpenAiAudioSpeechOptions Builder",
                "annotations": []
            },
            {
                "name": "setModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.model = model;",
                "is_abstract": "",
                "class_name": "OpenAiAudioSpeechOptions Builder",
                "annotations": []
            },
            {
                "name": "setInput",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.input = input;",
                "is_abstract": "",
                "class_name": "OpenAiAudioSpeechOptions Builder",
                "annotations": []
            },
            {
                "name": "setVoice",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.voice = voice;",
                "is_abstract": "",
                "class_name": "OpenAiAudioSpeechOptions Builder",
                "annotations": []
            },
            {
                "name": "setResponseFormat",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.responseFormat = responseFormat;",
                "is_abstract": "",
                "class_name": "OpenAiAudioSpeechOptions Builder",
                "annotations": []
            },
            {
                "name": "setSpeed",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.speed = speed;",
                "is_abstract": "",
                "class_name": "OpenAiAudioSpeechOptions Builder",
                "annotations": []
            },
            {
                "name": "equals",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (this == obj)\n\t\t\treturn true;\n\t\tif (obj == null)\n\t\t\treturn false;\n\t\tif (getClass() != obj.getClass())\n\t\t\treturn false;\n\t\tOpenAiAudioSpeechOptions other = (OpenAiAudioSpeechOptions) obj;\n\t\tif (model == null) {\n\t\t\tif (other.model != null)\n\t\t\t\treturn false;\n\t\t}\n\t\telse if (!model.equals(other.model))\n\t\t\treturn false;\n\t\tif (input == null) {\n\t\t\tif (other.input != null)\n\t\t\t\treturn false;\n\t\t}\n\t\telse if (!input.equals(other.input))\n\t\t\treturn false;\n\t\tif (voice == null) {\n\t\t\tif (other.voice != null)\n\t\t\t\treturn false;\n\t\t}\n\t\telse if (!voice.equals(other.voice))\n\t\t\treturn false;\n\t\tif (responseFormat == null) {\n\t\t\tif (other.responseFormat != null)\n\t\t\t\treturn false;\n\t\t}\n\t\telse if (!responseFormat.equals(other.responseFormat))\n\t\t\treturn false;\n\t\tif (speed == null) {\n\t\t\treturn other.speed == null;\n\t\t}\n\t\telse\n\t\t\treturn speed.equals(other.speed);",
                "is_abstract": "",
                "class_name": "OpenAiAudioSpeechOptions Builder",
                "annotations": []
            },
            {
                "name": "toString",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return \"OpenAiAudioSpeechOptions{\" + \"model='\" + model + '\\'' + \", input='\" + input + '\\'' + \", voice='\" + voice\n\t\t\t\t+ '\\'' + \", responseFormat='\" + responseFormat + '\\'' + \", speed=\" + speed + '}';",
                "is_abstract": "",
                "class_name": "OpenAiAudioSpeechOptions Builder",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-openai/src/main/java/org/springframework/ai/openai/OpenAiAudioSpeechClient.java",
        "class_names": [
            "OpenAiAudioSpeechClient"
        ],
        "imports": "import org.springframework.ai.openai.metadata.support.OpenAiResponseHeaderExtractor;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.ai.openai.api.OpenAiAudioApi.SpeechRequest.AudioResponseFormat;\nimport org.springframework.retry.support.RetryTemplate;\nimport org.springframework.util.Assert;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.http.ResponseEntity;\nimport reactor.core.publisher.Flux;\nimport org.springframework.ai.chat.metadata.RateLimit;\nimport org.slf4j.Logger;\nimport org.springframework.ai.openai.metadata.audio.OpenAiAudioSpeechResponseMetadata;\nimport org.springframework.ai.openai.api.common.OpenAiApiException;\nimport org.springframework.ai.openai.audio.speech.*;\nimport org.springframework.ai.openai.api.OpenAiAudioApi;\nimport java.time.Duration;",
        "package_import_paths": {
            "org.springframework.ai.openai.OpenAiAudioSpeechClient": "org.springframework.ai.openai.OpenAiAudioSpeechClient",
            "org.springframework.ai.openai.call": "org.springframework.ai.openai.call",
            "org.springframework.ai.openai.stream": "org.springframework.ai.openai.stream",
            "org.springframework.ai.openai.createRequestBody": "org.springframework.ai.openai.createRequestBody",
            "org.springframework.ai.openai.mer": "org.springframework.ai.openai.mer",
            "org.springframework.ai.openai.logger": "org.springframework.ai.openai.logger",
            "org.springframework.ai.openai.defaultOptions": "org.springframework.ai.openai.defaultOptions",
            "org.springframework.ai.openai.SPEED": "org.springframework.ai.openai.SPEED",
            "org.springframework.ai.openai.retryTemplat": "org.springframework.ai.openai.retryTemplat",
            "org.springframework.ai.openai.audioApi": "org.springframework.ai.openai.audioApi"
        },
        "package": "package org.springframework.ai.openai;",
        "property_declarations": [
            "private final OpenAiAudioApi audioApi;",
            "private final Logger logger = LoggerFactory.getLogger(getClass());",
            "public final RetryTemplate retryTemplate = RetryTemplate.builder()\n\t\t.maxAttempts(10)\n\t\t.retryOn(OpenAiApiException.class)\n\t\t.exponentialBackoff(Duration.ofMillis(2000), 5, Duration.ofMillis(3 * 60000))\n\t\t.build();",
            "private final OpenAiAudioSpeechOptions defaultOptions;",
            "private static final Float SPEED = 1.0f;"
        ],
        "functions": [
            {
                "name": "call",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "SpeechPrompt speechRequest = new SpeechPrompt(text);\n\t\treturn call(speechRequest).getResult().getOutput();",
                "is_abstract": "",
                "class_name": "OpenAiAudioSpeechClient",
                "annotations": []
            },
            {
                "name": "stream",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.audioApi.stream(this.createRequestBody(prompt))\n\t\t\t.map(entity -> new SpeechResponse(new Speech(entity.getBody()), new OpenAiAudioSpeechResponseMetadata(\n\t\t\t\t\tOpenAiResponseHeaderExtractor.extractAiResponseHeaders(entity))));",
                "is_abstract": "",
                "class_name": "OpenAiAudioSpeechClient",
                "annotations": []
            },
            {
                "name": "createRequestBody",
                "parameters": [
                    ""
                ],
                "return_type": "request",
                "body": "OpenAiAudioSpeechOptions options = this.defaultOptions;\n\n\t\tif (request.getOptions() != null) {\n\t\t\tif (request.getOptions() instanceof OpenAiAudioSpeechOptions runtimeOptions) {\n\t\t\t\toptions = this.merge(runtimeOptions, options);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new IllegalArgumentException(\"Prompt options are not of type SpeechOptions: \"\n\t\t\t\t\t\t+ request.getOptions().getClass().getSimpleName());\n\t\t\t}\n\t\t}\n\n\t\tString input = StringUtils.isNotBlank(options.getInput()) ? options.getInput()\n\t\t\t\t: request.getInstructions().getText();\n\n\t\tOpenAiAudioApi.SpeechRequest.Builder requestBuilder = OpenAiAudioApi.SpeechRequest.builder()\n\t\t\t.withModel(options.getModel())\n\t\t\t.withInput(input)\n\t\t\t.withVoice(options.getVoice())\n\t\t\t.withResponseFormat(options.getResponseFormat())\n\t\t\t.withSpeed(options.getSpeed());\n\n\t\treturn requestBuilder.build();",
                "is_abstract": "",
                "class_name": "OpenAiAudioSpeechClient",
                "annotations": []
            },
            {
                "name": "merge",
                "parameters": [
                    ""
                ],
                "return_type": "target",
                "body": "OpenAiAudioSpeechOptions.Builder mergedBuilder = OpenAiAudioSpeechOptions.builder();\n\n\t\tmergedBuilder.withModel(source.getModel() != null ? source.getModel() : target.getModel());\n\t\tmergedBuilder.withInput(source.getInput() != null ? source.getInput() : target.getInput());\n\t\tmergedBuilder.withVoice(source.getVoice() != null ? source.getVoice() : target.getVoice());\n\t\tmergedBuilder.withResponseFormat(\n\t\t\t\tsource.getResponseFormat() != null ? source.getResponseFormat() : target.getResponseFormat());\n\t\tmergedBuilder.withSpeed(source.getSpeed() != null ? source.getSpeed() : target.getSpeed());\n\n\t\treturn mergedBuilder.build();",
                "is_abstract": "",
                "class_name": "OpenAiAudioSpeechClient",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-openai/src/main/java/org/springframework/ai/openai/OpenAiEmbeddingClient.java",
        "class_names": [
            "OpenAiEmbeddingClient"
        ],
        "imports": "import org.springframework.ai.retry.RetryUtils;\nimport org.springframework.ai.embedding.Embedding;\nimport org.springframework.ai.document.MetadataMode;\nimport java.util.List;\nimport org.springframework.ai.embedding.EmbeddingOptions;\nimport org.springframework.ai.embedding.EmbeddingResponseMetadata;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.ai.embedding.AbstractEmbeddingClient;\nimport org.springframework.ai.openai.api.OpenAiApi;\nimport org.springframework.ai.openai.api.OpenAiApi.Usage;\nimport org.springframework.ai.document.Document;\nimport org.slf4j.Logger;\nimport org.springframework.retry.support.RetryTemplate;\nimport org.springframework.ai.embedding.EmbeddingRequest;\nimport org.springframework.util.Assert;\nimport org.springframework.ai.model.ModelOptionsUtils;\nimport org.springframework.ai.openai.api.OpenAiApi.EmbeddingList;\nimport org.springframework.ai.embedding.EmbeddingResponse;",
        "package_import_paths": {
            "org.springframework.ai.openai.OpenAiEmbeddingClient": "org.springframework.ai.openai.OpenAiEmbeddingClient",
            "org.springframework.ai.openai.embed": "org.springframework.ai.openai.embed",
            "org.springframework.ai.openai.SuppressWarnings": "org.springframework.ai.openai.SuppressWarnings",
            "org.springframework.ai.openai.generateResponseMetadat": "org.springframework.ai.openai.generateResponseMetadat",
            "org.springframework.ai.openai.logger": "org.springframework.ai.openai.logger",
            "org.springframework.ai.openai.defaultOptions": "org.springframework.ai.openai.defaultOptions",
            "org.springframework.ai.openai.retryTemplat": "org.springframework.ai.openai.retryTemplat",
            "org.springframework.ai.openai.openAiApi": "org.springframework.ai.openai.openAiApi",
            "org.springframework.ai.openai.metadataMod": "org.springframework.ai.openai.metadataMod"
        },
        "package": "package org.springframework.ai.openai;",
        "property_declarations": [
            "private final OpenAiApi openAiApi;",
            "private final RetryTemplate retryTemplate;",
            "private static final Logger logger = LoggerFactory.getLogger(OpenAiEmbeddingClient.class);",
            "private final OpenAiEmbeddingOptions defaultOptions;",
            "private final MetadataMode metadataMode;"
        ],
        "functions": [
            {
                "name": "embed",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(document, \"Document must not be null\");\n\t\treturn this.embed(document.getFormattedContent(this.metadataMode));",
                "is_abstract": "",
                "class_name": "OpenAiEmbeddingClient",
                "annotations": []
            },
            {
                "name": "SuppressWarnings",
                "parameters": [
                    ""
                ],
                "return_type": "new",
                "body": "return this.retryTemplate.execute(ctx -> {\n\n\t\t\torg.springframework.ai.openai.api.OpenAiApi.EmbeddingRequest<List<String>> apiRequest = (this.defaultOptions != null)\n\t\t\t\t\t? new org.springframework.ai.openai.api.OpenAiApi.EmbeddingRequest<>(request.getInstructions(),\n\t\t\t\t\t\t\tthis.defaultOptions.getModel(), this.defaultOptions.getEncodingFormat(),\n\t\t\t\t\t\t\tthis.defaultOptions.getDimensions(), this.defaultOptions.getUser())\n\t\t\t\t\t: new org.springframework.ai.openai.api.OpenAiApi.EmbeddingRequest<>(request.getInstructions(),\n\t\t\t\t\t\t\tOpenAiApi.DEFAULT_EMBEDDING_MODEL);\n\n\t\t\tif (request.getOptions() != null && !EmbeddingOptions.EMPTY.equals(request.getOptions())) {\n\t\t\t\tapiRequest = ModelOptionsUtils.merge(request.getOptions(), apiRequest,\n\t\t\t\t\t\torg.springframework.ai.openai.api.OpenAiApi.EmbeddingRequest.class);\n\t\t\t}\n\n\t\t\tEmbeddingList<OpenAiApi.Embedding> apiEmbeddingResponse = this.openAiApi.embeddings(apiRequest).getBody();\n\n\t\t\tif (apiEmbeddingResponse == null) {\n\t\t\t\tlogger.warn(\"No embeddings returned for request: {}\", request);\n\t\t\t\treturn new EmbeddingResponse(List.of());\n\t\t\t}\n\n\t\t\tvar metadata = generateResponseMetadata(apiEmbeddingResponse.model(), apiEmbeddingResponse.usage());\n\n\t\t\tList<Embedding> embeddings = apiEmbeddingResponse.data()\n\t\t\t\t.stream()\n\t\t\t\t.map(e -> new Embedding(e.embedding(), e.index()))\n\t\t\t\t.toList();\n\n\t\t\treturn new EmbeddingResponse(embeddings, metadata);\n\n\t\t});",
                "is_abstract": "",
                "class_name": "OpenAiEmbeddingClient",
                "annotations": [
                    "@SuppressWarnings(\"unchecked\")"
                ]
            },
            {
                "name": "generateResponseMetadata",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "EmbeddingResponseMetadata metadata = new EmbeddingResponseMetadata();\n\t\tmetadata.put(\"model\", model);\n\t\tmetadata.put(\"prompt-tokens\", usage.promptTokens());\n\t\tmetadata.put(\"completion-tokens\", usage.completionTokens());\n\t\tmetadata.put(\"total-tokens\", usage.totalTokens());\n\t\treturn metadata;",
                "is_abstract": "",
                "class_name": "OpenAiEmbeddingClient",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-openai/src/main/java/org/springframework/ai/openai/OpenAiAudioTranscriptionClient.java",
        "class_names": [
            "OpenAiAudioTranscriptionClient"
        ],
        "imports": "import org.springframework.ai.openai.metadata.support.OpenAiResponseHeaderExtractor;\nimport org.springframework.ai.model.ModelClient;\nimport org.springframework.ai.retry.RetryUtils;\nimport org.springframework.ai.openai.audio.transcription.AudioTranscriptionResponse;\nimport org.springframework.retry.support.RetryTemplate;\nimport org.springframework.ai.openai.api.OpenAiAudioApi.StructuredResponse;\nimport org.springframework.util.Assert;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.ai.chat.metadata.RateLimit;\nimport org.slf4j.Logger;\nimport org.springframework.ai.openai.audio.transcription.AudioTranscription;\nimport org.springframework.ai.openai.audio.transcription.AudioTranscriptionPrompt;\nimport org.springframework.ai.openai.metadata.audio.OpenAiAudioTranscriptionResponseMetadata;\nimport org.springframework.core.io.Resource;\nimport org.springframework.ai.openai.api.OpenAiAudioApi;",
        "package_import_paths": {
            "org.springframework.ai.openai.OpenAiAudioTranscriptionClient": "org.springframework.ai.openai.OpenAiAudioTranscriptionClient",
            "org.springframework.ai.openai.call": "org.springframework.ai.openai.call",
            "org.springframework.ai.openai.createRequestBody": "org.springframework.ai.openai.createRequestBody",
            "org.springframework.ai.openai.toBytes": "org.springframework.ai.openai.toBytes",
            "org.springframework.ai.openai.mer": "org.springframework.ai.openai.mer",
            "org.springframework.ai.openai.logger": "org.springframework.ai.openai.logger",
            "org.springframework.ai.openai.defaultOptions": "org.springframework.ai.openai.defaultOptions",
            "org.springframework.ai.openai.retryTemplat": "org.springframework.ai.openai.retryTemplat",
            "org.springframework.ai.openai.audioApi": "org.springframework.ai.openai.audioApi"
        },
        "package": "package org.springframework.ai.openai;",
        "property_declarations": [
            "private final OpenAiAudioTranscriptionOptions defaultOptions;",
            "public final RetryTemplate retryTemplate;",
            "private final OpenAiAudioApi audioApi;",
            "private final Logger logger = LoggerFactory.getLogger(getClass());"
        ],
        "functions": [
            {
                "name": "call",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "AudioTranscriptionPrompt transcriptionRequest = new AudioTranscriptionPrompt(audioResource);\n\t\treturn call(transcriptionRequest).getResult().getOutput();",
                "is_abstract": "",
                "class_name": "OpenAiAudioTranscriptionClient",
                "annotations": []
            },
            {
                "name": "createRequestBody",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "OpenAiAudioTranscriptionOptions options = this.defaultOptions;\n\n\t\tif (request.getOptions() != null) {\n\t\t\tif (request.getOptions() instanceof OpenAiAudioTranscriptionOptions runtimeOptions) {\n\t\t\t\toptions = this.merge(runtimeOptions, options);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new IllegalArgumentException(\"Prompt options are not of type TranscriptionOptions: \"\n\t\t\t\t\t\t+ request.getOptions().getClass().getSimpleName());\n\t\t\t}\n\t\t}\n\n\t\tOpenAiAudioApi.TranscriptionRequest audioTranscriptionRequest = OpenAiAudioApi.TranscriptionRequest.builder()\n\t\t\t.withFile(toBytes(request.getInstructions()))\n\t\t\t.withResponseFormat(options.getResponseFormat())\n\t\t\t.withPrompt(options.getPrompt())\n\t\t\t.withTemperature(options.getTemperature())\n\t\t\t.withLanguage(options.getLanguage())\n\t\t\t.withModel(options.getModel())\n\t\t\t.build();\n\n\t\treturn audioTranscriptionRequest;",
                "is_abstract": "",
                "class_name": "OpenAiAudioTranscriptionClient",
                "annotations": []
            },
            {
                "name": "toBytes",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "try {\n\t\t\treturn resource.getInputStream().readAllBytes();\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new IllegalArgumentException(\"Failed to read resource: \" + resource, e);\n\t\t}",
                "is_abstract": "",
                "class_name": "OpenAiAudioTranscriptionClient",
                "annotations": []
            },
            {
                "name": "merge",
                "parameters": [
                    ""
                ],
                "return_type": "target",
                "body": "if (source == null) {\n\t\t\tsource = new OpenAiAudioTranscriptionOptions();\n\t\t}\n\n\t\tOpenAiAudioTranscriptionOptions merged = new OpenAiAudioTranscriptionOptions();\n\t\tmerged.setLanguage(source.getLanguage() != null ? source.getLanguage() : target.getLanguage());\n\t\tmerged.setModel(source.getModel() != null ? source.getModel() : target.getModel());\n\t\tmerged.setPrompt(source.getPrompt() != null ? source.getPrompt() : target.getPrompt());\n\t\tmerged.setResponseFormat(\n\t\t\t\tsource.getResponseFormat() != null ? source.getResponseFormat() : target.getResponseFormat());\n\t\tmerged.setTemperature(source.getTemperature() != null ? source.getTemperature() : target.getTemperature());\n\t\treturn merged;",
                "is_abstract": "",
                "class_name": "OpenAiAudioTranscriptionClient",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-openai/src/main/java/org/springframework/ai/openai/OpenAiEmbeddingOptions.java",
        "class_names": [
            "Builder",
            "OpenAiEmbeddingOptions"
        ],
        "imports": "import com.fasterxml.jackson.annotation.JsonInclude;\nimport org.springframework.ai.embedding.EmbeddingOptions;\nimport com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport com.fasterxml.jackson.annotation.JsonProperty;",
        "package_import_paths": {
            "org.springframework.ai.openai.OpenAiEmbeddingOptions": "org.springframework.ai.openai.OpenAiEmbeddingOptions",
            "org.springframework.ai.openai.Builder": "org.springframework.ai.openai.Builder",
            "org.springframework.ai.openai.builder": "org.springframework.ai.openai.builder",
            "org.springframework.ai.openai.withModel": "org.springframework.ai.openai.withModel",
            "org.springframework.ai.openai.withEncodingFormat": "org.springframework.ai.openai.withEncodingFormat",
            "org.springframework.ai.openai.withDimensions": "org.springframework.ai.openai.withDimensions",
            "org.springframework.ai.openai.withUser": "org.springframework.ai.openai.withUser",
            "org.springframework.ai.openai.build": "org.springframework.ai.openai.build",
            "org.springframework.ai.openai.getModel": "org.springframework.ai.openai.getModel",
            "org.springframework.ai.openai.setModel": "org.springframework.ai.openai.setModel",
            "org.springframework.ai.openai.getEncodingFormat": "org.springframework.ai.openai.getEncodingFormat",
            "org.springframework.ai.openai.setEncodingFormat": "org.springframework.ai.openai.setEncodingFormat",
            "org.springframework.ai.openai.getDimensions": "org.springframework.ai.openai.getDimensions",
            "org.springframework.ai.openai.setDimensions": "org.springframework.ai.openai.setDimensions",
            "org.springframework.ai.openai.getUser": "org.springframework.ai.openai.getUser",
            "org.springframework.ai.openai.setUser": "org.springframework.ai.openai.setUser",
            "org.springframework.ai.openai.model": "org.springframework.ai.openai.model",
            "org.springframework.ai.openai.encodingFormat": "org.springframework.ai.openai.encodingFormat",
            "org.springframework.ai.openai.dimensions": "org.springframework.ai.openai.dimensions",
            "org.springframework.ai.openai.user": "org.springframework.ai.openai.user",
            "org.springframework.ai.openai.options": "org.springframework.ai.openai.options"
        },
        "package": "package org.springframework.ai.openai;",
        "property_declarations": [
            "private @JsonProperty(\"model\") String model;",
            "private @JsonProperty(\"user\") String user;",
            "private @JsonProperty(\"encoding_format\") String encodingFormat;",
            "private @JsonProperty(\"dimensions\") Integer dimensions;",
            "protected OpenAiEmbeddingOptions options;"
        ],
        "functions": [
            {
                "name": "builder",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Builder();",
                "is_abstract": "",
                "class_name": "OpenAiEmbeddingOptions",
                "annotations": []
            },
            {
                "name": "withModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.setModel(model);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "OpenAiEmbeddingOptions Builder",
                "annotations": []
            },
            {
                "name": "withEncodingFormat",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.setEncodingFormat(encodingFormat);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "OpenAiEmbeddingOptions Builder",
                "annotations": []
            },
            {
                "name": "withDimensions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.dimensions = dimensions;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "OpenAiEmbeddingOptions Builder",
                "annotations": []
            },
            {
                "name": "withUser",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.setUser(user);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "OpenAiEmbeddingOptions Builder",
                "annotations": []
            },
            {
                "name": "build",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.options;",
                "is_abstract": "",
                "class_name": "OpenAiEmbeddingOptions Builder",
                "annotations": []
            },
            {
                "name": "getModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.model;",
                "is_abstract": "",
                "class_name": "OpenAiEmbeddingOptions Builder",
                "annotations": []
            },
            {
                "name": "setModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.model = model;",
                "is_abstract": "",
                "class_name": "OpenAiEmbeddingOptions Builder",
                "annotations": []
            },
            {
                "name": "getEncodingFormat",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.encodingFormat;",
                "is_abstract": "",
                "class_name": "OpenAiEmbeddingOptions Builder",
                "annotations": []
            },
            {
                "name": "setEncodingFormat",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.encodingFormat = encodingFormat;",
                "is_abstract": "",
                "class_name": "OpenAiEmbeddingOptions Builder",
                "annotations": []
            },
            {
                "name": "getDimensions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.dimensions;",
                "is_abstract": "",
                "class_name": "OpenAiEmbeddingOptions Builder",
                "annotations": []
            },
            {
                "name": "setDimensions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.dimensions = dimensions;",
                "is_abstract": "",
                "class_name": "OpenAiEmbeddingOptions Builder",
                "annotations": []
            },
            {
                "name": "getUser",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.user;",
                "is_abstract": "",
                "class_name": "OpenAiEmbeddingOptions Builder",
                "annotations": []
            },
            {
                "name": "setUser",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.user = user;",
                "is_abstract": "",
                "class_name": "OpenAiEmbeddingOptions Builder",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-openai/src/main/java/org/springframework/ai/openai/OpenAiChatOptions.java",
        "class_names": [
            "Builder",
            "OpenAiChatOptions"
        ],
        "imports": "import java.util.ArrayList;\nimport java.util.List;\nimport com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport org.springframework.util.Assert;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport org.springframework.ai.model.function.FunctionCallingOptions;\nimport java.util.Map;\nimport org.springframework.ai.model.function.FunctionCallback;\nimport com.fasterxml.jackson.annotation.JsonIgnore;\nimport org.springframework.boot.context.properties.NestedConfigurationProperty;\nimport org.springframework.ai.openai.api.OpenAiApi.FunctionTool;\nimport org.springframework.ai.chat.prompt.ChatOptions;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport org.springframework.ai.openai.api.OpenAiApi.ChatCompletionRequest.ResponseFormat;\nimport java.util.Set;\nimport java.util.HashSet;",
        "package_import_paths": {
            "org.springframework.ai.openai.OpenAiChatOptions": "org.springframework.ai.openai.OpenAiChatOptions",
            "org.springframework.ai.openai.Builder": "org.springframework.ai.openai.Builder",
            "org.springframework.ai.openai.builder": "org.springframework.ai.openai.builder",
            "org.springframework.ai.openai.withModel": "org.springframework.ai.openai.withModel",
            "org.springframework.ai.openai.withFrequencyPenalty": "org.springframework.ai.openai.withFrequencyPenalty",
            "org.springframework.ai.openai.withLogitBias": "org.springframework.ai.openai.withLogitBias",
            "org.springframework.ai.openai.withLogprobs": "org.springframework.ai.openai.withLogprobs",
            "org.springframework.ai.openai.withTopLogprobs": "org.springframework.ai.openai.withTopLogprobs",
            "org.springframework.ai.openai.withMaxTokens": "org.springframework.ai.openai.withMaxTokens",
            "org.springframework.ai.openai.withN": "org.springframework.ai.openai.withN",
            "org.springframework.ai.openai.withPresencePenalty": "org.springframework.ai.openai.withPresencePenalty",
            "org.springframework.ai.openai.withResponseFormat": "org.springframework.ai.openai.withResponseFormat",
            "org.springframework.ai.openai.withSeed": "org.springframework.ai.openai.withSeed",
            "org.springframework.ai.openai.withSto": "org.springframework.ai.openai.withSto",
            "org.springframework.ai.openai.withTemperatur": "org.springframework.ai.openai.withTemperatur",
            "org.springframework.ai.openai.withTopP": "org.springframework.ai.openai.withTopP",
            "org.springframework.ai.openai.withTools": "org.springframework.ai.openai.withTools",
            "org.springframework.ai.openai.withToolChoi": "org.springframework.ai.openai.withToolChoi",
            "org.springframework.ai.openai.withUser": "org.springframework.ai.openai.withUser",
            "org.springframework.ai.openai.withFunctionCallbacks": "org.springframework.ai.openai.withFunctionCallbacks",
            "org.springframework.ai.openai.withFunctions": "org.springframework.ai.openai.withFunctions",
            "org.springframework.ai.openai.withFunction": "org.springframework.ai.openai.withFunction",
            "org.springframework.ai.openai.build": "org.springframework.ai.openai.build",
            "org.springframework.ai.openai.getModel": "org.springframework.ai.openai.getModel",
            "org.springframework.ai.openai.setModel": "org.springframework.ai.openai.setModel",
            "org.springframework.ai.openai.getFrequencyPenalty": "org.springframework.ai.openai.getFrequencyPenalty",
            "org.springframework.ai.openai.setFrequencyPenalty": "org.springframework.ai.openai.setFrequencyPenalty",
            "org.springframework.ai.openai.getLogitBias": "org.springframework.ai.openai.getLogitBias",
            "org.springframework.ai.openai.setLogitBias": "org.springframework.ai.openai.setLogitBias",
            "org.springframework.ai.openai.getLogprobs": "org.springframework.ai.openai.getLogprobs",
            "org.springframework.ai.openai.setLogprobs": "org.springframework.ai.openai.setLogprobs",
            "org.springframework.ai.openai.getTopLogprobs": "org.springframework.ai.openai.getTopLogprobs",
            "org.springframework.ai.openai.setTopLogprobs": "org.springframework.ai.openai.setTopLogprobs",
            "org.springframework.ai.openai.getMaxTokens": "org.springframework.ai.openai.getMaxTokens",
            "org.springframework.ai.openai.setMaxTokens": "org.springframework.ai.openai.setMaxTokens",
            "org.springframework.ai.openai.getN": "org.springframework.ai.openai.getN",
            "org.springframework.ai.openai.setN": "org.springframework.ai.openai.setN",
            "org.springframework.ai.openai.getPresencePenalty": "org.springframework.ai.openai.getPresencePenalty",
            "org.springframework.ai.openai.setPresencePenalty": "org.springframework.ai.openai.setPresencePenalty",
            "org.springframework.ai.openai.getResponseFormat": "org.springframework.ai.openai.getResponseFormat",
            "org.springframework.ai.openai.setResponseFormat": "org.springframework.ai.openai.setResponseFormat",
            "org.springframework.ai.openai.getSeed": "org.springframework.ai.openai.getSeed",
            "org.springframework.ai.openai.setSeed": "org.springframework.ai.openai.setSeed",
            "org.springframework.ai.openai.getSto": "org.springframework.ai.openai.getSto",
            "org.springframework.ai.openai.setSto": "org.springframework.ai.openai.setSto",
            "org.springframework.ai.openai.getTemperatur": "org.springframework.ai.openai.getTemperatur",
            "org.springframework.ai.openai.setTemperatur": "org.springframework.ai.openai.setTemperatur",
            "org.springframework.ai.openai.getTopP": "org.springframework.ai.openai.getTopP",
            "org.springframework.ai.openai.setTopP": "org.springframework.ai.openai.setTopP",
            "org.springframework.ai.openai.getTools": "org.springframework.ai.openai.getTools",
            "org.springframework.ai.openai.setTools": "org.springframework.ai.openai.setTools",
            "org.springframework.ai.openai.getToolChoi": "org.springframework.ai.openai.getToolChoi",
            "org.springframework.ai.openai.setToolChoi": "org.springframework.ai.openai.setToolChoi",
            "org.springframework.ai.openai.getUser": "org.springframework.ai.openai.getUser",
            "org.springframework.ai.openai.setUser": "org.springframework.ai.openai.setUser",
            "org.springframework.ai.openai.getFunctionCallbacks": "org.springframework.ai.openai.getFunctionCallbacks",
            "org.springframework.ai.openai.setFunctionCallbacks": "org.springframework.ai.openai.setFunctionCallbacks",
            "org.springframework.ai.openai.getFunctions": "org.springframework.ai.openai.getFunctions",
            "org.springframework.ai.openai.setFunctions": "org.springframework.ai.openai.setFunctions",
            "org.springframework.ai.openai.hashCod": "org.springframework.ai.openai.hashCod",
            "org.springframework.ai.openai.equals": "org.springframework.ai.openai.equals",
            "org.springframework.ai.openai.getTopK": "org.springframework.ai.openai.getTopK",
            "org.springframework.ai.openai.setTopK": "org.springframework.ai.openai.setTopK",
            "org.springframework.ai.openai.model": "org.springframework.ai.openai.model",
            "org.springframework.ai.openai.frequencyPenalty": "org.springframework.ai.openai.frequencyPenalty",
            "org.springframework.ai.openai.logitBias": "org.springframework.ai.openai.logitBias",
            "org.springframework.ai.openai.logprobs": "org.springframework.ai.openai.logprobs",
            "org.springframework.ai.openai.topLogprobs": "org.springframework.ai.openai.topLogprobs",
            "org.springframework.ai.openai.maxTokens": "org.springframework.ai.openai.maxTokens",
            "org.springframework.ai.openai.n": "org.springframework.ai.openai.n",
            "org.springframework.ai.openai.presencePenalty": "org.springframework.ai.openai.presencePenalty",
            "org.springframework.ai.openai.responseFormat": "org.springframework.ai.openai.responseFormat",
            "org.springframework.ai.openai.seed": "org.springframework.ai.openai.seed",
            "org.springframework.ai.openai.privat": "org.springframework.ai.openai.privat",
            "org.springframework.ai.openai.temperatur": "org.springframework.ai.openai.temperatur",
            "org.springframework.ai.openai.topP": "org.springframework.ai.openai.topP",
            "org.springframework.ai.openai.toolChoi": "org.springframework.ai.openai.toolChoi",
            "org.springframework.ai.openai.user": "org.springframework.ai.openai.user",
            "org.springframework.ai.openai.options": "org.springframework.ai.openai.options"
        },
        "package": "package org.springframework.ai.openai;",
        "property_declarations": [
            "@NestedConfigurationProperty\n\tprivate @JsonProperty(\"stop\") List<String> stop;",
            "private @JsonProperty(\"response_format\") ResponseFormat responseFormat;",
            "private @JsonProperty(\"top_logprobs\") Integer topLogprobs;",
            "private @JsonProperty(\"frequency_penalty\") Float frequencyPenalty;",
            "private @JsonProperty(\"presence_penalty\") Float presencePenalty;",
            "private @JsonProperty(\"seed\") Integer seed;",
            "private @JsonProperty(\"temperature\") Float temperature;",
            "private @JsonProperty(\"user\") String user;",
            "protected OpenAiChatOptions options;",
            "private @JsonProperty(\"max_tokens\") Integer maxTokens;",
            "@NestedConfigurationProperty\n\tprivate @JsonProperty(\"tools\") List<FunctionTool> tools;",
            "private @JsonProperty(\"logprobs\") Boolean logprobs;",
            "private @JsonProperty(\"logit_bias\") Map<String, Integer> logitBias;",
            "private @JsonProperty(\"model\") String model;",
            "private @JsonProperty(\"n\") Integer n;",
            "@NestedConfigurationProperty\n\t@JsonIgnore\n\tprivate Set<String> functions = new HashSet<>();",
            "private @JsonProperty(\"tool_choice\") String toolChoice;",
            "@NestedConfigurationProperty\n\t@JsonIgnore\n\tprivate List<FunctionCallback> functionCallbacks = new ArrayList<>();",
            "private @JsonProperty(\"top_p\") Float topP;"
        ],
        "functions": [
            {
                "name": "builder",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Builder();",
                "is_abstract": "",
                "class_name": "OpenAiChatOptions",
                "annotations": []
            },
            {
                "name": "withModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.model = model;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "OpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withFrequencyPenalty",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.frequencyPenalty = frequencyPenalty;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "OpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withLogitBias",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.logitBias = logitBias;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "OpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withLogprobs",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.logprobs = logprobs;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "OpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withTopLogprobs",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.topLogprobs = topLogprobs;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "OpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withMaxTokens",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.maxTokens = maxTokens;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "OpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withN",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.n = n;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "OpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withPresencePenalty",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.presencePenalty = presencePenalty;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "OpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withResponseFormat",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.responseFormat = responseFormat;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "OpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withSeed",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.seed = seed;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "OpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withStop",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.stop = stop;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "OpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withTemperature",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.temperature = temperature;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "OpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withTopP",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.topP = topP;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "OpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withTools",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.tools = tools;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "OpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withToolChoice",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.toolChoice = toolChoice;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "OpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withUser",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.user = user;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "OpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withFunctionCallbacks",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.functionCallbacks = functionCallbacks;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "OpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withFunctions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(functionNames, \"Function names must not be null\");\n\t\t\tthis.options.functions = functionNames;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "OpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withFunction",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.hasText(functionName, \"Function name must not be empty\");\n\t\t\tthis.options.functions.add(functionName);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "OpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "build",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.options;",
                "is_abstract": "",
                "class_name": "OpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.model;",
                "is_abstract": "",
                "class_name": "OpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.model = model;",
                "is_abstract": "",
                "class_name": "OpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getFrequencyPenalty",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.frequencyPenalty;",
                "is_abstract": "",
                "class_name": "OpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setFrequencyPenalty",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.frequencyPenalty = frequencyPenalty;",
                "is_abstract": "",
                "class_name": "OpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getLogitBias",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.logitBias;",
                "is_abstract": "",
                "class_name": "OpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setLogitBias",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.logitBias = logitBias;",
                "is_abstract": "",
                "class_name": "OpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getLogprobs",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.logprobs;",
                "is_abstract": "",
                "class_name": "OpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setLogprobs",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.logprobs = logprobs;",
                "is_abstract": "",
                "class_name": "OpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getTopLogprobs",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.topLogprobs;",
                "is_abstract": "",
                "class_name": "OpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setTopLogprobs",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.topLogprobs = topLogprobs;",
                "is_abstract": "",
                "class_name": "OpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getMaxTokens",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.maxTokens;",
                "is_abstract": "",
                "class_name": "OpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setMaxTokens",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.maxTokens = maxTokens;",
                "is_abstract": "",
                "class_name": "OpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getN",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.n;",
                "is_abstract": "",
                "class_name": "OpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setN",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.n = n;",
                "is_abstract": "",
                "class_name": "OpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getPresencePenalty",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.presencePenalty;",
                "is_abstract": "",
                "class_name": "OpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setPresencePenalty",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.presencePenalty = presencePenalty;",
                "is_abstract": "",
                "class_name": "OpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getResponseFormat",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.responseFormat;",
                "is_abstract": "",
                "class_name": "OpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setResponseFormat",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.responseFormat = responseFormat;",
                "is_abstract": "",
                "class_name": "OpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getSeed",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.seed;",
                "is_abstract": "",
                "class_name": "OpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setSeed",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.seed = seed;",
                "is_abstract": "",
                "class_name": "OpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getStop",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.stop;",
                "is_abstract": "",
                "class_name": "OpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setStop",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.stop = stop;",
                "is_abstract": "",
                "class_name": "OpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getTemperature",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.temperature;",
                "is_abstract": "",
                "class_name": "OpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setTemperature",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.temperature = temperature;",
                "is_abstract": "",
                "class_name": "OpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getTopP",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.topP;",
                "is_abstract": "",
                "class_name": "OpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setTopP",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.topP = topP;",
                "is_abstract": "",
                "class_name": "OpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getTools",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.tools;",
                "is_abstract": "",
                "class_name": "OpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setTools",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.tools = tools;",
                "is_abstract": "",
                "class_name": "OpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getToolChoice",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.toolChoice;",
                "is_abstract": "",
                "class_name": "OpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setToolChoice",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.toolChoice = toolChoice;",
                "is_abstract": "",
                "class_name": "OpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getUser",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.user;",
                "is_abstract": "",
                "class_name": "OpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setUser",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.user = user;",
                "is_abstract": "",
                "class_name": "OpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getFunctionCallbacks",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.functionCallbacks;",
                "is_abstract": "",
                "class_name": "OpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setFunctionCallbacks",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.functionCallbacks = functionCallbacks;",
                "is_abstract": "",
                "class_name": "OpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getFunctions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return functions;",
                "is_abstract": "",
                "class_name": "OpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setFunctions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.functions = functionNames;",
                "is_abstract": "",
                "class_name": "OpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "hashCode",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "final int prime = 31;\n\t\tint result = 1;\n\t\tresult = prime * result + ((model == null) ? 0 : model.hashCode());\n\t\tresult = prime * result + ((frequencyPenalty == null) ? 0 : frequencyPenalty.hashCode());\n\t\tresult = prime * result + ((logitBias == null) ? 0 : logitBias.hashCode());\n\t\tresult = prime * result + ((logprobs == null) ? 0 : logprobs.hashCode());\n\t\tresult = prime * result + ((topLogprobs == null) ? 0 : topLogprobs.hashCode());\n\t\tresult = prime * result + ((maxTokens == null) ? 0 : maxTokens.hashCode());\n\t\tresult = prime * result + ((n == null) ? 0 : n.hashCode());\n\t\tresult = prime * result + ((presencePenalty == null) ? 0 : presencePenalty.hashCode());\n\t\tresult = prime * result + ((responseFormat == null) ? 0 : responseFormat.hashCode());\n\t\tresult = prime * result + ((seed == null) ? 0 : seed.hashCode());\n\t\tresult = prime * result + ((stop == null) ? 0 : stop.hashCode());\n\t\tresult = prime * result + ((temperature == null) ? 0 : temperature.hashCode());\n\t\tresult = prime * result + ((topP == null) ? 0 : topP.hashCode());\n\t\tresult = prime * result + ((tools == null) ? 0 : tools.hashCode());\n\t\tresult = prime * result + ((toolChoice == null) ? 0 : toolChoice.hashCode());\n\t\tresult = prime * result + ((user == null) ? 0 : user.hashCode());\n\t\treturn result;",
                "is_abstract": "",
                "class_name": "OpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "equals",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (this == obj)\n\t\t\treturn true;\n\t\tif (obj == null)\n\t\t\treturn false;\n\t\tif (getClass() != obj.getClass())\n\t\t\treturn false;\n\t\tOpenAiChatOptions other = (OpenAiChatOptions) obj;\n\t\tif (this.model == null) {\n\t\t\tif (other.model != null)\n\t\t\t\treturn false;\n\t\t}\n\t\telse if (!model.equals(other.model))\n\t\t\treturn false;\n\t\tif (this.frequencyPenalty == null) {\n\t\t\tif (other.frequencyPenalty != null)\n\t\t\t\treturn false;\n\t\t}\n\t\telse if (!this.frequencyPenalty.equals(other.frequencyPenalty))\n\t\t\treturn false;\n\t\tif (this.logitBias == null) {\n\t\t\tif (other.logitBias != null)\n\t\t\t\treturn false;\n\t\t}\n\t\telse if (!this.logitBias.equals(other.logitBias))\n\t\t\treturn false;\n\t\tif (this.logprobs == null) {\n\t\t\tif (other.logprobs != null)\n\t\t\t\treturn false;\n\t\t}\n\t\telse if (!this.logprobs.equals(other.logprobs))\n\t\t\treturn false;\n\t\tif (this.topLogprobs == null) {\n\t\t\tif (other.topLogprobs != null)\n\t\t\t\treturn false;\n\t\t}\n\t\telse if (!this.topLogprobs.equals(other.topLogprobs))\n\t\t\treturn false;\n\t\tif (this.maxTokens == null) {\n\t\t\tif (other.maxTokens != null)\n\t\t\t\treturn false;\n\t\t}\n\t\telse if (!this.maxTokens.equals(other.maxTokens))\n\t\t\treturn false;\n\t\tif (this.n == null) {\n\t\t\tif (other.n != null)\n\t\t\t\treturn false;\n\t\t}\n\t\telse if (!this.n.equals(other.n))\n\t\t\treturn false;\n\t\tif (this.presencePenalty == null) {\n\t\t\tif (other.presencePenalty != null)\n\t\t\t\treturn false;\n\t\t}\n\t\telse if (!this.presencePenalty.equals(other.presencePenalty))\n\t\t\treturn false;\n\t\tif (this.responseFormat == null) {\n\t\t\tif (other.responseFormat != null)\n\t\t\t\treturn false;\n\t\t}\n\t\telse if (!this.responseFormat.equals(other.responseFormat))\n\t\t\treturn false;\n\t\tif (this.seed == null) {\n\t\t\tif (other.seed != null)\n\t\t\t\treturn false;\n\t\t}\n\t\telse if (!this.seed.equals(other.seed))\n\t\t\treturn false;\n\t\tif (this.stop == null) {\n\t\t\tif (other.stop != null)\n\t\t\t\treturn false;\n\t\t}\n\t\telse if (!stop.equals(other.stop))\n\t\t\treturn false;\n\t\tif (this.temperature == null) {\n\t\t\tif (other.temperature != null)\n\t\t\t\treturn false;\n\t\t}\n\t\telse if (!this.temperature.equals(other.temperature))\n\t\t\treturn false;\n\t\tif (this.topP == null) {\n\t\t\tif (other.topP != null)\n\t\t\t\treturn false;\n\t\t}\n\t\telse if (!topP.equals(other.topP))\n\t\t\treturn false;\n\t\tif (this.tools == null) {\n\t\t\tif (other.tools != null)\n\t\t\t\treturn false;\n\t\t}\n\t\telse if (!tools.equals(other.tools))\n\t\t\treturn false;\n\t\tif (this.toolChoice == null) {\n\t\t\tif (other.toolChoice != null)\n\t\t\t\treturn false;\n\t\t}\n\t\telse if (!toolChoice.equals(other.toolChoice))\n\t\t\treturn false;\n\t\tif (this.user == null) {\n\t\t\tif (other.user != null)\n\t\t\t\treturn false;\n\t\t}\n\t\telse if (!this.user.equals(other.user))\n\t\t\treturn false;\n\t\treturn true;",
                "is_abstract": "",
                "class_name": "OpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getTopK",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "throw new UnsupportedOperationException(\"Unimplemented method 'getTopK'\");",
                "is_abstract": "",
                "class_name": "OpenAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setTopK",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "throw new UnsupportedOperationException(\"Unimplemented method 'setTopK'\");",
                "is_abstract": "",
                "class_name": "OpenAiChatOptions Builder",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-openai/src/main/java/org/springframework/ai/openai/OpenAiAudioTranscriptionOptions.java",
        "class_names": [
            "Builder",
            "OpenAiAudioTranscriptionOptions"
        ],
        "imports": "import org.springframework.ai.openai.api.OpenAiAudioApi.TranscriptionRequest.GranularityType;\nimport org.springframework.ai.model.ModelOptions;\nimport com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport org.springframework.ai.openai.api.OpenAiAudioApi.TranscriptResponseFormat;",
        "package_import_paths": {
            "org.springframework.ai.openai.OpenAiAudioTranscriptionOptions": "org.springframework.ai.openai.OpenAiAudioTranscriptionOptions",
            "org.springframework.ai.openai.Builder": "org.springframework.ai.openai.Builder",
            "org.springframework.ai.openai.builder": "org.springframework.ai.openai.builder",
            "org.springframework.ai.openai.withModel": "org.springframework.ai.openai.withModel",
            "org.springframework.ai.openai.withLangu": "org.springframework.ai.openai.withLangu",
            "org.springframework.ai.openai.withPrompt": "org.springframework.ai.openai.withPrompt",
            "org.springframework.ai.openai.withResponseFormat": "org.springframework.ai.openai.withResponseFormat",
            "org.springframework.ai.openai.withTemperatur": "org.springframework.ai.openai.withTemperatur",
            "org.springframework.ai.openai.withGranularityTy": "org.springframework.ai.openai.withGranularityTy",
            "org.springframework.ai.openai.build": "org.springframework.ai.openai.build",
            "org.springframework.ai.openai.getModel": "org.springframework.ai.openai.getModel",
            "org.springframework.ai.openai.setModel": "org.springframework.ai.openai.setModel",
            "org.springframework.ai.openai.getLangu": "org.springframework.ai.openai.getLangu",
            "org.springframework.ai.openai.setLangu": "org.springframework.ai.openai.setLangu",
            "org.springframework.ai.openai.getPrompt": "org.springframework.ai.openai.getPrompt",
            "org.springframework.ai.openai.setPrompt": "org.springframework.ai.openai.setPrompt",
            "org.springframework.ai.openai.getTemperatur": "org.springframework.ai.openai.getTemperatur",
            "org.springframework.ai.openai.setTemperatur": "org.springframework.ai.openai.setTemperatur",
            "org.springframework.ai.openai.getResponseFormat": "org.springframework.ai.openai.getResponseFormat",
            "org.springframework.ai.openai.setResponseFormat": "org.springframework.ai.openai.setResponseFormat",
            "org.springframework.ai.openai.getGranularityTy": "org.springframework.ai.openai.getGranularityTy",
            "org.springframework.ai.openai.setGranularityTy": "org.springframework.ai.openai.setGranularityTy",
            "org.springframework.ai.openai.hashCod": "org.springframework.ai.openai.hashCod",
            "org.springframework.ai.openai.equals": "org.springframework.ai.openai.equals",
            "org.springframework.ai.openai.model": "org.springframework.ai.openai.model",
            "org.springframework.ai.openai.responseFormat": "org.springframework.ai.openai.responseFormat",
            "org.springframework.ai.openai.prompt": "org.springframework.ai.openai.prompt",
            "org.springframework.ai.openai.langu": "org.springframework.ai.openai.langu",
            "org.springframework.ai.openai.temperatur": "org.springframework.ai.openai.temperatur",
            "org.springframework.ai.openai.granularityTy": "org.springframework.ai.openai.granularityTy",
            "org.springframework.ai.openai.options": "org.springframework.ai.openai.options"
        },
        "package": "package org.springframework.ai.openai;",
        "property_declarations": [
            "private @JsonProperty(\"model\") String model;",
            "private @JsonProperty(\"temperature\") Float temperature;",
            "protected OpenAiAudioTranscriptionOptions options;",
            "private @JsonProperty(\"language\") String language;",
            "private @JsonProperty(\"timestamp_granularities\") GranularityType granularityType;",
            "private @JsonProperty(\"response_format\") TranscriptResponseFormat responseFormat;",
            "private @JsonProperty(\"prompt\") String prompt;"
        ],
        "functions": [
            {
                "name": "builder",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Builder();",
                "is_abstract": "",
                "class_name": "OpenAiAudioTranscriptionOptions",
                "annotations": []
            },
            {
                "name": "withModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.model = model;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "OpenAiAudioTranscriptionOptions Builder",
                "annotations": []
            },
            {
                "name": "withLanguage",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.language = language;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "OpenAiAudioTranscriptionOptions Builder",
                "annotations": []
            },
            {
                "name": "withPrompt",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.prompt = prompt;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "OpenAiAudioTranscriptionOptions Builder",
                "annotations": []
            },
            {
                "name": "withResponseFormat",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.responseFormat = responseFormat;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "OpenAiAudioTranscriptionOptions Builder",
                "annotations": []
            },
            {
                "name": "withTemperature",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.temperature = temperature;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "OpenAiAudioTranscriptionOptions Builder",
                "annotations": []
            },
            {
                "name": "withGranularityType",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.granularityType = granularityType;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "OpenAiAudioTranscriptionOptions Builder",
                "annotations": []
            },
            {
                "name": "build",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.options;",
                "is_abstract": "",
                "class_name": "OpenAiAudioTranscriptionOptions Builder",
                "annotations": []
            },
            {
                "name": "getModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.model;",
                "is_abstract": "",
                "class_name": "OpenAiAudioTranscriptionOptions Builder",
                "annotations": []
            },
            {
                "name": "setModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.model = model;",
                "is_abstract": "",
                "class_name": "OpenAiAudioTranscriptionOptions Builder",
                "annotations": []
            },
            {
                "name": "getLanguage",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.language;",
                "is_abstract": "",
                "class_name": "OpenAiAudioTranscriptionOptions Builder",
                "annotations": []
            },
            {
                "name": "setLanguage",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.language = language;",
                "is_abstract": "",
                "class_name": "OpenAiAudioTranscriptionOptions Builder",
                "annotations": []
            },
            {
                "name": "getPrompt",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.prompt;",
                "is_abstract": "",
                "class_name": "OpenAiAudioTranscriptionOptions Builder",
                "annotations": []
            },
            {
                "name": "setPrompt",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.prompt = prompt;",
                "is_abstract": "",
                "class_name": "OpenAiAudioTranscriptionOptions Builder",
                "annotations": []
            },
            {
                "name": "getTemperature",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.temperature;",
                "is_abstract": "",
                "class_name": "OpenAiAudioTranscriptionOptions Builder",
                "annotations": []
            },
            {
                "name": "setTemperature",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.temperature = temperature;",
                "is_abstract": "",
                "class_name": "OpenAiAudioTranscriptionOptions Builder",
                "annotations": []
            },
            {
                "name": "getResponseFormat",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.responseFormat;",
                "is_abstract": "",
                "class_name": "OpenAiAudioTranscriptionOptions Builder",
                "annotations": []
            },
            {
                "name": "setResponseFormat",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.responseFormat = responseFormat;",
                "is_abstract": "",
                "class_name": "OpenAiAudioTranscriptionOptions Builder",
                "annotations": []
            },
            {
                "name": "getGranularityType",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.granularityType;",
                "is_abstract": "",
                "class_name": "OpenAiAudioTranscriptionOptions Builder",
                "annotations": []
            },
            {
                "name": "setGranularityType",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.granularityType = granularityType;",
                "is_abstract": "",
                "class_name": "OpenAiAudioTranscriptionOptions Builder",
                "annotations": []
            },
            {
                "name": "hashCode",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "final int prime = 31;\n\t\tint result = 1;\n\t\tresult = prime * result + ((model == null) ? 0 : model.hashCode());\n\t\tresult = prime * result + ((prompt == null) ? 0 : prompt.hashCode());\n\t\tresult = prime * result + ((language == null) ? 0 : language.hashCode());\n\t\tresult = prime * result + ((responseFormat == null) ? 0 : responseFormat.hashCode());\n\t\treturn result;",
                "is_abstract": "",
                "class_name": "OpenAiAudioTranscriptionOptions Builder",
                "annotations": []
            },
            {
                "name": "equals",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (this == obj)\n\t\t\treturn true;\n\t\tif (obj == null)\n\t\t\treturn false;\n\t\tif (getClass() != obj.getClass())\n\t\t\treturn false;\n\t\tOpenAiAudioTranscriptionOptions other = (OpenAiAudioTranscriptionOptions) obj;\n\t\tif (this.model == null) {\n\t\t\tif (other.model != null)\n\t\t\t\treturn false;\n\t\t}\n\t\telse if (!model.equals(other.model))\n\t\t\treturn false;\n\t\tif (this.prompt == null) {\n\t\t\tif (other.prompt != null)\n\t\t\t\treturn false;\n\t\t}\n\t\telse if (!this.prompt.equals(other.prompt))\n\t\t\treturn false;\n\t\tif (this.language == null) {\n\t\t\tif (other.language != null)\n\t\t\t\treturn false;\n\t\t}\n\t\telse if (!this.language.equals(other.language))\n\t\t\treturn false;\n\t\tif (this.responseFormat == null) {\n\t\t\tif (other.responseFormat != null)\n\t\t\t\treturn false;\n\t\t}\n\t\telse if (!this.responseFormat.equals(other.responseFormat))\n\t\t\treturn false;\n\t\treturn true;",
                "is_abstract": "",
                "class_name": "OpenAiAudioTranscriptionOptions Builder",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-openai/src/main/java/org/springframework/ai/openai/OpenAiChatClient.java",
        "class_names": [
            "OpenAiChatClient"
        ],
        "imports": "import org.springframework.ai.retry.RetryUtils;\nimport org.springframework.ai.openai.api.OpenAiApi.ChatCompletionMessage.MediaContent;\nimport java.util.List;\nimport org.springframework.retry.support.RetryTemplate;\nimport org.springframework.ai.chat.Generation;\nimport org.springframework.ai.chat.ChatClient;\nimport reactor.core.publisher.Flux;\nimport java.util.Base64;\nimport org.springframework.util.CollectionUtils;\nimport org.springframework.ai.model.function.FunctionCallbackContext;\nimport org.springframework.ai.openai.api.OpenAiApi.ChatCompletionRequest;\nimport java.util.concurrent.ConcurrentHashMap;\nimport org.slf4j.Logger;\nimport java.util.Map;\nimport org.springframework.ai.chat.prompt.ChatOptions;\nimport org.springframework.ai.openai.api.OpenAiApi.ChatCompletionFinishReason;\nimport org.springframework.ai.chat.ChatResponse;\nimport java.util.HashSet;\nimport org.springframework.ai.openai.api.OpenAiApi.ChatCompletionMessage.ToolCall;\nimport org.springframework.ai.openai.api.OpenAiApi;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.ai.openai.api.OpenAiApi.ChatCompletionMessage;\nimport org.springframework.ai.openai.metadata.OpenAiChatResponseMetadata;\nimport java.util.HashMap;\nimport org.springframework.ai.model.ModelOptionsUtils;\nimport org.springframework.ai.model.function.AbstractFunctionCallSupport;\nimport org.springframework.ai.openai.api.OpenAiApi.ChatCompletion;\nimport org.springframework.util.MimeType;\nimport java.util.Set;\nimport org.springframework.ai.openai.api.OpenAiApi.ChatCompletion.Choice;\nimport org.springframework.ai.openai.metadata.support.OpenAiResponseHeaderExtractor;\nimport java.util.ArrayList;\nimport org.springframework.ai.chat.prompt.Prompt;\nimport org.springframework.ai.openai.api.OpenAiApi.ChatCompletionMessage.Role;\nimport org.springframework.util.Assert;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.ai.chat.metadata.RateLimit;\nimport org.springframework.ai.chat.StreamingChatClient;\nimport org.springframework.ai.chat.metadata.ChatGenerationMetadata;\nimport java.util.Optional;",
        "package_import_paths": {
            "org.springframework.ai.openai.OpenAiChatClient": "org.springframework.ai.openai.OpenAiChatClient",
            "org.springframework.ai.openai.call": "org.springframework.ai.openai.call",
            "org.springframework.ai.openai.toM": "org.springframework.ai.openai.toM",
            "org.springframework.ai.openai.stream": "org.springframework.ai.openai.stream",
            "org.springframework.ai.openai.chunkToChatCompletion": "org.springframework.ai.openai.chunkToChatCompletion",
            "org.springframework.ai.openai.createRequest": "org.springframework.ai.openai.createRequest",
            "org.springframework.ai.openai.fromMediaDat": "org.springframework.ai.openai.fromMediaDat",
            "org.springframework.ai.openai.getFunctionTools": "org.springframework.ai.openai.getFunctionTools",
            "org.springframework.ai.openai.doCreateToolResponseRequest": "org.springframework.ai.openai.doCreateToolResponseRequest",
            "org.springframework.ai.openai.doGetUserMessages": "org.springframework.ai.openai.doGetUserMessages",
            "org.springframework.ai.openai.doGetToolResponseMess": "org.springframework.ai.openai.doGetToolResponseMess",
            "org.springframework.ai.openai.doChatCompletion": "org.springframework.ai.openai.doChatCompletion",
            "org.springframework.ai.openai.isToolFunctionCall": "org.springframework.ai.openai.isToolFunctionCall",
            "org.springframework.ai.openai.logger": "org.springframework.ai.openai.logger",
            "org.springframework.ai.openai.defaultOptions": "org.springframework.ai.openai.defaultOptions",
            "org.springframework.ai.openai.retryTemplat": "org.springframework.ai.openai.retryTemplat",
            "org.springframework.ai.openai.openAiApi": "org.springframework.ai.openai.openAiApi"
        },
        "package": "package org.springframework.ai.openai;",
        "property_declarations": [
            "private static final Logger logger = LoggerFactory.getLogger(OpenAiChatClient.class);",
            "private final OpenAiApi openAiApi;",
            "public final RetryTemplate retryTemplate;",
            "private OpenAiChatOptions defaultOptions;"
        ],
        "functions": [
            {
                "name": "call",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "ChatCompletionRequest request = createRequest(prompt, false);\n\n\t\treturn this.retryTemplate.execute(ctx -> {\n\n\t\t\tResponseEntity<ChatCompletion> completionEntity = this.callWithFunctionSupport(request);\n\n\t\t\tvar chatCompletion = completionEntity.getBody();\n\t\t\tif (chatCompletion == null) {\n\t\t\t\tlogger.warn(\"No chat completion returned for prompt: {}\", prompt);\n\t\t\t\treturn new ChatResponse(List.of());\n\t\t\t}\n\n\t\t\tRateLimit rateLimits = OpenAiResponseHeaderExtractor.extractAiResponseHeaders(completionEntity);\n\n\t\t\tList<Generation> generations = chatCompletion.choices().stream().map(choice -> {\n\t\t\t\treturn new Generation(choice.message().content(), toMap(chatCompletion.id(), choice))\n\t\t\t\t\t.withGenerationMetadata(ChatGenerationMetadata.from(choice.finishReason().name(), null));\n\t\t\t}).toList();\n\n\t\t\treturn new ChatResponse(generations,\n\t\t\t\t\tOpenAiChatResponseMetadata.from(completionEntity.getBody()).withRateLimit(rateLimits));\n\t\t});",
                "is_abstract": "",
                "class_name": "OpenAiChatClient",
                "annotations": []
            },
            {
                "name": "toMap",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Map<String, Object> map = new HashMap<>();\n\n\t\tvar message = choice.message();\n\t\tif (message.role() != null) {\n\t\t\tmap.put(\"role\", message.role().name());\n\t\t}\n\t\tif (choice.finishReason() != null) {\n\t\t\tmap.put(\"finishReason\", choice.finishReason().name());\n\t\t}\n\t\tmap.put(\"id\", id);\n\t\treturn map;",
                "is_abstract": "",
                "class_name": "OpenAiChatClient",
                "annotations": []
            },
            {
                "name": "stream",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "ChatCompletionRequest request = createRequest(prompt, true);\n\n\t\treturn this.retryTemplate.execute(ctx -> {\n\n\t\t\tFlux<OpenAiApi.ChatCompletionChunk> completionChunks = this.openAiApi.chatCompletionStream(request);\n\n\t\t\t// For chunked responses, only the first chunk contains the choice role.\n\t\t\t// The rest of the chunks with same ID share the same role.\n\t\t\tConcurrentHashMap<String, String> roleMap = new ConcurrentHashMap<>();\n\n\t\t\t// Convert the ChatCompletionChunk into a ChatCompletion to be able to reuse\n\t\t\t// the function call handling logic.\n\t\t\treturn completionChunks.map(chunk -> chunkToChatCompletion(chunk)).map(chatCompletion -> {\n\t\t\t\ttry {\n\t\t\t\t\tchatCompletion = handleFunctionCallOrReturn(request, ResponseEntity.of(Optional.of(chatCompletion)))\n\t\t\t\t\t\t.getBody();\n\n\t\t\t\t\t@SuppressWarnings(\"null\")\n\t\t\t\t\tString id = chatCompletion.id();\n\n\t\t\t\t\tList<Generation> generations = chatCompletion.choices().stream().map(choice -> {\n\t\t\t\t\t\tif (choice.message().role() != null) {\n\t\t\t\t\t\t\troleMap.putIfAbsent(id, choice.message().role().name());\n\t\t\t\t\t\t}\n\t\t\t\t\t\tString finish = (choice.finishReason() != null ? choice.finishReason().name() : \"\");\n\t\t\t\t\t\tvar generation = new Generation(choice.message().content(),\n\t\t\t\t\t\t\t\tMap.of(\"id\", id, \"role\", roleMap.get(id), \"finishReason\", finish));\n\t\t\t\t\t\tif (choice.finishReason() != null) {\n\t\t\t\t\t\t\tgeneration = generation.withGenerationMetadata(\n\t\t\t\t\t\t\t\t\tChatGenerationMetadata.from(choice.finishReason().name(), null));\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn generation;\n\t\t\t\t\t}).toList();\n\n\t\t\t\t\treturn new ChatResponse(generations);\n\t\t\t\t}\n\t\t\t\tcatch (Exception e) {\n\t\t\t\t\tlogger.error(\"Error processing chat completion\", e);\n\t\t\t\t\treturn new ChatResponse(List.of());\n\t\t\t\t}\n\n\t\t\t});\n\t\t});",
                "is_abstract": "",
                "class_name": "OpenAiChatClient",
                "annotations": [
                    "@SuppressWarnings(\"null\")"
                ]
            },
            {
                "name": "chunkToChatCompletion",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "List<Choice> choices = chunk.choices()\n\t\t\t.stream()\n\t\t\t.map(cc -> new Choice(cc.finishReason(), cc.index(), cc.delta(), cc.logprobs()))\n\t\t\t.toList();\n\n\t\treturn new OpenAiApi.ChatCompletion(chunk.id(), choices, chunk.created(), chunk.model(),\n\t\t\t\tchunk.systemFingerprint(), \"chat.completion\", null);",
                "is_abstract": "",
                "class_name": "OpenAiChatClient",
                "annotations": []
            },
            {
                "name": "createRequest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Set<String> functionsForThisRequest = new HashSet<>();\n\n\t\tList<ChatCompletionMessage> chatCompletionMessages = prompt.getInstructions().stream().map(m -> {\n\t\t\t// Add text content.\n\t\t\tList<MediaContent> contents = new ArrayList<>(List.of(new MediaContent(m.getContent())));\n\t\t\tif (!CollectionUtils.isEmpty(m.getMedia())) {\n\t\t\t\t// Add media content.\n\t\t\t\tcontents.addAll(m.getMedia()\n\t\t\t\t\t.stream()\n\t\t\t\t\t.map(media -> new MediaContent(\n\t\t\t\t\t\t\tnew MediaContent.ImageUrl(this.fromMediaData(media.getMimeType(), media.getData()))))\n\t\t\t\t\t.toList());\n\t\t\t}\n\n\t\t\treturn new ChatCompletionMessage(contents, ChatCompletionMessage.Role.valueOf(m.getMessageType().name()));\n\t\t}).toList();\n\n\t\tChatCompletionRequest request = new ChatCompletionRequest(chatCompletionMessages, stream);\n\n\t\tif (prompt.getOptions() != null) {\n\t\t\tif (prompt.getOptions() instanceof ChatOptions runtimeOptions) {\n\t\t\t\tOpenAiChatOptions updatedRuntimeOptions = ModelOptionsUtils.copyToTarget(runtimeOptions,\n\t\t\t\t\t\tChatOptions.class, OpenAiChatOptions.class);\n\n\t\t\t\tSet<String> promptEnabledFunctions = this.handleFunctionCallbackConfigurations(updatedRuntimeOptions,\n\t\t\t\t\t\tIS_RUNTIME_CALL);\n\t\t\t\tfunctionsForThisRequest.addAll(promptEnabledFunctions);\n\n\t\t\t\trequest = ModelOptionsUtils.merge(updatedRuntimeOptions, request, ChatCompletionRequest.class);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new IllegalArgumentException(\"Prompt options are not of type ChatOptions: \"\n\t\t\t\t\t\t+ prompt.getOptions().getClass().getSimpleName());\n\t\t\t}\n\t\t}\n\n\t\tif (this.defaultOptions != null) {\n\n\t\t\tSet<String> defaultEnabledFunctions = this.handleFunctionCallbackConfigurations(this.defaultOptions,\n\t\t\t\t\t!IS_RUNTIME_CALL);\n\n\t\t\tfunctionsForThisRequest.addAll(defaultEnabledFunctions);\n\n\t\t\trequest = ModelOptionsUtils.merge(request, this.defaultOptions, ChatCompletionRequest.class);\n\t\t}\n\n\t\t// Add the enabled functions definitions to the request's tools parameter.\n\t\tif (!CollectionUtils.isEmpty(functionsForThisRequest)) {\n\n\t\t\trequest = ModelOptionsUtils.merge(\n\t\t\t\t\tOpenAiChatOptions.builder().withTools(this.getFunctionTools(functionsForThisRequest)).build(),\n\t\t\t\t\trequest, ChatCompletionRequest.class);\n\t\t}\n\n\t\treturn request;",
                "is_abstract": "",
                "class_name": "OpenAiChatClient",
                "annotations": []
            },
            {
                "name": "fromMediaData",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (mediaContentData instanceof byte[] bytes) {\n\t\t\t// Assume the bytes are an image. So, convert the bytes to a base64 encoded\n\t\t\t// following the prefix pattern.\n\t\t\treturn String.format(\"data:%s;base64,%s\", mimeType.toString(), Base64.getEncoder().encodeToString(bytes));\n\t\t}\n\t\telse if (mediaContentData instanceof String text) {\n\t\t\t// Assume the text is a URLs or a base64 encoded image prefixed by the user.\n\t\t\treturn text;\n\t\t}\n\t\telse {\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\"Unsupported media data type: \" + mediaContentData.getClass().getSimpleName());\n\t\t}",
                "is_abstract": "",
                "class_name": "OpenAiChatClient",
                "annotations": []
            },
            {
                "name": "getFunctionTools",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.resolveFunctionCallbacks(functionNames).stream().map(functionCallback -> {\n\t\t\tvar function = new OpenAiApi.FunctionTool.Function(functionCallback.getDescription(),\n\t\t\t\t\tfunctionCallback.getName(), functionCallback.getInputTypeSchema());\n\t\t\treturn new OpenAiApi.FunctionTool(function);\n\t\t}).toList();",
                "is_abstract": "",
                "class_name": "OpenAiChatClient",
                "annotations": []
            },
            {
                "name": "doCreateToolResponseRequest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// Every tool-call item requires a separate function call and a response (TOOL)\n\t\t// message.\n\t\tfor (ToolCall toolCall : responseMessage.toolCalls()) {\n\n\t\t\tvar functionName = toolCall.function().name();\n\t\t\tString functionArguments = toolCall.function().arguments();\n\n\t\t\tif (!this.functionCallbackRegister.containsKey(functionName)) {\n\t\t\t\tthrow new IllegalStateException(\"No function callback found for function name: \" + functionName);\n\t\t\t}\n\n\t\t\tString functionResponse = this.functionCallbackRegister.get(functionName).call(functionArguments);\n\n\t\t\t// Add the function response to the conversation.\n\t\t\tconversationHistory\n\t\t\t\t.add(new ChatCompletionMessage(functionResponse, Role.TOOL, functionName, toolCall.id(), null));\n\t\t}\n\n\t\t// Recursively call chatCompletionWithTools until the model doesn't call a\n\t\t// functions anymore.\n\t\tChatCompletionRequest newRequest = new ChatCompletionRequest(conversationHistory, false);\n\t\tnewRequest = ModelOptionsUtils.merge(newRequest, previousRequest, ChatCompletionRequest.class);\n\n\t\treturn newRequest;",
                "is_abstract": "",
                "class_name": "OpenAiChatClient",
                "annotations": []
            },
            {
                "name": "doGetUserMessages",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return request.messages();",
                "is_abstract": "",
                "class_name": "OpenAiChatClient",
                "annotations": []
            },
            {
                "name": "doGetToolResponseMessage",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return chatCompletion.getBody().choices().iterator().next().message();",
                "is_abstract": "",
                "class_name": "OpenAiChatClient",
                "annotations": []
            },
            {
                "name": "doChatCompletion",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.openAiApi.chatCompletionEntity(request);",
                "is_abstract": "",
                "class_name": "OpenAiChatClient",
                "annotations": []
            },
            {
                "name": "isToolFunctionCall",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var body = chatCompletion.getBody();\n\t\tif (body == null) {\n\t\t\treturn false;\n\t\t}\n\n\t\tvar choices = body.choices();\n\t\tif (CollectionUtils.isEmpty(choices)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tvar choice = choices.get(0);\n\t\treturn !CollectionUtils.isEmpty(choice.message().toolCalls())\n\t\t\t\t&& choice.finishReason() == ChatCompletionFinishReason.TOOL_CALLS;",
                "is_abstract": "",
                "class_name": "OpenAiChatClient",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-openai/src/main/java/org/springframework/ai/openai/OpenAiImageOptions.java",
        "class_names": [
            "Builder",
            "OpenAiImageOptions"
        ],
        "imports": "import com.fasterxml.jackson.annotation.JsonInclude;\nimport org.springframework.ai.image.ImageOptions;\nimport java.util.Objects;\nimport org.springframework.ai.openai.api.OpenAiImageApi;\nimport com.fasterxml.jackson.annotation.JsonProperty;",
        "package_import_paths": {
            "org.springframework.ai.openai.OpenAiImageOptions": "org.springframework.ai.openai.OpenAiImageOptions",
            "org.springframework.ai.openai.Builder": "org.springframework.ai.openai.Builder",
            "org.springframework.ai.openai.builder": "org.springframework.ai.openai.builder",
            "org.springframework.ai.openai.withN": "org.springframework.ai.openai.withN",
            "org.springframework.ai.openai.withModel": "org.springframework.ai.openai.withModel",
            "org.springframework.ai.openai.withQuality": "org.springframework.ai.openai.withQuality",
            "org.springframework.ai.openai.withResponseFormat": "org.springframework.ai.openai.withResponseFormat",
            "org.springframework.ai.openai.withWidth": "org.springframework.ai.openai.withWidth",
            "org.springframework.ai.openai.withHeight": "org.springframework.ai.openai.withHeight",
            "org.springframework.ai.openai.withStyl": "org.springframework.ai.openai.withStyl",
            "org.springframework.ai.openai.withUser": "org.springframework.ai.openai.withUser",
            "org.springframework.ai.openai.build": "org.springframework.ai.openai.build",
            "org.springframework.ai.openai.getN": "org.springframework.ai.openai.getN",
            "org.springframework.ai.openai.setN": "org.springframework.ai.openai.setN",
            "org.springframework.ai.openai.getModel": "org.springframework.ai.openai.getModel",
            "org.springframework.ai.openai.setModel": "org.springframework.ai.openai.setModel",
            "org.springframework.ai.openai.getQuality": "org.springframework.ai.openai.getQuality",
            "org.springframework.ai.openai.setQuality": "org.springframework.ai.openai.setQuality",
            "org.springframework.ai.openai.getResponseFormat": "org.springframework.ai.openai.getResponseFormat",
            "org.springframework.ai.openai.setResponseFormat": "org.springframework.ai.openai.setResponseFormat",
            "org.springframework.ai.openai.getWidth": "org.springframework.ai.openai.getWidth",
            "org.springframework.ai.openai.setWidth": "org.springframework.ai.openai.setWidth",
            "org.springframework.ai.openai.getHeight": "org.springframework.ai.openai.getHeight",
            "org.springframework.ai.openai.setHeight": "org.springframework.ai.openai.setHeight",
            "org.springframework.ai.openai.getStyl": "org.springframework.ai.openai.getStyl",
            "org.springframework.ai.openai.setStyl": "org.springframework.ai.openai.setStyl",
            "org.springframework.ai.openai.getUser": "org.springframework.ai.openai.getUser",
            "org.springframework.ai.openai.setUser": "org.springframework.ai.openai.setUser",
            "org.springframework.ai.openai.setSiz": "org.springframework.ai.openai.setSiz",
            "org.springframework.ai.openai.getSiz": "org.springframework.ai.openai.getSiz",
            "org.springframework.ai.openai.equals": "org.springframework.ai.openai.equals",
            "org.springframework.ai.openai.hashCod": "org.springframework.ai.openai.hashCod",
            "org.springframework.ai.openai.toStrin": "org.springframework.ai.openai.toStrin",
            "org.springframework.ai.openai.n": "org.springframework.ai.openai.n",
            "org.springframework.ai.openai.model": "org.springframework.ai.openai.model",
            "org.springframework.ai.openai.width": "org.springframework.ai.openai.width",
            "org.springframework.ai.openai.height": "org.springframework.ai.openai.height",
            "org.springframework.ai.openai.quality": "org.springframework.ai.openai.quality",
            "org.springframework.ai.openai.responseFormat": "org.springframework.ai.openai.responseFormat",
            "org.springframework.ai.openai.siz": "org.springframework.ai.openai.siz",
            "org.springframework.ai.openai.styl": "org.springframework.ai.openai.styl",
            "org.springframework.ai.openai.user": "org.springframework.ai.openai.user",
            "org.springframework.ai.openai.options": "org.springframework.ai.openai.options"
        },
        "package": "package org.springframework.ai.openai;",
        "property_declarations": [
            "@JsonProperty(\"style\")\n\tprivate String style;",
            "private final OpenAiImageOptions options;",
            "@JsonProperty(\"user\")\n\tprivate String user;",
            "@JsonProperty(\"quality\")\n\tprivate String quality;",
            "@JsonProperty(\"model\")\n\tprivate String model = OpenAiImageApi.DEFAULT_IMAGE_MODEL;",
            "@JsonProperty(\"size_width\")\n\tprivate Integer width;",
            "@JsonProperty(\"response_format\")\n\tprivate String responseFormat;",
            "@JsonProperty(\"n\")\n\tprivate Integer n;",
            "@JsonProperty(\"size\")\n\tprivate String size;",
            "@JsonProperty(\"size_height\")\n\tprivate Integer height;"
        ],
        "functions": [
            {
                "name": "builder",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Builder();",
                "is_abstract": "",
                "class_name": "OpenAiImageOptions",
                "annotations": []
            },
            {
                "name": "withN",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "options.setN(n);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "OpenAiImageOptions Builder",
                "annotations": []
            },
            {
                "name": "withModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "options.setModel(model);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "OpenAiImageOptions Builder",
                "annotations": []
            },
            {
                "name": "withQuality",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "options.setQuality(quality);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "OpenAiImageOptions Builder",
                "annotations": []
            },
            {
                "name": "withResponseFormat",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "options.setResponseFormat(responseFormat);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "OpenAiImageOptions Builder",
                "annotations": []
            },
            {
                "name": "withWidth",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "options.setWidth(width);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "OpenAiImageOptions Builder",
                "annotations": []
            },
            {
                "name": "withHeight",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "options.setHeight(height);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "OpenAiImageOptions Builder",
                "annotations": []
            },
            {
                "name": "withStyle",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "options.setStyle(style);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "OpenAiImageOptions Builder",
                "annotations": []
            },
            {
                "name": "withUser",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "options.setUser(user);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "OpenAiImageOptions Builder",
                "annotations": []
            },
            {
                "name": "build",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return options;",
                "is_abstract": "",
                "class_name": "OpenAiImageOptions Builder",
                "annotations": []
            },
            {
                "name": "getN",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.n;",
                "is_abstract": "",
                "class_name": "OpenAiImageOptions Builder",
                "annotations": []
            },
            {
                "name": "setN",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.n = n;",
                "is_abstract": "",
                "class_name": "OpenAiImageOptions Builder",
                "annotations": []
            },
            {
                "name": "getModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.model;",
                "is_abstract": "",
                "class_name": "OpenAiImageOptions Builder",
                "annotations": []
            },
            {
                "name": "setModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.model = model;",
                "is_abstract": "",
                "class_name": "OpenAiImageOptions Builder",
                "annotations": []
            },
            {
                "name": "getQuality",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.quality;",
                "is_abstract": "",
                "class_name": "OpenAiImageOptions Builder",
                "annotations": []
            },
            {
                "name": "setQuality",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.quality = quality;",
                "is_abstract": "",
                "class_name": "OpenAiImageOptions Builder",
                "annotations": []
            },
            {
                "name": "getResponseFormat",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return responseFormat;",
                "is_abstract": "",
                "class_name": "OpenAiImageOptions Builder",
                "annotations": []
            },
            {
                "name": "setResponseFormat",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.responseFormat = responseFormat;",
                "is_abstract": "",
                "class_name": "OpenAiImageOptions Builder",
                "annotations": []
            },
            {
                "name": "getWidth",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.width;",
                "is_abstract": "",
                "class_name": "OpenAiImageOptions Builder",
                "annotations": []
            },
            {
                "name": "setWidth",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.width = width;\n\t\tthis.size = this.width + \"x\" + this.height;",
                "is_abstract": "",
                "class_name": "OpenAiImageOptions Builder",
                "annotations": []
            },
            {
                "name": "getHeight",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.height;",
                "is_abstract": "",
                "class_name": "OpenAiImageOptions Builder",
                "annotations": []
            },
            {
                "name": "setHeight",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.height = height;\n\t\tthis.size = this.width + \"x\" + this.height;",
                "is_abstract": "",
                "class_name": "OpenAiImageOptions Builder",
                "annotations": []
            },
            {
                "name": "getStyle",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.style;",
                "is_abstract": "",
                "class_name": "OpenAiImageOptions Builder",
                "annotations": []
            },
            {
                "name": "setStyle",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.style = style;",
                "is_abstract": "",
                "class_name": "OpenAiImageOptions Builder",
                "annotations": []
            },
            {
                "name": "getUser",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.user;",
                "is_abstract": "",
                "class_name": "OpenAiImageOptions Builder",
                "annotations": []
            },
            {
                "name": "setUser",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.user = user;",
                "is_abstract": "",
                "class_name": "OpenAiImageOptions Builder",
                "annotations": []
            },
            {
                "name": "setSize",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.size = size;",
                "is_abstract": "",
                "class_name": "OpenAiImageOptions Builder",
                "annotations": []
            },
            {
                "name": "getSize",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (this.size != null) {\n\t\t\treturn this.size;\n\t\t}\n\t\treturn (this.width != null && this.height != null) ? this.width + \"x\" + this.height : null;",
                "is_abstract": "",
                "class_name": "OpenAiImageOptions Builder",
                "annotations": []
            },
            {
                "name": "equals",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (this == o)\n\t\t\treturn true;\n\t\tif (!(o instanceof OpenAiImageOptions that))\n\t\t\treturn false;\n\t\treturn Objects.equals(n, that.n) && Objects.equals(model, that.model) && Objects.equals(width, that.width)\n\t\t\t\t&& Objects.equals(height, that.height) && Objects.equals(quality, that.quality)\n\t\t\t\t&& Objects.equals(responseFormat, that.responseFormat) && Objects.equals(size, that.size)\n\t\t\t\t&& Objects.equals(style, that.style) && Objects.equals(user, that.user);",
                "is_abstract": "",
                "class_name": "OpenAiImageOptions Builder",
                "annotations": []
            },
            {
                "name": "hashCode",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return Objects.hash(n, model, width, height, quality, responseFormat, size, style, user);",
                "is_abstract": "",
                "class_name": "OpenAiImageOptions Builder",
                "annotations": []
            },
            {
                "name": "toString",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return \"OpenAiImageOptions{\" + \"n=\" + n + \", model='\" + model + '\\'' + \", width=\" + width + \", height=\" + height\n\t\t\t\t+ \", quality='\" + quality + '\\'' + \", responseFormat='\" + responseFormat + '\\'' + \", size='\" + size\n\t\t\t\t+ '\\'' + \", style='\" + style + '\\'' + \", user='\" + user + '\\'' + '}';",
                "is_abstract": "",
                "class_name": "OpenAiImageOptions Builder",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-openai/src/main/java/org/springframework/ai/openai/audio/transcription/AudioTranscription.java",
        "class_names": [
            "AudioTranscription"
        ],
        "imports": "import org.springframework.ai.model.ModelResult;\nimport org.springframework.lang.Nullable;\nimport java.util.Objects;\nimport org.springframework.ai.openai.metadata.audio.OpenAiAudioTranscriptionMetadata;",
        "package_import_paths": {
            "org.springframework.ai.openai.audio.transcription.AudioTranscription": "org.springframework.ai.openai.audio.transcription.AudioTranscription",
            "org.springframework.ai.openai.audio.transcription.getOutput": "org.springframework.ai.openai.audio.transcription.getOutput",
            "org.springframework.ai.openai.audio.transcription.getMetadat": "org.springframework.ai.openai.audio.transcription.getMetadat",
            "org.springframework.ai.openai.audio.transcription.withTranscriptionMetadat": "org.springframework.ai.openai.audio.transcription.withTranscriptionMetadat",
            "org.springframework.ai.openai.audio.transcription.equals": "org.springframework.ai.openai.audio.transcription.equals",
            "org.springframework.ai.openai.audio.transcription.hashCod": "org.springframework.ai.openai.audio.transcription.hashCod",
            "org.springframework.ai.openai.audio.transcription.toStrin": "org.springframework.ai.openai.audio.transcription.toStrin",
            "org.springframework.ai.openai.audio.transcription.text": "org.springframework.ai.openai.audio.transcription.text",
            "org.springframework.ai.openai.audio.transcription.transcriptionMetadat": "org.springframework.ai.openai.audio.transcription.transcriptionMetadat"
        },
        "package": "package org.springframework.ai.openai.audio.transcription;",
        "property_declarations": [
            "private String text;",
            "private OpenAiAudioTranscriptionMetadata transcriptionMetadata;"
        ],
        "functions": [
            {
                "name": "getOutput",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.text;",
                "is_abstract": "",
                "class_name": "AudioTranscription",
                "annotations": []
            },
            {
                "name": "getMetadata",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return transcriptionMetadata != null ? transcriptionMetadata : OpenAiAudioTranscriptionMetadata.NULL;",
                "is_abstract": "",
                "class_name": "AudioTranscription",
                "annotations": []
            },
            {
                "name": "withTranscriptionMetadata",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.transcriptionMetadata = transcriptionMetadata;\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "AudioTranscription",
                "annotations": []
            },
            {
                "name": "equals",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (this == o)\n\t\t\treturn true;\n\t\tif (!(o instanceof AudioTranscription that))\n\t\t\treturn false;\n\t\treturn Objects.equals(text, that.text) && Objects.equals(transcriptionMetadata, that.transcriptionMetadata);",
                "is_abstract": "",
                "class_name": "AudioTranscription",
                "annotations": []
            },
            {
                "name": "hashCode",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return Objects.hash(text, transcriptionMetadata);",
                "is_abstract": "",
                "class_name": "AudioTranscription",
                "annotations": []
            },
            {
                "name": "toString",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return \"Transcript{\" + \"text=\" + text + \", transcriptionMetadata=\" + transcriptionMetadata + '}';",
                "is_abstract": "",
                "class_name": "AudioTranscription",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-openai/src/main/java/org/springframework/ai/openai/audio/transcription/AudioTranscriptionPrompt.java",
        "class_names": [
            "AudioTranscriptionPrompt"
        ],
        "imports": "import org.springframework.ai.model.ModelOptions;\nimport org.springframework.core.io.Resource;\nimport org.springframework.ai.model.ModelRequest;",
        "package_import_paths": {
            "org.springframework.ai.openai.audio.transcription.AudioTranscriptionPrompt": "org.springframework.ai.openai.audio.transcription.AudioTranscriptionPrompt",
            "org.springframework.ai.openai.audio.transcription.getInstructions": "org.springframework.ai.openai.audio.transcription.getInstructions",
            "org.springframework.ai.openai.audio.transcription.getOptions": "org.springframework.ai.openai.audio.transcription.getOptions",
            "org.springframework.ai.openai.audio.transcription.audioResour": "org.springframework.ai.openai.audio.transcription.audioResour",
            "org.springframework.ai.openai.audio.transcription.modelOptions": "org.springframework.ai.openai.audio.transcription.modelOptions"
        },
        "package": "package org.springframework.ai.openai.audio.transcription;",
        "property_declarations": [
            "private Resource audioResource;",
            "private ModelOptions modelOptions;"
        ],
        "functions": [
            {
                "name": "getInstructions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return audioResource;",
                "is_abstract": "",
                "class_name": "AudioTranscriptionPrompt",
                "annotations": []
            },
            {
                "name": "getOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return modelOptions;",
                "is_abstract": "",
                "class_name": "AudioTranscriptionPrompt",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-openai/src/main/java/org/springframework/ai/openai/audio/transcription/AudioTranscriptionResponse.java",
        "class_names": [
            "AudioTranscriptionResponse"
        ],
        "imports": "import org.springframework.ai.openai.metadata.audio.OpenAiAudioTranscriptionResponseMetadata;\nimport java.util.List;\nimport org.springframework.ai.model.ModelResponse;\nimport java.util.Arrays;",
        "package_import_paths": {
            "org.springframework.ai.openai.audio.transcription.AudioTranscriptionRespons": "org.springframework.ai.openai.audio.transcription.AudioTranscriptionRespons",
            "org.springframework.ai.openai.audio.transcription.getResult": "org.springframework.ai.openai.audio.transcription.getResult",
            "org.springframework.ai.openai.audio.transcription.getResults": "org.springframework.ai.openai.audio.transcription.getResults",
            "org.springframework.ai.openai.audio.transcription.getMetadat": "org.springframework.ai.openai.audio.transcription.getMetadat",
            "org.springframework.ai.openai.audio.transcription.transcript": "org.springframework.ai.openai.audio.transcription.transcript",
            "org.springframework.ai.openai.audio.transcription.transcriptionResponseMetadat": "org.springframework.ai.openai.audio.transcription.transcriptionResponseMetadat"
        },
        "package": "package org.springframework.ai.openai.audio.transcription;",
        "property_declarations": [
            "private OpenAiAudioTranscriptionResponseMetadata transcriptionResponseMetadata;",
            "private AudioTranscription transcript;"
        ],
        "functions": [
            {
                "name": "getResult",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return transcript;",
                "is_abstract": "",
                "class_name": "AudioTranscriptionResponse",
                "annotations": []
            },
            {
                "name": "getResults",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return Arrays.asList(transcript);",
                "is_abstract": "",
                "class_name": "AudioTranscriptionResponse",
                "annotations": []
            },
            {
                "name": "getMetadata",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return transcriptionResponseMetadata;",
                "is_abstract": "",
                "class_name": "AudioTranscriptionResponse",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-openai/src/main/java/org/springframework/ai/openai/audio/speech/SpeechPrompt.java",
        "class_names": [
            "SpeechPrompt"
        ],
        "imports": "import org.springframework.ai.model.ModelOptions;\nimport java.util.List;\nimport org.springframework.ai.model.ModelRequest;\nimport org.springframework.ai.openai.OpenAiAudioSpeechOptions;\nimport java.util.Objects;\nimport java.util.Collections;",
        "package_import_paths": {
            "org.springframework.ai.openai.audio.speech.SpeechPrompt": "org.springframework.ai.openai.audio.speech.SpeechPrompt",
            "org.springframework.ai.openai.audio.speech.getInstructions": "org.springframework.ai.openai.audio.speech.getInstructions",
            "org.springframework.ai.openai.audio.speech.getOptions": "org.springframework.ai.openai.audio.speech.getOptions",
            "org.springframework.ai.openai.audio.speech.equals": "org.springframework.ai.openai.audio.speech.equals",
            "org.springframework.ai.openai.audio.speech.hashCod": "org.springframework.ai.openai.audio.speech.hashCod",
            "org.springframework.ai.openai.audio.speech.speechOptions": "org.springframework.ai.openai.audio.speech.speechOptions",
            "org.springframework.ai.openai.audio.speech.mess": "org.springframework.ai.openai.audio.speech.mess"
        },
        "package": "package org.springframework.ai.openai.audio.speech;",
        "property_declarations": [
            "private OpenAiAudioSpeechOptions speechOptions;",
            "private final SpeechMessage message;"
        ],
        "functions": [
            {
                "name": "getInstructions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.message;",
                "is_abstract": "",
                "class_name": "SpeechPrompt",
                "annotations": []
            },
            {
                "name": "getOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return speechOptions;",
                "is_abstract": "",
                "class_name": "SpeechPrompt",
                "annotations": []
            },
            {
                "name": "equals",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (this == o)\n\t\t\treturn true;\n\t\tif (!(o instanceof SpeechPrompt that))\n\t\t\treturn false;\n\t\treturn Objects.equals(speechOptions, that.speechOptions) && Objects.equals(message, that.message);",
                "is_abstract": "",
                "class_name": "SpeechPrompt",
                "annotations": []
            },
            {
                "name": "hashCode",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return Objects.hash(speechOptions, message);",
                "is_abstract": "",
                "class_name": "SpeechPrompt",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-openai/src/main/java/org/springframework/ai/openai/audio/speech/Speech.java",
        "class_names": [
            "Speech"
        ],
        "imports": "import org.springframework.ai.model.ModelResult;\nimport org.springframework.lang.Nullable;\nimport java.util.Objects;\nimport java.util.Arrays;\nimport org.springframework.ai.openai.metadata.audio.OpenAiAudioSpeechMetadata;",
        "package_import_paths": {
            "org.springframework.ai.openai.audio.speech.Speech": "org.springframework.ai.openai.audio.speech.Speech",
            "org.springframework.ai.openai.audio.speech.getOutput": "org.springframework.ai.openai.audio.speech.getOutput",
            "org.springframework.ai.openai.audio.speech.getMetadat": "org.springframework.ai.openai.audio.speech.getMetadat",
            "org.springframework.ai.openai.audio.speech.withSpeechMetadat": "org.springframework.ai.openai.audio.speech.withSpeechMetadat",
            "org.springframework.ai.openai.audio.speech.equals": "org.springframework.ai.openai.audio.speech.equals",
            "org.springframework.ai.openai.audio.speech.hashCod": "org.springframework.ai.openai.audio.speech.hashCod",
            "org.springframework.ai.openai.audio.speech.toStrin": "org.springframework.ai.openai.audio.speech.toStrin",
            "org.springframework.ai.openai.audio.speech.audio": "org.springframework.ai.openai.audio.speech.audio",
            "org.springframework.ai.openai.audio.speech.speechMetadat": "org.springframework.ai.openai.audio.speech.speechMetadat"
        },
        "package": "package org.springframework.ai.openai.audio.speech;",
        "property_declarations": [
            "private OpenAiAudioSpeechMetadata speechMetadata;",
            "private final byte[] audio;"
        ],
        "functions": [
            {
                "name": "getOutput",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.audio;",
                "is_abstract": "",
                "class_name": "Speech",
                "annotations": []
            },
            {
                "name": "getMetadata",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return speechMetadata != null ? speechMetadata : OpenAiAudioSpeechMetadata.NULL;",
                "is_abstract": "",
                "class_name": "Speech",
                "annotations": []
            },
            {
                "name": "withSpeechMetadata",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.speechMetadata = speechMetadata;\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "Speech",
                "annotations": []
            },
            {
                "name": "equals",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (this == o)\n\t\t\treturn true;\n\t\tif (!(o instanceof Speech that))\n\t\t\treturn false;\n\t\treturn Arrays.equals(audio, that.audio) && Objects.equals(speechMetadata, that.speechMetadata);",
                "is_abstract": "",
                "class_name": "Speech",
                "annotations": []
            },
            {
                "name": "hashCode",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return Objects.hash(Arrays.hashCode(audio), speechMetadata);",
                "is_abstract": "",
                "class_name": "Speech",
                "annotations": []
            },
            {
                "name": "toString",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return \"Speech{\" + \"text=\" + audio + \", speechMetadata=\" + speechMetadata + '}';",
                "is_abstract": "",
                "class_name": "Speech",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-openai/src/main/java/org/springframework/ai/openai/audio/speech/SpeechMessage.java",
        "class_names": [
            "SpeechMessage"
        ],
        "imports": "import java.util.Objects;",
        "package_import_paths": {
            "org.springframework.ai.openai.audio.speech.SpeechMess": "org.springframework.ai.openai.audio.speech.SpeechMess",
            "org.springframework.ai.openai.audio.speech.getText": "org.springframework.ai.openai.audio.speech.getText",
            "org.springframework.ai.openai.audio.speech.setText": "org.springframework.ai.openai.audio.speech.setText",
            "org.springframework.ai.openai.audio.speech.equals": "org.springframework.ai.openai.audio.speech.equals",
            "org.springframework.ai.openai.audio.speech.hashCod": "org.springframework.ai.openai.audio.speech.hashCod",
            "org.springframework.ai.openai.audio.speech.text": "org.springframework.ai.openai.audio.speech.text"
        },
        "package": "package org.springframework.ai.openai.audio.speech;",
        "property_declarations": [
            "private String text;"
        ],
        "functions": [
            {
                "name": "getText",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return text;",
                "is_abstract": "",
                "class_name": "SpeechMessage",
                "annotations": []
            },
            {
                "name": "setText",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.text = text;",
                "is_abstract": "",
                "class_name": "SpeechMessage",
                "annotations": []
            },
            {
                "name": "equals",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (this == o)\n\t\t\treturn true;\n\t\tif (!(o instanceof SpeechMessage that))\n\t\t\treturn false;\n\t\treturn Objects.equals(text, that.text);",
                "is_abstract": "",
                "class_name": "SpeechMessage",
                "annotations": []
            },
            {
                "name": "hashCode",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return Objects.hash(text);",
                "is_abstract": "",
                "class_name": "SpeechMessage",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-openai/src/main/java/org/springframework/ai/openai/audio/speech/SpeechResponse.java",
        "class_names": [
            "SpeechResponse"
        ],
        "imports": "import java.util.List;\nimport org.springframework.ai.openai.metadata.audio.OpenAiAudioSpeechResponseMetadata;\nimport java.util.Objects;\nimport org.springframework.ai.model.ModelResponse;\nimport java.util.Collections;",
        "package_import_paths": {
            "org.springframework.ai.openai.audio.speech.SpeechRespons": "org.springframework.ai.openai.audio.speech.SpeechRespons",
            "org.springframework.ai.openai.audio.speech.getResult": "org.springframework.ai.openai.audio.speech.getResult",
            "org.springframework.ai.openai.audio.speech.getResults": "org.springframework.ai.openai.audio.speech.getResults",
            "org.springframework.ai.openai.audio.speech.getMetadat": "org.springframework.ai.openai.audio.speech.getMetadat",
            "org.springframework.ai.openai.audio.speech.equals": "org.springframework.ai.openai.audio.speech.equals",
            "org.springframework.ai.openai.audio.speech.hashCod": "org.springframework.ai.openai.audio.speech.hashCod",
            "org.springframework.ai.openai.audio.speech.speech": "org.springframework.ai.openai.audio.speech.speech",
            "org.springframework.ai.openai.audio.speech.speechResponseMetadat": "org.springframework.ai.openai.audio.speech.speechResponseMetadat"
        },
        "package": "package org.springframework.ai.openai.audio.speech;",
        "property_declarations": [
            "private final OpenAiAudioSpeechResponseMetadata speechResponseMetadata;",
            "private final Speech speech;"
        ],
        "functions": [
            {
                "name": "getResult",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return speech;",
                "is_abstract": "",
                "class_name": "SpeechResponse",
                "annotations": []
            },
            {
                "name": "getResults",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return Collections.singletonList(speech);",
                "is_abstract": "",
                "class_name": "SpeechResponse",
                "annotations": []
            },
            {
                "name": "getMetadata",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return speechResponseMetadata;",
                "is_abstract": "",
                "class_name": "SpeechResponse",
                "annotations": []
            },
            {
                "name": "equals",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (this == o)\n\t\t\treturn true;\n\t\tif (!(o instanceof SpeechResponse that))\n\t\t\treturn false;\n\t\treturn Objects.equals(speech, that.speech)\n\t\t\t\t&& Objects.equals(speechResponseMetadata, that.speechResponseMetadata);",
                "is_abstract": "",
                "class_name": "SpeechResponse",
                "annotations": []
            },
            {
                "name": "hashCode",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return Objects.hash(speech, speechResponseMetadata);",
                "is_abstract": "",
                "class_name": "SpeechResponse",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-openai/src/main/java/org/springframework/ai/openai/audio/speech/SpeechClient.java",
        "class_names": [],
        "imports": "import org.springframework.ai.model.ModelClient;",
        "package_import_paths": {
            "org.springframework.ai.openai.audio.speech.call": "org.springframework.ai.openai.audio.speech.call"
        },
        "package": "package org.springframework.ai.openai.audio.speech;",
        "property_declarations": [],
        "functions": [
            {
                "name": "call",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "SpeechPrompt prompt = new SpeechPrompt(message);\n\t\treturn call(prompt).getResult().getOutput();",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-openai/src/main/java/org/springframework/ai/openai/audio/speech/StreamingSpeechClient.java",
        "class_names": [],
        "imports": "import reactor.core.publisher.Flux;\nimport org.springframework.ai.model.StreamingModelClient;",
        "package_import_paths": {
            "org.springframework.ai.openai.audio.speech.stream": "org.springframework.ai.openai.audio.speech.stream"
        },
        "package": "package org.springframework.ai.openai.audio.speech;",
        "property_declarations": [],
        "functions": [
            {
                "name": "stream",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "SpeechPrompt prompt = new SpeechPrompt(message);\n\t\treturn stream(prompt).map(SpeechResponse::getResult).map(Speech::getOutput);",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-openai/src/main/java/org/springframework/ai/openai/api/ApiUtils.java",
        "class_names": [
            "ApiUtils"
        ],
        "imports": "import org.springframework.http.MediaType;\nimport org.springframework.http.HttpHeaders;\nimport java.util.function.Consumer;",
        "package_import_paths": {
            "org.springframework.ai.openai.api.ApiUtils": "org.springframework.ai.openai.api.ApiUtils",
            "org.springframework.ai.openai.api.getJsonContentHeaders": "org.springframework.ai.openai.api.getJsonContentHeaders",
            "org.springframework.ai.openai.api.DEFAULT_BASE_URL": "org.springframework.ai.openai.api.DEFAULT_BASE_URL"
        },
        "package": "package org.springframework.ai.openai.api;",
        "property_declarations": [
            "public static final String DEFAULT_BASE_URL = \"https://api.openai.com\";"
        ],
        "functions": [
            {
                "name": "getJsonContentHeaders",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return (headers) -> {\n\t\t\theaders.setBearerAuth(apiKey);\n\t\t\theaders.setContentType(MediaType.APPLICATION_JSON);\n\t\t};",
                "is_abstract": "",
                "class_name": "ApiUtils",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-openai/src/main/java/org/springframework/ai/openai/api/OpenAiImageApi.java",
        "class_names": [
            "OpenAiImageApi"
        ],
        "imports": "import org.springframework.ai.retry.RetryUtils;\nimport java.util.List;\nimport org.springframework.util.Assert;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.client.RestClient;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport org.springframework.web.client.ResponseErrorHandler;",
        "package_import_paths": {
            "org.springframework.ai.openai.api.OpenAiImageApi": "org.springframework.ai.openai.api.OpenAiImageApi",
            "org.springframework.ai.openai.api.getValu": "org.springframework.ai.openai.api.getValu",
            "org.springframework.ai.openai.api.createIm": "org.springframework.ai.openai.api.createIm",
            "org.springframework.ai.openai.api.DEFAULT_IMAGE_MODEL": "org.springframework.ai.openai.api.DEFAULT_IMAGE_MODEL",
            "org.springframework.ai.openai.api.restClient": "org.springframework.ai.openai.api.restClient",
            "org.springframework.ai.openai.api.valu": "org.springframework.ai.openai.api.valu"
        },
        "package": "package org.springframework.ai.openai.api;",
        "property_declarations": [
            "private final RestClient restClient;",
            "private final String value;",
            "public static final String DEFAULT_IMAGE_MODEL = ImageModel.DALL_E_3.getValue();"
        ],
        "functions": [
            {
                "name": "getValue",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.value;",
                "is_abstract": "",
                "class_name": "OpenAiImageApi",
                "annotations": [
                    "@JsonInclude(JsonInclude.Include.NON_NULL)",
                    "@JsonProperty(\"prompt\")",
                    "@JsonProperty(\"model\")",
                    "@JsonProperty(\"n\")",
                    "@JsonProperty(\"quality\")",
                    "@JsonProperty(\"response_format\")",
                    "@JsonProperty(\"size\")",
                    "@JsonProperty(\"style\")",
                    "@JsonProperty(\"user\")",
                    "@JsonInclude(JsonInclude.Include.NON_NULL)",
                    "@JsonProperty(\"created\")",
                    "@JsonProperty(\"data\")",
                    "@JsonInclude(JsonInclude.Include.NON_NULL)",
                    "@JsonProperty(\"url\")",
                    "@JsonProperty(\"b64_json\")",
                    "@JsonProperty(\"revised_prompt\")"
                ]
            },
            {
                "name": "createImage",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(openAiImageRequest, \"Image request cannot be null.\");\n\t\tAssert.hasLength(openAiImageRequest.prompt(), \"Prompt cannot be empty.\");\n\n\t\treturn this.restClient.post()\n\t\t\t.uri(\"v1/images/generations\")\n\t\t\t.body(openAiImageRequest)\n\t\t\t.retrieve()\n\t\t\t.toEntity(OpenAiImageResponse.class);",
                "is_abstract": "",
                "class_name": "OpenAiImageApi",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-openai/src/main/java/org/springframework/ai/openai/api/OpenAiAudioApi.java",
        "class_names": [
            "OpenAiAudioApi",
            "Builder"
        ],
        "imports": "import org.springframework.ai.retry.RetryUtils;\nimport org.springframework.core.io.ByteArrayResource;\nimport java.util.List;\nimport com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport org.springframework.util.Assert;\nimport org.springframework.util.MultiValueMap;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.reactive.function.client.WebClient;\nimport reactor.core.publisher.Flux;\nimport org.springframework.util.LinkedMultiValueMap;\nimport org.springframework.web.client.RestClient;\nimport org.springframework.http.HttpHeaders;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport org.springframework.http.MediaType;\nimport org.springframework.web.client.ResponseErrorHandler;\nimport reactor.core.publisher.Mono;",
        "package_import_paths": {
            "org.springframework.ai.openai.api.OpenAiAudioApi": "org.springframework.ai.openai.api.OpenAiAudioApi",
            "org.springframework.ai.openai.api.Builder": "org.springframework.ai.openai.api.Builder",
            "org.springframework.ai.openai.api.getValu": "org.springframework.ai.openai.api.getValu",
            "org.springframework.ai.openai.api.builder": "org.springframework.ai.openai.api.builder",
            "org.springframework.ai.openai.api.withModel": "org.springframework.ai.openai.api.withModel",
            "org.springframework.ai.openai.api.withInput": "org.springframework.ai.openai.api.withInput",
            "org.springframework.ai.openai.api.withVoi": "org.springframework.ai.openai.api.withVoi",
            "org.springframework.ai.openai.api.withResponseFormat": "org.springframework.ai.openai.api.withResponseFormat",
            "org.springframework.ai.openai.api.withSpeed": "org.springframework.ai.openai.api.withSpeed",
            "org.springframework.ai.openai.api.build": "org.springframework.ai.openai.api.build",
            "org.springframework.ai.openai.api.withFil": "org.springframework.ai.openai.api.withFil",
            "org.springframework.ai.openai.api.withLangu": "org.springframework.ai.openai.api.withLangu",
            "org.springframework.ai.openai.api.withPrompt": "org.springframework.ai.openai.api.withPrompt",
            "org.springframework.ai.openai.api.withTemperatur": "org.springframework.ai.openai.api.withTemperatur",
            "org.springframework.ai.openai.api.withGranularityTy": "org.springframework.ai.openai.api.withGranularityTy",
            "org.springframework.ai.openai.api.isJsonTy": "org.springframework.ai.openai.api.isJsonTy",
            "org.springframework.ai.openai.api.getResponseTy": "org.springframework.ai.openai.api.getResponseTy",
            "org.springframework.ai.openai.api.createSpeech": "org.springframework.ai.openai.api.createSpeech",
            "org.springframework.ai.openai.api.stream": "org.springframework.ai.openai.api.stream",
            "org.springframework.ai.openai.api.createTranscription": "org.springframework.ai.openai.api.createTranscription",
            "org.springframework.ai.openai.api.getFilenam": "org.springframework.ai.openai.api.getFilenam",
            "org.springframework.ai.openai.api.createTranslation": "org.springframework.ai.openai.api.createTranslation",
            "org.springframework.ai.openai.api.restClient": "org.springframework.ai.openai.api.restClient",
            "org.springframework.ai.openai.api.webClient": "org.springframework.ai.openai.api.webClient",
            "org.springframework.ai.openai.api.valu": "org.springframework.ai.openai.api.valu",
            "org.springframework.ai.openai.api.model": "org.springframework.ai.openai.api.model",
            "org.springframework.ai.openai.api.input": "org.springframework.ai.openai.api.input",
            "org.springframework.ai.openai.api.voi": "org.springframework.ai.openai.api.voi",
            "org.springframework.ai.openai.api.responseFormat": "org.springframework.ai.openai.api.responseFormat",
            "org.springframework.ai.openai.api.speed": "org.springframework.ai.openai.api.speed",
            "org.springframework.ai.openai.api.fil": "org.springframework.ai.openai.api.fil",
            "org.springframework.ai.openai.api.langu": "org.springframework.ai.openai.api.langu",
            "org.springframework.ai.openai.api.prompt": "org.springframework.ai.openai.api.prompt",
            "org.springframework.ai.openai.api.temperatur": "org.springframework.ai.openai.api.temperatur",
            "org.springframework.ai.openai.api.granularityTy": "org.springframework.ai.openai.api.granularityTy",
            "org.springframework.ai.openai.api.responseTy": "org.springframework.ai.openai.api.responseTy"
        },
        "package": "package org.springframework.ai.openai.api;",
        "property_declarations": [
            "private Float speed;",
            "private final WebClient webClient;",
            "private final RestClient restClient;",
            "public final String value;",
            "private Voice voice;",
            "private Float temperature;",
            "private String prompt;",
            "public final Class<?> responseType;",
            "private String language;",
            "private String model = WhisperModel.WHISPER_1.getValue();",
            "private GranularityType granularityType;",
            "private TranscriptResponseFormat responseFormat = TranscriptResponseFormat.JSON;",
            "private String input;",
            "private AudioResponseFormat responseFormat = AudioResponseFormat.MP3;",
            "private String model = TtsModel.TTS_1.getValue();",
            "private byte[] file;"
        ],
        "functions": [
            {
                "name": "getValue",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.value;",
                "is_abstract": "",
                "class_name": "OpenAiAudioApi",
                "annotations": [
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"model\")",
                    "@JsonProperty(\"input\")",
                    "@JsonProperty(\"voice\")",
                    "@JsonProperty(\"response_format\")",
                    "@JsonProperty(\"speed\")",
                    "@JsonProperty(\"alloy\")",
                    "@JsonProperty(\"echo\")",
                    "@JsonProperty(\"fable\")",
                    "@JsonProperty(\"onyx\")",
                    "@JsonProperty(\"nova\")",
                    "@JsonProperty(\"shimmer\")"
                ]
            },
            {
                "name": "builder",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Builder();",
                "is_abstract": "",
                "class_name": "OpenAiAudioApi",
                "annotations": []
            },
            {
                "name": "withModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.model = model;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "OpenAiAudioApi Builder",
                "annotations": []
            },
            {
                "name": "withInput",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.input = input;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "OpenAiAudioApi Builder",
                "annotations": []
            },
            {
                "name": "withVoice",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.voice = voice;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "OpenAiAudioApi Builder",
                "annotations": []
            },
            {
                "name": "withResponseFormat",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.responseFormat = responseFormat;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "OpenAiAudioApi Builder",
                "annotations": []
            },
            {
                "name": "withSpeed",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.speed = speed;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "OpenAiAudioApi Builder",
                "annotations": []
            },
            {
                "name": "build",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.hasText(model, \"model must not be empty\");\n\t\t\t\tAssert.hasText(input, \"input must not be empty\");\n\n\t\t\t\treturn new SpeechRequest(this.model, this.input, this.voice, this.responseFormat, this.speed);",
                "is_abstract": "",
                "class_name": "OpenAiAudioApi Builder",
                "annotations": [
                    "@JsonProperty(\"whisper-1\")"
                ]
            },
            {
                "name": "withFile",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.file = file;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "OpenAiAudioApi Builder Builder",
                "annotations": []
            },
            {
                "name": "withLanguage",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.language = language;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "OpenAiAudioApi Builder Builder",
                "annotations": []
            },
            {
                "name": "withPrompt",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.prompt = prompt;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "OpenAiAudioApi Builder Builder",
                "annotations": []
            },
            {
                "name": "withTemperature",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.temperature = temperature;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "OpenAiAudioApi Builder Builder",
                "annotations": []
            },
            {
                "name": "withGranularityType",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.granularityType = granularityType;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "OpenAiAudioApi Builder Builder",
                "annotations": []
            },
            {
                "name": "isJsonType",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this == JSON || this == VERBOSE_JSON;",
                "is_abstract": "",
                "class_name": "OpenAiAudioApi Builder Builder",
                "annotations": []
            },
            {
                "name": "getResponseType",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.responseType;",
                "is_abstract": "",
                "class_name": "OpenAiAudioApi Builder Builder",
                "annotations": [
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"file\")",
                    "@JsonProperty(\"model\")",
                    "@JsonProperty(\"prompt\")",
                    "@JsonProperty(\"response_format\")",
                    "@JsonProperty(\"temperature\")"
                ]
            },
            {
                "name": "createSpeech",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.restClient.post().uri(\"/v1/audio/speech\").body(requestBody).retrieve().toEntity(byte[].class);",
                "is_abstract": "",
                "class_name": "OpenAiAudioApi Builder Builder Builder",
                "annotations": []
            },
            {
                "name": "stream",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return webClient.post()\n\t\t\t.uri(\"/v1/audio/speech\")\n\t\t\t.body(Mono.just(requestBody), SpeechRequest.class)\n\t\t\t.accept(MediaType.APPLICATION_OCTET_STREAM)\n\t\t\t.exchangeToFlux(clientResponse -> {\n\t\t\t\tHttpHeaders headers = clientResponse.headers().asHttpHeaders();\n\t\t\t\treturn clientResponse.bodyToFlux(byte[].class)\n\t\t\t\t\t.map(bytes -> ResponseEntity.ok().headers(headers).body(bytes));\n\t\t\t});",
                "is_abstract": "",
                "class_name": "OpenAiAudioApi Builder Builder Builder",
                "annotations": []
            },
            {
                "name": "createTranscription",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return createTranscription(requestBody, requestBody.responseFormat().getResponseType());",
                "is_abstract": "",
                "class_name": "OpenAiAudioApi Builder Builder Builder",
                "annotations": []
            },
            {
                "name": "getFilename",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return \"audio.webm\";",
                "is_abstract": "",
                "class_name": "OpenAiAudioApi Builder Builder Builder",
                "annotations": []
            },
            {
                "name": "createTranslation",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return createTranslation(requestBody, requestBody.responseFormat().getResponseType());",
                "is_abstract": "",
                "class_name": "OpenAiAudioApi Builder Builder Builder",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-openai/src/main/java/org/springframework/ai/openai/api/OpenAiApi.java",
        "class_names": [
            "OpenAiApi",
            "ToolChoiceBuilder"
        ],
        "imports": "import org.springframework.ai.retry.RetryUtils;\nimport org.springframework.core.ParameterizedTypeReference;\nimport java.util.List;\nimport reactor.core.publisher.Flux;\nimport org.springframework.util.CollectionUtils;\nimport java.util.function.Predicate;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport reactor.core.publisher.Mono;\nimport java.util.Map;\nimport org.springframework.boot.context.properties.bind.ConstructorBinding;\nimport org.springframework.web.client.ResponseErrorHandler;\nimport com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport org.springframework.ai.model.ModelOptionsUtils;\nimport org.springframework.web.client.RestClient;\nimport org.springframework.util.Assert;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.reactive.function.client.WebClient;\nimport java.util.concurrent.atomic.AtomicBoolean;",
        "package_import_paths": {
            "org.springframework.ai.openai.api.OpenAiApi": "org.springframework.ai.openai.api.OpenAiApi",
            "org.springframework.ai.openai.api.ToolChoiceBuilder": "org.springframework.ai.openai.api.ToolChoiceBuilder",
            "org.springframework.ai.openai.api.getValu": "org.springframework.ai.openai.api.getValu",
            "org.springframework.ai.openai.api.FUNCTION": "org.springframework.ai.openai.api.FUNCTION",
            "org.springframework.ai.openai.api.content": "org.springframework.ai.openai.api.content",
            "org.springframework.ai.openai.api.getTextContent": "org.springframework.ai.openai.api.getTextContent",
            "org.springframework.ai.openai.api.chatCompletionEntity": "org.springframework.ai.openai.api.chatCompletionEntity",
            "org.springframework.ai.openai.api.chatCompletionStream": "org.springframework.ai.openai.api.chatCompletionStream",
            "org.springframework.ai.openai.api.embeddings": "org.springframework.ai.openai.api.embeddings",
            "org.springframework.ai.openai.api.DEFAULT_CHAT_MODEL": "org.springframework.ai.openai.api.DEFAULT_CHAT_MODEL",
            "org.springframework.ai.openai.api.DEFAULT_EMBEDDING_MODEL": "org.springframework.ai.openai.api.DEFAULT_EMBEDDING_MODEL",
            "org.springframework.ai.openai.api.SSE_DONE_PREDICATE": "org.springframework.ai.openai.api.SSE_DONE_PREDICATE",
            "org.springframework.ai.openai.api.restClient": "org.springframework.ai.openai.api.restClient",
            "org.springframework.ai.openai.api.webClient": "org.springframework.ai.openai.api.webClient",
            "org.springframework.ai.openai.api.valu": "org.springframework.ai.openai.api.valu",
            "org.springframework.ai.openai.api.AUTO": "org.springframework.ai.openai.api.AUTO",
            "org.springframework.ai.openai.api.NONE": "org.springframework.ai.openai.api.NONE",
            "org.springframework.ai.openai.api.chunkMerger": "org.springframework.ai.openai.api.chunkMerger"
        },
        "package": "package org.springframework.ai.openai.api;",
        "property_declarations": [
            "public static final String AUTO = \"auto\";",
            "private final WebClient webClient;",
            "private final RestClient restClient;",
            "private static final Predicate<String> SSE_DONE_PREDICATE = \"[DONE]\"::equals;",
            "private OpenAiStreamFunctionCallingHelper chunkMerger = new OpenAiStreamFunctionCallingHelper();",
            "public static final String DEFAULT_EMBEDDING_MODEL = EmbeddingModel.TEXT_EMBEDDING_ADA_002.getValue();",
            "public final String  value;",
            "public static final String DEFAULT_CHAT_MODEL = ChatModel.GPT_3_5_TURBO.getValue();",
            "public static final String NONE = \"none\";"
        ],
        "functions": [
            {
                "name": "getValue",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return value;",
                "is_abstract": "",
                "class_name": "OpenAiApi",
                "annotations": [
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"type\")",
                    "@JsonProperty(\"function\")",
                    "@JsonProperty(\"function\")",
                    "@JsonProperty(\"description\")",
                    "@JsonProperty(\"name\")",
                    "@JsonProperty(\"parameters\")",
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"messages\")",
                    "@JsonProperty(\"model\")",
                    "@JsonProperty(\"frequency_penalty\")",
                    "@JsonProperty(\"logit_bias\")",
                    "@JsonProperty(\"logprobs\")",
                    "@JsonProperty(\"top_logprobs\")",
                    "@JsonProperty(\"max_tokens\")",
                    "@JsonProperty(\"n\")",
                    "@JsonProperty(\"presence_penalty\")",
                    "@JsonProperty(\"response_format\")",
                    "@JsonProperty(\"seed\")",
                    "@JsonProperty(\"stop\")",
                    "@JsonProperty(\"stream\")",
                    "@JsonProperty(\"temperature\")",
                    "@JsonProperty(\"top_p\")",
                    "@JsonProperty(\"tools\")",
                    "@JsonProperty(\"tool_choice\")",
                    "@JsonProperty(\"user\")"
                ]
            },
            {
                "name": "FUNCTION",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return Map.of(\"type\", \"function\", \"function\", Map.of(\"name\", functionName));",
                "is_abstract": "",
                "class_name": "OpenAiApi ToolChoiceBuilder",
                "annotations": [
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"type\")",
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"content\")",
                    "@JsonProperty(\"role\")",
                    "@JsonProperty(\"name\")",
                    "@JsonProperty(\"tool_call_id\")",
                    "@JsonProperty(\"tool_calls\")"
                ]
            },
            {
                "name": "content",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (this.rawContent == null) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif (this.rawContent instanceof String text) {\n\t\t\t\treturn text;\n\t\t\t}\n\t\t\tthrow new IllegalStateException(\"The content is not a string!\");",
                "is_abstract": "",
                "class_name": "OpenAiApi ToolChoiceBuilder",
                "annotations": [
                    "@JsonProperty(\"system\")",
                    "@JsonProperty(\"user\")",
                    "@JsonProperty(\"assistant\")",
                    "@JsonProperty(\"tool\")",
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"type\")",
                    "@JsonProperty(\"text\")",
                    "@JsonProperty(\"image_url\")",
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"url\")",
                    "@JsonProperty(\"detail\")",
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"id\")",
                    "@JsonProperty(\"type\")",
                    "@JsonProperty(\"function\")",
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"name\")",
                    "@JsonProperty(\"arguments\")"
                ]
            },
            {
                "name": "getTextContent",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return content.stream()\n\t\t\t\t.filter(c -> \"text\".equals(c.type()))\n\t\t\t\t.map(ChatCompletionMessage.MediaContent::text)\n\t\t\t\t.reduce(\"\", (a, b) -> a + b);",
                "is_abstract": "",
                "class_name": "OpenAiApi ToolChoiceBuilder",
                "annotations": [
                    "@JsonProperty(\"stop\")",
                    "@JsonProperty(\"length\")",
                    "@JsonProperty(\"content_filter\")",
                    "@JsonProperty(\"tool_calls\")",
                    "@JsonProperty(\"function_call\")",
                    "@JsonProperty(\"tool_call\")",
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"id\")",
                    "@JsonProperty(\"choices\")",
                    "@JsonProperty(\"created\")",
                    "@JsonProperty(\"model\")",
                    "@JsonProperty(\"system_fingerprint\")",
                    "@JsonProperty(\"object\")",
                    "@JsonProperty(\"usage\")",
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"finish_reason\")",
                    "@JsonProperty(\"index\")",
                    "@JsonProperty(\"message\")",
                    "@JsonProperty(\"logprobs\")",
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"content\")",
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"token\")",
                    "@JsonProperty(\"logprob\")",
                    "@JsonProperty(\"bytes\")",
                    "@JsonProperty(\"top_logprobs\")",
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"token\")",
                    "@JsonProperty(\"logprob\")",
                    "@JsonProperty(\"bytes\")",
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"completion_tokens\")",
                    "@JsonProperty(\"prompt_tokens\")",
                    "@JsonProperty(\"total_tokens\")",
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"id\")",
                    "@JsonProperty(\"choices\")",
                    "@JsonProperty(\"created\")",
                    "@JsonProperty(\"model\")",
                    "@JsonProperty(\"system_fingerprint\")",
                    "@JsonProperty(\"object\")",
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"finish_reason\")",
                    "@JsonProperty(\"index\")",
                    "@JsonProperty(\"delta\")",
                    "@JsonProperty(\"logprobs\")"
                ]
            },
            {
                "name": "chatCompletionEntity",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(chatRequest, \"The request body can not be null.\");\n\t\tAssert.isTrue(!chatRequest.stream(), \"Request must set the steam property to false.\");\n\n\t\treturn this.restClient.post()\n\t\t\t\t.uri(\"/v1/chat/completions\")\n\t\t\t\t.body(chatRequest)\n\t\t\t\t.retrieve()\n\t\t\t\t.toEntity(ChatCompletion.class);",
                "is_abstract": "",
                "class_name": "OpenAiApi ToolChoiceBuilder",
                "annotations": []
            },
            {
                "name": "chatCompletionStream",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(chatRequest, \"The request body can not be null.\");\n\t\tAssert.isTrue(chatRequest.stream(), \"Request must set the steam property to true.\");\n\n\t\tAtomicBoolean isInsideTool = new AtomicBoolean(false);\n\n\t\treturn this.webClient.post()\n\t\t\t\t.uri(\"/v1/chat/completions\")\n\t\t\t\t.body(Mono.just(chatRequest), ChatCompletionRequest.class)\n\t\t\t\t.retrieve()\n\t\t\t\t.bodyToFlux(String.class)\n\t\t\t\t// cancels the flux stream after the \"[DONE]\" is received.\n\t\t\t\t.takeUntil(SSE_DONE_PREDICATE)\n\t\t\t\t// filters out the \"[DONE]\" message.\n\t\t\t\t.filter(SSE_DONE_PREDICATE.negate())\n\t\t\t\t.map(content -> ModelOptionsUtils.jsonToObject(content, ChatCompletionChunk.class))\n\t\t\t\t// Detect is the chunk is part of a streaming function call.\n \t\t\t\t.map(chunk -> {\n\t\t\t\t\tif (this.chunkMerger.isStreamingToolFunctionCall(chunk)) {\n\t\t\t\t\t\tisInsideTool.set(true);\n\t\t\t\t\t}\n\t\t\t\t\treturn chunk;\n\t\t\t\t})\n\t\t\t\t// Group all chunks belonging to the same function call.\n\t\t\t\t// Flux<ChatCompletionChunk> -> Flux<Flux<ChatCompletionChunk>>\n\t\t\t\t.windowUntil(chunk -> {\n\t\t\t\t\tif (isInsideTool.get() && this.chunkMerger.isStreamingToolFunctionCallFinish(chunk)) {\n\t\t\t\t\t\tisInsideTool.set(false);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\treturn !isInsideTool.get();\n\t\t\t\t})\n\t\t\t\t// Merging the window chunks into a single chunk.\n\t\t\t\t// Reduce the inner Flux<ChatCompletionChunk> window into a single Mono<ChatCompletionChunk>,\n\t\t\t\t// Flux<Flux<ChatCompletionChunk>> -> Flux<Mono<ChatCompletionChunk>>\n\t\t\t\t.concatMapIterable(window -> {\n\t\t\t\t\tMono<ChatCompletionChunk> monoChunk = window.reduce(\n\t\t\t\t\t\t\tnew ChatCompletionChunk(null, null, null, null, null, null),\n\t\t\t\t\t\t\t(previous, current) -> this.chunkMerger.merge(previous, current));\n\t\t\t\t\treturn List.of(monoChunk);\n\t\t\t\t})\n\t\t\t\t// Flux<Mono<ChatCompletionChunk>> -> Flux<ChatCompletionChunk>\n\t\t\t\t.flatMap(mono -> mono);",
                "is_abstract": "",
                "class_name": "OpenAiApi ToolChoiceBuilder",
                "annotations": []
            },
            {
                "name": "embeddings",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(embeddingRequest, \"The request body can not be null.\");\n\n\t\t// Input text to embed, encoded as a string or array of tokens. To embed multiple inputs in a single\n\t\t// request, pass an array of strings or array of token arrays.\n\t\tAssert.notNull(embeddingRequest.input(), \"The input can not be null.\");\n\t\tAssert.isTrue(embeddingRequest.input() instanceof String || embeddingRequest.input() instanceof List,\n\t\t\t\t\"The input must be either a String, or a List of Strings or List of List of integers.\");\n\n\t\t// The input must not exceed the max input tokens for the model (8192 tokens for text-embedding-ada-002), cannot\n\t\t// be an empty string, and any array must be 2048 dimensions or less.\n\t\tif (embeddingRequest.input() instanceof List list) {\n\t\t\tAssert.isTrue(!CollectionUtils.isEmpty(list), \"The input list can not be empty.\");\n\t\t\tAssert.isTrue(list.size() <= 2048, \"The list must be 2048 dimensions or less\");\n\t\t\tAssert.isTrue(list.get(0) instanceof String || list.get(0) instanceof Integer\n\t\t\t\t\t|| list.get(0) instanceof List,\n\t\t\t\t\t\"The input must be either a String, or a List of Strings or list of list of integers.\");\n\t\t}\n\n\t\treturn this.restClient.post()\n\t\t\t\t.uri(\"/v1/embeddings\")\n\t\t\t\t.body(embeddingRequest)\n\t\t\t\t.retrieve()\n\t\t\t\t.toEntity(new ParameterizedTypeReference<>() {\n\t\t\t\t});",
                "is_abstract": "",
                "class_name": "OpenAiApi ToolChoiceBuilder",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-openai/src/main/java/org/springframework/ai/openai/api/OpenAiStreamFunctionCallingHelper.java",
        "class_names": [
            "OpenAiStreamFunctionCallingHelper"
        ],
        "imports": "import java.util.ArrayList;\nimport org.springframework.ai.openai.api.OpenAiApi.ChatCompletionMessage.Role;\nimport java.util.List;\nimport org.springframework.ai.openai.api.OpenAiApi.LogProbs;\nimport org.springframework.ai.openai.api.OpenAiApi.ChatCompletionChunk.ChunkChoice;\nimport org.springframework.ai.openai.api.OpenAiApi.ChatCompletionMessage;\nimport org.springframework.util.CollectionUtils;\nimport org.springframework.ai.openai.api.OpenAiApi.ChatCompletionMessage.ChatCompletionFunction;\nimport org.springframework.ai.openai.api.OpenAiApi.ChatCompletion;\nimport org.springframework.ai.openai.api.OpenAiApi.ChatCompletionFinishReason;\nimport org.springframework.ai.openai.api.OpenAiApi.ChatCompletionMessage.ToolCall;\nimport org.springframework.ai.openai.api.OpenAiApi.ChatCompletion.Choice;\nimport org.springframework.ai.openai.api.OpenAiApi.ChatCompletionChunk;",
        "package_import_paths": {
            "org.springframework.ai.openai.api.OpenAiStreamFunctionCallingHelper": "org.springframework.ai.openai.api.OpenAiStreamFunctionCallingHelper",
            "org.springframework.ai.openai.api.mer": "org.springframework.ai.openai.api.mer",
            "org.springframework.ai.openai.api.isStreamingToolFunctionCall": "org.springframework.ai.openai.api.isStreamingToolFunctionCall",
            "org.springframework.ai.openai.api.isStreamingToolFunctionCallFinish": "org.springframework.ai.openai.api.isStreamingToolFunctionCallFinish",
            "org.springframework.ai.openai.api.chunkToChatCompletion": "org.springframework.ai.openai.api.chunkToChatCompletion"
        },
        "package": "package org.springframework.ai.openai.api;",
        "property_declarations": [],
        "functions": [
            {
                "name": "merge",
                "parameters": [
                    ""
                ],
                "return_type": "previous",
                "body": "if (previous == null) {\n\t\t\treturn current;\n\t\t}\n\n\t\tString id = (current.id() != null ? current.id() : previous.id());\n\t\tLong created = (current.created() != null ? current.created() : previous.created());\n\t\tString model = (current.model() != null ? current.model() : previous.model());\n\t\tString systemFingerprint = (current.systemFingerprint() != null ? current.systemFingerprint()\n\t\t\t\t: previous.systemFingerprint());\n\t\tString object = (current.object() != null ? current.object() : previous.object());\n\n\t\tChunkChoice previousChoice0 = (CollectionUtils.isEmpty(previous.choices()) ? null : previous.choices().get(0));\n\t\tChunkChoice currentChoice0 = (CollectionUtils.isEmpty(current.choices()) ? null : current.choices().get(0));\n\n\t\tChunkChoice choice = merge(previousChoice0, currentChoice0);\n\t\tList<ChunkChoice> chunkChoices = choice == null ? List.of() : List.of(choice);\n\t\treturn new ChatCompletionChunk(id, chunkChoices, created, model, systemFingerprint, object);",
                "is_abstract": "",
                "class_name": "OpenAiStreamFunctionCallingHelper",
                "annotations": []
            },
            {
                "name": "isStreamingToolFunctionCall",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (chatCompletion == null || CollectionUtils.isEmpty(chatCompletion.choices())) {\n\t\t\treturn false;\n\t\t}\n\n\t\tvar choice = chatCompletion.choices().get(0);\n\t\tif (choice == null || choice.delta() == null) {\n\t\t\treturn false;\n\t\t}\n\t\treturn !CollectionUtils.isEmpty(choice.delta().toolCalls());",
                "is_abstract": "",
                "class_name": "OpenAiStreamFunctionCallingHelper",
                "annotations": []
            },
            {
                "name": "isStreamingToolFunctionCallFinish",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (chatCompletion == null || CollectionUtils.isEmpty(chatCompletion.choices())) {\n\t\t\treturn false;\n\t\t}\n\n\t\tvar choice = chatCompletion.choices().get(0);\n\t\tif (choice == null || choice.delta() == null) {\n\t\t\treturn false;\n\t\t}\n\t\treturn choice.finishReason() == ChatCompletionFinishReason.TOOL_CALLS;",
                "is_abstract": "",
                "class_name": "OpenAiStreamFunctionCallingHelper",
                "annotations": []
            },
            {
                "name": "chunkToChatCompletion",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "List<Choice> choices = chunk.choices()\n\t\t\t.stream()\n\t\t\t.map(chunkChoice -> new Choice(chunkChoice.finishReason(), chunkChoice.index(), chunkChoice.delta(),\n\t\t\t\t\tchunkChoice.logprobs()))\n\t\t\t.toList();\n\n\t\treturn new OpenAiApi.ChatCompletion(chunk.id(), choices, chunk.created(), chunk.model(),\n\t\t\t\tchunk.systemFingerprint(), \"chat.completion\", null);",
                "is_abstract": "",
                "class_name": "OpenAiStreamFunctionCallingHelper",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-openai/src/main/java/org/springframework/ai/openai/api/common/OpenAiApiException.java",
        "class_names": [
            "OpenAiApiException"
        ],
        "imports": "",
        "package_import_paths": {
            "org.springframework.ai.openai.api.common.OpenAiApiException": "org.springframework.ai.openai.api.common.OpenAiApiException"
        },
        "package": "package org.springframework.ai.openai.api.common;",
        "property_declarations": [],
        "functions": []
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-openai/src/main/java/org/springframework/ai/openai/api/common/OpenAiApiClientErrorException.java",
        "class_names": [
            "OpenAiApiClientErrorException"
        ],
        "imports": "",
        "package_import_paths": {
            "org.springframework.ai.openai.api.common.OpenAiApiClientErrorException": "org.springframework.ai.openai.api.common.OpenAiApiClientErrorException"
        },
        "package": "package org.springframework.ai.openai.api.common;",
        "property_declarations": [],
        "functions": []
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-openai/src/main/java/org/springframework/ai/openai/metadata/OpenAiImageResponseMetadata.java",
        "class_names": [
            "OpenAiImageResponseMetadata"
        ],
        "imports": "import org.springframework.ai.image.ImageResponseMetadata;\nimport java.util.Objects;\nimport org.springframework.ai.openai.api.OpenAiImageApi;\nimport org.springframework.util.Assert;",
        "package_import_paths": {
            "org.springframework.ai.openai.metadata.OpenAiImageResponseMetadat": "org.springframework.ai.openai.metadata.OpenAiImageResponseMetadat",
            "org.springframework.ai.openai.metadata.from": "org.springframework.ai.openai.metadata.from",
            "org.springframework.ai.openai.metadata.created": "org.springframework.ai.openai.metadata.created",
            "org.springframework.ai.openai.metadata.toStrin": "org.springframework.ai.openai.metadata.toStrin",
            "org.springframework.ai.openai.metadata.equals": "org.springframework.ai.openai.metadata.equals",
            "org.springframework.ai.openai.metadata.hashCod": "org.springframework.ai.openai.metadata.hashCod"
        },
        "package": "package org.springframework.ai.openai.metadata;",
        "property_declarations": [
            "private final Long created;"
        ],
        "functions": [
            {
                "name": "from",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(openAiImageResponse, \"OpenAiImageResponse must not be null\");\n\t\treturn new OpenAiImageResponseMetadata(openAiImageResponse.created());",
                "is_abstract": "",
                "class_name": "OpenAiImageResponseMetadata",
                "annotations": []
            },
            {
                "name": "created",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.created;",
                "is_abstract": "",
                "class_name": "OpenAiImageResponseMetadata",
                "annotations": []
            },
            {
                "name": "toString",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return \"OpenAiImageResponseMetadata{\" + \"created=\" + created + '}';",
                "is_abstract": "",
                "class_name": "OpenAiImageResponseMetadata",
                "annotations": []
            },
            {
                "name": "equals",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (this == o)\n\t\t\treturn true;\n\t\tif (!(o instanceof OpenAiImageResponseMetadata that))\n\t\t\treturn false;\n\t\treturn Objects.equals(created, that.created);",
                "is_abstract": "",
                "class_name": "OpenAiImageResponseMetadata",
                "annotations": []
            },
            {
                "name": "hashCode",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return Objects.hash(created);",
                "is_abstract": "",
                "class_name": "OpenAiImageResponseMetadata",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-openai/src/main/java/org/springframework/ai/openai/metadata/OpenAiRateLimit.java",
        "class_names": [
            "OpenAiRateLimit"
        ],
        "imports": "import org.springframework.ai.chat.metadata.RateLimit;\nimport java.time.Duration;",
        "package_import_paths": {
            "org.springframework.ai.openai.metadata.OpenAiRateLimit": "org.springframework.ai.openai.metadata.OpenAiRateLimit",
            "org.springframework.ai.openai.metadata.getRequestsLimit": "org.springframework.ai.openai.metadata.getRequestsLimit",
            "org.springframework.ai.openai.metadata.getTokensLimit": "org.springframework.ai.openai.metadata.getTokensLimit",
            "org.springframework.ai.openai.metadata.getRequestsRemainin": "org.springframework.ai.openai.metadata.getRequestsRemainin",
            "org.springframework.ai.openai.metadata.getTokensRemainin": "org.springframework.ai.openai.metadata.getTokensRemainin",
            "org.springframework.ai.openai.metadata.getRequestsReset": "org.springframework.ai.openai.metadata.getRequestsReset",
            "org.springframework.ai.openai.metadata.getTokensReset": "org.springframework.ai.openai.metadata.getTokensReset",
            "org.springframework.ai.openai.metadata.toStrin": "org.springframework.ai.openai.metadata.toStrin",
            "org.springframework.ai.openai.metadata.RATE_LIMIT_STRING": "org.springframework.ai.openai.metadata.RATE_LIMIT_STRING",
            "org.springframework.ai.openai.metadata.requestsLimit": "org.springframework.ai.openai.metadata.requestsLimit",
            "org.springframework.ai.openai.metadata.requestsRemainin": "org.springframework.ai.openai.metadata.requestsRemainin",
            "org.springframework.ai.openai.metadata.tokensLimit": "org.springframework.ai.openai.metadata.tokensLimit",
            "org.springframework.ai.openai.metadata.tokensRemainin": "org.springframework.ai.openai.metadata.tokensRemainin",
            "org.springframework.ai.openai.metadata.requestsReset": "org.springframework.ai.openai.metadata.requestsReset",
            "org.springframework.ai.openai.metadata.tokensReset": "org.springframework.ai.openai.metadata.tokensReset"
        },
        "package": "package org.springframework.ai.openai.metadata;",
        "property_declarations": [
            "private static final String RATE_LIMIT_STRING = \"{ @type: %1$s, requestsLimit: %2$s, requestsRemaining: %3$s, requestsReset: %4$s, tokensLimit: %5$s; tokensRemaining: %6$s; tokensReset: %7$s }\";",
            "private final Long requestsRemaining;",
            "private final Long tokensRemaining;",
            "private final Duration tokensReset;",
            "private final Long requestsLimit;",
            "private final Duration requestsReset;",
            "private final Long tokensLimit;"
        ],
        "functions": [
            {
                "name": "getRequestsLimit",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.requestsLimit;",
                "is_abstract": "",
                "class_name": "OpenAiRateLimit",
                "annotations": []
            },
            {
                "name": "getTokensLimit",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.tokensLimit;",
                "is_abstract": "",
                "class_name": "OpenAiRateLimit",
                "annotations": []
            },
            {
                "name": "getRequestsRemaining",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.requestsRemaining;",
                "is_abstract": "",
                "class_name": "OpenAiRateLimit",
                "annotations": []
            },
            {
                "name": "getTokensRemaining",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.tokensRemaining;",
                "is_abstract": "",
                "class_name": "OpenAiRateLimit",
                "annotations": []
            },
            {
                "name": "getRequestsReset",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.requestsReset;",
                "is_abstract": "",
                "class_name": "OpenAiRateLimit",
                "annotations": []
            },
            {
                "name": "getTokensReset",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.tokensReset;",
                "is_abstract": "",
                "class_name": "OpenAiRateLimit",
                "annotations": []
            },
            {
                "name": "toString",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return RATE_LIMIT_STRING.formatted(getClass().getName(), getRequestsLimit(), getRequestsRemaining(),\n\t\t\t\tgetRequestsReset(), getTokensLimit(), getTokensRemaining(), getTokensReset());",
                "is_abstract": "",
                "class_name": "OpenAiRateLimit",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-openai/src/main/java/org/springframework/ai/openai/metadata/OpenAiImageGenerationMetadata.java",
        "class_names": [
            "OpenAiImageGenerationMetadata"
        ],
        "imports": "import org.springframework.ai.image.ImageGenerationMetadata;\nimport java.util.Objects;",
        "package_import_paths": {
            "org.springframework.ai.openai.metadata.OpenAiImageGenerationMetadat": "org.springframework.ai.openai.metadata.OpenAiImageGenerationMetadat",
            "org.springframework.ai.openai.metadata.getRevisedPrompt": "org.springframework.ai.openai.metadata.getRevisedPrompt",
            "org.springframework.ai.openai.metadata.toStrin": "org.springframework.ai.openai.metadata.toStrin",
            "org.springframework.ai.openai.metadata.equals": "org.springframework.ai.openai.metadata.equals",
            "org.springframework.ai.openai.metadata.hashCod": "org.springframework.ai.openai.metadata.hashCod",
            "org.springframework.ai.openai.metadata.revisedPrompt": "org.springframework.ai.openai.metadata.revisedPrompt"
        },
        "package": "package org.springframework.ai.openai.metadata;",
        "property_declarations": [
            "private String revisedPrompt;"
        ],
        "functions": [
            {
                "name": "getRevisedPrompt",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return revisedPrompt;",
                "is_abstract": "",
                "class_name": "OpenAiImageGenerationMetadata",
                "annotations": []
            },
            {
                "name": "toString",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return \"OpenAiImageGenerationMetadata{\" + \"revisedPrompt='\" + revisedPrompt + '\\'' + '}';",
                "is_abstract": "",
                "class_name": "OpenAiImageGenerationMetadata",
                "annotations": []
            },
            {
                "name": "equals",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (this == o)\n\t\t\treturn true;\n\t\tif (!(o instanceof OpenAiImageGenerationMetadata that))\n\t\t\treturn false;\n\t\treturn Objects.equals(revisedPrompt, that.revisedPrompt);",
                "is_abstract": "",
                "class_name": "OpenAiImageGenerationMetadata",
                "annotations": []
            },
            {
                "name": "hashCode",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return Objects.hash(revisedPrompt);",
                "is_abstract": "",
                "class_name": "OpenAiImageGenerationMetadata",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-openai/src/main/java/org/springframework/ai/openai/metadata/OpenAiChatResponseMetadata.java",
        "class_names": [
            "OpenAiChatResponseMetadata"
        ],
        "imports": "import org.springframework.lang.Nullable;\nimport org.springframework.util.Assert;\nimport org.springframework.ai.openai.api.OpenAiApi;\nimport org.springframework.ai.chat.metadata.*;",
        "package_import_paths": {
            "org.springframework.ai.openai.metadata.OpenAiChatResponseMetadat": "org.springframework.ai.openai.metadata.OpenAiChatResponseMetadat",
            "org.springframework.ai.openai.metadata.from": "org.springframework.ai.openai.metadata.from",
            "org.springframework.ai.openai.metadata.getId": "org.springframework.ai.openai.metadata.getId",
            "org.springframework.ai.openai.metadata.getRateLimit": "org.springframework.ai.openai.metadata.getRateLimit",
            "org.springframework.ai.openai.metadata.getUs": "org.springframework.ai.openai.metadata.getUs",
            "org.springframework.ai.openai.metadata.withRateLimit": "org.springframework.ai.openai.metadata.withRateLimit",
            "org.springframework.ai.openai.metadata.toStrin": "org.springframework.ai.openai.metadata.toStrin",
            "org.springframework.ai.openai.metadata.AI_METADATA_STRING": "org.springframework.ai.openai.metadata.AI_METADATA_STRING",
            "org.springframework.ai.openai.metadata.id": "org.springframework.ai.openai.metadata.id",
            "org.springframework.ai.openai.metadata.privat": "org.springframework.ai.openai.metadata.privat",
            "org.springframework.ai.openai.metadata.us": "org.springframework.ai.openai.metadata.us"
        },
        "package": "package org.springframework.ai.openai.metadata;",
        "property_declarations": [
            "private final String id;",
            "protected static final String AI_METADATA_STRING = \"{ @type: %1$s, id: %2$s, usage: %3$s, rateLimit: %4$s }\";",
            "private final Usage usage;",
            "@Nullable\n\tprivate RateLimit rateLimit;"
        ],
        "functions": [
            {
                "name": "from",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(result, \"OpenAI ChatCompletionResult must not be null\");\n\t\tOpenAiUsage usage = OpenAiUsage.from(result.usage());\n\t\tOpenAiChatResponseMetadata chatResponseMetadata = new OpenAiChatResponseMetadata(result.id(), usage);\n\t\treturn chatResponseMetadata;",
                "is_abstract": "",
                "class_name": "OpenAiChatResponseMetadata",
                "annotations": []
            },
            {
                "name": "getId",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.id;",
                "is_abstract": "",
                "class_name": "OpenAiChatResponseMetadata",
                "annotations": []
            },
            {
                "name": "getRateLimit",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "RateLimit rateLimit = this.rateLimit;\n\t\treturn rateLimit != null ? rateLimit : new EmptyRateLimit();",
                "is_abstract": "",
                "class_name": "OpenAiChatResponseMetadata",
                "annotations": []
            },
            {
                "name": "getUsage",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Usage usage = this.usage;\n\t\treturn usage != null ? usage : new EmptyUsage();",
                "is_abstract": "",
                "class_name": "OpenAiChatResponseMetadata",
                "annotations": []
            },
            {
                "name": "withRateLimit",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.rateLimit = rateLimit;\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "OpenAiChatResponseMetadata",
                "annotations": []
            },
            {
                "name": "toString",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return AI_METADATA_STRING.formatted(getClass().getName(), getId(), getUsage(), getRateLimit());",
                "is_abstract": "",
                "class_name": "OpenAiChatResponseMetadata",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-openai/src/main/java/org/springframework/ai/openai/metadata/OpenAiUsage.java",
        "class_names": [
            "OpenAiUsage"
        ],
        "imports": "import org.springframework.ai.openai.api.OpenAiApi;\nimport org.springframework.ai.chat.metadata.Usage;\nimport org.springframework.util.Assert;",
        "package_import_paths": {
            "org.springframework.ai.openai.metadata.OpenAiUs": "org.springframework.ai.openai.metadata.OpenAiUs",
            "org.springframework.ai.openai.metadata.from": "org.springframework.ai.openai.metadata.from",
            "org.springframework.ai.openai.metadata.getUs": "org.springframework.ai.openai.metadata.getUs",
            "org.springframework.ai.openai.metadata.getPromptTokens": "org.springframework.ai.openai.metadata.getPromptTokens",
            "org.springframework.ai.openai.metadata.getGenerationTokens": "org.springframework.ai.openai.metadata.getGenerationTokens",
            "org.springframework.ai.openai.metadata.getTotalTokens": "org.springframework.ai.openai.metadata.getTotalTokens",
            "org.springframework.ai.openai.metadata.toStrin": "org.springframework.ai.openai.metadata.toStrin",
            "org.springframework.ai.openai.metadata.OpenAiApi": "org.springframework.ai.openai.metadata.OpenAiApi"
        },
        "package": "package org.springframework.ai.openai.metadata;",
        "property_declarations": [
            "private final OpenAiApi.Usage usage;"
        ],
        "functions": [
            {
                "name": "from",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new OpenAiUsage(usage);",
                "is_abstract": "",
                "class_name": "OpenAiUsage",
                "annotations": []
            },
            {
                "name": "getUsage",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.usage;",
                "is_abstract": "",
                "class_name": "OpenAiUsage",
                "annotations": []
            },
            {
                "name": "getPromptTokens",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return getUsage().promptTokens().longValue();",
                "is_abstract": "",
                "class_name": "OpenAiUsage",
                "annotations": []
            },
            {
                "name": "getGenerationTokens",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return getUsage().completionTokens().longValue();",
                "is_abstract": "",
                "class_name": "OpenAiUsage",
                "annotations": []
            },
            {
                "name": "getTotalTokens",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return getUsage().totalTokens().longValue();",
                "is_abstract": "",
                "class_name": "OpenAiUsage",
                "annotations": []
            },
            {
                "name": "toString",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return getUsage().toString();",
                "is_abstract": "",
                "class_name": "OpenAiUsage",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-openai/src/main/java/org/springframework/ai/openai/metadata/audio/OpenAiAudioTranscriptionMetadata.java",
        "class_names": [],
        "imports": "import org.springframework.ai.model.ResultMetadata;",
        "package_import_paths": {
            "org.springframework.ai.openai.metadata.audio.creat": "org.springframework.ai.openai.metadata.audio.creat"
        },
        "package": "package org.springframework.ai.openai.metadata.audio;",
        "property_declarations": [],
        "functions": [
            {
                "name": "create",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new OpenAiAudioTranscriptionMetadata() {\n\t\t};",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-openai/src/main/java/org/springframework/ai/openai/metadata/audio/OpenAiAudioSpeechResponseMetadata.java",
        "class_names": [
            "OpenAiAudioSpeechResponseMetadata"
        ],
        "imports": "import org.springframework.lang.Nullable;\nimport org.springframework.util.Assert;\nimport org.springframework.ai.chat.metadata.EmptyRateLimit;\nimport org.springframework.ai.model.ResponseMetadata;\nimport org.springframework.ai.chat.metadata.RateLimit;\nimport org.springframework.ai.openai.api.OpenAiAudioApi;",
        "package_import_paths": {
            "org.springframework.ai.openai.metadata.audio.OpenAiAudioSpeechResponseMetadat": "org.springframework.ai.openai.metadata.audio.OpenAiAudioSpeechResponseMetadat",
            "org.springframework.ai.openai.metadata.audio.from": "org.springframework.ai.openai.metadata.audio.from",
            "org.springframework.ai.openai.metadata.audio.getRateLimit": "org.springframework.ai.openai.metadata.audio.getRateLimit",
            "org.springframework.ai.openai.metadata.audio.withRateLimit": "org.springframework.ai.openai.metadata.audio.withRateLimit",
            "org.springframework.ai.openai.metadata.audio.toStrin": "org.springframework.ai.openai.metadata.audio.toStrin",
            "org.springframework.ai.openai.metadata.audio.AI_METADATA_STRING": "org.springframework.ai.openai.metadata.audio.AI_METADATA_STRING",
            "org.springframework.ai.openai.metadata.audio.NULL": "org.springframework.ai.openai.metadata.audio.NULL",
            "org.springframework.ai.openai.metadata.audio.privat": "org.springframework.ai.openai.metadata.audio.privat"
        },
        "package": "package org.springframework.ai.openai.metadata.audio;",
        "property_declarations": [
            "public static final OpenAiAudioSpeechResponseMetadata NULL = new OpenAiAudioSpeechResponseMetadata() {\n\t};",
            "protected static final String AI_METADATA_STRING = \"{ @type: %1$s, requestsLimit: %2$s }\";",
            "@Nullable\n\tprivate RateLimit rateLimit;"
        ],
        "functions": [
            {
                "name": "from",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(result, \"OpenAI speech must not be null\");\n\t\tOpenAiAudioSpeechResponseMetadata speechResponseMetadata = new OpenAiAudioSpeechResponseMetadata();\n\t\treturn speechResponseMetadata;",
                "is_abstract": "",
                "class_name": "OpenAiAudioSpeechResponseMetadata",
                "annotations": []
            },
            {
                "name": "getRateLimit",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "RateLimit rateLimit = this.rateLimit;\n\t\treturn rateLimit != null ? rateLimit : new EmptyRateLimit();",
                "is_abstract": "",
                "class_name": "OpenAiAudioSpeechResponseMetadata",
                "annotations": []
            },
            {
                "name": "withRateLimit",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.rateLimit = rateLimit;\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "OpenAiAudioSpeechResponseMetadata",
                "annotations": []
            },
            {
                "name": "toString",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return AI_METADATA_STRING.formatted(getClass().getName(), getRateLimit());",
                "is_abstract": "",
                "class_name": "OpenAiAudioSpeechResponseMetadata",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-openai/src/main/java/org/springframework/ai/openai/metadata/audio/OpenAiAudioTranscriptionResponseMetadata.java",
        "class_names": [
            "OpenAiAudioTranscriptionResponseMetadata"
        ],
        "imports": "import org.springframework.lang.Nullable;\nimport org.springframework.util.Assert;\nimport org.springframework.ai.chat.metadata.EmptyRateLimit;\nimport org.springframework.ai.model.ResponseMetadata;\nimport org.springframework.ai.chat.metadata.RateLimit;\nimport org.springframework.ai.openai.metadata.OpenAiRateLimit;\nimport org.springframework.ai.openai.api.OpenAiAudioApi;",
        "package_import_paths": {
            "org.springframework.ai.openai.metadata.audio.OpenAiAudioTranscriptionResponseMetadat": "org.springframework.ai.openai.metadata.audio.OpenAiAudioTranscriptionResponseMetadat",
            "org.springframework.ai.openai.metadata.audio.from": "org.springframework.ai.openai.metadata.audio.from",
            "org.springframework.ai.openai.metadata.audio.getRateLimit": "org.springframework.ai.openai.metadata.audio.getRateLimit",
            "org.springframework.ai.openai.metadata.audio.withRateLimit": "org.springframework.ai.openai.metadata.audio.withRateLimit",
            "org.springframework.ai.openai.metadata.audio.toStrin": "org.springframework.ai.openai.metadata.audio.toStrin",
            "org.springframework.ai.openai.metadata.audio.AI_METADATA_STRING": "org.springframework.ai.openai.metadata.audio.AI_METADATA_STRING",
            "org.springframework.ai.openai.metadata.audio.NULL": "org.springframework.ai.openai.metadata.audio.NULL",
            "org.springframework.ai.openai.metadata.audio.privat": "org.springframework.ai.openai.metadata.audio.privat"
        },
        "package": "package org.springframework.ai.openai.metadata.audio;",
        "property_declarations": [
            "@Nullable\n\tprivate RateLimit rateLimit;",
            "protected static final String AI_METADATA_STRING = \"{ @type: %1$s, rateLimit: %4$s }\";",
            "public static final OpenAiAudioTranscriptionResponseMetadata NULL = new OpenAiAudioTranscriptionResponseMetadata() {\n\t};"
        ],
        "functions": [
            {
                "name": "from",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(result, \"OpenAI Transcription must not be null\");\n\t\tOpenAiAudioTranscriptionResponseMetadata transcriptionResponseMetadata = new OpenAiAudioTranscriptionResponseMetadata();\n\t\treturn transcriptionResponseMetadata;",
                "is_abstract": "",
                "class_name": "OpenAiAudioTranscriptionResponseMetadata",
                "annotations": []
            },
            {
                "name": "getRateLimit",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "RateLimit rateLimit = this.rateLimit;\n\t\treturn rateLimit != null ? rateLimit : new EmptyRateLimit();",
                "is_abstract": "",
                "class_name": "OpenAiAudioTranscriptionResponseMetadata",
                "annotations": []
            },
            {
                "name": "withRateLimit",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.rateLimit = rateLimit;\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "OpenAiAudioTranscriptionResponseMetadata",
                "annotations": []
            },
            {
                "name": "toString",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return AI_METADATA_STRING.formatted(getClass().getName(), getRateLimit());",
                "is_abstract": "",
                "class_name": "OpenAiAudioTranscriptionResponseMetadata",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-openai/src/main/java/org/springframework/ai/openai/metadata/audio/OpenAiAudioSpeechMetadata.java",
        "class_names": [],
        "imports": "import org.springframework.ai.model.ResultMetadata;",
        "package_import_paths": {
            "org.springframework.ai.openai.metadata.audio.creat": "org.springframework.ai.openai.metadata.audio.creat"
        },
        "package": "package org.springframework.ai.openai.metadata.audio;",
        "property_declarations": [],
        "functions": [
            {
                "name": "create",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new OpenAiAudioSpeechMetadata() {\n\t\t};",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-openai/src/main/java/org/springframework/ai/openai/metadata/support/OpenAiResponseHeaderExtractor.java",
        "class_names": [
            "OpenAiResponseHeaderExtractor"
        ],
        "imports": "import org.springframework.util.CollectionUtils;\nimport java.util.regex.Matcher;\nimport java.util.function.Predicate;\nimport org.springframework.ai.openai.metadata.OpenAiRateLimit;\nimport org.springframework.util.StringUtils;\nimport static org.springframework.ai.openai.metadata.support.OpenAiApiResponseHeaders.REQUESTS_REMAINING_HEADER;\nimport org.slf4j.Logger;\nimport java.util.Arrays;\nimport java.time.Duration;\nimport org.slf4j.LoggerFactory;\nimport static org.springframework.ai.openai.metadata.support.OpenAiApiResponseHeaders.TOKENS_LIMIT_HEADER;\nimport java.time.temporal.ChronoUnit;\nimport java.util.regex.Pattern;\nimport static org.springframework.ai.openai.metadata.support.OpenAiApiResponseHeaders.TOKENS_REMAINING_HEADER;\nimport static org.springframework.ai.openai.metadata.support.OpenAiApiResponseHeaders.REQUESTS_RESET_HEADER;\nimport static org.springframework.ai.openai.metadata.support.OpenAiApiResponseHeaders.REQUESTS_LIMIT_HEADER;\nimport org.springframework.util.Assert;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.ai.chat.metadata.RateLimit;\nimport static org.springframework.ai.openai.metadata.support.OpenAiApiResponseHeaders.TOKENS_RESET_HEADER;",
        "package_import_paths": {
            "org.springframework.ai.openai.metadata.support.OpenAiResponseHeaderExtractor": "org.springframework.ai.openai.metadata.support.OpenAiResponseHeaderExtractor",
            "org.springframework.ai.openai.metadata.support.extractAiResponseHeaders": "org.springframework.ai.openai.metadata.support.extractAiResponseHeaders",
            "org.springframework.ai.openai.metadata.support.getHeaderAsDuration": "org.springframework.ai.openai.metadata.support.getHeaderAsDuration",
            "org.springframework.ai.openai.metadata.support.getHeaderAsLon": "org.springframework.ai.openai.metadata.support.getHeaderAsLon",
            "org.springframework.ai.openai.metadata.support.parseLon": "org.springframework.ai.openai.metadata.support.parseLon",
            "org.springframework.ai.openai.metadata.support.pars": "org.springframework.ai.openai.metadata.support.pars",
            "org.springframework.ai.openai.metadata.support.parseUnit": "org.springframework.ai.openai.metadata.support.parseUnit",
            "org.springframework.ai.openai.metadata.support.parseSymbol": "org.springframework.ai.openai.metadata.support.parseSymbol",
            "org.springframework.ai.openai.metadata.support.parseTim": "org.springframework.ai.openai.metadata.support.parseTim",
            "org.springframework.ai.openai.metadata.support.getNam": "org.springframework.ai.openai.metadata.support.getNam",
            "org.springframework.ai.openai.metadata.support.getSymbol": "org.springframework.ai.openai.metadata.support.getSymbol",
            "org.springframework.ai.openai.metadata.support.getUnit": "org.springframework.ai.openai.metadata.support.getUnit",
            "org.springframework.ai.openai.metadata.support.toDuration": "org.springframework.ai.openai.metadata.support.toDuration",
            "org.springframework.ai.openai.metadata.support.logger": "org.springframework.ai.openai.metadata.support.logger",
            "org.springframework.ai.openai.metadata.support.pattern": "org.springframework.ai.openai.metadata.support.pattern",
            "org.springframework.ai.openai.metadata.support.nam": "org.springframework.ai.openai.metadata.support.nam",
            "org.springframework.ai.openai.metadata.support.symbol": "org.springframework.ai.openai.metadata.support.symbol",
            "org.springframework.ai.openai.metadata.support.unit": "org.springframework.ai.openai.metadata.support.unit"
        },
        "package": "package org.springframework.ai.openai.metadata.support;",
        "property_declarations": [
            "private static final Logger logger = LoggerFactory.getLogger(OpenAiResponseHeaderExtractor.class);",
            "private final Pattern pattern;",
            "private final String symbol;",
            "private final ChronoUnit unit;",
            "private final String name;"
        ],
        "functions": [
            {
                "name": "extractAiResponseHeaders",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Long requestsLimit = getHeaderAsLong(response, REQUESTS_LIMIT_HEADER.getName());\n\t\tLong requestsRemaining = getHeaderAsLong(response, REQUESTS_REMAINING_HEADER.getName());\n\t\tLong tokensLimit = getHeaderAsLong(response, TOKENS_LIMIT_HEADER.getName());\n\t\tLong tokensRemaining = getHeaderAsLong(response, TOKENS_REMAINING_HEADER.getName());\n\n\t\tDuration requestsReset = getHeaderAsDuration(response, REQUESTS_RESET_HEADER.getName());\n\t\tDuration tokensReset = getHeaderAsDuration(response, TOKENS_RESET_HEADER.getName());\n\n\t\treturn new OpenAiRateLimit(requestsLimit, requestsRemaining, requestsReset, tokensLimit, tokensRemaining,\n\t\t\t\ttokensReset);",
                "is_abstract": "",
                "class_name": "OpenAiResponseHeaderExtractor",
                "annotations": []
            },
            {
                "name": "getHeaderAsDuration",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var headers = response.getHeaders();\n\t\tif (headers.containsKey(headerName)) {\n\t\t\tvar values = headers.get(headerName);\n\t\t\tif (!CollectionUtils.isEmpty(values)) {\n\t\t\t\treturn DurationFormatter.TIME_UNIT.parse(values.get(0));\n\t\t\t}\n\t\t}\n\t\treturn null;",
                "is_abstract": "",
                "class_name": "OpenAiResponseHeaderExtractor",
                "annotations": []
            },
            {
                "name": "getHeaderAsLong",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var headers = response.getHeaders();\n\t\tif (headers.containsKey(headerName)) {\n\t\t\tvar values = headers.get(headerName);\n\t\t\tif (!CollectionUtils.isEmpty(values)) {\n\t\t\t\treturn parseLong(headerName, values.get(0));\n\t\t\t}\n\t\t}\n\t\treturn null;",
                "is_abstract": "",
                "class_name": "OpenAiResponseHeaderExtractor",
                "annotations": []
            },
            {
                "name": "parseLong",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (StringUtils.hasText(headerValue)) {\n\t\t\ttry {\n\t\t\t\treturn Long.parseLong(headerValue.trim());\n\t\t\t}\n\t\t\tcatch (NumberFormatException e) {\n\t\t\t\tlogger.warn(\"Value [{}] for HTTP header [{}] is not valid: {}\", headerName, headerValue,\n\t\t\t\t\t\te.getMessage());\n\t\t\t}\n\t\t}\n\n\t\treturn null;",
                "is_abstract": "",
                "class_name": "OpenAiResponseHeaderExtractor",
                "annotations": []
            },
            {
                "name": "parse",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.hasText(text, \"Text [%s] to parse as a Duration must not be null or empty\".formatted(text));\n\n\t\t\tMatcher matcher = this.pattern.matcher(text);\n\t\t\tDuration total = Duration.ZERO;\n\n\t\t\twhile (matcher.find()) {\n\t\t\t\tString value = matcher.group();\n\t\t\t\ttotal = total.plus(Unit.parseUnit(value).toDuration(value));\n\t\t\t}\n\n\t\t\treturn total;",
                "is_abstract": "",
                "class_name": "OpenAiResponseHeaderExtractor",
                "annotations": []
            },
            {
                "name": "parseUnit",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String symbol = parseSymbol(value);\n\t\t\t\treturn Arrays.stream(values())\n\t\t\t\t\t.filter(unit -> unit.getSymbol().equalsIgnoreCase(symbol))\n\t\t\t\t\t.findFirst()\n\t\t\t\t\t.orElseThrow(() -> new IllegalStateException(\n\t\t\t\t\t\t\t\"Value [%s] does not contain a valid time unit\".formatted(value)));",
                "is_abstract": "",
                "class_name": "OpenAiResponseHeaderExtractor",
                "annotations": []
            },
            {
                "name": "parseSymbol",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return parse(value, Character::isLetter);",
                "is_abstract": "",
                "class_name": "OpenAiResponseHeaderExtractor",
                "annotations": []
            },
            {
                "name": "parseTime",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return Long.parseLong(parse(value, Character::isDigit));",
                "is_abstract": "",
                "class_name": "OpenAiResponseHeaderExtractor",
                "annotations": []
            },
            {
                "name": "getName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.name;",
                "is_abstract": "",
                "class_name": "OpenAiResponseHeaderExtractor",
                "annotations": []
            },
            {
                "name": "getSymbol",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.symbol;",
                "is_abstract": "",
                "class_name": "OpenAiResponseHeaderExtractor",
                "annotations": []
            },
            {
                "name": "getUnit",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.unit;",
                "is_abstract": "",
                "class_name": "OpenAiResponseHeaderExtractor",
                "annotations": []
            },
            {
                "name": "toDuration",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return Duration.of(parseTime(value), getUnit());",
                "is_abstract": "",
                "class_name": "OpenAiResponseHeaderExtractor",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-openai/src/main/java/org/springframework/ai/openai/metadata/support/OpenAiApiResponseHeaders.java",
        "class_names": [],
        "imports": "",
        "package_import_paths": {
            "org.springframework.ai.openai.metadata.support.getNam": "org.springframework.ai.openai.metadata.support.getNam",
            "org.springframework.ai.openai.metadata.support.getDescription": "org.springframework.ai.openai.metadata.support.getDescription",
            "org.springframework.ai.openai.metadata.support.headerNam": "org.springframework.ai.openai.metadata.support.headerNam",
            "org.springframework.ai.openai.metadata.support.description": "org.springframework.ai.openai.metadata.support.description"
        },
        "package": "package org.springframework.ai.openai.metadata.support;",
        "property_declarations": [
            "private final String headerName;",
            "private final String description;"
        ],
        "functions": [
            {
                "name": "getName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.headerName;",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "getDescription",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.description;",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-openai/src/main/java/org/springframework/ai/openai/aot/OpenAiRuntimeHints.java",
        "class_names": [
            "OpenAiRuntimeHints"
        ],
        "imports": "import org.springframework.lang.Nullable;\nimport org.springframework.aot.hint.MemberCategory;\nimport org.springframework.ai.openai.api.OpenAiApi;\nimport org.springframework.aot.hint.RuntimeHints;\nimport org.springframework.aot.hint.RuntimeHintsRegistrar;\nimport org.springframework.ai.openai.api.OpenAiImageApi;\nimport org.springframework.lang.NonNull;\nimport static org.springframework.ai.aot.AiRuntimeHints.findJsonAnnotatedClassesInPackage;\nimport org.springframework.ai.openai.api.OpenAiAudioApi;",
        "package_import_paths": {
            "org.springframework.ai.openai.aot.OpenAiRuntimeHints": "org.springframework.ai.openai.aot.OpenAiRuntimeHints",
            "org.springframework.ai.openai.aot.registerHints": "org.springframework.ai.openai.aot.registerHints"
        },
        "package": "package org.springframework.ai.openai.aot;",
        "property_declarations": [],
        "functions": [
            {
                "name": "registerHints",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var mcs = MemberCategory.values();\n\t\tfor (var tr : findJsonAnnotatedClassesInPackage(OpenAiApi.class))\n\t\t\thints.reflection().registerType(tr, mcs);\n\t\tfor (var tr : findJsonAnnotatedClassesInPackage(OpenAiAudioApi.class))\n\t\t\thints.reflection().registerType(tr, mcs);\n\t\tfor (var tr : findJsonAnnotatedClassesInPackage(OpenAiImageApi.class))\n\t\t\thints.reflection().registerType(tr, mcs);",
                "is_abstract": "",
                "class_name": "OpenAiRuntimeHints",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-mistral-ai/src/test/java/org/springframework/ai/mistralai/MockWeatherService.java",
        "class_names": [
            "MockWeatherService"
        ],
        "imports": "import com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport com.fasterxml.jackson.annotation.JsonPropertyDescription;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport java.util.function.Function;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport com.fasterxml.jackson.annotation.JsonClassDescription;",
        "package_import_paths": {
            "org.springframework.ai.mistralai.MockWeatherServi": "org.springframework.ai.mistralai.MockWeatherServi",
            "org.springframework.ai.mistralai.apply": "org.springframework.ai.mistralai.apply",
            "org.springframework.ai.mistralai.unitNam": "org.springframework.ai.mistralai.unitNam"
        },
        "package": "package org.springframework.ai.mistralai;",
        "property_declarations": [
            "public final String unitName;"
        ],
        "functions": [
            {
                "name": "apply",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "double temperature = 0;\n\t\tif (request.location().contains(\"Paris\")) {\n\t\t\ttemperature = 15;\n\t\t}\n\t\telse if (request.location().contains(\"Tokyo\")) {\n\t\t\ttemperature = 10;\n\t\t}\n\t\telse if (request.location().contains(\"San Francisco\")) {\n\t\t\ttemperature = 30;\n\t\t}\n\n\t\treturn new Response(temperature, 15, 20, 2, 53, 45, Unit.C);",
                "is_abstract": "",
                "class_name": "MockWeatherService",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-mistral-ai/src/test/java/org/springframework/ai/mistralai/MistralAiChatCompletionRequestTest.java",
        "class_names": [
            "MistralAiChatCompletionRequestTest"
        ],
        "imports": "import org.springframework.ai.chat.prompt.Prompt;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.springframework.ai.mistralai.api.MistralAiApi;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;",
        "package_import_paths": {
            "org.springframework.ai.mistralai.MistralAiChatCompletionRequestTest": "org.springframework.ai.mistralai.MistralAiChatCompletionRequestTest",
            "org.springframework.ai.mistralai.chatCompletionDefaultRequestTest": "org.springframework.ai.mistralai.chatCompletionDefaultRequestTest",
            "org.springframework.ai.mistralai.chatCompletionRequestWithOptionsTest": "org.springframework.ai.mistralai.chatCompletionRequestWithOptionsTest",
            "org.springframework.ai.mistralai.chatClient": "org.springframework.ai.mistralai.chatClient"
        },
        "package": "package org.springframework.ai.mistralai;",
        "property_declarations": [
            "MistralAiChatClient chatClient = new MistralAiChatClient(new MistralAiApi(\"test\"));"
        ],
        "functions": [
            {
                "name": "chatCompletionDefaultRequestTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var request = chatClient.createRequest(new Prompt(\"test content\"), false);\n\n\t\tassertThat(request.messages()).hasSize(1);\n\t\tassertThat(request.topP()).isEqualTo(1);\n\t\tassertThat(request.temperature()).isEqualTo(0.7f);\n\t\tassertThat(request.safePrompt()).isFalse();\n\t\tassertThat(request.maxTokens()).isNull();\n\t\tassertThat(request.stream()).isFalse();",
                "is_abstract": "",
                "class_name": "MistralAiChatCompletionRequestTest",
                "annotations": []
            },
            {
                "name": "chatCompletionRequestWithOptionsTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var options = MistralAiChatOptions.builder().withTemperature(0.5f).withTopP(0.8f).build();\n\n\t\tvar request = chatClient.createRequest(new Prompt(\"test content\", options), true);\n\n\t\tassertThat(request.messages().size()).isEqualTo(1);\n\t\tassertThat(request.topP()).isEqualTo(0.8f);\n\t\tassertThat(request.temperature()).isEqualTo(0.5f);\n\t\tassertThat(request.stream()).isTrue();",
                "is_abstract": "",
                "class_name": "MistralAiChatCompletionRequestTest",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-mistral-ai/src/test/java/org/springframework/ai/mistralai/MistralAiEmbeddingIT.java",
        "class_names": [
            "MistralAiEmbeddingIT"
        ],
        "imports": "import java.util.List;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.ai.embedding.EmbeddingRequest;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;",
        "package_import_paths": {
            "org.springframework.ai.mistralai.MistralAiEmbeddingIT": "org.springframework.ai.mistralai.MistralAiEmbeddingIT",
            "org.springframework.ai.mistralai.defaultEmbeddin": "org.springframework.ai.mistralai.defaultEmbeddin",
            "org.springframework.ai.mistralai.embeddingTest": "org.springframework.ai.mistralai.embeddingTest",
            "org.springframework.ai.mistralai.privat": "org.springframework.ai.mistralai.privat"
        },
        "package": "package org.springframework.ai.mistralai;",
        "property_declarations": [
            "@Autowired\n\tprivate MistralAiEmbeddingClient mistralAiEmbeddingClient;"
        ],
        "functions": [
            {
                "name": "defaultEmbedding",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "assertThat(mistralAiEmbeddingClient).isNotNull();\n\t\tvar embeddingResponse = mistralAiEmbeddingClient.embedForResponse(List.of(\"Hello World\"));\n\t\tassertThat(embeddingResponse.getResults()).hasSize(1);\n\t\tassertThat(embeddingResponse.getResults().get(0)).isNotNull();\n\t\tassertThat(embeddingResponse.getResults().get(0).getOutput()).hasSize(1024);\n\t\tassertThat(embeddingResponse.getMetadata()).containsEntry(\"model\", \"mistral-embed\");\n\t\tassertThat(embeddingResponse.getMetadata()).containsEntry(\"total-tokens\", 4);\n\t\tassertThat(embeddingResponse.getMetadata()).containsEntry(\"prompt-tokens\", 4);\n\t\tassertThat(mistralAiEmbeddingClient.dimensions()).isEqualTo(1024);",
                "is_abstract": "",
                "class_name": "MistralAiEmbeddingIT",
                "annotations": []
            },
            {
                "name": "embeddingTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "assertThat(mistralAiEmbeddingClient).isNotNull();\n\t\tvar embeddingResponse = mistralAiEmbeddingClient.call(new EmbeddingRequest(\n\t\t\t\tList.of(\"Hello World\", \"World is big\"),\n\t\t\t\tMistralAiEmbeddingOptions.builder().withModel(\"mistral-embed\").withEncodingFormat(\"float\").build()));\n\t\tassertThat(embeddingResponse.getResults()).hasSize(2);\n\t\tassertThat(embeddingResponse.getResults().get(0)).isNotNull();\n\t\tassertThat(embeddingResponse.getResults().get(0).getOutput()).hasSize(1024);\n\t\tassertThat(embeddingResponse.getMetadata()).containsEntry(\"model\", \"mistral-embed\");\n\t\tassertThat(embeddingResponse.getMetadata()).containsEntry(\"total-tokens\", 9);\n\t\tassertThat(embeddingResponse.getMetadata()).containsEntry(\"prompt-tokens\", 9);\n\t\tassertThat(mistralAiEmbeddingClient.dimensions()).isEqualTo(1024);",
                "is_abstract": "",
                "class_name": "MistralAiEmbeddingIT",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-mistral-ai/src/test/java/org/springframework/ai/mistralai/MistralAiTestConfiguration.java",
        "class_names": [
            "MistralAiTestConfiguration"
        ],
        "imports": "import org.springframework.context.annotation.Bean;\nimport org.springframework.ai.mistralai.api.MistralAiApi;\nimport org.springframework.util.StringUtils;\nimport org.springframework.ai.embedding.EmbeddingClient;\nimport org.springframework.boot.SpringBootConfiguration;",
        "package_import_paths": {
            "org.springframework.ai.mistralai.MistralAiTestConfiguration": "org.springframework.ai.mistralai.MistralAiTestConfiguration",
            "org.springframework.ai.mistralai.mistralAiApi": "org.springframework.ai.mistralai.mistralAiApi",
            "org.springframework.ai.mistralai.mistralAiEmbeddingClient": "org.springframework.ai.mistralai.mistralAiEmbeddingClient",
            "org.springframework.ai.mistralai.mistralAiChatClient": "org.springframework.ai.mistralai.mistralAiChatClient"
        },
        "package": "package org.springframework.ai.mistralai;",
        "property_declarations": [],
        "functions": [
            {
                "name": "mistralAiApi",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var apiKey = System.getenv(\"MISTRAL_AI_API_KEY\");\n\t\tif (!StringUtils.hasText(apiKey)) {\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\"Missing MISTRAL_AI_API_KEY environment variable. Please set it to your Mistral AI API key.\");\n\t\t}\n\t\treturn new MistralAiApi(apiKey);",
                "is_abstract": "",
                "class_name": "MistralAiTestConfiguration",
                "annotations": []
            },
            {
                "name": "mistralAiEmbeddingClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new MistralAiEmbeddingClient(api,\n\t\t\t\tMistralAiEmbeddingOptions.builder().withModel(MistralAiApi.EmbeddingModel.EMBED.getValue()).build());",
                "is_abstract": "",
                "class_name": "MistralAiTestConfiguration",
                "annotations": []
            },
            {
                "name": "mistralAiChatClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new MistralAiChatClient(mistralAiApi,\n\t\t\t\tMistralAiChatOptions.builder().withModel(MistralAiApi.ChatModel.MIXTRAL.getValue()).build());",
                "is_abstract": "",
                "class_name": "MistralAiTestConfiguration",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-mistral-ai/src/test/java/org/springframework/ai/mistralai/MistralAiRetryTests.java",
        "class_names": [
            "MistralAiRetryTests",
            "TestRetryListener"
        ],
        "imports": "import org.springframework.ai.retry.RetryUtils;\nimport org.springframework.ai.document.MetadataMode;\nimport java.util.List;\nimport org.springframework.ai.mistralai.api.MistralAiApi.ChatCompletionRequest;\nimport org.springframework.retry.support.RetryTemplate;\nimport reactor.core.publisher.Flux;\nimport org.springframework.ai.retry.TransientAiException;\nimport org.springframework.ai.mistralai.api.MistralAiApi.Embedding;\nimport org.springframework.ai.mistralai.api.MistralAiApi.ChatCompletionMessage.Role;\nimport org.springframework.retry.RetryContext;\nimport org.mockito.Mock;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.springframework.ai.mistralai.api.MistralAiApi.EmbeddingRequest;\nimport org.springframework.ai.mistralai.api.MistralAiApi;\nimport org.springframework.ai.mistralai.api.MistralAiApi.ChatCompletionFinishReason;\nimport org.springframework.retry.RetryListener;\nimport org.springframework.retry.RetryCallback;\nimport org.springframework.ai.mistralai.api.MistralAiApi.ChatCompletionChunk;\nimport static org.mockito.Mockito.when;\nimport org.springframework.ai.mistralai.api.MistralAiApi.EmbeddingList;\nimport static org.mockito.ArgumentMatchers.isA;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.springframework.ai.chat.prompt.Prompt;\nimport org.springframework.http.ResponseEntity;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.mistralai.api.MistralAiApi.ChatCompletionMessage;\nimport org.springframework.ai.mistralai.api.MistralAiApi.ChatCompletion;\nimport org.mockito.junit.jupiter.MockitoExtension;\nimport java.util.Optional;",
        "package_import_paths": {
            "org.springframework.ai.mistralai.MistralAiRetryTests": "org.springframework.ai.mistralai.MistralAiRetryTests",
            "org.springframework.ai.mistralai.TestRetryListener": "org.springframework.ai.mistralai.TestRetryListener",
            "org.springframework.ai.mistralai.onSuccess": "org.springframework.ai.mistralai.onSuccess",
            "org.springframework.ai.mistralai.onError": "org.springframework.ai.mistralai.onError",
            "org.springframework.ai.mistralai.beforeEach": "org.springframework.ai.mistralai.beforeEach",
            "org.springframework.ai.mistralai.mistralAiChatTransientError": "org.springframework.ai.mistralai.mistralAiChatTransientError",
            "org.springframework.ai.mistralai.mistralAiChatNonTransientError": "org.springframework.ai.mistralai.mistralAiChatNonTransientError",
            "org.springframework.ai.mistralai.mistralAiChatStreamTransientError": "org.springframework.ai.mistralai.mistralAiChatStreamTransientError",
            "org.springframework.ai.mistralai.mistralAiChatStreamNonTransientError": "org.springframework.ai.mistralai.mistralAiChatStreamNonTransientError",
            "org.springframework.ai.mistralai.mistralAiEmbeddingTransientError": "org.springframework.ai.mistralai.mistralAiEmbeddingTransientError",
            "org.springframework.ai.mistralai.mistralAiEmbeddingNonTransientError": "org.springframework.ai.mistralai.mistralAiEmbeddingNonTransientError",
            "org.springframework.ai.mistralai.onErrorRetryCount": "org.springframework.ai.mistralai.onErrorRetryCount",
            "org.springframework.ai.mistralai.onSuccessRetryCount": "org.springframework.ai.mistralai.onSuccessRetryCount",
            "org.springframework.ai.mistralai.retryListener": "org.springframework.ai.mistralai.retryListener",
            "org.springframework.ai.mistralai.retryTemplat": "org.springframework.ai.mistralai.retryTemplat",
            "org.springframework.ai.mistralai.MistralAiApi": "org.springframework.ai.mistralai.MistralAiApi",
            "org.springframework.ai.mistralai.chatClient": "org.springframework.ai.mistralai.chatClient",
            "org.springframework.ai.mistralai.embeddingClient": "org.springframework.ai.mistralai.embeddingClient"
        },
        "package": "package org.springframework.ai.mistralai;",
        "property_declarations": [
            "private MistralAiChatClient chatClient;",
            "private @Mock MistralAiApi mistralAiApi;",
            "private TestRetryListener retryListener;",
            "private RetryTemplate retryTemplate;",
            "int onErrorRetryCount = 0;",
            "int onSuccessRetryCount = 0;",
            "private MistralAiEmbeddingClient embeddingClient;"
        ],
        "functions": [
            {
                "name": "onSuccess",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "onSuccessRetryCount = context.getRetryCount();",
                "is_abstract": "",
                "class_name": "MistralAiRetryTests TestRetryListener",
                "annotations": []
            },
            {
                "name": "onError",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "onErrorRetryCount = context.getRetryCount();",
                "is_abstract": "",
                "class_name": "MistralAiRetryTests TestRetryListener",
                "annotations": []
            },
            {
                "name": "beforeEach",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "retryTemplate = RetryUtils.DEFAULT_RETRY_TEMPLATE;\n\t\tretryListener = new TestRetryListener();\n\t\tretryTemplate.registerListener(retryListener);\n\n\t\tchatClient = new MistralAiChatClient(mistralAiApi,\n\t\t\t\tMistralAiChatOptions.builder()\n\t\t\t\t\t.withTemperature(0.7f)\n\t\t\t\t\t.withTopP(1f)\n\t\t\t\t\t.withSafePrompt(false)\n\t\t\t\t\t.withModel(MistralAiApi.ChatModel.TINY.getValue())\n\t\t\t\t\t.build(),\n\t\t\t\tnull, retryTemplate);\n\t\tembeddingClient = new MistralAiEmbeddingClient(mistralAiApi, MetadataMode.EMBED,\n\t\t\t\tMistralAiEmbeddingOptions.builder().withModel(MistralAiApi.EmbeddingModel.EMBED.getValue()).build(),\n\t\t\t\tretryTemplate);",
                "is_abstract": "",
                "class_name": "MistralAiRetryTests TestRetryListener",
                "annotations": []
            },
            {
                "name": "mistralAiChatTransientError",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var choice = new ChatCompletion.Choice(0, new ChatCompletionMessage(\"Response\", Role.ASSISTANT),\n\t\t\t\tChatCompletionFinishReason.STOP);\n\t\tChatCompletion expectedChatCompletion = new ChatCompletion(\"id\", \"chat.completion\", 789l, \"model\",\n\t\t\t\tList.of(choice), new MistralAiApi.Usage(10, 10, 10));\n\n\t\twhen(mistralAiApi.chatCompletionEntity(isA(ChatCompletionRequest.class)))\n\t\t\t.thenThrow(new TransientAiException(\"Transient Error 1\"))\n\t\t\t.thenThrow(new TransientAiException(\"Transient Error 2\"))\n\t\t\t.thenReturn(ResponseEntity.of(Optional.of(expectedChatCompletion)));\n\n\t\tvar result = chatClient.call(new Prompt(\"text\"));\n\n\t\tassertThat(result).isNotNull();\n\t\tassertThat(result.getResult().getOutput().getContent()).isSameAs(\"Response\");\n\t\tassertThat(retryListener.onSuccessRetryCount).isEqualTo(2);\n\t\tassertThat(retryListener.onErrorRetryCount).isEqualTo(2);",
                "is_abstract": "",
                "class_name": "MistralAiRetryTests TestRetryListener",
                "annotations": []
            },
            {
                "name": "mistralAiChatNonTransientError",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "when(mistralAiApi.chatCompletionEntity(isA(ChatCompletionRequest.class)))\n\t\t\t\t.thenThrow(new RuntimeException(\"Non Transient Error\"));\n\t\tassertThrows(RuntimeException.class, () -> chatClient.call(new Prompt(\"text\")));",
                "is_abstract": "",
                "class_name": "MistralAiRetryTests TestRetryListener",
                "annotations": []
            },
            {
                "name": "mistralAiChatStreamTransientError",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var choice = new ChatCompletionChunk.ChunkChoice(0, new ChatCompletionMessage(\"Response\", Role.ASSISTANT),\n\t\t\t\tChatCompletionFinishReason.STOP);\n\t\tChatCompletionChunk expectedChatCompletion = new ChatCompletionChunk(\"id\", \"chat.completion.chunk\", 789l,\n\t\t\t\t\"model\", List.of(choice));\n\n\t\twhen(mistralAiApi.chatCompletionStream(isA(ChatCompletionRequest.class)))\n\t\t\t.thenThrow(new TransientAiException(\"Transient Error 1\"))\n\t\t\t.thenThrow(new TransientAiException(\"Transient Error 2\"))\n\t\t\t.thenReturn(Flux.just(expectedChatCompletion));\n\n\t\tvar result = chatClient.stream(new Prompt(\"text\"));\n\n\t\tassertThat(result).isNotNull();\n\t\tassertThat(result.collectList().block().get(0).getResult().getOutput().getContent()).isSameAs(\"Response\");\n\t\tassertThat(retryListener.onSuccessRetryCount).isEqualTo(2);\n\t\tassertThat(retryListener.onErrorRetryCount).isEqualTo(2);",
                "is_abstract": "",
                "class_name": "MistralAiRetryTests TestRetryListener",
                "annotations": []
            },
            {
                "name": "mistralAiChatStreamNonTransientError",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "when(mistralAiApi.chatCompletionStream(isA(ChatCompletionRequest.class)))\n\t\t\t\t.thenThrow(new RuntimeException(\"Non Transient Error\"));\n\t\tassertThrows(RuntimeException.class, () -> chatClient.stream(new Prompt(\"text\")));",
                "is_abstract": "",
                "class_name": "MistralAiRetryTests TestRetryListener",
                "annotations": []
            },
            {
                "name": "mistralAiEmbeddingTransientError",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "EmbeddingList<Embedding> expectedEmbeddings = new EmbeddingList<>(\"list\",\n\t\t\t\tList.of(new Embedding(0, List.of(9.9, 8.8))), \"model\", new MistralAiApi.Usage(10, 10, 10));\n\n\t\twhen(mistralAiApi.embeddings(isA(EmbeddingRequest.class)))\n\t\t\t.thenThrow(new TransientAiException(\"Transient Error 1\"))\n\t\t\t.thenThrow(new TransientAiException(\"Transient Error 2\"))\n\t\t\t.thenReturn(ResponseEntity.of(Optional.of(expectedEmbeddings)));\n\n\t\tvar result = embeddingClient\n\t\t\t.call(new org.springframework.ai.embedding.EmbeddingRequest(List.of(\"text1\", \"text2\"), null));\n\n\t\tassertThat(result).isNotNull();\n\t\tassertThat(result.getResult().getOutput()).isEqualTo(List.of(9.9, 8.8));\n\t\tassertThat(retryListener.onSuccessRetryCount).isEqualTo(2);\n\t\tassertThat(retryListener.onErrorRetryCount).isEqualTo(2);",
                "is_abstract": "",
                "class_name": "MistralAiRetryTests TestRetryListener",
                "annotations": []
            },
            {
                "name": "mistralAiEmbeddingNonTransientError",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "when(mistralAiApi.embeddings(isA(EmbeddingRequest.class)))\n\t\t\t\t.thenThrow(new RuntimeException(\"Non Transient Error\"));\n\t\tassertThrows(RuntimeException.class, () -> embeddingClient\n\t\t\t\t.call(new org.springframework.ai.embedding.EmbeddingRequest(List.of(\"text1\", \"text2\"), null)));",
                "is_abstract": "",
                "class_name": "MistralAiRetryTests TestRetryListener",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-mistral-ai/src/test/java/org/springframework/ai/mistralai/MistralAiChatClientIT.java",
        "class_names": [
            "MistralAiChatClientIT"
        ],
        "imports": "import java.util.stream.Collectors;\nimport java.util.List;\nimport org.springframework.ai.chat.Generation;\nimport org.springframework.ai.chat.ChatClient;\nimport reactor.core.publisher.Flux;\nimport org.springframework.ai.chat.prompt.SystemPromptTemplate;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.core.io.Resource;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.ai.parser.MapOutputParser;\nimport org.springframework.ai.chat.messages.Message;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.slf4j.Logger;\nimport org.springframework.ai.mistralai.api.MistralAiApi;\nimport java.util.Map;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.ai.parser.BeanOutputParser;\nimport org.springframework.beans.factory.annotation.Value;\nimport java.util.Arrays;\nimport org.springframework.ai.chat.ChatResponse;\nimport org.springframework.ai.chat.messages.UserMessage;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.ai.chat.prompt.PromptTemplate;\nimport org.springframework.ai.parser.ListOutputParser;\nimport org.springframework.ai.chat.messages.AssistantMessage;\nimport org.springframework.ai.model.function.FunctionCallbackWrapper;\nimport java.util.ArrayList;\nimport org.springframework.ai.chat.prompt.Prompt;\nimport org.springframework.core.convert.support.DefaultConversionService;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.chat.StreamingChatClient;",
        "package_import_paths": {
            "org.springframework.ai.mistralai.MistralAiChatClientIT": "org.springframework.ai.mistralai.MistralAiChatClientIT",
            "org.springframework.ai.mistralai.roleTest": "org.springframework.ai.mistralai.roleTest",
            "org.springframework.ai.mistralai.outputParser": "org.springframework.ai.mistralai.outputParser",
            "org.springframework.ai.mistralai.mapOutputParser": "org.springframework.ai.mistralai.mapOutputParser",
            "org.springframework.ai.mistralai.beanOutputParserRecords": "org.springframework.ai.mistralai.beanOutputParserRecords",
            "org.springframework.ai.mistralai.beanStreamOutputParserRecords": "org.springframework.ai.mistralai.beanStreamOutputParserRecords",
            "org.springframework.ai.mistralai.functionCallTest": "org.springframework.ai.mistralai.functionCallTest",
            "org.springframework.ai.mistralai.streamFunctionCallTest": "org.springframework.ai.mistralai.streamFunctionCallTest",
            "org.springframework.ai.mistralai.logger": "org.springframework.ai.mistralai.logger",
            "org.springframework.ai.mistralai.protected": "org.springframework.ai.mistralai.protected",
            "org.springframework.ai.mistralai.systemResour": "org.springframework.ai.mistralai.systemResour",
            "org.springframework.ai.mistralai.qaEvaluatorAccurateAnswerResour": "org.springframework.ai.mistralai.qaEvaluatorAccurateAnswerResour",
            "org.springframework.ai.mistralai.qaEvaluatorNotRelatedResour": "org.springframework.ai.mistralai.qaEvaluatorNotRelatedResour",
            "org.springframework.ai.mistralai.qaEvalutaorFactBasedAnswerResour": "org.springframework.ai.mistralai.qaEvalutaorFactBasedAnswerResour",
            "org.springframework.ai.mistralai.userEvaluatorResour": "org.springframework.ai.mistralai.userEvaluatorResour"
        },
        "package": "package org.springframework.ai.mistralai;",
        "property_declarations": [
            "@Autowired\n\tprotected StreamingChatClient streamingChatClient;",
            "@Autowired\n\tprotected ChatClient chatClient;",
            "@Value(\"classpath:/prompts/eval/qa-evaluator-not-related-message.st\")\n\tprotected Resource qaEvaluatorNotRelatedResource;",
            "@Value(\"classpath:/prompts/eval/qa-evaluator-fact-based-answer.st\")\n\tprotected Resource qaEvalutaorFactBasedAnswerResource;",
            "private static final Logger logger = LoggerFactory.getLogger(MistralAiChatClientIT.class);",
            "@Value(\"classpath:/prompts/system-message.st\")\n\tprivate Resource systemResource;",
            "@Value(\"classpath:/prompts/eval/user-evaluator-message.st\")\n\tprotected Resource userEvaluatorResource;",
            "@Value(\"classpath:/prompts/eval/qa-evaluator-accurate-answer.st\")\n\tprotected Resource qaEvaluatorAccurateAnswerResource;"
        ],
        "functions": [
            {
                "name": "roleTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "UserMessage userMessage = new UserMessage(\n\t\t\t\t\"Tell me about 3 famous pirates from the Golden Age of Piracy and why they did.\");\n\t\tSystemPromptTemplate systemPromptTemplate = new SystemPromptTemplate(systemResource);\n\t\tMessage systemMessage = systemPromptTemplate.createMessage(Map.of(\"name\", \"Bob\", \"voice\", \"pirate\"));\n\t\t// NOTE: Mistral expects the system message to be before the user message or will\n\t\t// fail with 400 error.\n\t\tPrompt prompt = new Prompt(List.of(systemMessage, userMessage));\n\t\tChatResponse response = chatClient.call(prompt);\n\t\tassertThat(response.getResults()).hasSize(1);\n\t\tassertThat(response.getResults().get(0).getOutput().getContent()).contains(\"Blackbeard\");",
                "is_abstract": "",
                "class_name": "MistralAiChatClientIT",
                "annotations": []
            },
            {
                "name": "outputParser",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "DefaultConversionService conversionService = new DefaultConversionService();\n\t\tListOutputParser outputParser = new ListOutputParser(conversionService);\n\n\t\tString format = outputParser.getFormat();\n\t\tString template = \"\"\"\n\t\t\t\tList five {subject}\n\t\t\t\t{format}\n\t\t\t\t\"\"\";\n\t\tPromptTemplate promptTemplate = new PromptTemplate(template,\n\t\t\t\tMap.of(\"subject\", \"ice cream flavors\", \"format\", format));\n\t\tPrompt prompt = new Prompt(promptTemplate.createMessage());\n\t\tGeneration generation = this.chatClient.call(prompt).getResult();\n\n\t\tList<String> list = outputParser.parse(generation.getOutput().getContent());\n\t\tassertThat(list).hasSize(5);",
                "is_abstract": "",
                "class_name": "MistralAiChatClientIT",
                "annotations": []
            },
            {
                "name": "mapOutputParser",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "MapOutputParser outputParser = new MapOutputParser();\n\n\t\tString format = outputParser.getFormat();\n\t\tString template = \"\"\"\n\t\t\t\tProvide me a List of {subject}\n\t\t\t\t{format}\n\t\t\t\t\"\"\";\n\t\tPromptTemplate promptTemplate = new PromptTemplate(template,\n\t\t\t\tMap.of(\"subject\", \"an array of numbers from 1 to 9 under they key name 'numbers'\", \"format\", format));\n\t\tPrompt prompt = new Prompt(promptTemplate.createMessage());\n\t\tGeneration generation = chatClient.call(prompt).getResult();\n\n\t\tMap<String, Object> result = outputParser.parse(generation.getOutput().getContent());\n\t\tassertThat(result.get(\"numbers\")).isEqualTo(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9));",
                "is_abstract": "",
                "class_name": "MistralAiChatClientIT",
                "annotations": []
            },
            {
                "name": "beanOutputParserRecords",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "BeanOutputParser<ActorsFilmsRecord> outputParser = new BeanOutputParser<>(ActorsFilmsRecord.class);\n\n\t\tString format = outputParser.getFormat();\n\t\tString template = \"\"\"\n\t\t\t\tGenerate the filmography of 5 movies for Tom Hanks.\n\t\t\t\t{format}\n\t\t\t\t\"\"\";\n\t\tPromptTemplate promptTemplate = new PromptTemplate(template, Map.of(\"format\", format));\n\t\tPrompt prompt = new Prompt(promptTemplate.createMessage());\n\t\tGeneration generation = chatClient.call(prompt).getResult();\n\n\t\tActorsFilmsRecord actorsFilms = outputParser.parse(generation.getOutput().getContent());\n\t\tlogger.info(\"\" + actorsFilms);\n\t\tassertThat(actorsFilms.actor()).isEqualTo(\"Tom Hanks\");\n\t\tassertThat(actorsFilms.movies()).hasSize(5);",
                "is_abstract": "",
                "class_name": "MistralAiChatClientIT",
                "annotations": []
            },
            {
                "name": "beanStreamOutputParserRecords",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "BeanOutputParser<ActorsFilmsRecord> outputParser = new BeanOutputParser<>(ActorsFilmsRecord.class);\n\n\t\tString format = outputParser.getFormat();\n\t\tString template = \"\"\"\n\t\t\t\tGenerate the filmography of 5 movies for Tom Hanks.\n\t\t\t\t{format}\n\t\t\t\t\"\"\";\n\t\tPromptTemplate promptTemplate = new PromptTemplate(template, Map.of(\"format\", format));\n\t\tPrompt prompt = new Prompt(promptTemplate.createMessage());\n\n\t\tString generationTextFromStream = streamingChatClient.stream(prompt)\n\t\t\t.collectList()\n\t\t\t.block()\n\t\t\t.stream()\n\t\t\t.map(ChatResponse::getResults)\n\t\t\t.flatMap(List::stream)\n\t\t\t.map(Generation::getOutput)\n\t\t\t.map(AssistantMessage::getContent)\n\t\t\t.collect(Collectors.joining());\n\n\t\tActorsFilmsRecord actorsFilms = outputParser.parse(generationTextFromStream);\n\t\tlogger.info(\"\" + actorsFilms);\n\t\tassertThat(actorsFilms.actor()).isEqualTo(\"Tom Hanks\");\n\t\tassertThat(actorsFilms.movies()).hasSize(5);",
                "is_abstract": "",
                "class_name": "MistralAiChatClientIT",
                "annotations": []
            },
            {
                "name": "functionCallTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "UserMessage userMessage = new UserMessage(\"What's the weather like in San Francisco?\");\n\n\t\tList<Message> messages = new ArrayList<>(List.of(userMessage));\n\n\t\tvar promptOptions = MistralAiChatOptions.builder()\n\t\t\t.withModel(MistralAiApi.ChatModel.SMALL.getValue())\n\t\t\t.withFunctionCallbacks(List.of(FunctionCallbackWrapper.builder(new MockWeatherService())\n\t\t\t\t.withName(\"getCurrentWeather\")\n\t\t\t\t.withDescription(\"Get the weather in location\")\n\t\t\t\t.withResponseConverter((response) -> \"\" + response.temp() + response.unit())\n\t\t\t\t.build()))\n\t\t\t.build();\n\n\t\tChatResponse response = chatClient.call(new Prompt(messages, promptOptions));\n\n\t\tlogger.info(\"Response: {}\", response);\n\n\t\tassertThat(response.getResult().getOutput().getContent()).containsAnyOf(\"30.0\", \"30\");",
                "is_abstract": "",
                "class_name": "MistralAiChatClientIT",
                "annotations": []
            },
            {
                "name": "streamFunctionCallTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "UserMessage userMessage = new UserMessage(\"What's the weather like in Tokyo, Japan?\");\n\n\t\tList<Message> messages = new ArrayList<>(List.of(userMessage));\n\n\t\tvar promptOptions = MistralAiChatOptions.builder()\n\t\t\t.withModel(MistralAiApi.ChatModel.SMALL.getValue())\n\t\t\t.withFunctionCallbacks(List.of(FunctionCallbackWrapper.builder(new MockWeatherService())\n\t\t\t\t.withName(\"getCurrentWeather\")\n\t\t\t\t.withDescription(\"Get the weather in location\")\n\t\t\t\t.withResponseConverter((response) -> \"\" + response.temp() + response.unit())\n\t\t\t\t.build()))\n\t\t\t.build();\n\n\t\tFlux<ChatResponse> response = streamingChatClient.stream(new Prompt(messages, promptOptions));\n\n\t\tString content = response.collectList()\n\t\t\t.block()\n\t\t\t.stream()\n\t\t\t.map(ChatResponse::getResults)\n\t\t\t.flatMap(List::stream)\n\t\t\t.map(Generation::getOutput)\n\t\t\t.map(AssistantMessage::getContent)\n\t\t\t.collect(Collectors.joining());\n\t\tlogger.info(\"Response: {}\", content);\n\n\t\tassertThat(content).containsAnyOf(\"10.0\", \"10\");",
                "is_abstract": "",
                "class_name": "MistralAiChatClientIT",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-mistral-ai/src/test/java/org/springframework/ai/mistralai/api/MistralAiApiIT.java",
        "class_names": [
            "MistralAiApiIT"
        ],
        "imports": "import org.springframework.ai.mistralai.api.MistralAiApi.ChatCompletionChunk;\nimport java.util.List;\nimport org.springframework.ai.mistralai.api.MistralAiApi.ChatCompletionRequest;\nimport org.springframework.ai.mistralai.api.MistralAiApi.EmbeddingList;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport reactor.core.publisher.Flux;\nimport org.springframework.http.ResponseEntity;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.mistralai.api.MistralAiApi.ChatCompletionMessage;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.ai.mistralai.api.MistralAiApi.ChatCompletion;\nimport org.springframework.ai.mistralai.api.MistralAiApi.Embedding;\nimport org.springframework.ai.mistralai.api.MistralAiApi.ChatCompletionMessage.Role;",
        "package_import_paths": {
            "org.springframework.ai.mistralai.api.MistralAiApiIT": "org.springframework.ai.mistralai.api.MistralAiApiIT",
            "org.springframework.ai.mistralai.api.chatCompletionEntity": "org.springframework.ai.mistralai.api.chatCompletionEntity",
            "org.springframework.ai.mistralai.api.chatCompletionEntityWithSystemMess": "org.springframework.ai.mistralai.api.chatCompletionEntityWithSystemMess",
            "org.springframework.ai.mistralai.api.chatCompletionStream": "org.springframework.ai.mistralai.api.chatCompletionStream",
            "org.springframework.ai.mistralai.api.embeddings": "org.springframework.ai.mistralai.api.embeddings",
            "org.springframework.ai.mistralai.api.mistralAiApi": "org.springframework.ai.mistralai.api.mistralAiApi"
        },
        "package": "package org.springframework.ai.mistralai.api;",
        "property_declarations": [
            "MistralAiApi mistralAiApi = new MistralAiApi(System.getenv(\"MISTRAL_AI_API_KEY\"));"
        ],
        "functions": [
            {
                "name": "chatCompletionEntity",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "ChatCompletionMessage chatCompletionMessage = new ChatCompletionMessage(\"Hello world\", Role.USER);\n\t\tResponseEntity<ChatCompletion> response = mistralAiApi.chatCompletionEntity(new ChatCompletionRequest(\n\t\t\t\tList.of(chatCompletionMessage), MistralAiApi.ChatModel.TINY.getValue(), 0.8f, false));\n\n\t\tassertThat(response).isNotNull();\n\t\tassertThat(response.getBody()).isNotNull();",
                "is_abstract": "",
                "class_name": "MistralAiApiIT",
                "annotations": []
            },
            {
                "name": "chatCompletionEntityWithSystemMessage",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "ChatCompletionMessage userMessage = new ChatCompletionMessage(\n\t\t\t\t\"Tell me about 3 famous pirates from the Golden Age of Piracy and why they did?\", Role.USER);\n\t\tChatCompletionMessage systemMessage = new ChatCompletionMessage(\"\"\"\n\t\t\t\tYou are an AI assistant that helps people find information.\n\t\t\t\tYour name is Bob.\n\t\t\t\tYou should reply to the user's request with your name and also in the style of a pirate.\n\t\t\t\t\t\"\"\", Role.SYSTEM);\n\n\t\tResponseEntity<ChatCompletion> response = mistralAiApi.chatCompletionEntity(new ChatCompletionRequest(\n\t\t\t\tList.of(systemMessage, userMessage), MistralAiApi.ChatModel.TINY.getValue(), 0.8f, false));\n\n\t\tassertThat(response).isNotNull();\n\t\tassertThat(response.getBody()).isNotNull();",
                "is_abstract": "",
                "class_name": "MistralAiApiIT",
                "annotations": []
            },
            {
                "name": "chatCompletionStream",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "ChatCompletionMessage chatCompletionMessage = new ChatCompletionMessage(\"Hello world\", Role.USER);\n\t\tFlux<ChatCompletionChunk> response = mistralAiApi.chatCompletionStream(new ChatCompletionRequest(\n\t\t\t\tList.of(chatCompletionMessage), MistralAiApi.ChatModel.TINY.getValue(), 0.8f, true));\n\n\t\tassertThat(response).isNotNull();\n\t\tassertThat(response.collectList().block()).isNotNull();",
                "is_abstract": "",
                "class_name": "MistralAiApiIT",
                "annotations": []
            },
            {
                "name": "embeddings",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "ResponseEntity<EmbeddingList<Embedding>> response = mistralAiApi\n\t\t\t.embeddings(new MistralAiApi.EmbeddingRequest<String>(\"Hello world\"));\n\n\t\tassertThat(response).isNotNull();\n\t\tassertThat(response.getBody().data()).hasSize(1);\n\t\tassertThat(response.getBody().data().get(0).embedding()).hasSize(1024);",
                "is_abstract": "",
                "class_name": "MistralAiApiIT",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-mistral-ai/src/test/java/org/springframework/ai/mistralai/api/tool/MockWeatherService.java",
        "class_names": [
            "MockWeatherService"
        ],
        "imports": "import com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport com.fasterxml.jackson.annotation.JsonPropertyDescription;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport java.util.function.Function;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport com.fasterxml.jackson.annotation.JsonClassDescription;",
        "package_import_paths": {
            "org.springframework.ai.mistralai.api.tool.MockWeatherServi": "org.springframework.ai.mistralai.api.tool.MockWeatherServi",
            "org.springframework.ai.mistralai.api.tool.apply": "org.springframework.ai.mistralai.api.tool.apply",
            "org.springframework.ai.mistralai.api.tool.unitNam": "org.springframework.ai.mistralai.api.tool.unitNam"
        },
        "package": "package org.springframework.ai.mistralai.api.tool;",
        "property_declarations": [
            "public final String unitName;"
        ],
        "functions": [
            {
                "name": "apply",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "double temperature = 0;\n\t\tif (request.location().contains(\"Paris\")) {\n\t\t\ttemperature = 15;\n\t\t}\n\t\telse if (request.location().contains(\"Tokyo\")) {\n\t\t\ttemperature = 10;\n\t\t}\n\t\telse if (request.location().contains(\"San Francisco\")) {\n\t\t\ttemperature = 30;\n\t\t}\n\n\t\treturn new Response(temperature, 15, 20, 2, 53, 45, Unit.C);",
                "is_abstract": "",
                "class_name": "MockWeatherService",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-mistral-ai/src/test/java/org/springframework/ai/mistralai/api/tool/PaymentStatusFunctionCallingIT.java",
        "class_names": [
            "RetrievePaymentDate",
            "RetrievePaymentStatus",
            "PaymentStatusFunctionCallingIT"
        ],
        "imports": "import java.util.List;\nimport org.springframework.ai.mistralai.api.MistralAiApi.ChatCompletionRequest;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.ai.mistralai.api.MistralAiApi.ChatCompletionMessage.Role;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.slf4j.Logger;\nimport org.springframework.ai.mistralai.api.MistralAiApi;\nimport java.util.Map;\nimport java.util.function.Function;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport org.springframework.ai.mistralai.api.MistralAiApi.ChatCompletionMessage.ToolCall;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.ai.mistralai.api.MistralAiApi.ChatCompletionRequest.ToolChoice;\nimport java.util.ArrayList;\nimport org.springframework.ai.mistralai.api.MistralAiApi.FunctionTool.Type;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.springframework.http.ResponseEntity;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.mistralai.api.MistralAiApi.FunctionTool;\nimport org.springframework.ai.mistralai.api.MistralAiApi.ChatCompletionMessage;\nimport org.springframework.ai.mistralai.api.MistralAiApi.ChatCompletion;",
        "package_import_paths": {
            "org.springframework.ai.mistralai.api.tool.PaymentStatusFunctionCallingIT": "org.springframework.ai.mistralai.api.tool.PaymentStatusFunctionCallingIT",
            "org.springframework.ai.mistralai.api.tool.RetrievePaymentStatus": "org.springframework.ai.mistralai.api.tool.RetrievePaymentStatus",
            "org.springframework.ai.mistralai.api.tool.RetrievePaymentDat": "org.springframework.ai.mistralai.api.tool.RetrievePaymentDat",
            "org.springframework.ai.mistralai.api.tool.apply": "org.springframework.ai.mistralai.api.tool.apply",
            "org.springframework.ai.mistralai.api.tool.SuppressWarnings": "org.springframework.ai.mistralai.api.tool.SuppressWarnings",
            "org.springframework.ai.mistralai.api.tool.jsonToObject": "org.springframework.ai.mistralai.api.tool.jsonToObject",
            "org.springframework.ai.mistralai.api.tool.logger": "org.springframework.ai.mistralai.api.tool.logger",
            "org.springframework.ai.mistralai.api.tool.DATA": "org.springframework.ai.mistralai.api.tool.DATA",
            "org.springframework.ai.mistralai.api.tool.functions": "org.springframework.ai.mistralai.api.tool.functions"
        },
        "package": "package org.springframework.ai.mistralai.api.tool;",
        "property_declarations": [
            "static Map<String, Function<Transaction, ?>> functions = Map.of(\"retrieve_payment_status\",\n\t\t\tnew RetrievePaymentStatus(), \"retrieve_payment_date\", new RetrievePaymentDate());",
            "public static final Map<String, StatusDate> DATA = Map.of(\"T1001\", new StatusDate(\"Paid\", \"2021-10-05\"), \"T1002\",\n\t\t\tnew StatusDate(\"Unpaid\", \"2021-10-06\"), \"T1003\", new StatusDate(\"Paid\", \"2021-10-07\"), \"T1004\",\n\t\t\tnew StatusDate(\"Paid\", \"2021-10-05\"), \"T1005\", new StatusDate(\"Pending\", \"2021-10-08\"));",
            "private final Logger logger = LoggerFactory.getLogger(PaymentStatusFunctionCallingIT.class);"
        ],
        "functions": [
            {
                "name": "apply",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Status(DATA.get(paymentTransaction.transactionId).status);",
                "is_abstract": "",
                "class_name": "PaymentStatusFunctionCallingIT RetrievePaymentStatus",
                "annotations": []
            },
            {
                "name": "SuppressWarnings",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var transactionJsonSchema = \"\"\"\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\"properties\": {\n\t\t\t\t\t\t\"transaction_id\": {\n\t\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\t\"description\": \"The transaction id\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"required\": [\"transaction_id\"]\n\t\t\t\t}\n\t\t\t\t\"\"\";\n\n\t\t// Alternatively, generate the JSON schema using the ModelOptionsUtils helper:\n\t\t//\n\t\t// var transactionJsonSchema = ModelOptionsUtils.getJsonSchema(Transaction.class,\n\t\t// false);\n\n\t\tvar paymentStatusTool = new FunctionTool(Type.FUNCTION, new FunctionTool.Function(\n\t\t\t\t\"Get payment status of a transaction\", \"retrieve_payment_status\", transactionJsonSchema));\n\n\t\tvar paymentDateTool = new FunctionTool(Type.FUNCTION, new FunctionTool.Function(\n\t\t\t\t\"Get payment date of a transaction\", \"retrieve_payment_date\", transactionJsonSchema));\n\n\t\tList<ChatCompletionMessage> messages = new ArrayList<>(\n\t\t\t\tList.of(new ChatCompletionMessage(\"What's the status of my transaction with id T1001?\", Role.USER)));\n\n\t\tMistralAiApi mistralApi = new MistralAiApi(System.getenv(\"MISTRAL_AI_API_KEY\"));\n\n\t\tResponseEntity<ChatCompletion> response = mistralApi.chatCompletionEntity(new ChatCompletionRequest(messages,\n\t\t\t\tMistralAiApi.ChatModel.LARGE.getValue(), List.of(paymentStatusTool, paymentDateTool), ToolChoice.AUTO));\n\n\t\tChatCompletionMessage responseMessage = response.getBody().choices().get(0).message();\n\n\t\tassertThat(responseMessage.role()).isEqualTo(Role.ASSISTANT);\n\t\tassertThat(responseMessage.toolCalls()).isNotNull();\n\n\t\t// extend conversation with assistant's reply.\n\t\tmessages.add(responseMessage);\n\n\t\t// Send the info for each function call and function response to the model.\n\t\tfor (ToolCall toolCall : responseMessage.toolCalls()) {\n\n\t\t\tvar functionName = toolCall.function().name();\n\t\t\t// Map the function, JSON arguments into a Transaction object.\n\t\t\tTransaction transaction = jsonToObject(toolCall.function().arguments(), Transaction.class);\n\t\t\t// Call the target function with the transaction object.\n\t\t\tvar result = functions.get(functionName).apply(transaction);\n\n\t\t\t// Extend conversation with function response.\n\t\t\t// The functionName is used to identify the function response!\n\t\t\tmessages.add(new ChatCompletionMessage(result.toString(), Role.TOOL, functionName, null));\n\t\t}\n\n\t\tresponse = mistralApi\n\t\t\t.chatCompletionEntity(new ChatCompletionRequest(messages, MistralAiApi.ChatModel.LARGE.getValue()));\n\n\t\tvar responseContent = response.getBody().choices().get(0).message().content();\n\t\tlogger.info(\"Final response: \" + responseContent);\n\n\t\tassertThat(responseContent).containsIgnoringCase(\"T1001\");\n\t\tassertThat(responseContent).containsIgnoringCase(\"Paid\");",
                "is_abstract": "",
                "class_name": "PaymentStatusFunctionCallingIT RetrievePaymentStatus RetrievePaymentDate",
                "annotations": [
                    "@SuppressWarnings(\"null\")"
                ]
            },
            {
                "name": "jsonToObject",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "try {\n\t\t\treturn new ObjectMapper().readValue(json, targetClass);\n\t\t}\n\t\tcatch (JsonProcessingException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}",
                "is_abstract": "",
                "class_name": "PaymentStatusFunctionCallingIT RetrievePaymentStatus RetrievePaymentDate",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-mistral-ai/src/test/java/org/springframework/ai/mistralai/api/tool/MistralAiApiToolFunctionCallIT.java",
        "class_names": [
            "MistralAiApiToolFunctionCallIT"
        ],
        "imports": "import java.util.List;\nimport org.springframework.ai.mistralai.api.MistralAiApi.ChatCompletionRequest;\nimport org.junit.jupiter.api.Disabled;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.ai.mistralai.api.MistralAiApi.ChatCompletionMessage.Role;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.slf4j.Logger;\nimport org.springframework.ai.mistralai.api.MistralAiApi;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport org.springframework.ai.mistralai.api.MistralAiApi.ChatCompletionMessage.ToolCall;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.ai.mistralai.api.MistralAiApi.ChatCompletionRequest.ToolChoice;\nimport org.springframework.ai.model.ModelOptionsUtils;\nimport java.util.ArrayList;\nimport org.springframework.ai.mistralai.api.MistralAiApi.FunctionTool.Type;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.springframework.http.ResponseEntity;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.mistralai.api.MistralAiApi.ChatCompletionMessage;\nimport org.springframework.ai.mistralai.api.MistralAiApi.ChatCompletion;",
        "package_import_paths": {
            "org.springframework.ai.mistralai.api.tool.MistralAiApiToolFunctionCallIT": "org.springframework.ai.mistralai.api.tool.MistralAiApiToolFunctionCallIT",
            "org.springframework.ai.mistralai.api.tool.SuppressWarnings": "org.springframework.ai.mistralai.api.tool.SuppressWarnings",
            "org.springframework.ai.mistralai.api.tool.fromJson": "org.springframework.ai.mistralai.api.tool.fromJson",
            "org.springframework.ai.mistralai.api.tool.logger": "org.springframework.ai.mistralai.api.tool.logger",
            "org.springframework.ai.mistralai.api.tool.weatherServi": "org.springframework.ai.mistralai.api.tool.weatherServi",
            "org.springframework.ai.mistralai.api.tool.MISTRAL_AI_CHAT_MODEL": "org.springframework.ai.mistralai.api.tool.MISTRAL_AI_CHAT_MODEL",
            "org.springframework.ai.mistralai.api.tool.completionApi": "org.springframework.ai.mistralai.api.tool.completionApi"
        },
        "package": "package org.springframework.ai.mistralai.api.tool;",
        "property_declarations": [
            "private final Logger logger = LoggerFactory.getLogger(MistralAiApiToolFunctionCallIT.class);",
            "static final String MISTRAL_AI_CHAT_MODEL = MistralAiApi.ChatModel.LARGE.getValue();",
            "MistralAiApi completionApi = new MistralAiApi(System.getenv(\"MISTRAL_AI_API_KEY\"));",
            "MockWeatherService weatherService = new MockWeatherService();"
        ],
        "functions": [
            {
                "name": "SuppressWarnings",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// Step 1: send the conversation and available functions to the model\n\t\tvar message = new ChatCompletionMessage(\n\t\t\t\t\"What's the weather like in San Francisco, Tokyo, and Paris? Show the temperature in Celsius.\",\n\t\t\t\tRole.USER);\n\n\t\tvar functionTool = new MistralAiApi.FunctionTool(Type.FUNCTION,\n\t\t\t\tnew MistralAiApi.FunctionTool.Function(\n\t\t\t\t\t\t\"Get the weather in location. Return temperature in 30\u00b0F or 30\u00b0C format.\", \"getCurrentWeather\",\n\t\t\t\t\t\tModelOptionsUtils.jsonToMap(\"\"\"\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\t\t\t\t\"properties\": {\n\t\t\t\t\t\t\t\t\t\t\"location\": {\n\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\t\t\t\t\t\"description\": \"The city and state e.g. San Francisco, CA\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\"unit\": {\n\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\t\t\t\t\t\"enum\": [\"C\", \"F\"]\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\"required\": [\"location\", \"unit\"]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\"\"\")));\n\n\t\t// Or you can use the\n\t\t// ModelOptionsUtils.getJsonSchema(FakeWeatherService.Request.class))) to\n\t\t// auto-generate the JSON schema like:\n\t\t// var functionTool = new MistralAiApi.FunctionTool(Type.FUNCTION, new\n\t\t// MistralAiApi.FunctionTool.Function(\n\t\t// \"Get the weather in location. Return temperature in 30\u00b0F or 30\u00b0C format.\",\n\t\t// \"getCurrentWeather\",\n\t\t// ModelOptionsUtils.getJsonSchema(MockWeatherService.Request.class)));\n\n\t\tList<ChatCompletionMessage> messages = new ArrayList<>(List.of(message));\n\n\t\tChatCompletionRequest chatCompletionRequest = new ChatCompletionRequest(messages, MISTRAL_AI_CHAT_MODEL,\n\t\t\t\tList.of(functionTool), ToolChoice.AUTO);\n\n\t\tSystem.out\n\t\t\t.println(new ObjectMapper().writerWithDefaultPrettyPrinter().writeValueAsString(chatCompletionRequest));\n\n\t\tResponseEntity<ChatCompletion> chatCompletion = completionApi.chatCompletionEntity(chatCompletionRequest);\n\n\t\tassertThat(chatCompletion.getBody()).isNotNull();\n\t\tassertThat(chatCompletion.getBody().choices()).isNotEmpty();\n\n\t\tChatCompletionMessage responseMessage = chatCompletion.getBody().choices().get(0).message();\n\n\t\tassertThat(responseMessage.role()).isEqualTo(Role.ASSISTANT);\n\t\tassertThat(responseMessage.toolCalls()).isNotNull();\n\n\t\t// Check if the model wanted to call a function\n\t\tif (responseMessage.toolCalls() != null) {\n\n\t\t\t// extend conversation with assistant's reply.\n\t\t\tmessages.add(responseMessage);\n\n\t\t\t// Send the info for each function call and function response to the model.\n\t\t\tfor (ToolCall toolCall : responseMessage.toolCalls()) {\n\t\t\t\tvar functionName = toolCall.function().name();\n\t\t\t\tif (\"getCurrentWeather\".equals(functionName)) {\n\t\t\t\t\tMockWeatherService.Request weatherRequest = fromJson(toolCall.function().arguments(),\n\t\t\t\t\t\t\tMockWeatherService.Request.class);\n\n\t\t\t\t\tMockWeatherService.Response weatherResponse = weatherService.apply(weatherRequest);\n\n\t\t\t\t\t// extend conversation with function response.\n\t\t\t\t\tmessages.add(new ChatCompletionMessage(\"\" + weatherResponse.temp() + weatherRequest.unit(),\n\t\t\t\t\t\t\tRole.TOOL, functionName, null));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar functionResponseRequest = new ChatCompletionRequest(messages, MISTRAL_AI_CHAT_MODEL, 0.8f);\n\n\t\t\tResponseEntity<ChatCompletion> chatCompletion2 = completionApi\n\t\t\t\t.chatCompletionEntity(functionResponseRequest);\n\n\t\t\tlogger.info(\"Final response: \" + chatCompletion2.getBody());\n\n\t\t\tassertThat(chatCompletion2.getBody().choices()).isNotEmpty();\n\n\t\t\tassertThat(chatCompletion2.getBody().choices().get(0).message().role()).isEqualTo(Role.ASSISTANT);\n\t\t\tassertThat(chatCompletion2.getBody().choices().get(0).message().content()).contains(\"San Francisco\")\n\t\t\t\t.containsAnyOf(\"30.0\u00b0C\", \"30\u00b0C\");\n\t\t\tassertThat(chatCompletion2.getBody().choices().get(0).message().content()).contains(\"Tokyo\")\n\t\t\t\t.containsAnyOf(\"10.0\u00b0C\", \"10\u00b0C\");\n\t\t\t;\n\t\t\tassertThat(chatCompletion2.getBody().choices().get(0).message().content()).contains(\"Paris\")\n\t\t\t\t.containsAnyOf(\"15.0\u00b0C\", \"15\u00b0C\");\n\t\t\t;\n\t\t}",
                "is_abstract": "",
                "class_name": "MistralAiApiToolFunctionCallIT",
                "annotations": [
                    "@SuppressWarnings(\"null\")"
                ]
            },
            {
                "name": "fromJson",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "try {\n\t\t\treturn new ObjectMapper().readValue(json, targetClass);\n\t\t}\n\t\tcatch (JsonProcessingException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}",
                "is_abstract": "",
                "class_name": "MistralAiApiToolFunctionCallIT",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-mistral-ai/src/test/java/org/springframework/ai/mistralai/aot/MistralAiRuntimeHintsTests.java",
        "class_names": [
            "MistralAiRuntimeHintsTests"
        ],
        "imports": "import org.springframework.aot.hint.RuntimeHints;\nimport org.springframework.ai.mistralai.api.MistralAiApi;\nimport static org.assertj.core.api.AssertionsForClassTypes.assertThat;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.aot.hint.TypeReference;\nimport java.util.Set;\nimport static org.springframework.ai.aot.AiRuntimeHints.findJsonAnnotatedClassesInPackage;\nimport static org.springframework.aot.hint.predicate.RuntimeHintsPredicates.reflection;",
        "package_import_paths": {
            "org.springframework.ai.mistralai.aot.MistralAiRuntimeHintsTests": "org.springframework.ai.mistralai.aot.MistralAiRuntimeHintsTests",
            "org.springframework.ai.mistralai.aot.registerHints": "org.springframework.ai.mistralai.aot.registerHints"
        },
        "package": "package org.springframework.ai.mistralai.aot;",
        "property_declarations": [],
        "functions": [
            {
                "name": "registerHints",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "RuntimeHints runtimeHints = new RuntimeHints();\n\t\tMistralAiRuntimeHints mistralAiRuntimeHints = new MistralAiRuntimeHints();\n\t\tmistralAiRuntimeHints.registerHints(runtimeHints, null);\n\n\t\tSet<TypeReference> jsonAnnotatedClasses = findJsonAnnotatedClassesInPackage(MistralAiApi.class);\n\t\tfor (TypeReference jsonAnnotatedClass : jsonAnnotatedClasses) {\n\t\t\tassertThat(runtimeHints).matches(reflection().onType(jsonAnnotatedClass));\n\t\t}",
                "is_abstract": "",
                "class_name": "MistralAiRuntimeHintsTests",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-mistral-ai/src/main/java/org/springframework/ai/mistralai/MistralAiEmbeddingOptions.java",
        "class_names": [
            "Builder",
            "MistralAiEmbeddingOptions"
        ],
        "imports": "import com.fasterxml.jackson.annotation.JsonInclude;\nimport org.springframework.ai.embedding.EmbeddingOptions;\nimport com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport com.fasterxml.jackson.annotation.JsonProperty;",
        "package_import_paths": {
            "org.springframework.ai.mistralai.MistralAiEmbeddingOptions": "org.springframework.ai.mistralai.MistralAiEmbeddingOptions",
            "org.springframework.ai.mistralai.Builder": "org.springframework.ai.mistralai.Builder",
            "org.springframework.ai.mistralai.builder": "org.springframework.ai.mistralai.builder",
            "org.springframework.ai.mistralai.getModel": "org.springframework.ai.mistralai.getModel",
            "org.springframework.ai.mistralai.setModel": "org.springframework.ai.mistralai.setModel",
            "org.springframework.ai.mistralai.getEncodingFormat": "org.springframework.ai.mistralai.getEncodingFormat",
            "org.springframework.ai.mistralai.setEncodingFormat": "org.springframework.ai.mistralai.setEncodingFormat",
            "org.springframework.ai.mistralai.withModel": "org.springframework.ai.mistralai.withModel",
            "org.springframework.ai.mistralai.withEncodingFormat": "org.springframework.ai.mistralai.withEncodingFormat",
            "org.springframework.ai.mistralai.build": "org.springframework.ai.mistralai.build",
            "org.springframework.ai.mistralai.model": "org.springframework.ai.mistralai.model",
            "org.springframework.ai.mistralai.encodingFormat": "org.springframework.ai.mistralai.encodingFormat",
            "org.springframework.ai.mistralai.options": "org.springframework.ai.mistralai.options"
        },
        "package": "package org.springframework.ai.mistralai;",
        "property_declarations": [
            "private @JsonProperty(\"model\") String model;",
            "protected MistralAiEmbeddingOptions options;",
            "private @JsonProperty(\"encoding_format\") String encodingFormat;"
        ],
        "functions": [
            {
                "name": "builder",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Builder();",
                "is_abstract": "",
                "class_name": "MistralAiEmbeddingOptions",
                "annotations": []
            },
            {
                "name": "getModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.model;",
                "is_abstract": "",
                "class_name": "MistralAiEmbeddingOptions",
                "annotations": []
            },
            {
                "name": "setModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.model = model;",
                "is_abstract": "",
                "class_name": "MistralAiEmbeddingOptions",
                "annotations": []
            },
            {
                "name": "getEncodingFormat",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.encodingFormat;",
                "is_abstract": "",
                "class_name": "MistralAiEmbeddingOptions",
                "annotations": []
            },
            {
                "name": "setEncodingFormat",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.encodingFormat = encodingFormat;",
                "is_abstract": "",
                "class_name": "MistralAiEmbeddingOptions",
                "annotations": []
            },
            {
                "name": "withModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.setModel(model);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "MistralAiEmbeddingOptions Builder",
                "annotations": []
            },
            {
                "name": "withEncodingFormat",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.setEncodingFormat(encodingFormat);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "MistralAiEmbeddingOptions Builder",
                "annotations": []
            },
            {
                "name": "build",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.options;",
                "is_abstract": "",
                "class_name": "MistralAiEmbeddingOptions Builder",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-mistral-ai/src/main/java/org/springframework/ai/mistralai/MistralAiChatClient.java",
        "class_names": [
            "MistralAiChatClient"
        ],
        "imports": "import org.springframework.ai.retry.RetryUtils;\nimport java.util.List;\nimport org.springframework.ai.mistralai.api.MistralAiApi.ChatCompletionRequest;\nimport org.springframework.ai.chat.Generation;\nimport org.springframework.ai.chat.ChatClient;\nimport reactor.core.publisher.Flux;\nimport org.springframework.retry.support.RetryTemplate;\nimport org.springframework.util.CollectionUtils;\nimport org.springframework.ai.model.function.FunctionCallbackContext;\nimport java.util.concurrent.ConcurrentHashMap;\nimport org.slf4j.Logger;\nimport org.springframework.ai.mistralai.api.MistralAiApi;\nimport java.util.Map;\nimport org.springframework.ai.chat.prompt.ChatOptions;\nimport org.springframework.ai.mistralai.api.MistralAiApi.ChatCompletion.Choice;\nimport org.springframework.ai.chat.ChatResponse;\nimport java.util.HashSet;\nimport org.springframework.ai.mistralai.api.MistralAiApi.ChatCompletionMessage.ToolCall;\nimport org.slf4j.LoggerFactory;\nimport java.util.HashMap;\nimport org.springframework.ai.model.ModelOptionsUtils;\nimport org.springframework.ai.model.function.AbstractFunctionCallSupport;\nimport org.springframework.ai.mistralai.api.MistralAiApi.ChatCompletionChunk;\nimport java.util.Set;\nimport org.springframework.ai.chat.prompt.Prompt;\nimport org.springframework.util.Assert;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.ai.mistralai.api.MistralAiApi.ChatCompletionMessage;\nimport org.springframework.ai.mistralai.api.MistralAiApi.ChatCompletion;\nimport org.springframework.ai.chat.StreamingChatClient;\nimport org.springframework.ai.chat.metadata.ChatGenerationMetadata;\nimport java.util.Optional;",
        "package_import_paths": {
            "org.springframework.ai.mistralai.MistralAiChatClient": "org.springframework.ai.mistralai.MistralAiChatClient",
            "org.springframework.ai.mistralai.call": "org.springframework.ai.mistralai.call",
            "org.springframework.ai.mistralai.toM": "org.springframework.ai.mistralai.toM",
            "org.springframework.ai.mistralai.stream": "org.springframework.ai.mistralai.stream",
            "org.springframework.ai.mistralai.toChatCompletion": "org.springframework.ai.mistralai.toChatCompletion",
            "org.springframework.ai.mistralai.createRequest": "org.springframework.ai.mistralai.createRequest",
            "org.springframework.ai.mistralai.getFunctionTools": "org.springframework.ai.mistralai.getFunctionTools",
            "org.springframework.ai.mistralai.doCreateToolResponseRequest": "org.springframework.ai.mistralai.doCreateToolResponseRequest",
            "org.springframework.ai.mistralai.doGetUserMessages": "org.springframework.ai.mistralai.doGetUserMessages",
            "org.springframework.ai.mistralai.SuppressWarnings": "org.springframework.ai.mistralai.SuppressWarnings",
            "org.springframework.ai.mistralai.doChatCompletion": "org.springframework.ai.mistralai.doChatCompletion",
            "org.springframework.ai.mistralai.isToolFunctionCall": "org.springframework.ai.mistralai.isToolFunctionCall",
            "org.springframework.ai.mistralai.lo": "org.springframework.ai.mistralai.lo",
            "org.springframework.ai.mistralai.defaultOptions": "org.springframework.ai.mistralai.defaultOptions",
            "org.springframework.ai.mistralai.mistralAiApi": "org.springframework.ai.mistralai.mistralAiApi",
            "org.springframework.ai.mistralai.retryTemplat": "org.springframework.ai.mistralai.retryTemplat"
        },
        "package": "package org.springframework.ai.mistralai;",
        "property_declarations": [
            "private MistralAiChatOptions defaultOptions;",
            "private final Logger log = LoggerFactory.getLogger(getClass());",
            "private final RetryTemplate retryTemplate;",
            "private final MistralAiApi mistralAiApi;"
        ],
        "functions": [
            {
                "name": "call",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var request = createRequest(prompt, false);\n\n\t\treturn retryTemplate.execute(ctx -> {\n\n\t\t\tResponseEntity<ChatCompletion> completionEntity = this.callWithFunctionSupport(request);\n\n\t\t\tvar chatCompletion = completionEntity.getBody();\n\t\t\tif (chatCompletion == null) {\n\t\t\t\tlog.warn(\"No chat completion returned for prompt: {}\", prompt);\n\t\t\t\treturn new ChatResponse(List.of());\n\t\t\t}\n\n\t\t\tList<Generation> generations = chatCompletion.choices()\n\t\t\t\t.stream()\n\t\t\t\t.map(choice -> new Generation(choice.message().content(), toMap(chatCompletion.id(), choice))\n\t\t\t\t\t.withGenerationMetadata(ChatGenerationMetadata.from(choice.finishReason().name(), null)))\n\t\t\t\t.toList();\n\n\t\t\treturn new ChatResponse(generations);\n\t\t});",
                "is_abstract": "",
                "class_name": "MistralAiChatClient",
                "annotations": []
            },
            {
                "name": "toMap",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Map<String, Object> map = new HashMap<>();\n\n\t\tvar message = choice.message();\n\t\tif (message.role() != null) {\n\t\t\tmap.put(\"role\", message.role().name());\n\t\t}\n\t\tif (choice.finishReason() != null) {\n\t\t\tmap.put(\"finishReason\", choice.finishReason().name());\n\t\t}\n\t\tmap.put(\"id\", id);\n\t\treturn map;",
                "is_abstract": "",
                "class_name": "MistralAiChatClient",
                "annotations": []
            },
            {
                "name": "stream",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var request = createRequest(prompt, true);\n\n\t\treturn retryTemplate.execute(ctx -> {\n\n\t\t\tvar completionChunks = this.mistralAiApi.chatCompletionStream(request);\n\n\t\t\t// For chunked responses, only the first chunk contains the choice role.\n\t\t\t// The rest of the chunks with same ID share the same role.\n\t\t\tConcurrentHashMap<String, String> roleMap = new ConcurrentHashMap<>();\n\n\t\t\treturn completionChunks.map(chunk -> toChatCompletion(chunk)).map(chatCompletion -> {\n\n\t\t\t\tchatCompletion = handleFunctionCallOrReturn(request, ResponseEntity.of(Optional.of(chatCompletion)))\n\t\t\t\t\t.getBody();\n\n\t\t\t\t@SuppressWarnings(\"null\")\n\t\t\t\tString id = chatCompletion.id();\n\n\t\t\t\tList<Generation> generations = chatCompletion.choices().stream().map(choice -> {\n\t\t\t\t\tif (choice.message().role() != null) {\n\t\t\t\t\t\troleMap.putIfAbsent(id, choice.message().role().name());\n\t\t\t\t\t}\n\t\t\t\t\tString finish = (choice.finishReason() != null ? choice.finishReason().name() : \"\");\n\t\t\t\t\tvar generation = new Generation(choice.message().content(),\n\t\t\t\t\t\t\tMap.of(\"id\", id, \"role\", roleMap.get(id), \"finishReason\", finish));\n\t\t\t\t\tif (choice.finishReason() != null) {\n\t\t\t\t\t\tgeneration = generation\n\t\t\t\t\t\t\t.withGenerationMetadata(ChatGenerationMetadata.from(choice.finishReason().name(), null));\n\t\t\t\t\t}\n\t\t\t\t\treturn generation;\n\t\t\t\t}).toList();\n\t\t\t\treturn new ChatResponse(generations);\n\t\t\t});\n\t\t});",
                "is_abstract": "",
                "class_name": "MistralAiChatClient",
                "annotations": [
                    "@SuppressWarnings(\"null\")"
                ]
            },
            {
                "name": "toChatCompletion",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "List<Choice> choices = chunk.choices()\n\t\t\t.stream()\n\t\t\t.map(cc -> new Choice(cc.index(), cc.delta(), cc.finishReason()))\n\t\t\t.toList();\n\n\t\treturn new ChatCompletion(chunk.id(), \"chat.completion\", chunk.created(), chunk.model(), choices, null);",
                "is_abstract": "",
                "class_name": "MistralAiChatClient",
                "annotations": []
            },
            {
                "name": "createRequest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Set<String> functionsForThisRequest = new HashSet<>();\n\n\t\tvar chatCompletionMessages = prompt.getInstructions()\n\t\t\t.stream()\n\t\t\t.map(m -> new MistralAiApi.ChatCompletionMessage(m.getContent(),\n\t\t\t\t\tMistralAiApi.ChatCompletionMessage.Role.valueOf(m.getMessageType().name())))\n\t\t\t.toList();\n\n\t\tvar request = new MistralAiApi.ChatCompletionRequest(chatCompletionMessages, stream);\n\n\t\tif (this.defaultOptions != null) {\n\t\t\tSet<String> defaultEnabledFunctions = this.handleFunctionCallbackConfigurations(this.defaultOptions,\n\t\t\t\t\t!IS_RUNTIME_CALL);\n\n\t\t\tfunctionsForThisRequest.addAll(defaultEnabledFunctions);\n\n\t\t\trequest = ModelOptionsUtils.merge(request, this.defaultOptions, MistralAiApi.ChatCompletionRequest.class);\n\t\t}\n\n\t\tif (prompt.getOptions() != null) {\n\t\t\tif (prompt.getOptions() instanceof ChatOptions runtimeOptions) {\n\t\t\t\tvar updatedRuntimeOptions = ModelOptionsUtils.copyToTarget(runtimeOptions, ChatOptions.class,\n\t\t\t\t\t\tMistralAiChatOptions.class);\n\n\t\t\t\tSet<String> promptEnabledFunctions = this.handleFunctionCallbackConfigurations(updatedRuntimeOptions,\n\t\t\t\t\t\tIS_RUNTIME_CALL);\n\t\t\t\tfunctionsForThisRequest.addAll(promptEnabledFunctions);\n\n\t\t\t\trequest = ModelOptionsUtils.merge(updatedRuntimeOptions, request,\n\t\t\t\t\t\tMistralAiApi.ChatCompletionRequest.class);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new IllegalArgumentException(\"Prompt options are not of type ChatOptions: \"\n\t\t\t\t\t\t+ prompt.getOptions().getClass().getSimpleName());\n\t\t\t}\n\t\t}\n\n\t\t// Add the enabled functions definitions to the request's tools parameter.\n\t\tif (!CollectionUtils.isEmpty(functionsForThisRequest)) {\n\n\t\t\trequest = ModelOptionsUtils.merge(\n\t\t\t\t\tMistralAiChatOptions.builder().withTools(this.getFunctionTools(functionsForThisRequest)).build(),\n\t\t\t\t\trequest, ChatCompletionRequest.class);\n\t\t}\n\n\t\treturn request;",
                "is_abstract": "",
                "class_name": "MistralAiChatClient",
                "annotations": []
            },
            {
                "name": "getFunctionTools",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.resolveFunctionCallbacks(functionNames).stream().map(functionCallback -> {\n\t\t\tvar function = new MistralAiApi.FunctionTool.Function(functionCallback.getDescription(),\n\t\t\t\t\tfunctionCallback.getName(), functionCallback.getInputTypeSchema());\n\t\t\treturn new MistralAiApi.FunctionTool(function);\n\t\t}).toList();",
                "is_abstract": "",
                "class_name": "MistralAiChatClient",
                "annotations": []
            },
            {
                "name": "doCreateToolResponseRequest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// Every tool-call item requires a separate function call and a response (TOOL)\n\t\t// message.\n\t\tfor (ToolCall toolCall : responseMessage.toolCalls()) {\n\n\t\t\tvar functionName = toolCall.function().name();\n\t\t\tString functionArguments = toolCall.function().arguments();\n\n\t\t\tif (!this.functionCallbackRegister.containsKey(functionName)) {\n\t\t\t\tthrow new IllegalStateException(\"No function callback found for function name: \" + functionName);\n\t\t\t}\n\n\t\t\tString functionResponse = this.functionCallbackRegister.get(functionName).call(functionArguments);\n\n\t\t\t// Add the function response to the conversation.\n\t\t\tconversationHistory\n\t\t\t\t.add(new ChatCompletionMessage(functionResponse, ChatCompletionMessage.Role.TOOL, functionName, null));\n\t\t}\n\n\t\t// Recursively call chatCompletionWithTools until the model doesn't call a\n\t\t// functions anymore.\n\t\tChatCompletionRequest newRequest = new ChatCompletionRequest(conversationHistory, false);\n\t\tnewRequest = ModelOptionsUtils.merge(newRequest, previousRequest, ChatCompletionRequest.class);\n\n\t\treturn newRequest;",
                "is_abstract": "",
                "class_name": "MistralAiChatClient",
                "annotations": []
            },
            {
                "name": "doGetUserMessages",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return request.messages();",
                "is_abstract": "",
                "class_name": "MistralAiChatClient",
                "annotations": []
            },
            {
                "name": "SuppressWarnings",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return chatCompletion.getBody().choices().iterator().next().message();",
                "is_abstract": "",
                "class_name": "MistralAiChatClient",
                "annotations": [
                    "@SuppressWarnings(\"null\")"
                ]
            },
            {
                "name": "doChatCompletion",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.mistralAiApi.chatCompletionEntity(request);",
                "is_abstract": "",
                "class_name": "MistralAiChatClient",
                "annotations": []
            },
            {
                "name": "isToolFunctionCall",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var body = chatCompletion.getBody();\n\t\tif (body == null) {\n\t\t\treturn false;\n\t\t}\n\n\t\tvar choices = body.choices();\n\t\tif (CollectionUtils.isEmpty(choices)) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn !CollectionUtils.isEmpty(choices.get(0).message().toolCalls());",
                "is_abstract": "",
                "class_name": "MistralAiChatClient",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-mistral-ai/src/main/java/org/springframework/ai/mistralai/MistralAiChatOptions.java",
        "class_names": [
            "Builder",
            "MistralAiChatOptions"
        ],
        "imports": "import java.util.ArrayList;\nimport java.util.List;\nimport org.springframework.util.Assert;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport org.springframework.ai.model.function.FunctionCallingOptions;\nimport org.springframework.ai.mistralai.api.MistralAiApi.ChatCompletionRequest.ToolChoice;\nimport org.springframework.ai.model.function.FunctionCallback;\nimport com.fasterxml.jackson.annotation.JsonIgnore;\nimport org.springframework.ai.mistralai.api.MistralAiApi.FunctionTool;\nimport org.springframework.boot.context.properties.NestedConfigurationProperty;\nimport org.springframework.ai.chat.prompt.ChatOptions;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport java.util.Set;\nimport org.springframework.ai.mistralai.api.MistralAiApi.ChatCompletionRequest.ResponseFormat;\nimport java.util.HashSet;",
        "package_import_paths": {
            "org.springframework.ai.mistralai.MistralAiChatOptions": "org.springframework.ai.mistralai.MistralAiChatOptions",
            "org.springframework.ai.mistralai.Builder": "org.springframework.ai.mistralai.Builder",
            "org.springframework.ai.mistralai.builder": "org.springframework.ai.mistralai.builder",
            "org.springframework.ai.mistralai.withModel": "org.springframework.ai.mistralai.withModel",
            "org.springframework.ai.mistralai.withMaxToken": "org.springframework.ai.mistralai.withMaxToken",
            "org.springframework.ai.mistralai.withSafePrompt": "org.springframework.ai.mistralai.withSafePrompt",
            "org.springframework.ai.mistralai.withRandomSeed": "org.springframework.ai.mistralai.withRandomSeed",
            "org.springframework.ai.mistralai.withTemperatur": "org.springframework.ai.mistralai.withTemperatur",
            "org.springframework.ai.mistralai.withTopP": "org.springframework.ai.mistralai.withTopP",
            "org.springframework.ai.mistralai.withResponseFormat": "org.springframework.ai.mistralai.withResponseFormat",
            "org.springframework.ai.mistralai.withTools": "org.springframework.ai.mistralai.withTools",
            "org.springframework.ai.mistralai.withToolChoi": "org.springframework.ai.mistralai.withToolChoi",
            "org.springframework.ai.mistralai.withFunctionCallbacks": "org.springframework.ai.mistralai.withFunctionCallbacks",
            "org.springframework.ai.mistralai.withFunctions": "org.springframework.ai.mistralai.withFunctions",
            "org.springframework.ai.mistralai.withFunction": "org.springframework.ai.mistralai.withFunction",
            "org.springframework.ai.mistralai.build": "org.springframework.ai.mistralai.build",
            "org.springframework.ai.mistralai.getModel": "org.springframework.ai.mistralai.getModel",
            "org.springframework.ai.mistralai.setModel": "org.springframework.ai.mistralai.setModel",
            "org.springframework.ai.mistralai.getMaxTokens": "org.springframework.ai.mistralai.getMaxTokens",
            "org.springframework.ai.mistralai.setMaxTokens": "org.springframework.ai.mistralai.setMaxTokens",
            "org.springframework.ai.mistralai.getSafePrompt": "org.springframework.ai.mistralai.getSafePrompt",
            "org.springframework.ai.mistralai.setSafePrompt": "org.springframework.ai.mistralai.setSafePrompt",
            "org.springframework.ai.mistralai.getRandomSeed": "org.springframework.ai.mistralai.getRandomSeed",
            "org.springframework.ai.mistralai.setRandomSeed": "org.springframework.ai.mistralai.setRandomSeed",
            "org.springframework.ai.mistralai.getResponseFormat": "org.springframework.ai.mistralai.getResponseFormat",
            "org.springframework.ai.mistralai.setResponseFormat": "org.springframework.ai.mistralai.setResponseFormat",
            "org.springframework.ai.mistralai.setTools": "org.springframework.ai.mistralai.setTools",
            "org.springframework.ai.mistralai.getTools": "org.springframework.ai.mistralai.getTools",
            "org.springframework.ai.mistralai.setToolChoi": "org.springframework.ai.mistralai.setToolChoi",
            "org.springframework.ai.mistralai.getToolChoi": "org.springframework.ai.mistralai.getToolChoi",
            "org.springframework.ai.mistralai.getTemperatur": "org.springframework.ai.mistralai.getTemperatur",
            "org.springframework.ai.mistralai.setTemperatur": "org.springframework.ai.mistralai.setTemperatur",
            "org.springframework.ai.mistralai.getTopP": "org.springframework.ai.mistralai.getTopP",
            "org.springframework.ai.mistralai.setTopP": "org.springframework.ai.mistralai.setTopP",
            "org.springframework.ai.mistralai.getTopK": "org.springframework.ai.mistralai.getTopK",
            "org.springframework.ai.mistralai.setTopK": "org.springframework.ai.mistralai.setTopK",
            "org.springframework.ai.mistralai.getFunctionCallbacks": "org.springframework.ai.mistralai.getFunctionCallbacks",
            "org.springframework.ai.mistralai.setFunctionCallbacks": "org.springframework.ai.mistralai.setFunctionCallbacks",
            "org.springframework.ai.mistralai.getFunctions": "org.springframework.ai.mistralai.getFunctions",
            "org.springframework.ai.mistralai.setFunctions": "org.springframework.ai.mistralai.setFunctions",
            "org.springframework.ai.mistralai.model": "org.springframework.ai.mistralai.model",
            "org.springframework.ai.mistralai.temperatur": "org.springframework.ai.mistralai.temperatur",
            "org.springframework.ai.mistralai.topP": "org.springframework.ai.mistralai.topP",
            "org.springframework.ai.mistralai.maxTokens": "org.springframework.ai.mistralai.maxTokens",
            "org.springframework.ai.mistralai.safePrompt": "org.springframework.ai.mistralai.safePrompt",
            "org.springframework.ai.mistralai.randomSeed": "org.springframework.ai.mistralai.randomSeed",
            "org.springframework.ai.mistralai.responseFormat": "org.springframework.ai.mistralai.responseFormat",
            "org.springframework.ai.mistralai.privat": "org.springframework.ai.mistralai.privat",
            "org.springframework.ai.mistralai.options": "org.springframework.ai.mistralai.options"
        },
        "package": "package org.springframework.ai.mistralai;",
        "property_declarations": [
            "private @JsonProperty(\"model\") String model;",
            "private @JsonProperty(\"temperature\") Float temperature;",
            "private @JsonProperty(\"safe_prompt\") Boolean safePrompt;",
            "@NestedConfigurationProperty\n\t@JsonIgnore\n\tprivate List<FunctionCallback> functionCallbacks = new ArrayList<>();",
            "private @JsonProperty(\"random_seed\") Integer randomSeed;",
            "@NestedConfigurationProperty\n\t@JsonIgnore\n\tprivate Set<String> functions = new HashSet<>();",
            "private final MistralAiChatOptions options = new MistralAiChatOptions();",
            "private @JsonProperty(\"max_tokens\") Integer maxTokens;",
            "@NestedConfigurationProperty\n\tprivate @JsonProperty(\"tools\") List<FunctionTool> tools;",
            "private @JsonProperty(\"response_format\") ResponseFormat responseFormat;",
            "@NestedConfigurationProperty\n\tprivate @JsonProperty(\"tool_choice\") ToolChoice toolChoice;",
            "private @JsonProperty(\"top_p\") Float topP;"
        ],
        "functions": [
            {
                "name": "builder",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Builder();",
                "is_abstract": "",
                "class_name": "MistralAiChatOptions",
                "annotations": []
            },
            {
                "name": "withModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.setModel(model);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "MistralAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withMaxToken",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.setMaxTokens(maxTokens);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "MistralAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withSafePrompt",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.setSafePrompt(safePrompt);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "MistralAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withRandomSeed",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.setRandomSeed(randomSeed);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "MistralAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withTemperature",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.setTemperature(temperature);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "MistralAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withTopP",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.setTopP(topP);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "MistralAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withResponseFormat",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.responseFormat = responseFormat;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "MistralAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withTools",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.tools = tools;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "MistralAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withToolChoice",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.toolChoice = toolChoice;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "MistralAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withFunctionCallbacks",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.functionCallbacks = functionCallbacks;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "MistralAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withFunctions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(functionNames, \"Function names must not be null\");\n\t\t\tthis.options.functions = functionNames;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "MistralAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withFunction",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.hasText(functionName, \"Function name must not be empty\");\n\t\t\tthis.options.functions.add(functionName);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "MistralAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "build",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.options;",
                "is_abstract": "",
                "class_name": "MistralAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.model;",
                "is_abstract": "",
                "class_name": "MistralAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.model = model;",
                "is_abstract": "",
                "class_name": "MistralAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getMaxTokens",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.maxTokens;",
                "is_abstract": "",
                "class_name": "MistralAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setMaxTokens",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.maxTokens = maxTokens;",
                "is_abstract": "",
                "class_name": "MistralAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getSafePrompt",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.safePrompt;",
                "is_abstract": "",
                "class_name": "MistralAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setSafePrompt",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.safePrompt = safePrompt;",
                "is_abstract": "",
                "class_name": "MistralAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getRandomSeed",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.randomSeed;",
                "is_abstract": "",
                "class_name": "MistralAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setRandomSeed",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.randomSeed = randomSeed;",
                "is_abstract": "",
                "class_name": "MistralAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getResponseFormat",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.responseFormat;",
                "is_abstract": "",
                "class_name": "MistralAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setResponseFormat",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.responseFormat = responseFormat;",
                "is_abstract": "",
                "class_name": "MistralAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setTools",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.tools = tools;",
                "is_abstract": "",
                "class_name": "MistralAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getTools",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.tools;",
                "is_abstract": "",
                "class_name": "MistralAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setToolChoice",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.toolChoice = toolChoice;",
                "is_abstract": "",
                "class_name": "MistralAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getToolChoice",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.toolChoice;",
                "is_abstract": "",
                "class_name": "MistralAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getTemperature",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.temperature;",
                "is_abstract": "",
                "class_name": "MistralAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setTemperature",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.temperature = temperature;",
                "is_abstract": "",
                "class_name": "MistralAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getTopP",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.topP;",
                "is_abstract": "",
                "class_name": "MistralAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setTopP",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.topP = topP;",
                "is_abstract": "",
                "class_name": "MistralAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getTopK",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "throw new UnsupportedOperationException(\"Unsupported option: 'TopK'\");",
                "is_abstract": "",
                "class_name": "MistralAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setTopK",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "throw new UnsupportedOperationException(\"Unsupported option: 'TopK'\");",
                "is_abstract": "",
                "class_name": "MistralAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getFunctionCallbacks",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.functionCallbacks;",
                "is_abstract": "",
                "class_name": "MistralAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setFunctionCallbacks",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(functionCallbacks, \"FunctionCallbacks must not be null\");\n\t\tthis.functionCallbacks = functionCallbacks;",
                "is_abstract": "",
                "class_name": "MistralAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getFunctions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.functions;",
                "is_abstract": "",
                "class_name": "MistralAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setFunctions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(functions, \"Function must not be null\");\n\t\tthis.functions = functions;",
                "is_abstract": "",
                "class_name": "MistralAiChatOptions Builder",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-mistral-ai/src/main/java/org/springframework/ai/mistralai/MistralAiEmbeddingClient.java",
        "class_names": [
            "MistralAiEmbeddingClient"
        ],
        "imports": "import org.springframework.ai.retry.RetryUtils;\nimport org.springframework.ai.embedding.Embedding;\nimport org.springframework.ai.document.MetadataMode;\nimport java.util.List;\nimport org.springframework.ai.embedding.EmbeddingOptions;\nimport org.springframework.ai.embedding.EmbeddingResponseMetadata;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.ai.embedding.AbstractEmbeddingClient;\nimport org.springframework.retry.support.RetryTemplate;\nimport org.springframework.util.Assert;\nimport org.springframework.ai.document.Document;\nimport org.slf4j.Logger;\nimport org.springframework.ai.mistralai.api.MistralAiApi;\nimport org.springframework.ai.embedding.EmbeddingRequest;\nimport org.springframework.ai.model.ModelOptionsUtils;\nimport org.springframework.ai.embedding.EmbeddingResponse;",
        "package_import_paths": {
            "org.springframework.ai.mistralai.MistralAiEmbeddingClient": "org.springframework.ai.mistralai.MistralAiEmbeddingClient",
            "org.springframework.ai.mistralai.SuppressWarnings": "org.springframework.ai.mistralai.SuppressWarnings",
            "org.springframework.ai.mistralai.embed": "org.springframework.ai.mistralai.embed",
            "org.springframework.ai.mistralai.generateResponseMetadat": "org.springframework.ai.mistralai.generateResponseMetadat",
            "org.springframework.ai.mistralai.lo": "org.springframework.ai.mistralai.lo",
            "org.springframework.ai.mistralai.defaultOptions": "org.springframework.ai.mistralai.defaultOptions",
            "org.springframework.ai.mistralai.metadataMod": "org.springframework.ai.mistralai.metadataMod",
            "org.springframework.ai.mistralai.mistralAiApi": "org.springframework.ai.mistralai.mistralAiApi",
            "org.springframework.ai.mistralai.retryTemplat": "org.springframework.ai.mistralai.retryTemplat"
        },
        "package": "package org.springframework.ai.mistralai;",
        "property_declarations": [
            "private final RetryTemplate retryTemplate;",
            "private final MistralAiApi mistralAiApi;",
            "private final Logger log = LoggerFactory.getLogger(getClass());",
            "private final MistralAiEmbeddingOptions defaultOptions;",
            "private final MetadataMode metadataMode;"
        ],
        "functions": [
            {
                "name": "SuppressWarnings",
                "parameters": [
                    ""
                ],
                "return_type": "new",
                "body": "return this.retryTemplate.execute(ctx -> {\n\n\t\t\tvar apiRequest = (this.defaultOptions != null)\n\t\t\t\t\t? new MistralAiApi.EmbeddingRequest<>(request.getInstructions(), this.defaultOptions.getModel(),\n\t\t\t\t\t\t\tthis.defaultOptions.getEncodingFormat())\n\t\t\t\t\t: new MistralAiApi.EmbeddingRequest<>(request.getInstructions(),\n\t\t\t\t\t\t\tMistralAiApi.EmbeddingModel.EMBED.getValue());\n\n\t\t\tif (request.getOptions() != null && !EmbeddingOptions.EMPTY.equals(request.getOptions())) {\n\t\t\t\tapiRequest = ModelOptionsUtils.merge(request.getOptions(), apiRequest,\n\t\t\t\t\t\tMistralAiApi.EmbeddingRequest.class);\n\t\t\t}\n\n\t\t\tvar apiEmbeddingResponse = this.mistralAiApi.embeddings(apiRequest).getBody();\n\n\t\t\tif (apiEmbeddingResponse == null) {\n\t\t\t\tlog.warn(\"No embeddings returned for request: {}\", request);\n\t\t\t\treturn new EmbeddingResponse(List.of());\n\t\t\t}\n\n\t\t\tvar metadata = generateResponseMetadata(apiEmbeddingResponse.model(), apiEmbeddingResponse.usage());\n\n\t\t\tvar embeddings = apiEmbeddingResponse.data()\n\t\t\t\t.stream()\n\t\t\t\t.map(e -> new Embedding(e.embedding(), e.index()))\n\t\t\t\t.toList();\n\n\t\t\treturn new EmbeddingResponse(embeddings, metadata);\n\n\t\t});",
                "is_abstract": "",
                "class_name": "MistralAiEmbeddingClient",
                "annotations": [
                    "@SuppressWarnings(\"unchecked\")"
                ]
            },
            {
                "name": "embed",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(document, \"Document must not be null\");\n\t\treturn this.embed(document.getFormattedContent(this.metadataMode));",
                "is_abstract": "",
                "class_name": "MistralAiEmbeddingClient",
                "annotations": []
            },
            {
                "name": "generateResponseMetadata",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var metadata = new EmbeddingResponseMetadata();\n\t\tmetadata.put(\"model\", model);\n\t\tmetadata.put(\"prompt-tokens\", usage.promptTokens());\n\t\tmetadata.put(\"total-tokens\", usage.totalTokens());\n\t\treturn metadata;",
                "is_abstract": "",
                "class_name": "MistralAiEmbeddingClient",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-mistral-ai/src/main/java/org/springframework/ai/mistralai/api/MistralAiStreamFunctionCallingHelper.java",
        "class_names": [
            "MistralAiStreamFunctionCallingHelper"
        ],
        "imports": "import java.util.ArrayList;\nimport java.util.List;\nimport org.springframework.ai.mistralai.api.MistralAiApi.ChatCompletionMessage.Role;\nimport org.springframework.ai.mistralai.api.MistralAiApi.ChatCompletionMessage.ChatCompletionFunction;\nimport org.springframework.ai.mistralai.api.MistralAiApi.ChatCompletionMessage.ToolCall;\nimport org.springframework.util.CollectionUtils;\nimport org.springframework.ai.mistralai.api.MistralAiApi.ChatCompletionFinishReason;\nimport org.springframework.ai.mistralai.api.MistralAiApi.ChatCompletionChunk.ChunkChoice;\nimport org.springframework.ai.mistralai.api.MistralAiApi.ChatCompletionMessage;\nimport org.springframework.ai.mistralai.api.MistralAiApi.ChatCompletionChunk;\nimport java.util.UUID;\nimport java.util.Optional;",
        "package_import_paths": {
            "org.springframework.ai.mistralai.api.MistralAiStreamFunctionCallingHelper": "org.springframework.ai.mistralai.api.MistralAiStreamFunctionCallingHelper",
            "org.springframework.ai.mistralai.api.mer": "org.springframework.ai.mistralai.api.mer",
            "org.springframework.ai.mistralai.api.isStreamingToolFunctionCall": "org.springframework.ai.mistralai.api.isStreamingToolFunctionCall",
            "org.springframework.ai.mistralai.api.isStreamingToolFunctionCallFinish": "org.springframework.ai.mistralai.api.isStreamingToolFunctionCallFinish"
        },
        "package": "package org.springframework.ai.mistralai.api;",
        "property_declarations": [],
        "functions": [
            {
                "name": "merge",
                "parameters": [
                    ""
                ],
                "return_type": "previous",
                "body": "if (previous == null) {\n\t\t\treturn current;\n\t\t}\n\n\t\tString id = (current.id() != null ? current.id() : previous.id());\n\t\tLong created = (current.created() != null ? current.created() : previous.created());\n\t\tString model = (current.model() != null ? current.model() : previous.model());\n\t\tString object = (current.object() != null ? current.object() : previous.object());\n\n\t\tChunkChoice previousChoice0 = (CollectionUtils.isEmpty(previous.choices()) ? null : previous.choices().get(0));\n\t\tChunkChoice currentChoice0 = (CollectionUtils.isEmpty(current.choices()) ? null : current.choices().get(0));\n\n\t\tChunkChoice choice = merge(previousChoice0, currentChoice0);\n\n\t\treturn new ChatCompletionChunk(id, object, created, model, List.of(choice));",
                "is_abstract": "",
                "class_name": "MistralAiStreamFunctionCallingHelper",
                "annotations": []
            },
            {
                "name": "merge",
                "parameters": [
                    ""
                ],
                "return_type": "Role",
                "body": "if (previous == null) {\n\t\t\tif (current.delta() != null && current.delta().toolCalls() != null) {\n\t\t\t\tOptional<String> id = current.delta()\n\t\t\t\t\t.toolCalls()\n\t\t\t\t\t.stream()\n\t\t\t\t\t.filter(tool -> tool.id() != null)\n\t\t\t\t\t.map(tool -> tool.id())\n\t\t\t\t\t.findFirst();\n\t\t\t\tif (!id.isPresent()) {\n\t\t\t\t\tvar newId = UUID.randomUUID().toString();\n\n\t\t\t\t\tvar toolCallsWithID = current.delta()\n\t\t\t\t\t\t.toolCalls()\n\t\t\t\t\t\t.stream()\n\t\t\t\t\t\t.map(toolCall -> new ToolCall(newId, \"function\", toolCall.function()))\n\t\t\t\t\t\t.toList();\n\n\t\t\t\t\tvar role = current.delta().role() != null ? current.delta().role() : Role.ASSISTANT;\n\t\t\t\t\tcurrent = new ChunkChoice(current.index(), new ChatCompletionMessage(current.delta().content(),\n\t\t\t\t\t\t\trole, current.delta().name(), toolCallsWithID), current.finishReason());\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn current;\n\t\t}\n\n\t\tChatCompletionFinishReason finishReason = (current.finishReason() != null ? current.finishReason()\n\t\t\t\t: previous.finishReason());\n\t\tInteger index = (current.index() != null ? current.index() : previous.index());\n\n\t\tChatCompletionMessage message = merge(previous.delta(), current.delta());\n\n\t\treturn new ChunkChoice(index, message, finishReason);",
                "is_abstract": "",
                "class_name": "MistralAiStreamFunctionCallingHelper",
                "annotations": []
            },
            {
                "name": "isStreamingToolFunctionCall",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var choices = chatCompletion.choices();\n\t\tif (CollectionUtils.isEmpty(choices)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tvar choice = choices.get(0);\n\t\treturn !CollectionUtils.isEmpty(choice.delta().toolCalls());",
                "is_abstract": "",
                "class_name": "MistralAiStreamFunctionCallingHelper",
                "annotations": []
            },
            {
                "name": "isStreamingToolFunctionCallFinish",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var choices = chatCompletion.choices();\n\t\tif (CollectionUtils.isEmpty(choices)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tvar choice = choices.get(0);\n\t\treturn choice.finishReason() == ChatCompletionFinishReason.TOOL_CALL\n\t\t\t\t|| choice.finishReason() == ChatCompletionFinishReason.TOOL_CALLS;",
                "is_abstract": "",
                "class_name": "MistralAiStreamFunctionCallingHelper",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-mistral-ai/src/main/java/org/springframework/ai/mistralai/api/MistralAiApi.java",
        "class_names": [
            "MistralAiApi"
        ],
        "imports": "import org.springframework.ai.retry.RetryUtils;\nimport org.springframework.core.ParameterizedTypeReference;\nimport java.util.List;\nimport reactor.core.publisher.Flux;\nimport org.springframework.util.CollectionUtils;\nimport java.util.function.Predicate;\nimport java.util.function.Consumer;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport reactor.core.publisher.Mono;\nimport java.util.Map;\nimport org.springframework.boot.context.properties.bind.ConstructorBinding;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.web.client.ResponseErrorHandler;\nimport com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport org.springframework.ai.model.ModelOptionsUtils;\nimport org.springframework.http.MediaType;\nimport org.springframework.web.client.RestClient;\nimport org.springframework.util.Assert;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.reactive.function.client.WebClient;\nimport java.util.concurrent.atomic.AtomicBoolean;",
        "package_import_paths": {
            "org.springframework.ai.mistralai.api.MistralAiApi": "org.springframework.ai.mistralai.api.MistralAiApi",
            "org.springframework.ai.mistralai.api.embeddings": "org.springframework.ai.mistralai.api.embeddings",
            "org.springframework.ai.mistralai.api.getValu": "org.springframework.ai.mistralai.api.getValu",
            "org.springframework.ai.mistralai.api.chatCompletionEntity": "org.springframework.ai.mistralai.api.chatCompletionEntity",
            "org.springframework.ai.mistralai.api.chatCompletionStream": "org.springframework.ai.mistralai.api.chatCompletionStream",
            "org.springframework.ai.mistralai.api.DEFAULT_BASE_URL": "org.springframework.ai.mistralai.api.DEFAULT_BASE_URL",
            "org.springframework.ai.mistralai.api.SSE_DONE_PREDICATE": "org.springframework.ai.mistralai.api.SSE_DONE_PREDICATE",
            "org.springframework.ai.mistralai.api.restClient": "org.springframework.ai.mistralai.api.restClient",
            "org.springframework.ai.mistralai.api.webClient": "org.springframework.ai.mistralai.api.webClient",
            "org.springframework.ai.mistralai.api.valu": "org.springframework.ai.mistralai.api.valu",
            "org.springframework.ai.mistralai.api.chunkMerger": "org.springframework.ai.mistralai.api.chunkMerger"
        },
        "package": "package org.springframework.ai.mistralai.api;",
        "property_declarations": [
            "private MistralAiStreamFunctionCallingHelper chunkMerger = new MistralAiStreamFunctionCallingHelper();",
            "private final RestClient restClient;",
            "private WebClient webClient;",
            "private final String value;",
            "private static final Predicate<String> SSE_DONE_PREDICATE = \"[DONE]\"::equals;",
            "private static final String DEFAULT_BASE_URL = \"https://api.mistral.ai\";"
        ],
        "functions": [
            {
                "name": "embeddings",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(embeddingRequest, \"The request body can not be null.\");\n\n\t\t// Input text to embed, encoded as a string or array of tokens. To embed multiple\n\t\t// inputs in a single\n\t\t// request, pass an array of strings or array of token arrays.\n\t\tAssert.notNull(embeddingRequest.input(), \"The input can not be null.\");\n\t\tAssert.isTrue(embeddingRequest.input() instanceof String || embeddingRequest.input() instanceof List,\n\t\t\t\t\"The input must be either a String, or a List of Strings or List of List of integers.\");\n\n\t\t// The input must not an empty string, and any array must be 1024 dimensions or\n\t\t// less.\n\t\tif (embeddingRequest.input() instanceof List list) {\n\t\t\tAssert.isTrue(!CollectionUtils.isEmpty(list), \"The input list can not be empty.\");\n\t\t\tAssert.isTrue(list.size() <= 1024, \"The list must be 1024 dimensions or less\");\n\t\t\tAssert.isTrue(\n\t\t\t\t\tlist.get(0) instanceof String || list.get(0) instanceof Integer || list.get(0) instanceof List,\n\t\t\t\t\t\"The input must be either a String, or a List of Strings or list of list of integers.\");\n\t\t}\n\n\t\treturn this.restClient.post()\n\t\t\t.uri(\"/v1/embeddings\")\n\t\t\t.body(embeddingRequest)\n\t\t\t.retrieve()\n\t\t\t.toEntity(new ParameterizedTypeReference<>() {\n\t\t\t});",
                "is_abstract": "",
                "class_name": "MistralAiApi",
                "annotations": [
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"model\")",
                    "@JsonProperty(\"messages\")",
                    "@JsonProperty(\"tools\")",
                    "@JsonProperty(\"tool_choice\")",
                    "@JsonProperty(\"temperature\")",
                    "@JsonProperty(\"top_p\")",
                    "@JsonProperty(\"max_tokens\")",
                    "@JsonProperty(\"stream\")",
                    "@JsonProperty(\"safe_prompt\")",
                    "@JsonProperty(\"random_seed\")",
                    "@JsonProperty(\"response_format\")",
                    "@JsonProperty(\"auto\")",
                    "@JsonProperty(\"any\")",
                    "@JsonProperty(\"none\")",
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"type\")",
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"content\")",
                    "@JsonProperty(\"role\")",
                    "@JsonProperty(\"name\")",
                    "@JsonProperty(\"tool_calls\")",
                    "@JsonProperty(\"system\")",
                    "@JsonProperty(\"user\")",
                    "@JsonProperty(\"assistant\")",
                    "@JsonProperty(\"tool\")",
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"id\")",
                    "@JsonProperty(\"type\")",
                    "@JsonProperty(\"function\")",
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"name\")",
                    "@JsonProperty(\"arguments\")",
                    "@JsonProperty(\"stop\")",
                    "@JsonProperty(\"length\")",
                    "@JsonProperty(\"model_length\")",
                    "@JsonProperty(\"tool_call\")",
                    "@JsonProperty(\"error\")",
                    "@JsonProperty(\"tool_calls\")",
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"id\")",
                    "@JsonProperty(\"object\")",
                    "@JsonProperty(\"created\")",
                    "@JsonProperty(\"model\")",
                    "@JsonProperty(\"choices\")",
                    "@JsonProperty(\"usage\")",
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"index\")",
                    "@JsonProperty(\"message\")",
                    "@JsonProperty(\"finish_reason\")",
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"id\")",
                    "@JsonProperty(\"object\")",
                    "@JsonProperty(\"created\")",
                    "@JsonProperty(\"model\")",
                    "@JsonProperty(\"choices\")",
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"index\")",
                    "@JsonProperty(\"delta\")",
                    "@JsonProperty(\"finish_reason\")"
                ]
            },
            {
                "name": "getValue",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.value;",
                "is_abstract": "",
                "class_name": "MistralAiApi",
                "annotations": [
                    "@JsonProperty(\"mistral-embed\")"
                ]
            },
            {
                "name": "chatCompletionEntity",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(chatRequest, \"The request body can not be null.\");\n\t\tAssert.isTrue(!chatRequest.stream(), \"Request must set the steam property to false.\");\n\n\t\treturn this.restClient.post()\n\t\t\t.uri(\"/v1/chat/completions\")\n\t\t\t.body(chatRequest)\n\t\t\t.retrieve()\n\t\t\t.toEntity(ChatCompletion.class);",
                "is_abstract": "",
                "class_name": "MistralAiApi",
                "annotations": []
            },
            {
                "name": "chatCompletionStream",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(chatRequest, \"The request body can not be null.\");\n\t\tAssert.isTrue(chatRequest.stream(), \"Request must set the steam property to true.\");\n\n\t\tAtomicBoolean isInsideTool = new AtomicBoolean(false);\n\n\t\treturn this.webClient.post()\n\t\t\t.uri(\"/v1/chat/completions\")\n\t\t\t.body(Mono.just(chatRequest), ChatCompletionRequest.class)\n\t\t\t.retrieve()\n\t\t\t.bodyToFlux(String.class)\n\t\t\t.takeUntil(SSE_DONE_PREDICATE)\n\t\t\t.filter(SSE_DONE_PREDICATE.negate())\n\t\t\t.map(content -> ModelOptionsUtils.jsonToObject(content, ChatCompletionChunk.class))\n\t\t\t.map(chunk -> {\n\t\t\t\tif (this.chunkMerger.isStreamingToolFunctionCall(chunk)) {\n\t\t\t\t\tisInsideTool.set(true);\n\t\t\t\t}\n\t\t\t\treturn chunk;\n\t\t\t})\n\t\t\t.windowUntil(chunk -> {\n\t\t\t\tif (isInsideTool.get() && this.chunkMerger.isStreamingToolFunctionCallFinish(chunk)) {\n\t\t\t\t\tisInsideTool.set(false);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\treturn !isInsideTool.get();\n\t\t\t})\n\t\t\t.concatMapIterable(window -> {\n\t\t\t\tMono<ChatCompletionChunk> mono1 = window.reduce(new ChatCompletionChunk(null, null, null, null, null),\n\t\t\t\t\t\t(previous, current) -> this.chunkMerger.merge(previous, current));\n\t\t\t\treturn List.of(mono1);\n\t\t\t})\n\t\t\t.flatMap(mono -> mono);",
                "is_abstract": "",
                "class_name": "MistralAiApi",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-mistral-ai/src/main/java/org/springframework/ai/mistralai/aot/MistralAiRuntimeHints.java",
        "class_names": [
            "MistralAiRuntimeHints"
        ],
        "imports": "import org.springframework.lang.Nullable;\nimport org.springframework.aot.hint.MemberCategory;\nimport org.springframework.aot.hint.RuntimeHints;\nimport org.springframework.aot.hint.RuntimeHintsRegistrar;\nimport org.springframework.ai.mistralai.api.MistralAiApi;\nimport org.springframework.lang.NonNull;\nimport static org.springframework.ai.aot.AiRuntimeHints.findJsonAnnotatedClassesInPackage;",
        "package_import_paths": {
            "org.springframework.ai.mistralai.aot.MistralAiRuntimeHints": "org.springframework.ai.mistralai.aot.MistralAiRuntimeHints",
            "org.springframework.ai.mistralai.aot.registerHints": "org.springframework.ai.mistralai.aot.registerHints"
        },
        "package": "package org.springframework.ai.mistralai.aot;",
        "property_declarations": [],
        "functions": [
            {
                "name": "registerHints",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var mcs = MemberCategory.values();\n\t\tfor (var tr : findJsonAnnotatedClassesInPackage(MistralAiApi.class))\n\t\t\thints.reflection().registerType(tr, mcs);",
                "is_abstract": "",
                "class_name": "MistralAiRuntimeHints",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-vertex-ai-palm2/src/test/java/org/springframework/ai/vertexai/palm2/VertexAiPaLm2ChatGenerationClientIT.java",
        "class_names": [
            "TestConfiguration",
            "VertexAiPaLm2ChatGenerationClientIT"
        ],
        "imports": "import java.util.List;\nimport org.springframework.ai.chat.Generation;\nimport org.springframework.ai.chat.prompt.SystemPromptTemplate;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.core.io.Resource;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.ai.parser.MapOutputParser;\nimport org.springframework.ai.chat.messages.Message;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.springframework.ai.vertexai.palm2.api.VertexAiPaLm2Api;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport java.util.Map;\nimport org.springframework.ai.parser.BeanOutputParser;\nimport org.springframework.beans.factory.annotation.Value;\nimport java.util.Arrays;\nimport org.springframework.ai.chat.ChatResponse;\nimport org.springframework.ai.chat.messages.UserMessage;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.ai.chat.prompt.PromptTemplate;\nimport org.springframework.ai.parser.ListOutputParser;\nimport org.springframework.boot.SpringBootConfiguration;\nimport org.springframework.ai.chat.prompt.Prompt;\nimport org.springframework.core.convert.support.DefaultConversionService;\nimport org.junit.jupiter.api.Test;",
        "package_import_paths": {
            "org.springframework.ai.vertexai.palm2.VertexAiPaLm2ChatGenerationClientIT": "org.springframework.ai.vertexai.palm2.VertexAiPaLm2ChatGenerationClientIT",
            "org.springframework.ai.vertexai.palm2.TestConfiguration": "org.springframework.ai.vertexai.palm2.TestConfiguration",
            "org.springframework.ai.vertexai.palm2.roleTest": "org.springframework.ai.vertexai.palm2.roleTest",
            "org.springframework.ai.vertexai.palm2.outputParser": "org.springframework.ai.vertexai.palm2.outputParser",
            "org.springframework.ai.vertexai.palm2.mapOutputParser": "org.springframework.ai.vertexai.palm2.mapOutputParser",
            "org.springframework.ai.vertexai.palm2.beanOutputParserRecords": "org.springframework.ai.vertexai.palm2.beanOutputParserRecords",
            "org.springframework.ai.vertexai.palm2.vertexAiApi": "org.springframework.ai.vertexai.palm2.vertexAiApi",
            "org.springframework.ai.vertexai.palm2.vertexAiEmbeddin": "org.springframework.ai.vertexai.palm2.vertexAiEmbeddin",
            "org.springframework.ai.vertexai.palm2.privat": "org.springframework.ai.vertexai.palm2.privat",
            "org.springframework.ai.vertexai.palm2.systemResour": "org.springframework.ai.vertexai.palm2.systemResour"
        },
        "package": "package org.springframework.ai.vertexai.palm2;",
        "property_declarations": [
            "@Autowired\n\tprivate VertexAiPaLm2ChatClient client;",
            "@Value(\"classpath:/prompts/system-message.st\")\n\tprivate Resource systemResource;"
        ],
        "functions": [
            {
                "name": "roleTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String request = \"Tell me about 3 famous pirates from the Golden Age of Piracy and why they did.\";\n\t\tString name = \"Bob\";\n\t\tString voice = \"pirate\";\n\t\tUserMessage userMessage = new UserMessage(request);\n\t\tSystemPromptTemplate systemPromptTemplate = new SystemPromptTemplate(systemResource);\n\t\tMessage systemMessage = systemPromptTemplate.createMessage(Map.of(\"name\", name, \"voice\", voice));\n\t\tPrompt prompt = new Prompt(List.of(userMessage, systemMessage));\n\t\tChatResponse response = client.call(prompt);\n\t\tassertThat(response.getResult().getOutput().getContent()).contains(\"Bartholomew\");",
                "is_abstract": "",
                "class_name": "VertexAiPaLm2ChatGenerationClientIT",
                "annotations": []
            },
            {
                "name": "outputParser",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "DefaultConversionService conversionService = new DefaultConversionService();\n\t\tListOutputParser outputParser = new ListOutputParser(conversionService);\n\n\t\tString format = outputParser.getFormat();\n\t\tString template = \"\"\"\n\t\t\t\tList five {subject}\n\t\t\t\t{format}\n\t\t\t\t\"\"\";\n\t\tPromptTemplate promptTemplate = new PromptTemplate(template,\n\t\t\t\tMap.of(\"subject\", \"ice cream flavors.\", \"format\", format));\n\t\tPrompt prompt = new Prompt(promptTemplate.createMessage());\n\t\tGeneration generation = this.client.call(prompt).getResult();\n\n\t\tList<String> list = outputParser.parse(generation.getOutput().getContent());\n\t\tassertThat(list).hasSize(5);",
                "is_abstract": "",
                "class_name": "VertexAiPaLm2ChatGenerationClientIT",
                "annotations": []
            },
            {
                "name": "mapOutputParser",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "MapOutputParser outputParser = new MapOutputParser();\n\n\t\tString format = outputParser.getFormat();\n\t\tString template = \"\"\"\n\t\t\t\tProvide me a List of {subject}\n\t\t\t\t{format}\n\t\t\t\t\"\"\";\n\t\tPromptTemplate promptTemplate = new PromptTemplate(template,\n\t\t\t\tMap.of(\"subject\", \"an array of numbers from 1 to 9 under they key name 'numbers'\", \"format\", format));\n\t\tPrompt prompt = new Prompt(promptTemplate.createMessage());\n\t\tGeneration generation = client.call(prompt).getResult();\n\n\t\tMap<String, Object> result = outputParser.parse(generation.getOutput().getContent());\n\t\tassertThat(result.get(\"numbers\")).isEqualTo(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9));",
                "is_abstract": "",
                "class_name": "VertexAiPaLm2ChatGenerationClientIT",
                "annotations": []
            },
            {
                "name": "beanOutputParserRecords",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "BeanOutputParser<ActorsFilmsRecord> outputParser = new BeanOutputParser<>(ActorsFilmsRecord.class);\n\n\t\tString format = outputParser.getFormat();\n\t\tString template = \"\"\"\n\t\t\t\tGenerate the filmography of 5 movies for Tom Hanks.\n\t\t\t\t{format}\n\t\t\t\t\"\"\";\n\t\tPromptTemplate promptTemplate = new PromptTemplate(template, Map.of(\"format\", format));\n\t\tPrompt prompt = new Prompt(promptTemplate.createMessage());\n\t\tGeneration generation = client.call(prompt).getResult();\n\n\t\tActorsFilmsRecord actorsFilms = outputParser.parse(generation.getOutput().getContent());\n\t\tassertThat(actorsFilms.actor()).isEqualTo(\"Tom Hanks\");\n\t\tassertThat(actorsFilms.movies()).hasSize(5);",
                "is_abstract": "",
                "class_name": "VertexAiPaLm2ChatGenerationClientIT",
                "annotations": []
            },
            {
                "name": "vertexAiApi",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new VertexAiPaLm2Api(System.getenv(\"PALM_API_KEY\"));",
                "is_abstract": "",
                "class_name": "VertexAiPaLm2ChatGenerationClientIT TestConfiguration",
                "annotations": []
            },
            {
                "name": "vertexAiEmbedding",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new VertexAiPaLm2ChatClient(vertexAiApi);",
                "is_abstract": "",
                "class_name": "VertexAiPaLm2ChatGenerationClientIT TestConfiguration",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-vertex-ai-palm2/src/test/java/org/springframework/ai/vertexai/palm2/VertexAiPaLm2ChatRequestTests.java",
        "class_names": [
            "VertexAiPaLm2ChatRequestTests"
        ],
        "imports": "import org.springframework.ai.chat.prompt.Prompt;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.springframework.ai.vertexai.palm2.api.VertexAiPaLm2Api;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.chat.prompt.ChatOptionsBuilder;\nimport org.springframework.ai.chat.prompt.ChatOptions;",
        "package_import_paths": {
            "org.springframework.ai.vertexai.palm2.VertexAiPaLm2ChatRequestTests": "org.springframework.ai.vertexai.palm2.VertexAiPaLm2ChatRequestTests",
            "org.springframework.ai.vertexai.palm2.createRequestWithDefaultOptions": "org.springframework.ai.vertexai.palm2.createRequestWithDefaultOptions",
            "org.springframework.ai.vertexai.palm2.createRequestWithPromptVertexAiOptions": "org.springframework.ai.vertexai.palm2.createRequestWithPromptVertexAiOptions",
            "org.springframework.ai.vertexai.palm2.createRequestWithPromptPortableChatOptions": "org.springframework.ai.vertexai.palm2.createRequestWithPromptPortableChatOptions",
            "org.springframework.ai.vertexai.palm2.client": "org.springframework.ai.vertexai.palm2.client"
        },
        "package": "package org.springframework.ai.vertexai.palm2;",
        "property_declarations": [
            "VertexAiPaLm2ChatClient client = new VertexAiPaLm2ChatClient(new VertexAiPaLm2Api(\"bla\"));"
        ],
        "functions": [
            {
                "name": "createRequestWithDefaultOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var request = client.createRequest(new Prompt(\"Test message content\"));\n\n\t\tassertThat(request.prompt().messages()).hasSize(1);\n\n\t\tassertThat(request.candidateCount()).isEqualTo(1);\n\t\tassertThat(request.temperature()).isEqualTo(0.7f);\n\t\tassertThat(request.topK()).isEqualTo(20);\n\t\tassertThat(request.topP()).isNull();",
                "is_abstract": "",
                "class_name": "VertexAiPaLm2ChatRequestTests",
                "annotations": []
            },
            {
                "name": "createRequestWithPromptVertexAiOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// Runtime options should override the default options.\n\t\tVertexAiPaLm2ChatOptions promptOptions = VertexAiPaLm2ChatOptions.builder()\n\t\t\t.withTemperature(0.8f)\n\t\t\t.withTopP(0.5f)\n\t\t\t.withTopK(99)\n\t\t\t// .withCandidateCount(2)\n\t\t\t.build();\n\n\t\tvar request = client.createRequest(new Prompt(\"Test message content\", promptOptions));\n\n\t\tassertThat(request.prompt().messages()).hasSize(1);\n\n\t\tassertThat(request.candidateCount()).isEqualTo(1);\n\t\tassertThat(request.temperature()).isEqualTo(0.8f);\n\t\tassertThat(request.topK()).isEqualTo(99);\n\t\tassertThat(request.topP()).isEqualTo(0.5f);",
                "is_abstract": "",
                "class_name": "VertexAiPaLm2ChatRequestTests",
                "annotations": []
            },
            {
                "name": "createRequestWithPromptPortableChatOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// runtime options.\n\t\tChatOptions portablePromptOptions = ChatOptionsBuilder.builder()\n\t\t\t.withTemperature(0.9f)\n\t\t\t.withTopK(100)\n\t\t\t.withTopP(0.6f)\n\t\t\t.build();\n\n\t\tvar request = client.createRequest(new Prompt(\"Test message content\", portablePromptOptions));\n\n\t\tassertThat(request.prompt().messages()).hasSize(1);\n\n\t\tassertThat(request.candidateCount()).isEqualTo(1);\n\t\tassertThat(request.temperature()).isEqualTo(0.9f);\n\t\tassertThat(request.topK()).isEqualTo(100);\n\t\tassertThat(request.topP()).isEqualTo(0.6f);",
                "is_abstract": "",
                "class_name": "VertexAiPaLm2ChatRequestTests",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-vertex-ai-palm2/src/test/java/org/springframework/ai/vertexai/palm2/VertexAiPaLm2EmbeddingClientIT.java",
        "class_names": [
            "TestConfiguration",
            "VertexAiPaLm2EmbeddingClientIT"
        ],
        "imports": "import java.util.List;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.ai.vertexai.palm2.api.VertexAiPaLm2Api;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.boot.SpringBootConfiguration;\nimport org.springframework.ai.embedding.EmbeddingResponse;",
        "package_import_paths": {
            "org.springframework.ai.vertexai.palm2.VertexAiPaLm2EmbeddingClientIT": "org.springframework.ai.vertexai.palm2.VertexAiPaLm2EmbeddingClientIT",
            "org.springframework.ai.vertexai.palm2.TestConfiguration": "org.springframework.ai.vertexai.palm2.TestConfiguration",
            "org.springframework.ai.vertexai.palm2.simpleEmbeddin": "org.springframework.ai.vertexai.palm2.simpleEmbeddin",
            "org.springframework.ai.vertexai.palm2.batchEmbeddin": "org.springframework.ai.vertexai.palm2.batchEmbeddin",
            "org.springframework.ai.vertexai.palm2.vertexAiApi": "org.springframework.ai.vertexai.palm2.vertexAiApi",
            "org.springframework.ai.vertexai.palm2.vertexAiEmbeddin": "org.springframework.ai.vertexai.palm2.vertexAiEmbeddin",
            "org.springframework.ai.vertexai.palm2.privat": "org.springframework.ai.vertexai.palm2.privat"
        },
        "package": "package org.springframework.ai.vertexai.palm2;",
        "property_declarations": [
            "@Autowired\n\tprivate VertexAiPaLm2EmbeddingClient embeddingClient;"
        ],
        "functions": [
            {
                "name": "simpleEmbedding",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "assertThat(embeddingClient).isNotNull();\n\t\tEmbeddingResponse embeddingResponse = embeddingClient.embedForResponse(List.of(\"Hello World\"));\n\t\tassertThat(embeddingResponse.getResults()).hasSize(1);\n\t\tassertThat(embeddingResponse.getResults().get(0).getOutput()).isNotEmpty();\n\t\tassertThat(embeddingClient.dimensions()).isEqualTo(768);",
                "is_abstract": "",
                "class_name": "VertexAiPaLm2EmbeddingClientIT",
                "annotations": []
            },
            {
                "name": "batchEmbedding",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "assertThat(embeddingClient).isNotNull();\n\t\tEmbeddingResponse embeddingResponse = embeddingClient\n\t\t\t.embedForResponse(List.of(\"Hello World\", \"World is big and salvation is near\"));\n\t\tassertThat(embeddingResponse.getResults()).hasSize(2);\n\t\tassertThat(embeddingResponse.getResults().get(0).getOutput()).isNotEmpty();\n\t\tassertThat(embeddingResponse.getResults().get(0).getIndex()).isEqualTo(0);\n\t\tassertThat(embeddingResponse.getResults().get(1).getOutput()).isNotEmpty();\n\t\tassertThat(embeddingResponse.getResults().get(1).getIndex()).isEqualTo(1);\n\n\t\tassertThat(embeddingClient.dimensions()).isEqualTo(768);",
                "is_abstract": "",
                "class_name": "VertexAiPaLm2EmbeddingClientIT",
                "annotations": []
            },
            {
                "name": "vertexAiApi",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new VertexAiPaLm2Api(System.getenv(\"PALM_API_KEY\"));",
                "is_abstract": "",
                "class_name": "VertexAiPaLm2EmbeddingClientIT TestConfiguration",
                "annotations": []
            },
            {
                "name": "vertexAiEmbedding",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new VertexAiPaLm2EmbeddingClient(vertexAiApi);",
                "is_abstract": "",
                "class_name": "VertexAiPaLm2EmbeddingClientIT TestConfiguration",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-vertex-ai-palm2/src/test/java/org/springframework/ai/vertexai/palm2/api/VertexAiPaLm2ApiIT.java",
        "class_names": [
            "VertexAiPaLm2ApiIT"
        ],
        "imports": "import java.util.stream.Collectors;\nimport java.util.List;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.vertexai.palm2.api.VertexAiPaLm2Api.MessagePrompt;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.ai.vertexai.palm2.api.VertexAiPaLm2Api.GenerateMessageRequest;\nimport org.springframework.ai.vertexai.palm2.api.VertexAiPaLm2Api.Embedding;\nimport org.springframework.ai.vertexai.palm2.api.VertexAiPaLm2Api.GenerateMessageResponse;",
        "package_import_paths": {
            "org.springframework.ai.vertexai.palm2.api.VertexAiPaLm2ApiIT": "org.springframework.ai.vertexai.palm2.api.VertexAiPaLm2ApiIT",
            "org.springframework.ai.vertexai.palm2.api.generateMess": "org.springframework.ai.vertexai.palm2.api.generateMess",
            "org.springframework.ai.vertexai.palm2.api.embedText": "org.springframework.ai.vertexai.palm2.api.embedText",
            "org.springframework.ai.vertexai.palm2.api.batchEmbedText": "org.springframework.ai.vertexai.palm2.api.batchEmbedText",
            "org.springframework.ai.vertexai.palm2.api.countMessageTokens": "org.springframework.ai.vertexai.palm2.api.countMessageTokens",
            "org.springframework.ai.vertexai.palm2.api.listModels": "org.springframework.ai.vertexai.palm2.api.listModels",
            "org.springframework.ai.vertexai.palm2.api.getModel": "org.springframework.ai.vertexai.palm2.api.getModel",
            "org.springframework.ai.vertexai.palm2.api.vertexAiPaLm2Api": "org.springframework.ai.vertexai.palm2.api.vertexAiPaLm2Api"
        },
        "package": "package org.springframework.ai.vertexai.palm2.api;",
        "property_declarations": [
            "VertexAiPaLm2Api vertexAiPaLm2Api = new VertexAiPaLm2Api(System.getenv(\"PALM_API_KEY\"));"
        ],
        "functions": [
            {
                "name": "generateMessage",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var prompt = new MessagePrompt(List.of(new VertexAiPaLm2Api.Message(\"0\", \"Hello, how are you?\")));\n\n\t\tGenerateMessageRequest request = new GenerateMessageRequest(prompt);\n\n\t\tGenerateMessageResponse response = vertexAiPaLm2Api.generateMessage(request);\n\n\t\tassertThat(response).isNotNull();\n\n\t\t// Vertex returns the prompt messages in the response's messages list.\n\t\tassertThat(response.messages()).hasSize(1);\n\t\tassertThat(response.messages().get(0)).isEqualTo(prompt.messages().get(0));\n\n\t\t// Vertex returns the answer in the response's candidates list.\n\t\tassertThat(response.candidates()).hasSize(1);\n\t\tassertThat(response.candidates().get(0).author()).isNotBlank();\n\t\tassertThat(response.candidates().get(0).content()).isNotBlank();",
                "is_abstract": "",
                "class_name": "VertexAiPaLm2ApiIT",
                "annotations": []
            },
            {
                "name": "embedText",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var text = \"Hello, how are you?\";\n\n\t\tEmbedding response = vertexAiPaLm2Api.embedText(text);\n\n\t\tassertThat(response).isNotNull();\n\t\tassertThat(response.value()).hasSize(768);",
                "is_abstract": "",
                "class_name": "VertexAiPaLm2ApiIT",
                "annotations": []
            },
            {
                "name": "batchEmbedText",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var text = List.of(\"Hello, how are you?\", \"I am fine, thank you!\");\n\n\t\tList<Embedding> response = vertexAiPaLm2Api.batchEmbedText(text);\n\n\t\tassertThat(response).isNotNull();\n\t\tassertThat(response).hasSize(2);\n\t\tassertThat(response.get(0).value()).hasSize(768);\n\t\tassertThat(response.get(1).value()).hasSize(768);",
                "is_abstract": "",
                "class_name": "VertexAiPaLm2ApiIT",
                "annotations": []
            },
            {
                "name": "countMessageTokens",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var text = \"Hello, how are you?\";\n\n\t\tvar prompt = new MessagePrompt(List.of(new VertexAiPaLm2Api.Message(\"0\", text)));\n\t\tint response = vertexAiPaLm2Api.countMessageTokens(prompt);\n\n\t\tassertThat(response).isEqualTo(17);",
                "is_abstract": "",
                "class_name": "VertexAiPaLm2ApiIT",
                "annotations": []
            },
            {
                "name": "listModels",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "List<String> response = vertexAiPaLm2Api.listModels();\n\n\t\tassertThat(response).isNotNull();\n\t\tassertThat(response).hasSizeGreaterThan(0);\n\t\tassertThat(response).contains(\"models/chat-bison-001\", \"models/text-bison-001\", \"models/embedding-gecko-001\");\n\n\t\tSystem.out.println(\" - \" + response.stream()\n\t\t\t.map(vertexAiPaLm2Api::getModel)\n\t\t\t.map(VertexAiPaLm2Api.Model::toString)\n\t\t\t.collect(Collectors.joining(\"\\n - \")));",
                "is_abstract": "",
                "class_name": "VertexAiPaLm2ApiIT",
                "annotations": []
            },
            {
                "name": "getModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "VertexAiPaLm2Api.Model model = vertexAiPaLm2Api.getModel(\"models/chat-bison-001\");\n\n\t\tSystem.out.println(model);\n\t\tassertThat(model).isNotNull();\n\t\tassertThat(model.displayName()).isEqualTo(\"PaLM 2 Chat (Legacy)\");",
                "is_abstract": "",
                "class_name": "VertexAiPaLm2ApiIT",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-vertex-ai-palm2/src/test/java/org/springframework/ai/vertexai/palm2/api/VertexAiPaLm2ApiTests.java",
        "class_names": [
            "Config",
            "VertexAiPaLm2ApiTests"
        ],
        "imports": "import static org.springframework.test.web.client.match.MockRestRequestMatchers.requestToUriTemplate;\nimport java.util.List;\nimport static org.springframework.test.web.client.match.MockRestRequestMatchers.method;\nimport org.springframework.ai.vertexai.palm2.api.VertexAiPaLm2Api.Embedding;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport java.util.Map;\nimport static org.springframework.test.web.client.match.MockRestRequestMatchers.content;\nimport org.springframework.ai.vertexai.palm2.api.VertexAiPaLm2Api.MessagePrompt;\nimport org.springframework.ai.vertexai.palm2.api.VertexAiPaLm2Api.GenerateMessageRequest;\nimport org.springframework.ai.vertexai.palm2.api.VertexAiPaLm2Api.GenerateMessageResponse;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport org.junit.jupiter.api.AfterEach;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.test.web.client.MockRestServiceServer;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.http.MediaType;\nimport org.springframework.web.client.RestClient;\nimport org.springframework.boot.SpringBootConfiguration;\nimport org.springframework.boot.test.autoconfigure.web.client.RestClientTest;\nimport org.springframework.ai.vertexai.palm2.api.VertexAiPaLm2Api.GenerateMessageResponse.ContentFilter.BlockedReason;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.junit.jupiter.api.Test;\nimport static org.springframework.test.web.client.response.MockRestResponseCreators.withSuccess;",
        "package_import_paths": {
            "org.springframework.ai.vertexai.palm2.api.VertexAiPaLm2ApiTests": "org.springframework.ai.vertexai.palm2.api.VertexAiPaLm2ApiTests",
            "org.springframework.ai.vertexai.palm2.api.Confi": "org.springframework.ai.vertexai.palm2.api.Confi",
            "org.springframework.ai.vertexai.palm2.api.resetMockServer": "org.springframework.ai.vertexai.palm2.api.resetMockServer",
            "org.springframework.ai.vertexai.palm2.api.generateMess": "org.springframework.ai.vertexai.palm2.api.generateMess",
            "org.springframework.ai.vertexai.palm2.api.embedText": "org.springframework.ai.vertexai.palm2.api.embedText",
            "org.springframework.ai.vertexai.palm2.api.batchEmbedText": "org.springframework.ai.vertexai.palm2.api.batchEmbedText",
            "org.springframework.ai.vertexai.palm2.api.audioApi": "org.springframework.ai.vertexai.palm2.api.audioApi",
            "org.springframework.ai.vertexai.palm2.api.TEST_API_KEY": "org.springframework.ai.vertexai.palm2.api.TEST_API_KEY",
            "org.springframework.ai.vertexai.palm2.api.privat": "org.springframework.ai.vertexai.palm2.api.privat"
        },
        "package": "package org.springframework.ai.vertexai.palm2.api;",
        "property_declarations": [
            "private final static String TEST_API_KEY = \"test-api-key\";",
            "@Autowired\n\tprivate ObjectMapper objectMapper;",
            "@Autowired\n\tprivate MockRestServiceServer server;",
            "@Autowired\n\tprivate VertexAiPaLm2Api client;"
        ],
        "functions": [
            {
                "name": "resetMockServer",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "server.reset();",
                "is_abstract": "",
                "class_name": "VertexAiPaLm2ApiTests",
                "annotations": []
            },
            {
                "name": "generateMessage",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "GenerateMessageRequest request = new GenerateMessageRequest(\n\t\t\t\tnew MessagePrompt(List.of(new VertexAiPaLm2Api.Message(\"0\", \"Hello, how are you?\"))));\n\n\t\tGenerateMessageResponse expectedResponse = new GenerateMessageResponse(\n\t\t\t\tList.of(new VertexAiPaLm2Api.Message(\"1\", \"Hello, how are you?\")),\n\t\t\t\tList.of(new VertexAiPaLm2Api.Message(\"0\", \"I'm fine, thank you.\")),\n\t\t\t\tList.of(new VertexAiPaLm2Api.GenerateMessageResponse.ContentFilter(BlockedReason.SAFETY, \"reason\")));\n\n\t\tserver\n\t\t\t.expect(requestToUriTemplate(\"/models/{generative}:generateMessage?key={apiKey}\",\n\t\t\t\t\tVertexAiPaLm2Api.DEFAULT_GENERATE_MODEL, TEST_API_KEY))\n\t\t\t.andExpect(method(HttpMethod.POST))\n\t\t\t.andExpect(content().json(objectMapper.writeValueAsString(request)))\n\t\t\t.andRespond(withSuccess(objectMapper.writeValueAsString(expectedResponse), MediaType.APPLICATION_JSON));\n\n\t\tGenerateMessageResponse response = client.generateMessage(request);\n\n\t\tassertThat(response).isEqualTo(expectedResponse);\n\n\t\tserver.verify();",
                "is_abstract": "",
                "class_name": "VertexAiPaLm2ApiTests",
                "annotations": []
            },
            {
                "name": "embedText",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String text = \"Hello, how are you?\";\n\n\t\tEmbedding expectedEmbedding = new Embedding(List.of(0.1, 0.2, 0.3));\n\n\t\tserver\n\t\t\t.expect(requestToUriTemplate(\"/models/{generative}:embedText?key={apiKey}\",\n\t\t\t\t\tVertexAiPaLm2Api.DEFAULT_EMBEDDING_MODEL, TEST_API_KEY))\n\t\t\t.andExpect(method(HttpMethod.POST))\n\t\t\t.andExpect(content().json(objectMapper.writeValueAsString(Map.of(\"text\", text))))\n\t\t\t.andRespond(withSuccess(objectMapper.writeValueAsString(Map.of(\"embedding\", expectedEmbedding)),\n\t\t\t\t\tMediaType.APPLICATION_JSON));\n\n\t\tEmbedding embedding = client.embedText(text);\n\n\t\tassertThat(embedding).isEqualTo(expectedEmbedding);\n\n\t\tserver.verify();",
                "is_abstract": "",
                "class_name": "VertexAiPaLm2ApiTests",
                "annotations": []
            },
            {
                "name": "batchEmbedText",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "List<String> texts = List.of(\"Hello, how are you?\", \"I'm fine, thank you.\");\n\n\t\tList<Embedding> expectedEmbeddings = List.of(new Embedding(List.of(0.1, 0.2, 0.3)),\n\t\t\t\tnew Embedding(List.of(0.4, 0.5, 0.6)));\n\n\t\tserver\n\t\t\t.expect(requestToUriTemplate(\"/models/{generative}:batchEmbedText?key={apiKey}\",\n\t\t\t\t\tVertexAiPaLm2Api.DEFAULT_EMBEDDING_MODEL, TEST_API_KEY))\n\t\t\t.andExpect(method(HttpMethod.POST))\n\t\t\t.andExpect(content().json(objectMapper.writeValueAsString(Map.of(\"texts\", texts))))\n\t\t\t.andRespond(withSuccess(objectMapper.writeValueAsString(Map.of(\"embeddings\", expectedEmbeddings)),\n\t\t\t\t\tMediaType.APPLICATION_JSON));\n\n\t\tList<Embedding> embeddings = client.batchEmbedText(texts);\n\n\t\tassertThat(embeddings).isEqualTo(expectedEmbeddings);\n\n\t\tserver.verify();",
                "is_abstract": "",
                "class_name": "VertexAiPaLm2ApiTests",
                "annotations": []
            },
            {
                "name": "audioApi",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new VertexAiPaLm2Api(\"\", TEST_API_KEY, VertexAiPaLm2Api.DEFAULT_GENERATE_MODEL,\n\t\t\t\t\tVertexAiPaLm2Api.DEFAULT_EMBEDDING_MODEL, builder);",
                "is_abstract": "",
                "class_name": "VertexAiPaLm2ApiTests Config",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-vertex-ai-palm2/src/test/java/org/springframework/ai/vertexai/palm2/aot/VertexRuntimeHintsTests.java",
        "class_names": [
            "VertexRuntimeHintsTests"
        ],
        "imports": "import org.springframework.aot.hint.RuntimeHints;\nimport org.springframework.ai.vertexai.palm2.api.VertexAiPaLm2Api;\nimport static org.assertj.core.api.AssertionsForClassTypes.assertThat;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.aot.hint.TypeReference;\nimport java.util.Set;\nimport static org.springframework.ai.aot.AiRuntimeHints.findJsonAnnotatedClassesInPackage;\nimport static org.springframework.aot.hint.predicate.RuntimeHintsPredicates.reflection;",
        "package_import_paths": {
            "org.springframework.ai.vertexai.palm2.aot.VertexRuntimeHintsTests": "org.springframework.ai.vertexai.palm2.aot.VertexRuntimeHintsTests",
            "org.springframework.ai.vertexai.palm2.aot.registerHints": "org.springframework.ai.vertexai.palm2.aot.registerHints"
        },
        "package": "package org.springframework.ai.vertexai.palm2.aot;",
        "property_declarations": [],
        "functions": [
            {
                "name": "registerHints",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "RuntimeHints runtimeHints = new RuntimeHints();\n\t\tVertexRuntimeHints vertexRuntimeHints = new VertexRuntimeHints();\n\t\tvertexRuntimeHints.registerHints(runtimeHints, null);\n\t\tSet<TypeReference> jsonAnnotatedClasses = findJsonAnnotatedClassesInPackage(VertexAiPaLm2Api.class);\n\t\tfor (TypeReference jsonAnnotatedClass : jsonAnnotatedClasses) {\n\t\t\tassertThat(runtimeHints).matches(reflection().onType(jsonAnnotatedClass));\n\t\t}",
                "is_abstract": "",
                "class_name": "VertexRuntimeHintsTests",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-vertex-ai-palm2/src/main/java/org/springframework/ai/vertexai/palm2/VertexAiPaLm2ChatClient.java",
        "class_names": [
            "VertexAiPaLm2ChatClient"
        ],
        "imports": "import java.util.stream.Collectors;\nimport org.springframework.ai.chat.prompt.Prompt;\nimport java.util.List;\nimport org.springframework.ai.chat.Generation;\nimport org.springframework.ai.chat.ChatClient;\nimport org.springframework.util.Assert;\nimport org.springframework.ai.vertexai.palm2.api.VertexAiPaLm2Api;\nimport org.springframework.util.CollectionUtils;\nimport org.springframework.ai.model.ModelOptionsUtils;\nimport org.springframework.ai.chat.prompt.ChatOptions;\nimport org.springframework.ai.vertexai.palm2.api.VertexAiPaLm2Api.MessagePrompt;\nimport org.springframework.ai.vertexai.palm2.api.VertexAiPaLm2Api.GenerateMessageRequest;\nimport org.springframework.ai.chat.ChatResponse;\nimport org.springframework.ai.chat.messages.MessageType;\nimport org.springframework.ai.vertexai.palm2.api.VertexAiPaLm2Api.GenerateMessageResponse;",
        "package_import_paths": {
            "org.springframework.ai.vertexai.palm2.VertexAiPaLm2ChatClient": "org.springframework.ai.vertexai.palm2.VertexAiPaLm2ChatClient",
            "org.springframework.ai.vertexai.palm2.call": "org.springframework.ai.vertexai.palm2.call",
            "org.springframework.ai.vertexai.palm2.createRequest": "org.springframework.ai.vertexai.palm2.createRequest",
            "org.springframework.ai.vertexai.palm2.vertexAiApi": "org.springframework.ai.vertexai.palm2.vertexAiApi",
            "org.springframework.ai.vertexai.palm2.defaultOptions": "org.springframework.ai.vertexai.palm2.defaultOptions"
        },
        "package": "package org.springframework.ai.vertexai.palm2;",
        "property_declarations": [
            "private final VertexAiPaLm2Api vertexAiApi;",
            "private final VertexAiPaLm2ChatOptions defaultOptions;"
        ],
        "functions": [
            {
                "name": "call",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "GenerateMessageRequest request = createRequest(prompt);\n\n\t\tGenerateMessageResponse response = this.vertexAiApi.generateMessage(request);\n\n\t\tList<Generation> generations = response.candidates()\n\t\t\t.stream()\n\t\t\t.map(vmsg -> new Generation(vmsg.content()))\n\t\t\t.toList();\n\n\t\treturn new ChatResponse(generations);",
                "is_abstract": "",
                "class_name": "VertexAiPaLm2ChatClient",
                "annotations": []
            },
            {
                "name": "createRequest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String vertexContext = prompt.getInstructions()\n\t\t\t.stream()\n\t\t\t.filter(m -> m.getMessageType() == MessageType.SYSTEM)\n\t\t\t.map(m -> m.getContent())\n\t\t\t.collect(Collectors.joining(System.lineSeparator()));\n\n\t\tList<VertexAiPaLm2Api.Message> vertexMessages = prompt.getInstructions()\n\t\t\t.stream()\n\t\t\t.filter(m -> m.getMessageType() == MessageType.USER || m.getMessageType() == MessageType.ASSISTANT)\n\t\t\t.map(m -> new VertexAiPaLm2Api.Message(m.getMessageType().getValue(), m.getContent()))\n\t\t\t.toList();\n\n\t\tAssert.isTrue(!CollectionUtils.isEmpty(vertexMessages), \"No user or assistant messages found in the prompt!\");\n\n\t\tvar vertexPrompt = new MessagePrompt(vertexContext, vertexMessages);\n\n\t\tGenerateMessageRequest request = new GenerateMessageRequest(vertexPrompt);\n\n\t\tif (this.defaultOptions != null) {\n\t\t\trequest = ModelOptionsUtils.merge(request, this.defaultOptions, GenerateMessageRequest.class);\n\t\t}\n\n\t\tif (prompt.getOptions() != null) {\n\t\t\tif (prompt.getOptions() instanceof ChatOptions runtimeOptions) {\n\t\t\t\tVertexAiPaLm2ChatOptions updatedRuntimeOptions = ModelOptionsUtils.copyToTarget(runtimeOptions,\n\t\t\t\t\t\tChatOptions.class, VertexAiPaLm2ChatOptions.class);\n\t\t\t\trequest = ModelOptionsUtils.merge(updatedRuntimeOptions, request, GenerateMessageRequest.class);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new IllegalArgumentException(\"Prompt options are not of type ChatOptions: \"\n\t\t\t\t\t\t+ prompt.getOptions().getClass().getSimpleName());\n\t\t\t}\n\t\t}\n\n\t\treturn request;",
                "is_abstract": "",
                "class_name": "VertexAiPaLm2ChatClient",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-vertex-ai-palm2/src/main/java/org/springframework/ai/vertexai/palm2/VertexAiPaLm2EmbeddingClient.java",
        "class_names": [
            "VertexAiPaLm2EmbeddingClient"
        ],
        "imports": "import org.springframework.ai.embedding.Embedding;\nimport java.util.List;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport org.springframework.ai.embedding.AbstractEmbeddingClient;\nimport org.springframework.ai.vertexai.palm2.api.VertexAiPaLm2Api;\nimport org.springframework.ai.document.Document;\nimport org.springframework.ai.embedding.EmbeddingRequest;\nimport org.springframework.ai.embedding.EmbeddingResponse;",
        "package_import_paths": {
            "org.springframework.ai.vertexai.palm2.VertexAiPaLm2EmbeddingClient": "org.springframework.ai.vertexai.palm2.VertexAiPaLm2EmbeddingClient",
            "org.springframework.ai.vertexai.palm2.embed": "org.springframework.ai.vertexai.palm2.embed",
            "org.springframework.ai.vertexai.palm2.call": "org.springframework.ai.vertexai.palm2.call",
            "org.springframework.ai.vertexai.palm2.vertexAiApi": "org.springframework.ai.vertexai.palm2.vertexAiApi"
        },
        "package": "package org.springframework.ai.vertexai.palm2;",
        "property_declarations": [
            "private final VertexAiPaLm2Api vertexAiApi;"
        ],
        "functions": [
            {
                "name": "embed",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return embed(document.getContent());",
                "is_abstract": "",
                "class_name": "VertexAiPaLm2EmbeddingClient",
                "annotations": []
            },
            {
                "name": "call",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "List<VertexAiPaLm2Api.Embedding> vertexEmbeddings = this.vertexAiApi.batchEmbedText(request.getInstructions());\n\t\tAtomicInteger indexCounter = new AtomicInteger(0);\n\t\tList<Embedding> embeddings = vertexEmbeddings.stream()\n\t\t\t.map(vm -> new Embedding(vm.value(), indexCounter.getAndIncrement()))\n\t\t\t.toList();\n\t\treturn new EmbeddingResponse(embeddings);",
                "is_abstract": "",
                "class_name": "VertexAiPaLm2EmbeddingClient",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-vertex-ai-palm2/src/main/java/org/springframework/ai/vertexai/palm2/VertexAiPaLm2ChatOptions.java",
        "class_names": [
            "Builder",
            "VertexAiPaLm2ChatOptions"
        ],
        "imports": "import com.fasterxml.jackson.annotation.JsonInclude;\nimport org.springframework.ai.chat.prompt.ChatOptions;\nimport com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport com.fasterxml.jackson.annotation.JsonProperty;",
        "package_import_paths": {
            "org.springframework.ai.vertexai.palm2.VertexAiPaLm2ChatOptions": "org.springframework.ai.vertexai.palm2.VertexAiPaLm2ChatOptions",
            "org.springframework.ai.vertexai.palm2.Builder": "org.springframework.ai.vertexai.palm2.Builder",
            "org.springframework.ai.vertexai.palm2.builder": "org.springframework.ai.vertexai.palm2.builder",
            "org.springframework.ai.vertexai.palm2.withTemperatur": "org.springframework.ai.vertexai.palm2.withTemperatur",
            "org.springframework.ai.vertexai.palm2.withCandidateCount": "org.springframework.ai.vertexai.palm2.withCandidateCount",
            "org.springframework.ai.vertexai.palm2.withTopP": "org.springframework.ai.vertexai.palm2.withTopP",
            "org.springframework.ai.vertexai.palm2.withTopK": "org.springframework.ai.vertexai.palm2.withTopK",
            "org.springframework.ai.vertexai.palm2.build": "org.springframework.ai.vertexai.palm2.build",
            "org.springframework.ai.vertexai.palm2.getTemperatur": "org.springframework.ai.vertexai.palm2.getTemperatur",
            "org.springframework.ai.vertexai.palm2.setTemperatur": "org.springframework.ai.vertexai.palm2.setTemperatur",
            "org.springframework.ai.vertexai.palm2.getCandidateCount": "org.springframework.ai.vertexai.palm2.getCandidateCount",
            "org.springframework.ai.vertexai.palm2.setCandidateCount": "org.springframework.ai.vertexai.palm2.setCandidateCount",
            "org.springframework.ai.vertexai.palm2.getTopP": "org.springframework.ai.vertexai.palm2.getTopP",
            "org.springframework.ai.vertexai.palm2.setTopP": "org.springframework.ai.vertexai.palm2.setTopP",
            "org.springframework.ai.vertexai.palm2.getTopK": "org.springframework.ai.vertexai.palm2.getTopK",
            "org.springframework.ai.vertexai.palm2.setTopK": "org.springframework.ai.vertexai.palm2.setTopK",
            "org.springframework.ai.vertexai.palm2.temperatur": "org.springframework.ai.vertexai.palm2.temperatur",
            "org.springframework.ai.vertexai.palm2.candidateCount": "org.springframework.ai.vertexai.palm2.candidateCount",
            "org.springframework.ai.vertexai.palm2.topP": "org.springframework.ai.vertexai.palm2.topP",
            "org.springframework.ai.vertexai.palm2.topK": "org.springframework.ai.vertexai.palm2.topK",
            "org.springframework.ai.vertexai.palm2.options": "org.springframework.ai.vertexai.palm2.options"
        },
        "package": "package org.springframework.ai.vertexai.palm2;",
        "property_declarations": [
            "private @JsonProperty(\"candidateCount\") Integer candidateCount;",
            "private @JsonProperty(\"temperature\") Float temperature;",
            "private VertexAiPaLm2ChatOptions options = new VertexAiPaLm2ChatOptions();",
            "private @JsonProperty(\"topP\") Float topP;",
            "private @JsonProperty(\"topK\") Integer topK;"
        ],
        "functions": [
            {
                "name": "builder",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Builder();",
                "is_abstract": "",
                "class_name": "VertexAiPaLm2ChatOptions",
                "annotations": []
            },
            {
                "name": "withTemperature",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.temperature = temperature;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "VertexAiPaLm2ChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withCandidateCount",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.candidateCount = candidateCount;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "VertexAiPaLm2ChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withTopP",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.topP = topP;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "VertexAiPaLm2ChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withTopK",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.topK = topK;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "VertexAiPaLm2ChatOptions Builder",
                "annotations": []
            },
            {
                "name": "build",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.options;",
                "is_abstract": "",
                "class_name": "VertexAiPaLm2ChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getTemperature",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.temperature;",
                "is_abstract": "",
                "class_name": "VertexAiPaLm2ChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setTemperature",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.temperature = temperature;",
                "is_abstract": "",
                "class_name": "VertexAiPaLm2ChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getCandidateCount",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.candidateCount;",
                "is_abstract": "",
                "class_name": "VertexAiPaLm2ChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setCandidateCount",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.candidateCount = candidateCount;",
                "is_abstract": "",
                "class_name": "VertexAiPaLm2ChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getTopP",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.topP;",
                "is_abstract": "",
                "class_name": "VertexAiPaLm2ChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setTopP",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.topP = topP;",
                "is_abstract": "",
                "class_name": "VertexAiPaLm2ChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getTopK",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.topK;",
                "is_abstract": "",
                "class_name": "VertexAiPaLm2ChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setTopK",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.topK = topK;",
                "is_abstract": "",
                "class_name": "VertexAiPaLm2ChatOptions Builder",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-vertex-ai-palm2/src/main/java/org/springframework/ai/vertexai/palm2/api/VertexAiPaLm2Api.java",
        "class_names": [
            "VertexAiPaLm2Api"
        ],
        "imports": "import java.util.List;\nimport com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.springframework.util.Assert;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport java.util.Map;\nimport org.springframework.web.client.RestClient;\nimport java.util.function.Consumer;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.client.ClientHttpResponse;\nimport org.springframework.web.client.ResponseErrorHandler;\nimport java.io.IOException;",
        "package_import_paths": {
            "org.springframework.ai.vertexai.palm2.api.VertexAiPaLm2Api": "org.springframework.ai.vertexai.palm2.api.VertexAiPaLm2Api",
            "org.springframework.ai.vertexai.palm2.api.hasError": "org.springframework.ai.vertexai.palm2.api.hasError",
            "org.springframework.ai.vertexai.palm2.api.handleError": "org.springframework.ai.vertexai.palm2.api.handleError",
            "org.springframework.ai.vertexai.palm2.api.SuppressWarnings": "org.springframework.ai.vertexai.palm2.api.SuppressWarnings",
            "org.springframework.ai.vertexai.palm2.api.embedText": "org.springframework.ai.vertexai.palm2.api.embedText",
            "org.springframework.ai.vertexai.palm2.api.batchEmbedText": "org.springframework.ai.vertexai.palm2.api.batchEmbedText",
            "org.springframework.ai.vertexai.palm2.api.countMessageTokens": "org.springframework.ai.vertexai.palm2.api.countMessageTokens",
            "org.springframework.ai.vertexai.palm2.api.listModels": "org.springframework.ai.vertexai.palm2.api.listModels",
            "org.springframework.ai.vertexai.palm2.api.getModel": "org.springframework.ai.vertexai.palm2.api.getModel",
            "org.springframework.ai.vertexai.palm2.api.DEFAULT_GENERATE_MODEL": "org.springframework.ai.vertexai.palm2.api.DEFAULT_GENERATE_MODEL",
            "org.springframework.ai.vertexai.palm2.api.DEFAULT_EMBEDDING_MODEL": "org.springframework.ai.vertexai.palm2.api.DEFAULT_EMBEDDING_MODEL",
            "org.springframework.ai.vertexai.palm2.api.DEFAULT_BASE_URL": "org.springframework.ai.vertexai.palm2.api.DEFAULT_BASE_URL",
            "org.springframework.ai.vertexai.palm2.api.restClient": "org.springframework.ai.vertexai.palm2.api.restClient",
            "org.springframework.ai.vertexai.palm2.api.apiKey": "org.springframework.ai.vertexai.palm2.api.apiKey",
            "org.springframework.ai.vertexai.palm2.api.chatModel": "org.springframework.ai.vertexai.palm2.api.chatModel",
            "org.springframework.ai.vertexai.palm2.api.embeddingModel": "org.springframework.ai.vertexai.palm2.api.embeddingModel"
        },
        "package": "package org.springframework.ai.vertexai.palm2.api;",
        "property_declarations": [
            "public static final String DEFAULT_GENERATE_MODEL = \"chat-bison-001\";",
            "public static final String DEFAULT_BASE_URL = \"https://generativelanguage.googleapis.com/v1beta3\";",
            "private final RestClient restClient;",
            "private final String apiKey;",
            "public static final String DEFAULT_EMBEDDING_MODEL = \"embedding-gecko-001\";",
            "private final String chatModel;",
            "private final String embeddingModel;"
        ],
        "functions": [
            {
                "name": "hasError",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return response.getStatusCode().isError();",
                "is_abstract": "",
                "class_name": "VertexAiPaLm2Api",
                "annotations": []
            },
            {
                "name": "handleError",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (response.getStatusCode().isError()) {\n\t\t\t\t\tthrow new RuntimeException(String.format(\"%s - %s\", response.getStatusCode().value(),\n\t\t\t\t\t\t\tnew ObjectMapper().readValue(response.getBody(), ResponseError.class)));\n\t\t\t\t}",
                "is_abstract": "",
                "class_name": "VertexAiPaLm2Api",
                "annotations": []
            },
            {
                "name": "SuppressWarnings",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(request, \"The request body can not be null.\");\n\n\t\treturn this.restClient.post()\n\t\t\t.uri(\"/models/{model}:generateMessage?key={apiKey}\", this.chatModel, this.apiKey)\n\t\t\t.body(request)\n\t\t\t.retrieve()\n\t\t\t.body(GenerateMessageResponse.class);",
                "is_abstract": "",
                "class_name": "VertexAiPaLm2Api",
                "annotations": [
                    "@SuppressWarnings(\"null\")"
                ]
            },
            {
                "name": "embedText",
                "parameters": [
                    ""
                ],
                "return_type": "null",
                "body": "Assert.hasText(text, \"The text can not be null or empty.\");\n\n\t\t@JsonInclude(Include.NON_NULL)\n\t\trecord EmbeddingResponse(Embedding embedding) {\n\t\t}\n\n\t\tEmbeddingResponse response = this.restClient.post()\n\t\t\t\t.uri(\"/models/{model}:embedText?key={apiKey}\", this.embeddingModel, this.apiKey)\n\t\t\t\t.body(Map.of(\"text\", text))\n\t\t\t\t.retrieve()\n\t\t\t\t.body(EmbeddingResponse.class);\n\n\t\treturn response != null ? response.embedding() : null;",
                "is_abstract": "",
                "class_name": "VertexAiPaLm2Api",
                "annotations": [
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonInclude(Include.NON_NULL)"
                ]
            },
            {
                "name": "batchEmbedText",
                "parameters": [
                    ""
                ],
                "return_type": "null",
                "body": "Assert.notNull(texts, \"The texts can not be null.\");\n\n\n\t\tBatchEmbeddingResponse response = this.restClient.post()\n\t\t\t\t.uri(\"/models/{model}:batchEmbedText?key={apiKey}\", this.embeddingModel, this.apiKey)\n\t\t\t\t// https://developers.generativeai.google/api/rest/generativelanguage/models/batchEmbedText#request-body\n\t\t\t\t.body(Map.of(\"texts\", texts))\n\t\t\t\t.retrieve()\n\t\t\t\t.body(BatchEmbeddingResponse.class);\n\n\t\treturn response != null ? response.embeddings() : null;",
                "is_abstract": "",
                "class_name": "VertexAiPaLm2Api",
                "annotations": []
            },
            {
                "name": "countMessageTokens",
                "parameters": [
                    ""
                ],
                "return_type": "null",
                "body": "Assert.notNull(prompt, \"The message prompt can not be null.\");\n\n\t\trecord TokenCount(@JsonProperty(\"tokenCount\") Integer tokenCount) {\n\t\t}\n\n\t\tTokenCount tokenCountResponse = this.restClient.post()\n\t\t\t\t.uri(\"/models/{model}:countMessageTokens?key={apiKey}\", this.chatModel, this.apiKey)\n\t\t\t\t.body(Map.of(\"prompt\", prompt))\n\t\t\t\t.retrieve()\n\t\t\t\t.body(TokenCount.class);\n\n\t\treturn tokenCountResponse != null ? tokenCountResponse.tokenCount() : null;",
                "is_abstract": "",
                "class_name": "VertexAiPaLm2Api",
                "annotations": [
                    "@JsonProperty(\"tokenCount\")"
                ]
            },
            {
                "name": "listModels",
                "parameters": [
                    ""
                ],
                "return_type": "modelList",
                "body": "@JsonInclude(Include.NON_NULL)\n\t\trecord ModelList(@JsonProperty(\"models\") List<ModelName> models) {\n\t\t\trecord ModelName(String name) {\n\t\t\t}\n\t\t}\n\n\n\t\tModelList modelList = this.restClient.get()\n\t\t\t.uri(\"/models?key={apiKey}\", this.apiKey)\n\t\t\t.retrieve()\n\t\t\t.body(ModelList.class);\n\n\t\treturn modelList == null ? List.of() :\n\t\t\tmodelList.models().stream()\n\t\t\t.map(ModelList.ModelName::name)\n\t\t\t.toList();",
                "is_abstract": "",
                "class_name": "VertexAiPaLm2Api",
                "annotations": [
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"models\")"
                ]
            },
            {
                "name": "getModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.hasText(modelName, \"The model name can not be null or empty.\");\n\n\t\tif (modelName.startsWith(\"models/\")) {\n\t\t\tmodelName = modelName.substring(\"models/\".length());\n\t\t}\n\n\t\treturn this.restClient.get()\n\t\t\t.uri(\"/models/{model}?key={apiKey}\", modelName, this.apiKey)\n\t\t\t.retrieve()\n\t\t\t.body(Model.class);",
                "is_abstract": "",
                "class_name": "VertexAiPaLm2Api",
                "annotations": [
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"error\")",
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"message\")",
                    "@JsonProperty(\"code\")",
                    "@JsonProperty(\"status\")",
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"name\")",
                    "@JsonProperty(\"baseModelId\")",
                    "@JsonProperty(\"version\")",
                    "@JsonProperty(\"displayName\")",
                    "@JsonProperty(\"description\")",
                    "@JsonProperty(\"inputTokenLimit\")",
                    "@JsonProperty(\"outputTokenLimit\")",
                    "@JsonProperty(\"supportedGenerationMethods\")",
                    "@JsonProperty(\"temperature\")",
                    "@JsonProperty(\"topP\")",
                    "@JsonProperty(\"topK\")",
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"value\")",
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"author\")",
                    "@JsonProperty(\"content\")",
                    "@JsonProperty(\"citationMetadata\")",
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"citationSources\")",
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"startIndex\")",
                    "@JsonProperty(\"endIndex\")",
                    "@JsonProperty(\"uri\")",
                    "@JsonProperty(\"license\")",
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"context\")",
                    "@JsonProperty(\"examples\")",
                    "@JsonProperty(\"messages\")",
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"input\")",
                    "@JsonProperty(\"output\")",
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"prompt\")",
                    "@JsonProperty(\"temperature\")",
                    "@JsonProperty(\"candidateCount\")",
                    "@JsonProperty(\"topP\")",
                    "@JsonProperty(\"topK\")",
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"candidates\")",
                    "@JsonProperty(\"messages\")",
                    "@JsonProperty(\"filters\")",
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"reason\")",
                    "@JsonProperty(\"message\")"
                ]
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-vertex-ai-palm2/src/main/java/org/springframework/ai/vertexai/palm2/aot/VertexRuntimeHints.java",
        "class_names": [
            "VertexRuntimeHints"
        ],
        "imports": "import org.springframework.aot.hint.MemberCategory;\nimport org.springframework.aot.hint.RuntimeHints;\nimport org.springframework.aot.hint.RuntimeHintsRegistrar;\nimport org.springframework.ai.vertexai.palm2.api.VertexAiPaLm2Api;\nimport static org.springframework.ai.aot.AiRuntimeHints.findJsonAnnotatedClassesInPackage;",
        "package_import_paths": {
            "org.springframework.ai.vertexai.palm2.aot.VertexRuntimeHints": "org.springframework.ai.vertexai.palm2.aot.VertexRuntimeHints",
            "org.springframework.ai.vertexai.palm2.aot.registerHints": "org.springframework.ai.vertexai.palm2.aot.registerHints"
        },
        "package": "package org.springframework.ai.vertexai.palm2.aot;",
        "property_declarations": [],
        "functions": [
            {
                "name": "registerHints",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var mcs = MemberCategory.values();\n\t\tfor (var tr : findJsonAnnotatedClassesInPackage(VertexAiPaLm2Api.class))\n\t\t\thints.reflection().registerType(tr, mcs);",
                "is_abstract": "",
                "class_name": "VertexRuntimeHints",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-postgresml/src/test/java/org/springframework/ai/postgresml/PostgresMlEmbeddingOptionsTests.java",
        "class_names": [
            "PostgresMlEmbeddingOptionsTests"
        ],
        "imports": "import org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.ai.embedding.EmbeddingOptions;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport java.util.Map;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;",
        "package_import_paths": {
            "org.springframework.ai.postgresml.PostgresMlEmbeddingOptionsTests": "org.springframework.ai.postgresml.PostgresMlEmbeddingOptionsTests",
            "org.springframework.ai.postgresml.defaultOptions": "org.springframework.ai.postgresml.defaultOptions",
            "org.springframework.ai.postgresml.newOptions": "org.springframework.ai.postgresml.newOptions",
            "org.springframework.ai.postgresml.mergeOptions": "org.springframework.ai.postgresml.mergeOptions"
        },
        "package": "package org.springframework.ai.postgresml;",
        "property_declarations": [],
        "functions": [
            {
                "name": "defaultOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "PostgresMlEmbeddingOptions options = PostgresMlEmbeddingOptions.builder().build();\n\n\t\tassertThat(options.getTransformer()).isEqualTo(PostgresMlEmbeddingClient.DEFAULT_TRANSFORMER_MODEL);\n\t\tassertThat(options.getVectorType()).isEqualTo(PostgresMlEmbeddingClient.VectorType.PG_ARRAY);\n\t\tassertThat(options.getKwargs()).isEqualTo(Map.of());\n\t\tassertThat(options.getMetadataMode()).isEqualTo(org.springframework.ai.document.MetadataMode.EMBED);",
                "is_abstract": "",
                "class_name": "PostgresMlEmbeddingOptionsTests",
                "annotations": []
            },
            {
                "name": "newOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "PostgresMlEmbeddingOptions options = PostgresMlEmbeddingOptions.builder()\n\t\t\t.withTransformer(\"intfloat/e5-small\")\n\t\t\t.withVectorType(PostgresMlEmbeddingClient.VectorType.PG_VECTOR)\n\t\t\t.withMetadataMode(org.springframework.ai.document.MetadataMode.ALL)\n\t\t\t.withKwargs(Map.of(\"device\", \"cpu\"))\n\t\t\t.build();\n\n\t\tassertThat(options.getTransformer()).isEqualTo(\"intfloat/e5-small\");\n\t\tassertThat(options.getVectorType()).isEqualTo(PostgresMlEmbeddingClient.VectorType.PG_VECTOR);\n\t\tassertThat(options.getKwargs()).isEqualTo(Map.of(\"device\", \"cpu\"));\n\t\tassertThat(options.getMetadataMode()).isEqualTo(org.springframework.ai.document.MetadataMode.ALL);",
                "is_abstract": "",
                "class_name": "PostgresMlEmbeddingOptionsTests",
                "annotations": []
            },
            {
                "name": "mergeOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var jdbcTemplate = Mockito.mock(JdbcTemplate.class);\n\t\tPostgresMlEmbeddingClient embeddingClient = new PostgresMlEmbeddingClient(jdbcTemplate);\n\n\t\tPostgresMlEmbeddingOptions options = embeddingClient.mergeOptions(EmbeddingOptions.EMPTY);\n\n\t\t// Default options\n\t\tassertThat(options.getTransformer()).isEqualTo(PostgresMlEmbeddingClient.DEFAULT_TRANSFORMER_MODEL);\n\t\tassertThat(options.getVectorType()).isEqualTo(PostgresMlEmbeddingClient.VectorType.PG_ARRAY);\n\t\tassertThat(options.getKwargs()).isEqualTo(Map.of());\n\t\tassertThat(options.getMetadataMode()).isEqualTo(org.springframework.ai.document.MetadataMode.EMBED);\n\n\t\t// Partial override\n\t\toptions = embeddingClient.mergeOptions(PostgresMlEmbeddingOptions.builder()\n\t\t\t.withTransformer(\"intfloat/e5-small\")\n\t\t\t.withKwargs(Map.of(\"device\", \"cpu\"))\n\t\t\t.build());\n\n\t\tassertThat(options.getTransformer()).isEqualTo(\"intfloat/e5-small\");\n\t\tassertThat(options.getVectorType()).isEqualTo(PostgresMlEmbeddingClient.VectorType.PG_ARRAY); // Default\n\t\tassertThat(options.getKwargs()).isEqualTo(Map.of(\"device\", \"cpu\"));\n\t\tassertThat(options.getMetadataMode()).isEqualTo(org.springframework.ai.document.MetadataMode.EMBED); // Default\n\n\t\t// Complete override\n\t\toptions = embeddingClient.mergeOptions(PostgresMlEmbeddingOptions.builder()\n\t\t\t.withTransformer(\"intfloat/e5-small\")\n\t\t\t.withVectorType(PostgresMlEmbeddingClient.VectorType.PG_VECTOR)\n\t\t\t.withMetadataMode(org.springframework.ai.document.MetadataMode.ALL)\n\t\t\t.withKwargs(Map.of(\"device\", \"cpu\"))\n\t\t\t.build());\n\n\t\tassertThat(options.getTransformer()).isEqualTo(\"intfloat/e5-small\");\n\t\tassertThat(options.getVectorType()).isEqualTo(PostgresMlEmbeddingClient.VectorType.PG_VECTOR);\n\t\tassertThat(options.getKwargs()).isEqualTo(Map.of(\"device\", \"cpu\"));\n\t\tassertThat(options.getMetadataMode()).isEqualTo(org.springframework.ai.document.MetadataMode.ALL);",
                "is_abstract": "",
                "class_name": "PostgresMlEmbeddingOptionsTests",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-postgresml/src/test/java/org/springframework/ai/postgresml/PostgresMlEmbeddingClientIT.java",
        "class_names": [
            "PostgresMlEmbeddingClientIT",
            "TestApplication"
        ],
        "imports": "import org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.ai.document.MetadataMode;\nimport java.util.List;\nimport org.springframework.ai.embedding.EmbeddingOptions;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.junit.jupiter.api.Disabled;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport java.util.Map;\nimport org.springframework.boot.testcontainers.service.connection.ServiceConnection;\nimport org.testcontainers.containers.wait.strategy.LogMessageWaitStrategy;\nimport java.time.Duration;\nimport org.springframework.ai.embedding.EmbeddingResponse;\nimport org.assertj.core.api.Assertions;\nimport org.springframework.boot.test.autoconfigure.jdbc.JdbcTest;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.api.AfterEach;\nimport org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;\nimport java.time.temporal.ChronoUnit;\nimport org.junit.jupiter.params.provider.ValueSource;\nimport org.testcontainers.junit.jupiter.Testcontainers;\nimport org.testcontainers.utility.DockerImageName;\nimport org.springframework.ai.postgresml.PostgresMlEmbeddingClient.VectorType;\nimport org.springframework.ai.document.Document;\nimport org.springframework.ai.embedding.EmbeddingRequest;\nimport org.junit.jupiter.api.Test;\nimport org.testcontainers.junit.jupiter.Container;\nimport org.testcontainers.containers.PostgreSQLContainer;",
        "package_import_paths": {
            "org.springframework.ai.postgresml.PostgresMlEmbeddingClientIT": "org.springframework.ai.postgresml.PostgresMlEmbeddingClientIT",
            "org.springframework.ai.postgresml.TestApplication": "org.springframework.ai.postgresml.TestApplication",
            "org.springframework.ai.postgresml.dropPgmlExtension": "org.springframework.ai.postgresml.dropPgmlExtension",
            "org.springframework.ai.postgresml.embed": "org.springframework.ai.postgresml.embed",
            "org.springframework.ai.postgresml.embedWithPgVector": "org.springframework.ai.postgresml.embedWithPgVector",
            "org.springframework.ai.postgresml.embedWithDifferentModel": "org.springframework.ai.postgresml.embedWithDifferentModel",
            "org.springframework.ai.postgresml.embedWithKwargs": "org.springframework.ai.postgresml.embedWithKwargs",
            "org.springframework.ai.postgresml.ValueSour": "org.springframework.ai.postgresml.ValueSour",
            "org.springframework.ai.postgresml.embedCallWithRequestOptionsOverrid": "org.springframework.ai.postgresml.embedCallWithRequestOptionsOverrid",
            "org.springframework.ai.postgresml.dimensions": "org.springframework.ai.postgresml.dimensions",
            "org.springframework.ai.postgresml.stati": "org.springframework.ai.postgresml.stati",
            "org.springframework.ai.postgresml.JdbcTemplat": "org.springframework.ai.postgresml.JdbcTemplat"
        },
        "package": "package org.springframework.ai.postgresml;",
        "property_declarations": [
            "@Autowired\n\tJdbcTemplate jdbcTemplate;",
            "@Container\n\t@ServiceConnection\n\tstatic PostgreSQLContainer<?> postgres = new PostgreSQLContainer<>(\n\t\t\tDockerImageName.parse(\"ghcr.io/postgresml/postgresml:2.8.1\").asCompatibleSubstituteFor(\"postgres\"))\n\t\t.withCommand(\"sleep\", \"infinity\")\n\t\t.withLabel(\"org.springframework.boot.service-connection\", \"postgres\")\n\t\t.withUsername(\"postgresml\")\n\t\t.withPassword(\"postgresml\")\n\t\t.withDatabaseName(\"postgresml\")\n\t\t.waitingFor(new LogMessageWaitStrategy().withRegEx(\".*Starting dashboard.*\\\\s\")\n\t\t\t.withStartupTimeout(Duration.of(60, ChronoUnit.SECONDS)));"
        ],
        "functions": [
            {
                "name": "dropPgmlExtension",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.jdbcTemplate.execute(\"DROP EXTENSION IF EXISTS pgml\");",
                "is_abstract": "",
                "class_name": "PostgresMlEmbeddingClientIT",
                "annotations": []
            },
            {
                "name": "embed",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "PostgresMlEmbeddingClient embeddingClient = new PostgresMlEmbeddingClient(this.jdbcTemplate);\n\t\tembeddingClient.afterPropertiesSet();\n\n\t\tList<Double> embed = embeddingClient.embed(\"Hello World!\");\n\n\t\tassertThat(embed).hasSize(768);",
                "is_abstract": "",
                "class_name": "PostgresMlEmbeddingClientIT",
                "annotations": []
            },
            {
                "name": "embedWithPgVector",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "PostgresMlEmbeddingClient embeddingClient = new PostgresMlEmbeddingClient(this.jdbcTemplate,\n\t\t\t\tPostgresMlEmbeddingOptions.builder()\n\t\t\t\t\t.withTransformer(\"distilbert-base-uncased\")\n\t\t\t\t\t.withVectorType(PostgresMlEmbeddingClient.VectorType.PG_VECTOR)\n\t\t\t\t\t.build());\n\t\tembeddingClient.afterPropertiesSet();\n\n\t\tList<Double> embed = embeddingClient.embed(new Document(\"Hello World!\"));\n\n\t\tassertThat(embed).hasSize(768);",
                "is_abstract": "",
                "class_name": "PostgresMlEmbeddingClientIT",
                "annotations": []
            },
            {
                "name": "embedWithDifferentModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "PostgresMlEmbeddingClient embeddingClient = new PostgresMlEmbeddingClient(this.jdbcTemplate,\n\t\t\t\tPostgresMlEmbeddingOptions.builder().withTransformer(\"intfloat/e5-small\").build());\n\t\tembeddingClient.afterPropertiesSet();\n\n\t\tList<Double> embed = embeddingClient.embed(new Document(\"Hello World!\"));\n\n\t\tassertThat(embed).hasSize(384);",
                "is_abstract": "",
                "class_name": "PostgresMlEmbeddingClientIT",
                "annotations": []
            },
            {
                "name": "embedWithKwargs",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "PostgresMlEmbeddingClient embeddingClient = new PostgresMlEmbeddingClient(this.jdbcTemplate,\n\t\t\t\tPostgresMlEmbeddingOptions.builder()\n\t\t\t\t\t.withTransformer(\"distilbert-base-uncased\")\n\t\t\t\t\t.withVectorType(PostgresMlEmbeddingClient.VectorType.PG_ARRAY)\n\t\t\t\t\t.withKwargs(Map.of(\"device\", \"cpu\"))\n\t\t\t\t\t.withMetadataMode(MetadataMode.EMBED)\n\t\t\t\t\t.build());\n\t\tembeddingClient.afterPropertiesSet();\n\n\t\tList<Double> embed = embeddingClient.embed(new Document(\"Hello World!\"));\n\n\t\tassertThat(embed).hasSize(768);",
                "is_abstract": "",
                "class_name": "PostgresMlEmbeddingClientIT",
                "annotations": []
            },
            {
                "name": "ValueSource",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "\"PG_ARRAY\", \"PG_VECTOR\" })\n\tvoid embedForResponse(String vectorType) {\n\t\tPostgresMlEmbeddingClient embeddingClient = new PostgresMlEmbeddingClient(this.jdbcTemplate,\n\t\t\t\tPostgresMlEmbeddingOptions.builder()\n\t\t\t\t\t.withTransformer(\"distilbert-base-uncased\")\n\t\t\t\t\t.withVectorType(VectorType.valueOf(vectorType))\n\t\t\t\t\t.build());\n\t\tembeddingClient.afterPropertiesSet();\n\n\t\tEmbeddingResponse embeddingResponse = embeddingClient\n\t\t\t.embedForResponse(List.of(\"Hello World!\", \"Spring AI!\", \"LLM!\"));\n\n\t\tassertThat(embeddingResponse).isNotNull();\n\t\tassertThat(embeddingResponse.getResults()).hasSize(3);\n\t\tassertThat(embeddingResponse.getMetadata()).containsExactlyInAnyOrderEntriesOf(\n\t\t\t\tMap.of(\"transformer\", \"distilbert-base-uncased\", \"vector-type\", vectorType, \"kwargs\", \"{}\"));\n\t\tassertThat(embeddingResponse.getResults().get(0).getIndex()).isEqualTo(0);\n\t\tassertThat(embeddingResponse.getResults().get(0).getOutput()).hasSize(768);\n\t\tassertThat(embeddingResponse.getResults().get(1).getIndex()).isEqualTo(1);\n\t\tassertThat(embeddingResponse.getResults().get(1).getOutput()).hasSize(768);\n\t\tassertThat(embeddingResponse.getResults().get(2).getIndex()).isEqualTo(2);\n\t\tassertThat(embeddingResponse.getResults().get(2).getOutput()).hasSize(768);",
                "is_abstract": "",
                "class_name": "PostgresMlEmbeddingClientIT",
                "annotations": [
                    "@ValueSource(strings = { \"PG_ARRAY\", \"PG_VECTOR\" })"
                ]
            },
            {
                "name": "embedCallWithRequestOptionsOverride",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "PostgresMlEmbeddingClient embeddingClient = new PostgresMlEmbeddingClient(this.jdbcTemplate,\n\t\t\t\tPostgresMlEmbeddingOptions.builder()\n\t\t\t\t\t.withTransformer(\"distilbert-base-uncased\")\n\t\t\t\t\t.withVectorType(VectorType.PG_VECTOR)\n\t\t\t\t\t.build());\n\t\tembeddingClient.afterPropertiesSet();\n\n\t\tvar request1 = new EmbeddingRequest(List.of(\"Hello World!\", \"Spring AI!\", \"LLM!\"), EmbeddingOptions.EMPTY);\n\n\t\tEmbeddingResponse embeddingResponse = embeddingClient.call(request1);\n\n\t\tassertThat(embeddingResponse).isNotNull();\n\t\tassertThat(embeddingResponse.getResults()).hasSize(3);\n\t\tassertThat(embeddingResponse.getMetadata()).containsExactlyInAnyOrderEntriesOf(Map.of(\"transformer\",\n\t\t\t\t\"distilbert-base-uncased\", \"vector-type\", VectorType.PG_VECTOR.name(), \"kwargs\", \"{}\"));\n\t\tassertThat(embeddingResponse.getResults().get(0).getIndex()).isEqualTo(0);\n\t\tassertThat(embeddingResponse.getResults().get(0).getOutput()).hasSize(768);\n\t\tassertThat(embeddingResponse.getResults().get(1).getIndex()).isEqualTo(1);\n\t\tassertThat(embeddingResponse.getResults().get(1).getOutput()).hasSize(768);\n\t\tassertThat(embeddingResponse.getResults().get(2).getIndex()).isEqualTo(2);\n\t\tassertThat(embeddingResponse.getResults().get(2).getOutput()).hasSize(768);\n\n\t\t// Override the default options in the request\n\t\tvar request2 = new EmbeddingRequest(List.of(\"Hello World!\", \"Spring AI!\", \"LLM!\"),\n\t\t\t\tPostgresMlEmbeddingOptions.builder()\n\t\t\t\t\t.withTransformer(\"intfloat/e5-small\")\n\t\t\t\t\t.withVectorType(VectorType.PG_ARRAY)\n\t\t\t\t\t.withMetadataMode(MetadataMode.EMBED)\n\t\t\t\t\t.withKwargs(Map.of(\"device\", \"cpu\"))\n\t\t\t\t\t.build());\n\n\t\tembeddingResponse = embeddingClient.call(request2);\n\n\t\tassertThat(embeddingResponse).isNotNull();\n\t\tassertThat(embeddingResponse.getResults()).hasSize(3);\n\t\tassertThat(embeddingResponse.getMetadata()).containsExactlyInAnyOrderEntriesOf(Map.of(\"transformer\",\n\t\t\t\t\"intfloat/e5-small\", \"vector-type\", VectorType.PG_ARRAY.name(), \"kwargs\", \"{\\\"device\\\":\\\"cpu\\\"}\"));\n\n\t\tassertThat(embeddingResponse.getResults().get(0).getIndex()).isEqualTo(0);\n\t\tassertThat(embeddingResponse.getResults().get(0).getOutput()).hasSize(384);\n\t\tassertThat(embeddingResponse.getResults().get(1).getIndex()).isEqualTo(1);\n\t\tassertThat(embeddingResponse.getResults().get(1).getOutput()).hasSize(384);\n\t\tassertThat(embeddingResponse.getResults().get(2).getIndex()).isEqualTo(2);\n\t\tassertThat(embeddingResponse.getResults().get(2).getOutput()).hasSize(384);",
                "is_abstract": "",
                "class_name": "PostgresMlEmbeddingClientIT",
                "annotations": []
            },
            {
                "name": "dimensions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "PostgresMlEmbeddingClient embeddingClient = new PostgresMlEmbeddingClient(this.jdbcTemplate);\n\t\tembeddingClient.afterPropertiesSet();\n\t\tAssertions.assertThat(embeddingClient.dimensions()).isEqualTo(768);\n\t\t// cached\n\t\tAssertions.assertThat(embeddingClient.dimensions()).isEqualTo(768);",
                "is_abstract": "",
                "class_name": "PostgresMlEmbeddingClientIT",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-postgresml/src/main/java/org/springframework/ai/postgresml/PostgresMlEmbeddingOptions.java",
        "class_names": [
            "Builder",
            "PostgresMlEmbeddingOptions"
        ],
        "imports": "import org.springframework.ai.document.MetadataMode;\nimport org.springframework.ai.embedding.EmbeddingOptions;\nimport com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport org.springframework.ai.postgresml.PostgresMlEmbeddingClient.VectorType;\nimport java.util.Map;\nimport org.springframework.ai.model.ModelOptionsUtils;\nimport com.fasterxml.jackson.annotation.JsonProperty;",
        "package_import_paths": {
            "org.springframework.ai.postgresml.PostgresMlEmbeddingOptions": "org.springframework.ai.postgresml.PostgresMlEmbeddingOptions",
            "org.springframework.ai.postgresml.Builder": "org.springframework.ai.postgresml.Builder",
            "org.springframework.ai.postgresml.builder": "org.springframework.ai.postgresml.builder",
            "org.springframework.ai.postgresml.withTransformer": "org.springframework.ai.postgresml.withTransformer",
            "org.springframework.ai.postgresml.withVectorTy": "org.springframework.ai.postgresml.withVectorTy",
            "org.springframework.ai.postgresml.withKwargs": "org.springframework.ai.postgresml.withKwargs",
            "org.springframework.ai.postgresml.withMetadataMod": "org.springframework.ai.postgresml.withMetadataMod",
            "org.springframework.ai.postgresml.build": "org.springframework.ai.postgresml.build",
            "org.springframework.ai.postgresml.getTransformer": "org.springframework.ai.postgresml.getTransformer",
            "org.springframework.ai.postgresml.setTransformer": "org.springframework.ai.postgresml.setTransformer",
            "org.springframework.ai.postgresml.getVectorTy": "org.springframework.ai.postgresml.getVectorTy",
            "org.springframework.ai.postgresml.setVectorTy": "org.springframework.ai.postgresml.setVectorTy",
            "org.springframework.ai.postgresml.getKwargs": "org.springframework.ai.postgresml.getKwargs",
            "org.springframework.ai.postgresml.setKwargs": "org.springframework.ai.postgresml.setKwargs",
            "org.springframework.ai.postgresml.getMetadataMod": "org.springframework.ai.postgresml.getMetadataMod",
            "org.springframework.ai.postgresml.setMetadataMod": "org.springframework.ai.postgresml.setMetadataMod",
            "org.springframework.ai.postgresml.transformer": "org.springframework.ai.postgresml.transformer",
            "org.springframework.ai.postgresml.vectorTy": "org.springframework.ai.postgresml.vectorTy",
            "org.springframework.ai.postgresml.kwargs": "org.springframework.ai.postgresml.kwargs",
            "org.springframework.ai.postgresml.metadataMod": "org.springframework.ai.postgresml.metadataMod",
            "org.springframework.ai.postgresml.options": "org.springframework.ai.postgresml.options"
        },
        "package": "package org.springframework.ai.postgresml;",
        "property_declarations": [
            "private @JsonProperty(\"transformer\") String transformer = PostgresMlEmbeddingClient.DEFAULT_TRANSFORMER_MODEL;",
            "private @JsonProperty(\"kwargs\") Map<String, Object> kwargs = Map.of();",
            "protected PostgresMlEmbeddingOptions options;",
            "private @JsonProperty(\"metadataMode\") MetadataMode metadataMode = MetadataMode.EMBED;",
            "private @JsonProperty(\"vectorType\") VectorType vectorType = VectorType.PG_ARRAY;"
        ],
        "functions": [
            {
                "name": "builder",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Builder();",
                "is_abstract": "",
                "class_name": "PostgresMlEmbeddingOptions",
                "annotations": []
            },
            {
                "name": "withTransformer",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.setTransformer(transformer);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "PostgresMlEmbeddingOptions Builder",
                "annotations": []
            },
            {
                "name": "withVectorType",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.setVectorType(vectorType);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "PostgresMlEmbeddingOptions Builder",
                "annotations": []
            },
            {
                "name": "withKwargs",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.setKwargs(ModelOptionsUtils.objectToMap(kwargs));\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "PostgresMlEmbeddingOptions Builder",
                "annotations": []
            },
            {
                "name": "withMetadataMode",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.setMetadataMode(metadataMode);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "PostgresMlEmbeddingOptions Builder",
                "annotations": []
            },
            {
                "name": "build",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.options;",
                "is_abstract": "",
                "class_name": "PostgresMlEmbeddingOptions Builder",
                "annotations": []
            },
            {
                "name": "getTransformer",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.transformer;",
                "is_abstract": "",
                "class_name": "PostgresMlEmbeddingOptions Builder",
                "annotations": []
            },
            {
                "name": "setTransformer",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.transformer = transformer;",
                "is_abstract": "",
                "class_name": "PostgresMlEmbeddingOptions Builder",
                "annotations": []
            },
            {
                "name": "getVectorType",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.vectorType;",
                "is_abstract": "",
                "class_name": "PostgresMlEmbeddingOptions Builder",
                "annotations": []
            },
            {
                "name": "setVectorType",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.vectorType = vectorType;",
                "is_abstract": "",
                "class_name": "PostgresMlEmbeddingOptions Builder",
                "annotations": []
            },
            {
                "name": "getKwargs",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.kwargs;",
                "is_abstract": "",
                "class_name": "PostgresMlEmbeddingOptions Builder",
                "annotations": []
            },
            {
                "name": "setKwargs",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.kwargs = kwargs;",
                "is_abstract": "",
                "class_name": "PostgresMlEmbeddingOptions Builder",
                "annotations": []
            },
            {
                "name": "getMetadataMode",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return metadataMode;",
                "is_abstract": "",
                "class_name": "PostgresMlEmbeddingOptions Builder",
                "annotations": []
            },
            {
                "name": "setMetadataMode",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.metadataMode = metadataMode;",
                "is_abstract": "",
                "class_name": "PostgresMlEmbeddingOptions Builder",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-postgresml/src/main/java/org/springframework/ai/postgresml/PostgresMlEmbeddingClient.java",
        "class_names": [
            "PostgresMlEmbeddingClient"
        ],
        "imports": "import org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.ai.document.MetadataMode;\nimport java.util.List;\nimport org.springframework.ai.embedding.EmbeddingOptions;\nimport org.springframework.util.CollectionUtils;\nimport org.springframework.util.StringUtils;\nimport org.springframework.ai.embedding.Embedding;\nimport java.util.Map;\nimport java.util.Arrays;\nimport org.springframework.ai.embedding.EmbeddingResponse;\nimport java.sql.PreparedStatement;\nimport java.sql.Array;\nimport org.springframework.ai.model.ModelOptionsUtils;\nimport org.springframework.beans.factory.InitializingBean;\nimport java.util.ArrayList;\nimport org.springframework.ai.embedding.EmbeddingResponseMetadata;\nimport org.springframework.util.Assert;\nimport org.springframework.ai.embedding.AbstractEmbeddingClient;\nimport org.springframework.ai.document.Document;\nimport org.springframework.jdbc.core.RowMapper;\nimport org.springframework.ai.embedding.EmbeddingRequest;",
        "package_import_paths": {
            "org.springframework.ai.postgresml.PostgresMlEmbeddingClient": "org.springframework.ai.postgresml.PostgresMlEmbeddingClient",
            "org.springframework.ai.postgresml.SuppressWarnings": "org.springframework.ai.postgresml.SuppressWarnings",
            "org.springframework.ai.postgresml.embed": "org.springframework.ai.postgresml.embed",
            "org.springframework.ai.postgresml.mergeOptions": "org.springframework.ai.postgresml.mergeOptions",
            "org.springframework.ai.postgresml.afterPropertiesSet": "org.springframework.ai.postgresml.afterPropertiesSet",
            "org.springframework.ai.postgresml.DEFAULT_TRANSFORMER_MODEL": "org.springframework.ai.postgresml.DEFAULT_TRANSFORMER_MODEL",
            "org.springframework.ai.postgresml.defaultOptions": "org.springframework.ai.postgresml.defaultOptions",
            "org.springframework.ai.postgresml.jdbcTemplat": "org.springframework.ai.postgresml.jdbcTemplat",
            "org.springframework.ai.postgresml.cast": "org.springframework.ai.postgresml.cast",
            "org.springframework.ai.postgresml.extensionNam": "org.springframework.ai.postgresml.extensionNam",
            "org.springframework.ai.postgresml.rowMapper": "org.springframework.ai.postgresml.rowMapper"
        },
        "package": "package org.springframework.ai.postgresml;",
        "property_declarations": [
            "private final RowMapper<List<Double>> rowMapper;",
            "public static final String DEFAULT_TRANSFORMER_MODEL = \"distilbert-base-uncased\";",
            "private final PostgresMlEmbeddingOptions defaultOptions;",
            "private final String cast;",
            "private final String extensionName;",
            "private final JdbcTemplate jdbcTemplate;"
        ],
        "functions": [
            {
                "name": "SuppressWarnings",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.jdbcTemplate.queryForObject(\n\t\t\t\t\"SELECT pgml.embed(?, ?, ?::JSONB)\" + this.defaultOptions.getVectorType().cast + \" AS embedding\",\n\t\t\t\tthis.defaultOptions.getVectorType().rowMapper, this.defaultOptions.getTransformer(), text,\n\t\t\t\tthis.defaultOptions.getKwargs());",
                "is_abstract": "",
                "class_name": "PostgresMlEmbeddingClient",
                "annotations": [
                    "@SuppressWarnings(\"null\")"
                ]
            },
            {
                "name": "embed",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.embed(document.getFormattedContent(this.defaultOptions.getMetadataMode()));",
                "is_abstract": "",
                "class_name": "PostgresMlEmbeddingClient",
                "annotations": []
            },
            {
                "name": "mergeOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "PostgresMlEmbeddingOptions options = (this.defaultOptions != null) ? this.defaultOptions\n\t\t\t\t: PostgresMlEmbeddingOptions.builder().build();\n\n\t\tif (requestOptions != null && !EmbeddingOptions.EMPTY.equals(requestOptions)) {\n\t\t\toptions = ModelOptionsUtils.merge(requestOptions, options, PostgresMlEmbeddingOptions.class);\n\t\t}\n\n\t\treturn options;",
                "is_abstract": "",
                "class_name": "PostgresMlEmbeddingClient",
                "annotations": []
            },
            {
                "name": "afterPropertiesSet",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.jdbcTemplate.execute(\"CREATE EXTENSION IF NOT EXISTS pgml\");\n\t\tthis.jdbcTemplate.execute(\"CREATE EXTENSION IF NOT EXISTS hstore\");\n\t\tif (StringUtils.hasText(this.defaultOptions.getVectorType().extensionName)) {\n\t\t\tthis.jdbcTemplate\n\t\t\t\t.execute(\"CREATE EXTENSION IF NOT EXISTS \" + this.defaultOptions.getVectorType().extensionName);\n\t\t}",
                "is_abstract": "",
                "class_name": "PostgresMlEmbeddingClient",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-watsonx-ai/src/test/java/org/springframework/ai/watsonx/WatsonxAiChatClientTest.java",
        "class_names": [
            "WatsonxAiChatClientTest"
        ],
        "imports": "import org.springframework.ai.watsonx.api.WatsonxAiRequest;\nimport java.util.List;\nimport org.springframework.ai.chat.Generation;\nimport org.springframework.ai.watsonx.api.WatsonxAiApi;\nimport reactor.core.publisher.Flux;\nimport org.springframework.ai.watsonx.api.WatsonxAiResults;\nimport org.springframework.ai.chat.messages.SystemMessage;\nimport org.springframework.ai.chat.prompt.ChatOptionsBuilder;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport java.util.Map;\nimport static org.mockito.ArgumentMatchers.any;\nimport org.springframework.ai.chat.ChatResponse;\nimport static org.mockito.Mockito.when;\nimport reactor.test.StepVerifier;\nimport org.springframework.ai.chat.prompt.Prompt;\nimport org.springframework.ai.watsonx.api.WatsonxAiResponse;\nimport org.springframework.http.ResponseEntity;\nimport static org.mockito.Mockito.mock;\nimport org.junit.Assert;\nimport java.util.Date;\nimport org.springframework.ai.chat.metadata.ChatGenerationMetadata;\nimport java.util.Optional;\nimport org.junit.Test;",
        "package_import_paths": {
            "org.springframework.ai.watsonx.WatsonxAiChatClientTest": "org.springframework.ai.watsonx.WatsonxAiChatClientTest",
            "org.springframework.ai.watsonx.testCreateRequestWithNoModelId": "org.springframework.ai.watsonx.testCreateRequestWithNoModelId",
            "org.springframework.ai.watsonx.testCreateRequestSuccessfullyWithDefaultParams": "org.springframework.ai.watsonx.testCreateRequestSuccessfullyWithDefaultParams",
            "org.springframework.ai.watsonx.testCreateRequestSuccessfullyWithNonDefaultParams": "org.springframework.ai.watsonx.testCreateRequestSuccessfullyWithNonDefaultParams",
            "org.springframework.ai.watsonx.testCreateRequestSuccessfullyWithChatDisabled": "org.springframework.ai.watsonx.testCreateRequestSuccessfullyWithChatDisabled",
            "org.springframework.ai.watsonx.testCallMethod": "org.springframework.ai.watsonx.testCallMethod",
            "org.springframework.ai.watsonx.testStreamMethod": "org.springframework.ai.watsonx.testStreamMethod",
            "org.springframework.ai.watsonx.chatClient": "org.springframework.ai.watsonx.chatClient"
        },
        "package": "package org.springframework.ai.watsonx;",
        "property_declarations": [
            "WatsonxAiChatClient chatClient = new WatsonxAiChatClient(mock(WatsonxAiApi.class));"
        ],
        "functions": [
            {
                "name": "testCreateRequestWithNoModelId",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var options = ChatOptionsBuilder.builder().withTemperature(0.9f).withTopK(100).withTopP(0.6f).build();\n\n\t\tPrompt prompt = new Prompt(\"Test message\", options);\n\n\t\tException exception = Assert.assertThrows(IllegalArgumentException.class, () -> {\n\t\t\tWatsonxAiRequest request = chatClient.request(prompt);\n\t\t});",
                "is_abstract": "",
                "class_name": "WatsonxAiChatClientTest",
                "annotations": []
            },
            {
                "name": "testCreateRequestSuccessfullyWithDefaultParams",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String msg = \"Test message\";\n\n\t\tWatsonxAiChatOptions modelOptions = WatsonxAiChatOptions.builder()\n\t\t\t.withModel(\"meta-llama/llama-2-70b-chat\")\n\t\t\t.build();\n\t\tPrompt prompt = new Prompt(msg, modelOptions);\n\n\t\tWatsonxAiRequest request = chatClient.request(prompt);\n\n\t\tAssert.assertEquals(request.getModelId(), \"meta-llama/llama-2-70b-chat\");\n\t\tassertThat(request.getParameters().get(\"decoding_method\")).isEqualTo(\"greedy\");\n\t\tassertThat(request.getParameters().get(\"temperature\")).isEqualTo(0.7);\n\t\tassertThat(request.getParameters().get(\"top_p\")).isEqualTo(1.0);\n\t\tassertThat(request.getParameters().get(\"top_k\")).isEqualTo(50);\n\t\tassertThat(request.getParameters().get(\"max_new_tokens\")).isEqualTo(20);\n\t\tassertThat(request.getParameters().get(\"min_new_tokens\")).isEqualTo(0);\n\t\tassertThat(request.getParameters().get(\"stop_sequences\")).isInstanceOf(List.class);\n\t\tAssert.assertEquals(request.getParameters().get(\"stop_sequences\"), List.of());\n\t\tassertThat(request.getParameters().get(\"random_seed\")).isNull();",
                "is_abstract": "",
                "class_name": "WatsonxAiChatClientTest",
                "annotations": []
            },
            {
                "name": "testCreateRequestSuccessfullyWithNonDefaultParams",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String msg = \"Test message\";\n\n\t\tWatsonxAiChatOptions modelOptions = WatsonxAiChatOptions.builder()\n\t\t\t.withModel(\"meta-llama/llama-2-70b-chat\")\n\t\t\t.withDecodingMethod(\"sample\")\n\t\t\t.withTemperature(0.1f)\n\t\t\t.withTopP(0.2f)\n\t\t\t.withTopK(10)\n\t\t\t.withMaxNewTokens(30)\n\t\t\t.withMinNewTokens(10)\n\t\t\t.withRepetitionPenalty(1.4f)\n\t\t\t.withStopSequences(List.of(\"\\n\\n\\n\"))\n\t\t\t.withRandomSeed(4)\n\t\t\t.build();\n\n\t\tPrompt prompt = new Prompt(msg, modelOptions);\n\n\t\tWatsonxAiRequest request = chatClient.request(prompt);\n\n\t\tAssert.assertEquals(request.getModelId(), \"meta-llama/llama-2-70b-chat\");\n\t\tassertThat(request.getParameters().get(\"decoding_method\")).isEqualTo(\"sample\");\n\t\tassertThat(request.getParameters().get(\"temperature\")).isEqualTo(0.1);\n\t\tassertThat(request.getParameters().get(\"top_p\")).isEqualTo(0.2);\n\t\tassertThat(request.getParameters().get(\"top_k\")).isEqualTo(10);\n\t\tassertThat(request.getParameters().get(\"max_new_tokens\")).isEqualTo(30);\n\t\tassertThat(request.getParameters().get(\"min_new_tokens\")).isEqualTo(10);\n\t\tassertThat(request.getParameters().get(\"stop_sequences\")).isInstanceOf(List.class);\n\t\tAssert.assertEquals(request.getParameters().get(\"stop_sequences\"), List.of(\"\\n\\n\\n\"));\n\t\tassertThat(request.getParameters().get(\"random_seed\")).isEqualTo(4);",
                "is_abstract": "",
                "class_name": "WatsonxAiChatClientTest",
                "annotations": []
            },
            {
                "name": "testCreateRequestSuccessfullyWithChatDisabled",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String msg = \"Test message\";\n\n\t\tWatsonxAiChatOptions modelOptions = WatsonxAiChatOptions.builder()\n\t\t\t.withModel(\"meta-llama/llama-2-70b-chat\")\n\t\t\t.withDecodingMethod(\"sample\")\n\t\t\t.withTemperature(0.1f)\n\t\t\t.withTopP(0.2f)\n\t\t\t.withTopK(10)\n\t\t\t.withMaxNewTokens(30)\n\t\t\t.withMinNewTokens(10)\n\t\t\t.withRepetitionPenalty(1.4f)\n\t\t\t.withStopSequences(List.of(\"\\n\\n\\n\"))\n\t\t\t.withRandomSeed(4)\n\t\t\t.build();\n\n\t\tPrompt prompt = new Prompt(msg, modelOptions);\n\n\t\tWatsonxAiRequest request = chatClient.request(prompt);\n\n\t\tAssert.assertEquals(request.getModelId(), \"meta-llama/llama-2-70b-chat\");\n\t\tassertThat(request.getInput()).isEqualTo(msg);\n\t\tassertThat(request.getParameters().get(\"decoding_method\")).isEqualTo(\"sample\");\n\t\tassertThat(request.getParameters().get(\"temperature\")).isEqualTo(0.1);\n\t\tassertThat(request.getParameters().get(\"top_p\")).isEqualTo(0.2);\n\t\tassertThat(request.getParameters().get(\"top_k\")).isEqualTo(10);\n\t\tassertThat(request.getParameters().get(\"max_new_tokens\")).isEqualTo(30);\n\t\tassertThat(request.getParameters().get(\"min_new_tokens\")).isEqualTo(10);\n\t\tassertThat(request.getParameters().get(\"stop_sequences\")).isInstanceOf(List.class);\n\t\tAssert.assertEquals(request.getParameters().get(\"stop_sequences\"), List.of(\"\\n\\n\\n\"));\n\t\tassertThat(request.getParameters().get(\"random_seed\")).isEqualTo(4);",
                "is_abstract": "",
                "class_name": "WatsonxAiChatClientTest",
                "annotations": []
            },
            {
                "name": "testCallMethod",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "WatsonxAiApi mockChatApi = mock(WatsonxAiApi.class);\n\t\tWatsonxAiChatClient client = new WatsonxAiChatClient(mockChatApi);\n\n\t\tPrompt prompt = new Prompt(List.of(new SystemMessage(\"Your prompt here\")),\n\t\t\t\tWatsonxAiChatOptions.builder().withModel(\"google/flan-ul2\").build());\n\n\t\tWatsonxAiChatOptions parameters = WatsonxAiChatOptions.builder().withModel(\"google/flan-ul2\").build();\n\n\t\tWatsonxAiResults fakeResults = new WatsonxAiResults(\"LLM response\", 4, 3, \"max_tokens\");\n\n\t\tWatsonxAiResponse fakeResponse = new WatsonxAiResponse(\"google/flan-ul2\", new Date(), List.of(fakeResults),\n\t\t\t\tMap.of(\"warnings\", List.of(Map.of(\"message\", \"the message\", \"id\", \"disclaimer_warning\"))));\n\n\t\twhen(mockChatApi.generate(any(WatsonxAiRequest.class)))\n\t\t\t.thenReturn(ResponseEntity.of(Optional.of(fakeResponse)));\n\n\t\tGeneration expectedGenerator = new Generation(\"LLM response\")\n\t\t\t.withGenerationMetadata(ChatGenerationMetadata.from(\"max_tokens\",\n\t\t\t\t\tMap.of(\"warnings\", List.of(Map.of(\"message\", \"the message\", \"id\", \"disclaimer_warning\")))));\n\n\t\tChatResponse expectedResponse = new ChatResponse(List.of(expectedGenerator));\n\t\tChatResponse response = client.call(prompt);\n\n\t\tAssert.assertEquals(expectedResponse.getResults().size(), response.getResults().size());\n\t\tAssert.assertEquals(expectedResponse.getResult().getOutput(), response.getResult().getOutput());",
                "is_abstract": "",
                "class_name": "WatsonxAiChatClientTest",
                "annotations": []
            },
            {
                "name": "testStreamMethod",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "WatsonxAiApi mockChatApi = mock(WatsonxAiApi.class);\n\t\tWatsonxAiChatClient client = new WatsonxAiChatClient(mockChatApi);\n\n\t\tPrompt prompt = new Prompt(List.of(new SystemMessage(\"Your prompt here\")),\n\t\t\t\tWatsonxAiChatOptions.builder().withModel(\"google/flan-ul2\").build());\n\n\t\tWatsonxAiChatOptions parameters = WatsonxAiChatOptions.builder().withModel(\"google/flan-ul2\").build();\n\n\t\tWatsonxAiResults fakeResultsFirst = new WatsonxAiResults(\"LLM resp\", 0, 0, \"max_tokens\");\n\t\tWatsonxAiResults fakeResultsSecond = new WatsonxAiResults(\"onse\", 4, 3, \"not_finished\");\n\n\t\tWatsonxAiResponse fakeResponseFirst = new WatsonxAiResponse(\"google/flan-ul2\", new Date(),\n\t\t\t\tList.of(fakeResultsFirst),\n\t\t\t\tMap.of(\"warnings\", List.of(Map.of(\"message\", \"the message\", \"id\", \"disclaimer_warning\"))));\n\t\tWatsonxAiResponse fakeResponseSecond = new WatsonxAiResponse(\"google/flan-ul2\", new Date(),\n\t\t\t\tList.of(fakeResultsSecond), null);\n\n\t\tFlux<WatsonxAiResponse> fakeResponse = Flux.just(fakeResponseFirst, fakeResponseSecond);\n\t\twhen(mockChatApi.generateStreaming(any(WatsonxAiRequest.class))).thenReturn(fakeResponse);\n\n\t\tGeneration firstGen = new Generation(\"LLM resp\")\n\t\t\t.withGenerationMetadata(ChatGenerationMetadata.from(\"max_tokens\",\n\t\t\t\t\tMap.of(\"warnings\", List.of(Map.of(\"message\", \"the message\", \"id\", \"disclaimer_warning\")))));\n\t\tGeneration secondGen = new Generation(\"onse\");\n\n\t\tFlux<ChatResponse> response = client.stream(prompt);\n\n\t\tStepVerifier.create(response).assertNext(current -> {\n\n\t\t\tChatResponse expected = new ChatResponse(List.of(firstGen));\n\n\t\t\tAssert.assertEquals(expected.getResults().size(), current.getResults().size());\n\t\t\tAssert.assertEquals(expected.getResult().getOutput(), current.getResult().getOutput());\n\t\t}).assertNext(current -> {\n\t\t\tChatResponse expected = new ChatResponse(List.of(secondGen));\n\n\t\t\tAssert.assertEquals(expected.getResults().size(), current.getResults().size());\n\t\t\tAssert.assertEquals(expected.getResult().getOutput(), current.getResult().getOutput());\n\t\t}).expectComplete().verify();",
                "is_abstract": "",
                "class_name": "WatsonxAiChatClientTest",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-watsonx-ai/src/test/java/org/springframework/ai/watsonx/utils/MessageToPromptConverterTest.java",
        "class_names": [
            "MessageToPromptConverterTest"
        ],
        "imports": "import java.util.List;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Disabled;\nimport org.junit.Before;\nimport org.springframework.ai.chat.messages.*;\nimport org.junit.Test;",
        "package_import_paths": {
            "org.springframework.ai.watsonx.utils.MessageToPromptConverterTest": "org.springframework.ai.watsonx.utils.MessageToPromptConverterTest",
            "org.springframework.ai.watsonx.utils.setU": "org.springframework.ai.watsonx.utils.setU",
            "org.springframework.ai.watsonx.utils.testSingleUserMess": "org.springframework.ai.watsonx.utils.testSingleUserMess",
            "org.springframework.ai.watsonx.utils.testSingleAssistantMess": "org.springframework.ai.watsonx.utils.testSingleAssistantMess",
            "org.springframework.ai.watsonx.utils.testFunctionMessageTy": "org.springframework.ai.watsonx.utils.testFunctionMessageTy",
            "org.springframework.ai.watsonx.utils.testSystemMessageTy": "org.springframework.ai.watsonx.utils.testSystemMessageTy",
            "org.springframework.ai.watsonx.utils.testCustomHumanPrompt": "org.springframework.ai.watsonx.utils.testCustomHumanPrompt",
            "org.springframework.ai.watsonx.utils.testCustomAssistantPrompt": "org.springframework.ai.watsonx.utils.testCustomAssistantPrompt",
            "org.springframework.ai.watsonx.utils.testEmptyMessageList": "org.springframework.ai.watsonx.utils.testEmptyMessageList",
            "org.springframework.ai.watsonx.utils.testSystemMessageList": "org.springframework.ai.watsonx.utils.testSystemMessageList",
            "org.springframework.ai.watsonx.utils.testUserMessageList": "org.springframework.ai.watsonx.utils.testUserMessageList",
            "org.springframework.ai.watsonx.utils.testUnsupportedMessageTy": "org.springframework.ai.watsonx.utils.testUnsupportedMessageTy",
            "org.springframework.ai.watsonx.utils.converter": "org.springframework.ai.watsonx.utils.converter"
        },
        "package": "package org.springframework.ai.watsonx.utils;",
        "property_declarations": [
            "private MessageToPromptConverter converter;"
        ],
        "functions": [
            {
                "name": "setUp",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "converter = MessageToPromptConverter.create().withHumanPrompt(\"\").withAssistantPrompt(\"\");",
                "is_abstract": "",
                "class_name": "MessageToPromptConverterTest",
                "annotations": []
            },
            {
                "name": "testSingleUserMessage",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Message userMessage = new UserMessage(\"User message\");\n\t\tString expected = \"User message\";\n\t\tAssert.assertEquals(expected, converter.messageToString(userMessage));",
                "is_abstract": "",
                "class_name": "MessageToPromptConverterTest",
                "annotations": []
            },
            {
                "name": "testSingleAssistantMessage",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Message assistantMessage = new AssistantMessage(\"Assistant message\");\n\t\tString expected = \"Assistant message\";\n\t\tAssert.assertEquals(expected, converter.messageToString(assistantMessage));",
                "is_abstract": "",
                "class_name": "MessageToPromptConverterTest",
                "annotations": []
            },
            {
                "name": "testFunctionMessageType",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Message functionMessage = new FunctionMessage(\"Function message\");\n\t\tException exception = Assert.assertThrows(IllegalArgumentException.class, () -> {\n\t\t\tconverter.messageToString(functionMessage);\n\t\t});",
                "is_abstract": "",
                "class_name": "MessageToPromptConverterTest",
                "annotations": []
            },
            {
                "name": "testSystemMessageType",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Message systemMessage = new SystemMessage(\"System message\");\n\t\tString expected = \"System message\";\n\t\tAssert.assertEquals(expected, converter.messageToString(systemMessage));",
                "is_abstract": "",
                "class_name": "MessageToPromptConverterTest",
                "annotations": []
            },
            {
                "name": "testCustomHumanPrompt",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "converter.withHumanPrompt(\"Custom Human: \");\n\t\tMessage userMessage = new UserMessage(\"User message\");\n\t\tString expected = \"Custom Human: User message\";\n\t\tAssert.assertEquals(expected, converter.messageToString(userMessage));",
                "is_abstract": "",
                "class_name": "MessageToPromptConverterTest",
                "annotations": []
            },
            {
                "name": "testCustomAssistantPrompt",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "converter.withAssistantPrompt(\"Custom Assistant: \");\n\t\tMessage assistantMessage = new AssistantMessage(\"Assistant message\");\n\t\tString expected = \"Custom Assistant: Assistant message\";\n\t\tAssert.assertEquals(expected, converter.messageToString(assistantMessage));",
                "is_abstract": "",
                "class_name": "MessageToPromptConverterTest",
                "annotations": []
            },
            {
                "name": "testEmptyMessageList",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String expected = \"\";\n\t\tAssert.assertEquals(expected, converter.toPrompt(List.of()));",
                "is_abstract": "",
                "class_name": "MessageToPromptConverterTest",
                "annotations": []
            },
            {
                "name": "testSystemMessageList",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String msg = \"this is a LLM prompt\";\n\t\tSystemMessage message = new SystemMessage(msg);\n\t\tAssert.assertEquals(msg, converter.toPrompt(List.of(message)));",
                "is_abstract": "",
                "class_name": "MessageToPromptConverterTest",
                "annotations": []
            },
            {
                "name": "testUserMessageList",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "List<Message> messages = List.of(new UserMessage(\"User message\"));\n\t\tString expected = \"User message\";\n\t\tAssert.assertEquals(expected, converter.toPrompt(messages));",
                "is_abstract": "",
                "class_name": "MessageToPromptConverterTest",
                "annotations": []
            },
            {
                "name": "testUnsupportedMessageType",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "List<Message> messages = List.of(new FunctionMessage(\"Unsupported message\"));\n\t\tException exception = Assert.assertThrows(IllegalArgumentException.class, () -> {\n\t\t\tconverter.toPrompt(messages);\n\t\t});",
                "is_abstract": "",
                "class_name": "MessageToPromptConverterTest",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-watsonx-ai/src/test/java/org/springframework/ai/watsonx/api/WatsonxAiChatOptionTest.java",
        "class_names": [
            "WatsonxAiChatOptionTest"
        ],
        "imports": "import org.springframework.ai.watsonx.WatsonxAiChatOptions;\nimport java.util.List;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport java.util.Map;\nimport org.junit.Test;",
        "package_import_paths": {
            "org.springframework.ai.watsonx.api.WatsonxAiChatOptionTest": "org.springframework.ai.watsonx.api.WatsonxAiChatOptionTest",
            "org.springframework.ai.watsonx.api.testOptions": "org.springframework.ai.watsonx.api.testOptions",
            "org.springframework.ai.watsonx.api.testOptionsWithAdditionalParamsOneByOn": "org.springframework.ai.watsonx.api.testOptionsWithAdditionalParamsOneByOn",
            "org.springframework.ai.watsonx.api.testOptionsWithAdditionalParamsM": "org.springframework.ai.watsonx.api.testOptionsWithAdditionalParamsM",
            "org.springframework.ai.watsonx.api.testFilterOut": "org.springframework.ai.watsonx.api.testFilterOut"
        },
        "package": "package org.springframework.ai.watsonx.api;",
        "property_declarations": [],
        "functions": [
            {
                "name": "testOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "WatsonxAiChatOptions options = WatsonxAiChatOptions.builder()\n\t\t\t.withDecodingMethod(\"sample\")\n\t\t\t.withTemperature(1.2f)\n\t\t\t.withTopK(20)\n\t\t\t.withTopP(0.5f)\n\t\t\t.withMaxNewTokens(100)\n\t\t\t.withMinNewTokens(20)\n\t\t\t.withStopSequences(List.of(\"\\n\\n\\n\"))\n\t\t\t.withRepetitionPenalty(1.1f)\n\t\t\t.withRandomSeed(4)\n\t\t\t.build();\n\n\t\tvar optionsMap = options.toMap();\n\n\t\tassertThat(optionsMap).containsEntry(\"decoding_method\", \"sample\");\n\t\tassertThat(optionsMap).containsEntry(\"temperature\", 1.2);\n\t\tassertThat(optionsMap).containsEntry(\"top_k\", 20);\n\t\tassertThat(optionsMap).containsEntry(\"top_p\", 0.5);\n\t\tassertThat(optionsMap).containsEntry(\"max_new_tokens\", 100);\n\t\tassertThat(optionsMap).containsEntry(\"min_new_tokens\", 20);\n\t\tassertThat(optionsMap).containsEntry(\"stop_sequences\", List.of(\"\\n\\n\\n\"));\n\t\tassertThat(optionsMap).containsEntry(\"repetition_penalty\", 1.1);\n\t\tassertThat(optionsMap).containsEntry(\"random_seed\", 4);",
                "is_abstract": "",
                "class_name": "WatsonxAiChatOptionTest",
                "annotations": []
            },
            {
                "name": "testOptionsWithAdditionalParamsOneByOne",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "WatsonxAiChatOptions options = WatsonxAiChatOptions.builder()\n\t\t\t.withDecodingMethod(\"sample\")\n\t\t\t.withTemperature(1.2f)\n\t\t\t.withTopK(20)\n\t\t\t.withTopP(0.5f)\n\t\t\t.withMaxNewTokens(100)\n\t\t\t.withMinNewTokens(20)\n\t\t\t.withStopSequences(List.of(\"\\n\\n\\n\"))\n\t\t\t.withRepetitionPenalty(1.1f)\n\t\t\t.withRandomSeed(4)\n\t\t\t.withAdditionalProperty(\"HAP\", true)\n\t\t\t.withAdditionalProperty(\"typicalP\", 0.5f)\n\t\t\t.build();\n\n\t\tvar optionsMap = options.toMap();\n\n\t\tassertThat(optionsMap).containsEntry(\"decoding_method\", \"sample\");\n\t\tassertThat(optionsMap).containsEntry(\"temperature\", 1.2);\n\t\tassertThat(optionsMap).containsEntry(\"top_k\", 20);\n\t\tassertThat(optionsMap).containsEntry(\"top_p\", 0.5);\n\t\tassertThat(optionsMap).containsEntry(\"max_new_tokens\", 100);\n\t\tassertThat(optionsMap).containsEntry(\"min_new_tokens\", 20);\n\t\tassertThat(optionsMap).containsEntry(\"stop_sequences\", List.of(\"\\n\\n\\n\"));\n\t\tassertThat(optionsMap).containsEntry(\"repetition_penalty\", 1.1);\n\t\tassertThat(optionsMap).containsEntry(\"random_seed\", 4);\n\t\tassertThat(optionsMap).containsEntry(\"hap\", true);\n\t\tassertThat(optionsMap).containsEntry(\"typical_p\", 0.5);",
                "is_abstract": "",
                "class_name": "WatsonxAiChatOptionTest",
                "annotations": []
            },
            {
                "name": "testOptionsWithAdditionalParamsMap",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "WatsonxAiChatOptions options = WatsonxAiChatOptions.builder()\n\t\t\t.withDecodingMethod(\"sample\")\n\t\t\t.withTemperature(1.2f)\n\t\t\t.withTopK(20)\n\t\t\t.withTopP(0.5f)\n\t\t\t.withMaxNewTokens(100)\n\t\t\t.withMinNewTokens(20)\n\t\t\t.withStopSequences(List.of(\"\\n\\n\\n\"))\n\t\t\t.withRepetitionPenalty(1.1f)\n\t\t\t.withRandomSeed(4)\n\t\t\t.withAdditionalProperties(Map.of(\"HAP\", true, \"typicalP\", 0.5f, \"test_value\", \"test\"))\n\t\t\t.build();\n\n\t\tvar optionsMap = options.toMap();\n\n\t\tassertThat(optionsMap).containsEntry(\"decoding_method\", \"sample\");\n\t\tassertThat(optionsMap).containsEntry(\"temperature\", 1.2);\n\t\tassertThat(optionsMap).containsEntry(\"top_k\", 20);\n\t\tassertThat(optionsMap).containsEntry(\"top_p\", 0.5);\n\t\tassertThat(optionsMap).containsEntry(\"max_new_tokens\", 100);\n\t\tassertThat(optionsMap).containsEntry(\"min_new_tokens\", 20);\n\t\tassertThat(optionsMap).containsEntry(\"stop_sequences\", List.of(\"\\n\\n\\n\"));\n\t\tassertThat(optionsMap).containsEntry(\"repetition_penalty\", 1.1);\n\t\tassertThat(optionsMap).containsEntry(\"random_seed\", 4);\n\t\tassertThat(optionsMap).containsEntry(\"hap\", true);\n\t\tassertThat(optionsMap).containsEntry(\"typical_p\", 0.5);\n\t\tassertThat(optionsMap).containsEntry(\"test_value\", \"test\");",
                "is_abstract": "",
                "class_name": "WatsonxAiChatOptionTest",
                "annotations": []
            },
            {
                "name": "testFilterOut",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "WatsonxAiChatOptions options = WatsonxAiChatOptions.builder().withModel(\"google/flan-ul2\").build();\n\t\tvar mappedOptions = WatsonxAiChatOptions.filterNonSupportedFields(options.toMap());\n\t\tassertThat(mappedOptions).doesNotContainEntry(\"model\", \"google/flan-ul2\");",
                "is_abstract": "",
                "class_name": "WatsonxAiChatOptionTest",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-watsonx-ai/src/test/java/org/springframework/ai/watsonx/aot/WatsonxAiRuntimeHintsTest.java",
        "class_names": [
            "WatsonxAiRuntimeHintsTest"
        ],
        "imports": "import org.springframework.ai.watsonx.WatsonxAiChatOptions;\nimport org.springframework.ai.watsonx.api.WatsonxAiApi;\nimport org.springframework.aot.hint.RuntimeHints;\nimport static org.assertj.core.api.AssertionsForClassTypes.assertThat;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.aot.hint.TypeReference;\nimport java.util.Set;\nimport static org.springframework.ai.aot.AiRuntimeHints.findJsonAnnotatedClassesInPackage;\nimport static org.springframework.aot.hint.predicate.RuntimeHintsPredicates.reflection;",
        "package_import_paths": {
            "org.springframework.ai.watsonx.aot.WatsonxAiRuntimeHintsTest": "org.springframework.ai.watsonx.aot.WatsonxAiRuntimeHintsTest",
            "org.springframework.ai.watsonx.aot.registerHints": "org.springframework.ai.watsonx.aot.registerHints"
        },
        "package": "package org.springframework.ai.watsonx.aot;",
        "property_declarations": [],
        "functions": [
            {
                "name": "registerHints",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "RuntimeHints runtimeHints = new RuntimeHints();\n\t\tWatsonxAiRuntimeHints watsonxAIRuntimeHintsTest = new WatsonxAiRuntimeHints();\n\t\twatsonxAIRuntimeHintsTest.registerHints(runtimeHints, null);\n\n\t\tSet<TypeReference> jsonAnnotatedClasses = findJsonAnnotatedClassesInPackage(WatsonxAiApi.class);\n\t\tfor (TypeReference jsonAnnotatedClass : jsonAnnotatedClasses) {\n\t\t\tassertThat(runtimeHints).matches(reflection().onType(jsonAnnotatedClass));\n\t\t}\n\n\t\tjsonAnnotatedClasses = findJsonAnnotatedClassesInPackage(WatsonxAiChatOptions.class);\n\t\tfor (TypeReference jsonAnnotatedClass : jsonAnnotatedClasses) {\n\t\t\tassertThat(runtimeHints).matches(reflection().onType(jsonAnnotatedClass));\n\t\t}",
                "is_abstract": "",
                "class_name": "WatsonxAiRuntimeHintsTest",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-watsonx-ai/src/main/java/org/springframework/ai/watsonx/WatsonxAiChatClient.java",
        "class_names": [
            "WatsonxAiChatClient"
        ],
        "imports": "import org.springframework.ai.watsonx.api.WatsonxAiRequest;\nimport org.springframework.ai.chat.prompt.Prompt;\nimport org.springframework.ai.watsonx.api.WatsonxAiResponse;\nimport java.util.List;\nimport org.springframework.ai.chat.Generation;\nimport org.springframework.ai.chat.ChatClient;\nimport reactor.core.publisher.Flux;\nimport org.springframework.ai.watsonx.api.WatsonxAiApi;\nimport org.springframework.util.Assert;\nimport java.util.Map;\nimport org.springframework.ai.watsonx.utils.MessageToPromptConverter;\nimport org.springframework.ai.model.ModelOptionsUtils;\nimport org.springframework.ai.chat.prompt.ChatOptions;\nimport org.springframework.ai.chat.StreamingChatClient;\nimport org.springframework.ai.chat.ChatResponse;\nimport org.springframework.ai.chat.metadata.ChatGenerationMetadata;",
        "package_import_paths": {
            "org.springframework.ai.watsonx.WatsonxAiChatClient": "org.springframework.ai.watsonx.WatsonxAiChatClient",
            "org.springframework.ai.watsonx.call": "org.springframework.ai.watsonx.call",
            "org.springframework.ai.watsonx.stream": "org.springframework.ai.watsonx.stream",
            "org.springframework.ai.watsonx.request": "org.springframework.ai.watsonx.request",
            "org.springframework.ai.watsonx.watsonxAiApi": "org.springframework.ai.watsonx.watsonxAiApi",
            "org.springframework.ai.watsonx.defaultOptions": "org.springframework.ai.watsonx.defaultOptions"
        },
        "package": "package org.springframework.ai.watsonx;",
        "property_declarations": [
            "private final WatsonxAiChatOptions defaultOptions;",
            "private final WatsonxAiApi watsonxAiApi;"
        ],
        "functions": [
            {
                "name": "call",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "WatsonxAiRequest request = request(prompt);\n\n\t\tWatsonxAiResponse response = this.watsonxAiApi.generate(request).getBody();\n\t\tvar generator = new Generation(response.results().get(0).generatedText());\n\n\t\tgenerator = generator.withGenerationMetadata(\n\t\t\t\tChatGenerationMetadata.from(response.results().get(0).stopReason(), response.system()));\n\n\t\treturn new ChatResponse(List.of(generator));",
                "is_abstract": "",
                "class_name": "WatsonxAiChatClient",
                "annotations": []
            },
            {
                "name": "stream",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "WatsonxAiRequest request = request(prompt);\n\n\t\tFlux<WatsonxAiResponse> response = this.watsonxAiApi.generateStreaming(request);\n\n\t\treturn response.map(chunk -> {\n\t\t\tGeneration generation = new Generation(chunk.results().get(0).generatedText());\n\t\t\tif (chunk.system() != null) {\n\t\t\t\tgeneration = generation.withGenerationMetadata(\n\t\t\t\t\t\tChatGenerationMetadata.from(chunk.results().get(0).stopReason(), chunk.system()));\n\t\t\t}\n\t\t\treturn new ChatResponse(List.of(generation));\n\t\t});",
                "is_abstract": "",
                "class_name": "WatsonxAiChatClient",
                "annotations": []
            },
            {
                "name": "request",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "WatsonxAiChatOptions options = WatsonxAiChatOptions.builder().build();\n\n\t\tif (this.defaultOptions != null) {\n\t\t\toptions = ModelOptionsUtils.merge(options, this.defaultOptions, WatsonxAiChatOptions.class);\n\t\t}\n\n\t\tif (prompt.getOptions() != null) {\n\t\t\tif (prompt.getOptions() instanceof WatsonxAiChatOptions runtimeOptions) {\n\t\t\t\toptions = ModelOptionsUtils.merge(runtimeOptions, options, WatsonxAiChatOptions.class);\n\t\t\t}\n\t\t\telse if (prompt.getOptions() instanceof ChatOptions runtimeOptions) {\n\t\t\t\tvar updatedRuntimeOptions = ModelOptionsUtils.copyToTarget(runtimeOptions, ChatOptions.class,\n\t\t\t\t\t\tWatsonxAiChatOptions.class);\n\n\t\t\t\toptions = ModelOptionsUtils.merge(updatedRuntimeOptions, options, WatsonxAiChatOptions.class);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new IllegalArgumentException(\"Prompt options are not of type ChatOptions: \"\n\t\t\t\t\t\t+ prompt.getOptions().getClass().getSimpleName());\n\t\t\t}\n\t\t}\n\n\t\tMap<String, Object> parameters = options.toMap();\n\n\t\tfinal String convertedPrompt = MessageToPromptConverter.create()\n\t\t\t.withAssistantPrompt(\"\")\n\t\t\t.withHumanPrompt(\"\")\n\t\t\t.toPrompt(prompt.getInstructions());\n\n\t\treturn WatsonxAiRequest.builder(convertedPrompt).withParameters(parameters).build();",
                "is_abstract": "",
                "class_name": "WatsonxAiChatClient",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-watsonx-ai/src/main/java/org/springframework/ai/watsonx/WatsonxAiChatOptions.java",
        "class_names": [
            "Builder",
            "WatsonxAiChatOptions"
        ],
        "imports": "import java.util.stream.Collectors;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport java.util.List;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.annotation.JsonAnyGetter;\nimport java.util.Map;\nimport java.util.HashMap;\nimport com.fasterxml.jackson.annotation.JsonIgnore;\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport org.springframework.ai.chat.prompt.ChatOptions;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport com.fasterxml.jackson.annotation.JsonAnySetter;",
        "package_import_paths": {
            "org.springframework.ai.watsonx.WatsonxAiChatOptions": "org.springframework.ai.watsonx.WatsonxAiChatOptions",
            "org.springframework.ai.watsonx.Builder": "org.springframework.ai.watsonx.Builder",
            "org.springframework.ai.watsonx.getTemperatur": "org.springframework.ai.watsonx.getTemperatur",
            "org.springframework.ai.watsonx.setTemperatur": "org.springframework.ai.watsonx.setTemperatur",
            "org.springframework.ai.watsonx.getTopP": "org.springframework.ai.watsonx.getTopP",
            "org.springframework.ai.watsonx.setTopP": "org.springframework.ai.watsonx.setTopP",
            "org.springframework.ai.watsonx.getTopK": "org.springframework.ai.watsonx.getTopK",
            "org.springframework.ai.watsonx.setTopK": "org.springframework.ai.watsonx.setTopK",
            "org.springframework.ai.watsonx.getDecodingMethod": "org.springframework.ai.watsonx.getDecodingMethod",
            "org.springframework.ai.watsonx.setDecodingMethod": "org.springframework.ai.watsonx.setDecodingMethod",
            "org.springframework.ai.watsonx.getMaxNewTokens": "org.springframework.ai.watsonx.getMaxNewTokens",
            "org.springframework.ai.watsonx.setMaxNewTokens": "org.springframework.ai.watsonx.setMaxNewTokens",
            "org.springframework.ai.watsonx.getMinNewTokens": "org.springframework.ai.watsonx.getMinNewTokens",
            "org.springframework.ai.watsonx.setMinNewTokens": "org.springframework.ai.watsonx.setMinNewTokens",
            "org.springframework.ai.watsonx.getStopSequences": "org.springframework.ai.watsonx.getStopSequences",
            "org.springframework.ai.watsonx.setStopSequences": "org.springframework.ai.watsonx.setStopSequences",
            "org.springframework.ai.watsonx.getRepetitionPenalty": "org.springframework.ai.watsonx.getRepetitionPenalty",
            "org.springframework.ai.watsonx.setRepetitionPenalty": "org.springframework.ai.watsonx.setRepetitionPenalty",
            "org.springframework.ai.watsonx.getRandomSeed": "org.springframework.ai.watsonx.getRandomSeed",
            "org.springframework.ai.watsonx.setRandomSeed": "org.springframework.ai.watsonx.setRandomSeed",
            "org.springframework.ai.watsonx.getModel": "org.springframework.ai.watsonx.getModel",
            "org.springframework.ai.watsonx.setModel": "org.springframework.ai.watsonx.setModel",
            "org.springframework.ai.watsonx.getAdditionalProperties": "org.springframework.ai.watsonx.getAdditionalProperties",
            "org.springframework.ai.watsonx.addAdditionalProperty": "org.springframework.ai.watsonx.addAdditionalProperty",
            "org.springframework.ai.watsonx.builder": "org.springframework.ai.watsonx.builder",
            "org.springframework.ai.watsonx.withTemperatur": "org.springframework.ai.watsonx.withTemperatur",
            "org.springframework.ai.watsonx.withTopP": "org.springframework.ai.watsonx.withTopP",
            "org.springframework.ai.watsonx.withTopK": "org.springframework.ai.watsonx.withTopK",
            "org.springframework.ai.watsonx.withDecodingMethod": "org.springframework.ai.watsonx.withDecodingMethod",
            "org.springframework.ai.watsonx.withMaxNewTokens": "org.springframework.ai.watsonx.withMaxNewTokens",
            "org.springframework.ai.watsonx.withMinNewTokens": "org.springframework.ai.watsonx.withMinNewTokens",
            "org.springframework.ai.watsonx.withStopSequences": "org.springframework.ai.watsonx.withStopSequences",
            "org.springframework.ai.watsonx.withRepetitionPenalty": "org.springframework.ai.watsonx.withRepetitionPenalty",
            "org.springframework.ai.watsonx.withRandomSeed": "org.springframework.ai.watsonx.withRandomSeed",
            "org.springframework.ai.watsonx.withModel": "org.springframework.ai.watsonx.withModel",
            "org.springframework.ai.watsonx.withAdditionalProperty": "org.springframework.ai.watsonx.withAdditionalProperty",
            "org.springframework.ai.watsonx.withAdditionalProperties": "org.springframework.ai.watsonx.withAdditionalProperties",
            "org.springframework.ai.watsonx.build": "org.springframework.ai.watsonx.build",
            "org.springframework.ai.watsonx.toM": "org.springframework.ai.watsonx.toM",
            "org.springframework.ai.watsonx.filterNonSupportedFields": "org.springframework.ai.watsonx.filterNonSupportedFields",
            "org.springframework.ai.watsonx.toSnakeCas": "org.springframework.ai.watsonx.toSnakeCas",
            "org.springframework.ai.watsonx.temperatur": "org.springframework.ai.watsonx.temperatur",
            "org.springframework.ai.watsonx.topP": "org.springframework.ai.watsonx.topP",
            "org.springframework.ai.watsonx.topK": "org.springframework.ai.watsonx.topK",
            "org.springframework.ai.watsonx.decodingMethod": "org.springframework.ai.watsonx.decodingMethod",
            "org.springframework.ai.watsonx.maxNewTokens": "org.springframework.ai.watsonx.maxNewTokens",
            "org.springframework.ai.watsonx.minNewTokens": "org.springframework.ai.watsonx.minNewTokens",
            "org.springframework.ai.watsonx.stopSequences": "org.springframework.ai.watsonx.stopSequences",
            "org.springframework.ai.watsonx.repetitionPenalty": "org.springframework.ai.watsonx.repetitionPenalty",
            "org.springframework.ai.watsonx.randomSeed": "org.springframework.ai.watsonx.randomSeed",
            "org.springframework.ai.watsonx.model": "org.springframework.ai.watsonx.model",
            "org.springframework.ai.watsonx.additional": "org.springframework.ai.watsonx.additional",
            "org.springframework.ai.watsonx.privat": "org.springframework.ai.watsonx.privat",
            "org.springframework.ai.watsonx.options": "org.springframework.ai.watsonx.options"
        },
        "package": "package org.springframework.ai.watsonx;",
        "property_declarations": [
            "@JsonProperty(\"decoding_method\") private String decodingMethod;",
            "@JsonProperty(\"max_new_tokens\") private Integer maxNewTokens;",
            "WatsonxAiChatOptions options = new WatsonxAiChatOptions();",
            "@JsonProperty(\"top_p\") private Float topP;",
            "@JsonProperty(\"top_k\") private Integer topK;",
            "@JsonProperty(\"random_seed\") private Integer randomSeed;",
            "@JsonProperty(\"additional\")\n    private Map<String, Object> additional = new HashMap<>();",
            "@JsonIgnore\n    private ObjectMapper mapper = new ObjectMapper();",
            "@JsonProperty(\"stop_sequences\") private List<String> stopSequences;",
            "@JsonProperty(\"temperature\") private Float temperature;",
            "@JsonProperty(\"model\") private String model;",
            "@JsonProperty(\"min_new_tokens\") private Integer minNewTokens;",
            "@JsonProperty(\"repetition_penalty\") private Float repetitionPenalty;"
        ],
        "functions": [
            {
                "name": "getTemperature",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return temperature;",
                "is_abstract": "",
                "class_name": "WatsonxAiChatOptions",
                "annotations": []
            },
            {
                "name": "setTemperature",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.temperature = temperature;",
                "is_abstract": "",
                "class_name": "WatsonxAiChatOptions",
                "annotations": []
            },
            {
                "name": "getTopP",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return topP;",
                "is_abstract": "",
                "class_name": "WatsonxAiChatOptions",
                "annotations": []
            },
            {
                "name": "setTopP",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.topP = topP;",
                "is_abstract": "",
                "class_name": "WatsonxAiChatOptions",
                "annotations": []
            },
            {
                "name": "getTopK",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return topK;",
                "is_abstract": "",
                "class_name": "WatsonxAiChatOptions",
                "annotations": []
            },
            {
                "name": "setTopK",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.topK = topK;",
                "is_abstract": "",
                "class_name": "WatsonxAiChatOptions",
                "annotations": []
            },
            {
                "name": "getDecodingMethod",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return decodingMethod;",
                "is_abstract": "",
                "class_name": "WatsonxAiChatOptions",
                "annotations": []
            },
            {
                "name": "setDecodingMethod",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.decodingMethod = decodingMethod;",
                "is_abstract": "",
                "class_name": "WatsonxAiChatOptions",
                "annotations": []
            },
            {
                "name": "getMaxNewTokens",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return maxNewTokens;",
                "is_abstract": "",
                "class_name": "WatsonxAiChatOptions",
                "annotations": []
            },
            {
                "name": "setMaxNewTokens",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.maxNewTokens = maxNewTokens;",
                "is_abstract": "",
                "class_name": "WatsonxAiChatOptions",
                "annotations": []
            },
            {
                "name": "getMinNewTokens",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return minNewTokens;",
                "is_abstract": "",
                "class_name": "WatsonxAiChatOptions",
                "annotations": []
            },
            {
                "name": "setMinNewTokens",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.minNewTokens = minNewTokens;",
                "is_abstract": "",
                "class_name": "WatsonxAiChatOptions",
                "annotations": []
            },
            {
                "name": "getStopSequences",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return stopSequences;",
                "is_abstract": "",
                "class_name": "WatsonxAiChatOptions",
                "annotations": []
            },
            {
                "name": "setStopSequences",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.stopSequences = stopSequences;",
                "is_abstract": "",
                "class_name": "WatsonxAiChatOptions",
                "annotations": []
            },
            {
                "name": "getRepetitionPenalty",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return repetitionPenalty;",
                "is_abstract": "",
                "class_name": "WatsonxAiChatOptions",
                "annotations": []
            },
            {
                "name": "setRepetitionPenalty",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.repetitionPenalty = repetitionPenalty;",
                "is_abstract": "",
                "class_name": "WatsonxAiChatOptions",
                "annotations": []
            },
            {
                "name": "getRandomSeed",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return randomSeed;",
                "is_abstract": "",
                "class_name": "WatsonxAiChatOptions",
                "annotations": []
            },
            {
                "name": "setRandomSeed",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.randomSeed = randomSeed;",
                "is_abstract": "",
                "class_name": "WatsonxAiChatOptions",
                "annotations": []
            },
            {
                "name": "getModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return model;",
                "is_abstract": "",
                "class_name": "WatsonxAiChatOptions",
                "annotations": []
            },
            {
                "name": "setModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.model = model;",
                "is_abstract": "",
                "class_name": "WatsonxAiChatOptions",
                "annotations": []
            },
            {
                "name": "getAdditionalProperties",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return additional.entrySet().stream()\n                .collect(Collectors.toMap(\n                        entry -> toSnakeCase(entry.getKey()),\n                        Map.Entry::getValue\n                ));",
                "is_abstract": "",
                "class_name": "WatsonxAiChatOptions",
                "annotations": []
            },
            {
                "name": "addAdditionalProperty",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "additional.put(key, value);",
                "is_abstract": "",
                "class_name": "WatsonxAiChatOptions",
                "annotations": []
            },
            {
                "name": "builder",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Builder();",
                "is_abstract": "",
                "class_name": "WatsonxAiChatOptions",
                "annotations": []
            },
            {
                "name": "withTemperature",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.temperature = temperature;\n            return this;",
                "is_abstract": "",
                "class_name": "WatsonxAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withTopP",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.topP = topP;\n            return this;",
                "is_abstract": "",
                "class_name": "WatsonxAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withTopK",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.topK = topK;\n            return this;",
                "is_abstract": "",
                "class_name": "WatsonxAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withDecodingMethod",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.decodingMethod = decodingMethod;\n            return this;",
                "is_abstract": "",
                "class_name": "WatsonxAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withMaxNewTokens",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.maxNewTokens = maxNewTokens;\n            return this;",
                "is_abstract": "",
                "class_name": "WatsonxAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withMinNewTokens",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.minNewTokens = minNewTokens;\n            return this;",
                "is_abstract": "",
                "class_name": "WatsonxAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withStopSequences",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.stopSequences = stopSequences;\n            return this;",
                "is_abstract": "",
                "class_name": "WatsonxAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withRepetitionPenalty",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.repetitionPenalty = repetitionPenalty;\n            return this;",
                "is_abstract": "",
                "class_name": "WatsonxAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withRandomSeed",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.randomSeed = randomSeed;\n            return this;",
                "is_abstract": "",
                "class_name": "WatsonxAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.model = model;\n            return this;",
                "is_abstract": "",
                "class_name": "WatsonxAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withAdditionalProperty",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.additional.put(key, value);\n            return this;",
                "is_abstract": "",
                "class_name": "WatsonxAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withAdditionalProperties",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.additional.putAll(properties);\n            return this;",
                "is_abstract": "",
                "class_name": "WatsonxAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "build",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.options;",
                "is_abstract": "",
                "class_name": "WatsonxAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "toMap",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "try {\n            var json = mapper.writeValueAsString(this);\n            var map = mapper.readValue(json, new TypeReference<Map<String, Object>>() {});\n            map.remove(\"additional\");\n\n            return map;\n        }\n        catch (JsonProcessingException e) {\n            throw new RuntimeException(e);\n        }",
                "is_abstract": "",
                "class_name": "WatsonxAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "filterNonSupportedFields",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return options.entrySet().stream()\n                .filter(e -> !e.getKey().equals(\"model\"))\n                .filter(e -> e.getValue() != null)\n                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));",
                "is_abstract": "",
                "class_name": "WatsonxAiChatOptions Builder",
                "annotations": []
            },
            {
                "name": "toSnakeCase",
                "parameters": [
                    ""
                ],
                "return_type": "null",
                "body": "return input != null ? input.replaceAll(\"([a-z])([A-Z]+)\", \"$1_$2\").toLowerCase() : null;",
                "is_abstract": "",
                "class_name": "WatsonxAiChatOptions Builder",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-watsonx-ai/src/main/java/org/springframework/ai/watsonx/utils/MessageToPromptConverter.java",
        "class_names": [
            "MessageToPromptConverter"
        ],
        "imports": "import java.util.stream.Collectors;\nimport java.util.List;\nimport org.springframework.ai.chat.messages.Message;\nimport org.springframework.ai.chat.messages.MessageType;",
        "package_import_paths": {
            "org.springframework.ai.watsonx.utils.MessageToPromptConverter": "org.springframework.ai.watsonx.utils.MessageToPromptConverter",
            "org.springframework.ai.watsonx.utils.creat": "org.springframework.ai.watsonx.utils.creat",
            "org.springframework.ai.watsonx.utils.withHumanPrompt": "org.springframework.ai.watsonx.utils.withHumanPrompt",
            "org.springframework.ai.watsonx.utils.withAssistantPrompt": "org.springframework.ai.watsonx.utils.withAssistantPrompt",
            "org.springframework.ai.watsonx.utils.toPrompt": "org.springframework.ai.watsonx.utils.toPrompt",
            "org.springframework.ai.watsonx.utils.messageToStrin": "org.springframework.ai.watsonx.utils.messageToStrin",
            "org.springframework.ai.watsonx.utils.HUMAN_PROMPT": "org.springframework.ai.watsonx.utils.HUMAN_PROMPT",
            "org.springframework.ai.watsonx.utils.ASSISTANT_PROMPT": "org.springframework.ai.watsonx.utils.ASSISTANT_PROMPT",
            "org.springframework.ai.watsonx.utils.TOOL_EXECUTION_NOT_SUPPORTED_FOR_WAI_MODELS": "org.springframework.ai.watsonx.utils.TOOL_EXECUTION_NOT_SUPPORTED_FOR_WAI_MODELS",
            "org.springframework.ai.watsonx.utils.humanPrompt": "org.springframework.ai.watsonx.utils.humanPrompt",
            "org.springframework.ai.watsonx.utils.assistantPrompt": "org.springframework.ai.watsonx.utils.assistantPrompt"
        },
        "package": "package org.springframework.ai.watsonx.utils;",
        "property_declarations": [
            "private String assistantPrompt = ASSISTANT_PROMPT;",
            "public static final String TOOL_EXECUTION_NOT_SUPPORTED_FOR_WAI_MODELS = \"Tool execution results are not supported for watsonx.ai models\";",
            "private static final String ASSISTANT_PROMPT = \"Assistant: \";",
            "private String humanPrompt = HUMAN_PROMPT;",
            "private static final String HUMAN_PROMPT = \"Human: \";"
        ],
        "functions": [
            {
                "name": "create",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new MessageToPromptConverter();",
                "is_abstract": "",
                "class_name": "MessageToPromptConverter",
                "annotations": []
            },
            {
                "name": "withHumanPrompt",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.humanPrompt = humanPrompt;\n        return this;",
                "is_abstract": "",
                "class_name": "MessageToPromptConverter",
                "annotations": []
            },
            {
                "name": "withAssistantPrompt",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.assistantPrompt = assistantPrompt;\n        return this;",
                "is_abstract": "",
                "class_name": "MessageToPromptConverter",
                "annotations": []
            },
            {
                "name": "toPrompt",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "final String systemMessages = messages.stream()\n                .filter(message -> message.getMessageType() == MessageType.SYSTEM)\n                .map(Message::getContent)\n                .collect(Collectors.joining(\"\\n\"));\n\n        final String userMessages = messages.stream()\n                .filter(message -> message.getMessageType() == MessageType.USER\n                        || message.getMessageType() == MessageType.ASSISTANT)\n                .map(this::messageToString)\n                .collect(Collectors.joining(\"\\n\"));\n\n        return String.format(\"%s%n%n%s%n%s\", systemMessages, userMessages, assistantPrompt).trim();",
                "is_abstract": "",
                "class_name": "MessageToPromptConverter",
                "annotations": []
            },
            {
                "name": "messageToString",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "switch (message.getMessageType()) {\n            case SYSTEM:\n                return message.getContent();\n            case USER:\n                return humanPrompt + message.getContent();\n            case ASSISTANT:\n                return assistantPrompt + message.getContent();\n            case FUNCTION:\n                throw new IllegalArgumentException(TOOL_EXECUTION_NOT_SUPPORTED_FOR_WAI_MODELS);\n        }\n\n        throw new IllegalArgumentException(\"Unknown message type: \" + message.getMessageType());",
                "is_abstract": "",
                "class_name": "MessageToPromptConverter",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-watsonx-ai/src/main/java/org/springframework/ai/watsonx/api/WatsonxAiApi.java",
        "class_names": [
            "WatsonxAiApi"
        ],
        "imports": "import org.springframework.ai.retry.RetryUtils;\nimport java.util.List;\nimport org.springframework.util.Assert;\nimport reactor.core.publisher.Flux;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.reactive.function.client.WebClient;\nimport org.apache.commons.logging.Log;\nimport java.util.Map;\nimport org.apache.commons.logging.LogFactory;\nimport java.util.function.Consumer;\nimport com.ibm.cloud.sdk.core.security.IamAuthenticator;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.MediaType;\nimport org.springframework.web.client.RestClient;",
        "package_import_paths": {
            "org.springframework.ai.watsonx.api.WatsonxAiApi": "org.springframework.ai.watsonx.api.WatsonxAiApi",
            "org.springframework.ai.watsonx.api.generat": "org.springframework.ai.watsonx.api.generat",
            "org.springframework.ai.watsonx.api.generateStreamin": "org.springframework.ai.watsonx.api.generateStreamin",
            "org.springframework.ai.watsonx.api.logger": "org.springframework.ai.watsonx.api.logger",
            "org.springframework.ai.watsonx.api.WATSONX_REQUEST_CANNOT_BE_NULL": "org.springframework.ai.watsonx.api.WATSONX_REQUEST_CANNOT_BE_NULL",
            "org.springframework.ai.watsonx.api.restClient": "org.springframework.ai.watsonx.api.restClient",
            "org.springframework.ai.watsonx.api.webClient": "org.springframework.ai.watsonx.api.webClient",
            "org.springframework.ai.watsonx.api.iamAuthenticator": "org.springframework.ai.watsonx.api.iamAuthenticator",
            "org.springframework.ai.watsonx.api.streamEndpoint": "org.springframework.ai.watsonx.api.streamEndpoint",
            "org.springframework.ai.watsonx.api.textEndpoint": "org.springframework.ai.watsonx.api.textEndpoint",
            "org.springframework.ai.watsonx.api.projectId": "org.springframework.ai.watsonx.api.projectId"
        },
        "package": "package org.springframework.ai.watsonx.api;",
        "property_declarations": [
            "private final String streamEndpoint;",
            "private final String textEndpoint;",
            "private final WebClient webClient;",
            "private final RestClient restClient;",
            "private static final Log logger = LogFactory.getLog(WatsonxAiApi.class);",
            "private final IamAuthenticator iamAuthenticator;",
            "private final String projectId;",
            "public static final String WATSONX_REQUEST_CANNOT_BE_NULL = \"Watsonx Request cannot be null\";"
        ],
        "functions": [
            {
                "name": "generate",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(watsonxAiRequest, WATSONX_REQUEST_CANNOT_BE_NULL);\n\n        String bearer = this.iamAuthenticator.requestToken().getAccessToken();\n\n        return this.restClient.post()\n                .uri(this.textEndpoint)\n                .header(HttpHeaders.AUTHORIZATION, \"Bearer \" + bearer)\n                .body(watsonxAiRequest.withProjectId(projectId))\n                .retrieve()\n                .toEntity(WatsonxAiResponse.class);",
                "is_abstract": "",
                "class_name": "WatsonxAiApi",
                "annotations": []
            },
            {
                "name": "generateStreaming",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(watsonxAiRequest, WATSONX_REQUEST_CANNOT_BE_NULL);\n\n        String bearer = this.iamAuthenticator.requestToken().getAccessToken();\n\n        return this.webClient.post()\n                .uri(this.streamEndpoint)\n                .header(HttpHeaders.AUTHORIZATION, \"Bearer \" + bearer)\n                .bodyValue(watsonxAiRequest.withProjectId(this.projectId))\n                .retrieve()\n                .bodyToFlux(WatsonxAiResponse.class)\n                .handle((data, sink) -> {\n                    if (logger.isTraceEnabled()) {\n                        logger.trace(data);\n                    }\n                    sink.next(data);\n                });",
                "is_abstract": "",
                "class_name": "WatsonxAiApi",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-watsonx-ai/src/main/java/org/springframework/ai/watsonx/api/WatsonxAiResults.java",
        "class_names": [],
        "imports": "import com.fasterxml.jackson.annotation.JsonInclude;\nimport com.fasterxml.jackson.annotation.JsonProperty;",
        "package_import_paths": {},
        "package": "package org.springframework.ai.watsonx.api;",
        "property_declarations": [],
        "functions": []
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-watsonx-ai/src/main/java/org/springframework/ai/watsonx/api/WatsonxAiRequest.java",
        "class_names": [
            "Builder",
            "WatsonxAiRequest"
        ],
        "imports": "import org.springframework.ai.watsonx.WatsonxAiChatOptions;\nimport org.springframework.util.Assert;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport java.util.Map;\nimport com.fasterxml.jackson.annotation.JsonProperty;",
        "package_import_paths": {
            "org.springframework.ai.watsonx.api.WatsonxAiRequest": "org.springframework.ai.watsonx.api.WatsonxAiRequest",
            "org.springframework.ai.watsonx.api.Builder": "org.springframework.ai.watsonx.api.Builder",
            "org.springframework.ai.watsonx.api.withModelId": "org.springframework.ai.watsonx.api.withModelId",
            "org.springframework.ai.watsonx.api.withProjectId": "org.springframework.ai.watsonx.api.withProjectId",
            "org.springframework.ai.watsonx.api.getInput": "org.springframework.ai.watsonx.api.getInput",
            "org.springframework.ai.watsonx.api.getParameters": "org.springframework.ai.watsonx.api.getParameters",
            "org.springframework.ai.watsonx.api.getModelId": "org.springframework.ai.watsonx.api.getModelId",
            "org.springframework.ai.watsonx.api.builder": "org.springframework.ai.watsonx.api.builder",
            "org.springframework.ai.watsonx.api.withParameters": "org.springframework.ai.watsonx.api.withParameters",
            "org.springframework.ai.watsonx.api.build": "org.springframework.ai.watsonx.api.build",
            "org.springframework.ai.watsonx.api.input": "org.springframework.ai.watsonx.api.input",
            "org.springframework.ai.watsonx.api.parameters": "org.springframework.ai.watsonx.api.parameters",
            "org.springframework.ai.watsonx.api.modelId": "org.springframework.ai.watsonx.api.modelId",
            "org.springframework.ai.watsonx.api.projectId": "org.springframework.ai.watsonx.api.projectId",
            "org.springframework.ai.watsonx.api.MODEL_PARAMETER_IS_REQUIRED": "org.springframework.ai.watsonx.api.MODEL_PARAMETER_IS_REQUIRED",
            "org.springframework.ai.watsonx.api.model": "org.springframework.ai.watsonx.api.model"
        },
        "package": "package org.springframework.ai.watsonx.api;",
        "property_declarations": [
            "@JsonProperty(\"model_id\")\n    private String modelId = \"\";",
            "@JsonProperty(\"input\")\n    private String input;",
            "private Map<String, Object> parameters;",
            "public static final String MODEL_PARAMETER_IS_REQUIRED = \"Model parameter is required\";",
            "@JsonProperty(\"parameters\")\n    private Map<String, Object> parameters;",
            "private String model = \"\";",
            "private final String input;",
            "@JsonProperty(\"project_id\")\n    private String projectId = \"\";"
        ],
        "functions": [
            {
                "name": "withModelId",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.modelId = modelId;\n        return this;",
                "is_abstract": "",
                "class_name": "WatsonxAiRequest",
                "annotations": []
            },
            {
                "name": "withProjectId",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.projectId = projectId;\n        return this;",
                "is_abstract": "",
                "class_name": "WatsonxAiRequest",
                "annotations": []
            },
            {
                "name": "getInput",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return input;",
                "is_abstract": "",
                "class_name": "WatsonxAiRequest",
                "annotations": []
            },
            {
                "name": "getParameters",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return parameters;",
                "is_abstract": "",
                "class_name": "WatsonxAiRequest",
                "annotations": []
            },
            {
                "name": "getModelId",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return modelId;",
                "is_abstract": "",
                "class_name": "WatsonxAiRequest",
                "annotations": []
            },
            {
                "name": "builder",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Builder(input);",
                "is_abstract": "",
                "class_name": "WatsonxAiRequest",
                "annotations": []
            },
            {
                "name": "withParameters",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(parameters.get(\"model\"), MODEL_PARAMETER_IS_REQUIRED);\n            this.model = parameters.get(\"model\").toString();\n            this.parameters = WatsonxAiChatOptions.filterNonSupportedFields(parameters);\n            return this;",
                "is_abstract": "",
                "class_name": "WatsonxAiRequest Builder",
                "annotations": []
            },
            {
                "name": "build",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new WatsonxAiRequest(input, parameters, model, \"\");",
                "is_abstract": "",
                "class_name": "WatsonxAiRequest Builder",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-watsonx-ai/src/main/java/org/springframework/ai/watsonx/api/WatsonxAiResponse.java",
        "class_names": [],
        "imports": "import java.util.List;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport java.util.Map;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport java.util.Date;",
        "package_import_paths": {},
        "package": "package org.springframework.ai.watsonx.api;",
        "property_declarations": [],
        "functions": []
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-watsonx-ai/src/main/java/org/springframework/ai/watsonx/aot/WatsonxAiRuntimeHints.java",
        "class_names": [
            "WatsonxAiRuntimeHints"
        ],
        "imports": "import org.springframework.ai.watsonx.WatsonxAiChatOptions;\nimport org.springframework.aot.hint.MemberCategory;\nimport org.springframework.ai.watsonx.api.WatsonxAiApi;\nimport org.springframework.aot.hint.RuntimeHints;\nimport org.springframework.aot.hint.RuntimeHintsRegistrar;\nimport static org.springframework.ai.aot.AiRuntimeHints.findJsonAnnotatedClassesInPackage;",
        "package_import_paths": {
            "org.springframework.ai.watsonx.aot.WatsonxAiRuntimeHints": "org.springframework.ai.watsonx.aot.WatsonxAiRuntimeHints",
            "org.springframework.ai.watsonx.aot.registerHints": "org.springframework.ai.watsonx.aot.registerHints"
        },
        "package": "package org.springframework.ai.watsonx.aot;",
        "property_declarations": [],
        "functions": [
            {
                "name": "registerHints",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var mcs = MemberCategory.values();\n\t\tfor (var tr : findJsonAnnotatedClassesInPackage(WatsonxAiApi.class))\n\t\t\thints.reflection().registerType(tr, mcs);\n\n\t\tfor (var tr : findJsonAnnotatedClassesInPackage(WatsonxAiChatOptions.class))\n\t\t\thints.reflection().registerType(tr, mcs);",
                "is_abstract": "",
                "class_name": "WatsonxAiRuntimeHints",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/cohere/BedrockCohereChatCreateRequestTests.java",
        "class_names": [
            "BedrockCohereChatCreateRequestTests"
        ],
        "imports": "import org.springframework.ai.bedrock.cohere.api.CohereChatBedrockApi.CohereChatRequest.LogitBias;\nimport org.springframework.ai.bedrock.cohere.api.CohereChatBedrockApi.CohereChatRequest.ReturnLikelihoods;\nimport org.springframework.ai.chat.prompt.Prompt;\nimport java.util.List;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport software.amazon.awssdk.regions.Region;\nimport org.junit.jupiter.api.Test;\nimport software.amazon.awssdk.auth.credentials.EnvironmentVariableCredentialsProvider;\nimport org.springframework.ai.bedrock.cohere.api.CohereChatBedrockApi.CohereChatRequest.Truncate;\nimport org.springframework.ai.bedrock.cohere.api.CohereChatBedrockApi.CohereChatRequest;\nimport org.springframework.ai.bedrock.cohere.api.CohereChatBedrockApi;\nimport org.springframework.ai.bedrock.cohere.api.CohereChatBedrockApi.CohereChatModel;\nimport java.time.Duration;",
        "package_import_paths": {
            "org.springframework.ai.bedrock.cohere.BedrockCohereChatCreateRequestTests": "org.springframework.ai.bedrock.cohere.BedrockCohereChatCreateRequestTests",
            "org.springframework.ai.bedrock.cohere.createRequestWithChatOptions": "org.springframework.ai.bedrock.cohere.createRequestWithChatOptions",
            "org.springframework.ai.bedrock.cohere.chatApi": "org.springframework.ai.bedrock.cohere.chatApi"
        },
        "package": "package org.springframework.ai.bedrock.cohere;",
        "property_declarations": [
            "private CohereChatBedrockApi chatApi = new CohereChatBedrockApi(CohereChatModel.COHERE_COMMAND_V14.id(),\n\t\t\tEnvironmentVariableCredentialsProvider.create(), Region.US_EAST_1.id(), new ObjectMapper(),\n\t\t\tDuration.ofMinutes(2));"
        ],
        "functions": [
            {
                "name": "createRequestWithChatOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var client = new BedrockCohereChatClient(chatApi,\n\t\t\t\tBedrockCohereChatOptions.builder()\n\t\t\t\t\t.withTemperature(66.6f)\n\t\t\t\t\t.withTopK(66)\n\t\t\t\t\t.withTopP(0.66f)\n\t\t\t\t\t.withMaxTokens(678)\n\t\t\t\t\t.withStopSequences(List.of(\"stop1\", \"stop2\"))\n\t\t\t\t\t.withReturnLikelihoods(ReturnLikelihoods.ALL)\n\t\t\t\t\t.withNumGenerations(3)\n\t\t\t\t\t.withLogitBias(new LogitBias(\"t\", 6.6f))\n\t\t\t\t\t.withTruncate(Truncate.END)\n\t\t\t\t\t.build());\n\n\t\tCohereChatRequest request = client.createRequest(new Prompt(\"Test message content\"), true);\n\n\t\tassertThat(request.prompt()).isNotEmpty();\n\t\tassertThat(request.stream()).isTrue();\n\n\t\tassertThat(request.temperature()).isEqualTo(66.6f);\n\t\tassertThat(request.topK()).isEqualTo(66);\n\t\tassertThat(request.topP()).isEqualTo(0.66f);\n\t\tassertThat(request.maxTokens()).isEqualTo(678);\n\t\tassertThat(request.stopSequences()).containsExactly(\"stop1\", \"stop2\");\n\t\tassertThat(request.returnLikelihoods()).isEqualTo(ReturnLikelihoods.ALL);\n\t\tassertThat(request.numGenerations()).isEqualTo(3);\n\t\tassertThat(request.logitBias()).isEqualTo(new LogitBias(\"t\", 6.6f));\n\t\tassertThat(request.truncate()).isEqualTo(Truncate.END);\n\n\t\trequest = client.createRequest(new Prompt(\"Test message content\",\n\t\t\t\tBedrockCohereChatOptions.builder()\n\t\t\t\t\t.withTemperature(99.9f)\n\t\t\t\t\t.withTopK(99)\n\t\t\t\t\t.withTopP(0.99f)\n\t\t\t\t\t.withMaxTokens(888)\n\t\t\t\t\t.withStopSequences(List.of(\"stop3\", \"stop4\"))\n\t\t\t\t\t.withReturnLikelihoods(ReturnLikelihoods.GENERATION)\n\t\t\t\t\t.withNumGenerations(13)\n\t\t\t\t\t.withLogitBias(new LogitBias(\"t\", 9.9f))\n\t\t\t\t\t.withTruncate(Truncate.START)\n\t\t\t\t\t.build()),\n\t\t\t\tfalse\n\n\t\t);\n\n\t\tassertThat(request.prompt()).isNotEmpty();\n\t\tassertThat(request.stream()).isFalse();\n\n\t\tassertThat(request.temperature()).isEqualTo(99.9f);\n\t\tassertThat(request.topK()).isEqualTo(99);\n\t\tassertThat(request.topP()).isEqualTo(0.99f);\n\t\tassertThat(request.maxTokens()).isEqualTo(888);\n\t\tassertThat(request.stopSequences()).containsExactly(\"stop3\", \"stop4\");\n\t\tassertThat(request.returnLikelihoods()).isEqualTo(ReturnLikelihoods.GENERATION);\n\t\tassertThat(request.numGenerations()).isEqualTo(13);\n\t\tassertThat(request.logitBias()).isEqualTo(new LogitBias(\"t\", 9.9f));\n\t\tassertThat(request.truncate()).isEqualTo(Truncate.START);",
                "is_abstract": "",
                "class_name": "BedrockCohereChatCreateRequestTests",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/cohere/BedrockCohereEmbeddingClientIT.java",
        "class_names": [
            "TestConfiguration",
            "BedrockCohereEmbeddingClientIT"
        ],
        "imports": "import org.springframework.ai.embedding.EmbeddingResponse;\nimport java.util.List;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport software.amazon.awssdk.regions.Region;\nimport org.springframework.ai.bedrock.cohere.api.CohereEmbeddingBedrockApi;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.ai.bedrock.cohere.api.CohereEmbeddingBedrockApi.CohereEmbeddingRequest.InputType;\nimport org.junit.jupiter.api.Test;\nimport software.amazon.awssdk.auth.credentials.EnvironmentVariableCredentialsProvider;\nimport org.springframework.ai.embedding.EmbeddingRequest;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.boot.SpringBootConfiguration;\nimport org.springframework.ai.bedrock.cohere.api.CohereEmbeddingBedrockApi.CohereEmbeddingModel;\nimport java.time.Duration;",
        "package_import_paths": {
            "org.springframework.ai.bedrock.cohere.BedrockCohereEmbeddingClientIT": "org.springframework.ai.bedrock.cohere.BedrockCohereEmbeddingClientIT",
            "org.springframework.ai.bedrock.cohere.TestConfiguration": "org.springframework.ai.bedrock.cohere.TestConfiguration",
            "org.springframework.ai.bedrock.cohere.singleEmbeddin": "org.springframework.ai.bedrock.cohere.singleEmbeddin",
            "org.springframework.ai.bedrock.cohere.batchEmbeddin": "org.springframework.ai.bedrock.cohere.batchEmbeddin",
            "org.springframework.ai.bedrock.cohere.embeddingWthOptions": "org.springframework.ai.bedrock.cohere.embeddingWthOptions",
            "org.springframework.ai.bedrock.cohere.cohereEmbeddingApi": "org.springframework.ai.bedrock.cohere.cohereEmbeddingApi",
            "org.springframework.ai.bedrock.cohere.cohereAiEmbeddin": "org.springframework.ai.bedrock.cohere.cohereAiEmbeddin",
            "org.springframework.ai.bedrock.cohere.privat": "org.springframework.ai.bedrock.cohere.privat"
        },
        "package": "package org.springframework.ai.bedrock.cohere;",
        "property_declarations": [
            "@Autowired\n\tprivate BedrockCohereEmbeddingClient embeddingClient;"
        ],
        "functions": [
            {
                "name": "singleEmbedding",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "assertThat(embeddingClient).isNotNull();\n\t\tEmbeddingResponse embeddingResponse = embeddingClient.embedForResponse(List.of(\"Hello World\"));\n\t\tassertThat(embeddingResponse.getResults()).hasSize(1);\n\t\tassertThat(embeddingResponse.getResults().get(0).getOutput()).isNotEmpty();\n\t\tassertThat(embeddingClient.dimensions()).isEqualTo(1024);",
                "is_abstract": "",
                "class_name": "BedrockCohereEmbeddingClientIT",
                "annotations": []
            },
            {
                "name": "batchEmbedding",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "assertThat(embeddingClient).isNotNull();\n\t\tEmbeddingResponse embeddingResponse = embeddingClient\n\t\t\t.embedForResponse(List.of(\"Hello World\", \"World is big and salvation is near\"));\n\t\tassertThat(embeddingResponse.getResults()).hasSize(2);\n\t\tassertThat(embeddingResponse.getResults().get(0).getOutput()).isNotEmpty();\n\t\tassertThat(embeddingResponse.getResults().get(0).getIndex()).isEqualTo(0);\n\t\tassertThat(embeddingResponse.getResults().get(1).getOutput()).isNotEmpty();\n\t\tassertThat(embeddingResponse.getResults().get(1).getIndex()).isEqualTo(1);\n\n\t\tassertThat(embeddingClient.dimensions()).isEqualTo(1024);",
                "is_abstract": "",
                "class_name": "BedrockCohereEmbeddingClientIT",
                "annotations": []
            },
            {
                "name": "embeddingWthOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "assertThat(embeddingClient).isNotNull();\n\t\tEmbeddingResponse embeddingResponse = embeddingClient\n\t\t\t.call(new EmbeddingRequest(List.of(\"Hello World\", \"World is big and salvation is near\"),\n\t\t\t\t\tBedrockCohereEmbeddingOptions.builder().withInputType(InputType.SEARCH_DOCUMENT).build()));\n\t\tassertThat(embeddingResponse.getResults()).hasSize(2);\n\t\tassertThat(embeddingResponse.getResults().get(0).getOutput()).isNotEmpty();\n\t\tassertThat(embeddingResponse.getResults().get(0).getIndex()).isEqualTo(0);\n\t\tassertThat(embeddingResponse.getResults().get(1).getOutput()).isNotEmpty();\n\t\tassertThat(embeddingResponse.getResults().get(1).getIndex()).isEqualTo(1);\n\n\t\tassertThat(embeddingClient.dimensions()).isEqualTo(1024);",
                "is_abstract": "",
                "class_name": "BedrockCohereEmbeddingClientIT",
                "annotations": []
            },
            {
                "name": "cohereEmbeddingApi",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new CohereEmbeddingBedrockApi(CohereEmbeddingModel.COHERE_EMBED_MULTILINGUAL_V1.id(),\n\t\t\t\t\tEnvironmentVariableCredentialsProvider.create(), Region.US_EAST_1.id(), new ObjectMapper(),\n\t\t\t\t\tDuration.ofMinutes(2));",
                "is_abstract": "",
                "class_name": "BedrockCohereEmbeddingClientIT TestConfiguration",
                "annotations": []
            },
            {
                "name": "cohereAiEmbedding",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new BedrockCohereEmbeddingClient(cohereEmbeddingApi);",
                "is_abstract": "",
                "class_name": "BedrockCohereEmbeddingClientIT TestConfiguration",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/cohere/BedrockCohereChatClientIT.java",
        "class_names": [
            "TestConfiguration",
            "BedrockCohereChatClientIT"
        ],
        "imports": "import java.util.stream.Collectors;\nimport java.util.List;\nimport org.springframework.ai.chat.Generation;\nimport reactor.core.publisher.Flux;\nimport org.springframework.ai.chat.prompt.SystemPromptTemplate;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.core.io.Resource;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.ai.parser.MapOutputParser;\nimport org.springframework.ai.chat.messages.Message;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport software.amazon.awssdk.regions.Region;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport java.util.Map;\nimport org.springframework.ai.parser.BeanOutputParser;\nimport org.springframework.beans.factory.annotation.Value;\nimport java.util.Arrays;\nimport org.springframework.ai.chat.ChatResponse;\nimport java.time.Duration;\nimport org.springframework.ai.chat.messages.UserMessage;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.ai.parser.ListOutputParser;\nimport org.springframework.ai.chat.prompt.PromptTemplate;\nimport org.springframework.ai.chat.messages.AssistantMessage;\nimport org.springframework.ai.bedrock.cohere.api.CohereChatBedrockApi;\nimport org.springframework.boot.SpringBootConfiguration;\nimport org.springframework.ai.chat.prompt.Prompt;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.springframework.core.convert.support.DefaultConversionService;\nimport org.junit.jupiter.api.Test;\nimport software.amazon.awssdk.auth.credentials.EnvironmentVariableCredentialsProvider;\nimport org.springframework.ai.bedrock.cohere.api.CohereChatBedrockApi.CohereChatModel;",
        "package_import_paths": {
            "org.springframework.ai.bedrock.cohere.BedrockCohereChatClientIT": "org.springframework.ai.bedrock.cohere.BedrockCohereChatClientIT",
            "org.springframework.ai.bedrock.cohere.TestConfiguration": "org.springframework.ai.bedrock.cohere.TestConfiguration",
            "org.springframework.ai.bedrock.cohere.multipleStreamAttempts": "org.springframework.ai.bedrock.cohere.multipleStreamAttempts",
            "org.springframework.ai.bedrock.cohere.roleTest": "org.springframework.ai.bedrock.cohere.roleTest",
            "org.springframework.ai.bedrock.cohere.outputParser": "org.springframework.ai.bedrock.cohere.outputParser",
            "org.springframework.ai.bedrock.cohere.mapOutputParser": "org.springframework.ai.bedrock.cohere.mapOutputParser",
            "org.springframework.ai.bedrock.cohere.beanOutputParserRecords": "org.springframework.ai.bedrock.cohere.beanOutputParserRecords",
            "org.springframework.ai.bedrock.cohere.beanStreamOutputParserRecords": "org.springframework.ai.bedrock.cohere.beanStreamOutputParserRecords",
            "org.springframework.ai.bedrock.cohere.cohereApi": "org.springframework.ai.bedrock.cohere.cohereApi",
            "org.springframework.ai.bedrock.cohere.cohereChatClient": "org.springframework.ai.bedrock.cohere.cohereChatClient",
            "org.springframework.ai.bedrock.cohere.privat": "org.springframework.ai.bedrock.cohere.privat",
            "org.springframework.ai.bedrock.cohere.systemResour": "org.springframework.ai.bedrock.cohere.systemResour"
        },
        "package": "package org.springframework.ai.bedrock.cohere;",
        "property_declarations": [
            "@Value(\"classpath:/prompts/system-message.st\")\n\tprivate Resource systemResource;",
            "@Autowired\n\tprivate BedrockCohereChatClient client;"
        ],
        "functions": [
            {
                "name": "multipleStreamAttempts",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Flux<ChatResponse> joke1Stream = client.stream(new Prompt(new UserMessage(\"Tell me a joke?\")));\n\t\tFlux<ChatResponse> joke2Stream = client.stream(new Prompt(new UserMessage(\"Tell me a toy joke?\")));\n\n\t\tString joke1 = joke1Stream.collectList()\n\t\t\t.block()\n\t\t\t.stream()\n\t\t\t.map(ChatResponse::getResults)\n\t\t\t.flatMap(List::stream)\n\t\t\t.map(Generation::getOutput)\n\t\t\t.map(AssistantMessage::getContent)\n\t\t\t.collect(Collectors.joining());\n\t\tString joke2 = joke2Stream.collectList()\n\t\t\t.block()\n\t\t\t.stream()\n\t\t\t.map(ChatResponse::getResults)\n\t\t\t.flatMap(List::stream)\n\t\t\t.map(Generation::getOutput)\n\t\t\t.map(AssistantMessage::getContent)\n\t\t\t.collect(Collectors.joining());\n\n\t\tassertThat(joke1).isNotBlank();\n\t\tassertThat(joke2).isNotBlank();",
                "is_abstract": "",
                "class_name": "BedrockCohereChatClientIT",
                "annotations": []
            },
            {
                "name": "roleTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String request = \"Tell me about 3 famous pirates from the Golden Age of Piracy and why they did.\";\n\t\tString name = \"Bob\";\n\t\tString voice = \"pirate\";\n\t\tUserMessage userMessage = new UserMessage(request);\n\t\tSystemPromptTemplate systemPromptTemplate = new SystemPromptTemplate(systemResource);\n\t\tMessage systemMessage = systemPromptTemplate.createMessage(Map.of(\"name\", name, \"voice\", voice));\n\t\tPrompt prompt = new Prompt(List.of(userMessage, systemMessage));\n\t\tChatResponse response = client.call(prompt);\n\t\tassertThat(response.getResult().getOutput().getContent()).contains(\"Blackbeard\");",
                "is_abstract": "",
                "class_name": "BedrockCohereChatClientIT",
                "annotations": []
            },
            {
                "name": "outputParser",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "DefaultConversionService conversionService = new DefaultConversionService();\n\t\tListOutputParser outputParser = new ListOutputParser(conversionService);\n\n\t\tString format = outputParser.getFormat();\n\t\tString template = \"\"\"\n\t\t\t\tList five {subject}\n\t\t\t\t{format}\n\t\t\t\t\"\"\";\n\t\tPromptTemplate promptTemplate = new PromptTemplate(template,\n\t\t\t\tMap.of(\"subject\", \"ice cream flavors.\", \"format\", format));\n\t\tPrompt prompt = new Prompt(promptTemplate.createMessage());\n\t\tGeneration generation = this.client.call(prompt).getResult();\n\n\t\tList<String> list = outputParser.parse(generation.getOutput().getContent());\n\t\tassertThat(list).hasSize(5);",
                "is_abstract": "",
                "class_name": "BedrockCohereChatClientIT",
                "annotations": []
            },
            {
                "name": "mapOutputParser",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "MapOutputParser outputParser = new MapOutputParser();\n\n\t\tString format = outputParser.getFormat();\n\t\tString template = \"\"\"\n\t\t\t\tRemove Markdown code blocks from the output.\n\t\t\t\tProvide me a List of {subject}\n\t\t\t\t{format}\n\t\t\t\t\"\"\";\n\t\tPromptTemplate promptTemplate = new PromptTemplate(template,\n\t\t\t\tMap.of(\"subject\", \"an array of numbers from 1 to 9 under they key name 'numbers'\", \"format\", format));\n\t\tPrompt prompt = new Prompt(promptTemplate.createMessage());\n\t\tGeneration generation = client.call(prompt).getResult();\n\n\t\tMap<String, Object> result = outputParser.parse(generation.getOutput().getContent());\n\t\tassertThat(result.get(\"numbers\")).isEqualTo(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9));",
                "is_abstract": "",
                "class_name": "BedrockCohereChatClientIT",
                "annotations": []
            },
            {
                "name": "beanOutputParserRecords",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "BeanOutputParser<ActorsFilmsRecord> outputParser = new BeanOutputParser<>(ActorsFilmsRecord.class);\n\n\t\tString format = outputParser.getFormat();\n\t\tString template = \"\"\"\n\t\t\t\tGenerate the filmography of 5 movies for Tom Hanks.\n\t\t\t\t{format}\n\t\t\t\tRemove Markdown code blocks from the output.\n\t\t\t\t\"\"\";\n\t\tPromptTemplate promptTemplate = new PromptTemplate(template, Map.of(\"format\", format));\n\t\tPrompt prompt = new Prompt(promptTemplate.createMessage());\n\t\tGeneration generation = client.call(prompt).getResult();\n\n\t\tActorsFilmsRecord actorsFilms = outputParser.parse(generation.getOutput().getContent());\n\t\tassertThat(actorsFilms.actor()).isEqualTo(\"Tom Hanks\");\n\t\tassertThat(actorsFilms.movies()).hasSize(5);",
                "is_abstract": "",
                "class_name": "BedrockCohereChatClientIT",
                "annotations": []
            },
            {
                "name": "beanStreamOutputParserRecords",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "BeanOutputParser<ActorsFilmsRecord> outputParser = new BeanOutputParser<>(ActorsFilmsRecord.class);\n\n\t\tString format = outputParser.getFormat();\n\t\tString template = \"\"\"\n\t\t\t\tGenerate the filmography of 5 movies for Tom Hanks.\n\t\t\t\t{format}\n\t\t\t\tRemove Markdown code blocks from the output.\n\t\t\t\t\"\"\";\n\t\tPromptTemplate promptTemplate = new PromptTemplate(template, Map.of(\"format\", format));\n\t\tPrompt prompt = new Prompt(promptTemplate.createMessage());\n\n\t\tString generationTextFromStream = client.stream(prompt)\n\t\t\t.collectList()\n\t\t\t.block()\n\t\t\t.stream()\n\t\t\t.map(ChatResponse::getResults)\n\t\t\t.flatMap(List::stream)\n\t\t\t.map(Generation::getOutput)\n\t\t\t.map(AssistantMessage::getContent)\n\t\t\t.collect(Collectors.joining());\n\n\t\tActorsFilmsRecord actorsFilms = outputParser.parse(generationTextFromStream);\n\t\tSystem.out.println(actorsFilms);\n\t\tassertThat(actorsFilms.actor()).isEqualTo(\"Tom Hanks\");\n\t\tassertThat(actorsFilms.movies()).hasSize(5);",
                "is_abstract": "",
                "class_name": "BedrockCohereChatClientIT",
                "annotations": []
            },
            {
                "name": "cohereApi",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new CohereChatBedrockApi(CohereChatModel.COHERE_COMMAND_V14.id(),\n\t\t\t\t\tEnvironmentVariableCredentialsProvider.create(), Region.US_EAST_1.id(), new ObjectMapper(),\n\t\t\t\t\tDuration.ofMinutes(2));",
                "is_abstract": "",
                "class_name": "BedrockCohereChatClientIT TestConfiguration",
                "annotations": []
            },
            {
                "name": "cohereChatClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new BedrockCohereChatClient(cohereApi);",
                "is_abstract": "",
                "class_name": "BedrockCohereChatClientIT TestConfiguration",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/cohere/api/CohereEmbeddingBedrockApiIT.java",
        "class_names": [
            "CohereEmbeddingBedrockApiIT"
        ],
        "imports": "import org.springframework.ai.bedrock.cohere.api.CohereEmbeddingBedrockApi.CohereEmbeddingResponse;\nimport java.util.List;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport software.amazon.awssdk.regions.Region;\nimport org.springframework.ai.bedrock.cohere.api.CohereEmbeddingBedrockApi.CohereEmbeddingRequest;\nimport org.junit.jupiter.api.Test;\nimport software.amazon.awssdk.auth.credentials.EnvironmentVariableCredentialsProvider;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.ai.bedrock.cohere.api.CohereEmbeddingBedrockApi.CohereEmbeddingModel;\nimport java.time.Duration;",
        "package_import_paths": {
            "org.springframework.ai.bedrock.cohere.api.CohereEmbeddingBedrockApiIT": "org.springframework.ai.bedrock.cohere.api.CohereEmbeddingBedrockApiIT",
            "org.springframework.ai.bedrock.cohere.api.embedText": "org.springframework.ai.bedrock.cohere.api.embedText",
            "org.springframework.ai.bedrock.cohere.api.api": "org.springframework.ai.bedrock.cohere.api.api"
        },
        "package": "package org.springframework.ai.bedrock.cohere.api;",
        "property_declarations": [
            "CohereEmbeddingBedrockApi api = new CohereEmbeddingBedrockApi(\n\t\t\tCohereEmbeddingModel.COHERE_EMBED_MULTILINGUAL_V1.id(), EnvironmentVariableCredentialsProvider.create(),\n\t\t\tRegion.US_EAST_1.id(), new ObjectMapper(), Duration.ofMinutes(2));"
        ],
        "functions": [
            {
                "name": "embedText",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "CohereEmbeddingRequest request = new CohereEmbeddingRequest(\n\t\t\t\tList.of(\"I like to eat apples\", \"I like to eat oranges\"),\n\t\t\t\tCohereEmbeddingRequest.InputType.SEARCH_DOCUMENT, CohereEmbeddingRequest.Truncate.NONE);\n\n\t\tCohereEmbeddingResponse response = api.embedding(request);\n\n\t\tassertThat(response).isNotNull();\n\t\tassertThat(response.texts()).isEqualTo(request.texts());\n\t\tassertThat(response.embeddings()).hasSize(2);\n\t\tassertThat(response.embeddings().get(0)).hasSize(1024);",
                "is_abstract": "",
                "class_name": "CohereEmbeddingBedrockApiIT",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/cohere/api/CohereChatBedrockApiIT.java",
        "class_names": [
            "CohereChatBedrockApiIT"
        ],
        "imports": "import org.springframework.ai.bedrock.cohere.api.CohereChatBedrockApi.CohereChatResponse.Generation.FinishReason;\nimport java.util.List;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport software.amazon.awssdk.regions.Region;\nimport reactor.core.publisher.Flux;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.bedrock.cohere.api.CohereChatBedrockApi.CohereChatResponse;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.ai.bedrock.cohere.api.CohereChatBedrockApi.CohereChatRequest;\nimport org.springframework.ai.bedrock.cohere.api.CohereChatBedrockApi.CohereChatRequest.Truncate;\nimport static org.assertj.core.api.Assertions.assertThatThrownBy;\nimport org.springframework.ai.bedrock.cohere.api.CohereChatBedrockApi.CohereChatModel;\nimport java.time.Duration;",
        "package_import_paths": {
            "org.springframework.ai.bedrock.cohere.api.CohereChatBedrockApiIT": "org.springframework.ai.bedrock.cohere.api.CohereChatBedrockApiIT",
            "org.springframework.ai.bedrock.cohere.api.requestBuilder": "org.springframework.ai.bedrock.cohere.api.requestBuilder",
            "org.springframework.ai.bedrock.cohere.api.chatCompletion": "org.springframework.ai.bedrock.cohere.api.chatCompletion",
            "org.springframework.ai.bedrock.cohere.api.chatCompletionStream": "org.springframework.ai.bedrock.cohere.api.chatCompletionStream",
            "org.springframework.ai.bedrock.cohere.api.testStreamConfigurations": "org.springframework.ai.bedrock.cohere.api.testStreamConfigurations",
            "org.springframework.ai.bedrock.cohere.api.cohereChatApi": "org.springframework.ai.bedrock.cohere.api.cohereChatApi"
        },
        "package": "package org.springframework.ai.bedrock.cohere.api;",
        "property_declarations": [
            "private CohereChatBedrockApi cohereChatApi = new CohereChatBedrockApi(CohereChatModel.COHERE_COMMAND_V14.id(),\n\t\t\tRegion.US_EAST_1.id(), Duration.ofMinutes(2));"
        ],
        "functions": [
            {
                "name": "requestBuilder",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "CohereChatRequest request1 = new CohereChatRequest(\n\t\t\t\t\"What is the capital of Bulgaria and what is the size? What it the national anthem?\", 0.5f, 0.9f, 15,\n\t\t\t\t40, List.of(\"END\"), CohereChatRequest.ReturnLikelihoods.ALL, false, 1, null, Truncate.NONE);\n\n\t\tvar request2 = CohereChatRequest\n\t\t\t.builder(\"What is the capital of Bulgaria and what is the size? What it the national anthem?\")\n\t\t\t.withTemperature(0.5f)\n\t\t\t.withTopP(0.9f)\n\t\t\t.withTopK(15)\n\t\t\t.withMaxTokens(40)\n\t\t\t.withStopSequences(List.of(\"END\"))\n\t\t\t.withReturnLikelihoods(CohereChatRequest.ReturnLikelihoods.ALL)\n\t\t\t.withStream(false)\n\t\t\t.withNumGenerations(1)\n\t\t\t.withLogitBias(null)\n\t\t\t.withTruncate(Truncate.NONE)\n\t\t\t.build();\n\n\t\tassertThat(request1).isEqualTo(request2);",
                "is_abstract": "",
                "class_name": "CohereChatBedrockApiIT",
                "annotations": []
            },
            {
                "name": "chatCompletion",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var request = CohereChatRequest\n\t\t\t.builder(\"What is the capital of Bulgaria and what is the size? What it the national anthem?\")\n\t\t\t.withStream(false)\n\t\t\t.withTemperature(0.5f)\n\t\t\t.withTopP(0.8f)\n\t\t\t.withTopK(15)\n\t\t\t.withMaxTokens(100)\n\t\t\t.withStopSequences(List.of(\"END\"))\n\t\t\t.withReturnLikelihoods(CohereChatRequest.ReturnLikelihoods.ALL)\n\t\t\t.withNumGenerations(3)\n\t\t\t.withLogitBias(null)\n\t\t\t.withTruncate(Truncate.NONE)\n\t\t\t.build();\n\n\t\tCohereChatResponse response = cohereChatApi.chatCompletion(request);\n\n\t\tassertThat(response).isNotNull();\n\t\tassertThat(response.prompt()).isEqualTo(request.prompt());\n\t\tassertThat(response.generations()).hasSize(request.numGenerations());\n\t\tassertThat(response.generations().get(0).text()).isNotEmpty();",
                "is_abstract": "",
                "class_name": "CohereChatBedrockApiIT",
                "annotations": []
            },
            {
                "name": "chatCompletionStream",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var request = CohereChatRequest\n\t\t\t.builder(\"What is the capital of Bulgaria and what is the size? What it the national anthem?\")\n\t\t\t.withStream(true)\n\t\t\t.withTemperature(0.5f)\n\t\t\t.withTopP(0.8f)\n\t\t\t.withTopK(15)\n\t\t\t.withMaxTokens(100)\n\t\t\t.withStopSequences(List.of(\"END\"))\n\t\t\t.withReturnLikelihoods(CohereChatRequest.ReturnLikelihoods.ALL)\n\t\t\t.withNumGenerations(3)\n\t\t\t.withLogitBias(null)\n\t\t\t.withTruncate(Truncate.NONE)\n\t\t\t.build();\n\n\t\tFlux<CohereChatResponse.Generation> responseStream = cohereChatApi.chatCompletionStream(request);\n\t\tList<CohereChatResponse.Generation> responses = responseStream.collectList().block();\n\n\t\tassertThat(responses).isNotNull();\n\t\tassertThat(responses).hasSizeGreaterThan(10);\n\t\tassertThat(responses.get(0).text()).isNotEmpty();\n\n\t\tCohereChatResponse.Generation lastResponse = responses.get(responses.size() - 1);\n\t\tassertThat(lastResponse.text()).isNull();\n\t\tassertThat(lastResponse.isFinished()).isTrue();\n\t\tassertThat(lastResponse.finishReason()).isEqualTo(FinishReason.MAX_TOKENS);\n\t\tassertThat(lastResponse.amazonBedrockInvocationMetrics()).isNotNull();",
                "is_abstract": "",
                "class_name": "CohereChatBedrockApiIT",
                "annotations": []
            },
            {
                "name": "testStreamConfigurations",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var streamRequest = CohereChatRequest\n\t\t\t.builder(\"What is the capital of Bulgaria and what is the size? What it the national anthem?\")\n\t\t\t.withStream(true)\n\t\t\t.build();\n\n\t\tassertThatThrownBy(() -> cohereChatApi.chatCompletion(streamRequest))\n\t\t\t.isInstanceOf(IllegalArgumentException.class)\n\t\t\t.hasMessageContaining(\"The request must be configured to return the complete response!\");\n\n\t\tvar notStreamRequest = CohereChatRequest\n\t\t\t.builder(\"What is the capital of Bulgaria and what is the size? What it the national anthem?\")\n\t\t\t.withStream(false)\n\t\t\t.build();\n\n\t\tassertThatThrownBy(() -> cohereChatApi.chatCompletionStream(notStreamRequest))\n\t\t\t.isInstanceOf(IllegalArgumentException.class)\n\t\t\t.hasMessageContaining(\"The request must be configured to stream the response!\");",
                "is_abstract": "",
                "class_name": "CohereChatBedrockApiIT",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/llama2/BedrockLlama2ChatClientIT.java",
        "class_names": [
            "TestConfiguration",
            "BedrockLlama2ChatClientIT"
        ],
        "imports": "import java.util.stream.Collectors;\nimport java.util.List;\nimport org.springframework.ai.chat.Generation;\nimport reactor.core.publisher.Flux;\nimport org.springframework.ai.chat.prompt.SystemPromptTemplate;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.junit.jupiter.api.Disabled;\nimport org.springframework.core.io.Resource;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.ai.parser.MapOutputParser;\nimport org.springframework.ai.bedrock.llama2.api.Llama2ChatBedrockApi.Llama2ChatModel;\nimport org.springframework.ai.chat.messages.Message;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport software.amazon.awssdk.regions.Region;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport java.util.Map;\nimport org.springframework.ai.parser.BeanOutputParser;\nimport org.springframework.beans.factory.annotation.Value;\nimport java.util.Arrays;\nimport org.springframework.ai.chat.ChatResponse;\nimport java.time.Duration;\nimport org.springframework.ai.chat.messages.UserMessage;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.ai.parser.ListOutputParser;\nimport org.springframework.ai.chat.prompt.PromptTemplate;\nimport org.springframework.ai.chat.messages.AssistantMessage;\nimport org.springframework.boot.SpringBootConfiguration;\nimport org.springframework.ai.chat.prompt.Prompt;\nimport org.springframework.ai.bedrock.llama2.api.Llama2ChatBedrockApi;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.springframework.core.convert.support.DefaultConversionService;\nimport org.junit.jupiter.api.Test;\nimport software.amazon.awssdk.auth.credentials.EnvironmentVariableCredentialsProvider;",
        "package_import_paths": {
            "org.springframework.ai.bedrock.llama2.BedrockLlama2ChatClientIT": "org.springframework.ai.bedrock.llama2.BedrockLlama2ChatClientIT",
            "org.springframework.ai.bedrock.llama2.TestConfiguration": "org.springframework.ai.bedrock.llama2.TestConfiguration",
            "org.springframework.ai.bedrock.llama2.multipleStreamAttempts": "org.springframework.ai.bedrock.llama2.multipleStreamAttempts",
            "org.springframework.ai.bedrock.llama2.roleTest": "org.springframework.ai.bedrock.llama2.roleTest",
            "org.springframework.ai.bedrock.llama2.Disabled": "org.springframework.ai.bedrock.llama2.Disabled",
            "org.springframework.ai.bedrock.llama2.mapOutputParser": "org.springframework.ai.bedrock.llama2.mapOutputParser",
            "org.springframework.ai.bedrock.llama2.llama2Api": "org.springframework.ai.bedrock.llama2.llama2Api",
            "org.springframework.ai.bedrock.llama2.llama2ChatClient": "org.springframework.ai.bedrock.llama2.llama2ChatClient",
            "org.springframework.ai.bedrock.llama2.privat": "org.springframework.ai.bedrock.llama2.privat",
            "org.springframework.ai.bedrock.llama2.systemResour": "org.springframework.ai.bedrock.llama2.systemResour"
        },
        "package": "package org.springframework.ai.bedrock.llama2;",
        "property_declarations": [
            "@Autowired\n\tprivate BedrockLlama2ChatClient client;",
            "@Value(\"classpath:/prompts/system-message.st\")\n\tprivate Resource systemResource;"
        ],
        "functions": [
            {
                "name": "multipleStreamAttempts",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Flux<ChatResponse> joke1Stream = client.stream(new Prompt(new UserMessage(\"Tell me a joke?\")));\n\t\tFlux<ChatResponse> joke2Stream = client.stream(new Prompt(new UserMessage(\"Tell me a toy joke?\")));\n\n\t\tString joke1 = joke1Stream.collectList()\n\t\t\t.block()\n\t\t\t.stream()\n\t\t\t.map(ChatResponse::getResults)\n\t\t\t.flatMap(List::stream)\n\t\t\t.map(Generation::getOutput)\n\t\t\t.map(AssistantMessage::getContent)\n\t\t\t.collect(Collectors.joining());\n\t\tString joke2 = joke2Stream.collectList()\n\t\t\t.block()\n\t\t\t.stream()\n\t\t\t.map(ChatResponse::getResults)\n\t\t\t.flatMap(List::stream)\n\t\t\t.map(Generation::getOutput)\n\t\t\t.map(AssistantMessage::getContent)\n\t\t\t.collect(Collectors.joining());\n\n\t\tassertThat(joke1).isNotBlank();\n\t\tassertThat(joke2).isNotBlank();",
                "is_abstract": "",
                "class_name": "BedrockLlama2ChatClientIT",
                "annotations": []
            },
            {
                "name": "roleTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "UserMessage userMessage = new UserMessage(\n\t\t\t\t\"Tell me about 3 famous pirates from the Golden Age of Piracy and why they did.\");\n\t\tSystemPromptTemplate systemPromptTemplate = new SystemPromptTemplate(systemResource);\n\t\tMessage systemMessage = systemPromptTemplate.createMessage(Map.of(\"name\", \"Bob\", \"voice\", \"pirate\"));\n\n\t\tPrompt prompt = new Prompt(List.of(userMessage, systemMessage));\n\n\t\tChatResponse response = client.call(prompt);\n\n\t\tassertThat(response.getResult().getOutput().getContent()).contains(\"Blackbeard\");",
                "is_abstract": "",
                "class_name": "BedrockLlama2ChatClientIT",
                "annotations": []
            },
            {
                "name": "Disabled",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "DefaultConversionService conversionService = new DefaultConversionService();\n\t\tListOutputParser outputParser = new ListOutputParser(conversionService);\n\n\t\tString format = outputParser.getFormat();\n\t\tString template = \"\"\"\n\t\t\t\tList five {subject}\n\t\t\t\t{format}\n\t\t\t\t\"\"\";\n\t\tPromptTemplate promptTemplate = new PromptTemplate(template,\n\t\t\t\tMap.of(\"subject\", \"ice cream flavors.\", \"format\", format));\n\t\tPrompt prompt = new Prompt(promptTemplate.createMessage());\n\t\tGeneration generation = this.client.call(prompt).getResult();\n\n\t\tList<String> list = outputParser.parse(generation.getOutput().getContent());\n\t\tassertThat(list).hasSize(5);",
                "is_abstract": "",
                "class_name": "BedrockLlama2ChatClientIT",
                "annotations": [
                    "@Disabled(\"TODO: Fix the parser instructions to return the correct format\")"
                ]
            },
            {
                "name": "mapOutputParser",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "MapOutputParser outputParser = new MapOutputParser();\n\n\t\tString format = outputParser.getFormat();\n\t\tString template = \"\"\"\n\t\t\t\tProvide me a List of {subject}\n\t\t\t\t{format}\n\t\t\t\t\"\"\";\n\t\tPromptTemplate promptTemplate = new PromptTemplate(template,\n\t\t\t\tMap.of(\"subject\", \"an array of numbers from 1 to 9 under they key name 'numbers'\", \"format\", format));\n\t\tPrompt prompt = new Prompt(promptTemplate.createMessage());\n\t\tGeneration generation = client.call(prompt).getResult();\n\n\t\tMap<String, Object> result = outputParser.parse(generation.getOutput().getContent());\n\t\tassertThat(result.get(\"numbers\")).isEqualTo(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9));",
                "is_abstract": "",
                "class_name": "BedrockLlama2ChatClientIT",
                "annotations": []
            },
            {
                "name": "llama2Api",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Llama2ChatBedrockApi(Llama2ChatModel.LLAMA2_70B_CHAT_V1.id(),\n\t\t\t\t\tEnvironmentVariableCredentialsProvider.create(), Region.US_EAST_1.id(), new ObjectMapper(),\n\t\t\t\t\tDuration.ofMinutes(2));",
                "is_abstract": "",
                "class_name": "BedrockLlama2ChatClientIT TestConfiguration",
                "annotations": []
            },
            {
                "name": "llama2ChatClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new BedrockLlama2ChatClient(llama2Api,\n\t\t\t\t\tBedrockLlama2ChatOptions.builder().withTemperature(0.5f).withMaxGenLen(100).withTopP(0.9f).build());",
                "is_abstract": "",
                "class_name": "BedrockLlama2ChatClientIT TestConfiguration",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/llama2/BedrockLlama2CreateRequestTests.java",
        "class_names": [
            "BedrockLlama2CreateRequestTests"
        ],
        "imports": "import org.springframework.ai.chat.prompt.Prompt;\nimport org.springframework.ai.bedrock.llama2.api.Llama2ChatBedrockApi;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport software.amazon.awssdk.regions.Region;\nimport org.junit.jupiter.api.Test;\nimport software.amazon.awssdk.auth.credentials.EnvironmentVariableCredentialsProvider;\nimport java.time.Duration;\nimport org.springframework.ai.bedrock.llama2.api.Llama2ChatBedrockApi.Llama2ChatModel;",
        "package_import_paths": {
            "org.springframework.ai.bedrock.llama2.BedrockLlama2CreateRequestTests": "org.springframework.ai.bedrock.llama2.BedrockLlama2CreateRequestTests",
            "org.springframework.ai.bedrock.llama2.createRequestWithChatOptions": "org.springframework.ai.bedrock.llama2.createRequestWithChatOptions",
            "org.springframework.ai.bedrock.llama2.api": "org.springframework.ai.bedrock.llama2.api"
        },
        "package": "package org.springframework.ai.bedrock.llama2;",
        "property_declarations": [
            "private Llama2ChatBedrockApi api = new Llama2ChatBedrockApi(Llama2ChatModel.LLAMA2_70B_CHAT_V1.id(),\n\t\t\tEnvironmentVariableCredentialsProvider.create(), Region.US_EAST_1.id(), new ObjectMapper(),\n\t\t\tDuration.ofMinutes(2));"
        ],
        "functions": [
            {
                "name": "createRequestWithChatOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var client = new BedrockLlama2ChatClient(api,\n\t\t\t\tBedrockLlama2ChatOptions.builder().withTemperature(66.6f).withMaxGenLen(666).withTopP(0.66f).build());\n\n\t\tvar request = client.createRequest(new Prompt(\"Test message content\"));\n\n\t\tassertThat(request.prompt()).isNotEmpty();\n\t\tassertThat(request.temperature()).isEqualTo(66.6f);\n\t\tassertThat(request.topP()).isEqualTo(0.66f);\n\t\tassertThat(request.maxGenLen()).isEqualTo(666);\n\n\t\trequest = client.createRequest(new Prompt(\"Test message content\",\n\t\t\t\tBedrockLlama2ChatOptions.builder().withTemperature(99.9f).withMaxGenLen(999).withTopP(0.99f).build()));\n\n\t\tassertThat(request.prompt()).isNotEmpty();\n\t\tassertThat(request.temperature()).isEqualTo(99.9f);\n\t\tassertThat(request.topP()).isEqualTo(0.99f);\n\t\tassertThat(request.maxGenLen()).isEqualTo(999);",
                "is_abstract": "",
                "class_name": "BedrockLlama2CreateRequestTests",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/llama2/api/Llama2ChatBedrockApiIT.java",
        "class_names": [
            "Llama2ChatBedrockApiIT"
        ],
        "imports": "import java.util.List;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport software.amazon.awssdk.regions.Region;\nimport reactor.core.publisher.Flux;\nimport org.springframework.ai.bedrock.llama2.api.Llama2ChatBedrockApi.Llama2ChatResponse;\nimport org.springframework.ai.bedrock.llama2.api.Llama2ChatBedrockApi.Llama2ChatRequest;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport java.time.Duration;\nimport org.springframework.ai.bedrock.llama2.api.Llama2ChatBedrockApi.Llama2ChatModel;",
        "package_import_paths": {
            "org.springframework.ai.bedrock.llama2.api.Llama2ChatBedrockApiIT": "org.springframework.ai.bedrock.llama2.api.Llama2ChatBedrockApiIT",
            "org.springframework.ai.bedrock.llama2.api.chatCompletion": "org.springframework.ai.bedrock.llama2.api.chatCompletion",
            "org.springframework.ai.bedrock.llama2.api.chatCompletionStream": "org.springframework.ai.bedrock.llama2.api.chatCompletionStream",
            "org.springframework.ai.bedrock.llama2.api.llama2ChatApi": "org.springframework.ai.bedrock.llama2.api.llama2ChatApi"
        },
        "package": "package org.springframework.ai.bedrock.llama2.api;",
        "property_declarations": [
            "private Llama2ChatBedrockApi llama2ChatApi = new Llama2ChatBedrockApi(Llama2ChatModel.LLAMA2_70B_CHAT_V1.id(),\n\t\t\tRegion.US_EAST_1.id(), Duration.ofMinutes(2));"
        ],
        "functions": [
            {
                "name": "chatCompletion",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Llama2ChatRequest request = Llama2ChatRequest.builder(\"Hello, my name is\")\n\t\t\t.withTemperature(0.9f)\n\t\t\t.withTopP(0.9f)\n\t\t\t.withMaxGenLen(20)\n\t\t\t.build();\n\n\t\tLlama2ChatResponse response = llama2ChatApi.chatCompletion(request);\n\n\t\tSystem.out.println(response.generation());\n\t\tassertThat(response).isNotNull();\n\t\tassertThat(response.generation()).isNotEmpty();\n\t\tassertThat(response.promptTokenCount()).isEqualTo(6);\n\t\tassertThat(response.generationTokenCount()).isGreaterThan(10);\n\t\tassertThat(response.generationTokenCount()).isLessThanOrEqualTo(20);\n\t\tassertThat(response.stopReason()).isNotNull();\n\t\tassertThat(response.amazonBedrockInvocationMetrics()).isNull();",
                "is_abstract": "",
                "class_name": "Llama2ChatBedrockApiIT",
                "annotations": []
            },
            {
                "name": "chatCompletionStream",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Llama2ChatRequest request = new Llama2ChatRequest(\"Hello, my name is\", 0.9f, 0.9f, 20);\n\t\tFlux<Llama2ChatResponse> responseStream = llama2ChatApi.chatCompletionStream(request);\n\t\tList<Llama2ChatResponse> responses = responseStream.collectList().block();\n\n\t\tassertThat(responses).isNotNull();\n\t\tassertThat(responses).hasSizeGreaterThan(10);\n\t\tassertThat(responses.get(0).generation()).isNotEmpty();\n\n\t\tLlama2ChatResponse lastResponse = responses.get(responses.size() - 1);\n\t\tassertThat(lastResponse.stopReason()).isNotNull();\n\t\tassertThat(lastResponse.amazonBedrockInvocationMetrics()).isNotNull();",
                "is_abstract": "",
                "class_name": "Llama2ChatBedrockApiIT",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/jurassic2/api/Ai21Jurassic2ChatBedrockApiIT.java",
        "class_names": [
            "Ai21Jurassic2ChatBedrockApiIT"
        ],
        "imports": "import org.springframework.ai.bedrock.jurassic2.api.Ai21Jurassic2ChatBedrockApi.Ai21Jurassic2ChatResponse;\nimport java.util.stream.Collectors;\nimport org.springframework.ai.bedrock.jurassic2.api.Ai21Jurassic2ChatBedrockApi.Ai21Jurassic2ChatModel;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport software.amazon.awssdk.regions.Region;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.bedrock.jurassic2.api.Ai21Jurassic2ChatBedrockApi.Ai21Jurassic2ChatRequest;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport java.time.Duration;",
        "package_import_paths": {
            "org.springframework.ai.bedrock.jurassic2.api.Ai21Jurassic2ChatBedrockApiIT": "org.springframework.ai.bedrock.jurassic2.api.Ai21Jurassic2ChatBedrockApiIT",
            "org.springframework.ai.bedrock.jurassic2.api.chatCompletion": "org.springframework.ai.bedrock.jurassic2.api.chatCompletion",
            "org.springframework.ai.bedrock.jurassic2.api.api": "org.springframework.ai.bedrock.jurassic2.api.api"
        },
        "package": "package org.springframework.ai.bedrock.jurassic2.api;",
        "property_declarations": [
            "Ai21Jurassic2ChatBedrockApi api = new Ai21Jurassic2ChatBedrockApi(Ai21Jurassic2ChatModel.AI21_J2_ULTRA_V1.id(),\n\t\t\tRegion.US_EAST_1.id(), Duration.ofMinutes(2));"
        ],
        "functions": [
            {
                "name": "chatCompletion",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Ai21Jurassic2ChatRequest request = new Ai21Jurassic2ChatRequest(\"Give me the names of 3 famous pirates?\", 0.9f,\n\t\t\t\t0.9f, 100, null, // List.of(\"END\"),\n\t\t\t\tnew Ai21Jurassic2ChatRequest.IntegerScalePenalty(1, true, true, true, true, true),\n\t\t\t\tnew Ai21Jurassic2ChatRequest.FloatScalePenalty(0.5f, true, true, true, true, true),\n\t\t\t\tnew Ai21Jurassic2ChatRequest.IntegerScalePenalty(1, true, true, true, true, true));\n\n\t\tAi21Jurassic2ChatResponse response = api.chatCompletion(request);\n\n\t\tassertThat(response).isNotNull();\n\t\tassertThat(response.completions()).isNotEmpty();\n\t\tassertThat(response.amazonBedrockInvocationMetrics()).isNull();\n\n\t\tString responseContent = response.completions()\n\t\t\t.stream()\n\t\t\t.map(c -> c.data().text())\n\t\t\t.collect(Collectors.joining(System.lineSeparator()));\n\t\tassertThat(responseContent).contains(\"Blackbeard\");",
                "is_abstract": "",
                "class_name": "Ai21Jurassic2ChatBedrockApiIT",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/jurassic2/api/BedrockAi21Jurassic2ChatClientIT.java",
        "class_names": [
            "BedrockAi21Jurassic2ChatClientIT",
            "TestConfiguration"
        ],
        "imports": "import java.util.List;\nimport org.springframework.ai.chat.Generation;\nimport org.springframework.ai.chat.prompt.SystemPromptTemplate;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.junit.jupiter.api.Disabled;\nimport org.springframework.core.io.Resource;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.ai.parser.MapOutputParser;\nimport org.springframework.ai.bedrock.jurassic2.BedrockAi21Jurassic2ChatOptions;\nimport org.springframework.ai.chat.messages.Message;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport software.amazon.awssdk.regions.Region;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport java.util.Map;\nimport org.springframework.beans.factory.annotation.Value;\nimport java.util.Arrays;\nimport org.springframework.ai.chat.ChatResponse;\nimport java.time.Duration;\nimport org.springframework.ai.chat.messages.UserMessage;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.ai.chat.prompt.PromptTemplate;\nimport org.springframework.boot.SpringBootConfiguration;\nimport org.springframework.ai.chat.prompt.Prompt;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.junit.jupiter.api.Test;\nimport software.amazon.awssdk.auth.credentials.EnvironmentVariableCredentialsProvider;\nimport org.springframework.ai.bedrock.jurassic2.BedrockAi21Jurassic2ChatClient;",
        "package_import_paths": {
            "org.springframework.ai.bedrock.jurassic2.api.BedrockAi21Jurassic2ChatClientIT": "org.springframework.ai.bedrock.jurassic2.api.BedrockAi21Jurassic2ChatClientIT",
            "org.springframework.ai.bedrock.jurassic2.api.TestConfiguration": "org.springframework.ai.bedrock.jurassic2.api.TestConfiguration",
            "org.springframework.ai.bedrock.jurassic2.api.roleTest": "org.springframework.ai.bedrock.jurassic2.api.roleTest",
            "org.springframework.ai.bedrock.jurassic2.api.testEmojiPenaltyFals": "org.springframework.ai.bedrock.jurassic2.api.testEmojiPenaltyFals",
            "org.springframework.ai.bedrock.jurassic2.api.Disabled": "org.springframework.ai.bedrock.jurassic2.api.Disabled",
            "org.springframework.ai.bedrock.jurassic2.api.mapOutputParser": "org.springframework.ai.bedrock.jurassic2.api.mapOutputParser",
            "org.springframework.ai.bedrock.jurassic2.api.simpleChatRespons": "org.springframework.ai.bedrock.jurassic2.api.simpleChatRespons",
            "org.springframework.ai.bedrock.jurassic2.api.jurassic2ChatBedrockApi": "org.springframework.ai.bedrock.jurassic2.api.jurassic2ChatBedrockApi",
            "org.springframework.ai.bedrock.jurassic2.api.bedrockAi21Jurassic2ChatClient": "org.springframework.ai.bedrock.jurassic2.api.bedrockAi21Jurassic2ChatClient",
            "org.springframework.ai.bedrock.jurassic2.api.privat": "org.springframework.ai.bedrock.jurassic2.api.privat",
            "org.springframework.ai.bedrock.jurassic2.api.systemResour": "org.springframework.ai.bedrock.jurassic2.api.systemResour"
        },
        "package": "package org.springframework.ai.bedrock.jurassic2.api;",
        "property_declarations": [
            "@Autowired\n\tprivate BedrockAi21Jurassic2ChatClient client;",
            "@Value(\"classpath:/prompts/system-message.st\")\n\tprivate Resource systemResource;"
        ],
        "functions": [
            {
                "name": "roleTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "UserMessage userMessage = new UserMessage(\n\t\t\t\t\"Tell me about 3 famous pirates from the Golden Age of Piracy and why they did.\");\n\t\tSystemPromptTemplate systemPromptTemplate = new SystemPromptTemplate(systemResource);\n\t\tMessage systemMessage = systemPromptTemplate.createMessage(Map.of(\"name\", \"Bob\", \"voice\", \"pirate\"));\n\n\t\tPrompt prompt = new Prompt(List.of(userMessage, systemMessage));\n\n\t\tChatResponse response = client.call(prompt);\n\n\t\tassertThat(response.getResult().getOutput().getContent()).contains(\"Blackbeard\");",
                "is_abstract": "",
                "class_name": "BedrockAi21Jurassic2ChatClientIT",
                "annotations": []
            },
            {
                "name": "testEmojiPenaltyFalse",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "BedrockAi21Jurassic2ChatOptions.Penalty penalty = new BedrockAi21Jurassic2ChatOptions.Penalty.Builder()\n\t\t\t.applyToEmojis(false)\n\t\t\t.build();\n\t\tBedrockAi21Jurassic2ChatOptions options = new BedrockAi21Jurassic2ChatOptions.Builder()\n\t\t\t.withPresencePenalty(penalty)\n\t\t\t.build();\n\n\t\tUserMessage userMessage = new UserMessage(\"Can you express happiness using an emoji like \ud83d\ude04 ?\");\n\t\tPrompt prompt = new Prompt(List.of(userMessage), options);\n\n\t\tChatResponse response = client.call(prompt);\n\n\t\tassertThat(response.getResult().getOutput().getContent()).matches(content -> content.contains(\"\ud83d\ude04\"));",
                "is_abstract": "",
                "class_name": "BedrockAi21Jurassic2ChatClientIT",
                "annotations": []
            },
            {
                "name": "Disabled",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// applyToEmojis is by default true\n\t\tBedrockAi21Jurassic2ChatOptions.Penalty penalty = new BedrockAi21Jurassic2ChatOptions.Penalty.Builder().build();\n\t\tBedrockAi21Jurassic2ChatOptions options = new BedrockAi21Jurassic2ChatOptions.Builder()\n\t\t\t.withPresencePenalty(penalty)\n\t\t\t.build();\n\n\t\tUserMessage userMessage = new UserMessage(\"Can you express happiness using an emoji like \ud83d\ude04?\");\n\t\tSystemPromptTemplate systemPromptTemplate = new SystemPromptTemplate(systemResource);\n\t\tMessage systemMessage = systemPromptTemplate.createMessage(Map.of(\"name\", \"Bob\", \"voice\", \"pirate\"));\n\n\t\tPrompt prompt = new Prompt(List.of(userMessage, systemMessage), options);\n\n\t\tChatResponse response = client.call(prompt);\n\n\t\tassertThat(response.getResult().getOutput().getContent()).doesNotContain(\"\ud83d\ude04\");",
                "is_abstract": "",
                "class_name": "BedrockAi21Jurassic2ChatClientIT",
                "annotations": [
                    "@Disabled(\"This test is failing when run in combination with the other tests\")"
                ]
            },
            {
                "name": "mapOutputParser",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "MapOutputParser outputParser = new MapOutputParser();\n\n\t\tString format = outputParser.getFormat();\n\t\tString template = \"\"\"\n\t\t\t\tProvide me a List of {subject}\n\t\t\t\t{format}\n\t\t\t\t\"\"\";\n\t\tPromptTemplate promptTemplate = new PromptTemplate(template,\n\t\t\t\tMap.of(\"subject\", \"an array of numbers from 1 to 9 under they key name 'numbers'\", \"format\", format));\n\t\tPrompt prompt = new Prompt(promptTemplate.createMessage());\n\t\tGeneration generation = client.call(prompt).getResult();\n\n\t\tMap<String, Object> result = outputParser.parse(generation.getOutput().getContent());\n\t\tassertThat(result.get(\"numbers\")).isEqualTo(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9));",
                "is_abstract": "",
                "class_name": "BedrockAi21Jurassic2ChatClientIT",
                "annotations": []
            },
            {
                "name": "simpleChatResponse",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "UserMessage userMessage = new UserMessage(\"Tell me a joke about AI.\");\n\t\tSystemPromptTemplate systemPromptTemplate = new SystemPromptTemplate(systemResource);\n\t\tMessage systemMessage = systemPromptTemplate.createMessage(Map.of(\"name\", \"Bob\", \"voice\", \"pirate\"));\n\n\t\tPrompt prompt = new Prompt(List.of(userMessage, systemMessage));\n\n\t\tChatResponse response = client.call(prompt);\n\n\t\tassertThat(response.getResult().getOutput().getContent()).contains(\"AI\");",
                "is_abstract": "",
                "class_name": "BedrockAi21Jurassic2ChatClientIT",
                "annotations": []
            },
            {
                "name": "jurassic2ChatBedrockApi",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Ai21Jurassic2ChatBedrockApi(\n\t\t\t\t\tAi21Jurassic2ChatBedrockApi.Ai21Jurassic2ChatModel.AI21_J2_MID_V1.id(),\n\t\t\t\t\tEnvironmentVariableCredentialsProvider.create(), Region.US_EAST_1.id(), new ObjectMapper(),\n\t\t\t\t\tDuration.ofMinutes(2));",
                "is_abstract": "",
                "class_name": "BedrockAi21Jurassic2ChatClientIT TestConfiguration",
                "annotations": []
            },
            {
                "name": "bedrockAi21Jurassic2ChatClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new BedrockAi21Jurassic2ChatClient(jurassic2ChatBedrockApi,\n\t\t\t\t\tBedrockAi21Jurassic2ChatOptions.builder()\n\t\t\t\t\t\t.withTemperature(0.5f)\n\t\t\t\t\t\t.withMaxTokens(100)\n\t\t\t\t\t\t.withTopP(0.9f)\n\t\t\t\t\t\t.build());",
                "is_abstract": "",
                "class_name": "BedrockAi21Jurassic2ChatClientIT TestConfiguration",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/anthropic3/BedrockAnthropic3CreateRequestTests.java",
        "class_names": [
            "BedrockAnthropic3CreateRequestTests"
        ],
        "imports": "import org.springframework.ai.chat.prompt.Prompt;\nimport java.util.List;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport software.amazon.awssdk.regions.Region;\nimport org.springframework.ai.bedrock.anthropic3.api.Anthropic3ChatBedrockApi.AnthropicChatModel;\nimport org.springframework.ai.bedrock.anthropic3.api.Anthropic3ChatBedrockApi;\nimport org.junit.jupiter.api.Test;\nimport java.time.Duration;",
        "package_import_paths": {
            "org.springframework.ai.bedrock.anthropic3.BedrockAnthropic3CreateRequestTests": "org.springframework.ai.bedrock.anthropic3.BedrockAnthropic3CreateRequestTests",
            "org.springframework.ai.bedrock.anthropic3.createRequestWithChatOptions": "org.springframework.ai.bedrock.anthropic3.createRequestWithChatOptions",
            "org.springframework.ai.bedrock.anthropic3.anthropicChatApi": "org.springframework.ai.bedrock.anthropic3.anthropicChatApi"
        },
        "package": "package org.springframework.ai.bedrock.anthropic3;",
        "property_declarations": [
            "private Anthropic3ChatBedrockApi anthropicChatApi = new Anthropic3ChatBedrockApi(AnthropicChatModel.CLAUDE_V2.id(),\n\t\t\tRegion.EU_CENTRAL_1.id(), Duration.ofMillis(1000L));"
        ],
        "functions": [
            {
                "name": "createRequestWithChatOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var client = new BedrockAnthropic3ChatClient(anthropicChatApi,\n\t\t\t\tAnthropic3ChatOptions.builder()\n\t\t\t\t\t.withTemperature(66.6f)\n\t\t\t\t\t.withTopK(66)\n\t\t\t\t\t.withTopP(0.66f)\n\t\t\t\t\t.withMaxTokens(666)\n\t\t\t\t\t.withAnthropicVersion(\"X.Y.Z\")\n\t\t\t\t\t.withStopSequences(List.of(\"stop1\", \"stop2\"))\n\t\t\t\t\t.build());\n\n\t\tvar request = client.createRequest(new Prompt(\"Test message content\"));\n\n\t\tassertThat(request.messages()).isNotEmpty();\n\t\tassertThat(request.temperature()).isEqualTo(66.6f);\n\t\tassertThat(request.topK()).isEqualTo(66);\n\t\tassertThat(request.topP()).isEqualTo(0.66f);\n\t\tassertThat(request.maxTokens()).isEqualTo(666);\n\t\tassertThat(request.anthropicVersion()).isEqualTo(\"X.Y.Z\");\n\t\tassertThat(request.stopSequences()).containsExactly(\"stop1\", \"stop2\");\n\n\t\trequest = client.createRequest(new Prompt(\"Test message content\",\n\t\t\t\tAnthropic3ChatOptions.builder()\n\t\t\t\t\t.withTemperature(99.9f)\n\t\t\t\t\t.withTopP(0.99f)\n\t\t\t\t\t.withMaxTokens(999)\n\t\t\t\t\t.withAnthropicVersion(\"zzz\")\n\t\t\t\t\t.withStopSequences(List.of(\"stop3\", \"stop4\"))\n\t\t\t\t\t.build()\n\n\t\t));\n\n\t\tassertThat(request.messages()).isNotEmpty();\n\t\tassertThat(request.temperature()).isEqualTo(99.9f);\n\t\tassertThat(request.topK()).as(\"unchanged from the default options\").isEqualTo(66);\n\t\tassertThat(request.topP()).isEqualTo(0.99f);\n\t\tassertThat(request.maxTokens()).isEqualTo(999);\n\t\tassertThat(request.anthropicVersion()).isEqualTo(\"zzz\");\n\t\tassertThat(request.stopSequences()).containsExactly(\"stop3\", \"stop4\");",
                "is_abstract": "",
                "class_name": "BedrockAnthropic3CreateRequestTests",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/anthropic3/BedrockAnthropic3ChatClientIT.java",
        "class_names": [
            "TestConfiguration",
            "BedrockAnthropic3ChatClientIT"
        ],
        "imports": "import org.springframework.util.MimeTypeUtils;\nimport java.util.stream.Collectors;\nimport java.util.List;\nimport org.springframework.ai.chat.Generation;\nimport reactor.core.publisher.Flux;\nimport org.springframework.ai.chat.prompt.SystemPromptTemplate;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.core.io.Resource;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.ai.parser.MapOutputParser;\nimport java.io.IOException;\nimport org.springframework.ai.chat.messages.Message;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport software.amazon.awssdk.regions.Region;\nimport org.slf4j.Logger;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.ai.bedrock.anthropic3.api.Anthropic3ChatBedrockApi;\nimport java.util.Map;\nimport org.springframework.ai.parser.BeanOutputParser;\nimport org.springframework.beans.factory.annotation.Value;\nimport java.util.Arrays;\nimport org.springframework.ai.chat.ChatResponse;\nimport java.time.Duration;\nimport org.springframework.ai.chat.messages.UserMessage;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.ai.chat.messages.Media;\nimport org.springframework.ai.chat.prompt.PromptTemplate;\nimport org.springframework.ai.parser.ListOutputParser;\nimport org.springframework.ai.chat.messages.AssistantMessage;\nimport org.springframework.boot.SpringBootConfiguration;\nimport org.springframework.ai.chat.prompt.Prompt;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.springframework.core.io.ClassPathResource;\nimport org.springframework.core.convert.support.DefaultConversionService;\nimport org.junit.jupiter.api.Test;\nimport software.amazon.awssdk.auth.credentials.EnvironmentVariableCredentialsProvider;",
        "package_import_paths": {
            "org.springframework.ai.bedrock.anthropic3.BedrockAnthropic3ChatClientIT": "org.springframework.ai.bedrock.anthropic3.BedrockAnthropic3ChatClientIT",
            "org.springframework.ai.bedrock.anthropic3.TestConfiguration": "org.springframework.ai.bedrock.anthropic3.TestConfiguration",
            "org.springframework.ai.bedrock.anthropic3.multipleStreamAttempts": "org.springframework.ai.bedrock.anthropic3.multipleStreamAttempts",
            "org.springframework.ai.bedrock.anthropic3.roleTest": "org.springframework.ai.bedrock.anthropic3.roleTest",
            "org.springframework.ai.bedrock.anthropic3.outputParser": "org.springframework.ai.bedrock.anthropic3.outputParser",
            "org.springframework.ai.bedrock.anthropic3.mapOutputParser": "org.springframework.ai.bedrock.anthropic3.mapOutputParser",
            "org.springframework.ai.bedrock.anthropic3.beanOutputParserRecords": "org.springframework.ai.bedrock.anthropic3.beanOutputParserRecords",
            "org.springframework.ai.bedrock.anthropic3.beanStreamOutputParserRecords": "org.springframework.ai.bedrock.anthropic3.beanStreamOutputParserRecords",
            "org.springframework.ai.bedrock.anthropic3.multiModalityTest": "org.springframework.ai.bedrock.anthropic3.multiModalityTest",
            "org.springframework.ai.bedrock.anthropic3.anthropicApi": "org.springframework.ai.bedrock.anthropic3.anthropicApi",
            "org.springframework.ai.bedrock.anthropic3.anthropicChatClient": "org.springframework.ai.bedrock.anthropic3.anthropicChatClient",
            "org.springframework.ai.bedrock.anthropic3.logger": "org.springframework.ai.bedrock.anthropic3.logger",
            "org.springframework.ai.bedrock.anthropic3.privat": "org.springframework.ai.bedrock.anthropic3.privat",
            "org.springframework.ai.bedrock.anthropic3.systemResour": "org.springframework.ai.bedrock.anthropic3.systemResour"
        },
        "package": "package org.springframework.ai.bedrock.anthropic3;",
        "property_declarations": [
            "private static final Logger logger = LoggerFactory.getLogger(BedrockAnthropic3ChatClientIT.class);",
            "@Value(\"classpath:/prompts/system-message.st\")\n\tprivate Resource systemResource;",
            "@Autowired\n\tprivate BedrockAnthropic3ChatClient client;"
        ],
        "functions": [
            {
                "name": "multipleStreamAttempts",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Flux<ChatResponse> joke1Stream = client.stream(new Prompt(new UserMessage(\"Tell me a joke?\")));\n\t\tFlux<ChatResponse> joke2Stream = client.stream(new Prompt(new UserMessage(\"Tell me a toy joke?\")));\n\n\t\tString joke1 = joke1Stream.collectList()\n\t\t\t.block()\n\t\t\t.stream()\n\t\t\t.map(ChatResponse::getResults)\n\t\t\t.flatMap(List::stream)\n\t\t\t.map(Generation::getOutput)\n\t\t\t.map(AssistantMessage::getContent)\n\t\t\t.collect(Collectors.joining());\n\t\tString joke2 = joke2Stream.collectList()\n\t\t\t.block()\n\t\t\t.stream()\n\t\t\t.map(ChatResponse::getResults)\n\t\t\t.flatMap(List::stream)\n\t\t\t.map(Generation::getOutput)\n\t\t\t.map(AssistantMessage::getContent)\n\t\t\t.collect(Collectors.joining());\n\n\t\tassertThat(joke1).isNotBlank();\n\t\tassertThat(joke2).isNotBlank();",
                "is_abstract": "",
                "class_name": "BedrockAnthropic3ChatClientIT",
                "annotations": []
            },
            {
                "name": "roleTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "UserMessage userMessage = new UserMessage(\n\t\t\t\t\"Tell me about 3 famous pirates from the Golden Age of Piracy and why they did.\");\n\t\tSystemPromptTemplate systemPromptTemplate = new SystemPromptTemplate(systemResource);\n\t\tMessage systemMessage = systemPromptTemplate.createMessage(Map.of(\"name\", \"Bob\", \"voice\", \"pirate\"));\n\n\t\tPrompt prompt = new Prompt(List.of(userMessage, systemMessage));\n\n\t\tChatResponse response = client.call(prompt);\n\n\t\tassertThat(response.getResult().getOutput().getContent()).contains(\"Blackbeard\");",
                "is_abstract": "",
                "class_name": "BedrockAnthropic3ChatClientIT",
                "annotations": []
            },
            {
                "name": "outputParser",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "DefaultConversionService conversionService = new DefaultConversionService();\n\t\tListOutputParser outputParser = new ListOutputParser(conversionService);\n\n\t\tString format = outputParser.getFormat();\n\t\tString template = \"\"\"\n\t\t\t\tList five {subject}\n\t\t\t\t{format}\n\t\t\t\t\"\"\";\n\t\tPromptTemplate promptTemplate = new PromptTemplate(template,\n\t\t\t\tMap.of(\"subject\", \"ice cream flavors.\", \"format\", format));\n\t\tPrompt prompt = new Prompt(promptTemplate.createMessage());\n\t\tGeneration generation = this.client.call(prompt).getResult();\n\n\t\tList<String> list = outputParser.parse(generation.getOutput().getContent());\n\t\tassertThat(list).hasSize(5);",
                "is_abstract": "",
                "class_name": "BedrockAnthropic3ChatClientIT",
                "annotations": []
            },
            {
                "name": "mapOutputParser",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "MapOutputParser outputParser = new MapOutputParser();\n\n\t\tString format = outputParser.getFormat();\n\t\tString template = \"\"\"\n\t\t\t\tProvide me a List of {subject}\n\t\t\t\t{format}\n\t\t\t\tRemove the ```json code blocks from the output.\n\t\t\t\t\"\"\";\n\t\tPromptTemplate promptTemplate = new PromptTemplate(template,\n\t\t\t\tMap.of(\"subject\", \"an array of numbers from 1 to 9 under they key name 'numbers'\", \"format\", format));\n\t\tPrompt prompt = new Prompt(promptTemplate.createMessage());\n\t\tGeneration generation = client.call(prompt).getResult();\n\n\t\tMap<String, Object> result = outputParser.parse(generation.getOutput().getContent());\n\t\tassertThat(result.get(\"numbers\")).isEqualTo(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9));",
                "is_abstract": "",
                "class_name": "BedrockAnthropic3ChatClientIT",
                "annotations": []
            },
            {
                "name": "beanOutputParserRecords",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "BeanOutputParser<ActorsFilmsRecord> outputParser = new BeanOutputParser<>(ActorsFilmsRecord.class);\n\n\t\tString format = outputParser.getFormat();\n\t\tString template = \"\"\"\n\t\t\t\tGenerate the filmography of 5 movies for Tom Hanks.\n\t\t\t\tRemove non JSON tex blocks from the output.\n\t\t\t\t{format}\n\t\t\t\tProvide your answer in the JSON format with the feature names as the keys.\n\t\t\t\t\"\"\";\n\t\tPromptTemplate promptTemplate = new PromptTemplate(template, Map.of(\"format\", format));\n\t\tPrompt prompt = new Prompt(promptTemplate.createMessage());\n\t\tGeneration generation = client.call(prompt).getResult();\n\n\t\tActorsFilmsRecord actorsFilms = outputParser.parse(generation.getOutput().getContent());\n\t\tassertThat(actorsFilms.actor()).isEqualTo(\"Tom Hanks\");\n\t\tassertThat(actorsFilms.movies()).hasSize(5);",
                "is_abstract": "",
                "class_name": "BedrockAnthropic3ChatClientIT",
                "annotations": []
            },
            {
                "name": "beanStreamOutputParserRecords",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "BeanOutputParser<ActorsFilmsRecord> outputParser = new BeanOutputParser<>(ActorsFilmsRecord.class);\n\n\t\tString format = outputParser.getFormat();\n\t\tString template = \"\"\"\n\t\t\t\tGenerate the filmography of 5 movies for Tom Hanks.\n\t\t\t\t{format}\n\t\t\t\tRemove Markdown code blocks from the output.\n\t\t\t\t\"\"\";\n\t\tPromptTemplate promptTemplate = new PromptTemplate(template, Map.of(\"format\", format));\n\t\tPrompt prompt = new Prompt(promptTemplate.createMessage());\n\n\t\tString generationTextFromStream = client.stream(prompt)\n\t\t\t.collectList()\n\t\t\t.block()\n\t\t\t.stream()\n\t\t\t.map(ChatResponse::getResults)\n\t\t\t.flatMap(List::stream)\n\t\t\t.map(Generation::getOutput)\n\t\t\t.map(AssistantMessage::getContent)\n\t\t\t.collect(Collectors.joining());\n\n\t\tActorsFilmsRecord actorsFilms = outputParser.parse(generationTextFromStream);\n\t\tlogger.info(\"\" + actorsFilms);\n\t\tassertThat(actorsFilms.actor()).isEqualTo(\"Tom Hanks\");\n\t\tassertThat(actorsFilms.movies()).hasSize(5);",
                "is_abstract": "",
                "class_name": "BedrockAnthropic3ChatClientIT",
                "annotations": []
            },
            {
                "name": "multiModalityTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "byte[] imageData = new ClassPathResource(\"/test.png\").getContentAsByteArray();\n\n\t\tvar userMessage = new UserMessage(\"Explain what do you see o this picture?\",\n\t\t\t\tList.of(new Media(MimeTypeUtils.IMAGE_PNG, imageData)));\n\n\t\tChatResponse response = client.call(new Prompt(List.of(userMessage)));\n\n\t\tlogger.info(response.getResult().getOutput().getContent());\n\t\tassertThat(response.getResult().getOutput().getContent()).contains(\"bananas\", \"apple\", \"basket\");",
                "is_abstract": "",
                "class_name": "BedrockAnthropic3ChatClientIT",
                "annotations": []
            },
            {
                "name": "anthropicApi",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Anthropic3ChatBedrockApi(Anthropic3ChatBedrockApi.AnthropicChatModel.CLAUDE_V3_SONNET.id(),\n\t\t\t\t\tEnvironmentVariableCredentialsProvider.create(), Region.US_EAST_1.id(), new ObjectMapper(),\n\t\t\t\t\tDuration.ofMinutes(5));",
                "is_abstract": "",
                "class_name": "BedrockAnthropic3ChatClientIT TestConfiguration",
                "annotations": []
            },
            {
                "name": "anthropicChatClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new BedrockAnthropic3ChatClient(anthropicApi);",
                "is_abstract": "",
                "class_name": "BedrockAnthropic3ChatClientIT TestConfiguration",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/anthropic3/api/Anthropic3ChatBedrockApiIT.java",
        "class_names": [
            "Anthropic3ChatBedrockApiIT"
        ],
        "imports": "import java.util.stream.Collectors;\nimport java.util.List;\nimport reactor.core.publisher.Flux;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport software.amazon.awssdk.regions.Region;\nimport org.slf4j.Logger;\nimport org.springframework.ai.bedrock.anthropic3.api.Anthropic3ChatBedrockApi.AnthropicChatModel;\nimport java.time.Duration;\nimport org.springframework.ai.bedrock.anthropic3.api.Anthropic3ChatBedrockApi.AnthropicChatResponse;\nimport org.springframework.ai.bedrock.anthropic3.api.Anthropic3ChatBedrockApi.ChatCompletionMessage.Role;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.ai.bedrock.anthropic3.api.Anthropic3ChatBedrockApi.AnthropicChatRequest;\nimport org.springframework.ai.bedrock.anthropic3.api.Anthropic3ChatBedrockApi.AnthropicChatStreamingResponse.StreamingType;\nimport org.springframework.ai.bedrock.anthropic3.api.Anthropic3ChatBedrockApi.ChatCompletionMessage;\nimport org.springframework.ai.bedrock.anthropic3.api.Anthropic3ChatBedrockApi.MediaContent;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.junit.jupiter.api.Test;\nimport software.amazon.awssdk.auth.credentials.EnvironmentVariableCredentialsProvider;\nimport static org.springframework.ai.bedrock.anthropic3.api.Anthropic3ChatBedrockApi.DEFAULT_ANTHROPIC_VERSION;",
        "package_import_paths": {
            "org.springframework.ai.bedrock.anthropic3.api.Anthropic3ChatBedrockApiIT": "org.springframework.ai.bedrock.anthropic3.api.Anthropic3ChatBedrockApiIT",
            "org.springframework.ai.bedrock.anthropic3.api.chatCompletion": "org.springframework.ai.bedrock.anthropic3.api.chatCompletion",
            "org.springframework.ai.bedrock.anthropic3.api.chatMultiCompletion": "org.springframework.ai.bedrock.anthropic3.api.chatMultiCompletion",
            "org.springframework.ai.bedrock.anthropic3.api.chatCompletionStream": "org.springframework.ai.bedrock.anthropic3.api.chatCompletionStream",
            "org.springframework.ai.bedrock.anthropic3.api.logger": "org.springframework.ai.bedrock.anthropic3.api.logger",
            "org.springframework.ai.bedrock.anthropic3.api.anthropicChatApi": "org.springframework.ai.bedrock.anthropic3.api.anthropicChatApi"
        },
        "package": "package org.springframework.ai.bedrock.anthropic3.api;",
        "property_declarations": [
            "private Anthropic3ChatBedrockApi anthropicChatApi = new Anthropic3ChatBedrockApi(\n\t\t\tAnthropicChatModel.CLAUDE_INSTANT_V1.id(), EnvironmentVariableCredentialsProvider.create(),\n\t\t\tRegion.US_EAST_1.id(), new ObjectMapper(), Duration.ofMinutes(2));",
            "private final Logger logger = LoggerFactory.getLogger(Anthropic3ChatBedrockApiIT.class);"
        ],
        "functions": [
            {
                "name": "chatCompletion",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "MediaContent anthropicMessage = new MediaContent(\"Name 3 famous pirates\");\n\t\tChatCompletionMessage chatCompletionMessage = new ChatCompletionMessage(List.of(anthropicMessage), Role.USER);\n\t\tAnthropicChatRequest request = AnthropicChatRequest.builder(List.of(chatCompletionMessage))\n\t\t\t.withTemperature(0.8f)\n\t\t\t.withMaxTokens(300)\n\t\t\t.withTopK(10)\n\t\t\t.withAnthropicVersion(DEFAULT_ANTHROPIC_VERSION)\n\t\t\t.build();\n\n\t\tAnthropicChatResponse response = anthropicChatApi.chatCompletion(request);\n\n\t\tlogger.info(\"\" + response.content());\n\n\t\tassertThat(response).isNotNull();\n\t\tassertThat(response.content().get(0).text()).isNotEmpty();\n\t\tassertThat(response.content().get(0).text()).contains(\"Blackbeard\");\n\t\tassertThat(response.stopReason()).isEqualTo(\"end_turn\");\n\t\tassertThat(response.stopSequence()).isNull();\n\t\tassertThat(response.usage().inputTokens()).isGreaterThan(10);\n\t\tassertThat(response.usage().outputTokens()).isGreaterThan(100);\n\n\t\tlogger.info(\"\" + response);",
                "is_abstract": "",
                "class_name": "Anthropic3ChatBedrockApiIT",
                "annotations": []
            },
            {
                "name": "chatMultiCompletion",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "MediaContent anthropicInitialMessage = new MediaContent(\"Name 3 famous pirates\");\n\t\tChatCompletionMessage chatCompletionInitialMessage = new ChatCompletionMessage(List.of(anthropicInitialMessage),\n\t\t\t\tRole.USER);\n\n\t\tMediaContent anthropicAssistantMessage = new MediaContent(\n\t\t\t\t\"Here are 3 famous pirates: Blackbeard, Calico Jack, Henry Morgan\");\n\t\tChatCompletionMessage chatCompletionAssistantMessage = new ChatCompletionMessage(\n\t\t\t\tList.of(anthropicAssistantMessage), Role.ASSISTANT);\n\n\t\tMediaContent anthropicFollowupMessage = new MediaContent(\"Why are they famous?\");\n\t\tChatCompletionMessage chatCompletionFollowupMessage = new ChatCompletionMessage(\n\t\t\t\tList.of(anthropicFollowupMessage), Role.USER);\n\n\t\tAnthropicChatRequest request = AnthropicChatRequest\n\t\t\t.builder(List.of(chatCompletionInitialMessage, chatCompletionAssistantMessage,\n\t\t\t\t\tchatCompletionFollowupMessage))\n\t\t\t.withTemperature(0.8f)\n\t\t\t.withMaxTokens(400)\n\t\t\t.withTopK(10)\n\t\t\t.withAnthropicVersion(DEFAULT_ANTHROPIC_VERSION)\n\t\t\t.build();\n\n\t\tAnthropicChatResponse response = anthropicChatApi.chatCompletion(request);\n\n\t\tlogger.info(\"\" + response.content());\n\t\tassertThat(response).isNotNull();\n\t\tassertThat(response.content().get(0).text()).isNotEmpty();\n\t\tassertThat(response.content().get(0).text()).contains(\"Blackbeard\");\n\t\tassertThat(response.stopReason()).isEqualTo(\"end_turn\");\n\t\tassertThat(response.stopSequence()).isNull();\n\t\tassertThat(response.usage().inputTokens()).isGreaterThan(30);\n\t\tassertThat(response.usage().outputTokens()).isGreaterThan(200);\n\n\t\tlogger.info(\"\" + response);",
                "is_abstract": "",
                "class_name": "Anthropic3ChatBedrockApiIT",
                "annotations": []
            },
            {
                "name": "chatCompletionStream",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "MediaContent anthropicMessage = new MediaContent(\"Name 3 famous pirates\");\n\t\tChatCompletionMessage chatCompletionMessage = new ChatCompletionMessage(List.of(anthropicMessage), Role.USER);\n\n\t\tAnthropicChatRequest request = AnthropicChatRequest.builder(List.of(chatCompletionMessage))\n\t\t\t.withTemperature(0.8f)\n\t\t\t.withMaxTokens(300)\n\t\t\t.withTopK(10)\n\t\t\t.withAnthropicVersion(DEFAULT_ANTHROPIC_VERSION)\n\t\t\t.build();\n\n\t\tFlux<Anthropic3ChatBedrockApi.AnthropicChatStreamingResponse> responseStream = anthropicChatApi\n\t\t\t.chatCompletionStream(request);\n\n\t\tList<Anthropic3ChatBedrockApi.AnthropicChatStreamingResponse> responses = responseStream.collectList().block();\n\t\tassertThat(responses).isNotNull();\n\t\tassertThat(responses).hasSizeGreaterThan(10);\n\t\tassertThat(responses.stream()\n\t\t\t.filter(message -> message.type() == StreamingType.CONTENT_BLOCK_DELTA)\n\t\t\t.map(message -> message.delta().text())\n\t\t\t.collect(Collectors.joining())).contains(\"Blackbeard\");",
                "is_abstract": "",
                "class_name": "Anthropic3ChatBedrockApiIT",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/anthropic/BedrockAnthropicChatClientIT.java",
        "class_names": [
            "TestConfiguration",
            "BedrockAnthropicChatClientIT"
        ],
        "imports": "import java.util.stream.Collectors;\nimport java.util.List;\nimport org.springframework.ai.chat.Generation;\nimport reactor.core.publisher.Flux;\nimport org.springframework.ai.bedrock.anthropic.api.AnthropicChatBedrockApi;\nimport org.springframework.ai.chat.prompt.SystemPromptTemplate;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.core.io.Resource;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.ai.parser.MapOutputParser;\nimport org.springframework.ai.chat.messages.Message;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport software.amazon.awssdk.regions.Region;\nimport org.slf4j.Logger;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport java.util.Map;\nimport org.springframework.ai.parser.BeanOutputParser;\nimport org.springframework.beans.factory.annotation.Value;\nimport java.util.Arrays;\nimport org.springframework.ai.chat.ChatResponse;\nimport java.time.Duration;\nimport org.springframework.ai.chat.messages.UserMessage;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.ai.parser.ListOutputParser;\nimport org.springframework.ai.chat.prompt.PromptTemplate;\nimport org.springframework.ai.chat.messages.AssistantMessage;\nimport org.springframework.boot.SpringBootConfiguration;\nimport org.springframework.ai.chat.prompt.Prompt;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.springframework.core.convert.support.DefaultConversionService;\nimport org.junit.jupiter.api.Test;\nimport software.amazon.awssdk.auth.credentials.EnvironmentVariableCredentialsProvider;",
        "package_import_paths": {
            "org.springframework.ai.bedrock.anthropic.BedrockAnthropicChatClientIT": "org.springframework.ai.bedrock.anthropic.BedrockAnthropicChatClientIT",
            "org.springframework.ai.bedrock.anthropic.TestConfiguration": "org.springframework.ai.bedrock.anthropic.TestConfiguration",
            "org.springframework.ai.bedrock.anthropic.multipleStreamAttempts": "org.springframework.ai.bedrock.anthropic.multipleStreamAttempts",
            "org.springframework.ai.bedrock.anthropic.roleTest": "org.springframework.ai.bedrock.anthropic.roleTest",
            "org.springframework.ai.bedrock.anthropic.outputParser": "org.springframework.ai.bedrock.anthropic.outputParser",
            "org.springframework.ai.bedrock.anthropic.mapOutputParser": "org.springframework.ai.bedrock.anthropic.mapOutputParser",
            "org.springframework.ai.bedrock.anthropic.beanOutputParserRecords": "org.springframework.ai.bedrock.anthropic.beanOutputParserRecords",
            "org.springframework.ai.bedrock.anthropic.beanStreamOutputParserRecords": "org.springframework.ai.bedrock.anthropic.beanStreamOutputParserRecords",
            "org.springframework.ai.bedrock.anthropic.anthropicApi": "org.springframework.ai.bedrock.anthropic.anthropicApi",
            "org.springframework.ai.bedrock.anthropic.anthropicChatClient": "org.springframework.ai.bedrock.anthropic.anthropicChatClient",
            "org.springframework.ai.bedrock.anthropic.logger": "org.springframework.ai.bedrock.anthropic.logger",
            "org.springframework.ai.bedrock.anthropic.privat": "org.springframework.ai.bedrock.anthropic.privat",
            "org.springframework.ai.bedrock.anthropic.systemResour": "org.springframework.ai.bedrock.anthropic.systemResour"
        },
        "package": "package org.springframework.ai.bedrock.anthropic;",
        "property_declarations": [
            "@Autowired\n\tprivate BedrockAnthropicChatClient client;",
            "@Value(\"classpath:/prompts/system-message.st\")\n\tprivate Resource systemResource;",
            "private static final Logger logger = LoggerFactory.getLogger(BedrockAnthropicChatClientIT.class);"
        ],
        "functions": [
            {
                "name": "multipleStreamAttempts",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Flux<ChatResponse> joke1Stream = client.stream(new Prompt(new UserMessage(\"Tell me a joke?\")));\n\t\tFlux<ChatResponse> joke2Stream = client.stream(new Prompt(new UserMessage(\"Tell me a toy joke?\")));\n\n\t\tString joke1 = joke1Stream.collectList()\n\t\t\t.block()\n\t\t\t.stream()\n\t\t\t.map(ChatResponse::getResults)\n\t\t\t.flatMap(List::stream)\n\t\t\t.map(Generation::getOutput)\n\t\t\t.map(AssistantMessage::getContent)\n\t\t\t.collect(Collectors.joining());\n\t\tString joke2 = joke2Stream.collectList()\n\t\t\t.block()\n\t\t\t.stream()\n\t\t\t.map(ChatResponse::getResults)\n\t\t\t.flatMap(List::stream)\n\t\t\t.map(Generation::getOutput)\n\t\t\t.map(AssistantMessage::getContent)\n\t\t\t.collect(Collectors.joining());\n\n\t\tassertThat(joke1).isNotBlank();\n\t\tassertThat(joke2).isNotBlank();",
                "is_abstract": "",
                "class_name": "BedrockAnthropicChatClientIT",
                "annotations": []
            },
            {
                "name": "roleTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "UserMessage userMessage = new UserMessage(\n\t\t\t\t\"Tell me about 3 famous pirates from the Golden Age of Piracy and why they did.\");\n\t\tSystemPromptTemplate systemPromptTemplate = new SystemPromptTemplate(systemResource);\n\t\tMessage systemMessage = systemPromptTemplate.createMessage(Map.of(\"name\", \"Bob\", \"voice\", \"pirate\"));\n\n\t\tPrompt prompt = new Prompt(List.of(userMessage, systemMessage));\n\n\t\tChatResponse response = client.call(prompt);\n\n\t\tassertThat(response.getResult().getOutput().getContent()).contains(\"Blackbeard\");",
                "is_abstract": "",
                "class_name": "BedrockAnthropicChatClientIT",
                "annotations": []
            },
            {
                "name": "outputParser",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "DefaultConversionService conversionService = new DefaultConversionService();\n\t\tListOutputParser outputParser = new ListOutputParser(conversionService);\n\n\t\tString format = outputParser.getFormat();\n\t\tString template = \"\"\"\n\t\t\t\tList five {subject}\n\t\t\t\t{format}\n\t\t\t\t\"\"\";\n\t\tPromptTemplate promptTemplate = new PromptTemplate(template,\n\t\t\t\tMap.of(\"subject\", \"ice cream flavors.\", \"format\", format));\n\t\tPrompt prompt = new Prompt(promptTemplate.createMessage());\n\t\tGeneration generation = this.client.call(prompt).getResult();\n\n\t\tList<String> list = outputParser.parse(generation.getOutput().getContent());\n\t\tassertThat(list).hasSize(5);",
                "is_abstract": "",
                "class_name": "BedrockAnthropicChatClientIT",
                "annotations": []
            },
            {
                "name": "mapOutputParser",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "MapOutputParser outputParser = new MapOutputParser();\n\n\t\tString format = outputParser.getFormat();\n\t\tString template = \"\"\"\n\t\t\t\tProvide me a List of {subject}\n\t\t\t\t{format}\n\t\t\t\t\"\"\";\n\t\tPromptTemplate promptTemplate = new PromptTemplate(template,\n\t\t\t\tMap.of(\"subject\", \"an array of numbers from 1 to 9 under they key name 'numbers'\", \"format\", format));\n\t\tPrompt prompt = new Prompt(promptTemplate.createMessage());\n\t\tGeneration generation = client.call(prompt).getResult();\n\n\t\tMap<String, Object> result = outputParser.parse(generation.getOutput().getContent());\n\t\tassertThat(result.get(\"numbers\")).isEqualTo(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9));",
                "is_abstract": "",
                "class_name": "BedrockAnthropicChatClientIT",
                "annotations": []
            },
            {
                "name": "beanOutputParserRecords",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "BeanOutputParser<ActorsFilmsRecord> outputParser = new BeanOutputParser<>(ActorsFilmsRecord.class);\n\n\t\tString format = outputParser.getFormat();\n\t\tString template = \"\"\"\n\t\t\t\tGenerate the filmography of 5 movies for Tom Hanks.\n\t\t\t\tRemove non JSON tex blocks from the output.\n\t\t\t\t{format}\n\t\t\t\tProvide your answer in the JSON format with the feature names as the keys.\n\t\t\t\t\"\"\";\n\t\tPromptTemplate promptTemplate = new PromptTemplate(template, Map.of(\"format\", format));\n\t\tPrompt prompt = new Prompt(promptTemplate.createMessage());\n\t\tGeneration generation = client.call(prompt).getResult();\n\n\t\tActorsFilmsRecord actorsFilms = outputParser.parse(generation.getOutput().getContent());\n\t\tassertThat(actorsFilms.actor()).isEqualTo(\"Tom Hanks\");\n\t\tassertThat(actorsFilms.movies()).hasSize(5);",
                "is_abstract": "",
                "class_name": "BedrockAnthropicChatClientIT",
                "annotations": []
            },
            {
                "name": "beanStreamOutputParserRecords",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "BeanOutputParser<ActorsFilmsRecord> outputParser = new BeanOutputParser<>(ActorsFilmsRecord.class);\n\n\t\tString format = outputParser.getFormat();\n\t\tString template = \"\"\"\n\t\t\t\tGenerate the filmography of 5 movies for Tom Hanks.\n\t\t\t\t{format}\n\t\t\t\tRemove Markdown code blocks from the output.\n\t\t\t\t\"\"\";\n\t\tPromptTemplate promptTemplate = new PromptTemplate(template, Map.of(\"format\", format));\n\t\tPrompt prompt = new Prompt(promptTemplate.createMessage());\n\n\t\tString generationTextFromStream = client.stream(prompt)\n\t\t\t.collectList()\n\t\t\t.block()\n\t\t\t.stream()\n\t\t\t.map(ChatResponse::getResults)\n\t\t\t.flatMap(List::stream)\n\t\t\t.map(Generation::getOutput)\n\t\t\t.map(AssistantMessage::getContent)\n\t\t\t.collect(Collectors.joining());\n\n\t\tActorsFilmsRecord actorsFilms = outputParser.parse(generationTextFromStream);\n\t\tlogger.info(\"\" + actorsFilms);\n\t\tassertThat(actorsFilms.actor()).isEqualTo(\"Tom Hanks\");\n\t\tassertThat(actorsFilms.movies()).hasSize(5);",
                "is_abstract": "",
                "class_name": "BedrockAnthropicChatClientIT",
                "annotations": []
            },
            {
                "name": "anthropicApi",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new AnthropicChatBedrockApi(AnthropicChatBedrockApi.AnthropicChatModel.CLAUDE_V2.id(),\n\t\t\t\t\tEnvironmentVariableCredentialsProvider.create(), Region.US_EAST_1.id(), new ObjectMapper(),\n\t\t\t\t\tDuration.ofMinutes(2));",
                "is_abstract": "",
                "class_name": "BedrockAnthropicChatClientIT TestConfiguration",
                "annotations": []
            },
            {
                "name": "anthropicChatClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new BedrockAnthropicChatClient(anthropicApi);",
                "is_abstract": "",
                "class_name": "BedrockAnthropicChatClientIT TestConfiguration",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/anthropic/BedrockAnthropicCreateRequestTests.java",
        "class_names": [
            "BedrockAnthropicCreateRequestTests"
        ],
        "imports": "import org.springframework.ai.chat.prompt.Prompt;\nimport java.util.List;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport software.amazon.awssdk.regions.Region;\nimport org.springframework.ai.bedrock.anthropic.api.AnthropicChatBedrockApi;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.bedrock.anthropic.api.AnthropicChatBedrockApi.AnthropicChatModel;\nimport java.time.Duration;",
        "package_import_paths": {
            "org.springframework.ai.bedrock.anthropic.BedrockAnthropicCreateRequestTests": "org.springframework.ai.bedrock.anthropic.BedrockAnthropicCreateRequestTests",
            "org.springframework.ai.bedrock.anthropic.createRequestWithChatOptions": "org.springframework.ai.bedrock.anthropic.createRequestWithChatOptions",
            "org.springframework.ai.bedrock.anthropic.anthropicChatApi": "org.springframework.ai.bedrock.anthropic.anthropicChatApi"
        },
        "package": "package org.springframework.ai.bedrock.anthropic;",
        "property_declarations": [
            "private AnthropicChatBedrockApi anthropicChatApi = new AnthropicChatBedrockApi(AnthropicChatModel.CLAUDE_V2.id(),\n\t\t\tRegion.US_EAST_1.id(), Duration.ofMillis(1000L));"
        ],
        "functions": [
            {
                "name": "createRequestWithChatOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var client = new BedrockAnthropicChatClient(anthropicChatApi,\n\t\t\t\tAnthropicChatOptions.builder()\n\t\t\t\t\t.withTemperature(66.6f)\n\t\t\t\t\t.withTopK(66)\n\t\t\t\t\t.withTopP(0.66f)\n\t\t\t\t\t.withMaxTokensToSample(666)\n\t\t\t\t\t.withAnthropicVersion(\"X.Y.Z\")\n\t\t\t\t\t.withStopSequences(List.of(\"stop1\", \"stop2\"))\n\t\t\t\t\t.build());\n\n\t\tvar request = client.createRequest(new Prompt(\"Test message content\"));\n\n\t\tassertThat(request.prompt()).isNotEmpty();\n\t\tassertThat(request.temperature()).isEqualTo(66.6f);\n\t\tassertThat(request.topK()).isEqualTo(66);\n\t\tassertThat(request.topP()).isEqualTo(0.66f);\n\t\tassertThat(request.maxTokensToSample()).isEqualTo(666);\n\t\tassertThat(request.anthropicVersion()).isEqualTo(\"X.Y.Z\");\n\t\tassertThat(request.stopSequences()).containsExactly(\"stop1\", \"stop2\");\n\n\t\trequest = client.createRequest(new Prompt(\"Test message content\",\n\t\t\t\tAnthropicChatOptions.builder()\n\t\t\t\t\t.withTemperature(99.9f)\n\t\t\t\t\t.withTopP(0.99f)\n\t\t\t\t\t.withMaxTokensToSample(999)\n\t\t\t\t\t.withAnthropicVersion(\"zzz\")\n\t\t\t\t\t.withStopSequences(List.of(\"stop3\", \"stop4\"))\n\t\t\t\t\t.build()\n\n\t\t));\n\n\t\tassertThat(request.prompt()).isNotEmpty();\n\t\tassertThat(request.temperature()).isEqualTo(99.9f);\n\t\tassertThat(request.topK()).as(\"unchanged from the default options\").isEqualTo(66);\n\t\tassertThat(request.topP()).isEqualTo(0.99f);\n\t\tassertThat(request.maxTokensToSample()).isEqualTo(999);\n\t\tassertThat(request.anthropicVersion()).isEqualTo(\"zzz\");\n\t\tassertThat(request.stopSequences()).containsExactly(\"stop3\", \"stop4\");",
                "is_abstract": "",
                "class_name": "BedrockAnthropicCreateRequestTests",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/anthropic/api/AnthropicChatBedrockApiIT.java",
        "class_names": [
            "AnthropicChatBedrockApiIT"
        ],
        "imports": "import java.util.stream.Collectors;\nimport java.util.List;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.slf4j.LoggerFactory;\nimport reactor.core.publisher.Flux;\nimport software.amazon.awssdk.regions.Region;\nimport org.slf4j.Logger;\nimport org.springframework.ai.bedrock.anthropic.api.AnthropicChatBedrockApi.AnthropicChatResponse;\nimport org.junit.jupiter.api.Test;\nimport software.amazon.awssdk.auth.credentials.EnvironmentVariableCredentialsProvider;\nimport org.springframework.ai.bedrock.anthropic.api.AnthropicChatBedrockApi.AnthropicChatRequest;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.ai.bedrock.anthropic.api.AnthropicChatBedrockApi.AnthropicChatModel;\nimport java.time.Duration;",
        "package_import_paths": {
            "org.springframework.ai.bedrock.anthropic.api.AnthropicChatBedrockApiIT": "org.springframework.ai.bedrock.anthropic.api.AnthropicChatBedrockApiIT",
            "org.springframework.ai.bedrock.anthropic.api.chatCompletion": "org.springframework.ai.bedrock.anthropic.api.chatCompletion",
            "org.springframework.ai.bedrock.anthropic.api.chatCompletionStream": "org.springframework.ai.bedrock.anthropic.api.chatCompletionStream",
            "org.springframework.ai.bedrock.anthropic.api.logger": "org.springframework.ai.bedrock.anthropic.api.logger",
            "org.springframework.ai.bedrock.anthropic.api.anthropicChatApi": "org.springframework.ai.bedrock.anthropic.api.anthropicChatApi"
        },
        "package": "package org.springframework.ai.bedrock.anthropic.api;",
        "property_declarations": [
            "private final Logger logger = LoggerFactory.getLogger(AnthropicChatBedrockApiIT.class);",
            "private AnthropicChatBedrockApi anthropicChatApi = new AnthropicChatBedrockApi(AnthropicChatModel.CLAUDE_V2.id(),\n\t\t\tEnvironmentVariableCredentialsProvider.create(), Region.US_EAST_1.id(), new ObjectMapper(),\n\t\t\tDuration.ofMinutes(2));"
        ],
        "functions": [
            {
                "name": "chatCompletion",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "AnthropicChatRequest request = AnthropicChatRequest\n\t\t\t.builder(String.format(AnthropicChatBedrockApi.PROMPT_TEMPLATE, \"Name 3 famous pirates\"))\n\t\t\t.withTemperature(0.8f)\n\t\t\t.withMaxTokensToSample(300)\n\t\t\t.withTopK(10)\n\t\t\t.build();\n\n\t\tAnthropicChatResponse response = anthropicChatApi.chatCompletion(request);\n\n\t\tSystem.out.println(response.completion());\n\t\tassertThat(response).isNotNull();\n\t\tassertThat(response.completion()).isNotEmpty();\n\t\tassertThat(response.completion()).contains(\"Blackbeard\");\n\t\tassertThat(response.stopReason()).isEqualTo(\"stop_sequence\");\n\t\tassertThat(response.stop()).isEqualTo(\"\\n\\nHuman:\");\n\t\tassertThat(response.amazonBedrockInvocationMetrics()).isNull();\n\n\t\tlogger.info(\"\" + response);",
                "is_abstract": "",
                "class_name": "AnthropicChatBedrockApiIT",
                "annotations": []
            },
            {
                "name": "chatCompletionStream",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "AnthropicChatRequest request = AnthropicChatRequest\n\t\t\t.builder(String.format(AnthropicChatBedrockApi.PROMPT_TEMPLATE, \"Name 3 famous pirates\"))\n\t\t\t.withTemperature(0.8f)\n\t\t\t.withMaxTokensToSample(300)\n\t\t\t.withTopK(10)\n\t\t\t.withStopSequences(List.of(\"\\n\\nHuman:\"))\n\t\t\t.build();\n\n\t\tFlux<AnthropicChatResponse> responseStream = anthropicChatApi.chatCompletionStream(request);\n\n\t\tList<AnthropicChatResponse> responses = responseStream.collectList().block();\n\t\tassertThat(responses).isNotNull();\n\t\tassertThat(responses).hasSizeGreaterThan(10);\n\t\tassertThat(responses.stream().map(AnthropicChatResponse::completion).collect(Collectors.joining()))\n\t\t\t.contains(\"Blackbeard\");",
                "is_abstract": "",
                "class_name": "AnthropicChatBedrockApiIT",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/titan/BedrockTitanChatCreateRequestTests.java",
        "class_names": [
            "BedrockTitanChatCreateRequestTests"
        ],
        "imports": "import org.springframework.ai.chat.prompt.Prompt;\nimport java.util.List;\nimport org.springframework.ai.bedrock.titan.api.TitanChatBedrockApi;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport software.amazon.awssdk.regions.Region;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.junit.jupiter.api.Test;\nimport software.amazon.awssdk.auth.credentials.EnvironmentVariableCredentialsProvider;\nimport org.springframework.ai.bedrock.titan.api.TitanChatBedrockApi.TitanChatModel;\nimport java.time.Duration;",
        "package_import_paths": {
            "org.springframework.ai.bedrock.titan.BedrockTitanChatCreateRequestTests": "org.springframework.ai.bedrock.titan.BedrockTitanChatCreateRequestTests",
            "org.springframework.ai.bedrock.titan.createRequestWithChatOptions": "org.springframework.ai.bedrock.titan.createRequestWithChatOptions",
            "org.springframework.ai.bedrock.titan.api": "org.springframework.ai.bedrock.titan.api"
        },
        "package": "package org.springframework.ai.bedrock.titan;",
        "property_declarations": [
            "private TitanChatBedrockApi api = new TitanChatBedrockApi(TitanChatModel.TITAN_TEXT_EXPRESS_V1.id(),\n\t\t\tEnvironmentVariableCredentialsProvider.create(), Region.US_EAST_1.id(), new ObjectMapper(),\n\t\t\tDuration.ofMinutes(2));"
        ],
        "functions": [
            {
                "name": "createRequestWithChatOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var client = new BedrockTitanChatClient(api,\n\t\t\t\tBedrockTitanChatOptions.builder()\n\t\t\t\t\t.withTemperature(66.6f)\n\t\t\t\t\t.withTopP(0.66f)\n\t\t\t\t\t.withMaxTokenCount(666)\n\t\t\t\t\t.withStopSequences(List.of(\"stop1\", \"stop2\"))\n\t\t\t\t\t.build());\n\n\t\tvar request = client.createRequest(new Prompt(\"Test message content\"));\n\n\t\tassertThat(request.inputText()).isNotEmpty();\n\t\tassertThat(request.textGenerationConfig().temperature()).isEqualTo(66.6f);\n\t\tassertThat(request.textGenerationConfig().topP()).isEqualTo(0.66f);\n\t\tassertThat(request.textGenerationConfig().maxTokenCount()).isEqualTo(666);\n\t\tassertThat(request.textGenerationConfig().stopSequences()).containsExactly(\"stop1\", \"stop2\");\n\n\t\trequest = client.createRequest(new Prompt(\"Test message content\",\n\t\t\t\tBedrockTitanChatOptions.builder()\n\t\t\t\t\t.withTemperature(99.9f)\n\t\t\t\t\t.withTopP(0.99f)\n\t\t\t\t\t.withMaxTokenCount(999)\n\t\t\t\t\t.withStopSequences(List.of(\"stop3\", \"stop4\"))\n\t\t\t\t\t.build()\n\n\t\t));\n\n\t\tassertThat(request.inputText()).isNotEmpty();\n\t\tassertThat(request.textGenerationConfig().temperature()).isEqualTo(99.9f);\n\t\tassertThat(request.textGenerationConfig().topP()).isEqualTo(0.99f);\n\t\tassertThat(request.textGenerationConfig().maxTokenCount()).isEqualTo(999);\n\t\tassertThat(request.textGenerationConfig().stopSequences()).containsExactly(\"stop3\", \"stop4\");",
                "is_abstract": "",
                "class_name": "BedrockTitanChatCreateRequestTests",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/titan/BedrockTitanChatClientIT.java",
        "class_names": [
            "TestConfiguration",
            "BedrockTitanChatClientIT"
        ],
        "imports": "import java.util.stream.Collectors;\nimport java.util.List;\nimport org.springframework.ai.chat.Generation;\nimport reactor.core.publisher.Flux;\nimport org.springframework.ai.chat.prompt.SystemPromptTemplate;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.junit.jupiter.api.Disabled;\nimport org.springframework.core.io.Resource;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.ai.parser.MapOutputParser;\nimport org.springframework.ai.chat.messages.Message;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport software.amazon.awssdk.regions.Region;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport java.util.Map;\nimport org.springframework.ai.bedrock.titan.api.TitanChatBedrockApi.TitanChatModel;\nimport org.springframework.ai.parser.BeanOutputParser;\nimport org.springframework.beans.factory.annotation.Value;\nimport java.util.Arrays;\nimport org.springframework.ai.chat.ChatResponse;\nimport java.time.Duration;\nimport org.springframework.ai.chat.messages.UserMessage;\nimport org.springframework.ai.bedrock.titan.api.TitanChatBedrockApi;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.ai.parser.ListOutputParser;\nimport org.springframework.ai.chat.prompt.PromptTemplate;\nimport org.springframework.ai.chat.messages.AssistantMessage;\nimport org.springframework.boot.SpringBootConfiguration;\nimport org.springframework.ai.chat.prompt.Prompt;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.springframework.core.convert.support.DefaultConversionService;\nimport org.junit.jupiter.api.Test;\nimport software.amazon.awssdk.auth.credentials.EnvironmentVariableCredentialsProvider;",
        "package_import_paths": {
            "org.springframework.ai.bedrock.titan.BedrockTitanChatClientIT": "org.springframework.ai.bedrock.titan.BedrockTitanChatClientIT",
            "org.springframework.ai.bedrock.titan.TestConfiguration": "org.springframework.ai.bedrock.titan.TestConfiguration",
            "org.springframework.ai.bedrock.titan.multipleStreamAttempts": "org.springframework.ai.bedrock.titan.multipleStreamAttempts",
            "org.springframework.ai.bedrock.titan.roleTest": "org.springframework.ai.bedrock.titan.roleTest",
            "org.springframework.ai.bedrock.titan.Disabled": "org.springframework.ai.bedrock.titan.Disabled",
            "org.springframework.ai.bedrock.titan.titanApi": "org.springframework.ai.bedrock.titan.titanApi",
            "org.springframework.ai.bedrock.titan.titanChatClient": "org.springframework.ai.bedrock.titan.titanChatClient",
            "org.springframework.ai.bedrock.titan.privat": "org.springframework.ai.bedrock.titan.privat",
            "org.springframework.ai.bedrock.titan.systemResour": "org.springframework.ai.bedrock.titan.systemResour"
        },
        "package": "package org.springframework.ai.bedrock.titan;",
        "property_declarations": [
            "@Value(\"classpath:/prompts/system-message.st\")\n\tprivate Resource systemResource;",
            "@Autowired\n\tprivate BedrockTitanChatClient client;"
        ],
        "functions": [
            {
                "name": "multipleStreamAttempts",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Flux<ChatResponse> joke1Stream = client.stream(new Prompt(new UserMessage(\"Tell me a joke?\")));\n\t\tFlux<ChatResponse> joke2Stream = client.stream(new Prompt(new UserMessage(\"Tell me a toy joke?\")));\n\n\t\tString joke1 = joke1Stream.collectList()\n\t\t\t.block()\n\t\t\t.stream()\n\t\t\t.map(ChatResponse::getResults)\n\t\t\t.flatMap(List::stream)\n\t\t\t.map(Generation::getOutput)\n\t\t\t.map(AssistantMessage::getContent)\n\t\t\t.collect(Collectors.joining());\n\t\tString joke2 = joke2Stream.collectList()\n\t\t\t.block()\n\t\t\t.stream()\n\t\t\t.map(ChatResponse::getResults)\n\t\t\t.flatMap(List::stream)\n\t\t\t.map(Generation::getOutput)\n\t\t\t.map(AssistantMessage::getContent)\n\t\t\t.collect(Collectors.joining());\n\n\t\tassertThat(joke1).isNotBlank();\n\t\tassertThat(joke2).isNotBlank();",
                "is_abstract": "",
                "class_name": "BedrockTitanChatClientIT",
                "annotations": []
            },
            {
                "name": "roleTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String request = \"Tell me about 3 famous pirates from the Golden Age of Piracy and why they did.\";\n\t\tString name = \"Bob\";\n\t\tString voice = \"pirate\";\n\t\tUserMessage userMessage = new UserMessage(request);\n\t\tSystemPromptTemplate systemPromptTemplate = new SystemPromptTemplate(systemResource);\n\t\tMessage systemMessage = systemPromptTemplate.createMessage(Map.of(\"name\", name, \"voice\", voice));\n\t\tPrompt prompt = new Prompt(List.of(userMessage, systemMessage));\n\t\tChatResponse response = client.call(prompt);\n\t\tassertThat(response.getResult().getOutput().getContent()).contains(\"Blackbeard\");",
                "is_abstract": "",
                "class_name": "BedrockTitanChatClientIT",
                "annotations": []
            },
            {
                "name": "Disabled",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "DefaultConversionService conversionService = new DefaultConversionService();\n\t\tListOutputParser outputParser = new ListOutputParser(conversionService);\n\n\t\tString format = outputParser.getFormat();\n\t\tString template = \"\"\"\n\t\t\t\tList five {subject}\n\t\t\t\t{format}\n\t\t\t\t\"\"\";\n\t\tPromptTemplate promptTemplate = new PromptTemplate(template,\n\t\t\t\tMap.of(\"subject\", \"ice cream flavors.\", \"format\", format));\n\t\tPrompt prompt = new Prompt(promptTemplate.createMessage());\n\t\tGeneration generation = this.client.call(prompt).getResult();\n\n\t\tList<String> list = outputParser.parse(generation.getOutput().getContent());\n\t\tassertThat(list).hasSize(5);",
                "is_abstract": "",
                "class_name": "BedrockTitanChatClientIT",
                "annotations": [
                    "@Disabled(\"TODO: Fix the parser instructions to return the correct format\")"
                ]
            },
            {
                "name": "titanApi",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new TitanChatBedrockApi(TitanChatModel.TITAN_TEXT_EXPRESS_V1.id(),\n\t\t\t\t\tEnvironmentVariableCredentialsProvider.create(), Region.US_EAST_1.id(), new ObjectMapper(),\n\t\t\t\t\tDuration.ofMinutes(2));",
                "is_abstract": "",
                "class_name": "BedrockTitanChatClientIT TestConfiguration",
                "annotations": []
            },
            {
                "name": "titanChatClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new BedrockTitanChatClient(titanApi);",
                "is_abstract": "",
                "class_name": "BedrockTitanChatClientIT TestConfiguration",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/titan/BedrockTitanEmbeddingClientIT.java",
        "class_names": [
            "TestConfiguration",
            "BedrockTitanEmbeddingClientIT"
        ],
        "imports": "import org.springframework.ai.embedding.EmbeddingResponse;\nimport org.springframework.ai.bedrock.titan.api.TitanEmbeddingBedrockApi;\nimport java.util.List;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport software.amazon.awssdk.regions.Region;\nimport org.springframework.context.annotation.Bean;\nimport java.util.Base64;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.ai.bedrock.titan.api.TitanEmbeddingBedrockApi.TitanEmbeddingModel;\nimport org.springframework.core.io.DefaultResourceLoader;\nimport org.springframework.boot.SpringBootConfiguration;\nimport java.time.Duration;\nimport java.io.IOException;",
        "package_import_paths": {
            "org.springframework.ai.bedrock.titan.BedrockTitanEmbeddingClientIT": "org.springframework.ai.bedrock.titan.BedrockTitanEmbeddingClientIT",
            "org.springframework.ai.bedrock.titan.TestConfiguration": "org.springframework.ai.bedrock.titan.TestConfiguration",
            "org.springframework.ai.bedrock.titan.singleEmbeddin": "org.springframework.ai.bedrock.titan.singleEmbeddin",
            "org.springframework.ai.bedrock.titan.imageEmbeddin": "org.springframework.ai.bedrock.titan.imageEmbeddin",
            "org.springframework.ai.bedrock.titan.titanEmbeddingApi": "org.springframework.ai.bedrock.titan.titanEmbeddingApi",
            "org.springframework.ai.bedrock.titan.titanEmbeddin": "org.springframework.ai.bedrock.titan.titanEmbeddin",
            "org.springframework.ai.bedrock.titan.privat": "org.springframework.ai.bedrock.titan.privat"
        },
        "package": "package org.springframework.ai.bedrock.titan;",
        "property_declarations": [
            "@Autowired\n\tprivate BedrockTitanEmbeddingClient embeddingClient;"
        ],
        "functions": [
            {
                "name": "singleEmbedding",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "assertThat(embeddingClient).isNotNull();\n\t\tEmbeddingResponse embeddingResponse = embeddingClient.embedForResponse(List.of(\"Hello World\"));\n\t\tassertThat(embeddingResponse.getResults()).hasSize(1);\n\t\tassertThat(embeddingResponse.getResults().get(0).getOutput()).isNotEmpty();\n\t\tassertThat(embeddingClient.dimensions()).isEqualTo(1024);",
                "is_abstract": "",
                "class_name": "BedrockTitanEmbeddingClientIT",
                "annotations": []
            },
            {
                "name": "imageEmbedding",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "byte[] image = new DefaultResourceLoader().getResource(\"classpath:/spring_framework.png\")\n\t\t\t.getContentAsByteArray();\n\n\t\tEmbeddingResponse embeddingResponse = embeddingClient\n\t\t\t.embedForResponse(List.of(Base64.getEncoder().encodeToString(image)));\n\t\tassertThat(embeddingResponse.getResults()).hasSize(1);\n\t\tassertThat(embeddingResponse.getResults().get(0).getOutput()).isNotEmpty();\n\t\tassertThat(embeddingClient.dimensions()).isEqualTo(1024);",
                "is_abstract": "",
                "class_name": "BedrockTitanEmbeddingClientIT",
                "annotations": []
            },
            {
                "name": "titanEmbeddingApi",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new TitanEmbeddingBedrockApi(TitanEmbeddingModel.TITAN_EMBED_IMAGE_V1.id(), Region.US_EAST_1.id(),\n\t\t\t\t\tDuration.ofMinutes(2));",
                "is_abstract": "",
                "class_name": "BedrockTitanEmbeddingClientIT TestConfiguration",
                "annotations": []
            },
            {
                "name": "titanEmbedding",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new BedrockTitanEmbeddingClient(titanEmbeddingApi);",
                "is_abstract": "",
                "class_name": "BedrockTitanEmbeddingClientIT TestConfiguration",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/titan/api/TitanChatBedrockApiIT.java",
        "class_names": [
            "TitanChatBedrockApiIT"
        ],
        "imports": "import org.springframework.ai.bedrock.titan.api.TitanChatBedrockApi.TitanChatRequest;\nimport java.util.stream.Collectors;\nimport org.springframework.ai.bedrock.titan.api.TitanChatBedrockApi.TitanChatResponseChunk;\nimport java.util.List;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport software.amazon.awssdk.regions.Region;\nimport reactor.core.publisher.Flux;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.bedrock.titan.api.TitanChatBedrockApi.TitanChatModel;\nimport org.springframework.ai.bedrock.titan.api.TitanChatBedrockApi.TitanChatResponse;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport java.time.Duration;",
        "package_import_paths": {
            "org.springframework.ai.bedrock.titan.api.TitanChatBedrockApiIT": "org.springframework.ai.bedrock.titan.api.TitanChatBedrockApiIT",
            "org.springframework.ai.bedrock.titan.api.chatCompletion": "org.springframework.ai.bedrock.titan.api.chatCompletion",
            "org.springframework.ai.bedrock.titan.api.chatCompletionStream": "org.springframework.ai.bedrock.titan.api.chatCompletionStream",
            "org.springframework.ai.bedrock.titan.api.titanBedrockApi": "org.springframework.ai.bedrock.titan.api.titanBedrockApi",
            "org.springframework.ai.bedrock.titan.api.titanChatRequest": "org.springframework.ai.bedrock.titan.api.titanChatRequest"
        },
        "package": "package org.springframework.ai.bedrock.titan.api;",
        "property_declarations": [
            "TitanChatRequest titanChatRequest = TitanChatRequest.builder(\"Give me the names of 3 famous pirates?\")\n\t\t.withTemperature(0.5f)\n\t\t.withTopP(0.9f)\n\t\t.withMaxTokenCount(100)\n\t\t.withStopSequences(List.of(\"|\"))\n\t\t.build();",
            "TitanChatBedrockApi titanBedrockApi = new TitanChatBedrockApi(TitanChatModel.TITAN_TEXT_EXPRESS_V1.id(),\n\t\t\tRegion.EU_CENTRAL_1.id(), Duration.ofMinutes(2));"
        ],
        "functions": [
            {
                "name": "chatCompletion",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "TitanChatResponse response = titanBedrockApi.chatCompletion(titanChatRequest);\n\t\tassertThat(response.results()).hasSize(1);\n\t\tassertThat(response.results().get(0).outputText()).contains(\"Blackbeard\");",
                "is_abstract": "",
                "class_name": "TitanChatBedrockApiIT",
                "annotations": []
            },
            {
                "name": "chatCompletionStream",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Flux<TitanChatResponseChunk> response = titanBedrockApi.chatCompletionStream(titanChatRequest);\n\t\tList<TitanChatResponseChunk> results = response.collectList().block();\n\n\t\tassertThat(results.stream()\n\t\t\t.map(TitanChatResponseChunk::outputText)\n\t\t\t.collect(Collectors.joining(System.lineSeparator()))).contains(\"Blackbeard\");",
                "is_abstract": "",
                "class_name": "TitanChatBedrockApiIT",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/titan/api/TitanEmbeddingBedrockApiIT.java",
        "class_names": [
            "TitanEmbeddingBedrockApiIT"
        ],
        "imports": "import org.springframework.ai.bedrock.titan.api.TitanEmbeddingBedrockApi.TitanEmbeddingResponse;\nimport org.springframework.ai.bedrock.titan.api.TitanEmbeddingBedrockApi.TitanEmbeddingRequest;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport software.amazon.awssdk.regions.Region;\nimport java.util.Base64;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.ai.bedrock.titan.api.TitanEmbeddingBedrockApi.TitanEmbeddingModel;\nimport org.springframework.core.io.DefaultResourceLoader;\nimport java.time.Duration;\nimport java.io.IOException;",
        "package_import_paths": {
            "org.springframework.ai.bedrock.titan.api.TitanEmbeddingBedrockApiIT": "org.springframework.ai.bedrock.titan.api.TitanEmbeddingBedrockApiIT",
            "org.springframework.ai.bedrock.titan.api.embedText": "org.springframework.ai.bedrock.titan.api.embedText",
            "org.springframework.ai.bedrock.titan.api.embedIm": "org.springframework.ai.bedrock.titan.api.embedIm"
        },
        "package": "package org.springframework.ai.bedrock.titan.api;",
        "property_declarations": [],
        "functions": [
            {
                "name": "embedText",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "TitanEmbeddingBedrockApi titanEmbedApi = new TitanEmbeddingBedrockApi(\n\t\t\t\tTitanEmbeddingModel.TITAN_EMBED_TEXT_V1.id(), Region.US_EAST_1.id(), Duration.ofMinutes(2));\n\n\t\tTitanEmbeddingRequest request = TitanEmbeddingRequest.builder().withInputText(\"I like to eat apples.\").build();\n\n\t\tTitanEmbeddingResponse response = titanEmbedApi.embedding(request);\n\n\t\tassertThat(response).isNotNull();\n\t\tassertThat(response.inputTextTokenCount()).isEqualTo(6);\n\t\tassertThat(response.embedding()).hasSize(1536);",
                "is_abstract": "",
                "class_name": "TitanEmbeddingBedrockApiIT",
                "annotations": []
            },
            {
                "name": "embedImage",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "TitanEmbeddingBedrockApi titanEmbedApi = new TitanEmbeddingBedrockApi(\n\t\t\t\tTitanEmbeddingModel.TITAN_EMBED_IMAGE_V1.id(), Region.US_EAST_1.id(), Duration.ofMinutes(2));\n\n\t\tbyte[] image = new DefaultResourceLoader().getResource(\"classpath:/spring_framework.png\")\n\t\t\t.getContentAsByteArray();\n\n\t\tString imageBase64 = Base64.getEncoder().encodeToString(image);\n\t\tSystem.out.println(imageBase64.length());\n\n\t\tTitanEmbeddingRequest request = TitanEmbeddingRequest.builder().withInputImage(imageBase64).build();\n\n\t\tTitanEmbeddingResponse response = titanEmbedApi.embedding(request);\n\n\t\tassertThat(response).isNotNull();\n\t\tassertThat(response.inputTextTokenCount()).isEqualTo(0); // e.g. image input\n\t\tassertThat(response.embedding()).hasSize(1024);",
                "is_abstract": "",
                "class_name": "TitanEmbeddingBedrockApiIT",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/aot/BedrockRuntimeHintsTests.java",
        "class_names": [
            "BedrockRuntimeHintsTests"
        ],
        "imports": "import org.springframework.ai.bedrock.llama2.api.Llama2ChatBedrockApi;\nimport org.springframework.ai.bedrock.titan.api.TitanChatBedrockApi;\nimport org.springframework.ai.bedrock.cohere.api.CohereEmbeddingBedrockApi;\nimport java.util.List;\nimport org.springframework.aot.hint.RuntimeHints;\nimport org.springframework.ai.bedrock.anthropic.api.AnthropicChatBedrockApi;\nimport static org.assertj.core.api.AssertionsForClassTypes.assertThat;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.bedrock.jurassic2.api.Ai21Jurassic2ChatBedrockApi;\nimport org.springframework.aot.hint.TypeReference;\nimport static org.springframework.aot.hint.predicate.RuntimeHintsPredicates.reflection;\nimport java.util.Arrays;\nimport org.springframework.ai.bedrock.titan.api.TitanEmbeddingBedrockApi;\nimport java.util.Set;\nimport static org.springframework.ai.aot.AiRuntimeHints.findJsonAnnotatedClassesInPackage;\nimport org.springframework.ai.bedrock.cohere.api.CohereChatBedrockApi;",
        "package_import_paths": {
            "org.springframework.ai.bedrock.aot.BedrockRuntimeHintsTests": "org.springframework.ai.bedrock.aot.BedrockRuntimeHintsTests",
            "org.springframework.ai.bedrock.aot.registerHints": "org.springframework.ai.bedrock.aot.registerHints"
        },
        "package": "package org.springframework.ai.bedrock.aot;",
        "property_declarations": [],
        "functions": [
            {
                "name": "registerHints",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "RuntimeHints runtimeHints = new RuntimeHints();\n\t\tBedrockRuntimeHints bedrockRuntimeHints = new BedrockRuntimeHints();\n\t\tbedrockRuntimeHints.registerHints(runtimeHints, null);\n\n\t\tList<Class> classList = Arrays.asList(Ai21Jurassic2ChatBedrockApi.class, CohereChatBedrockApi.class,\n\t\t\t\tCohereEmbeddingBedrockApi.class, Llama2ChatBedrockApi.class, TitanChatBedrockApi.class,\n\t\t\t\tTitanEmbeddingBedrockApi.class, AnthropicChatBedrockApi.class);\n\n\t\tfor (Class aClass : classList) {\n\t\t\tSet<TypeReference> jsonAnnotatedClasses = findJsonAnnotatedClassesInPackage(aClass);\n\t\t\tfor (TypeReference jsonAnnotatedClass : jsonAnnotatedClasses) {\n\t\t\t\tassertThat(runtimeHints).matches(reflection().onType(jsonAnnotatedClass));\n\t\t\t}\n\t\t}",
                "is_abstract": "",
                "class_name": "BedrockRuntimeHintsTests",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/BedrockUsage.java",
        "class_names": [
            "BedrockUsage"
        ],
        "imports": "import org.springframework.ai.chat.metadata.Usage;\nimport org.springframework.ai.bedrock.api.AbstractBedrockApi.AmazonBedrockInvocationMetrics;\nimport org.springframework.util.Assert;",
        "package_import_paths": {
            "org.springframework.ai.bedrock.BedrockUs": "org.springframework.ai.bedrock.BedrockUs",
            "org.springframework.ai.bedrock.from": "org.springframework.ai.bedrock.from",
            "org.springframework.ai.bedrock.getUs": "org.springframework.ai.bedrock.getUs",
            "org.springframework.ai.bedrock.getPromptTokens": "org.springframework.ai.bedrock.getPromptTokens",
            "org.springframework.ai.bedrock.getGenerationTokens": "org.springframework.ai.bedrock.getGenerationTokens",
            "org.springframework.ai.bedrock.toStrin": "org.springframework.ai.bedrock.toStrin",
            "org.springframework.ai.bedrock.us": "org.springframework.ai.bedrock.us"
        },
        "package": "package org.springframework.ai.bedrock;",
        "property_declarations": [
            "private final AmazonBedrockInvocationMetrics usage;"
        ],
        "functions": [
            {
                "name": "from",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new BedrockUsage(usage);",
                "is_abstract": "",
                "class_name": "BedrockUsage",
                "annotations": []
            },
            {
                "name": "getUsage",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.usage;",
                "is_abstract": "",
                "class_name": "BedrockUsage",
                "annotations": []
            },
            {
                "name": "getPromptTokens",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return getUsage().inputTokenCount().longValue();",
                "is_abstract": "",
                "class_name": "BedrockUsage",
                "annotations": []
            },
            {
                "name": "getGenerationTokens",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return getUsage().outputTokenCount().longValue();",
                "is_abstract": "",
                "class_name": "BedrockUsage",
                "annotations": []
            },
            {
                "name": "toString",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return getUsage().toString();",
                "is_abstract": "",
                "class_name": "BedrockUsage",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/MessageToPromptConverter.java",
        "class_names": [
            "MessageToPromptConverter"
        ],
        "imports": "import java.util.stream.Collectors;\nimport org.springframework.ai.chat.messages.Message;\nimport java.util.List;\nimport org.springframework.ai.chat.messages.MessageType;",
        "package_import_paths": {
            "org.springframework.ai.bedrock.MessageToPromptConverter": "org.springframework.ai.bedrock.MessageToPromptConverter",
            "org.springframework.ai.bedrock.creat": "org.springframework.ai.bedrock.creat",
            "org.springframework.ai.bedrock.withHumanPrompt": "org.springframework.ai.bedrock.withHumanPrompt",
            "org.springframework.ai.bedrock.withAssistantPrompt": "org.springframework.ai.bedrock.withAssistantPrompt",
            "org.springframework.ai.bedrock.toPrompt": "org.springframework.ai.bedrock.toPrompt",
            "org.springframework.ai.bedrock.messageToStrin": "org.springframework.ai.bedrock.messageToStrin",
            "org.springframework.ai.bedrock.HUMAN_PROMPT": "org.springframework.ai.bedrock.HUMAN_PROMPT",
            "org.springframework.ai.bedrock.ASSISTANT_PROMPT": "org.springframework.ai.bedrock.ASSISTANT_PROMPT",
            "org.springframework.ai.bedrock.humanPrompt": "org.springframework.ai.bedrock.humanPrompt",
            "org.springframework.ai.bedrock.assistantPrompt": "org.springframework.ai.bedrock.assistantPrompt",
            "org.springframework.ai.bedrock.lineSeparator": "org.springframework.ai.bedrock.lineSeparator"
        },
        "package": "package org.springframework.ai.bedrock;",
        "property_declarations": [
            "private String assistantPrompt = ASSISTANT_PROMPT;",
            "private final String lineSeparator;",
            "private static final String ASSISTANT_PROMPT = \"Assistant:\";",
            "private String humanPrompt = HUMAN_PROMPT;",
            "private static final String HUMAN_PROMPT = \"Human:\";"
        ],
        "functions": [
            {
                "name": "create",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return create(System.lineSeparator());",
                "is_abstract": "",
                "class_name": "MessageToPromptConverter",
                "annotations": []
            },
            {
                "name": "withHumanPrompt",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.humanPrompt = humanPrompt;\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "MessageToPromptConverter",
                "annotations": []
            },
            {
                "name": "withAssistantPrompt",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.assistantPrompt = assistantPrompt;\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "MessageToPromptConverter",
                "annotations": []
            },
            {
                "name": "toPrompt",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "final String systemMessages = messages.stream()\n\t\t\t.filter(message -> message.getMessageType() == MessageType.SYSTEM)\n\t\t\t.map(Message::getContent)\n\t\t\t.collect(Collectors.joining(System.lineSeparator()));\n\n\t\tfinal String userMessages = messages.stream()\n\t\t\t.filter(message -> message.getMessageType() == MessageType.USER\n\t\t\t\t\t|| message.getMessageType() == MessageType.ASSISTANT)\n\t\t\t.map(this::messageToString)\n\t\t\t.collect(Collectors.joining(System.lineSeparator()));\n\n\t\t// Related to: https://github.com/spring-projects/spring-ai/issues/404\n\t\tfinal String prompt = systemMessages + this.lineSeparator + this.lineSeparator + userMessages\n\t\t\t\t+ this.lineSeparator + ASSISTANT_PROMPT;\n\n\t\treturn prompt;",
                "is_abstract": "",
                "class_name": "MessageToPromptConverter",
                "annotations": []
            },
            {
                "name": "messageToString",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "switch (message.getMessageType()) {\n\t\t\tcase SYSTEM:\n\t\t\t\treturn message.getContent();\n\t\t\tcase USER:\n\t\t\t\treturn humanPrompt + \" \" + message.getContent();\n\t\t\tcase ASSISTANT:\n\t\t\t\treturn assistantPrompt + \" \" + message.getContent();\n\t\t\tcase FUNCTION:\n\t\t\t\tthrow new IllegalArgumentException(\"Tool execution results are not supported for Bedrock models\");\n\t\t}\n\n\t\tthrow new IllegalArgumentException(\"Unknown message type: \" + message.getMessageType());",
                "is_abstract": "",
                "class_name": "MessageToPromptConverter",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/cohere/BedrockCohereEmbeddingClient.java",
        "class_names": [
            "BedrockCohereEmbeddingClient"
        ],
        "imports": "import org.springframework.ai.embedding.Embedding;\nimport java.util.List;\nimport org.springframework.ai.embedding.EmbeddingOptions;\nimport org.springframework.ai.bedrock.cohere.api.CohereEmbeddingBedrockApi;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport org.springframework.ai.embedding.AbstractEmbeddingClient;\nimport org.springframework.util.Assert;\nimport org.springframework.ai.bedrock.cohere.api.CohereEmbeddingBedrockApi.CohereEmbeddingRequest;\nimport org.springframework.ai.document.Document;\nimport org.springframework.ai.embedding.EmbeddingRequest;\nimport org.springframework.ai.model.ModelOptionsUtils;\nimport org.springframework.ai.bedrock.cohere.api.CohereEmbeddingBedrockApi.CohereEmbeddingResponse;\nimport org.springframework.ai.embedding.EmbeddingResponse;",
        "package_import_paths": {
            "org.springframework.ai.bedrock.cohere.BedrockCohereEmbeddingClient": "org.springframework.ai.bedrock.cohere.BedrockCohereEmbeddingClient",
            "org.springframework.ai.bedrock.cohere.embed": "org.springframework.ai.bedrock.cohere.embed",
            "org.springframework.ai.bedrock.cohere.call": "org.springframework.ai.bedrock.cohere.call",
            "org.springframework.ai.bedrock.cohere.mergeOptions": "org.springframework.ai.bedrock.cohere.mergeOptions",
            "org.springframework.ai.bedrock.cohere.embeddingApi": "org.springframework.ai.bedrock.cohere.embeddingApi",
            "org.springframework.ai.bedrock.cohere.defaultOptions": "org.springframework.ai.bedrock.cohere.defaultOptions"
        },
        "package": "package org.springframework.ai.bedrock.cohere;",
        "property_declarations": [
            "private final CohereEmbeddingBedrockApi embeddingApi;",
            "private final BedrockCohereEmbeddingOptions defaultOptions;"
        ],
        "functions": [
            {
                "name": "embed",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return embed(document.getContent());",
                "is_abstract": "",
                "class_name": "BedrockCohereEmbeddingClient",
                "annotations": []
            },
            {
                "name": "call",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notEmpty(request.getInstructions(), \"At least one text is required!\");\n\n\t\tfinal BedrockCohereEmbeddingOptions optionsToUse = this.mergeOptions(request.getOptions());\n\n\t\tvar apiRequest = new CohereEmbeddingRequest(request.getInstructions(), optionsToUse.getInputType(),\n\t\t\t\toptionsToUse.getTruncate());\n\t\tCohereEmbeddingResponse apiResponse = this.embeddingApi.embedding(apiRequest);\n\t\tvar indexCounter = new AtomicInteger(0);\n\t\tList<Embedding> embeddings = apiResponse.embeddings()\n\t\t\t.stream()\n\t\t\t.map(e -> new Embedding(e, indexCounter.getAndIncrement()))\n\t\t\t.toList();\n\t\treturn new EmbeddingResponse(embeddings);",
                "is_abstract": "",
                "class_name": "BedrockCohereEmbeddingClient",
                "annotations": []
            },
            {
                "name": "mergeOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "BedrockCohereEmbeddingOptions options = (this.defaultOptions != null) ? this.defaultOptions\n\t\t\t\t: BedrockCohereEmbeddingOptions.builder()\n\t\t\t\t\t.withInputType(CohereEmbeddingRequest.InputType.SEARCH_DOCUMENT)\n\t\t\t\t\t.withTruncate(CohereEmbeddingRequest.Truncate.NONE)\n\t\t\t\t\t.build();\n\n\t\tif (requestOptions != null && !EmbeddingOptions.EMPTY.equals(requestOptions)) {\n\t\t\toptions = ModelOptionsUtils.merge(requestOptions, options, BedrockCohereEmbeddingOptions.class);\n\t\t}\n\n\t\treturn options;",
                "is_abstract": "",
                "class_name": "BedrockCohereEmbeddingClient",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/cohere/BedrockCohereEmbeddingOptions.java",
        "class_names": [
            "Builder",
            "BedrockCohereEmbeddingOptions"
        ],
        "imports": "import org.springframework.ai.embedding.EmbeddingOptions;\nimport com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport org.springframework.ai.bedrock.cohere.api.CohereEmbeddingBedrockApi.CohereEmbeddingRequest.InputType;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport org.springframework.ai.bedrock.cohere.api.CohereEmbeddingBedrockApi.CohereEmbeddingRequest.Truncate;",
        "package_import_paths": {
            "org.springframework.ai.bedrock.cohere.BedrockCohereEmbeddingOptions": "org.springframework.ai.bedrock.cohere.BedrockCohereEmbeddingOptions",
            "org.springframework.ai.bedrock.cohere.Builder": "org.springframework.ai.bedrock.cohere.Builder",
            "org.springframework.ai.bedrock.cohere.builder": "org.springframework.ai.bedrock.cohere.builder",
            "org.springframework.ai.bedrock.cohere.withInputTy": "org.springframework.ai.bedrock.cohere.withInputTy",
            "org.springframework.ai.bedrock.cohere.withTruncat": "org.springframework.ai.bedrock.cohere.withTruncat",
            "org.springframework.ai.bedrock.cohere.build": "org.springframework.ai.bedrock.cohere.build",
            "org.springframework.ai.bedrock.cohere.getInputTy": "org.springframework.ai.bedrock.cohere.getInputTy",
            "org.springframework.ai.bedrock.cohere.setInputTy": "org.springframework.ai.bedrock.cohere.setInputTy",
            "org.springframework.ai.bedrock.cohere.getTruncat": "org.springframework.ai.bedrock.cohere.getTruncat",
            "org.springframework.ai.bedrock.cohere.setTruncat": "org.springframework.ai.bedrock.cohere.setTruncat",
            "org.springframework.ai.bedrock.cohere.inputTy": "org.springframework.ai.bedrock.cohere.inputTy",
            "org.springframework.ai.bedrock.cohere.truncat": "org.springframework.ai.bedrock.cohere.truncat",
            "org.springframework.ai.bedrock.cohere.options": "org.springframework.ai.bedrock.cohere.options"
        },
        "package": "package org.springframework.ai.bedrock.cohere;",
        "property_declarations": [
            "private @JsonProperty(\"input_type\") InputType inputType;",
            "private BedrockCohereEmbeddingOptions options = new BedrockCohereEmbeddingOptions();",
            "private @JsonProperty(\"truncate\") Truncate truncate;"
        ],
        "functions": [
            {
                "name": "builder",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Builder();",
                "is_abstract": "",
                "class_name": "BedrockCohereEmbeddingOptions",
                "annotations": []
            },
            {
                "name": "withInputType",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.setInputType(inputType);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "BedrockCohereEmbeddingOptions Builder",
                "annotations": []
            },
            {
                "name": "withTruncate",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.setTruncate(truncate);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "BedrockCohereEmbeddingOptions Builder",
                "annotations": []
            },
            {
                "name": "build",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.options;",
                "is_abstract": "",
                "class_name": "BedrockCohereEmbeddingOptions Builder",
                "annotations": []
            },
            {
                "name": "getInputType",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.inputType;",
                "is_abstract": "",
                "class_name": "BedrockCohereEmbeddingOptions Builder",
                "annotations": []
            },
            {
                "name": "setInputType",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.inputType = inputType;",
                "is_abstract": "",
                "class_name": "BedrockCohereEmbeddingOptions Builder",
                "annotations": []
            },
            {
                "name": "getTruncate",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.truncate;",
                "is_abstract": "",
                "class_name": "BedrockCohereEmbeddingOptions Builder",
                "annotations": []
            },
            {
                "name": "setTruncate",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.truncate = truncate;",
                "is_abstract": "",
                "class_name": "BedrockCohereEmbeddingOptions Builder",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/cohere/BedrockCohereChatOptions.java",
        "class_names": [
            "BedrockCohereChatOptions",
            "Builder"
        ],
        "imports": "import org.springframework.ai.bedrock.cohere.api.CohereChatBedrockApi.CohereChatRequest.LogitBias;\nimport org.springframework.ai.bedrock.cohere.api.CohereChatBedrockApi.CohereChatRequest.ReturnLikelihoods;\nimport java.util.List;\nimport com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport org.springframework.ai.chat.prompt.ChatOptions;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport org.springframework.ai.bedrock.cohere.api.CohereChatBedrockApi.CohereChatRequest.Truncate;",
        "package_import_paths": {
            "org.springframework.ai.bedrock.cohere.BedrockCohereChatOptions": "org.springframework.ai.bedrock.cohere.BedrockCohereChatOptions",
            "org.springframework.ai.bedrock.cohere.Builder": "org.springframework.ai.bedrock.cohere.Builder",
            "org.springframework.ai.bedrock.cohere.builder": "org.springframework.ai.bedrock.cohere.builder",
            "org.springframework.ai.bedrock.cohere.withTemperatur": "org.springframework.ai.bedrock.cohere.withTemperatur",
            "org.springframework.ai.bedrock.cohere.withTopP": "org.springframework.ai.bedrock.cohere.withTopP",
            "org.springframework.ai.bedrock.cohere.withTopK": "org.springframework.ai.bedrock.cohere.withTopK",
            "org.springframework.ai.bedrock.cohere.withMaxTokens": "org.springframework.ai.bedrock.cohere.withMaxTokens",
            "org.springframework.ai.bedrock.cohere.withStopSequences": "org.springframework.ai.bedrock.cohere.withStopSequences",
            "org.springframework.ai.bedrock.cohere.withReturnLikelihoods": "org.springframework.ai.bedrock.cohere.withReturnLikelihoods",
            "org.springframework.ai.bedrock.cohere.withNumGenerations": "org.springframework.ai.bedrock.cohere.withNumGenerations",
            "org.springframework.ai.bedrock.cohere.withLogitBias": "org.springframework.ai.bedrock.cohere.withLogitBias",
            "org.springframework.ai.bedrock.cohere.withTruncat": "org.springframework.ai.bedrock.cohere.withTruncat",
            "org.springframework.ai.bedrock.cohere.build": "org.springframework.ai.bedrock.cohere.build",
            "org.springframework.ai.bedrock.cohere.getTemperatur": "org.springframework.ai.bedrock.cohere.getTemperatur",
            "org.springframework.ai.bedrock.cohere.setTemperatur": "org.springframework.ai.bedrock.cohere.setTemperatur",
            "org.springframework.ai.bedrock.cohere.getTopP": "org.springframework.ai.bedrock.cohere.getTopP",
            "org.springframework.ai.bedrock.cohere.setTopP": "org.springframework.ai.bedrock.cohere.setTopP",
            "org.springframework.ai.bedrock.cohere.getTopK": "org.springframework.ai.bedrock.cohere.getTopK",
            "org.springframework.ai.bedrock.cohere.setTopK": "org.springframework.ai.bedrock.cohere.setTopK",
            "org.springframework.ai.bedrock.cohere.getMaxTokens": "org.springframework.ai.bedrock.cohere.getMaxTokens",
            "org.springframework.ai.bedrock.cohere.setMaxTokens": "org.springframework.ai.bedrock.cohere.setMaxTokens",
            "org.springframework.ai.bedrock.cohere.getStopSequences": "org.springframework.ai.bedrock.cohere.getStopSequences",
            "org.springframework.ai.bedrock.cohere.setStopSequences": "org.springframework.ai.bedrock.cohere.setStopSequences",
            "org.springframework.ai.bedrock.cohere.getReturnLikelihoods": "org.springframework.ai.bedrock.cohere.getReturnLikelihoods",
            "org.springframework.ai.bedrock.cohere.setReturnLikelihoods": "org.springframework.ai.bedrock.cohere.setReturnLikelihoods",
            "org.springframework.ai.bedrock.cohere.getNumGenerations": "org.springframework.ai.bedrock.cohere.getNumGenerations",
            "org.springframework.ai.bedrock.cohere.setNumGenerations": "org.springframework.ai.bedrock.cohere.setNumGenerations",
            "org.springframework.ai.bedrock.cohere.getLogitBias": "org.springframework.ai.bedrock.cohere.getLogitBias",
            "org.springframework.ai.bedrock.cohere.setLogitBias": "org.springframework.ai.bedrock.cohere.setLogitBias",
            "org.springframework.ai.bedrock.cohere.getTruncat": "org.springframework.ai.bedrock.cohere.getTruncat",
            "org.springframework.ai.bedrock.cohere.setTruncat": "org.springframework.ai.bedrock.cohere.setTruncat",
            "org.springframework.ai.bedrock.cohere.temperatur": "org.springframework.ai.bedrock.cohere.temperatur",
            "org.springframework.ai.bedrock.cohere.topP": "org.springframework.ai.bedrock.cohere.topP",
            "org.springframework.ai.bedrock.cohere.topK": "org.springframework.ai.bedrock.cohere.topK",
            "org.springframework.ai.bedrock.cohere.maxTokens": "org.springframework.ai.bedrock.cohere.maxTokens",
            "org.springframework.ai.bedrock.cohere.stopSequences": "org.springframework.ai.bedrock.cohere.stopSequences",
            "org.springframework.ai.bedrock.cohere.returnLikelihoods": "org.springframework.ai.bedrock.cohere.returnLikelihoods",
            "org.springframework.ai.bedrock.cohere.numGenerations": "org.springframework.ai.bedrock.cohere.numGenerations",
            "org.springframework.ai.bedrock.cohere.logitBias": "org.springframework.ai.bedrock.cohere.logitBias",
            "org.springframework.ai.bedrock.cohere.truncat": "org.springframework.ai.bedrock.cohere.truncat",
            "org.springframework.ai.bedrock.cohere.options": "org.springframework.ai.bedrock.cohere.options"
        },
        "package": "package org.springframework.ai.bedrock.cohere;",
        "property_declarations": [
            "@JsonProperty(\"truncate\") Truncate truncate;",
            "@JsonProperty(\"stop_sequences\") List<String> stopSequences;",
            "@JsonProperty(\"return_likelihoods\") ReturnLikelihoods returnLikelihoods;",
            "@JsonProperty(\"temperature\") Float temperature;",
            "@JsonProperty(\"k\") Integer topK;",
            "@JsonProperty(\"max_tokens\") Integer maxTokens;",
            "private final BedrockCohereChatOptions options = new BedrockCohereChatOptions();",
            "@JsonProperty(\"p\") Float topP;",
            "@JsonProperty(\"num_generations\") Integer numGenerations;",
            "@JsonProperty(\"logit_bias\") LogitBias logitBias;"
        ],
        "functions": [
            {
                "name": "builder",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Builder();",
                "is_abstract": "",
                "class_name": "BedrockCohereChatOptions",
                "annotations": []
            },
            {
                "name": "withTemperature",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.setTemperature(temperature);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "BedrockCohereChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withTopP",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.setTopP(topP);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "BedrockCohereChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withTopK",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.setTopK(topK);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "BedrockCohereChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withMaxTokens",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.setMaxTokens(maxTokens);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "BedrockCohereChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withStopSequences",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.setStopSequences(stopSequences);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "BedrockCohereChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withReturnLikelihoods",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.setReturnLikelihoods(returnLikelihoods);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "BedrockCohereChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withNumGenerations",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.setNumGenerations(numGenerations);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "BedrockCohereChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withLogitBias",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.setLogitBias(logitBias);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "BedrockCohereChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withTruncate",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.setTruncate(truncate);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "BedrockCohereChatOptions Builder",
                "annotations": []
            },
            {
                "name": "build",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.options;",
                "is_abstract": "",
                "class_name": "BedrockCohereChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getTemperature",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.temperature;",
                "is_abstract": "",
                "class_name": "BedrockCohereChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setTemperature",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.temperature = temperature;",
                "is_abstract": "",
                "class_name": "BedrockCohereChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getTopP",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.topP;",
                "is_abstract": "",
                "class_name": "BedrockCohereChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setTopP",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.topP = topP;",
                "is_abstract": "",
                "class_name": "BedrockCohereChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getTopK",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.topK;",
                "is_abstract": "",
                "class_name": "BedrockCohereChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setTopK",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.topK = topK;",
                "is_abstract": "",
                "class_name": "BedrockCohereChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getMaxTokens",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.maxTokens;",
                "is_abstract": "",
                "class_name": "BedrockCohereChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setMaxTokens",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.maxTokens = maxTokens;",
                "is_abstract": "",
                "class_name": "BedrockCohereChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getStopSequences",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.stopSequences;",
                "is_abstract": "",
                "class_name": "BedrockCohereChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setStopSequences",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.stopSequences = stopSequences;",
                "is_abstract": "",
                "class_name": "BedrockCohereChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getReturnLikelihoods",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.returnLikelihoods;",
                "is_abstract": "",
                "class_name": "BedrockCohereChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setReturnLikelihoods",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.returnLikelihoods = returnLikelihoods;",
                "is_abstract": "",
                "class_name": "BedrockCohereChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getNumGenerations",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.numGenerations;",
                "is_abstract": "",
                "class_name": "BedrockCohereChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setNumGenerations",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.numGenerations = numGenerations;",
                "is_abstract": "",
                "class_name": "BedrockCohereChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getLogitBias",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.logitBias;",
                "is_abstract": "",
                "class_name": "BedrockCohereChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setLogitBias",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.logitBias = logitBias;",
                "is_abstract": "",
                "class_name": "BedrockCohereChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getTruncate",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.truncate;",
                "is_abstract": "",
                "class_name": "BedrockCohereChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setTruncate",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.truncate = truncate;",
                "is_abstract": "",
                "class_name": "BedrockCohereChatOptions Builder",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/cohere/BedrockCohereChatClient.java",
        "class_names": [
            "BedrockCohereChatClient"
        ],
        "imports": "import org.springframework.ai.chat.prompt.Prompt;\nimport java.util.List;\nimport org.springframework.ai.chat.Generation;\nimport org.springframework.ai.chat.ChatClient;\nimport reactor.core.publisher.Flux;\nimport org.springframework.ai.chat.StreamingChatClient;\nimport org.springframework.util.Assert;\nimport org.springframework.ai.chat.metadata.Usage;\nimport org.springframework.ai.chat.metadata.ChatGenerationMetadata;\nimport org.springframework.ai.chat.ChatResponse;\nimport org.springframework.ai.model.ModelOptionsUtils;\nimport org.springframework.ai.bedrock.MessageToPromptConverter;\nimport org.springframework.ai.bedrock.BedrockUsage;\nimport org.springframework.ai.chat.prompt.ChatOptions;\nimport org.springframework.ai.bedrock.cohere.api.CohereChatBedrockApi.CohereChatRequest;\nimport org.springframework.ai.bedrock.cohere.api.CohereChatBedrockApi.CohereChatResponse;\nimport org.springframework.ai.bedrock.cohere.api.CohereChatBedrockApi;",
        "package_import_paths": {
            "org.springframework.ai.bedrock.cohere.BedrockCohereChatClient": "org.springframework.ai.bedrock.cohere.BedrockCohereChatClient",
            "org.springframework.ai.bedrock.cohere.call": "org.springframework.ai.bedrock.cohere.call",
            "org.springframework.ai.bedrock.cohere.stream": "org.springframework.ai.bedrock.cohere.stream",
            "org.springframework.ai.bedrock.cohere.createRequest": "org.springframework.ai.bedrock.cohere.createRequest",
            "org.springframework.ai.bedrock.cohere.chatApi": "org.springframework.ai.bedrock.cohere.chatApi",
            "org.springframework.ai.bedrock.cohere.defaultOptions": "org.springframework.ai.bedrock.cohere.defaultOptions"
        },
        "package": "package org.springframework.ai.bedrock.cohere;",
        "property_declarations": [
            "private final CohereChatBedrockApi chatApi;",
            "private final BedrockCohereChatOptions defaultOptions;"
        ],
        "functions": [
            {
                "name": "call",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "CohereChatResponse response = this.chatApi.chatCompletion(this.createRequest(prompt, false));\n\t\tList<Generation> generations = response.generations().stream().map(g -> {\n\t\t\treturn new Generation(g.text());\n\t\t}).toList();\n\n\t\treturn new ChatResponse(generations);",
                "is_abstract": "",
                "class_name": "BedrockCohereChatClient",
                "annotations": []
            },
            {
                "name": "stream",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.chatApi.chatCompletionStream(this.createRequest(prompt, true)).map(g -> {\n\t\t\tif (g.isFinished()) {\n\t\t\t\tString finishReason = g.finishReason().name();\n\t\t\t\tUsage usage = BedrockUsage.from(g.amazonBedrockInvocationMetrics());\n\t\t\t\treturn new ChatResponse(List\n\t\t\t\t\t.of(new Generation(\"\").withGenerationMetadata(ChatGenerationMetadata.from(finishReason, usage))));\n\t\t\t}\n\t\t\treturn new ChatResponse(List.of(new Generation(g.text())));\n\t\t});",
                "is_abstract": "",
                "class_name": "BedrockCohereChatClient",
                "annotations": []
            },
            {
                "name": "createRequest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "final String promptValue = MessageToPromptConverter.create().toPrompt(prompt.getInstructions());\n\n\t\tvar request = CohereChatRequest.builder(promptValue)\n\t\t\t.withTemperature(this.defaultOptions.getTemperature())\n\t\t\t.withTopP(this.defaultOptions.getTopP())\n\t\t\t.withTopK(this.defaultOptions.getTopK())\n\t\t\t.withMaxTokens(this.defaultOptions.getMaxTokens())\n\t\t\t.withStopSequences(this.defaultOptions.getStopSequences())\n\t\t\t.withReturnLikelihoods(this.defaultOptions.getReturnLikelihoods())\n\t\t\t.withStream(stream)\n\t\t\t.withNumGenerations(this.defaultOptions.getNumGenerations())\n\t\t\t.withLogitBias(this.defaultOptions.getLogitBias())\n\t\t\t.withTruncate(this.defaultOptions.getTruncate())\n\t\t\t.build();\n\n\t\tif (prompt.getOptions() != null) {\n\t\t\tif (prompt.getOptions() instanceof ChatOptions runtimeOptions) {\n\t\t\t\tBedrockCohereChatOptions updatedRuntimeOptions = ModelOptionsUtils.copyToTarget(runtimeOptions,\n\t\t\t\t\t\tChatOptions.class, BedrockCohereChatOptions.class);\n\t\t\t\trequest = ModelOptionsUtils.merge(updatedRuntimeOptions, request, CohereChatRequest.class);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new IllegalArgumentException(\"Prompt options are not of type ChatOptions: \"\n\t\t\t\t\t\t+ prompt.getOptions().getClass().getSimpleName());\n\t\t\t}\n\t\t}\n\n\t\treturn request;",
                "is_abstract": "",
                "class_name": "BedrockCohereChatClient",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/cohere/api/CohereEmbeddingBedrockApi.java",
        "class_names": [
            "CohereEmbeddingBedrockApi"
        ],
        "imports": "import java.util.List;\nimport com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.springframework.ai.bedrock.api.AbstractBedrockApi;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport org.springframework.ai.bedrock.cohere.api.CohereEmbeddingBedrockApi.CohereEmbeddingRequest;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\nimport org.springframework.ai.bedrock.cohere.api.CohereEmbeddingBedrockApi.CohereEmbeddingResponse;\nimport java.time.Duration;",
        "package_import_paths": {
            "org.springframework.ai.bedrock.cohere.api.CohereEmbeddingBedrockApi": "org.springframework.ai.bedrock.cohere.api.CohereEmbeddingBedrockApi",
            "org.springframework.ai.bedrock.cohere.api.id": "org.springframework.ai.bedrock.cohere.api.id",
            "org.springframework.ai.bedrock.cohere.api.embeddin": "org.springframework.ai.bedrock.cohere.api.embeddin"
        },
        "package": "package org.springframework.ai.bedrock.cohere.api;",
        "property_declarations": [
            "private final String id;"
        ],
        "functions": [
            {
                "name": "id",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.id;",
                "is_abstract": "",
                "class_name": "CohereEmbeddingBedrockApi",
                "annotations": []
            },
            {
                "name": "embedding",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.internalInvocation(request, CohereEmbeddingResponse.class);",
                "is_abstract": "",
                "class_name": "CohereEmbeddingBedrockApi",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/cohere/api/CohereChatBedrockApi.java",
        "class_names": [
            "Builder",
            "CohereChatBedrockApi"
        ],
        "imports": "import java.util.List;\nimport com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.springframework.ai.bedrock.api.AbstractBedrockApi;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport reactor.core.publisher.Flux;\nimport org.springframework.util.Assert;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\nimport org.springframework.ai.bedrock.cohere.api.CohereChatBedrockApi.CohereChatResponse;\nimport java.time.Duration;\nimport org.springframework.ai.bedrock.cohere.api.CohereChatBedrockApi.CohereChatRequest;",
        "package_import_paths": {
            "org.springframework.ai.bedrock.cohere.api.CohereChatBedrockApi": "org.springframework.ai.bedrock.cohere.api.CohereChatBedrockApi",
            "org.springframework.ai.bedrock.cohere.api.Builder": "org.springframework.ai.bedrock.cohere.api.Builder",
            "org.springframework.ai.bedrock.cohere.api.builder": "org.springframework.ai.bedrock.cohere.api.builder",
            "org.springframework.ai.bedrock.cohere.api.withTemperatur": "org.springframework.ai.bedrock.cohere.api.withTemperatur",
            "org.springframework.ai.bedrock.cohere.api.withTopP": "org.springframework.ai.bedrock.cohere.api.withTopP",
            "org.springframework.ai.bedrock.cohere.api.withTopK": "org.springframework.ai.bedrock.cohere.api.withTopK",
            "org.springframework.ai.bedrock.cohere.api.withMaxTokens": "org.springframework.ai.bedrock.cohere.api.withMaxTokens",
            "org.springframework.ai.bedrock.cohere.api.withStopSequences": "org.springframework.ai.bedrock.cohere.api.withStopSequences",
            "org.springframework.ai.bedrock.cohere.api.withReturnLikelihoods": "org.springframework.ai.bedrock.cohere.api.withReturnLikelihoods",
            "org.springframework.ai.bedrock.cohere.api.withStream": "org.springframework.ai.bedrock.cohere.api.withStream",
            "org.springframework.ai.bedrock.cohere.api.withNumGenerations": "org.springframework.ai.bedrock.cohere.api.withNumGenerations",
            "org.springframework.ai.bedrock.cohere.api.withLogitBias": "org.springframework.ai.bedrock.cohere.api.withLogitBias",
            "org.springframework.ai.bedrock.cohere.api.withTruncat": "org.springframework.ai.bedrock.cohere.api.withTruncat",
            "org.springframework.ai.bedrock.cohere.api.build": "org.springframework.ai.bedrock.cohere.api.build",
            "org.springframework.ai.bedrock.cohere.api.id": "org.springframework.ai.bedrock.cohere.api.id",
            "org.springframework.ai.bedrock.cohere.api.chatCompletion": "org.springframework.ai.bedrock.cohere.api.chatCompletion",
            "org.springframework.ai.bedrock.cohere.api.chatCompletionStream": "org.springframework.ai.bedrock.cohere.api.chatCompletionStream",
            "org.springframework.ai.bedrock.cohere.api.prompt": "org.springframework.ai.bedrock.cohere.api.prompt",
            "org.springframework.ai.bedrock.cohere.api.temperatur": "org.springframework.ai.bedrock.cohere.api.temperatur",
            "org.springframework.ai.bedrock.cohere.api.topP": "org.springframework.ai.bedrock.cohere.api.topP",
            "org.springframework.ai.bedrock.cohere.api.topK": "org.springframework.ai.bedrock.cohere.api.topK",
            "org.springframework.ai.bedrock.cohere.api.maxTokens": "org.springframework.ai.bedrock.cohere.api.maxTokens",
            "org.springframework.ai.bedrock.cohere.api.stopSequences": "org.springframework.ai.bedrock.cohere.api.stopSequences",
            "org.springframework.ai.bedrock.cohere.api.returnLikelihoods": "org.springframework.ai.bedrock.cohere.api.returnLikelihoods",
            "org.springframework.ai.bedrock.cohere.api.stream": "org.springframework.ai.bedrock.cohere.api.stream",
            "org.springframework.ai.bedrock.cohere.api.numGenerations": "org.springframework.ai.bedrock.cohere.api.numGenerations",
            "org.springframework.ai.bedrock.cohere.api.logitBias": "org.springframework.ai.bedrock.cohere.api.logitBias",
            "org.springframework.ai.bedrock.cohere.api.truncat": "org.springframework.ai.bedrock.cohere.api.truncat"
        },
        "package": "package org.springframework.ai.bedrock.cohere.api;",
        "property_declarations": [
            "private Integer numGenerations;",
            "private boolean stream;",
            "private Float topP;",
            "private Integer maxTokens;",
            "private List<String> stopSequences;",
            "private final String id;",
            "private Float temperature;",
            "private ReturnLikelihoods returnLikelihoods;",
            "private Integer topK;",
            "private LogitBias logitBias;",
            "private Truncate truncate;",
            "private final String prompt;"
        ],
        "functions": [
            {
                "name": "builder",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Builder(prompt);",
                "is_abstract": "",
                "class_name": "CohereChatBedrockApi",
                "annotations": []
            },
            {
                "name": "withTemperature",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.temperature = temperature;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "CohereChatBedrockApi Builder",
                "annotations": []
            },
            {
                "name": "withTopP",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.topP = topP;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "CohereChatBedrockApi Builder",
                "annotations": []
            },
            {
                "name": "withTopK",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.topK = topK;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "CohereChatBedrockApi Builder",
                "annotations": []
            },
            {
                "name": "withMaxTokens",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.maxTokens = maxTokens;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "CohereChatBedrockApi Builder",
                "annotations": []
            },
            {
                "name": "withStopSequences",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.stopSequences = stopSequences;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "CohereChatBedrockApi Builder",
                "annotations": []
            },
            {
                "name": "withReturnLikelihoods",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.returnLikelihoods = returnLikelihoods;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "CohereChatBedrockApi Builder",
                "annotations": []
            },
            {
                "name": "withStream",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.stream = stream;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "CohereChatBedrockApi Builder",
                "annotations": []
            },
            {
                "name": "withNumGenerations",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.numGenerations = numGenerations;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "CohereChatBedrockApi Builder",
                "annotations": []
            },
            {
                "name": "withLogitBias",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.logitBias = logitBias;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "CohereChatBedrockApi Builder",
                "annotations": []
            },
            {
                "name": "withTruncate",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.truncate = truncate;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "CohereChatBedrockApi Builder",
                "annotations": []
            },
            {
                "name": "build",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new CohereChatRequest(\n\t\t\t\t\t\tprompt,\n\t\t\t\t\t\ttemperature,\n\t\t\t\t\t\ttopP,\n\t\t\t\t\t\ttopK,\n\t\t\t\t\t\tmaxTokens,\n\t\t\t\t\t\tstopSequences,\n\t\t\t\t\t\treturnLikelihoods,\n\t\t\t\t\t\tstream,\n\t\t\t\t\t\tnumGenerations,\n\t\t\t\t\t\tlogitBias,\n\t\t\t\t\t\ttruncate\n\t\t\t\t);",
                "is_abstract": "",
                "class_name": "CohereChatBedrockApi Builder",
                "annotations": [
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"id\")",
                    "@JsonProperty(\"prompt\")",
                    "@JsonProperty(\"generations\")",
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"id\")",
                    "@JsonProperty(\"likelihood\")",
                    "@JsonProperty(\"token_likelihoods\")",
                    "@JsonProperty(\"finish_reason\")",
                    "@JsonProperty(\"is_finished\")",
                    "@JsonProperty(\"text\")",
                    "@JsonProperty(\"index\")",
                    "@JsonProperty(\"amazon-bedrock-invocationMetrics\")",
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"token\")",
                    "@JsonProperty(\"likelihood\")"
                ]
            },
            {
                "name": "id",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return id;",
                "is_abstract": "",
                "class_name": "CohereChatBedrockApi Builder",
                "annotations": []
            },
            {
                "name": "chatCompletion",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.isTrue(!request.stream(), \"The request must be configured to return the complete response!\");\n\t\treturn this.internalInvocation(request, CohereChatResponse.class);",
                "is_abstract": "",
                "class_name": "CohereChatBedrockApi Builder",
                "annotations": []
            },
            {
                "name": "chatCompletionStream",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.isTrue(request.stream(), \"The request must be configured to stream the response!\");\n\t\treturn this.internalInvocationStream(request, CohereChatResponse.Generation.class);",
                "is_abstract": "",
                "class_name": "CohereChatBedrockApi Builder",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/llama2/BedrockLlama2ChatClient.java",
        "class_names": [
            "BedrockLlama2ChatClient"
        ],
        "imports": "import org.springframework.ai.chat.prompt.Prompt;\nimport java.util.List;\nimport org.springframework.ai.bedrock.llama2.api.Llama2ChatBedrockApi;\nimport org.springframework.ai.chat.Generation;\nimport org.springframework.ai.bedrock.llama2.api.Llama2ChatBedrockApi.Llama2ChatResponse;\nimport reactor.core.publisher.Flux;\nimport org.springframework.ai.chat.ChatClient;\nimport org.springframework.util.Assert;\nimport org.springframework.ai.chat.metadata.Usage;\nimport org.springframework.ai.bedrock.llama2.api.Llama2ChatBedrockApi.Llama2ChatRequest;\nimport org.springframework.ai.model.ModelOptionsUtils;\nimport org.springframework.ai.bedrock.MessageToPromptConverter;\nimport org.springframework.ai.chat.prompt.ChatOptions;\nimport org.springframework.ai.chat.StreamingChatClient;\nimport org.springframework.ai.chat.ChatResponse;\nimport org.springframework.ai.chat.metadata.ChatGenerationMetadata;",
        "package_import_paths": {
            "org.springframework.ai.bedrock.llama2.BedrockLlama2ChatClient": "org.springframework.ai.bedrock.llama2.BedrockLlama2ChatClient",
            "org.springframework.ai.bedrock.llama2.call": "org.springframework.ai.bedrock.llama2.call",
            "org.springframework.ai.bedrock.llama2.stream": "org.springframework.ai.bedrock.llama2.stream",
            "org.springframework.ai.bedrock.llama2.extractUs": "org.springframework.ai.bedrock.llama2.extractUs",
            "org.springframework.ai.bedrock.llama2.getPromptTokens": "org.springframework.ai.bedrock.llama2.getPromptTokens",
            "org.springframework.ai.bedrock.llama2.getGenerationTokens": "org.springframework.ai.bedrock.llama2.getGenerationTokens",
            "org.springframework.ai.bedrock.llama2.createRequest": "org.springframework.ai.bedrock.llama2.createRequest",
            "org.springframework.ai.bedrock.llama2.chatApi": "org.springframework.ai.bedrock.llama2.chatApi",
            "org.springframework.ai.bedrock.llama2.defaultOptions": "org.springframework.ai.bedrock.llama2.defaultOptions"
        },
        "package": "package org.springframework.ai.bedrock.llama2;",
        "property_declarations": [
            "private final BedrockLlama2ChatOptions defaultOptions;",
            "private final Llama2ChatBedrockApi chatApi;"
        ],
        "functions": [
            {
                "name": "call",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var request = createRequest(prompt);\n\n\t\tLlama2ChatResponse response = this.chatApi.chatCompletion(request);\n\n\t\treturn new ChatResponse(List.of(new Generation(response.generation()).withGenerationMetadata(\n\t\t\t\tChatGenerationMetadata.from(response.stopReason().name(), extractUsage(response)))));",
                "is_abstract": "",
                "class_name": "BedrockLlama2ChatClient",
                "annotations": []
            },
            {
                "name": "stream",
                "parameters": [
                    ""
                ],
                "return_type": "null",
                "body": "var request = createRequest(prompt);\n\n\t\tFlux<Llama2ChatResponse> fluxResponse = this.chatApi.chatCompletionStream(request);\n\n\t\treturn fluxResponse.map(response -> {\n\t\t\tString stopReason = response.stopReason() != null ? response.stopReason().name() : null;\n\t\t\treturn new ChatResponse(List.of(new Generation(response.generation())\n\t\t\t\t.withGenerationMetadata(ChatGenerationMetadata.from(stopReason, extractUsage(response)))));\n\t\t});",
                "is_abstract": "",
                "class_name": "BedrockLlama2ChatClient",
                "annotations": []
            },
            {
                "name": "extractUsage",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Usage() {\n\n\t\t\t@Override\n\t\t\tpublic Long getPromptTokens() {\n\t\t\t\treturn response.promptTokenCount().longValue();\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic Long getGenerationTokens() {\n\t\t\t\treturn response.generationTokenCount().longValue();\n\t\t\t}\n\t\t};",
                "is_abstract": "",
                "class_name": "BedrockLlama2ChatClient",
                "annotations": []
            },
            {
                "name": "getPromptTokens",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return response.promptTokenCount().longValue();",
                "is_abstract": "",
                "class_name": "BedrockLlama2ChatClient",
                "annotations": []
            },
            {
                "name": "getGenerationTokens",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return response.generationTokenCount().longValue();",
                "is_abstract": "",
                "class_name": "BedrockLlama2ChatClient",
                "annotations": []
            },
            {
                "name": "createRequest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "final String promptValue = MessageToPromptConverter.create().toPrompt(prompt.getInstructions());\n\n\t\tLlama2ChatRequest request = Llama2ChatRequest.builder(promptValue).build();\n\n\t\tif (this.defaultOptions != null) {\n\t\t\trequest = ModelOptionsUtils.merge(request, this.defaultOptions, Llama2ChatRequest.class);\n\t\t}\n\n\t\tif (prompt.getOptions() != null) {\n\t\t\tif (prompt.getOptions() instanceof ChatOptions runtimeOptions) {\n\t\t\t\tBedrockLlama2ChatOptions updatedRuntimeOptions = ModelOptionsUtils.copyToTarget(runtimeOptions,\n\t\t\t\t\t\tChatOptions.class, BedrockLlama2ChatOptions.class);\n\n\t\t\t\trequest = ModelOptionsUtils.merge(updatedRuntimeOptions, request, Llama2ChatRequest.class);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new IllegalArgumentException(\"Prompt options are not of type ChatOptions: \"\n\t\t\t\t\t\t+ prompt.getOptions().getClass().getSimpleName());\n\t\t\t}\n\t\t}\n\n\t\treturn request;",
                "is_abstract": "",
                "class_name": "BedrockLlama2ChatClient",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/llama2/BedrockLlama2ChatOptions.java",
        "class_names": [
            "Builder",
            "BedrockLlama2ChatOptions"
        ],
        "imports": "import com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.fasterxml.jackson.annotation.JsonIgnore;\nimport org.springframework.ai.chat.prompt.ChatOptions;\nimport com.fasterxml.jackson.annotation.JsonProperty;",
        "package_import_paths": {
            "org.springframework.ai.bedrock.llama2.BedrockLlama2ChatOptions": "org.springframework.ai.bedrock.llama2.BedrockLlama2ChatOptions",
            "org.springframework.ai.bedrock.llama2.Builder": "org.springframework.ai.bedrock.llama2.Builder",
            "org.springframework.ai.bedrock.llama2.builder": "org.springframework.ai.bedrock.llama2.builder",
            "org.springframework.ai.bedrock.llama2.withTemperatur": "org.springframework.ai.bedrock.llama2.withTemperatur",
            "org.springframework.ai.bedrock.llama2.withTopP": "org.springframework.ai.bedrock.llama2.withTopP",
            "org.springframework.ai.bedrock.llama2.withMaxGenLen": "org.springframework.ai.bedrock.llama2.withMaxGenLen",
            "org.springframework.ai.bedrock.llama2.build": "org.springframework.ai.bedrock.llama2.build",
            "org.springframework.ai.bedrock.llama2.getTemperatur": "org.springframework.ai.bedrock.llama2.getTemperatur",
            "org.springframework.ai.bedrock.llama2.setTemperatur": "org.springframework.ai.bedrock.llama2.setTemperatur",
            "org.springframework.ai.bedrock.llama2.getTopP": "org.springframework.ai.bedrock.llama2.getTopP",
            "org.springframework.ai.bedrock.llama2.setTopP": "org.springframework.ai.bedrock.llama2.setTopP",
            "org.springframework.ai.bedrock.llama2.getMaxGenLen": "org.springframework.ai.bedrock.llama2.getMaxGenLen",
            "org.springframework.ai.bedrock.llama2.setMaxGenLen": "org.springframework.ai.bedrock.llama2.setMaxGenLen",
            "org.springframework.ai.bedrock.llama2.getTopK": "org.springframework.ai.bedrock.llama2.getTopK",
            "org.springframework.ai.bedrock.llama2.setTopK": "org.springframework.ai.bedrock.llama2.setTopK",
            "org.springframework.ai.bedrock.llama2.temperatur": "org.springframework.ai.bedrock.llama2.temperatur",
            "org.springframework.ai.bedrock.llama2.topP": "org.springframework.ai.bedrock.llama2.topP",
            "org.springframework.ai.bedrock.llama2.maxGenLen": "org.springframework.ai.bedrock.llama2.maxGenLen",
            "org.springframework.ai.bedrock.llama2.options": "org.springframework.ai.bedrock.llama2.options"
        },
        "package": "package org.springframework.ai.bedrock.llama2;",
        "property_declarations": [
            "private BedrockLlama2ChatOptions options = new BedrockLlama2ChatOptions();",
            "private @JsonProperty(\"temperature\") Float temperature;",
            "private @JsonProperty(\"max_gen_len\") Integer maxGenLen;",
            "private @JsonProperty(\"top_p\") Float topP;"
        ],
        "functions": [
            {
                "name": "builder",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Builder();",
                "is_abstract": "",
                "class_name": "BedrockLlama2ChatOptions",
                "annotations": []
            },
            {
                "name": "withTemperature",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.setTemperature(temperature);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "BedrockLlama2ChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withTopP",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.setTopP(topP);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "BedrockLlama2ChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withMaxGenLen",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.setMaxGenLen(maxGenLen);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "BedrockLlama2ChatOptions Builder",
                "annotations": []
            },
            {
                "name": "build",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.options;",
                "is_abstract": "",
                "class_name": "BedrockLlama2ChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getTemperature",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.temperature;",
                "is_abstract": "",
                "class_name": "BedrockLlama2ChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setTemperature",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.temperature = temperature;",
                "is_abstract": "",
                "class_name": "BedrockLlama2ChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getTopP",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.topP;",
                "is_abstract": "",
                "class_name": "BedrockLlama2ChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setTopP",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.topP = topP;",
                "is_abstract": "",
                "class_name": "BedrockLlama2ChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getMaxGenLen",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.maxGenLen;",
                "is_abstract": "",
                "class_name": "BedrockLlama2ChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setMaxGenLen",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.maxGenLen = maxGenLen;",
                "is_abstract": "",
                "class_name": "BedrockLlama2ChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getTopK",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "throw new UnsupportedOperationException(\"Unsupported option: 'TopK'\");",
                "is_abstract": "",
                "class_name": "BedrockLlama2ChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setTopK",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "throw new UnsupportedOperationException(\"Unsupported option: 'TopK'\");",
                "is_abstract": "",
                "class_name": "BedrockLlama2ChatOptions Builder",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/llama2/api/Llama2ChatBedrockApi.java",
        "class_names": [
            "Builder",
            "Llama2ChatBedrockApi"
        ],
        "imports": "import java.time.Duration;\nimport com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.springframework.ai.bedrock.llama2.api.Llama2ChatBedrockApi.Llama2ChatResponse;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport reactor.core.publisher.Flux;\nimport org.springframework.ai.bedrock.llama2.api.Llama2ChatBedrockApi.Llama2ChatRequest;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\nimport org.springframework.ai.bedrock.api.AbstractBedrockApi;",
        "package_import_paths": {
            "org.springframework.ai.bedrock.llama2.api.Llama2ChatBedrockApi": "org.springframework.ai.bedrock.llama2.api.Llama2ChatBedrockApi",
            "org.springframework.ai.bedrock.llama2.api.Builder": "org.springframework.ai.bedrock.llama2.api.Builder",
            "org.springframework.ai.bedrock.llama2.api.builder": "org.springframework.ai.bedrock.llama2.api.builder",
            "org.springframework.ai.bedrock.llama2.api.withTemperatur": "org.springframework.ai.bedrock.llama2.api.withTemperatur",
            "org.springframework.ai.bedrock.llama2.api.withTopP": "org.springframework.ai.bedrock.llama2.api.withTopP",
            "org.springframework.ai.bedrock.llama2.api.withMaxGenLen": "org.springframework.ai.bedrock.llama2.api.withMaxGenLen",
            "org.springframework.ai.bedrock.llama2.api.build": "org.springframework.ai.bedrock.llama2.api.build",
            "org.springframework.ai.bedrock.llama2.api.id": "org.springframework.ai.bedrock.llama2.api.id",
            "org.springframework.ai.bedrock.llama2.api.chatCompletion": "org.springframework.ai.bedrock.llama2.api.chatCompletion",
            "org.springframework.ai.bedrock.llama2.api.chatCompletionStream": "org.springframework.ai.bedrock.llama2.api.chatCompletionStream",
            "org.springframework.ai.bedrock.llama2.api.prompt": "org.springframework.ai.bedrock.llama2.api.prompt",
            "org.springframework.ai.bedrock.llama2.api.temperatur": "org.springframework.ai.bedrock.llama2.api.temperatur",
            "org.springframework.ai.bedrock.llama2.api.topP": "org.springframework.ai.bedrock.llama2.api.topP",
            "org.springframework.ai.bedrock.llama2.api.maxGenLen": "org.springframework.ai.bedrock.llama2.api.maxGenLen"
        },
        "package": "package org.springframework.ai.bedrock.llama2.api;",
        "property_declarations": [
            "private Float topP;",
            "private final String id;",
            "private Float temperature;",
            "private String prompt;",
            "private Integer maxGenLen;"
        ],
        "functions": [
            {
                "name": "builder",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Builder(prompt);",
                "is_abstract": "",
                "class_name": "Llama2ChatBedrockApi",
                "annotations": []
            },
            {
                "name": "withTemperature",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.temperature = temperature;\n\t\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "Llama2ChatBedrockApi Builder",
                "annotations": []
            },
            {
                "name": "withTopP",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.topP = topP;\n\t\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "Llama2ChatBedrockApi Builder",
                "annotations": []
            },
            {
                "name": "withMaxGenLen",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.maxGenLen = maxGenLen;\n\t\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "Llama2ChatBedrockApi Builder",
                "annotations": []
            },
            {
                "name": "build",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Llama2ChatRequest(\n\t\t\t\t\t\t\tprompt,\n\t\t\t\t\t\t\ttemperature,\n\t\t\t\t\t\t\ttopP,\n\t\t\t\t\t\t\tmaxGenLen\n\t\t\t\t\t);",
                "is_abstract": "",
                "class_name": "Llama2ChatBedrockApi Builder",
                "annotations": [
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"generation\")",
                    "@JsonProperty(\"prompt_token_count\")",
                    "@JsonProperty(\"generation_token_count\")",
                    "@JsonProperty(\"stop_reason\")",
                    "@JsonProperty(\"amazon-bedrock-invocationMetrics\")",
                    "@JsonProperty(\"stop\")",
                    "@JsonProperty(\"length\")"
                ]
            },
            {
                "name": "id",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return id;",
                "is_abstract": "",
                "class_name": "Llama2ChatBedrockApi Builder",
                "annotations": []
            },
            {
                "name": "chatCompletion",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.internalInvocation(request, Llama2ChatResponse.class);",
                "is_abstract": "",
                "class_name": "Llama2ChatBedrockApi Builder",
                "annotations": []
            },
            {
                "name": "chatCompletionStream",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.internalInvocationStream(request, Llama2ChatResponse.class);",
                "is_abstract": "",
                "class_name": "Llama2ChatBedrockApi Builder",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/jurassic2/BedrockAi21Jurassic2ChatOptions.java",
        "class_names": [
            "Builder",
            "BedrockAi21Jurassic2ChatOptions"
        ],
        "imports": "import com.fasterxml.jackson.annotation.JsonInclude;\nimport org.springframework.ai.chat.prompt.ChatOptions;\nimport com.fasterxml.jackson.annotation.JsonProperty;",
        "package_import_paths": {
            "org.springframework.ai.bedrock.jurassic2.BedrockAi21Jurassic2ChatOptions": "org.springframework.ai.bedrock.jurassic2.BedrockAi21Jurassic2ChatOptions",
            "org.springframework.ai.bedrock.jurassic2.Builder": "org.springframework.ai.bedrock.jurassic2.Builder",
            "org.springframework.ai.bedrock.jurassic2.getPrompt": "org.springframework.ai.bedrock.jurassic2.getPrompt",
            "org.springframework.ai.bedrock.jurassic2.setPrompt": "org.springframework.ai.bedrock.jurassic2.setPrompt",
            "org.springframework.ai.bedrock.jurassic2.getNumResults": "org.springframework.ai.bedrock.jurassic2.getNumResults",
            "org.springframework.ai.bedrock.jurassic2.setNumResults": "org.springframework.ai.bedrock.jurassic2.setNumResults",
            "org.springframework.ai.bedrock.jurassic2.getMaxTokens": "org.springframework.ai.bedrock.jurassic2.getMaxTokens",
            "org.springframework.ai.bedrock.jurassic2.setMaxTokens": "org.springframework.ai.bedrock.jurassic2.setMaxTokens",
            "org.springframework.ai.bedrock.jurassic2.getMinTokens": "org.springframework.ai.bedrock.jurassic2.getMinTokens",
            "org.springframework.ai.bedrock.jurassic2.setMinTokens": "org.springframework.ai.bedrock.jurassic2.setMinTokens",
            "org.springframework.ai.bedrock.jurassic2.getTemperatur": "org.springframework.ai.bedrock.jurassic2.getTemperatur",
            "org.springframework.ai.bedrock.jurassic2.setTemperatur": "org.springframework.ai.bedrock.jurassic2.setTemperatur",
            "org.springframework.ai.bedrock.jurassic2.getTopP": "org.springframework.ai.bedrock.jurassic2.getTopP",
            "org.springframework.ai.bedrock.jurassic2.setTopP": "org.springframework.ai.bedrock.jurassic2.setTopP",
            "org.springframework.ai.bedrock.jurassic2.getTopK": "org.springframework.ai.bedrock.jurassic2.getTopK",
            "org.springframework.ai.bedrock.jurassic2.setTopK": "org.springframework.ai.bedrock.jurassic2.setTopK",
            "org.springframework.ai.bedrock.jurassic2.getStopSequences": "org.springframework.ai.bedrock.jurassic2.getStopSequences",
            "org.springframework.ai.bedrock.jurassic2.setStopSequences": "org.springframework.ai.bedrock.jurassic2.setStopSequences",
            "org.springframework.ai.bedrock.jurassic2.getFrequencyPenalty": "org.springframework.ai.bedrock.jurassic2.getFrequencyPenalty",
            "org.springframework.ai.bedrock.jurassic2.setFrequencyPenalty": "org.springframework.ai.bedrock.jurassic2.setFrequencyPenalty",
            "org.springframework.ai.bedrock.jurassic2.getPresencePenalty": "org.springframework.ai.bedrock.jurassic2.getPresencePenalty",
            "org.springframework.ai.bedrock.jurassic2.setPresencePenalty": "org.springframework.ai.bedrock.jurassic2.setPresencePenalty",
            "org.springframework.ai.bedrock.jurassic2.getCountPenalty": "org.springframework.ai.bedrock.jurassic2.getCountPenalty",
            "org.springframework.ai.bedrock.jurassic2.setCountPenalty": "org.springframework.ai.bedrock.jurassic2.setCountPenalty",
            "org.springframework.ai.bedrock.jurassic2.builder": "org.springframework.ai.bedrock.jurassic2.builder",
            "org.springframework.ai.bedrock.jurassic2.withPrompt": "org.springframework.ai.bedrock.jurassic2.withPrompt",
            "org.springframework.ai.bedrock.jurassic2.withNumResults": "org.springframework.ai.bedrock.jurassic2.withNumResults",
            "org.springframework.ai.bedrock.jurassic2.withMaxTokens": "org.springframework.ai.bedrock.jurassic2.withMaxTokens",
            "org.springframework.ai.bedrock.jurassic2.withMinTokens": "org.springframework.ai.bedrock.jurassic2.withMinTokens",
            "org.springframework.ai.bedrock.jurassic2.withTemperatur": "org.springframework.ai.bedrock.jurassic2.withTemperatur",
            "org.springframework.ai.bedrock.jurassic2.withTopP": "org.springframework.ai.bedrock.jurassic2.withTopP",
            "org.springframework.ai.bedrock.jurassic2.withStopSequences": "org.springframework.ai.bedrock.jurassic2.withStopSequences",
            "org.springframework.ai.bedrock.jurassic2.withTopK": "org.springframework.ai.bedrock.jurassic2.withTopK",
            "org.springframework.ai.bedrock.jurassic2.withFrequencyPenalty": "org.springframework.ai.bedrock.jurassic2.withFrequencyPenalty",
            "org.springframework.ai.bedrock.jurassic2.withPresencePenalty": "org.springframework.ai.bedrock.jurassic2.withPresencePenalty",
            "org.springframework.ai.bedrock.jurassic2.withCountPenalty": "org.springframework.ai.bedrock.jurassic2.withCountPenalty",
            "org.springframework.ai.bedrock.jurassic2.build": "org.springframework.ai.bedrock.jurassic2.build",
            "org.springframework.ai.bedrock.jurassic2.scal": "org.springframework.ai.bedrock.jurassic2.scal",
            "org.springframework.ai.bedrock.jurassic2.applyToNumbers": "org.springframework.ai.bedrock.jurassic2.applyToNumbers",
            "org.springframework.ai.bedrock.jurassic2.applyToPunctuations": "org.springframework.ai.bedrock.jurassic2.applyToPunctuations",
            "org.springframework.ai.bedrock.jurassic2.applyToStopwords": "org.springframework.ai.bedrock.jurassic2.applyToStopwords",
            "org.springframework.ai.bedrock.jurassic2.applyToWhitespaces": "org.springframework.ai.bedrock.jurassic2.applyToWhitespaces",
            "org.springframework.ai.bedrock.jurassic2.applyToEmojis": "org.springframework.ai.bedrock.jurassic2.applyToEmojis",
            "org.springframework.ai.bedrock.jurassic2.prompt": "org.springframework.ai.bedrock.jurassic2.prompt",
            "org.springframework.ai.bedrock.jurassic2.numResults": "org.springframework.ai.bedrock.jurassic2.numResults",
            "org.springframework.ai.bedrock.jurassic2.maxTokens": "org.springframework.ai.bedrock.jurassic2.maxTokens",
            "org.springframework.ai.bedrock.jurassic2.minTokens": "org.springframework.ai.bedrock.jurassic2.minTokens",
            "org.springframework.ai.bedrock.jurassic2.temperatur": "org.springframework.ai.bedrock.jurassic2.temperatur",
            "org.springframework.ai.bedrock.jurassic2.topP": "org.springframework.ai.bedrock.jurassic2.topP",
            "org.springframework.ai.bedrock.jurassic2.topK": "org.springframework.ai.bedrock.jurassic2.topK",
            "org.springframework.ai.bedrock.jurassic2.stopSequences": "org.springframework.ai.bedrock.jurassic2.stopSequences",
            "org.springframework.ai.bedrock.jurassic2.frequencyPenalty": "org.springframework.ai.bedrock.jurassic2.frequencyPenalty",
            "org.springframework.ai.bedrock.jurassic2.presencePenalty": "org.springframework.ai.bedrock.jurassic2.presencePenalty",
            "org.springframework.ai.bedrock.jurassic2.countPenalty": "org.springframework.ai.bedrock.jurassic2.countPenalty",
            "org.springframework.ai.bedrock.jurassic2.request": "org.springframework.ai.bedrock.jurassic2.request"
        },
        "package": "package org.springframework.ai.bedrock.jurassic2;",
        "property_declarations": [
            "@JsonProperty(\"minTokens\")\n\tprivate Integer minTokens;",
            "private Boolean applyToPunctuations = true;",
            "@JsonProperty(\"temperature\")\n\tprivate Float temperature;",
            "@JsonProperty(\"maxTokens\")\n\tprivate Integer maxTokens;",
            "@JsonProperty(\"stopSequences\")\n\tprivate String[] stopSequences;",
            "@JsonProperty(\"topP\")\n\tprivate Float topP;",
            "@JsonProperty(\"numResults\")\n\tprivate Integer numResults;",
            "@JsonProperty(\"countPenalty\")\n\tprivate Penalty countPenalty;",
            "@JsonProperty(\"prompt\")\n\tprivate String prompt;",
            "private final BedrockAi21Jurassic2ChatOptions request = new BedrockAi21Jurassic2ChatOptions();",
            "private Boolean applyToNumbers = true;",
            "private Boolean applyToWhitespaces = true;",
            "@JsonProperty(\"presencePenalty\")\n\tprivate Penalty presencePenalty;",
            "private Boolean applyToEmojis = true;",
            "private Float scale;",
            "private Boolean applyToStopwords = true;",
            "@JsonProperty(\"frequencyPenalty\")\n\tprivate Penalty frequencyPenalty;",
            "@JsonProperty(\"topKReturn\")\n\tprivate Integer topK;"
        ],
        "functions": [
            {
                "name": "getPrompt",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return prompt;",
                "is_abstract": "",
                "class_name": "BedrockAi21Jurassic2ChatOptions",
                "annotations": []
            },
            {
                "name": "setPrompt",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.prompt = prompt;",
                "is_abstract": "",
                "class_name": "BedrockAi21Jurassic2ChatOptions",
                "annotations": []
            },
            {
                "name": "getNumResults",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return numResults;",
                "is_abstract": "",
                "class_name": "BedrockAi21Jurassic2ChatOptions",
                "annotations": []
            },
            {
                "name": "setNumResults",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.numResults = numResults;",
                "is_abstract": "",
                "class_name": "BedrockAi21Jurassic2ChatOptions",
                "annotations": []
            },
            {
                "name": "getMaxTokens",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return maxTokens;",
                "is_abstract": "",
                "class_name": "BedrockAi21Jurassic2ChatOptions",
                "annotations": []
            },
            {
                "name": "setMaxTokens",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.maxTokens = maxTokens;",
                "is_abstract": "",
                "class_name": "BedrockAi21Jurassic2ChatOptions",
                "annotations": []
            },
            {
                "name": "getMinTokens",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return minTokens;",
                "is_abstract": "",
                "class_name": "BedrockAi21Jurassic2ChatOptions",
                "annotations": []
            },
            {
                "name": "setMinTokens",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.minTokens = minTokens;",
                "is_abstract": "",
                "class_name": "BedrockAi21Jurassic2ChatOptions",
                "annotations": []
            },
            {
                "name": "getTemperature",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return temperature;",
                "is_abstract": "",
                "class_name": "BedrockAi21Jurassic2ChatOptions",
                "annotations": []
            },
            {
                "name": "setTemperature",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.temperature = temperature;",
                "is_abstract": "",
                "class_name": "BedrockAi21Jurassic2ChatOptions",
                "annotations": []
            },
            {
                "name": "getTopP",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return topP;",
                "is_abstract": "",
                "class_name": "BedrockAi21Jurassic2ChatOptions",
                "annotations": []
            },
            {
                "name": "setTopP",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.topP = topP;",
                "is_abstract": "",
                "class_name": "BedrockAi21Jurassic2ChatOptions",
                "annotations": []
            },
            {
                "name": "getTopK",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return topK;",
                "is_abstract": "",
                "class_name": "BedrockAi21Jurassic2ChatOptions",
                "annotations": []
            },
            {
                "name": "setTopK",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.topK = topK;",
                "is_abstract": "",
                "class_name": "BedrockAi21Jurassic2ChatOptions",
                "annotations": []
            },
            {
                "name": "getStopSequences",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return stopSequences;",
                "is_abstract": "",
                "class_name": "BedrockAi21Jurassic2ChatOptions",
                "annotations": []
            },
            {
                "name": "setStopSequences",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.stopSequences = stopSequences;",
                "is_abstract": "",
                "class_name": "BedrockAi21Jurassic2ChatOptions",
                "annotations": []
            },
            {
                "name": "getFrequencyPenalty",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return frequencyPenalty;",
                "is_abstract": "",
                "class_name": "BedrockAi21Jurassic2ChatOptions",
                "annotations": []
            },
            {
                "name": "setFrequencyPenalty",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.frequencyPenalty = frequencyPenalty;",
                "is_abstract": "",
                "class_name": "BedrockAi21Jurassic2ChatOptions",
                "annotations": []
            },
            {
                "name": "getPresencePenalty",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return presencePenalty;",
                "is_abstract": "",
                "class_name": "BedrockAi21Jurassic2ChatOptions",
                "annotations": []
            },
            {
                "name": "setPresencePenalty",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.presencePenalty = presencePenalty;",
                "is_abstract": "",
                "class_name": "BedrockAi21Jurassic2ChatOptions",
                "annotations": []
            },
            {
                "name": "getCountPenalty",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return countPenalty;",
                "is_abstract": "",
                "class_name": "BedrockAi21Jurassic2ChatOptions",
                "annotations": []
            },
            {
                "name": "setCountPenalty",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.countPenalty = countPenalty;",
                "is_abstract": "",
                "class_name": "BedrockAi21Jurassic2ChatOptions",
                "annotations": []
            },
            {
                "name": "builder",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Builder();",
                "is_abstract": "",
                "class_name": "BedrockAi21Jurassic2ChatOptions",
                "annotations": []
            },
            {
                "name": "withPrompt",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "request.setPrompt(prompt);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "BedrockAi21Jurassic2ChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withNumResults",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "request.setNumResults(numResults);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "BedrockAi21Jurassic2ChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withMaxTokens",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "request.setMaxTokens(maxTokens);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "BedrockAi21Jurassic2ChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withMinTokens",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "request.setMinTokens(minTokens);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "BedrockAi21Jurassic2ChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withTemperature",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "request.setTemperature(temperature);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "BedrockAi21Jurassic2ChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withTopP",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "request.setTopP(topP);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "BedrockAi21Jurassic2ChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withStopSequences",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "request.setStopSequences(stopSequences);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "BedrockAi21Jurassic2ChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withTopK",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "request.setTopK(topKReturn);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "BedrockAi21Jurassic2ChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withFrequencyPenalty",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "request.setFrequencyPenalty(frequencyPenalty);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "BedrockAi21Jurassic2ChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withPresencePenalty",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "request.setPresencePenalty(presencePenalty);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "BedrockAi21Jurassic2ChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withCountPenalty",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "request.setCountPenalty(countPenalty);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "BedrockAi21Jurassic2ChatOptions Builder",
                "annotations": []
            },
            {
                "name": "build",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return request;",
                "is_abstract": "",
                "class_name": "BedrockAi21Jurassic2ChatOptions Builder",
                "annotations": [
                    "@JsonInclude(JsonInclude.Include.NON_NULL)",
                    "@JsonProperty(\"scale\")",
                    "@JsonProperty(\"applyToNumbers\")",
                    "@JsonProperty(\"applyToPunctuations\")",
                    "@JsonProperty(\"applyToStopwords\")",
                    "@JsonProperty(\"applyToWhitespaces\")",
                    "@JsonProperty(\"applyToEmojis\")"
                ]
            },
            {
                "name": "scale",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.scale = scale;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "BedrockAi21Jurassic2ChatOptions Builder Builder",
                "annotations": []
            },
            {
                "name": "applyToNumbers",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.applyToNumbers = applyToNumbers;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "BedrockAi21Jurassic2ChatOptions Builder Builder",
                "annotations": []
            },
            {
                "name": "applyToPunctuations",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.applyToPunctuations = applyToPunctuations;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "BedrockAi21Jurassic2ChatOptions Builder Builder",
                "annotations": []
            },
            {
                "name": "applyToStopwords",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.applyToStopwords = applyToStopwords;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "BedrockAi21Jurassic2ChatOptions Builder Builder",
                "annotations": []
            },
            {
                "name": "applyToWhitespaces",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.applyToWhitespaces = applyToWhitespaces;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "BedrockAi21Jurassic2ChatOptions Builder Builder",
                "annotations": []
            },
            {
                "name": "applyToEmojis",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.applyToEmojis = applyToEmojis;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "BedrockAi21Jurassic2ChatOptions Builder Builder",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/jurassic2/BedrockAi21Jurassic2ChatClient.java",
        "class_names": [
            "Builder",
            "BedrockAi21Jurassic2ChatClient"
        ],
        "imports": "import org.springframework.ai.chat.prompt.Prompt;\nimport org.springframework.ai.chat.Generation;\nimport org.springframework.ai.chat.ChatClient;\nimport org.springframework.util.Assert;\nimport org.springframework.ai.bedrock.jurassic2.api.Ai21Jurassic2ChatBedrockApi;\nimport org.springframework.ai.bedrock.jurassic2.api.Ai21Jurassic2ChatBedrockApi.Ai21Jurassic2ChatRequest;\nimport org.springframework.ai.model.ModelOptionsUtils;\nimport org.springframework.ai.bedrock.MessageToPromptConverter;\nimport org.springframework.ai.chat.prompt.ChatOptions;\nimport org.springframework.ai.chat.ChatResponse;\nimport org.springframework.ai.chat.metadata.ChatGenerationMetadata;",
        "package_import_paths": {
            "org.springframework.ai.bedrock.jurassic2.BedrockAi21Jurassic2ChatClient": "org.springframework.ai.bedrock.jurassic2.BedrockAi21Jurassic2ChatClient",
            "org.springframework.ai.bedrock.jurassic2.Builder": "org.springframework.ai.bedrock.jurassic2.Builder",
            "org.springframework.ai.bedrock.jurassic2.call": "org.springframework.ai.bedrock.jurassic2.call",
            "org.springframework.ai.bedrock.jurassic2.createRequest": "org.springframework.ai.bedrock.jurassic2.createRequest",
            "org.springframework.ai.bedrock.jurassic2.builder": "org.springframework.ai.bedrock.jurassic2.builder",
            "org.springframework.ai.bedrock.jurassic2.withOptions": "org.springframework.ai.bedrock.jurassic2.withOptions",
            "org.springframework.ai.bedrock.jurassic2.build": "org.springframework.ai.bedrock.jurassic2.build",
            "org.springframework.ai.bedrock.jurassic2.chatApi": "org.springframework.ai.bedrock.jurassic2.chatApi",
            "org.springframework.ai.bedrock.jurassic2.defaultOptions": "org.springframework.ai.bedrock.jurassic2.defaultOptions",
            "org.springframework.ai.bedrock.jurassic2.options": "org.springframework.ai.bedrock.jurassic2.options"
        },
        "package": "package org.springframework.ai.bedrock.jurassic2;",
        "property_declarations": [
            "private final Ai21Jurassic2ChatBedrockApi chatApi;",
            "private final BedrockAi21Jurassic2ChatOptions defaultOptions;",
            "private BedrockAi21Jurassic2ChatOptions options;"
        ],
        "functions": [
            {
                "name": "call",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var request = createRequest(prompt);\n\t\tvar response = this.chatApi.chatCompletion(request);\n\n\t\treturn new ChatResponse(response.completions()\n\t\t\t.stream()\n\t\t\t.map(completion -> new Generation(completion.data().text())\n\t\t\t\t.withGenerationMetadata(ChatGenerationMetadata.from(completion.finishReason().reason(), null)))\n\t\t\t.toList());",
                "is_abstract": "",
                "class_name": "BedrockAi21Jurassic2ChatClient",
                "annotations": []
            },
            {
                "name": "createRequest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "final String promptValue = MessageToPromptConverter.create().toPrompt(prompt.getInstructions());\n\n\t\tAi21Jurassic2ChatRequest request = Ai21Jurassic2ChatRequest.builder(promptValue).build();\n\n\t\tif (prompt.getOptions() != null) {\n\t\t\tif (prompt.getOptions() instanceof ChatOptions runtimeOptions) {\n\t\t\t\tBedrockAi21Jurassic2ChatOptions updatedRuntimeOptions = ModelOptionsUtils.copyToTarget(runtimeOptions,\n\t\t\t\t\t\tChatOptions.class, BedrockAi21Jurassic2ChatOptions.class);\n\t\t\t\trequest = ModelOptionsUtils.merge(updatedRuntimeOptions, request, Ai21Jurassic2ChatRequest.class);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new IllegalArgumentException(\"Prompt options are not of type ChatOptions: \"\n\t\t\t\t\t\t+ prompt.getOptions().getClass().getSimpleName());\n\t\t\t}\n\t\t}\n\n\t\tif (this.defaultOptions != null) {\n\t\t\trequest = ModelOptionsUtils.merge(request, this.defaultOptions, Ai21Jurassic2ChatRequest.class);\n\t\t}\n\n\t\treturn request;",
                "is_abstract": "",
                "class_name": "BedrockAi21Jurassic2ChatClient",
                "annotations": []
            },
            {
                "name": "builder",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Builder(chatApi);",
                "is_abstract": "",
                "class_name": "BedrockAi21Jurassic2ChatClient",
                "annotations": []
            },
            {
                "name": "withOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options = options;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "BedrockAi21Jurassic2ChatClient Builder",
                "annotations": []
            },
            {
                "name": "build",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new BedrockAi21Jurassic2ChatClient(chatApi,\n\t\t\t\t\toptions != null ? options : BedrockAi21Jurassic2ChatOptions.builder().build());",
                "is_abstract": "",
                "class_name": "BedrockAi21Jurassic2ChatClient Builder",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/jurassic2/api/Ai21Jurassic2ChatBedrockApi.java",
        "class_names": [
            "Builder",
            "Ai21Jurassic2ChatBedrockApi"
        ],
        "imports": "import java.util.List;\nimport com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.springframework.ai.bedrock.api.AbstractBedrockApi;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport org.springframework.ai.bedrock.jurassic2.api.Ai21Jurassic2ChatBedrockApi.Ai21Jurassic2ChatRequest;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport org.springframework.ai.bedrock.jurassic2.api.Ai21Jurassic2ChatBedrockApi.Ai21Jurassic2ChatResponse;\nimport software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\nimport java.time.Duration;",
        "package_import_paths": {
            "org.springframework.ai.bedrock.jurassic2.api.Ai21Jurassic2ChatBedrockApi": "org.springframework.ai.bedrock.jurassic2.api.Ai21Jurassic2ChatBedrockApi",
            "org.springframework.ai.bedrock.jurassic2.api.Builder": "org.springframework.ai.bedrock.jurassic2.api.Builder",
            "org.springframework.ai.bedrock.jurassic2.api.builder": "org.springframework.ai.bedrock.jurassic2.api.builder",
            "org.springframework.ai.bedrock.jurassic2.api.withTemperatur": "org.springframework.ai.bedrock.jurassic2.api.withTemperatur",
            "org.springframework.ai.bedrock.jurassic2.api.withTopP": "org.springframework.ai.bedrock.jurassic2.api.withTopP",
            "org.springframework.ai.bedrock.jurassic2.api.withMaxTokens": "org.springframework.ai.bedrock.jurassic2.api.withMaxTokens",
            "org.springframework.ai.bedrock.jurassic2.api.withStopSequences": "org.springframework.ai.bedrock.jurassic2.api.withStopSequences",
            "org.springframework.ai.bedrock.jurassic2.api.withCountPenalty": "org.springframework.ai.bedrock.jurassic2.api.withCountPenalty",
            "org.springframework.ai.bedrock.jurassic2.api.withPresencePenalty": "org.springframework.ai.bedrock.jurassic2.api.withPresencePenalty",
            "org.springframework.ai.bedrock.jurassic2.api.withFrequencyPenalty": "org.springframework.ai.bedrock.jurassic2.api.withFrequencyPenalty",
            "org.springframework.ai.bedrock.jurassic2.api.build": "org.springframework.ai.bedrock.jurassic2.api.build",
            "org.springframework.ai.bedrock.jurassic2.api.id": "org.springframework.ai.bedrock.jurassic2.api.id",
            "org.springframework.ai.bedrock.jurassic2.api.chatCompletion": "org.springframework.ai.bedrock.jurassic2.api.chatCompletion",
            "org.springframework.ai.bedrock.jurassic2.api.prompt": "org.springframework.ai.bedrock.jurassic2.api.prompt",
            "org.springframework.ai.bedrock.jurassic2.api.temperatur": "org.springframework.ai.bedrock.jurassic2.api.temperatur",
            "org.springframework.ai.bedrock.jurassic2.api.topP": "org.springframework.ai.bedrock.jurassic2.api.topP",
            "org.springframework.ai.bedrock.jurassic2.api.maxTokens": "org.springframework.ai.bedrock.jurassic2.api.maxTokens",
            "org.springframework.ai.bedrock.jurassic2.api.stopSequences": "org.springframework.ai.bedrock.jurassic2.api.stopSequences",
            "org.springframework.ai.bedrock.jurassic2.api.countPenalty": "org.springframework.ai.bedrock.jurassic2.api.countPenalty",
            "org.springframework.ai.bedrock.jurassic2.api.presencePenalty": "org.springframework.ai.bedrock.jurassic2.api.presencePenalty",
            "org.springframework.ai.bedrock.jurassic2.api.frequencyPenalty": "org.springframework.ai.bedrock.jurassic2.api.frequencyPenalty"
        },
        "package": "package org.springframework.ai.bedrock.jurassic2.api;",
        "property_declarations": [
            "private IntegerScalePenalty frequencyPenalty;",
            "private Float topP;",
            "private Integer maxTokens;",
            "private List<String> stopSequences;",
            "private final String id;",
            "private Float temperature;",
            "private IntegerScalePenalty countPenalty;",
            "private String prompt;",
            "private FloatScalePenalty presencePenalty;"
        ],
        "functions": [
            {
                "name": "builder",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Builder(prompt);",
                "is_abstract": "",
                "class_name": "Ai21Jurassic2ChatBedrockApi",
                "annotations": []
            },
            {
                "name": "withTemperature",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.temperature = temperature;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "Ai21Jurassic2ChatBedrockApi Builder",
                "annotations": []
            },
            {
                "name": "withTopP",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.topP = topP;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "Ai21Jurassic2ChatBedrockApi Builder",
                "annotations": []
            },
            {
                "name": "withMaxTokens",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.maxTokens = maxTokens;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "Ai21Jurassic2ChatBedrockApi Builder",
                "annotations": []
            },
            {
                "name": "withStopSequences",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.stopSequences = stopSequences;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "Ai21Jurassic2ChatBedrockApi Builder",
                "annotations": []
            },
            {
                "name": "withCountPenalty",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.countPenalty = countPenalty;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "Ai21Jurassic2ChatBedrockApi Builder",
                "annotations": []
            },
            {
                "name": "withPresencePenalty",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.presencePenalty = presencePenalty;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "Ai21Jurassic2ChatBedrockApi Builder",
                "annotations": []
            },
            {
                "name": "withFrequencyPenalty",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.frequencyPenalty = frequencyPenalty;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "Ai21Jurassic2ChatBedrockApi Builder",
                "annotations": []
            },
            {
                "name": "build",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Ai21Jurassic2ChatRequest(\n\t\t\t\t\t\tprompt,\n\t\t\t\t\t\ttemperature,\n\t\t\t\t\t\ttopP,\n\t\t\t\t\t\tmaxTokens,\n\t\t\t\t\t\tstopSequences,\n\t\t\t\t\t\tcountPenalty,\n\t\t\t\t\t\tpresencePenalty,\n\t\t\t\t\t\tfrequencyPenalty\n\t\t\t\t);",
                "is_abstract": "",
                "class_name": "Ai21Jurassic2ChatBedrockApi Builder",
                "annotations": [
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"id\")",
                    "@JsonProperty(\"prompt\")",
                    "@JsonProperty(\"completions\")",
                    "@JsonProperty(\"amazon-bedrock-invocationMetrics\")",
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"data\")",
                    "@JsonProperty(\"finishReason\")",
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"generatedToken\")",
                    "@JsonProperty(\"topTokens\")",
                    "@JsonProperty(\"textRange\")",
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"token\")",
                    "@JsonProperty(\"logprob\")",
                    "@JsonProperty(\"raw_logprob\")",
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"token\")",
                    "@JsonProperty(\"logprob\")",
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"start\")",
                    "@JsonProperty(\"end\")",
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"text\")",
                    "@JsonProperty(\"tokens\")",
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"reason\")",
                    "@JsonProperty(\"length\")",
                    "@JsonProperty(\"sequence\")"
                ]
            },
            {
                "name": "id",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return id;",
                "is_abstract": "",
                "class_name": "Ai21Jurassic2ChatBedrockApi Builder",
                "annotations": []
            },
            {
                "name": "chatCompletion",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.internalInvocation(request, Ai21Jurassic2ChatResponse.class);",
                "is_abstract": "",
                "class_name": "Ai21Jurassic2ChatBedrockApi Builder",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/anthropic3/Anthropic3ChatOptions.java",
        "class_names": [
            "Builder",
            "Anthropic3ChatOptions"
        ],
        "imports": "import java.util.List;\nimport com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport org.springframework.ai.chat.prompt.ChatOptions;\nimport com.fasterxml.jackson.annotation.JsonProperty;",
        "package_import_paths": {
            "org.springframework.ai.bedrock.anthropic3.Anthropic3ChatOptions": "org.springframework.ai.bedrock.anthropic3.Anthropic3ChatOptions",
            "org.springframework.ai.bedrock.anthropic3.Builder": "org.springframework.ai.bedrock.anthropic3.Builder",
            "org.springframework.ai.bedrock.anthropic3.builder": "org.springframework.ai.bedrock.anthropic3.builder",
            "org.springframework.ai.bedrock.anthropic3.withTemperatur": "org.springframework.ai.bedrock.anthropic3.withTemperatur",
            "org.springframework.ai.bedrock.anthropic3.withMaxTokens": "org.springframework.ai.bedrock.anthropic3.withMaxTokens",
            "org.springframework.ai.bedrock.anthropic3.withTopK": "org.springframework.ai.bedrock.anthropic3.withTopK",
            "org.springframework.ai.bedrock.anthropic3.withTopP": "org.springframework.ai.bedrock.anthropic3.withTopP",
            "org.springframework.ai.bedrock.anthropic3.withStopSequences": "org.springframework.ai.bedrock.anthropic3.withStopSequences",
            "org.springframework.ai.bedrock.anthropic3.withAnthropicVersion": "org.springframework.ai.bedrock.anthropic3.withAnthropicVersion",
            "org.springframework.ai.bedrock.anthropic3.build": "org.springframework.ai.bedrock.anthropic3.build",
            "org.springframework.ai.bedrock.anthropic3.getTemperatur": "org.springframework.ai.bedrock.anthropic3.getTemperatur",
            "org.springframework.ai.bedrock.anthropic3.setTemperatur": "org.springframework.ai.bedrock.anthropic3.setTemperatur",
            "org.springframework.ai.bedrock.anthropic3.getMaxTokens": "org.springframework.ai.bedrock.anthropic3.getMaxTokens",
            "org.springframework.ai.bedrock.anthropic3.setMaxTokens": "org.springframework.ai.bedrock.anthropic3.setMaxTokens",
            "org.springframework.ai.bedrock.anthropic3.getTopK": "org.springframework.ai.bedrock.anthropic3.getTopK",
            "org.springframework.ai.bedrock.anthropic3.setTopK": "org.springframework.ai.bedrock.anthropic3.setTopK",
            "org.springframework.ai.bedrock.anthropic3.getTopP": "org.springframework.ai.bedrock.anthropic3.getTopP",
            "org.springframework.ai.bedrock.anthropic3.setTopP": "org.springframework.ai.bedrock.anthropic3.setTopP",
            "org.springframework.ai.bedrock.anthropic3.getStopSequences": "org.springframework.ai.bedrock.anthropic3.getStopSequences",
            "org.springframework.ai.bedrock.anthropic3.setStopSequences": "org.springframework.ai.bedrock.anthropic3.setStopSequences",
            "org.springframework.ai.bedrock.anthropic3.getAnthropicVersion": "org.springframework.ai.bedrock.anthropic3.getAnthropicVersion",
            "org.springframework.ai.bedrock.anthropic3.setAnthropicVersion": "org.springframework.ai.bedrock.anthropic3.setAnthropicVersion",
            "org.springframework.ai.bedrock.anthropic3.temperatur": "org.springframework.ai.bedrock.anthropic3.temperatur",
            "org.springframework.ai.bedrock.anthropic3.maxTokens": "org.springframework.ai.bedrock.anthropic3.maxTokens",
            "org.springframework.ai.bedrock.anthropic3.topK": "org.springframework.ai.bedrock.anthropic3.topK",
            "org.springframework.ai.bedrock.anthropic3.topP": "org.springframework.ai.bedrock.anthropic3.topP",
            "org.springframework.ai.bedrock.anthropic3.stopSequences": "org.springframework.ai.bedrock.anthropic3.stopSequences",
            "org.springframework.ai.bedrock.anthropic3.anthropicVersion": "org.springframework.ai.bedrock.anthropic3.anthropicVersion",
            "org.springframework.ai.bedrock.anthropic3.options": "org.springframework.ai.bedrock.anthropic3.options"
        },
        "package": "package org.springframework.ai.bedrock.anthropic3;",
        "property_declarations": [
            "private @JsonProperty(\"top_k\") Integer topK;",
            "private @JsonProperty(\"temperature\") Float temperature;",
            "private @JsonProperty(\"stop_sequences\") List<String> stopSequences;",
            "private @JsonProperty(\"max_tokens\") Integer maxTokens;",
            "private @JsonProperty(\"anthropic_version\") String anthropicVersion;",
            "private final Anthropic3ChatOptions options = new Anthropic3ChatOptions();",
            "private @JsonProperty(\"top_p\") Float topP;"
        ],
        "functions": [
            {
                "name": "builder",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Builder();",
                "is_abstract": "",
                "class_name": "Anthropic3ChatOptions",
                "annotations": []
            },
            {
                "name": "withTemperature",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.setTemperature(temperature);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "Anthropic3ChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withMaxTokens",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.setMaxTokens(maxTokens);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "Anthropic3ChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withTopK",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.setTopK(topK);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "Anthropic3ChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withTopP",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.setTopP(topP);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "Anthropic3ChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withStopSequences",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.setStopSequences(stopSequences);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "Anthropic3ChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withAnthropicVersion",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.setAnthropicVersion(anthropicVersion);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "Anthropic3ChatOptions Builder",
                "annotations": []
            },
            {
                "name": "build",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.options;",
                "is_abstract": "",
                "class_name": "Anthropic3ChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getTemperature",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.temperature;",
                "is_abstract": "",
                "class_name": "Anthropic3ChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setTemperature",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.temperature = temperature;",
                "is_abstract": "",
                "class_name": "Anthropic3ChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getMaxTokens",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.maxTokens;",
                "is_abstract": "",
                "class_name": "Anthropic3ChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setMaxTokens",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.maxTokens = maxTokens;",
                "is_abstract": "",
                "class_name": "Anthropic3ChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getTopK",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.topK;",
                "is_abstract": "",
                "class_name": "Anthropic3ChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setTopK",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.topK = topK;",
                "is_abstract": "",
                "class_name": "Anthropic3ChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getTopP",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.topP;",
                "is_abstract": "",
                "class_name": "Anthropic3ChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setTopP",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.topP = topP;",
                "is_abstract": "",
                "class_name": "Anthropic3ChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getStopSequences",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.stopSequences;",
                "is_abstract": "",
                "class_name": "Anthropic3ChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setStopSequences",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.stopSequences = stopSequences;",
                "is_abstract": "",
                "class_name": "Anthropic3ChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getAnthropicVersion",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.anthropicVersion;",
                "is_abstract": "",
                "class_name": "Anthropic3ChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setAnthropicVersion",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.anthropicVersion = anthropicVersion;",
                "is_abstract": "",
                "class_name": "Anthropic3ChatOptions Builder",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/anthropic3/BedrockAnthropic3ChatClient.java",
        "class_names": [
            "BedrockAnthropic3ChatClient"
        ],
        "imports": "import java.util.concurrent.atomic.AtomicReference;\nimport java.util.stream.Collectors;\nimport java.util.List;\nimport org.springframework.ai.chat.Generation;\nimport org.springframework.ai.chat.ChatClient;\nimport reactor.core.publisher.Flux;\nimport java.util.Base64;\nimport org.springframework.util.CollectionUtils;\nimport org.springframework.ai.chat.messages.Message;\nimport org.springframework.ai.bedrock.anthropic3.api.Anthropic3ChatBedrockApi;\nimport org.springframework.ai.chat.prompt.ChatOptions;\nimport org.springframework.ai.chat.ChatResponse;\nimport org.springframework.ai.chat.messages.MessageType;\nimport org.springframework.ai.bedrock.anthropic3.api.Anthropic3ChatBedrockApi.AnthropicChatResponse;\nimport org.springframework.ai.bedrock.anthropic3.api.Anthropic3ChatBedrockApi.ChatCompletionMessage.Role;\nimport org.springframework.ai.bedrock.anthropic3.api.Anthropic3ChatBedrockApi.AnthropicChatStreamingResponse.StreamingType;\nimport org.springframework.ai.bedrock.anthropic3.api.Anthropic3ChatBedrockApi.AnthropicChatRequest;\nimport org.springframework.ai.bedrock.anthropic3.api.Anthropic3ChatBedrockApi.ChatCompletionMessage;\nimport org.springframework.ai.model.ModelOptionsUtils;\nimport org.springframework.ai.bedrock.anthropic3.api.Anthropic3ChatBedrockApi.MediaContent;\nimport java.util.ArrayList;\nimport org.springframework.ai.chat.prompt.Prompt;\nimport org.springframework.ai.chat.StreamingChatClient;\nimport org.springframework.ai.chat.metadata.ChatGenerationMetadata;",
        "package_import_paths": {
            "org.springframework.ai.bedrock.anthropic3.BedrockAnthropic3ChatClient": "org.springframework.ai.bedrock.anthropic3.BedrockAnthropic3ChatClient",
            "org.springframework.ai.bedrock.anthropic3.call": "org.springframework.ai.bedrock.anthropic3.call",
            "org.springframework.ai.bedrock.anthropic3.stream": "org.springframework.ai.bedrock.anthropic3.stream",
            "org.springframework.ai.bedrock.anthropic3.createRequest": "org.springframework.ai.bedrock.anthropic3.createRequest",
            "org.springframework.ai.bedrock.anthropic3.toAnthropicSystemContext": "org.springframework.ai.bedrock.anthropic3.toAnthropicSystemContext",
            "org.springframework.ai.bedrock.anthropic3.toAnthropicMessages": "org.springframework.ai.bedrock.anthropic3.toAnthropicMessages",
            "org.springframework.ai.bedrock.anthropic3.fromMediaDat": "org.springframework.ai.bedrock.anthropic3.fromMediaDat",
            "org.springframework.ai.bedrock.anthropic3.anthropicChatApi": "org.springframework.ai.bedrock.anthropic3.anthropicChatApi",
            "org.springframework.ai.bedrock.anthropic3.defaultOptions": "org.springframework.ai.bedrock.anthropic3.defaultOptions"
        },
        "package": "package org.springframework.ai.bedrock.anthropic3;",
        "property_declarations": [
            "private final Anthropic3ChatBedrockApi anthropicChatApi;",
            "private final Anthropic3ChatOptions defaultOptions;"
        ],
        "functions": [
            {
                "name": "call",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "AnthropicChatRequest request = createRequest(prompt);\n\n\t\tAnthropicChatResponse response = this.anthropicChatApi.chatCompletion(request);\n\n\t\treturn new ChatResponse(List.of(new Generation(response.content().get(0).text())));",
                "is_abstract": "",
                "class_name": "BedrockAnthropic3ChatClient",
                "annotations": []
            },
            {
                "name": "stream",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "AnthropicChatRequest request = createRequest(prompt);\n\n\t\tFlux<Anthropic3ChatBedrockApi.AnthropicChatStreamingResponse> fluxResponse = this.anthropicChatApi\n\t\t\t.chatCompletionStream(request);\n\n\t\tAtomicReference<Integer> inputTokens = new AtomicReference<>(0);\n\t\treturn fluxResponse.map(response -> {\n\t\t\tif (response.type() == StreamingType.MESSAGE_START) {\n\t\t\t\tinputTokens.set(response.message().usage().inputTokens());\n\t\t\t}\n\t\t\tString content = response.type() == StreamingType.CONTENT_BLOCK_DELTA ? response.delta().text() : \"\";\n\n\t\t\tvar generation = new Generation(content);\n\n\t\t\tif (response.type() == StreamingType.MESSAGE_DELTA) {\n\t\t\t\tgeneration = generation.withGenerationMetadata(ChatGenerationMetadata\n\t\t\t\t\t.from(response.delta().stopReason(), new Anthropic3ChatBedrockApi.AnthropicUsage(inputTokens.get(),\n\t\t\t\t\t\t\tresponse.usage().outputTokens())));\n\t\t\t}\n\n\t\t\treturn new ChatResponse(List.of(generation));\n\t\t});",
                "is_abstract": "",
                "class_name": "BedrockAnthropic3ChatClient",
                "annotations": []
            },
            {
                "name": "createRequest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "AnthropicChatRequest request = AnthropicChatRequest.builder(toAnthropicMessages(prompt))\n\t\t\t.withSystem(toAnthropicSystemContext(prompt))\n\t\t\t.build();\n\n\t\tif (this.defaultOptions != null) {\n\t\t\trequest = ModelOptionsUtils.merge(request, this.defaultOptions, AnthropicChatRequest.class);\n\t\t}\n\n\t\tif (prompt.getOptions() != null) {\n\t\t\tif (prompt.getOptions() instanceof ChatOptions runtimeOptions) {\n\t\t\t\tAnthropic3ChatOptions updatedRuntimeOptions = ModelOptionsUtils.copyToTarget(runtimeOptions,\n\t\t\t\t\t\tChatOptions.class, Anthropic3ChatOptions.class);\n\t\t\t\trequest = ModelOptionsUtils.merge(updatedRuntimeOptions, request, AnthropicChatRequest.class);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new IllegalArgumentException(\"Prompt options are not of type ChatOptions: \"\n\t\t\t\t\t\t+ prompt.getOptions().getClass().getSimpleName());\n\t\t\t}\n\t\t}\n\n\t\treturn request;",
                "is_abstract": "",
                "class_name": "BedrockAnthropic3ChatClient",
                "annotations": []
            },
            {
                "name": "toAnthropicSystemContext",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return prompt.getInstructions()\n\t\t\t.stream()\n\t\t\t.filter(m -> m.getMessageType() == MessageType.SYSTEM)\n\t\t\t.map(Message::getContent)\n\t\t\t.collect(Collectors.joining(System.lineSeparator()));",
                "is_abstract": "",
                "class_name": "BedrockAnthropic3ChatClient",
                "annotations": []
            },
            {
                "name": "toAnthropicMessages",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return prompt.getInstructions()\n\t\t\t.stream()\n\t\t\t.filter(m -> m.getMessageType() == MessageType.USER || m.getMessageType() == MessageType.ASSISTANT)\n\t\t\t.map(message -> {\n\t\t\t\tList<MediaContent> contents = new ArrayList<>(List.of(new MediaContent(message.getContent())));\n\t\t\t\tif (!CollectionUtils.isEmpty(message.getMedia())) {\n\t\t\t\t\tList<MediaContent> mediaContent = message.getMedia()\n\t\t\t\t\t\t.stream()\n\t\t\t\t\t\t.map(media -> new MediaContent(media.getMimeType().toString(),\n\t\t\t\t\t\t\t\tthis.fromMediaData(media.getData())))\n\t\t\t\t\t\t.toList();\n\t\t\t\t\tcontents.addAll(mediaContent);\n\t\t\t\t}\n\t\t\t\treturn new ChatCompletionMessage(contents, Role.valueOf(message.getMessageType().name()));\n\t\t\t})\n\t\t\t.toList();",
                "is_abstract": "",
                "class_name": "BedrockAnthropic3ChatClient",
                "annotations": []
            },
            {
                "name": "fromMediaData",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (mediaData instanceof byte[] bytes) {\n\t\t\treturn Base64.getEncoder().encodeToString(bytes);\n\t\t}\n\t\telse if (mediaData instanceof String text) {\n\t\t\treturn text;\n\t\t}\n\t\telse {\n\t\t\tthrow new IllegalArgumentException(\"Unsupported media data type: \" + mediaData.getClass().getSimpleName());\n\t\t}",
                "is_abstract": "",
                "class_name": "BedrockAnthropic3ChatClient",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/anthropic3/api/Anthropic3ChatBedrockApi.java",
        "class_names": [
            "Builder",
            "Anthropic3ChatBedrockApi"
        ],
        "imports": "import org.springframework.ai.bedrock.anthropic3.api.Anthropic3ChatBedrockApi.AnthropicChatResponse;\nimport java.time.Duration;\nimport java.util.List;\nimport com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.springframework.util.Assert;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport reactor.core.publisher.Flux;\nimport org.springframework.ai.bedrock.anthropic3.api.Anthropic3ChatBedrockApi.AnthropicChatRequest;\nimport org.springframework.ai.bedrock.anthropic3.api.Anthropic3ChatBedrockApi.AnthropicChatStreamingResponse;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\nimport org.springframework.ai.bedrock.api.AbstractBedrockApi;",
        "package_import_paths": {
            "org.springframework.ai.bedrock.anthropic3.api.Anthropic3ChatBedrockApi": "org.springframework.ai.bedrock.anthropic3.api.Anthropic3ChatBedrockApi",
            "org.springframework.ai.bedrock.anthropic3.api.Builder": "org.springframework.ai.bedrock.anthropic3.api.Builder",
            "org.springframework.ai.bedrock.anthropic3.api.builder": "org.springframework.ai.bedrock.anthropic3.api.builder",
            "org.springframework.ai.bedrock.anthropic3.api.withSystem": "org.springframework.ai.bedrock.anthropic3.api.withSystem",
            "org.springframework.ai.bedrock.anthropic3.api.withTemperatur": "org.springframework.ai.bedrock.anthropic3.api.withTemperatur",
            "org.springframework.ai.bedrock.anthropic3.api.withMaxTokens": "org.springframework.ai.bedrock.anthropic3.api.withMaxTokens",
            "org.springframework.ai.bedrock.anthropic3.api.withTopK": "org.springframework.ai.bedrock.anthropic3.api.withTopK",
            "org.springframework.ai.bedrock.anthropic3.api.withTopP": "org.springframework.ai.bedrock.anthropic3.api.withTopP",
            "org.springframework.ai.bedrock.anthropic3.api.withStopSequences": "org.springframework.ai.bedrock.anthropic3.api.withStopSequences",
            "org.springframework.ai.bedrock.anthropic3.api.withAnthropicVersion": "org.springframework.ai.bedrock.anthropic3.api.withAnthropicVersion",
            "org.springframework.ai.bedrock.anthropic3.api.build": "org.springframework.ai.bedrock.anthropic3.api.build",
            "org.springframework.ai.bedrock.anthropic3.api.id": "org.springframework.ai.bedrock.anthropic3.api.id",
            "org.springframework.ai.bedrock.anthropic3.api.chatCompletion": "org.springframework.ai.bedrock.anthropic3.api.chatCompletion",
            "org.springframework.ai.bedrock.anthropic3.api.chatCompletionStream": "org.springframework.ai.bedrock.anthropic3.api.chatCompletionStream",
            "org.springframework.ai.bedrock.anthropic3.api.DEFAULT_ANTHROPIC_VERSION": "org.springframework.ai.bedrock.anthropic3.api.DEFAULT_ANTHROPIC_VERSION",
            "org.springframework.ai.bedrock.anthropic3.api.messages": "org.springframework.ai.bedrock.anthropic3.api.messages",
            "org.springframework.ai.bedrock.anthropic3.api.system": "org.springframework.ai.bedrock.anthropic3.api.system",
            "org.springframework.ai.bedrock.anthropic3.api.temperatur": "org.springframework.ai.bedrock.anthropic3.api.temperatur",
            "org.springframework.ai.bedrock.anthropic3.api.maxTokens": "org.springframework.ai.bedrock.anthropic3.api.maxTokens",
            "org.springframework.ai.bedrock.anthropic3.api.topK": "org.springframework.ai.bedrock.anthropic3.api.topK",
            "org.springframework.ai.bedrock.anthropic3.api.topP": "org.springframework.ai.bedrock.anthropic3.api.topP",
            "org.springframework.ai.bedrock.anthropic3.api.stopSequences": "org.springframework.ai.bedrock.anthropic3.api.stopSequences",
            "org.springframework.ai.bedrock.anthropic3.api.anthropicVersion": "org.springframework.ai.bedrock.anthropic3.api.anthropicVersion"
        },
        "package": "package org.springframework.ai.bedrock.anthropic3.api;",
        "property_declarations": [
            "public static final String DEFAULT_ANTHROPIC_VERSION = \"bedrock-2023-05-31\";",
            "private final List<ChatCompletionMessage> messages;",
            "private Float topP;",
            "private Integer maxTokens;",
            "private List<String> stopSequences;",
            "private final String id;",
            "private Float temperature;",
            "private Integer topK;",
            "private String system;",
            "private String anthropicVersion;"
        ],
        "functions": [
            {
                "name": "builder",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Builder(messages);",
                "is_abstract": "",
                "class_name": "Anthropic3ChatBedrockApi",
                "annotations": []
            },
            {
                "name": "withSystem",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.system = system;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "Anthropic3ChatBedrockApi Builder",
                "annotations": []
            },
            {
                "name": "withTemperature",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.temperature = temperature;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "Anthropic3ChatBedrockApi Builder",
                "annotations": []
            },
            {
                "name": "withMaxTokens",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.maxTokens = maxTokens;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "Anthropic3ChatBedrockApi Builder",
                "annotations": []
            },
            {
                "name": "withTopK",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.topK = topK;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "Anthropic3ChatBedrockApi Builder",
                "annotations": []
            },
            {
                "name": "withTopP",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.topP = tpoP;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "Anthropic3ChatBedrockApi Builder",
                "annotations": []
            },
            {
                "name": "withStopSequences",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.stopSequences = stopSequences;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "Anthropic3ChatBedrockApi Builder",
                "annotations": []
            },
            {
                "name": "withAnthropicVersion",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.anthropicVersion = anthropicVersion;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "Anthropic3ChatBedrockApi Builder",
                "annotations": []
            },
            {
                "name": "build",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new AnthropicChatRequest(\n\t\t\t\t\t\tmessages,\n\t\t\t\t\t\tsystem,\n\t\t\t\t\t\ttemperature,\n\t\t\t\t\t\tmaxTokens,\n\t\t\t\t\t\ttopK,\n\t\t\t\t\t\ttopP,\n\t\t\t\t\t\tstopSequences,\n\t\t\t\t\t\tanthropicVersion\n\t\t\t\t);",
                "is_abstract": "",
                "class_name": "Anthropic3ChatBedrockApi Builder",
                "annotations": [
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"type\")",
                    "@JsonProperty(\"source\")",
                    "@JsonProperty(\"text\")",
                    "@JsonProperty(\"index\")",
                    "@JsonProperty(\"text\")",
                    "@JsonProperty(\"image\")",
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"type\")",
                    "@JsonProperty(\"media_type\")",
                    "@JsonProperty(\"data\")",
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"content\")",
                    "@JsonProperty(\"role\")",
                    "@JsonProperty(\"user\")",
                    "@JsonProperty(\"assistant\")",
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"input_tokens\")",
                    "@JsonProperty(\"output_tokens\")",
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"id\")",
                    "@JsonProperty(\"model\")",
                    "@JsonProperty(\"type\")",
                    "@JsonProperty(\"role\")",
                    "@JsonProperty(\"content\")",
                    "@JsonProperty(\"stop_reason\")",
                    "@JsonProperty(\"stop_sequence\")",
                    "@JsonProperty(\"usage\")",
                    "@JsonProperty(\"amazon-bedrock-invocationMetrics\")",
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"type\")",
                    "@JsonProperty(\"message\")",
                    "@JsonProperty(\"index\")",
                    "@JsonProperty(\"content_block\")",
                    "@JsonProperty(\"delta\")",
                    "@JsonProperty(\"usage\")",
                    "@JsonProperty(\"amazon-bedrock-invocationMetrics\")",
                    "@JsonProperty(\"message_start\")",
                    "@JsonProperty(\"content_block_start\")",
                    "@JsonProperty(\"ping\")",
                    "@JsonProperty(\"content_block_delta\")",
                    "@JsonProperty(\"content_block_stop\")",
                    "@JsonProperty(\"message_delta\")",
                    "@JsonProperty(\"message_stop\")",
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"type\")",
                    "@JsonProperty(\"text\")",
                    "@JsonProperty(\"stop_reason\")",
                    "@JsonProperty(\"stop_sequence\")"
                ]
            },
            {
                "name": "id",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return id;",
                "is_abstract": "",
                "class_name": "Anthropic3ChatBedrockApi Builder",
                "annotations": []
            },
            {
                "name": "chatCompletion",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(anthropicRequest, \"'anthropicRequest' must not be null\");\n\t\treturn this.internalInvocation(anthropicRequest, AnthropicChatResponse.class);",
                "is_abstract": "",
                "class_name": "Anthropic3ChatBedrockApi Builder",
                "annotations": []
            },
            {
                "name": "chatCompletionStream",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(anthropicRequest, \"'anthropicRequest' must not be null\");\n\t\treturn this.internalInvocationStream(anthropicRequest, AnthropicChatStreamingResponse.class);",
                "is_abstract": "",
                "class_name": "Anthropic3ChatBedrockApi Builder",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/api/AbstractBedrockApi.java",
        "class_names": [
            "AbstractBedrockApi"
        ],
        "imports": "import software.amazon.awssdk.services.bedrockruntime.model.InvokeModelResponse;\nimport reactor.core.publisher.Sinks.EmitResult;\nimport reactor.core.publisher.Flux;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport reactor.core.publisher.Sinks.EmitFailureHandler;\nimport software.amazon.awssdk.regions.Region;\nimport software.amazon.awssdk.services.bedrockruntime.model.InvokeModelRequest;\nimport org.slf4j.Logger;\nimport java.nio.charset.StandardCharsets;\nimport software.amazon.awssdk.services.bedrockruntime.model.InvokeModelWithResponseStreamRequest;\nimport java.io.UncheckedIOException;\nimport java.time.Duration;\nimport software.amazon.awssdk.services.bedrockruntime.model.InvokeModelWithResponseStreamResponseHandler;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport org.slf4j.LoggerFactory;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport software.amazon.awssdk.services.bedrockruntime.BedrockRuntimeClient;\nimport org.springframework.ai.model.ModelOptionsUtils;\nimport software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\nimport reactor.core.publisher.Sinks;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.springframework.util.Assert;\nimport software.amazon.awssdk.services.bedrockruntime.model.ResponseStream;\nimport software.amazon.awssdk.services.bedrockruntime.BedrockRuntimeAsyncClient;\nimport software.amazon.awssdk.core.SdkBytes;\nimport software.amazon.awssdk.auth.credentials.ProfileCredentialsProvider;",
        "package_import_paths": {
            "org.springframework.ai.bedrock.api.AbstractBedrockApi": "org.springframework.ai.bedrock.api.AbstractBedrockApi",
            "org.springframework.ai.bedrock.api.getModelId": "org.springframework.ai.bedrock.api.getModelId",
            "org.springframework.ai.bedrock.api.getRegion": "org.springframework.ai.bedrock.api.getRegion",
            "org.springframework.ai.bedrock.api.embeddin": "org.springframework.ai.bedrock.api.embeddin",
            "org.springframework.ai.bedrock.api.chatCompletion": "org.springframework.ai.bedrock.api.chatCompletion",
            "org.springframework.ai.bedrock.api.chatCompletionStream": "org.springframework.ai.bedrock.api.chatCompletionStream",
            "org.springframework.ai.bedrock.api.internalInvocation": "org.springframework.ai.bedrock.api.internalInvocation",
            "org.springframework.ai.bedrock.api.internalInvocationStream": "org.springframework.ai.bedrock.api.internalInvocationStream",
            "org.springframework.ai.bedrock.api.logger": "org.springframework.ai.bedrock.api.logger",
            "org.springframework.ai.bedrock.api.modelId": "org.springframework.ai.bedrock.api.modelId",
            "org.springframework.ai.bedrock.api.objectMapper": "org.springframework.ai.bedrock.api.objectMapper",
            "org.springframework.ai.bedrock.api.region": "org.springframework.ai.bedrock.api.region",
            "org.springframework.ai.bedrock.api.client": "org.springframework.ai.bedrock.api.client",
            "org.springframework.ai.bedrock.api.clientStreamin": "org.springframework.ai.bedrock.api.clientStreamin"
        },
        "package": "package org.springframework.ai.bedrock.api;",
        "property_declarations": [
            "private static final Logger logger = LoggerFactory.getLogger(AbstractBedrockApi.class);",
            "private final String region;",
            "private final String modelId;",
            "private final ObjectMapper objectMapper;",
            "private final BedrockRuntimeClient client;",
            "private final BedrockRuntimeAsyncClient clientStreaming;"
        ],
        "functions": [
            {
                "name": "getModelId",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.modelId;",
                "is_abstract": "",
                "class_name": "AbstractBedrockApi",
                "annotations": []
            },
            {
                "name": "getRegion",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.region;",
                "is_abstract": "",
                "class_name": "AbstractBedrockApi",
                "annotations": [
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"inputTokenCount\")",
                    "@JsonProperty(\"firstByteLatency\")",
                    "@JsonProperty(\"outputTokenCount\")",
                    "@JsonProperty(\"invocationLatency\")"
                ]
            },
            {
                "name": "embedding",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "throw new UnsupportedOperationException(\"Embedding is not supported for this model: \" + this.modelId);",
                "is_abstract": "",
                "class_name": "AbstractBedrockApi",
                "annotations": []
            },
            {
                "name": "chatCompletion",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "throw new UnsupportedOperationException(\"Chat completion is not supported for this model: \" + this.modelId);",
                "is_abstract": "",
                "class_name": "AbstractBedrockApi",
                "annotations": []
            },
            {
                "name": "chatCompletionStream",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "throw new UnsupportedOperationException(\n\t\t\t\t\"Streaming chat completion is not supported for this model: \" + this.modelId);",
                "is_abstract": "",
                "class_name": "AbstractBedrockApi",
                "annotations": []
            },
            {
                "name": "internalInvocation",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "SdkBytes body;\n\t\ttry {\n\t\t\tbody = SdkBytes.fromUtf8String(new ObjectMapper().writeValueAsString(request));\n\t\t}\n\t\tcatch (JsonProcessingException e) {\n\t\t\tthrow new IllegalArgumentException(\"Invalid JSON format for the input request: \" + request, e);\n\t\t}\n\n\t\tInvokeModelRequest invokeRequest = InvokeModelRequest.builder()\n\t\t\t\t.modelId(this.modelId)\n\t\t\t\t.body(body)\n\t\t\t\t.build();\n\n\t\tInvokeModelResponse response = this.client.invokeModel(invokeRequest);\n\n\t\tString responseBody = response.body().asString(StandardCharsets.UTF_8);\n\n\t\ttry {\n\t\t\treturn this.objectMapper.readValue(responseBody, clazz);\n\t\t}\n\t\tcatch (JsonProcessingException | UncheckedIOException e) {\n\n\t\t\tthrow new IllegalArgumentException(\"Invalid JSON format for the response: \" + responseBody, e);\n\t\t}",
                "is_abstract": "",
                "class_name": "AbstractBedrockApi",
                "annotations": []
            },
            {
                "name": "internalInvocationStream",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// final Sinks.Many<SO> eventSink = Sinks.many().unicast().onBackpressureError();\n\t\tfinal Sinks.Many<SO> eventSink = Sinks.many().multicast().onBackpressureBuffer();\n\n\t\tSdkBytes body;\n\t\ttry {\n\t\t\tbody = SdkBytes.fromUtf8String(this.objectMapper.writeValueAsString(request));\n\t\t}\n\t\tcatch (JsonProcessingException e) {\n\t\t\teventSink.tryEmitError(e);\n\t\t\treturn eventSink.asFlux();\n\t\t}\n\n\t\tInvokeModelWithResponseStreamRequest invokeRequest = InvokeModelWithResponseStreamRequest.builder()\n\t\t\t\t.modelId(this.modelId)\n\t\t\t\t.body(body)\n\t\t\t\t.build();\n\n\t\tInvokeModelWithResponseStreamResponseHandler.Visitor visitor = InvokeModelWithResponseStreamResponseHandler.Visitor\n\t\t\t\t.builder()\n\t\t\t\t.onChunk((chunk) -> {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tlogger.debug(\"Received chunk: \" + chunk.bytes().asString(StandardCharsets.UTF_8));\n\t\t\t\t\t\tSO response = this.objectMapper.readValue(chunk.bytes().asByteArray(), clazz);\n\t\t\t\t\t\teventSink.tryEmitNext(response);\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t\tlogger.error(\"Failed to unmarshall\", e);\n\t\t\t\t\t\teventSink.tryEmitError(e);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.onDefault((event) -> {\n\t\t\t\t\tlogger.error(\"Unknown or unhandled event: \" + event.toString());\n\t\t\t\t\teventSink.tryEmitError(new Throwable(\"Unknown or unhandled event: \" + event.toString()));\n\t\t\t\t})\n\t\t\t\t.build();\n\n\t\tInvokeModelWithResponseStreamResponseHandler responseHandler = InvokeModelWithResponseStreamResponseHandler\n\t\t\t\t.builder()\n\t\t\t\t.onComplete(\n\t\t\t\t\t\t() -> {\n\t\t\t\t\t\t\tEmitResult emitResult = eventSink.tryEmitComplete();\n\t\t\t\t\t\t\twhile(!emitResult.isSuccess()){\n\t\t\t\t\t\t\t\tSystem.out.println(\"Emitting complete:\" + emitResult);\n\t\t\t\t\t\t\t\temitResult = eventSink.tryEmitComplete();\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\teventSink.emitComplete(EmitFailureHandler.busyLooping(Duration.ofSeconds(3)));\n\t\t\t\t\t\t\t// EmitResult emitResult = eventSink.tryEmitComplete();\n\t\t\t\t\t\t\tlogger.debug(\"\\nCompleted streaming response.\");\n\t\t\t\t\t\t})\n\t\t\t\t.onError((error) -> {\n\t\t\t\t\tlogger.error(\"\\n\\nError streaming response: \" + error.getMessage());\n\t\t\t\t\teventSink.tryEmitError(error);\n\t\t\t\t})\n\t\t\t\t.onEventStream((stream) -> {\n\t\t\t\t\tstream.subscribe(\n\t\t\t\t\t\t\t(ResponseStream e) -> {\n\t\t\t\t\t\t\t\te.accept(visitor);\n\t\t\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\t.build();\n\n\t\tthis.clientStreaming.invokeModelWithResponseStream(invokeRequest, responseHandler);\n\n\t\treturn eventSink.asFlux();",
                "is_abstract": "",
                "class_name": "AbstractBedrockApi",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/anthropic/BedrockAnthropicChatClient.java",
        "class_names": [
            "BedrockAnthropicChatClient"
        ],
        "imports": "import org.springframework.ai.chat.prompt.Prompt;\nimport java.util.List;\nimport org.springframework.ai.chat.Generation;\nimport org.springframework.ai.chat.ChatClient;\nimport reactor.core.publisher.Flux;\nimport org.springframework.ai.bedrock.anthropic.api.AnthropicChatBedrockApi;\nimport org.springframework.ai.bedrock.anthropic.api.AnthropicChatBedrockApi.AnthropicChatResponse;\nimport org.springframework.ai.bedrock.anthropic.api.AnthropicChatBedrockApi.AnthropicChatRequest;\nimport org.springframework.ai.model.ModelOptionsUtils;\nimport org.springframework.ai.chat.prompt.ChatOptions;\nimport org.springframework.ai.bedrock.MessageToPromptConverter;\nimport org.springframework.ai.chat.StreamingChatClient;\nimport org.springframework.ai.chat.ChatResponse;\nimport org.springframework.ai.chat.metadata.ChatGenerationMetadata;",
        "package_import_paths": {
            "org.springframework.ai.bedrock.anthropic.BedrockAnthropicChatClient": "org.springframework.ai.bedrock.anthropic.BedrockAnthropicChatClient",
            "org.springframework.ai.bedrock.anthropic.call": "org.springframework.ai.bedrock.anthropic.call",
            "org.springframework.ai.bedrock.anthropic.stream": "org.springframework.ai.bedrock.anthropic.stream",
            "org.springframework.ai.bedrock.anthropic.createRequest": "org.springframework.ai.bedrock.anthropic.createRequest",
            "org.springframework.ai.bedrock.anthropic.anthropicChatApi": "org.springframework.ai.bedrock.anthropic.anthropicChatApi",
            "org.springframework.ai.bedrock.anthropic.defaultOptions": "org.springframework.ai.bedrock.anthropic.defaultOptions"
        },
        "package": "package org.springframework.ai.bedrock.anthropic;",
        "property_declarations": [
            "private final AnthropicChatBedrockApi anthropicChatApi;",
            "private final AnthropicChatOptions defaultOptions;"
        ],
        "functions": [
            {
                "name": "call",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "AnthropicChatRequest request = createRequest(prompt);\n\n\t\tAnthropicChatResponse response = this.anthropicChatApi.chatCompletion(request);\n\n\t\treturn new ChatResponse(List.of(new Generation(response.completion())));",
                "is_abstract": "",
                "class_name": "BedrockAnthropicChatClient",
                "annotations": []
            },
            {
                "name": "stream",
                "parameters": [
                    ""
                ],
                "return_type": "null",
                "body": "AnthropicChatRequest request = createRequest(prompt);\n\n\t\tFlux<AnthropicChatResponse> fluxResponse = this.anthropicChatApi.chatCompletionStream(request);\n\n\t\treturn fluxResponse.map(response -> {\n\t\t\tString stopReason = response.stopReason() != null ? response.stopReason() : null;\n\t\t\tvar generation = new Generation(response.completion());\n\t\t\tif (response.amazonBedrockInvocationMetrics() != null) {\n\t\t\t\tgeneration = generation.withGenerationMetadata(\n\t\t\t\t\t\tChatGenerationMetadata.from(stopReason, response.amazonBedrockInvocationMetrics()));\n\t\t\t}\n\t\t\treturn new ChatResponse(List.of(generation));\n\t\t});",
                "is_abstract": "",
                "class_name": "BedrockAnthropicChatClient",
                "annotations": []
            },
            {
                "name": "createRequest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// Related to: https://github.com/spring-projects/spring-ai/issues/404\n\t\tfinal String promptValue = MessageToPromptConverter.create(\"\\n\").toPrompt(prompt.getInstructions());\n\n\t\tAnthropicChatRequest request = AnthropicChatRequest.builder(promptValue).build();\n\n\t\tif (this.defaultOptions != null) {\n\t\t\trequest = ModelOptionsUtils.merge(request, this.defaultOptions, AnthropicChatRequest.class);\n\t\t}\n\n\t\tif (prompt.getOptions() != null) {\n\t\t\tif (prompt.getOptions() instanceof ChatOptions runtimeOptions) {\n\t\t\t\tAnthropicChatOptions updatedRuntimeOptions = ModelOptionsUtils.copyToTarget(runtimeOptions,\n\t\t\t\t\t\tChatOptions.class, AnthropicChatOptions.class);\n\t\t\t\trequest = ModelOptionsUtils.merge(updatedRuntimeOptions, request, AnthropicChatRequest.class);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new IllegalArgumentException(\"Prompt options are not of type ChatOptions: \"\n\t\t\t\t\t\t+ prompt.getOptions().getClass().getSimpleName());\n\t\t\t}\n\t\t}\n\n\t\treturn request;",
                "is_abstract": "",
                "class_name": "BedrockAnthropicChatClient",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/anthropic/AnthropicChatOptions.java",
        "class_names": [
            "Builder",
            "AnthropicChatOptions"
        ],
        "imports": "import java.util.List;\nimport com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport org.springframework.ai.chat.prompt.ChatOptions;\nimport com.fasterxml.jackson.annotation.JsonProperty;",
        "package_import_paths": {
            "org.springframework.ai.bedrock.anthropic.AnthropicChatOptions": "org.springframework.ai.bedrock.anthropic.AnthropicChatOptions",
            "org.springframework.ai.bedrock.anthropic.Builder": "org.springframework.ai.bedrock.anthropic.Builder",
            "org.springframework.ai.bedrock.anthropic.builder": "org.springframework.ai.bedrock.anthropic.builder",
            "org.springframework.ai.bedrock.anthropic.withTemperatur": "org.springframework.ai.bedrock.anthropic.withTemperatur",
            "org.springframework.ai.bedrock.anthropic.withMaxTokensToSampl": "org.springframework.ai.bedrock.anthropic.withMaxTokensToSampl",
            "org.springframework.ai.bedrock.anthropic.withTopK": "org.springframework.ai.bedrock.anthropic.withTopK",
            "org.springframework.ai.bedrock.anthropic.withTopP": "org.springframework.ai.bedrock.anthropic.withTopP",
            "org.springframework.ai.bedrock.anthropic.withStopSequences": "org.springframework.ai.bedrock.anthropic.withStopSequences",
            "org.springframework.ai.bedrock.anthropic.withAnthropicVersion": "org.springframework.ai.bedrock.anthropic.withAnthropicVersion",
            "org.springframework.ai.bedrock.anthropic.build": "org.springframework.ai.bedrock.anthropic.build",
            "org.springframework.ai.bedrock.anthropic.getTemperatur": "org.springframework.ai.bedrock.anthropic.getTemperatur",
            "org.springframework.ai.bedrock.anthropic.setTemperatur": "org.springframework.ai.bedrock.anthropic.setTemperatur",
            "org.springframework.ai.bedrock.anthropic.getMaxTokensToSampl": "org.springframework.ai.bedrock.anthropic.getMaxTokensToSampl",
            "org.springframework.ai.bedrock.anthropic.setMaxTokensToSampl": "org.springframework.ai.bedrock.anthropic.setMaxTokensToSampl",
            "org.springframework.ai.bedrock.anthropic.getTopK": "org.springframework.ai.bedrock.anthropic.getTopK",
            "org.springframework.ai.bedrock.anthropic.setTopK": "org.springframework.ai.bedrock.anthropic.setTopK",
            "org.springframework.ai.bedrock.anthropic.getTopP": "org.springframework.ai.bedrock.anthropic.getTopP",
            "org.springframework.ai.bedrock.anthropic.setTopP": "org.springframework.ai.bedrock.anthropic.setTopP",
            "org.springframework.ai.bedrock.anthropic.getStopSequences": "org.springframework.ai.bedrock.anthropic.getStopSequences",
            "org.springframework.ai.bedrock.anthropic.setStopSequences": "org.springframework.ai.bedrock.anthropic.setStopSequences",
            "org.springframework.ai.bedrock.anthropic.getAnthropicVersion": "org.springframework.ai.bedrock.anthropic.getAnthropicVersion",
            "org.springframework.ai.bedrock.anthropic.setAnthropicVersion": "org.springframework.ai.bedrock.anthropic.setAnthropicVersion",
            "org.springframework.ai.bedrock.anthropic.temperatur": "org.springframework.ai.bedrock.anthropic.temperatur",
            "org.springframework.ai.bedrock.anthropic.maxTokensToSampl": "org.springframework.ai.bedrock.anthropic.maxTokensToSampl",
            "org.springframework.ai.bedrock.anthropic.topK": "org.springframework.ai.bedrock.anthropic.topK",
            "org.springframework.ai.bedrock.anthropic.topP": "org.springframework.ai.bedrock.anthropic.topP",
            "org.springframework.ai.bedrock.anthropic.stopSequences": "org.springframework.ai.bedrock.anthropic.stopSequences",
            "org.springframework.ai.bedrock.anthropic.anthropicVersion": "org.springframework.ai.bedrock.anthropic.anthropicVersion",
            "org.springframework.ai.bedrock.anthropic.options": "org.springframework.ai.bedrock.anthropic.options"
        },
        "package": "package org.springframework.ai.bedrock.anthropic;",
        "property_declarations": [
            "private @JsonProperty(\"top_k\") Integer topK;",
            "private @JsonProperty(\"temperature\") Float temperature;",
            "private @JsonProperty(\"max_tokens_to_sample\") Integer maxTokensToSample;",
            "private @JsonProperty(\"stop_sequences\") List<String> stopSequences;",
            "private final AnthropicChatOptions options = new AnthropicChatOptions();",
            "private @JsonProperty(\"anthropic_version\") String anthropicVersion;",
            "private @JsonProperty(\"top_p\") Float topP;"
        ],
        "functions": [
            {
                "name": "builder",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Builder();",
                "is_abstract": "",
                "class_name": "AnthropicChatOptions",
                "annotations": []
            },
            {
                "name": "withTemperature",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.setTemperature(temperature);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "AnthropicChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withMaxTokensToSample",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.setMaxTokensToSample(maxTokensToSample);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "AnthropicChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withTopK",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.setTopK(topK);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "AnthropicChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withTopP",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.setTopP(topP);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "AnthropicChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withStopSequences",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.setStopSequences(stopSequences);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "AnthropicChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withAnthropicVersion",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.setAnthropicVersion(anthropicVersion);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "AnthropicChatOptions Builder",
                "annotations": []
            },
            {
                "name": "build",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.options;",
                "is_abstract": "",
                "class_name": "AnthropicChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getTemperature",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.temperature;",
                "is_abstract": "",
                "class_name": "AnthropicChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setTemperature",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.temperature = temperature;",
                "is_abstract": "",
                "class_name": "AnthropicChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getMaxTokensToSample",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.maxTokensToSample;",
                "is_abstract": "",
                "class_name": "AnthropicChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setMaxTokensToSample",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.maxTokensToSample = maxTokensToSample;",
                "is_abstract": "",
                "class_name": "AnthropicChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getTopK",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.topK;",
                "is_abstract": "",
                "class_name": "AnthropicChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setTopK",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.topK = topK;",
                "is_abstract": "",
                "class_name": "AnthropicChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getTopP",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.topP;",
                "is_abstract": "",
                "class_name": "AnthropicChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setTopP",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.topP = topP;",
                "is_abstract": "",
                "class_name": "AnthropicChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getStopSequences",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.stopSequences;",
                "is_abstract": "",
                "class_name": "AnthropicChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setStopSequences",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.stopSequences = stopSequences;",
                "is_abstract": "",
                "class_name": "AnthropicChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getAnthropicVersion",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.anthropicVersion;",
                "is_abstract": "",
                "class_name": "AnthropicChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setAnthropicVersion",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.anthropicVersion = anthropicVersion;",
                "is_abstract": "",
                "class_name": "AnthropicChatOptions Builder",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/anthropic/api/AnthropicChatBedrockApi.java",
        "class_names": [
            "Builder",
            "AnthropicChatBedrockApi"
        ],
        "imports": "import java.util.List;\nimport com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.springframework.ai.bedrock.api.AbstractBedrockApi;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport reactor.core.publisher.Flux;\nimport org.springframework.util.Assert;\nimport org.springframework.ai.bedrock.anthropic.api.AnthropicChatBedrockApi.AnthropicChatResponse;\nimport org.springframework.ai.bedrock.anthropic.api.AnthropicChatBedrockApi.AnthropicChatRequest;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\nimport java.time.Duration;",
        "package_import_paths": {
            "org.springframework.ai.bedrock.anthropic.api.AnthropicChatBedrockApi": "org.springframework.ai.bedrock.anthropic.api.AnthropicChatBedrockApi",
            "org.springframework.ai.bedrock.anthropic.api.Builder": "org.springframework.ai.bedrock.anthropic.api.Builder",
            "org.springframework.ai.bedrock.anthropic.api.builder": "org.springframework.ai.bedrock.anthropic.api.builder",
            "org.springframework.ai.bedrock.anthropic.api.withTemperatur": "org.springframework.ai.bedrock.anthropic.api.withTemperatur",
            "org.springframework.ai.bedrock.anthropic.api.withMaxTokensToSampl": "org.springframework.ai.bedrock.anthropic.api.withMaxTokensToSampl",
            "org.springframework.ai.bedrock.anthropic.api.withTopK": "org.springframework.ai.bedrock.anthropic.api.withTopK",
            "org.springframework.ai.bedrock.anthropic.api.withTopP": "org.springframework.ai.bedrock.anthropic.api.withTopP",
            "org.springframework.ai.bedrock.anthropic.api.withStopSequences": "org.springframework.ai.bedrock.anthropic.api.withStopSequences",
            "org.springframework.ai.bedrock.anthropic.api.withAnthropicVersion": "org.springframework.ai.bedrock.anthropic.api.withAnthropicVersion",
            "org.springframework.ai.bedrock.anthropic.api.build": "org.springframework.ai.bedrock.anthropic.api.build",
            "org.springframework.ai.bedrock.anthropic.api.id": "org.springframework.ai.bedrock.anthropic.api.id",
            "org.springframework.ai.bedrock.anthropic.api.chatCompletion": "org.springframework.ai.bedrock.anthropic.api.chatCompletion",
            "org.springframework.ai.bedrock.anthropic.api.chatCompletionStream": "org.springframework.ai.bedrock.anthropic.api.chatCompletionStream",
            "org.springframework.ai.bedrock.anthropic.api.PROMPT_TEMPLATE": "org.springframework.ai.bedrock.anthropic.api.PROMPT_TEMPLATE",
            "org.springframework.ai.bedrock.anthropic.api.DEFAULT_ANTHROPIC_VERSION": "org.springframework.ai.bedrock.anthropic.api.DEFAULT_ANTHROPIC_VERSION",
            "org.springframework.ai.bedrock.anthropic.api.prompt": "org.springframework.ai.bedrock.anthropic.api.prompt",
            "org.springframework.ai.bedrock.anthropic.api.temperatur": "org.springframework.ai.bedrock.anthropic.api.temperatur",
            "org.springframework.ai.bedrock.anthropic.api.maxTokensToSampl": "org.springframework.ai.bedrock.anthropic.api.maxTokensToSampl",
            "org.springframework.ai.bedrock.anthropic.api.topK": "org.springframework.ai.bedrock.anthropic.api.topK",
            "org.springframework.ai.bedrock.anthropic.api.topP": "org.springframework.ai.bedrock.anthropic.api.topP",
            "org.springframework.ai.bedrock.anthropic.api.stopSequences": "org.springframework.ai.bedrock.anthropic.api.stopSequences",
            "org.springframework.ai.bedrock.anthropic.api.anthropicVersion": "org.springframework.ai.bedrock.anthropic.api.anthropicVersion"
        },
        "package": "package org.springframework.ai.bedrock.anthropic.api;",
        "property_declarations": [
            "public static final String DEFAULT_ANTHROPIC_VERSION = \"bedrock-2023-05-31\";",
            "public static final String PROMPT_TEMPLATE = \"\\n\\nHuman:%s\\n\\nAssistant:\";",
            "private Float topP;",
            "private List<String> stopSequences;",
            "private final String id;",
            "private Float temperature;",
            "private Integer topK;",
            "private Integer maxTokensToSample;",
            "private String anthropicVersion;",
            "private final String prompt;"
        ],
        "functions": [
            {
                "name": "builder",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Builder(prompt);",
                "is_abstract": "",
                "class_name": "AnthropicChatBedrockApi",
                "annotations": []
            },
            {
                "name": "withTemperature",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.temperature = temperature;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "AnthropicChatBedrockApi Builder",
                "annotations": []
            },
            {
                "name": "withMaxTokensToSample",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.maxTokensToSample = maxTokensToSample;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "AnthropicChatBedrockApi Builder",
                "annotations": []
            },
            {
                "name": "withTopK",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.topK = topK;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "AnthropicChatBedrockApi Builder",
                "annotations": []
            },
            {
                "name": "withTopP",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.topP = tpoP;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "AnthropicChatBedrockApi Builder",
                "annotations": []
            },
            {
                "name": "withStopSequences",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.stopSequences = stopSequences;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "AnthropicChatBedrockApi Builder",
                "annotations": []
            },
            {
                "name": "withAnthropicVersion",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.anthropicVersion = anthropicVersion;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "AnthropicChatBedrockApi Builder",
                "annotations": []
            },
            {
                "name": "build",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new AnthropicChatRequest(\n\t\t\t\t\t\tprompt,\n\t\t\t\t\t\ttemperature,\n\t\t\t\t\t\tmaxTokensToSample,\n\t\t\t\t\t\ttopK,\n\t\t\t\t\t\ttopP,\n\t\t\t\t\t\tstopSequences,\n\t\t\t\t\t\tanthropicVersion\n\t\t\t\t);",
                "is_abstract": "",
                "class_name": "AnthropicChatBedrockApi Builder",
                "annotations": [
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"completion\")",
                    "@JsonProperty(\"stop_reason\")",
                    "@JsonProperty(\"stop\")",
                    "@JsonProperty(\"amazon-bedrock-invocationMetrics\")"
                ]
            },
            {
                "name": "id",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return id;",
                "is_abstract": "",
                "class_name": "AnthropicChatBedrockApi Builder",
                "annotations": []
            },
            {
                "name": "chatCompletion",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(anthropicRequest, \"'anthropicRequest' must not be null\");\n\t\treturn this.internalInvocation(anthropicRequest, AnthropicChatResponse.class);",
                "is_abstract": "",
                "class_name": "AnthropicChatBedrockApi Builder",
                "annotations": []
            },
            {
                "name": "chatCompletionStream",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(anthropicRequest, \"'anthropicRequest' must not be null\");\n\t\treturn this.internalInvocationStream(anthropicRequest, AnthropicChatResponse.class);",
                "is_abstract": "",
                "class_name": "AnthropicChatBedrockApi Builder",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/titan/BedrockTitanEmbeddingClient.java",
        "class_names": [
            "BedrockTitanEmbeddingClient"
        ],
        "imports": "import java.util.ArrayList;\nimport org.springframework.ai.bedrock.titan.api.TitanEmbeddingBedrockApi.TitanEmbeddingResponse;\nimport org.springframework.ai.embedding.Embedding;\nimport org.springframework.ai.bedrock.titan.api.TitanEmbeddingBedrockApi.TitanEmbeddingRequest;\nimport java.util.List;\nimport org.springframework.util.Assert;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.ai.embedding.AbstractEmbeddingClient;\nimport org.slf4j.Logger;\nimport org.springframework.ai.document.Document;\nimport org.springframework.ai.embedding.EmbeddingRequest;\nimport org.springframework.ai.bedrock.titan.api.TitanEmbeddingBedrockApi;\nimport org.springframework.ai.embedding.EmbeddingResponse;",
        "package_import_paths": {
            "org.springframework.ai.bedrock.titan.BedrockTitanEmbeddingClient": "org.springframework.ai.bedrock.titan.BedrockTitanEmbeddingClient",
            "org.springframework.ai.bedrock.titan.withInputTy": "org.springframework.ai.bedrock.titan.withInputTy",
            "org.springframework.ai.bedrock.titan.embed": "org.springframework.ai.bedrock.titan.embed",
            "org.springframework.ai.bedrock.titan.call": "org.springframework.ai.bedrock.titan.call",
            "org.springframework.ai.bedrock.titan.dimensions": "org.springframework.ai.bedrock.titan.dimensions",
            "org.springframework.ai.bedrock.titan.logger": "org.springframework.ai.bedrock.titan.logger",
            "org.springframework.ai.bedrock.titan.embeddingApi": "org.springframework.ai.bedrock.titan.embeddingApi",
            "org.springframework.ai.bedrock.titan.inputTy": "org.springframework.ai.bedrock.titan.inputTy"
        },
        "package": "package org.springframework.ai.bedrock.titan;",
        "property_declarations": [
            "private InputType inputType = InputType.TEXT;",
            "private final Logger logger = LoggerFactory.getLogger(getClass());",
            "private final TitanEmbeddingBedrockApi embeddingApi;"
        ],
        "functions": [
            {
                "name": "withInputType",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.inputType = inputType;\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "BedrockTitanEmbeddingClient",
                "annotations": []
            },
            {
                "name": "embed",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return embed(document.getContent());",
                "is_abstract": "",
                "class_name": "BedrockTitanEmbeddingClient",
                "annotations": []
            },
            {
                "name": "call",
                "parameters": [
                    ""
                ],
                "return_type": "new",
                "body": "Assert.notEmpty(request.getInstructions(), \"At least one text is required!\");\n\t\tif (request.getInstructions().size() != 1) {\n\t\t\tlogger.warn(\n\t\t\t\t\t\"Titan Embedding does not support batch embedding. Will make multiple API calls to embed(Document)\");\n\t\t}\n\n\t\tList<List<Double>> embeddingList = new ArrayList<>();\n\t\tfor (String inputContent : request.getInstructions()) {\n\t\t\tvar apiRequest = (this.inputType == InputType.IMAGE)\n\t\t\t\t\t? new TitanEmbeddingRequest.Builder().withInputImage(inputContent).build()\n\t\t\t\t\t: new TitanEmbeddingRequest.Builder().withInputText(inputContent).build();\n\t\t\tTitanEmbeddingResponse response = this.embeddingApi.embedding(apiRequest);\n\t\t\tembeddingList.add(response.embedding());\n\t\t}\n\t\tvar indexCounter = new AtomicInteger(0);\n\t\tList<Embedding> embeddings = embeddingList.stream()\n\t\t\t.map(e -> new Embedding(e, indexCounter.getAndIncrement()))\n\t\t\t.toList();\n\t\treturn new EmbeddingResponse(embeddings);",
                "is_abstract": "",
                "class_name": "BedrockTitanEmbeddingClient",
                "annotations": []
            },
            {
                "name": "dimensions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (this.inputType == InputType.IMAGE) {\n\t\t\tif (this.embeddingDimensions.get() < 0) {\n\t\t\t\tthis.embeddingDimensions.set(dimensions(this, embeddingApi.getModelId(),\n\t\t\t\t\t\t// small base64 encoded image\n\t\t\t\t\t\t\"iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNk+A8AAQUBAScY42YAAAAASUVORK5CYII=\"));\n\t\t\t}\n\t\t}\n\t\treturn super.dimensions();",
                "is_abstract": "",
                "class_name": "BedrockTitanEmbeddingClient",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/titan/BedrockTitanChatClient.java",
        "class_names": [
            "BedrockTitanChatClient"
        ],
        "imports": "import org.springframework.ai.bedrock.titan.api.TitanChatBedrockApi.TitanChatRequest;\nimport org.springframework.ai.bedrock.titan.api.TitanChatBedrockApi.TitanChatResponseChunk;\nimport org.springframework.ai.chat.prompt.Prompt;\nimport java.util.List;\nimport org.springframework.ai.bedrock.titan.api.TitanChatBedrockApi;\nimport org.springframework.ai.chat.Generation;\nimport org.springframework.ai.chat.ChatClient;\nimport reactor.core.publisher.Flux;\nimport org.springframework.util.Assert;\nimport org.springframework.ai.chat.metadata.Usage;\nimport org.springframework.ai.model.ModelOptionsUtils;\nimport org.springframework.ai.bedrock.MessageToPromptConverter;\nimport org.springframework.ai.bedrock.titan.api.TitanChatBedrockApi.TitanChatResponse;\nimport org.springframework.ai.chat.prompt.ChatOptions;\nimport org.springframework.ai.chat.StreamingChatClient;\nimport org.springframework.ai.chat.ChatResponse;\nimport org.springframework.ai.chat.metadata.ChatGenerationMetadata;",
        "package_import_paths": {
            "org.springframework.ai.bedrock.titan.BedrockTitanChatClient": "org.springframework.ai.bedrock.titan.BedrockTitanChatClient",
            "org.springframework.ai.bedrock.titan.call": "org.springframework.ai.bedrock.titan.call",
            "org.springframework.ai.bedrock.titan.stream": "org.springframework.ai.bedrock.titan.stream",
            "org.springframework.ai.bedrock.titan.createRequest": "org.springframework.ai.bedrock.titan.createRequest",
            "org.springframework.ai.bedrock.titan.updat": "org.springframework.ai.bedrock.titan.updat",
            "org.springframework.ai.bedrock.titan.extractUs": "org.springframework.ai.bedrock.titan.extractUs",
            "org.springframework.ai.bedrock.titan.getPromptTokens": "org.springframework.ai.bedrock.titan.getPromptTokens",
            "org.springframework.ai.bedrock.titan.getGenerationTokens": "org.springframework.ai.bedrock.titan.getGenerationTokens",
            "org.springframework.ai.bedrock.titan.chatApi": "org.springframework.ai.bedrock.titan.chatApi",
            "org.springframework.ai.bedrock.titan.defaultOptions": "org.springframework.ai.bedrock.titan.defaultOptions"
        },
        "package": "package org.springframework.ai.bedrock.titan;",
        "property_declarations": [
            "private final BedrockTitanChatOptions defaultOptions;",
            "private final TitanChatBedrockApi chatApi;"
        ],
        "functions": [
            {
                "name": "call",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "TitanChatResponse response = this.chatApi.chatCompletion(this.createRequest(prompt));\n\t\tList<Generation> generations = response.results().stream().map(result -> {\n\t\t\treturn new Generation(result.outputText());\n\t\t}).toList();\n\n\t\treturn new ChatResponse(generations);",
                "is_abstract": "",
                "class_name": "BedrockTitanChatClient",
                "annotations": []
            },
            {
                "name": "stream",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.chatApi.chatCompletionStream(this.createRequest(prompt)).map(chunk -> {\n\n\t\t\tGeneration generation = new Generation(chunk.outputText());\n\n\t\t\tif (chunk.amazonBedrockInvocationMetrics() != null) {\n\t\t\t\tString completionReason = chunk.completionReason().name();\n\t\t\t\tgeneration = generation.withGenerationMetadata(\n\t\t\t\t\t\tChatGenerationMetadata.from(completionReason, chunk.amazonBedrockInvocationMetrics()));\n\t\t\t}\n\t\t\telse if (chunk.inputTextTokenCount() != null && chunk.totalOutputTextTokenCount() != null) {\n\t\t\t\tString completionReason = chunk.completionReason().name();\n\t\t\t\tgeneration = generation\n\t\t\t\t\t.withGenerationMetadata(ChatGenerationMetadata.from(completionReason, extractUsage(chunk)));\n\n\t\t\t}\n\t\t\treturn new ChatResponse(List.of(generation));\n\t\t});",
                "is_abstract": "",
                "class_name": "BedrockTitanChatClient",
                "annotations": []
            },
            {
                "name": "createRequest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "final String promptValue = MessageToPromptConverter.create().toPrompt(prompt.getInstructions());\n\n\t\tvar requestBuilder = TitanChatRequest.builder(promptValue);\n\n\t\tif (this.defaultOptions != null) {\n\t\t\trequestBuilder = update(requestBuilder, this.defaultOptions);\n\t\t}\n\n\t\tif (prompt.getOptions() != null) {\n\t\t\tif (prompt.getOptions() instanceof ChatOptions runtimeOptions) {\n\t\t\t\tBedrockTitanChatOptions updatedRuntimeOptions = ModelOptionsUtils.copyToTarget(runtimeOptions,\n\t\t\t\t\t\tChatOptions.class, BedrockTitanChatOptions.class);\n\n\t\t\t\trequestBuilder = update(requestBuilder, updatedRuntimeOptions);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new IllegalArgumentException(\"Prompt options are not of type ChatOptions: \"\n\t\t\t\t\t\t+ prompt.getOptions().getClass().getSimpleName());\n\t\t\t}\n\t\t}\n\n\t\treturn requestBuilder.build();",
                "is_abstract": "",
                "class_name": "BedrockTitanChatClient",
                "annotations": []
            },
            {
                "name": "update",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (options.getTemperature() != null) {\n\t\t\tbuilder.withTemperature(options.getTemperature());\n\t\t}\n\t\tif (options.getTopP() != null) {\n\t\t\tbuilder.withTopP(options.getTopP());\n\t\t}\n\t\tif (options.getMaxTokenCount() != null) {\n\t\t\tbuilder.withMaxTokenCount(options.getMaxTokenCount());\n\t\t}\n\t\tif (options.getStopSequences() != null) {\n\t\t\tbuilder.withStopSequences(options.getStopSequences());\n\t\t}\n\t\treturn builder;",
                "is_abstract": "",
                "class_name": "BedrockTitanChatClient",
                "annotations": []
            },
            {
                "name": "extractUsage",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Usage() {\n\n\t\t\t@Override\n\t\t\tpublic Long getPromptTokens() {\n\t\t\t\treturn response.inputTextTokenCount().longValue();\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic Long getGenerationTokens() {\n\t\t\t\treturn response.totalOutputTextTokenCount().longValue();\n\t\t\t}\n\t\t};",
                "is_abstract": "",
                "class_name": "BedrockTitanChatClient",
                "annotations": []
            },
            {
                "name": "getPromptTokens",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return response.inputTextTokenCount().longValue();",
                "is_abstract": "",
                "class_name": "BedrockTitanChatClient",
                "annotations": []
            },
            {
                "name": "getGenerationTokens",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return response.totalOutputTextTokenCount().longValue();",
                "is_abstract": "",
                "class_name": "BedrockTitanChatClient",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/titan/BedrockTitanChatOptions.java",
        "class_names": [
            "Builder",
            "BedrockTitanChatOptions"
        ],
        "imports": "import java.util.List;\nimport com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport org.springframework.ai.chat.prompt.ChatOptions;\nimport com.fasterxml.jackson.annotation.JsonProperty;",
        "package_import_paths": {
            "org.springframework.ai.bedrock.titan.BedrockTitanChatOptions": "org.springframework.ai.bedrock.titan.BedrockTitanChatOptions",
            "org.springframework.ai.bedrock.titan.Builder": "org.springframework.ai.bedrock.titan.Builder",
            "org.springframework.ai.bedrock.titan.builder": "org.springframework.ai.bedrock.titan.builder",
            "org.springframework.ai.bedrock.titan.withTemperatur": "org.springframework.ai.bedrock.titan.withTemperatur",
            "org.springframework.ai.bedrock.titan.withTopP": "org.springframework.ai.bedrock.titan.withTopP",
            "org.springframework.ai.bedrock.titan.withMaxTokenCount": "org.springframework.ai.bedrock.titan.withMaxTokenCount",
            "org.springframework.ai.bedrock.titan.withStopSequences": "org.springframework.ai.bedrock.titan.withStopSequences",
            "org.springframework.ai.bedrock.titan.build": "org.springframework.ai.bedrock.titan.build",
            "org.springframework.ai.bedrock.titan.getTemperatur": "org.springframework.ai.bedrock.titan.getTemperatur",
            "org.springframework.ai.bedrock.titan.setTemperatur": "org.springframework.ai.bedrock.titan.setTemperatur",
            "org.springframework.ai.bedrock.titan.getTopP": "org.springframework.ai.bedrock.titan.getTopP",
            "org.springframework.ai.bedrock.titan.setTopP": "org.springframework.ai.bedrock.titan.setTopP",
            "org.springframework.ai.bedrock.titan.getMaxTokenCount": "org.springframework.ai.bedrock.titan.getMaxTokenCount",
            "org.springframework.ai.bedrock.titan.setMaxTokenCount": "org.springframework.ai.bedrock.titan.setMaxTokenCount",
            "org.springframework.ai.bedrock.titan.getStopSequences": "org.springframework.ai.bedrock.titan.getStopSequences",
            "org.springframework.ai.bedrock.titan.setStopSequences": "org.springframework.ai.bedrock.titan.setStopSequences",
            "org.springframework.ai.bedrock.titan.getTopK": "org.springframework.ai.bedrock.titan.getTopK",
            "org.springframework.ai.bedrock.titan.setTopK": "org.springframework.ai.bedrock.titan.setTopK",
            "org.springframework.ai.bedrock.titan.temperatur": "org.springframework.ai.bedrock.titan.temperatur",
            "org.springframework.ai.bedrock.titan.topP": "org.springframework.ai.bedrock.titan.topP",
            "org.springframework.ai.bedrock.titan.maxTokenCount": "org.springframework.ai.bedrock.titan.maxTokenCount",
            "org.springframework.ai.bedrock.titan.stopSequences": "org.springframework.ai.bedrock.titan.stopSequences",
            "org.springframework.ai.bedrock.titan.options": "org.springframework.ai.bedrock.titan.options"
        },
        "package": "package org.springframework.ai.bedrock.titan;",
        "property_declarations": [
            "private @JsonProperty(\"temperature\") Float temperature;",
            "private @JsonProperty(\"stopSequences\") List<String> stopSequences;",
            "private @JsonProperty(\"maxTokenCount\") Integer maxTokenCount;",
            "private BedrockTitanChatOptions options = new BedrockTitanChatOptions();",
            "private @JsonProperty(\"topP\") Float topP;"
        ],
        "functions": [
            {
                "name": "builder",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Builder();",
                "is_abstract": "",
                "class_name": "BedrockTitanChatOptions",
                "annotations": []
            },
            {
                "name": "withTemperature",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.temperature = temperature;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "BedrockTitanChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withTopP",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.topP = topP;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "BedrockTitanChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withMaxTokenCount",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.maxTokenCount = maxTokenCount;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "BedrockTitanChatOptions Builder",
                "annotations": []
            },
            {
                "name": "withStopSequences",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.stopSequences = stopSequences;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "BedrockTitanChatOptions Builder",
                "annotations": []
            },
            {
                "name": "build",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.options;",
                "is_abstract": "",
                "class_name": "BedrockTitanChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getTemperature",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return temperature;",
                "is_abstract": "",
                "class_name": "BedrockTitanChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setTemperature",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.temperature = temperature;",
                "is_abstract": "",
                "class_name": "BedrockTitanChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getTopP",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return topP;",
                "is_abstract": "",
                "class_name": "BedrockTitanChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setTopP",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.topP = topP;",
                "is_abstract": "",
                "class_name": "BedrockTitanChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getMaxTokenCount",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return maxTokenCount;",
                "is_abstract": "",
                "class_name": "BedrockTitanChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setMaxTokenCount",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.maxTokenCount = maxTokenCount;",
                "is_abstract": "",
                "class_name": "BedrockTitanChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getStopSequences",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return stopSequences;",
                "is_abstract": "",
                "class_name": "BedrockTitanChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setStopSequences",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.stopSequences = stopSequences;",
                "is_abstract": "",
                "class_name": "BedrockTitanChatOptions Builder",
                "annotations": []
            },
            {
                "name": "getTopK",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "throw new UnsupportedOperationException(\"Bedrock Titan Chat does not support the 'TopK' option.\");",
                "is_abstract": "",
                "class_name": "BedrockTitanChatOptions Builder",
                "annotations": []
            },
            {
                "name": "setTopK",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "throw new UnsupportedOperationException(\"Bedrock Titan Chat does not support the 'TopK' option.'\");",
                "is_abstract": "",
                "class_name": "BedrockTitanChatOptions Builder",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/titan/api/TitanChatBedrockApi.java",
        "class_names": [
            "Builder",
            "TitanChatBedrockApi"
        ],
        "imports": "import org.springframework.ai.bedrock.titan.api.TitanChatBedrockApi.TitanChatRequest;\nimport org.springframework.ai.bedrock.titan.api.TitanChatBedrockApi.TitanChatResponseChunk;\nimport java.util.List;\nimport com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.springframework.ai.bedrock.api.AbstractBedrockApi;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport reactor.core.publisher.Flux;\nimport org.springframework.ai.bedrock.titan.api.TitanChatBedrockApi.TitanChatResponse.CompletionReason;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport org.springframework.ai.bedrock.titan.api.TitanChatBedrockApi.TitanChatResponse;\nimport software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\nimport java.time.Duration;",
        "package_import_paths": {
            "org.springframework.ai.bedrock.titan.api.TitanChatBedrockApi": "org.springframework.ai.bedrock.titan.api.TitanChatBedrockApi",
            "org.springframework.ai.bedrock.titan.api.Builder": "org.springframework.ai.bedrock.titan.api.Builder",
            "org.springframework.ai.bedrock.titan.api.builder": "org.springframework.ai.bedrock.titan.api.builder",
            "org.springframework.ai.bedrock.titan.api.withTemperatur": "org.springframework.ai.bedrock.titan.api.withTemperatur",
            "org.springframework.ai.bedrock.titan.api.withTopP": "org.springframework.ai.bedrock.titan.api.withTopP",
            "org.springframework.ai.bedrock.titan.api.withMaxTokenCount": "org.springframework.ai.bedrock.titan.api.withMaxTokenCount",
            "org.springframework.ai.bedrock.titan.api.withStopSequences": "org.springframework.ai.bedrock.titan.api.withStopSequences",
            "org.springframework.ai.bedrock.titan.api.build": "org.springframework.ai.bedrock.titan.api.build",
            "org.springframework.ai.bedrock.titan.api.id": "org.springframework.ai.bedrock.titan.api.id",
            "org.springframework.ai.bedrock.titan.api.chatCompletion": "org.springframework.ai.bedrock.titan.api.chatCompletion",
            "org.springframework.ai.bedrock.titan.api.chatCompletionStream": "org.springframework.ai.bedrock.titan.api.chatCompletionStream",
            "org.springframework.ai.bedrock.titan.api.inputText": "org.springframework.ai.bedrock.titan.api.inputText",
            "org.springframework.ai.bedrock.titan.api.temperatur": "org.springframework.ai.bedrock.titan.api.temperatur",
            "org.springframework.ai.bedrock.titan.api.topP": "org.springframework.ai.bedrock.titan.api.topP",
            "org.springframework.ai.bedrock.titan.api.maxTokenCount": "org.springframework.ai.bedrock.titan.api.maxTokenCount",
            "org.springframework.ai.bedrock.titan.api.stopSequences": "org.springframework.ai.bedrock.titan.api.stopSequences"
        },
        "package": "package org.springframework.ai.bedrock.titan.api;",
        "property_declarations": [
            "private Float topP;",
            "private final String inputText;",
            "private List<String> stopSequences;",
            "private final String id;",
            "private Float temperature;",
            "private Integer maxTokenCount;"
        ],
        "functions": [
            {
                "name": "builder",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Builder(inputText);",
                "is_abstract": "",
                "class_name": "TitanChatBedrockApi",
                "annotations": []
            },
            {
                "name": "withTemperature",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.temperature = temperature;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "TitanChatBedrockApi Builder",
                "annotations": []
            },
            {
                "name": "withTopP",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.topP = topP;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "TitanChatBedrockApi Builder",
                "annotations": []
            },
            {
                "name": "withMaxTokenCount",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.maxTokenCount = maxTokenCount;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "TitanChatBedrockApi Builder",
                "annotations": []
            },
            {
                "name": "withStopSequences",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.stopSequences = stopSequences;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "TitanChatBedrockApi Builder",
                "annotations": []
            },
            {
                "name": "build",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (this.temperature == null && this.topP == null && this.maxTokenCount == null\n\t\t\t\t\t\t&& this.stopSequences == null) {\n\t\t\t\t\treturn new TitanChatRequest(this.inputText, null);\n\t\t\t\t} else {\n\t\t\t\t\treturn new TitanChatRequest(this.inputText,\n\t\t\t\t\t\tnew TextGenerationConfig(\n\t\t\t\t\t\t\t\tthis.temperature,\n\t\t\t\t\t\t\t\tthis.topP,\n\t\t\t\t\t\t\t\tthis.maxTokenCount,\n\t\t\t\t\t\t\t\tthis.stopSequences\n\t\t\t\t\t\t));\n\t\t\t\t}",
                "is_abstract": "",
                "class_name": "TitanChatBedrockApi Builder",
                "annotations": [
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"inputTextTokenCount\")",
                    "@JsonProperty(\"results\")",
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"tokenCount\")",
                    "@JsonProperty(\"outputText\")",
                    "@JsonProperty(\"completionReason\")",
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"outputText\")",
                    "@JsonProperty(\"index\")",
                    "@JsonProperty(\"inputTextTokenCount\")",
                    "@JsonProperty(\"totalOutputTextTokenCount\")",
                    "@JsonProperty(\"completionReason\")",
                    "@JsonProperty(\"amazon-bedrock-invocationMetrics\")"
                ]
            },
            {
                "name": "id",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return id;",
                "is_abstract": "",
                "class_name": "TitanChatBedrockApi Builder",
                "annotations": []
            },
            {
                "name": "chatCompletion",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.internalInvocation(request, TitanChatResponse.class);",
                "is_abstract": "",
                "class_name": "TitanChatBedrockApi Builder",
                "annotations": []
            },
            {
                "name": "chatCompletionStream",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.internalInvocationStream(request, TitanChatResponseChunk.class);",
                "is_abstract": "",
                "class_name": "TitanChatBedrockApi Builder",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/titan/api/TitanEmbeddingBedrockApi.java",
        "class_names": [
            "Builder",
            "TitanEmbeddingBedrockApi"
        ],
        "imports": "import org.springframework.ai.bedrock.titan.api.TitanEmbeddingBedrockApi.TitanEmbeddingResponse;\nimport org.springframework.ai.bedrock.titan.api.TitanEmbeddingBedrockApi.TitanEmbeddingRequest;\nimport java.util.List;\nimport com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.springframework.ai.bedrock.api.AbstractBedrockApi;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport org.springframework.util.Assert;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\nimport java.time.Duration;",
        "package_import_paths": {
            "org.springframework.ai.bedrock.titan.api.TitanEmbeddingBedrockApi": "org.springframework.ai.bedrock.titan.api.TitanEmbeddingBedrockApi",
            "org.springframework.ai.bedrock.titan.api.Builder": "org.springframework.ai.bedrock.titan.api.Builder",
            "org.springframework.ai.bedrock.titan.api.builder": "org.springframework.ai.bedrock.titan.api.builder",
            "org.springframework.ai.bedrock.titan.api.withInputText": "org.springframework.ai.bedrock.titan.api.withInputText",
            "org.springframework.ai.bedrock.titan.api.withInputIm": "org.springframework.ai.bedrock.titan.api.withInputIm",
            "org.springframework.ai.bedrock.titan.api.build": "org.springframework.ai.bedrock.titan.api.build",
            "org.springframework.ai.bedrock.titan.api.id": "org.springframework.ai.bedrock.titan.api.id",
            "org.springframework.ai.bedrock.titan.api.embeddin": "org.springframework.ai.bedrock.titan.api.embeddin",
            "org.springframework.ai.bedrock.titan.api.inputText": "org.springframework.ai.bedrock.titan.api.inputText",
            "org.springframework.ai.bedrock.titan.api.inputIm": "org.springframework.ai.bedrock.titan.api.inputIm"
        },
        "package": "package org.springframework.ai.bedrock.titan.api;",
        "property_declarations": [
            "private final String id;",
            "private String inputImage;",
            "private String inputText;"
        ],
        "functions": [
            {
                "name": "builder",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Builder();",
                "is_abstract": "",
                "class_name": "TitanEmbeddingBedrockApi",
                "annotations": []
            },
            {
                "name": "withInputText",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.inputText = inputText;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "TitanEmbeddingBedrockApi Builder",
                "annotations": []
            },
            {
                "name": "withInputImage",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.inputImage = inputImage;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "TitanEmbeddingBedrockApi Builder",
                "annotations": []
            },
            {
                "name": "build",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.isTrue(this.inputText != null || this.inputImage != null,\n\t\t\t\t\t\t\"At least one of the inputText or inputImage parameters must be provided!\");\n\t\t\t\tAssert.isTrue(!(this.inputText != null && this.inputImage != null),\n\t\t\t\t\t\t\"Only one of the inputText or inputImage parameters must be provided!\");\n\n\t\t\t\treturn new TitanEmbeddingRequest(this.inputText, this.inputImage);",
                "is_abstract": "",
                "class_name": "TitanEmbeddingBedrockApi Builder",
                "annotations": [
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(\"embedding\")",
                    "@JsonProperty(\"inputTextTokenCount\")",
                    "@JsonProperty(\"message\")"
                ]
            },
            {
                "name": "id",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return id;",
                "is_abstract": "",
                "class_name": "TitanEmbeddingBedrockApi Builder",
                "annotations": []
            },
            {
                "name": "embedding",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.internalInvocation(request, TitanEmbeddingResponse.class);",
                "is_abstract": "",
                "class_name": "TitanEmbeddingBedrockApi Builder",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/aot/BedrockRuntimeHints.java",
        "class_names": [
            "BedrockRuntimeHints"
        ],
        "imports": "import org.springframework.ai.bedrock.anthropic.AnthropicChatOptions;\nimport org.springframework.ai.bedrock.cohere.api.CohereEmbeddingBedrockApi;\nimport org.springframework.aot.hint.RuntimeHintsRegistrar;\nimport org.springframework.ai.bedrock.anthropic.api.AnthropicChatBedrockApi;\nimport org.springframework.ai.bedrock.cohere.BedrockCohereEmbeddingOptions;\nimport org.springframework.ai.bedrock.llama2.BedrockLlama2ChatOptions;\nimport org.springframework.aot.hint.MemberCategory;\nimport org.springframework.aot.hint.RuntimeHints;\nimport org.springframework.ai.bedrock.cohere.BedrockCohereChatOptions;\nimport org.springframework.ai.bedrock.anthropic3.api.Anthropic3ChatBedrockApi;\nimport static org.springframework.ai.aot.AiRuntimeHints.findJsonAnnotatedClassesInPackage;\nimport org.springframework.ai.bedrock.api.AbstractBedrockApi;\nimport org.springframework.ai.bedrock.anthropic3.Anthropic3ChatOptions;\nimport org.springframework.ai.bedrock.titan.api.TitanChatBedrockApi;\nimport org.springframework.ai.bedrock.jurassic2.api.Ai21Jurassic2ChatBedrockApi;\nimport org.springframework.ai.bedrock.cohere.api.CohereChatBedrockApi;\nimport org.springframework.ai.bedrock.llama2.api.Llama2ChatBedrockApi;\nimport org.springframework.ai.bedrock.titan.api.TitanEmbeddingBedrockApi;\nimport org.springframework.ai.bedrock.titan.BedrockTitanChatOptions;",
        "package_import_paths": {
            "org.springframework.ai.bedrock.aot.BedrockRuntimeHints": "org.springframework.ai.bedrock.aot.BedrockRuntimeHints",
            "org.springframework.ai.bedrock.aot.registerHints": "org.springframework.ai.bedrock.aot.registerHints"
        },
        "package": "package org.springframework.ai.bedrock.aot;",
        "property_declarations": [],
        "functions": [
            {
                "name": "registerHints",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var mcs = MemberCategory.values();\n\t\tfor (var tr : findJsonAnnotatedClassesInPackage(AbstractBedrockApi.class))\n\t\t\thints.reflection().registerType(tr, mcs);\n\t\tfor (var tr : findJsonAnnotatedClassesInPackage(Ai21Jurassic2ChatBedrockApi.class))\n\t\t\thints.reflection().registerType(tr, mcs);\n\n\t\tfor (var tr : findJsonAnnotatedClassesInPackage(CohereChatBedrockApi.class))\n\t\t\thints.reflection().registerType(tr, mcs);\n\t\tfor (var tr : findJsonAnnotatedClassesInPackage(BedrockCohereChatOptions.class))\n\t\t\thints.reflection().registerType(tr, mcs);\n\t\tfor (var tr : findJsonAnnotatedClassesInPackage(CohereEmbeddingBedrockApi.class))\n\t\t\thints.reflection().registerType(tr, mcs);\n\t\tfor (var tr : findJsonAnnotatedClassesInPackage(BedrockCohereEmbeddingOptions.class))\n\t\t\thints.reflection().registerType(tr, mcs);\n\n\t\tfor (var tr : findJsonAnnotatedClassesInPackage(Llama2ChatBedrockApi.class))\n\t\t\thints.reflection().registerType(tr, mcs);\n\t\tfor (var tr : findJsonAnnotatedClassesInPackage(BedrockLlama2ChatOptions.class))\n\t\t\thints.reflection().registerType(tr, mcs);\n\n\t\tfor (var tr : findJsonAnnotatedClassesInPackage(TitanChatBedrockApi.class))\n\t\t\thints.reflection().registerType(tr, mcs);\n\t\tfor (var tr : findJsonAnnotatedClassesInPackage(BedrockTitanChatOptions.class))\n\t\t\thints.reflection().registerType(tr, mcs);\n\t\tfor (var tr : findJsonAnnotatedClassesInPackage(TitanEmbeddingBedrockApi.class))\n\t\t\thints.reflection().registerType(tr, mcs);\n\n\t\tfor (var tr : findJsonAnnotatedClassesInPackage(AnthropicChatBedrockApi.class))\n\t\t\thints.reflection().registerType(tr, mcs);\n\t\tfor (var tr : findJsonAnnotatedClassesInPackage(AnthropicChatOptions.class))\n\t\t\thints.reflection().registerType(tr, mcs);\n\n\t\tfor (var tr : findJsonAnnotatedClassesInPackage(Anthropic3ChatBedrockApi.class))\n\t\t\thints.reflection().registerType(tr, mcs);\n\t\tfor (var tr : findJsonAnnotatedClassesInPackage(Anthropic3ChatOptions.class))\n\t\t\thints.reflection().registerType(tr, mcs);",
                "is_abstract": "",
                "class_name": "BedrockRuntimeHints",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/vector-stores/spring-ai-neo4j-store/src/test/java/org/springframework/ai/vectorstore/Neo4jVectorStoreIT.java",
        "class_names": [
            "Neo4jVectorStoreIT",
            "TestApplication"
        ],
        "imports": "import java.util.List;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport org.neo4j.driver.Driver;\nimport org.neo4j.driver.GraphDatabase;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport java.util.Map;\nimport org.springframework.ai.openai.api.OpenAiApi;\nimport org.springframework.context.annotation.Bean;\nimport org.neo4j.driver.AuthTokens;\nimport java.util.Collections;\nimport org.springframework.ai.embedding.EmbeddingClient;\nimport org.springframework.boot.SpringBootConfiguration;\nimport org.testcontainers.junit.jupiter.Testcontainers;\nimport org.testcontainers.containers.Neo4jContainer;\nimport org.testcontainers.utility.DockerImageName;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.springframework.ai.vectorstore.filter.FilterExpressionTextParser;\nimport org.springframework.ai.document.Document;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\nimport org.testcontainers.junit.jupiter.Container;\nimport java.util.UUID;\nimport org.springframework.ai.openai.OpenAiEmbeddingClient;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.Neo4jVectorStoreIT": "org.springframework.ai.vectorstore.Neo4jVectorStoreIT",
            "org.springframework.ai.vectorstore.TestApplication": "org.springframework.ai.vectorstore.TestApplication",
            "org.springframework.ai.vectorstore.cleanDatabas": "org.springframework.ai.vectorstore.cleanDatabas",
            "org.springframework.ai.vectorstore.addAndSearchTest": "org.springframework.ai.vectorstore.addAndSearchTest",
            "org.springframework.ai.vectorstore.searchWithFilters": "org.springframework.ai.vectorstore.searchWithFilters",
            "org.springframework.ai.vectorstore.documentUpdateTest": "org.springframework.ai.vectorstore.documentUpdateTest",
            "org.springframework.ai.vectorstore.searchThresholdTest": "org.springframework.ai.vectorstore.searchThresholdTest",
            "org.springframework.ai.vectorstore.ensureVectorIndexGetsCreated": "org.springframework.ai.vectorstore.ensureVectorIndexGetsCreated",
            "org.springframework.ai.vectorstore.ensureIdIndexGetsCreated": "org.springframework.ai.vectorstore.ensureIdIndexGetsCreated",
            "org.springframework.ai.vectorstore.vectorStor": "org.springframework.ai.vectorstore.vectorStor",
            "org.springframework.ai.vectorstore.driver": "org.springframework.ai.vectorstore.driver",
            "org.springframework.ai.vectorstore.embeddingClient": "org.springframework.ai.vectorstore.embeddingClient",
            "org.springframework.ai.vectorstore.stati": "org.springframework.ai.vectorstore.stati",
            "org.springframework.ai.vectorstore.documents": "org.springframework.ai.vectorstore.documents",
            "org.springframework.ai.vectorstore.contextRunner": "org.springframework.ai.vectorstore.contextRunner"
        },
        "package": "package org.springframework.ai.vectorstore;",
        "property_declarations": [
            "private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t.withUserConfiguration(TestApplication.class);",
            "List<Document> documents = List.of(\n\t\t\tnew Document(\"Spring AI rocks!! Spring AI rocks!! Spring AI rocks!! Spring AI rocks!! Spring AI rocks!!\",\n\t\t\t\t\tCollections.singletonMap(\"meta1\", \"meta1\")),\n\t\t\tnew Document(\"Hello World Hello World Hello World Hello World Hello World Hello World Hello World\"),\n\t\t\tnew Document(\n\t\t\t\t\t\"Great Depression Great Depression Great Depression Great Depression Great Depression Great Depression\",\n\t\t\t\t\tCollections.singletonMap(\"meta2\", \"meta2\")));",
            "@Container\n\tstatic Neo4jContainer<?> neo4jContainer = new Neo4jContainer<>(DockerImageName.parse(\"neo4j:5.18\"))\n\t\t.withRandomPassword();"
        ],
        "functions": [
            {
                "name": "cleanDatabase",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.contextRunner\n\t\t\t.run(context -> context.getBean(Driver.class).executableQuery(\"MATCH (n) DETACH DELETE n\").execute());",
                "is_abstract": "",
                "class_name": "Neo4jVectorStoreIT",
                "annotations": []
            },
            {
                "name": "addAndSearchTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.contextRunner.run(context -> {\n\n\t\t\tVectorStore vectorStore = context.getBean(VectorStore.class);\n\n\t\t\tvectorStore.add(this.documents);\n\n\t\t\tList<Document> results = vectorStore.similaritySearch(SearchRequest.query(\"Great\").withTopK(1));\n\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tDocument resultDoc = results.get(0);\n\t\t\tassertThat(resultDoc.getId()).isEqualTo(this.documents.get(2).getId());\n\t\t\tassertThat(resultDoc.getContent()).isEqualTo(\n\t\t\t\t\t\"Great Depression Great Depression Great Depression Great Depression Great Depression Great Depression\");\n\t\t\tassertThat(resultDoc.getMetadata()).containsKey(\"meta2\");\n\t\t\tassertThat(resultDoc.getMetadata()).containsKey(\"distance\");\n\n\t\t\t// Remove all documents from the store\n\t\t\tvectorStore.delete(this.documents.stream().map(Document::getId).toList());\n\n\t\t\tList<Document> results2 = vectorStore.similaritySearch(SearchRequest.query(\"Great\").withTopK(1));\n\t\t\tassertThat(results2).isEmpty();\n\t\t});",
                "is_abstract": "",
                "class_name": "Neo4jVectorStoreIT",
                "annotations": []
            },
            {
                "name": "searchWithFilters",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.contextRunner.run(context -> {\n\n\t\t\tVectorStore vectorStore = context.getBean(VectorStore.class);\n\n\t\t\tvar bgDocument = new Document(\"The World is Big and Salvation Lurks Around the Corner\",\n\t\t\t\t\tMap.of(\"country\", \"BG\", \"year\", 2020, \"foo bar 1\", \"bar.foo\"));\n\t\t\tvar nlDocument = new Document(\"The World is Big and Salvation Lurks Around the Corner\",\n\t\t\t\t\tMap.of(\"country\", \"NL\"));\n\t\t\tvar bgDocument2 = new Document(\"The World is Big and Salvation Lurks Around the Corner\",\n\t\t\t\t\tMap.of(\"country\", \"BG\", \"year\", 2023));\n\n\t\t\tvectorStore.add(List.of(bgDocument, nlDocument, bgDocument2));\n\n\t\t\tSearchRequest searchRequest = SearchRequest.query(\"The World\").withTopK(5).withSimilarityThresholdAll();\n\n\t\t\tList<Document> results = vectorStore.similaritySearch(searchRequest);\n\n\t\t\tassertThat(results).hasSize(3);\n\n\t\t\tresults = vectorStore.similaritySearch(searchRequest.withFilterExpression(\"country == 'NL'\"));\n\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tassertThat(results.get(0).getId()).isEqualTo(nlDocument.getId());\n\n\t\t\tresults = vectorStore.similaritySearch(searchRequest.withFilterExpression(\"country in ['NL']\"));\n\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tassertThat(results.get(0).getId()).isEqualTo(nlDocument.getId());\n\n\t\t\tresults = vectorStore.similaritySearch(searchRequest.withFilterExpression(\"country nin ['BG']\"));\n\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tassertThat(results.get(0).getId()).isEqualTo(nlDocument.getId());\n\n\t\t\tresults = vectorStore.similaritySearch(searchRequest.withFilterExpression(\"country not in ['BG']\"));\n\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tassertThat(results.get(0).getId()).isEqualTo(nlDocument.getId());\n\n\t\t\tresults = vectorStore.similaritySearch(searchRequest.withFilterExpression(\"country == 'BG'\"));\n\n\t\t\tassertThat(results).hasSize(2);\n\t\t\tassertThat(results.get(0).getId()).isIn(bgDocument.getId(), bgDocument2.getId());\n\t\t\tassertThat(results.get(1).getId()).isIn(bgDocument.getId(), bgDocument2.getId());\n\n\t\t\tresults = vectorStore\n\t\t\t\t.similaritySearch(searchRequest.withFilterExpression(\"country == 'BG' && year == 2020\"));\n\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tassertThat(results.get(0).getId()).isEqualTo(bgDocument.getId());\n\n\t\t\tresults = vectorStore.similaritySearch(\n\t\t\t\t\tsearchRequest.withFilterExpression(\"(country == 'BG' && year == 2020) || (country == 'NL')\"));\n\n\t\t\tassertThat(results).hasSize(2);\n\t\t\tassertThat(results.get(0).getId()).isIn(bgDocument.getId(), nlDocument.getId());\n\t\t\tassertThat(results.get(1).getId()).isIn(bgDocument.getId(), nlDocument.getId());\n\n\t\t\tresults = vectorStore.similaritySearch(\n\t\t\t\t\tsearchRequest.withFilterExpression(\"NOT((country == 'BG' && year == 2020) || (country == 'NL'))\"));\n\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tassertThat(results.get(0).getId()).isEqualTo(bgDocument2.getId());\n\n\t\t\tresults = vectorStore.similaritySearch(SearchRequest.query(\"The World\")\n\t\t\t\t.withTopK(5)\n\t\t\t\t.withSimilarityThresholdAll()\n\t\t\t\t.withFilterExpression(\"\\\"foo bar 1\\\" == 'bar.foo'\"));\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tassertThat(results.get(0).getId()).isEqualTo(bgDocument.getId());\n\n\t\t\ttry {\n\t\t\t\tvectorStore.similaritySearch(searchRequest.withFilterExpression(\"country == NL\"));\n\t\t\t\tAssert.fail(\"Invalid filter expression should have been cached!\");\n\t\t\t}\n\t\t\tcatch (FilterExpressionTextParser.FilterExpressionParseException e) {\n\t\t\t\tassertThat(e.getMessage()).contains(\"Line: 1:17, Error: no viable alternative at input 'NL'\");\n\t\t\t}\n\t\t});",
                "is_abstract": "",
                "class_name": "Neo4jVectorStoreIT",
                "annotations": []
            },
            {
                "name": "documentUpdateTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.contextRunner.run(context -> {\n\n\t\t\tVectorStore vectorStore = context.getBean(VectorStore.class);\n\n\t\t\tDocument document = new Document(UUID.randomUUID().toString(), \"Spring AI rocks!!\",\n\t\t\t\t\tCollections.singletonMap(\"meta1\", \"meta1\"));\n\n\t\t\tvectorStore.add(List.of(document));\n\n\t\t\tList<Document> results = vectorStore.similaritySearch(SearchRequest.query(\"Spring\").withTopK(5));\n\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tDocument resultDoc = results.get(0);\n\t\t\tassertThat(resultDoc.getId()).isEqualTo(document.getId());\n\t\t\tassertThat(resultDoc.getContent()).isEqualTo(\"Spring AI rocks!!\");\n\t\t\tassertThat(resultDoc.getMetadata()).containsKey(\"meta1\");\n\t\t\tassertThat(resultDoc.getMetadata()).containsKey(\"distance\");\n\n\t\t\tDocument sameIdDocument = new Document(document.getId(),\n\t\t\t\t\t\"The World is Big and Salvation Lurks Around the Corner\",\n\t\t\t\t\tCollections.singletonMap(\"meta2\", \"meta2\"));\n\n\t\t\tvectorStore.add(List.of(sameIdDocument));\n\n\t\t\tresults = vectorStore.similaritySearch(SearchRequest.query(\"FooBar\").withTopK(5));\n\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tresultDoc = results.get(0);\n\t\t\tassertThat(resultDoc.getId()).isEqualTo(document.getId());\n\t\t\tassertThat(resultDoc.getContent()).isEqualTo(\"The World is Big and Salvation Lurks Around the Corner\");\n\t\t\tassertThat(resultDoc.getMetadata()).containsKey(\"meta2\");\n\t\t\tassertThat(resultDoc.getMetadata()).containsKey(\"distance\");\n\n\t\t});",
                "is_abstract": "",
                "class_name": "Neo4jVectorStoreIT",
                "annotations": []
            },
            {
                "name": "searchThresholdTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.contextRunner.run(context -> {\n\n\t\t\tVectorStore vectorStore = context.getBean(VectorStore.class);\n\n\t\t\tvectorStore.add(this.documents);\n\n\t\t\tList<Document> fullResult = vectorStore\n\t\t\t\t.similaritySearch(SearchRequest.query(\"Great\").withTopK(5).withSimilarityThresholdAll());\n\n\t\t\tList<Float> distances = fullResult.stream().map(doc -> (Float) doc.getMetadata().get(\"distance\")).toList();\n\n\t\t\tassertThat(distances).hasSize(3);\n\n\t\t\tfloat threshold = (distances.get(0) + distances.get(1)) / 2;\n\n\t\t\tList<Document> results = vectorStore\n\t\t\t\t.similaritySearch(SearchRequest.query(\"Great\").withTopK(5).withSimilarityThreshold(1 - threshold));\n\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tDocument resultDoc = results.get(0);\n\t\t\tassertThat(resultDoc.getId()).isEqualTo(this.documents.get(2).getId());\n\t\t\tassertThat(resultDoc.getContent()).isEqualTo(\n\t\t\t\t\t\"Great Depression Great Depression Great Depression Great Depression Great Depression Great Depression\");\n\t\t\tassertThat(resultDoc.getMetadata()).containsKey(\"meta2\");\n\t\t\tassertThat(resultDoc.getMetadata()).containsKey(\"distance\");\n\n\t\t});",
                "is_abstract": "",
                "class_name": "Neo4jVectorStoreIT",
                "annotations": []
            },
            {
                "name": "ensureVectorIndexGetsCreated",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.contextRunner.run(context -> {\n\t\t\tassertThat(context.getBean(Driver.class)\n\t\t\t\t.executableQuery(\n\t\t\t\t\t\t\"SHOW indexes yield name, type WHERE name = 'spring-ai-document-index' AND type = 'VECTOR' return count(*) > 0\")\n\t\t\t\t.execute()\n\t\t\t\t.records()\n\t\t\t\t.get(0) // get first record\n\t\t\t\t.get(0)\n\t\t\t\t.asBoolean()) // get returned result\n\t\t\t\t.isTrue();\n\t\t});",
                "is_abstract": "",
                "class_name": "Neo4jVectorStoreIT",
                "annotations": []
            },
            {
                "name": "ensureIdIndexGetsCreated",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.contextRunner.run(context -> {\n\t\t\tassertThat(context.getBean(Driver.class)\n\t\t\t\t.executableQuery(\n\t\t\t\t\t\t\"SHOW indexes yield labelsOrTypes, properties, type WHERE any(x in labelsOrTypes where x = 'Document')  AND any(x in properties where x = 'id') AND type = 'RANGE' return count(*) > 0\")\n\t\t\t\t.execute()\n\t\t\t\t.records()\n\t\t\t\t.get(0) // get first record\n\t\t\t\t.get(0)\n\t\t\t\t.asBoolean()) // get returned result\n\t\t\t\t.isTrue();\n\t\t});",
                "is_abstract": "",
                "class_name": "Neo4jVectorStoreIT",
                "annotations": [
                    "@EnableAutoConfiguration(exclude = { DataSourceAutoConfiguration.class })"
                ]
            },
            {
                "name": "vectorStore",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Neo4jVectorStore(driver, embeddingClient,\n\t\t\t\t\tNeo4jVectorStore.Neo4jVectorStoreConfig.defaultConfig());",
                "is_abstract": "",
                "class_name": "Neo4jVectorStoreIT TestApplication",
                "annotations": []
            },
            {
                "name": "driver",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return GraphDatabase.driver(neo4jContainer.getBoltUrl(),\n\t\t\t\t\tAuthTokens.basic(\"neo4j\", neo4jContainer.getAdminPassword()));",
                "is_abstract": "",
                "class_name": "Neo4jVectorStoreIT TestApplication",
                "annotations": []
            },
            {
                "name": "embeddingClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new OpenAiEmbeddingClient(new OpenAiApi(System.getenv(\"OPENAI_API_KEY\")));",
                "is_abstract": "",
                "class_name": "Neo4jVectorStoreIT TestApplication",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/vector-stores/spring-ai-neo4j-store/src/test/java/org/springframework/ai/vectorstore/filter/Neo4jVectorFilterExpressionConverterTests.java",
        "class_names": [
            "Neo4jVectorFilterExpressionConverterTests"
        ],
        "imports": "import static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.NIN;\nimport java.util.List;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.GTE;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.NE;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.NOT;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.OR;\nimport org.springframework.ai.vectorstore.filter.Filter.Key;\nimport org.springframework.ai.vectorstore.filter.Filter.Group;\nimport org.springframework.ai.vectorstore.filter.Filter.Expression;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.vectorstore.filter.Filter.Value;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.IN;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.LTE;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.AND;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.EQ;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.filter.Neo4jVectorFilterExpressionConverterTests": "org.springframework.ai.vectorstore.filter.Neo4jVectorFilterExpressionConverterTests",
            "org.springframework.ai.vectorstore.filter.testEQ": "org.springframework.ai.vectorstore.filter.testEQ",
            "org.springframework.ai.vectorstore.filter.tesEqAndGt": "org.springframework.ai.vectorstore.filter.tesEqAndGt",
            "org.springframework.ai.vectorstore.filter.tesIn": "org.springframework.ai.vectorstore.filter.tesIn",
            "org.springframework.ai.vectorstore.filter.tesNIn": "org.springframework.ai.vectorstore.filter.tesNIn",
            "org.springframework.ai.vectorstore.filter.testN": "org.springframework.ai.vectorstore.filter.testN",
            "org.springframework.ai.vectorstore.filter.testGrou": "org.springframework.ai.vectorstore.filter.testGrou",
            "org.springframework.ai.vectorstore.filter.testBoolean": "org.springframework.ai.vectorstore.filter.testBoolean",
            "org.springframework.ai.vectorstore.filter.testDecimal": "org.springframework.ai.vectorstore.filter.testDecimal",
            "org.springframework.ai.vectorstore.filter.testComplexIdentifiers": "org.springframework.ai.vectorstore.filter.testComplexIdentifiers",
            "org.springframework.ai.vectorstore.filter.testComplexIdentifiers2": "org.springframework.ai.vectorstore.filter.testComplexIdentifiers2",
            "org.springframework.ai.vectorstore.filter.converter": "org.springframework.ai.vectorstore.filter.converter"
        },
        "package": "package org.springframework.ai.vectorstore.filter;",
        "property_declarations": [
            "FilterExpressionConverter converter = new Neo4jVectorFilterExpressionConverter();"
        ],
        "functions": [
            {
                "name": "testEQ",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// country = \"BG\"\n\t\tString vectorExpr = converter.convertExpression(new Expression(EQ, new Key(\"country\"), new Value(\"BG\")));\n\t\tassertThat(vectorExpr).isEqualTo(\"node.`metadata.country` = \\\"BG\\\"\");",
                "is_abstract": "",
                "class_name": "Neo4jVectorFilterExpressionConverterTests",
                "annotations": []
            },
            {
                "name": "tesEqAndGte",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// genre = \"drama\" AND year >= 2020\n\t\tString vectorExpr = converter\n\t\t\t.convertExpression(new Expression(AND, new Expression(EQ, new Key(\"genre\"), new Value(\"drama\")),\n\t\t\t\t\tnew Expression(GTE, new Key(\"year\"), new Value(2020))));\n\t\tassertThat(vectorExpr).isEqualTo(\"node.`metadata.genre` = \\\"drama\\\" AND node.`metadata.year` >= 2020\");",
                "is_abstract": "",
                "class_name": "Neo4jVectorFilterExpressionConverterTests",
                "annotations": []
            },
            {
                "name": "tesIn",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// genre in [\"comedy\", \"documentary\", \"drama\"]\n\t\tString vectorExpr = converter.convertExpression(\n\t\t\t\tnew Expression(IN, new Key(\"genre\"), new Value(List.of(\"comedy\", \"documentary\", \"drama\"))));\n\t\tassertThat(vectorExpr).isEqualTo(\"node.`metadata.genre` IN [\\\"comedy\\\",\\\"documentary\\\",\\\"drama\\\"]\");",
                "is_abstract": "",
                "class_name": "Neo4jVectorFilterExpressionConverterTests",
                "annotations": []
            },
            {
                "name": "tesNIn",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// genre in [\"comedy\", \"documentary\", \"drama\"]\n\t\tString vectorExpr = converter.convertExpression(\n\t\t\t\tnew Expression(NIN, new Key(\"genre\"), new Value(List.of(\"comedy\", \"documentary\", \"drama\"))));\n\t\tassertThat(vectorExpr).isEqualTo(\"NOT node.`metadata.genre` IN [\\\"comedy\\\",\\\"documentary\\\",\\\"drama\\\"]\");",
                "is_abstract": "",
                "class_name": "Neo4jVectorFilterExpressionConverterTests",
                "annotations": []
            },
            {
                "name": "testNe",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// year >= 2020 OR country = \"BG\" AND city != \"Sofia\"\n\t\tString vectorExpr = converter\n\t\t\t.convertExpression(new Expression(OR, new Expression(GTE, new Key(\"year\"), new Value(2020)),\n\t\t\t\t\tnew Expression(AND, new Expression(EQ, new Key(\"country\"), new Value(\"BG\")),\n\t\t\t\t\t\t\tnew Expression(NE, new Key(\"city\"), new Value(\"Sofia\")))));\n\t\tassertThat(vectorExpr).isEqualTo(\n\t\t\t\t\"node.`metadata.year` >= 2020 OR node.`metadata.country` = \\\"BG\\\" AND node.`metadata.city` != \\\"Sofia\\\"\");",
                "is_abstract": "",
                "class_name": "Neo4jVectorFilterExpressionConverterTests",
                "annotations": []
            },
            {
                "name": "testGroup",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// (year >= 2020 OR country = \"BG\") AND NOT city IN [\"Sofia\", \"Plovdiv\"]\n\t\tString vectorExpr = converter.convertExpression(new Expression(AND,\n\t\t\t\tnew Group(new Expression(OR, new Expression(GTE, new Key(\"year\"), new Value(2020)),\n\t\t\t\t\t\tnew Expression(EQ, new Key(\"country\"), new Value(\"BG\")))),\n\t\t\t\tnew Expression(NOT, new Expression(IN, new Key(\"city\"), new Value(List.of(\"Sofia\", \"Plovdiv\"))))));\n\t\tassertThat(vectorExpr).isEqualTo(\n\t\t\t\t\"(node.`metadata.year` >= 2020 OR node.`metadata.country` = \\\"BG\\\") AND NOT node.`metadata.city` IN [\\\"Sofia\\\",\\\"Plovdiv\\\"]\");",
                "is_abstract": "",
                "class_name": "Neo4jVectorFilterExpressionConverterTests",
                "annotations": []
            },
            {
                "name": "testBoolean",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// isOpen = true AND year >= 2020 AND country IN [\"BG\", \"NL\", \"US\"]\n\t\tString vectorExpr = converter.convertExpression(new Expression(AND,\n\t\t\t\tnew Expression(AND, new Expression(EQ, new Key(\"isOpen\"), new Value(true)),\n\t\t\t\t\t\tnew Expression(GTE, new Key(\"year\"), new Value(2020))),\n\t\t\t\tnew Expression(IN, new Key(\"country\"), new Value(List.of(\"BG\", \"NL\", \"US\")))));\n\n\t\tassertThat(vectorExpr).isEqualTo(\n\t\t\t\t\"node.`metadata.isOpen` = true AND node.`metadata.year` >= 2020 AND node.`metadata.country` IN [\\\"BG\\\",\\\"NL\\\",\\\"US\\\"]\");",
                "is_abstract": "",
                "class_name": "Neo4jVectorFilterExpressionConverterTests",
                "annotations": []
            },
            {
                "name": "testDecimal",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// temperature >= -15.6 AND temperature <= +20.13\n\t\tString vectorExpr = converter\n\t\t\t.convertExpression(new Expression(AND, new Expression(GTE, new Key(\"temperature\"), new Value(-15.6)),\n\t\t\t\t\tnew Expression(LTE, new Key(\"temperature\"), new Value(20.13))));\n\n\t\tassertThat(vectorExpr)\n\t\t\t.isEqualTo(\"node.`metadata.temperature` >= -15.6 AND node.`metadata.temperature` <= 20.13\");",
                "is_abstract": "",
                "class_name": "Neo4jVectorFilterExpressionConverterTests",
                "annotations": []
            },
            {
                "name": "testComplexIdentifiers",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String vectorExpr = converter\n\t\t\t.convertExpression(new Expression(EQ, new Key(\"\\\"country 1 2 3\\\"\"), new Value(\"BG\")));\n\t\tassertThat(vectorExpr).isEqualTo(\"node.`metadata.country 1 2 3` = \\\"BG\\\"\");",
                "is_abstract": "",
                "class_name": "Neo4jVectorFilterExpressionConverterTests",
                "annotations": []
            },
            {
                "name": "testComplexIdentifiers2",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Filter.Expression expr = new FilterExpressionTextParser()\n\t\t\t.parse(\"author in ['john', 'jill'] && 'article_type' == 'blog'\");\n\t\tString vectorExpr = converter.convertExpression(expr);\n\t\tassertThat(vectorExpr)\n\t\t\t.isEqualTo(\"node.`metadata.author` IN [\\\"john\\\",\\\"jill\\\"] AND node.`metadata.'article_type'` = \\\"blog\\\"\");",
                "is_abstract": "",
                "class_name": "Neo4jVectorFilterExpressionConverterTests",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/vector-stores/spring-ai-neo4j-store/src/main/java/org/springframework/ai/vectorstore/Neo4jVectorStore.java",
        "class_names": [
            "Builder",
            "Neo4jVectorStoreConfig",
            "Neo4jVectorStore"
        ],
        "imports": "import java.util.List;\nimport org.springframework.util.Assert;\nimport org.springframework.ai.document.Document;\nimport java.util.Map;\nimport java.util.HashMap;\nimport org.neo4j.cypherdsl.support.schema_name.SchemaNames;\nimport java.util.function.Predicate;\nimport org.neo4j.driver.Values;\nimport org.springframework.beans.factory.InitializingBean;\nimport org.springframework.ai.vectorstore.filter.Neo4jVectorFilterExpressionConverter;\nimport org.springframework.ai.embedding.EmbeddingClient;\nimport java.util.Optional;\nimport org.neo4j.driver.SessionConfig;\nimport org.neo4j.driver.Driver;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.Neo4jVectorStor": "org.springframework.ai.vectorstore.Neo4jVectorStor",
            "org.springframework.ai.vectorstore.Neo4jVectorStoreConfi": "org.springframework.ai.vectorstore.Neo4jVectorStoreConfi",
            "org.springframework.ai.vectorstore.Builder": "org.springframework.ai.vectorstore.Builder",
            "org.springframework.ai.vectorstore.builder": "org.springframework.ai.vectorstore.builder",
            "org.springframework.ai.vectorstore.defaultConfi": "org.springframework.ai.vectorstore.defaultConfi",
            "org.springframework.ai.vectorstore.withDatabaseNam": "org.springframework.ai.vectorstore.withDatabaseNam",
            "org.springframework.ai.vectorstore.withEmbeddingDimension": "org.springframework.ai.vectorstore.withEmbeddingDimension",
            "org.springframework.ai.vectorstore.withDistanceTy": "org.springframework.ai.vectorstore.withDistanceTy",
            "org.springframework.ai.vectorstore.withLabel": "org.springframework.ai.vectorstore.withLabel",
            "org.springframework.ai.vectorstore.withEmbeddingProperty": "org.springframework.ai.vectorstore.withEmbeddingProperty",
            "org.springframework.ai.vectorstore.withIndexNam": "org.springframework.ai.vectorstore.withIndexNam",
            "org.springframework.ai.vectorstore.withIdProperty": "org.springframework.ai.vectorstore.withIdProperty",
            "org.springframework.ai.vectorstore.withConstraintNam": "org.springframework.ai.vectorstore.withConstraintNam",
            "org.springframework.ai.vectorstore.build": "org.springframework.ai.vectorstore.build",
            "org.springframework.ai.vectorstore.add": "org.springframework.ai.vectorstore.add",
            "org.springframework.ai.vectorstore.delet": "org.springframework.ai.vectorstore.delet",
            "org.springframework.ai.vectorstore.similaritySearch": "org.springframework.ai.vectorstore.similaritySearch",
            "org.springframework.ai.vectorstore.afterPropertiesSet": "org.springframework.ai.vectorstore.afterPropertiesSet",
            "org.springframework.ai.vectorstore.documentToRecord": "org.springframework.ai.vectorstore.documentToRecord",
            "org.springframework.ai.vectorstore.toFloatArray": "org.springframework.ai.vectorstore.toFloatArray",
            "org.springframework.ai.vectorstore.recordToDocument": "org.springframework.ai.vectorstore.recordToDocument",
            "org.springframework.ai.vectorstore.nam": "org.springframework.ai.vectorstore.nam",
            "org.springframework.ai.vectorstore.sessionConfi": "org.springframework.ai.vectorstore.sessionConfi",
            "org.springframework.ai.vectorstore.embeddingDimension": "org.springframework.ai.vectorstore.embeddingDimension",
            "org.springframework.ai.vectorstore.distanceTy": "org.springframework.ai.vectorstore.distanceTy",
            "org.springframework.ai.vectorstore.embeddingProperty": "org.springframework.ai.vectorstore.embeddingProperty",
            "org.springframework.ai.vectorstore.label": "org.springframework.ai.vectorstore.label",
            "org.springframework.ai.vectorstore.indexNam": "org.springframework.ai.vectorstore.indexNam",
            "org.springframework.ai.vectorstore.indexNameNotSanitized": "org.springframework.ai.vectorstore.indexNameNotSanitized",
            "org.springframework.ai.vectorstore.idProperty": "org.springframework.ai.vectorstore.idProperty",
            "org.springframework.ai.vectorstore.constraintNam": "org.springframework.ai.vectorstore.constraintNam",
            "org.springframework.ai.vectorstore.databaseNam": "org.springframework.ai.vectorstore.databaseNam",
            "org.springframework.ai.vectorstore.DEFAULT_EMBEDDING_DIMENSION": "org.springframework.ai.vectorstore.DEFAULT_EMBEDDING_DIMENSION",
            "org.springframework.ai.vectorstore.DEFAULT_LABEL": "org.springframework.ai.vectorstore.DEFAULT_LABEL",
            "org.springframework.ai.vectorstore.DEFAULT_INDEX_NAME": "org.springframework.ai.vectorstore.DEFAULT_INDEX_NAME",
            "org.springframework.ai.vectorstore.DEFAULT_EMBEDDING_PROPERTY": "org.springframework.ai.vectorstore.DEFAULT_EMBEDDING_PROPERTY",
            "org.springframework.ai.vectorstore.DEFAULT_ID_PROPERTY": "org.springframework.ai.vectorstore.DEFAULT_ID_PROPERTY",
            "org.springframework.ai.vectorstore.DEFAULT_CONSTRAINT_NAME": "org.springframework.ai.vectorstore.DEFAULT_CONSTRAINT_NAME",
            "org.springframework.ai.vectorstore.filterExpressionConverter": "org.springframework.ai.vectorstore.filterExpressionConverter",
            "org.springframework.ai.vectorstore.driver": "org.springframework.ai.vectorstore.driver",
            "org.springframework.ai.vectorstore.embeddingClient": "org.springframework.ai.vectorstore.embeddingClient",
            "org.springframework.ai.vectorstore.confi": "org.springframework.ai.vectorstore.confi"
        },
        "package": "package org.springframework.ai.vectorstore;",
        "property_declarations": [
            "private Neo4jDistanceType distanceType = Neo4jDistanceType.COSINE;",
            "public static final String DEFAULT_LABEL = \"Document\";",
            "private String databaseName;",
            "public static final int DEFAULT_EMBEDDING_DIMENSION = 1536;",
            "private final Neo4jVectorStoreConfig config;",
            "public final String name;",
            "private final String idProperty;",
            "private String indexName = DEFAULT_INDEX_NAME;",
            "private String embeddingProperty = DEFAULT_EMBEDDING_PROPERTY;",
            "public static final String DEFAULT_ID_PROPERTY = \"id\";",
            "private final String label;",
            "public static final String DEFAULT_EMBEDDING_PROPERTY = \"embedding\";",
            "public static final String DEFAULT_CONSTRAINT_NAME = DEFAULT_LABEL + \"_unique_idx\";",
            "private final String indexName;",
            "private String label = DEFAULT_LABEL;",
            "private final EmbeddingClient embeddingClient;",
            "private final int embeddingDimension;",
            "private final String indexNameNotSanitized;",
            "private final Neo4jVectorFilterExpressionConverter filterExpressionConverter = new Neo4jVectorFilterExpressionConverter();",
            "private String constraintName = DEFAULT_CONSTRAINT_NAME;",
            "private final SessionConfig sessionConfig;",
            "private final Neo4jDistanceType distanceType;",
            "private int embeddingDimension = DEFAULT_EMBEDDING_DIMENSION;",
            "public static final String DEFAULT_INDEX_NAME = \"spring-ai-document-index\";",
            "private String idProperty = DEFAULT_ID_PROPERTY;",
            "private final String constraintName;",
            "private final String embeddingProperty;",
            "private final Driver driver;"
        ],
        "functions": [
            {
                "name": "builder",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Builder();",
                "is_abstract": "",
                "class_name": "Neo4jVectorStore Neo4jVectorStoreConfig",
                "annotations": []
            },
            {
                "name": "defaultConfig",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return builder().build();",
                "is_abstract": "",
                "class_name": "Neo4jVectorStore Neo4jVectorStoreConfig",
                "annotations": []
            },
            {
                "name": "withDatabaseName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.databaseName = databaseName;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "Neo4jVectorStore Neo4jVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "withEmbeddingDimension",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.isTrue(newEmbeddingDimension >= 1 && newEmbeddingDimension <= 2048,\n\t\t\t\t\t\t\"Dimension has to be withing the boundaries 1 and 2048 (inclusively)\");\n\n\t\t\t\tthis.embeddingDimension = newEmbeddingDimension;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "Neo4jVectorStore Neo4jVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "withDistanceType",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(newDistanceType, \"Distance type may not be null\");\n\n\t\t\t\tthis.distanceType = newDistanceType;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "Neo4jVectorStore Neo4jVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "withLabel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.hasText(newLabel, \"Node label may not be null or blank\");\n\n\t\t\t\tthis.label = newLabel;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "Neo4jVectorStore Neo4jVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "withEmbeddingProperty",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.hasText(newEmbeddingProperty, \"Embedding property may not be null or blank\");\n\n\t\t\t\tthis.embeddingProperty = newEmbeddingProperty;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "Neo4jVectorStore Neo4jVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "withIndexName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.hasText(newIndexName, \"Index name may not be null or blank\");\n\n\t\t\t\tthis.indexName = newIndexName;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "Neo4jVectorStore Neo4jVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "withIdProperty",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.hasText(newIdProperty, \"Id property may not be null or blank\");\n\n\t\t\t\tthis.idProperty = newIdProperty;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "Neo4jVectorStore Neo4jVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "withConstraintName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.hasText(newConstraintName, \"Constraint name may not be null or blank\");\n\n\t\t\t\tthis.constraintName = newConstraintName;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "Neo4jVectorStore Neo4jVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "build",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Neo4jVectorStoreConfig(this);",
                "is_abstract": "",
                "class_name": "Neo4jVectorStore Neo4jVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "add",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var rows = documents.stream().map(this::documentToRecord).toList();\n\n\t\ttry (var session = this.driver.session()) {\n\t\t\tvar statement = \"\"\"\n\t\t\t\t\t\tUNWIND $rows AS row\n\t\t\t\t\t\tMERGE (u:%s {%2$s: row.id})\n\t\t\t\t\t\tON CREATE\n\t\t\t\t\t\t\tSET u += row.properties\n\t\t\t\t\t\tON MATCH\n\t\t\t\t\t\t\tSET u = {}\n\t\t\t\t\t\t\tSET u.%2$s = row.id,\n\t\t\t\t\t\t\t\tu += row.properties\n\t\t\t\t\t\tWITH row, u\n\t\t\t\t\t\tCALL db.create.setNodeVectorProperty(u, $embeddingProperty, row.embedding)\n\t\t\t\t\t\"\"\".formatted(this.config.label, this.config.idProperty);\n\t\t\tsession.run(statement, Map.of(\"rows\", rows, \"embeddingProperty\", this.config.embeddingProperty)).consume();\n\t\t}",
                "is_abstract": "",
                "class_name": "Neo4jVectorStore Neo4jVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "delete",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "try (var session = this.driver.session(this.config.sessionConfig)) {\n\n\t\t\tvar summary = session\n\t\t\t\t.run(\"\"\"\n\t\t\t\t\t\tMATCH (n:%s) WHERE n.%s IN $ids\n\t\t\t\t\t\tCALL { WITH n DETACH DELETE n } IN TRANSACTIONS OF $transactionSize ROWS\n\t\t\t\t\t\t \"\"\".formatted(this.config.label, this.config.idProperty),\n\t\t\t\t\t\tMap.of(\"ids\", idList, \"transactionSize\", 10_000))\n\t\t\t\t.consume();\n\t\t\treturn Optional.of(idList.size() == summary.counters().nodesDeleted());\n\t\t}",
                "is_abstract": "",
                "class_name": "Neo4jVectorStore Neo4jVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "similaritySearch",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.isTrue(request.getTopK() > 0, \"The number of documents to returned must be greater than zero\");\n\t\tAssert.isTrue(request.getSimilarityThreshold() >= 0 && request.getSimilarityThreshold() <= 1,\n\t\t\t\t\"The similarity score is bounded between 0 and 1; least to most similar respectively.\");\n\n\t\tvar embedding = Values.value(toFloatArray(this.embeddingClient.embed(request.getQuery())));\n\t\ttry (var session = this.driver.session(this.config.sessionConfig)) {\n\t\t\tStringBuilder condition = new StringBuilder(\"score >= $threshold\");\n\t\t\tif (request.hasFilterExpression()) {\n\t\t\t\tcondition.append(\" AND \")\n\t\t\t\t\t.append(this.filterExpressionConverter.convertExpression(request.getFilterExpression()));\n\t\t\t}\n\t\t\tString query = \"\"\"\n\t\t\t\t\tCALL db.index.vector.queryNodes($indexName, $numberOfNearestNeighbours, $embeddingValue)\n\t\t\t\t\tYIELD node, score\n\t\t\t\t\tWHERE %s\n\t\t\t\t\tRETURN node, score\"\"\".formatted(condition);\n\n\t\t\treturn session\n\t\t\t\t.run(query, Map.of(\"indexName\", this.config.indexNameNotSanitized, \"numberOfNearestNeighbours\",\n\t\t\t\t\t\trequest.getTopK(), \"embeddingValue\", embedding, \"threshold\", request.getSimilarityThreshold()))\n\t\t\t\t.list(this::recordToDocument);\n\t\t}",
                "is_abstract": "",
                "class_name": "Neo4jVectorStore Neo4jVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "afterPropertiesSet",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "try (var session = this.driver.session(this.config.sessionConfig)) {\n\n\t\t\tsession\n\t\t\t\t.run(\"CREATE CONSTRAINT %s IF NOT EXISTS FOR (n:%s) REQUIRE n.%s IS UNIQUE\"\n\t\t\t\t\t.formatted(this.config.constraintName, this.config.label, this.config.idProperty))\n\t\t\t\t.consume();\n\n\t\t\tvar statement = \"\"\"\n\t\t\t\t\tCREATE VECTOR INDEX %s IF NOT EXISTS FOR (n:%s) ON (n.%s)\n\t\t\t\t\t\t\tOPTIONS {indexConfig: {\n\t\t\t\t\t\t\t `vector.dimensions`: %d,\n\t\t\t\t\t\t\t `vector.similarity_function`: '%s'\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\"\"\".formatted(this.config.indexName, this.config.label, this.config.embeddingProperty,\n\t\t\t\t\tthis.config.embeddingDimension, this.config.distanceType.name);\n\t\t\tsession.run(statement).consume();\n\t\t\tsession.run(\"CALL db.awaitIndexes()\").consume();\n\t\t}",
                "is_abstract": "",
                "class_name": "Neo4jVectorStore Neo4jVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "documentToRecord",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var embedding = this.embeddingClient.embed(document);\n\t\tdocument.setEmbedding(embedding);\n\n\t\tvar row = new HashMap<String, Object>();\n\n\t\trow.put(\"id\", document.getId());\n\n\t\tvar properties = new HashMap<String, Object>();\n\t\tproperties.put(\"text\", document.getContent());\n\n\t\tdocument.getMetadata().forEach((k, v) -> properties.put(\"metadata.\" + k, Values.value(v)));\n\t\trow.put(\"properties\", properties);\n\n\t\trow.put(this.config.embeddingProperty, Values.value(toFloatArray(embedding)));\n\t\treturn row;",
                "is_abstract": "",
                "class_name": "Neo4jVectorStore Neo4jVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "toFloatArray",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "float[] embeddingFloat = new float[embeddingDouble.size()];\n\t\tint i = 0;\n\t\tfor (Double d : embeddingDouble) {\n\t\t\tembeddingFloat[i++] = d.floatValue();\n\t\t}\n\t\treturn embeddingFloat;",
                "is_abstract": "",
                "class_name": "Neo4jVectorStore Neo4jVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "recordToDocument",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var node = neoRecord.get(\"node\").asNode();\n\t\tvar score = neoRecord.get(\"score\").asFloat();\n\t\tvar metaData = new HashMap<String, Object>();\n\t\tmetaData.put(\"distance\", 1 - score);\n\t\tnode.keys().forEach(key -> {\n\t\t\tif (key.startsWith(\"metadata.\")) {\n\t\t\t\tmetaData.put(key.substring(key.indexOf(\".\") + 1), node.get(key).asObject());\n\t\t\t}\n\t\t});\n\n\t\treturn new Document(node.get(this.config.idProperty).asString(), node.get(\"text\").asString(),\n\t\t\t\tMap.copyOf(metaData));",
                "is_abstract": "",
                "class_name": "Neo4jVectorStore Neo4jVectorStoreConfig Builder",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/vector-stores/spring-ai-neo4j-store/src/main/java/org/springframework/ai/vectorstore/filter/Neo4jVectorFilterExpressionConverter.java",
        "class_names": [
            "Neo4jVectorFilterExpressionConverter"
        ],
        "imports": "import org.springframework.ai.vectorstore.filter.converter.AbstractFilterExpressionConverter;\nimport org.springframework.ai.vectorstore.filter.Filter.Key;\nimport org.springframework.ai.vectorstore.filter.Filter.Group;\nimport org.springframework.ai.vectorstore.filter.Filter.Expression;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.filter.Neo4jVectorFilterExpressionConverter": "org.springframework.ai.vectorstore.filter.Neo4jVectorFilterExpressionConverter",
            "org.springframework.ai.vectorstore.filter.doExpression": "org.springframework.ai.vectorstore.filter.doExpression",
            "org.springframework.ai.vectorstore.filter.getOperationSymbol": "org.springframework.ai.vectorstore.filter.getOperationSymbol",
            "org.springframework.ai.vectorstore.filter.doNot": "org.springframework.ai.vectorstore.filter.doNot",
            "org.springframework.ai.vectorstore.filter.doKey": "org.springframework.ai.vectorstore.filter.doKey",
            "org.springframework.ai.vectorstore.filter.doStartGrou": "org.springframework.ai.vectorstore.filter.doStartGrou",
            "org.springframework.ai.vectorstore.filter.doEndGrou": "org.springframework.ai.vectorstore.filter.doEndGrou"
        },
        "package": "package org.springframework.ai.vectorstore.filter;",
        "property_declarations": [],
        "functions": [
            {
                "name": "doExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (expression.type() == Filter.ExpressionType.NIN) {\n\t\t\t// shift the \"<left> not in <right>\" into \"not <left> in <right>\"\n\t\t\tthis.doNot(new Expression(Filter.ExpressionType.NOT,\n\t\t\t\t\tnew Expression(Filter.ExpressionType.IN, expression.left(), expression.right())), context);\n\t\t}\n\t\telse {\n\t\t\tthis.convertOperand(expression.left(), context);\n\t\t\tcontext.append(this.getOperationSymbol(expression));\n\t\t\tthis.convertOperand(expression.right(), context);\n\t\t}",
                "is_abstract": "",
                "class_name": "Neo4jVectorFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "getOperationSymbol",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return switch (exp.type()) {\n\t\t\tcase AND -> \" AND \";\n\t\t\tcase OR -> \" OR \";\n\t\t\tcase EQ -> \" = \";\n\t\t\tcase NE -> \" != \";\n\t\t\tcase LT -> \" < \";\n\t\t\tcase LTE -> \" <= \";\n\t\t\tcase GT -> \" > \";\n\t\t\tcase GTE -> \" >= \";\n\t\t\tcase IN -> \" IN \";\n\t\t\tcase NOT, NIN -> \" NOT \";\n\t\t\t// you never know what the future might bring\n\t\t\tdefault -> throw new RuntimeException(\"Not supported expression type: \" + exp.type());\n\t\t};",
                "is_abstract": "",
                "class_name": "Neo4jVectorFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "doNot",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Filter.ExpressionType expressionType = expression.type();\n\t\t// should not happen, but better safe than sorry\n\t\tif (expressionType != Filter.ExpressionType.NOT) {\n\t\t\tthrow new RuntimeException(\n\t\t\t\t\t\"Unsupported expression type %s. Only NOT is supported here\".formatted(expressionType));\n\t\t}\n\n\t\t// explicitly prefix the embedded expression with NOT\n\t\tcontext.append(\"NOT \").append(this.convertOperand(expression.left()));",
                "is_abstract": "",
                "class_name": "Neo4jVectorFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "doKey",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "context.append(\"node.\").append(\"`metadata.\").append(key.key().replace(\"\\\"\", \"\")).append(\"`\");",
                "is_abstract": "",
                "class_name": "Neo4jVectorFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "doStartGroup",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "context.append(\"(\");",
                "is_abstract": "",
                "class_name": "Neo4jVectorFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "doEndGroup",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "context.append(\")\");",
                "is_abstract": "",
                "class_name": "Neo4jVectorFilterExpressionConverter",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/vector-stores/spring-ai-milvus-store/src/test/java/org/springframework/ai/vectorstore/MilvusEmbeddingDimensionsTests.java",
        "class_names": [
            "MilvusEmbeddingDimensionsTests"
        ],
        "imports": "import org.mockito.Mock;\nimport static org.mockito.Mockito.only;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.junit.jupiter.api.Test;\nimport static org.mockito.Mockito.when;\nimport org.springframework.ai.vectorstore.MilvusVectorStore.MilvusVectorStoreConfig;\nimport static org.mockito.Mockito.never;\nimport static org.mockito.Mockito.verify;\nimport io.milvus.client.MilvusServiceClient;\nimport org.springframework.ai.embedding.EmbeddingClient;\nimport org.mockito.junit.jupiter.MockitoExtension;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.MilvusEmbeddingDimensionsTests": "org.springframework.ai.vectorstore.MilvusEmbeddingDimensionsTests",
            "org.springframework.ai.vectorstore.explicitlySetDimensions": "org.springframework.ai.vectorstore.explicitlySetDimensions",
            "org.springframework.ai.vectorstore.embeddingClientDimensions": "org.springframework.ai.vectorstore.embeddingClientDimensions",
            "org.springframework.ai.vectorstore.fallBackToDefaultDimensions": "org.springframework.ai.vectorstore.fallBackToDefaultDimensions",
            "org.springframework.ai.vectorstore.privat": "org.springframework.ai.vectorstore.privat"
        },
        "package": "package org.springframework.ai.vectorstore;",
        "property_declarations": [
            "@Mock\n\tprivate MilvusServiceClient milvusClient;",
            "@Mock\n\tprivate EmbeddingClient embeddingClient;"
        ],
        "functions": [
            {
                "name": "explicitlySetDimensions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "final int explicitDimensions = 696;\n\n\t\tMilvusVectorStoreConfig config = MilvusVectorStoreConfig.builder()\n\t\t\t.withEmbeddingDimension(explicitDimensions)\n\t\t\t.build();\n\n\t\tvar dim = new MilvusVectorStore(milvusClient, embeddingClient, config).embeddingDimensions();\n\n\t\tassertThat(dim).isEqualTo(explicitDimensions);\n\t\tverify(embeddingClient, never()).dimensions();",
                "is_abstract": "",
                "class_name": "MilvusEmbeddingDimensionsTests",
                "annotations": []
            },
            {
                "name": "embeddingClientDimensions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "when(embeddingClient.dimensions()).thenReturn(969);\n\n\t\tMilvusVectorStoreConfig config = MilvusVectorStoreConfig.builder().build();\n\n\t\tvar dim = new MilvusVectorStore(milvusClient, embeddingClient, config).embeddingDimensions();\n\n\t\tassertThat(dim).isEqualTo(969);\n\n\t\tverify(embeddingClient, only()).dimensions();",
                "is_abstract": "",
                "class_name": "MilvusEmbeddingDimensionsTests",
                "annotations": []
            },
            {
                "name": "fallBackToDefaultDimensions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "when(embeddingClient.dimensions()).thenThrow(new RuntimeException());\n\n\t\tvar dim = new MilvusVectorStore(milvusClient, embeddingClient,\n\t\t\t\tMilvusVectorStoreConfig.builder().build())\n\t\t\t\t\t\t.embeddingDimensions();\n\n\t\tassertThat(dim).isEqualTo(MilvusVectorStore.OPENAI_EMBEDDING_DIMENSION_SIZE);\n\t\tverify(embeddingClient, only()).dimensions();",
                "is_abstract": "",
                "class_name": "MilvusEmbeddingDimensionsTests",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/vector-stores/spring-ai-milvus-store/src/test/java/org/springframework/ai/vectorstore/MilvusVectorStoreIT.java",
        "class_names": [
            "MilvusVectorStoreIT",
            "TestApplication"
        ],
        "imports": "import java.util.List;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport java.io.IOException;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport java.util.Map;\nimport org.testcontainers.milvus.MilvusContainer;\nimport org.springframework.beans.factory.annotation.Value;\nimport io.milvus.client.MilvusServiceClient;\nimport java.nio.charset.StandardCharsets;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.springframework.ai.openai.api.OpenAiApi;\nimport io.milvus.param.MetricType;\nimport org.springframework.context.annotation.Bean;\nimport io.milvus.param.ConnectParam;\nimport org.junit.jupiter.params.provider.ValueSource;\nimport java.util.Collections;\nimport org.springframework.core.io.DefaultResourceLoader;\nimport org.springframework.ai.embedding.EmbeddingClient;\nimport org.springframework.boot.SpringBootConfiguration;\nimport org.testcontainers.junit.jupiter.Testcontainers;\nimport org.springframework.ai.document.Document;\nimport io.milvus.param.IndexType;\nimport org.testcontainers.junit.jupiter.Container;\nimport org.springframework.ai.vectorstore.MilvusVectorStore.MilvusVectorStoreConfig;\nimport java.util.UUID;\nimport org.springframework.ai.openai.OpenAiEmbeddingClient;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.MilvusVectorStoreIT": "org.springframework.ai.vectorstore.MilvusVectorStoreIT",
            "org.springframework.ai.vectorstore.TestApplication": "org.springframework.ai.vectorstore.TestApplication",
            "org.springframework.ai.vectorstore.getText": "org.springframework.ai.vectorstore.getText",
            "org.springframework.ai.vectorstore.resetCollection": "org.springframework.ai.vectorstore.resetCollection",
            "org.springframework.ai.vectorstore.ParameterizedTest": "org.springframework.ai.vectorstore.ParameterizedTest",
            "org.springframework.ai.vectorstore.vectorStor": "org.springframework.ai.vectorstore.vectorStor",
            "org.springframework.ai.vectorstore.milvusClient": "org.springframework.ai.vectorstore.milvusClient",
            "org.springframework.ai.vectorstore.embeddingClient": "org.springframework.ai.vectorstore.embeddingClient",
            "org.springframework.ai.vectorstore.privat": "org.springframework.ai.vectorstore.privat",
            "org.springframework.ai.vectorstore.contextRunner": "org.springframework.ai.vectorstore.contextRunner",
            "org.springframework.ai.vectorstore.documents": "org.springframework.ai.vectorstore.documents",
            "org.springframework.ai.vectorstore.metricTy": "org.springframework.ai.vectorstore.metricTy"
        },
        "package": "package org.springframework.ai.vectorstore;",
        "property_declarations": [
            "private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t.withUserConfiguration(TestApplication.class);",
            "@Value(\"${test.spring.ai.vectorstore.milvus.metricType}\")\n\t\tprivate MetricType metricType;",
            "@Container\n\tprivate static MilvusContainer milvusContainer = new MilvusContainer(\"milvusdb/milvus:v2.3.8\");",
            "List<Document> documents = List.of(\n\t\t\tnew Document(getText(\"classpath:/test/data/spring.ai.txt\"), Map.of(\"meta1\", \"meta1\")),\n\t\t\tnew Document(getText(\"classpath:/test/data/time.shelter.txt\")),\n\t\t\tnew Document(getText(\"classpath:/test/data/great.depression.txt\"), Map.of(\"meta2\", \"meta2\")));"
        ],
        "functions": [
            {
                "name": "getText",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var resource = new DefaultResourceLoader().getResource(uri);\n\t\ttry {\n\t\t\treturn resource.getContentAsString(StandardCharsets.UTF_8);\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}",
                "is_abstract": "",
                "class_name": "MilvusVectorStoreIT",
                "annotations": []
            },
            {
                "name": "resetCollection",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "((MilvusVectorStore) vectorStore).dropCollection();\n\t\t((MilvusVectorStore) vectorStore).createCollection();",
                "is_abstract": "",
                "class_name": "MilvusVectorStoreIT",
                "annotations": []
            },
            {
                "name": "ParameterizedTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "0} : {displayName} \")\n\t@ValueSource(strings = { \"COSINE\", \"L2\", \"IP\" })\n\tpublic void addAndSearch(String metricType) {\n\n\t\tcontextRunner.withPropertyValues(\"test.spring.ai.vectorstore.milvus.metricType=\" + metricType).run(context -> {\n\n\t\t\tVectorStore vectorStore = context.getBean(VectorStore.class);\n\n\t\t\tresetCollection(vectorStore);\n\n\t\t\tvectorStore.add(documents);\n\n\t\t\tList<Document> results = vectorStore.similaritySearch(SearchRequest.query(\"Spring\").withTopK(1));\n\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tDocument resultDoc = results.get(0);\n\t\t\tassertThat(resultDoc.getId()).isEqualTo(documents.get(0).getId());\n\t\t\tassertThat(resultDoc.getContent()).contains(\n\t\t\t\t\t\"Spring AI provides abstractions that serve as the foundation for developing AI applications.\");\n\t\t\tassertThat(resultDoc.getMetadata()).hasSize(2);\n\t\t\tassertThat(resultDoc.getMetadata()).containsKeys(\"meta1\", \"distance\");\n\n\t\t\t// Remove all documents from the store\n\t\t\tvectorStore.delete(documents.stream().map(doc -> doc.getId()).toList());\n\n\t\t\tresults = vectorStore.similaritySearch(SearchRequest.query(\"Spring\").withTopK(1));\n\t\t\tassertThat(results).hasSize(0);\n\t\t});",
                "is_abstract": "",
                "class_name": "MilvusVectorStoreIT",
                "annotations": [
                    "@ParameterizedTest(name = \"{0} : {displayName} \")",
                    "@ValueSource(strings = { \"COSINE\", \"L2\", \"IP\" })"
                ]
            },
            {
                "name": "vectorStore",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "MilvusVectorStoreConfig config = MilvusVectorStoreConfig.builder()\n\t\t\t\t.withCollectionName(\"test_vector_store\")\n\t\t\t\t.withDatabaseName(\"default\")\n\t\t\t\t.withIndexType(IndexType.IVF_FLAT)\n\t\t\t\t.withMetricType(metricType)\n\t\t\t\t.build();\n\t\t\treturn new MilvusVectorStore(milvusClient, embeddingClient, config);",
                "is_abstract": "",
                "class_name": "MilvusVectorStoreIT TestApplication",
                "annotations": []
            },
            {
                "name": "milvusClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new MilvusServiceClient(ConnectParam.newBuilder()\n\t\t\t\t.withAuthorization(\"minioadmin\", \"minioadmin\")\n\t\t\t\t.withUri(milvusContainer.getEndpoint())\n\t\t\t\t.build());",
                "is_abstract": "",
                "class_name": "MilvusVectorStoreIT TestApplication",
                "annotations": []
            },
            {
                "name": "embeddingClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new OpenAiEmbeddingClient(new OpenAiApi(System.getenv(\"OPENAI_API_KEY\")));\n\t\t\t// return new OpenAiEmbeddingClient(new\n\t\t\t// OpenAiApi(System.getenv(\"OPENAI_API_KEY\")), MetadataMode.EMBED,\n\t\t\t// OpenAiEmbeddingOptions.builder().withModel(\"text-embedding-ada-002\").build());",
                "is_abstract": "",
                "class_name": "MilvusVectorStoreIT TestApplication",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/vector-stores/spring-ai-milvus-store/src/main/java/org/springframework/ai/vectorstore/MilvusVectorStore.java",
        "class_names": [
            "MilvusVectorStoreConfig",
            "Builder",
            "MilvusVectorStore"
        ],
        "imports": "import java.util.stream.Collectors;\nimport java.util.List;\nimport io.milvus.response.QueryResultsWrapper.RowRecord;\nimport io.milvus.param.dml.SearchParam;\nimport io.milvus.grpc.DataType;\nimport org.springframework.ai.vectorstore.filter.FilterExpressionConverter;\nimport org.springframework.ai.vectorstore.filter.converter.MilvusFilterExpressionConverter;\nimport io.milvus.grpc.SearchResults;\nimport org.springframework.util.StringUtils;\nimport io.milvus.param.collection.DropCollectionParam;\nimport io.milvus.param.collection.LoadCollectionParam;\nimport org.slf4j.Logger;\nimport io.milvus.response.SearchResultsWrapper;\nimport io.milvus.param.collection.FlushParam;\nimport java.util.Arrays;\nimport io.milvus.client.MilvusServiceClient;\nimport io.milvus.param.R.Status;\nimport io.milvus.param.collection.HasCollectionParam;\nimport io.milvus.param.MetricType;\nimport org.slf4j.LoggerFactory;\nimport io.milvus.grpc.MutationResult;\nimport io.milvus.param.index.CreateIndexParam;\nimport com.alibaba.fastjson.JSONObject;\nimport org.springframework.beans.factory.InitializingBean;\nimport io.milvus.param.collection.FieldType;\nimport io.milvus.param.RpcStatus;\nimport io.milvus.param.collection.CreateCollectionParam;\nimport io.milvus.param.dml.DeleteParam;\nimport io.milvus.grpc.DescribeIndexResponse;\nimport org.springframework.ai.embedding.EmbeddingClient;\nimport java.util.ArrayList;\nimport io.milvus.param.R;\nimport io.milvus.param.dml.InsertParam;\nimport io.milvus.param.index.DescribeIndexParam;\nimport io.milvus.param.index.DropIndexParam;\nimport org.springframework.util.Assert;\nimport io.milvus.common.clientenum.ConsistencyLevelEnum;\nimport org.springframework.ai.document.Document;\nimport io.milvus.param.collection.ReleaseCollectionParam;\nimport io.milvus.param.IndexType;\nimport java.util.Optional;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.MilvusVectorStor": "org.springframework.ai.vectorstore.MilvusVectorStor",
            "org.springframework.ai.vectorstore.MilvusVectorStoreConfi": "org.springframework.ai.vectorstore.MilvusVectorStoreConfi",
            "org.springframework.ai.vectorstore.Builder": "org.springframework.ai.vectorstore.Builder",
            "org.springframework.ai.vectorstore.builder": "org.springframework.ai.vectorstore.builder",
            "org.springframework.ai.vectorstore.defaultConfi": "org.springframework.ai.vectorstore.defaultConfi",
            "org.springframework.ai.vectorstore.withMetricTy": "org.springframework.ai.vectorstore.withMetricTy",
            "org.springframework.ai.vectorstore.withIndexTy": "org.springframework.ai.vectorstore.withIndexTy",
            "org.springframework.ai.vectorstore.withIndexParameters": "org.springframework.ai.vectorstore.withIndexParameters",
            "org.springframework.ai.vectorstore.withDatabaseNam": "org.springframework.ai.vectorstore.withDatabaseNam",
            "org.springframework.ai.vectorstore.withCollectionNam": "org.springframework.ai.vectorstore.withCollectionNam",
            "org.springframework.ai.vectorstore.withEmbeddingDimension": "org.springframework.ai.vectorstore.withEmbeddingDimension",
            "org.springframework.ai.vectorstore.build": "org.springframework.ai.vectorstore.build",
            "org.springframework.ai.vectorstore.add": "org.springframework.ai.vectorstore.add",
            "org.springframework.ai.vectorstore.delet": "org.springframework.ai.vectorstore.delet",
            "org.springframework.ai.vectorstore.similaritySearch": "org.springframework.ai.vectorstore.similaritySearch",
            "org.springframework.ai.vectorstore.getResultSimilarity": "org.springframework.ai.vectorstore.getResultSimilarity",
            "org.springframework.ai.vectorstore.toFloatList": "org.springframework.ai.vectorstore.toFloatList",
            "org.springframework.ai.vectorstore.afterPropertiesSet": "org.springframework.ai.vectorstore.afterPropertiesSet",
            "org.springframework.ai.vectorstore.releaseCollection": "org.springframework.ai.vectorstore.releaseCollection",
            "org.springframework.ai.vectorstore.isDatabaseCollectionExists": "org.springframework.ai.vectorstore.isDatabaseCollectionExists",
            "org.springframework.ai.vectorstore.createCollection": "org.springframework.ai.vectorstore.createCollection",
            "org.springframework.ai.vectorstore.embeddingDimensions": "org.springframework.ai.vectorstore.embeddingDimensions",
            "org.springframework.ai.vectorstore.dropCollection": "org.springframework.ai.vectorstore.dropCollection",
            "org.springframework.ai.vectorstore.logger": "org.springframework.ai.vectorstore.logger",
            "org.springframework.ai.vectorstore.OPENAI_EMBEDDING_DIMENSION_SIZE": "org.springframework.ai.vectorstore.OPENAI_EMBEDDING_DIMENSION_SIZE",
            "org.springframework.ai.vectorstore.INVALID_EMBEDDING_DIMENSION": "org.springframework.ai.vectorstore.INVALID_EMBEDDING_DIMENSION",
            "org.springframework.ai.vectorstore.DEFAULT_DATABASE_NAME": "org.springframework.ai.vectorstore.DEFAULT_DATABASE_NAME",
            "org.springframework.ai.vectorstore.DEFAULT_COLLECTION_NAME": "org.springframework.ai.vectorstore.DEFAULT_COLLECTION_NAME",
            "org.springframework.ai.vectorstore.DOC_ID_FIELD_NAME": "org.springframework.ai.vectorstore.DOC_ID_FIELD_NAME",
            "org.springframework.ai.vectorstore.CONTENT_FIELD_NAME": "org.springframework.ai.vectorstore.CONTENT_FIELD_NAME",
            "org.springframework.ai.vectorstore.METADATA_FIELD_NAME": "org.springframework.ai.vectorstore.METADATA_FIELD_NAME",
            "org.springframework.ai.vectorstore.EMBEDDING_FIELD_NAME": "org.springframework.ai.vectorstore.EMBEDDING_FIELD_NAME",
            "org.springframework.ai.vectorstore.DISTANCE_FIELD_NAME": "org.springframework.ai.vectorstore.DISTANCE_FIELD_NAME",
            "org.springframework.ai.vectorstore.SEARCH_OUTPUT_FIELDS": "org.springframework.ai.vectorstore.SEARCH_OUTPUT_FIELDS",
            "org.springframework.ai.vectorstore.filterExpressionConverter": "org.springframework.ai.vectorstore.filterExpressionConverter",
            "org.springframework.ai.vectorstore.milvusClient": "org.springframework.ai.vectorstore.milvusClient",
            "org.springframework.ai.vectorstore.embeddingClient": "org.springframework.ai.vectorstore.embeddingClient",
            "org.springframework.ai.vectorstore.confi": "org.springframework.ai.vectorstore.confi",
            "org.springframework.ai.vectorstore.databaseNam": "org.springframework.ai.vectorstore.databaseNam",
            "org.springframework.ai.vectorstore.collectionNam": "org.springframework.ai.vectorstore.collectionNam",
            "org.springframework.ai.vectorstore.embeddingDimension": "org.springframework.ai.vectorstore.embeddingDimension",
            "org.springframework.ai.vectorstore.indexTy": "org.springframework.ai.vectorstore.indexTy",
            "org.springframework.ai.vectorstore.metricTy": "org.springframework.ai.vectorstore.metricTy",
            "org.springframework.ai.vectorstore.indexParameters": "org.springframework.ai.vectorstore.indexParameters"
        },
        "package": "package org.springframework.ai.vectorstore;",
        "property_declarations": [
            "private final MetricType metricType;",
            "private final String indexParameters;",
            "private final IndexType indexType;",
            "public static final int INVALID_EMBEDDING_DIMENSION = -1;",
            "private static final Logger logger = LoggerFactory.getLogger(MilvusVectorStore.class);",
            "public static final String DEFAULT_DATABASE_NAME = \"default\";",
            "private String databaseName = DEFAULT_DATABASE_NAME;",
            "private final String collectionName;",
            "private String indexParameters = \"{\\\"nlist\\\":1024}\";",
            "public static final List<String> SEARCH_OUTPUT_FIELDS = Arrays.asList(DOC_ID_FIELD_NAME, CONTENT_FIELD_NAME,\n\t\t\tMETADATA_FIELD_NAME);",
            "public static final String CONTENT_FIELD_NAME = \"content\";",
            "private int embeddingDimension = INVALID_EMBEDDING_DIMENSION;",
            "public static final int OPENAI_EMBEDDING_DIMENSION_SIZE = 1536;",
            "private final MilvusServiceClient milvusClient;",
            "private String collectionName = DEFAULT_COLLECTION_NAME;",
            "private final String databaseName;",
            "private final EmbeddingClient embeddingClient;",
            "public static final String METADATA_FIELD_NAME = \"metadata\";",
            "private final int embeddingDimension;",
            "private final MilvusVectorStoreConfig config;",
            "public final FilterExpressionConverter filterExpressionConverter = new MilvusFilterExpressionConverter();",
            "public static final String DEFAULT_COLLECTION_NAME = \"vector_store\";",
            "private MetricType metricType = MetricType.COSINE;",
            "private IndexType indexType = IndexType.IVF_FLAT;",
            "public static final String EMBEDDING_FIELD_NAME = \"embedding\";",
            "public static final String DISTANCE_FIELD_NAME = \"distance\";",
            "public static final String DOC_ID_FIELD_NAME = \"doc_id\";"
        ],
        "functions": [
            {
                "name": "builder",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Builder();",
                "is_abstract": "",
                "class_name": "MilvusVectorStore MilvusVectorStoreConfig",
                "annotations": []
            },
            {
                "name": "defaultConfig",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return builder().build();",
                "is_abstract": "",
                "class_name": "MilvusVectorStore MilvusVectorStoreConfig",
                "annotations": []
            },
            {
                "name": "withMetricType",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(metricType, \"Collection Name must not be empty\");\n\t\t\t\tAssert.isTrue(\n\t\t\t\t\t\tmetricType == MetricType.IP || metricType == MetricType.L2 || metricType == MetricType.COSINE,\n\t\t\t\t\t\t\"Only the text metric types IP and L2 are supported\");\n\n\t\t\t\tthis.metricType = metricType;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "MilvusVectorStore MilvusVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "withIndexType",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.indexType = indexType;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "MilvusVectorStore MilvusVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "withIndexParameters",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.indexParameters = indexParameters;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "MilvusVectorStore MilvusVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "withDatabaseName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.databaseName = databaseName;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "MilvusVectorStore MilvusVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "withCollectionName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.collectionName = collectionName;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "MilvusVectorStore MilvusVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "withEmbeddingDimension",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.isTrue(newEmbeddingDimension >= 1 && newEmbeddingDimension <= 2048,\n\t\t\t\t\t\t\"Dimension has to be withing the boundaries 1 and 2048 (inclusively)\");\n\n\t\t\t\tthis.embeddingDimension = newEmbeddingDimension;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "MilvusVectorStore MilvusVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "build",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new MilvusVectorStoreConfig(this);",
                "is_abstract": "",
                "class_name": "MilvusVectorStore MilvusVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "add",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(documents, \"Documents must not be null\");\n\n\t\tList<String> docIdArray = new ArrayList<>();\n\t\tList<String> contentArray = new ArrayList<>();\n\t\tList<JSONObject> metadataArray = new ArrayList<>();\n\t\tList<List<Float>> embeddingArray = new ArrayList<>();\n\n\t\tfor (Document document : documents) {\n\t\t\tList<Double> embedding = this.embeddingClient.embed(document);\n\n\t\t\tdocIdArray.add(document.getId());\n\t\t\t// Use a (future) DocumentTextLayoutFormatter instance to extract\n\t\t\t// the content used to compute the embeddings\n\t\t\tcontentArray.add(document.getContent());\n\t\t\tmetadataArray.add(new JSONObject(document.getMetadata()));\n\t\t\tembeddingArray.add(toFloatList(embedding));\n\t\t}\n\n\t\tList<InsertParam.Field> fields = new ArrayList<>();\n\t\tfields.add(new InsertParam.Field(DOC_ID_FIELD_NAME, docIdArray));\n\t\tfields.add(new InsertParam.Field(CONTENT_FIELD_NAME, contentArray));\n\t\tfields.add(new InsertParam.Field(METADATA_FIELD_NAME, metadataArray));\n\t\tfields.add(new InsertParam.Field(EMBEDDING_FIELD_NAME, embeddingArray));\n\n\t\tInsertParam insertParam = InsertParam.newBuilder()\n\t\t\t.withDatabaseName(this.config.databaseName)\n\t\t\t.withCollectionName(this.config.collectionName)\n\t\t\t.withFields(fields)\n\t\t\t.build();\n\n\t\tR<MutationResult> status = this.milvusClient.insert(insertParam);\n\t\tif (status.getException() != null) {\n\t\t\tthrow new RuntimeException(\"Failed to insert:\", status.getException());\n\t\t}\n\t\tthis.milvusClient.flush(FlushParam.newBuilder()\n\t\t\t.withDatabaseName(this.config.databaseName)\n\t\t\t.addCollectionName(this.config.collectionName)\n\t\t\t.build());",
                "is_abstract": "",
                "class_name": "MilvusVectorStore MilvusVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "delete",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(idList, \"Document id list must not be null\");\n\n\t\tString deleteExpression = String.format(\"%s in [%s]\", DOC_ID_FIELD_NAME,\n\t\t\t\tidList.stream().map(id -> \"'\" + id + \"'\").collect(Collectors.joining(\",\")));\n\n\t\tR<MutationResult> status = this.milvusClient.delete(DeleteParam.newBuilder()\n\t\t\t.withCollectionName(this.config.collectionName)\n\t\t\t.withExpr(deleteExpression)\n\t\t\t.build());\n\n\t\tlong deleteCount = status.getData().getDeleteCnt();\n\t\tif (deleteCount != idList.size()) {\n\t\t\tlogger.warn(String.format(\"Deleted only %s entries from requested %s \", deleteCount, idList.size()));\n\t\t}\n\n\t\treturn Optional.of(status.getStatus() == Status.Success.getCode());",
                "is_abstract": "",
                "class_name": "MilvusVectorStore MilvusVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "similaritySearch",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String nativeFilterExpressions = (request.getFilterExpression() != null)\n\t\t\t\t? this.filterExpressionConverter.convertExpression(request.getFilterExpression()) : \"\";\n\n\t\tAssert.notNull(request.getQuery(), \"Query string must not be null\");\n\n\t\tList<Double> embedding = this.embeddingClient.embed(request.getQuery());\n\n\t\tvar searchParamBuilder = SearchParam.newBuilder()\n\t\t\t.withCollectionName(this.config.collectionName)\n\t\t\t.withConsistencyLevel(ConsistencyLevelEnum.STRONG)\n\t\t\t.withMetricType(this.config.metricType)\n\t\t\t.withOutFields(SEARCH_OUTPUT_FIELDS)\n\t\t\t.withTopK(request.getTopK())\n\t\t\t.withVectors(List.of(toFloatList(embedding)))\n\t\t\t.withVectorFieldName(EMBEDDING_FIELD_NAME);\n\n\t\tif (StringUtils.hasText(nativeFilterExpressions)) {\n\t\t\tsearchParamBuilder.withExpr(nativeFilterExpressions);\n\t\t}\n\n\t\tR<SearchResults> respSearch = milvusClient.search(searchParamBuilder.build());\n\n\t\tif (respSearch.getException() != null) {\n\t\t\tthrow new RuntimeException(\"Search failed!\", respSearch.getException());\n\t\t}\n\n\t\tSearchResultsWrapper wrapperSearch = new SearchResultsWrapper(respSearch.getData().getResults());\n\n\t\treturn wrapperSearch.getRowRecords(0)\n\t\t\t.stream()\n\t\t\t.filter(rowRecord -> getResultSimilarity(rowRecord) >= request.getSimilarityThreshold())\n\t\t\t.map(rowRecord -> {\n\t\t\t\tString docId = (String) rowRecord.get(DOC_ID_FIELD_NAME);\n\t\t\t\tString content = (String) rowRecord.get(CONTENT_FIELD_NAME);\n\t\t\t\tJSONObject metadata = (JSONObject) rowRecord.get(METADATA_FIELD_NAME);\n\t\t\t\t// inject the distance into the metadata.\n\t\t\t\tmetadata.put(DISTANCE_FIELD_NAME, 1 - getResultSimilarity(rowRecord));\n\t\t\t\treturn new Document(docId, content, metadata.getInnerMap());\n\t\t\t})\n\t\t\t.toList();",
                "is_abstract": "",
                "class_name": "MilvusVectorStore MilvusVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "getResultSimilarity",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Float distance = (Float) rowRecord.get(DISTANCE_FIELD_NAME);\n\t\treturn (this.config.metricType == MetricType.IP || this.config.metricType == MetricType.COSINE) ? distance\n\t\t\t\t: (1 - distance);",
                "is_abstract": "",
                "class_name": "MilvusVectorStore MilvusVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "toFloatList",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return embeddingDouble.stream().map(Number::floatValue).toList();",
                "is_abstract": "",
                "class_name": "MilvusVectorStore MilvusVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "afterPropertiesSet",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.createCollection();",
                "is_abstract": "",
                "class_name": "MilvusVectorStore MilvusVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "releaseCollection",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (isDatabaseCollectionExists()) {\n\t\t\tthis.milvusClient.releaseCollection(\n\t\t\t\t\tReleaseCollectionParam.newBuilder().withCollectionName(this.config.collectionName).build());\n\t\t}",
                "is_abstract": "",
                "class_name": "MilvusVectorStore MilvusVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "isDatabaseCollectionExists",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.milvusClient\n\t\t\t.hasCollection(HasCollectionParam.newBuilder()\n\t\t\t\t.withDatabaseName(this.config.databaseName)\n\t\t\t\t.withCollectionName(this.config.collectionName)\n\t\t\t\t.build())\n\t\t\t.getData();",
                "is_abstract": "",
                "class_name": "MilvusVectorStore MilvusVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "createCollection",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (!isDatabaseCollectionExists()) {\n\n\t\t\tFieldType docIdFieldType = FieldType.newBuilder()\n\t\t\t\t.withName(DOC_ID_FIELD_NAME)\n\t\t\t\t.withDataType(DataType.VarChar)\n\t\t\t\t.withMaxLength(36)\n\t\t\t\t.withPrimaryKey(true)\n\t\t\t\t.withAutoID(false)\n\t\t\t\t.build();\n\t\t\tFieldType contentFieldType = FieldType.newBuilder()\n\t\t\t\t.withName(CONTENT_FIELD_NAME)\n\t\t\t\t.withDataType(DataType.VarChar)\n\t\t\t\t.withMaxLength(65535)\n\t\t\t\t.build();\n\t\t\tFieldType metadataFieldType = FieldType.newBuilder()\n\t\t\t\t.withName(METADATA_FIELD_NAME)\n\t\t\t\t.withDataType(DataType.JSON)\n\t\t\t\t.build();\n\t\t\tFieldType embeddingFieldType = FieldType.newBuilder()\n\t\t\t\t.withName(EMBEDDING_FIELD_NAME)\n\t\t\t\t.withDataType(DataType.FloatVector)\n\t\t\t\t.withDimension(this.embeddingDimensions())\n\t\t\t\t.build();\n\n\t\t\tCreateCollectionParam createCollectionReq = CreateCollectionParam.newBuilder()\n\t\t\t\t.withDatabaseName(this.config.databaseName)\n\t\t\t\t.withCollectionName(this.config.collectionName)\n\t\t\t\t.withDescription(\"Spring AI Vector Store\")\n\t\t\t\t.withConsistencyLevel(ConsistencyLevelEnum.STRONG)\n\t\t\t\t.withShardsNum(2)\n\t\t\t\t.addFieldType(docIdFieldType)\n\t\t\t\t.addFieldType(contentFieldType)\n\t\t\t\t.addFieldType(metadataFieldType)\n\t\t\t\t.addFieldType(embeddingFieldType)\n\t\t\t\t.build();\n\n\t\t\tR<RpcStatus> collectionStatus = this.milvusClient.createCollection(createCollectionReq);\n\t\t\tif (collectionStatus.getException() != null) {\n\t\t\t\tthrow new RuntimeException(\"Failed to create collection\", collectionStatus.getException());\n\t\t\t}\n\t\t}\n\n\t\tR<DescribeIndexResponse> indexDescriptionResponse = this.milvusClient\n\t\t\t.describeIndex(DescribeIndexParam.newBuilder()\n\t\t\t\t.withDatabaseName(this.config.databaseName)\n\t\t\t\t.withCollectionName(this.config.collectionName)\n\t\t\t\t.build());\n\n\t\tif (indexDescriptionResponse.getData() == null) {\n\t\t\tR<RpcStatus> indexStatus = this.milvusClient.createIndex(CreateIndexParam.newBuilder()\n\t\t\t\t.withDatabaseName(this.config.databaseName)\n\t\t\t\t.withCollectionName(this.config.collectionName)\n\t\t\t\t.withFieldName(EMBEDDING_FIELD_NAME)\n\t\t\t\t.withIndexType(this.config.indexType)\n\t\t\t\t.withMetricType(this.config.metricType)\n\t\t\t\t.withExtraParam(this.config.indexParameters)\n\t\t\t\t.withSyncMode(Boolean.FALSE)\n\t\t\t\t.build());\n\n\t\t\tif (indexStatus.getException() != null) {\n\t\t\t\tthrow new RuntimeException(\"Failed to create Index\", indexStatus.getException());\n\t\t\t}\n\t\t}\n\n\t\tR<RpcStatus> loadCollectionStatus = this.milvusClient.loadCollection(LoadCollectionParam.newBuilder()\n\t\t\t.withDatabaseName(this.config.databaseName)\n\t\t\t.withCollectionName(this.config.collectionName)\n\t\t\t.build());\n\n\t\tif (loadCollectionStatus.getException() != null) {\n\t\t\tthrow new RuntimeException(\"Collection loading failed!\", loadCollectionStatus.getException());\n\t\t}",
                "is_abstract": "",
                "class_name": "MilvusVectorStore MilvusVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "embeddingDimensions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (this.config.embeddingDimension != INVALID_EMBEDDING_DIMENSION) {\n\t\t\treturn this.config.embeddingDimension;\n\t\t}\n\t\ttry {\n\t\t\tint embeddingDimensions = this.embeddingClient.dimensions();\n\t\t\tif (embeddingDimensions > 0) {\n\t\t\t\treturn embeddingDimensions;\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tlogger.warn(\"Failed to obtain the embedding dimensions from the embedding client and fall backs to default:\"\n\t\t\t\t\t+ this.config.embeddingDimension, e);\n\t\t}\n\t\treturn OPENAI_EMBEDDING_DIMENSION_SIZE;",
                "is_abstract": "",
                "class_name": "MilvusVectorStore MilvusVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "dropCollection",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "R<RpcStatus> status = this.milvusClient.releaseCollection(\n\t\t\t\tReleaseCollectionParam.newBuilder().withCollectionName(this.config.collectionName).build());\n\n\t\tif (status.getException() != null) {\n\t\t\tthrow new RuntimeException(\"Release collection failed!\", status.getException());\n\t\t}\n\n\t\tstatus = this.milvusClient\n\t\t\t.dropIndex(DropIndexParam.newBuilder().withCollectionName(this.config.collectionName).build());\n\n\t\tif (status.getException() != null) {\n\t\t\tthrow new RuntimeException(\"Drop Index failed!\", status.getException());\n\t\t}\n\n\t\tstatus = this.milvusClient.dropCollection(DropCollectionParam.newBuilder()\n\t\t\t.withDatabaseName(this.config.databaseName)\n\t\t\t.withCollectionName(this.config.collectionName)\n\t\t\t.build());\n\n\t\tif (status.getException() != null) {\n\t\t\tthrow new RuntimeException(\"Drop Collection failed!\", status.getException());\n\t\t}",
                "is_abstract": "",
                "class_name": "MilvusVectorStore MilvusVectorStoreConfig Builder",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/vector-stores/spring-ai-qdrant/src/test/java/org/springframework/ai/vectorstore/qdrant/QdrantVectorStoreIT.java",
        "class_names": [
            "QdrantVectorStoreIT",
            "TestApplication"
        ],
        "imports": "import org.testcontainers.qdrant.QdrantContainer;\nimport java.util.List;\nimport org.springframework.ai.vectorstore.SearchRequest;\nimport io.qdrant.client.QdrantGrpcClient;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.junit.jupiter.api.BeforeAll;\nimport java.util.Map;\nimport io.qdrant.client.grpc.Collections.VectorParams;\nimport org.springframework.ai.openai.api.OpenAiApi;\nimport org.springframework.context.annotation.Bean;\nimport java.util.Collections;\nimport org.springframework.ai.embedding.EmbeddingClient;\nimport io.qdrant.client.QdrantClient;\nimport org.springframework.boot.SpringBootConfiguration;\nimport org.testcontainers.junit.jupiter.Testcontainers;\nimport java.util.concurrent.ExecutionException;\nimport org.springframework.ai.document.Document;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.vectorstore.VectorStore;\nimport org.testcontainers.junit.jupiter.Container;\nimport io.qdrant.client.grpc.Collections.Distance;\nimport java.util.UUID;\nimport org.springframework.ai.openai.OpenAiEmbeddingClient;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.qdrant.QdrantVectorStoreIT": "org.springframework.ai.vectorstore.qdrant.QdrantVectorStoreIT",
            "org.springframework.ai.vectorstore.qdrant.TestApplication": "org.springframework.ai.vectorstore.qdrant.TestApplication",
            "org.springframework.ai.vectorstore.qdrant.setu": "org.springframework.ai.vectorstore.qdrant.setu",
            "org.springframework.ai.vectorstore.qdrant.addAndSearch": "org.springframework.ai.vectorstore.qdrant.addAndSearch",
            "org.springframework.ai.vectorstore.qdrant.addAndSearchWithFilters": "org.springframework.ai.vectorstore.qdrant.addAndSearchWithFilters",
            "org.springframework.ai.vectorstore.qdrant.documentUpdateTest": "org.springframework.ai.vectorstore.qdrant.documentUpdateTest",
            "org.springframework.ai.vectorstore.qdrant.searchThresholdTest": "org.springframework.ai.vectorstore.qdrant.searchThresholdTest",
            "org.springframework.ai.vectorstore.qdrant.qdrantClient": "org.springframework.ai.vectorstore.qdrant.qdrantClient",
            "org.springframework.ai.vectorstore.qdrant.qdrantVectorStor": "org.springframework.ai.vectorstore.qdrant.qdrantVectorStor",
            "org.springframework.ai.vectorstore.qdrant.embeddingClient": "org.springframework.ai.vectorstore.qdrant.embeddingClient",
            "org.springframework.ai.vectorstore.qdrant.COLLECTION_NAME": "org.springframework.ai.vectorstore.qdrant.COLLECTION_NAME",
            "org.springframework.ai.vectorstore.qdrant.EMBEDDING_DIMENSION": "org.springframework.ai.vectorstore.qdrant.EMBEDDING_DIMENSION",
            "org.springframework.ai.vectorstore.qdrant.QDRANT_GRPC_PORT": "org.springframework.ai.vectorstore.qdrant.QDRANT_GRPC_PORT",
            "org.springframework.ai.vectorstore.qdrant.stati": "org.springframework.ai.vectorstore.qdrant.stati",
            "org.springframework.ai.vectorstore.qdrant.documents": "org.springframework.ai.vectorstore.qdrant.documents",
            "org.springframework.ai.vectorstore.qdrant.contextRunner": "org.springframework.ai.vectorstore.qdrant.contextRunner"
        },
        "package": "package org.springframework.ai.vectorstore.qdrant;",
        "property_declarations": [
            "private static final String COLLECTION_NAME = \"test_collection\";",
            "private static final int QDRANT_GRPC_PORT = 6334;",
            "private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t.withUserConfiguration(TestApplication.class)\n\t\t.withPropertyValues(\"spring.ai.openai.apiKey=\" + System.getenv(\"OPENAI_API_KEY\"));",
            "private static final int EMBEDDING_DIMENSION = 1536;",
            "List<Document> documents = List.of(\n\t\t\tnew Document(\"Spring AI rocks!! Spring AI rocks!! Spring AI rocks!! Spring AI rocks!! Spring AI rocks!!\",\n\t\t\t\t\tCollections.singletonMap(\"meta1\", \"meta1\")),\n\t\t\tnew Document(\"Hello World Hello World Hello World Hello World Hello World Hello World Hello World\"),\n\t\t\tnew Document(\n\t\t\t\t\t\"Great Depression Great Depression Great Depression Great Depression Great Depression Great Depression\",\n\t\t\t\t\tCollections.singletonMap(\"meta2\", \"meta2\")));",
            "@Container\n\tstatic QdrantContainer qdrantContainer = new QdrantContainer(\"qdrant/qdrant:v1.7.4\");"
        ],
        "functions": [
            {
                "name": "setup",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String host = qdrantContainer.getHost();\n\t\tint port = qdrantContainer.getMappedPort(QDRANT_GRPC_PORT);\n\t\tQdrantClient client = new QdrantClient(QdrantGrpcClient.newBuilder(host, port, false).build());\n\n\t\tclient\n\t\t\t.createCollectionAsync(COLLECTION_NAME,\n\t\t\t\t\tVectorParams.newBuilder().setDistance(Distance.Cosine).setSize(EMBEDDING_DIMENSION).build())\n\t\t\t.get();\n\n\t\tclient.close();",
                "is_abstract": "",
                "class_name": "QdrantVectorStoreIT",
                "annotations": []
            },
            {
                "name": "addAndSearch",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\n\t\t\tVectorStore vectorStore = context.getBean(VectorStore.class);\n\n\t\t\tvectorStore.add(documents);\n\n\t\t\tList<Document> results = vectorStore.similaritySearch(SearchRequest.query(\"Great\").withTopK(1));\n\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tDocument resultDoc = results.get(0);\n\t\t\tassertThat(resultDoc.getId()).isEqualTo(documents.get(2).getId());\n\t\t\tassertThat(resultDoc.getContent()).isEqualTo(\n\t\t\t\t\t\"Great Depression Great Depression Great Depression Great Depression Great Depression Great Depression\");\n\t\t\tassertThat(resultDoc.getMetadata()).containsKeys(\"meta2\", \"distance\");\n\n\t\t\t// Remove all documents from the store\n\t\t\tvectorStore.delete(documents.stream().map(doc -> doc.getId()).toList());\n\n\t\t\tList<Document> results2 = vectorStore.similaritySearch(SearchRequest.query(\"Great\").withTopK(1));\n\t\t\tassertThat(results2).hasSize(0);\n\t\t});",
                "is_abstract": "",
                "class_name": "QdrantVectorStoreIT",
                "annotations": []
            },
            {
                "name": "addAndSearchWithFilters",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\n\t\t\tVectorStore vectorStore = context.getBean(VectorStore.class);\n\n\t\t\tvar bgDocument = new Document(\"The World is Big and Salvation Lurks Around the Corner\",\n\t\t\t\t\tMap.of(\"country\", \"Bulgaria\", \"number\", 3));\n\t\t\tvar nlDocument = new Document(\"The World is Big and Salvation Lurks Around the Corner\",\n\t\t\t\t\tMap.of(\"country\", \"Netherlands\", \"number\", 90));\n\n\t\t\tvectorStore.add(List.of(bgDocument, nlDocument));\n\n\t\t\tvar request = SearchRequest.query(\"The World\").withTopK(5);\n\n\t\t\tList<Document> results = vectorStore.similaritySearch(request);\n\t\t\tassertThat(results).hasSize(2);\n\n\t\t\tresults = vectorStore\n\t\t\t\t.similaritySearch(request.withSimilarityThresholdAll().withFilterExpression(\"country == 'Bulgaria'\"));\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tassertThat(results.get(0).getId()).isEqualTo(bgDocument.getId());\n\n\t\t\tresults = vectorStore.similaritySearch(\n\t\t\t\t\trequest.withSimilarityThresholdAll().withFilterExpression(\"country == 'Netherlands'\"));\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tassertThat(results.get(0).getId()).isEqualTo(nlDocument.getId());\n\n\t\t\tresults = vectorStore.similaritySearch(\n\t\t\t\t\trequest.withSimilarityThresholdAll().withFilterExpression(\"NOT(country == 'Netherlands')\"));\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tassertThat(results.get(0).getId()).isEqualTo(bgDocument.getId());\n\n\t\t\tresults = vectorStore\n\t\t\t\t.similaritySearch(request.withSimilarityThresholdAll().withFilterExpression(\"number in [3, 5, 12]\"));\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tassertThat(results.get(0).getId()).isEqualTo(bgDocument.getId());\n\n\t\t\tresults = vectorStore\n\t\t\t\t.similaritySearch(request.withSimilarityThresholdAll().withFilterExpression(\"number nin [3, 5, 12]\"));\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tassertThat(results.get(0).getId()).isEqualTo(nlDocument.getId());\n\n\t\t\t// Remove all documents from the store\n\t\t\tvectorStore.delete(List.of(bgDocument, nlDocument).stream().map(doc -> doc.getId()).toList());\n\t\t});",
                "is_abstract": "",
                "class_name": "QdrantVectorStoreIT",
                "annotations": []
            },
            {
                "name": "documentUpdateTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\n\t\t\tVectorStore vectorStore = context.getBean(VectorStore.class);\n\n\t\t\tDocument document = new Document(UUID.randomUUID().toString(), \"Spring AI rocks!!\",\n\t\t\t\t\tCollections.singletonMap(\"meta1\", \"meta1\"));\n\n\t\t\tvectorStore.add(List.of(document));\n\n\t\t\tList<Document> results = vectorStore.similaritySearch(SearchRequest.query(\"Spring\").withTopK(5));\n\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tDocument resultDoc = results.get(0);\n\t\t\tassertThat(resultDoc.getId()).isEqualTo(document.getId());\n\t\t\tassertThat(resultDoc.getContent()).isEqualTo(\"Spring AI rocks!!\");\n\t\t\tassertThat(resultDoc.getMetadata()).containsKey(\"meta1\");\n\t\t\tassertThat(resultDoc.getMetadata()).containsKey(\"distance\");\n\n\t\t\tDocument sameIdDocument = new Document(document.getId(),\n\t\t\t\t\t\"The World is Big and Salvation Lurks Around the Corner\",\n\t\t\t\t\tCollections.singletonMap(\"meta2\", \"meta2\"));\n\n\t\t\tvectorStore.add(List.of(sameIdDocument));\n\n\t\t\tresults = vectorStore.similaritySearch(SearchRequest.query(\"FooBar\").withTopK(5));\n\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tresultDoc = results.get(0);\n\t\t\tassertThat(resultDoc.getId()).isEqualTo(document.getId());\n\t\t\tassertThat(resultDoc.getContent()).isEqualTo(\"The World is Big and Salvation Lurks Around the Corner\");\n\t\t\tassertThat(resultDoc.getMetadata()).containsKey(\"meta2\");\n\t\t\tassertThat(resultDoc.getMetadata()).containsKey(\"distance\");\n\n\t\t\tvectorStore.delete(List.of(document.getId()));\n\t\t});",
                "is_abstract": "",
                "class_name": "QdrantVectorStoreIT",
                "annotations": []
            },
            {
                "name": "searchThresholdTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\n\t\t\tVectorStore vectorStore = context.getBean(VectorStore.class);\n\n\t\t\tvectorStore.add(documents);\n\n\t\t\tvar request = SearchRequest.query(\"Great\").withTopK(5);\n\t\t\tList<Document> fullResult = vectorStore.similaritySearch(request.withSimilarityThresholdAll());\n\n\t\t\tList<Float> distances = fullResult.stream().map(doc -> (Float) doc.getMetadata().get(\"distance\")).toList();\n\n\t\t\tassertThat(distances).hasSize(3);\n\n\t\t\tfloat threshold = (distances.get(0) + distances.get(1)) / 2;\n\n\t\t\tList<Document> results = vectorStore.similaritySearch(request.withSimilarityThreshold(1 - threshold));\n\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tDocument resultDoc = results.get(0);\n\t\t\tassertThat(resultDoc.getId()).isEqualTo(documents.get(2).getId());\n\t\t\tassertThat(resultDoc.getContent()).isEqualTo(\n\t\t\t\t\t\"Great Depression Great Depression Great Depression Great Depression Great Depression Great Depression\");\n\t\t\tassertThat(resultDoc.getMetadata()).containsKey(\"meta2\");\n\t\t\tassertThat(resultDoc.getMetadata()).containsKey(\"distance\");\n\n\t\t\t// Remove all documents from the store\n\t\t\tvectorStore.delete(documents.stream().map(doc -> doc.getId()).toList());\n\t\t});",
                "is_abstract": "",
                "class_name": "QdrantVectorStoreIT",
                "annotations": []
            },
            {
                "name": "qdrantClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String host = qdrantContainer.getHost();\n\t\t\tint port = qdrantContainer.getMappedPort(QDRANT_GRPC_PORT);\n\t\t\tQdrantClient qdrantClient = new QdrantClient(QdrantGrpcClient.newBuilder(host, port, false).build());\n\t\t\treturn qdrantClient;",
                "is_abstract": "",
                "class_name": "QdrantVectorStoreIT TestApplication",
                "annotations": []
            },
            {
                "name": "qdrantVectorStore",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new QdrantVectorStore(qdrantClient, COLLECTION_NAME, embeddingClient);",
                "is_abstract": "",
                "class_name": "QdrantVectorStoreIT TestApplication",
                "annotations": []
            },
            {
                "name": "embeddingClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new OpenAiEmbeddingClient(new OpenAiApi(System.getenv(\"OPENAI_API_KEY\")));",
                "is_abstract": "",
                "class_name": "QdrantVectorStoreIT TestApplication",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/vector-stores/spring-ai-qdrant/src/main/java/org/springframework/ai/vectorstore/qdrant/QdrantVectorStore.java",
        "class_names": [
            "Builder",
            "QdrantVectorStoreConfig",
            "QdrantVectorStore"
        ],
        "imports": "import io.qdrant.client.grpc.JsonWithInt.Value;\nimport java.util.List;\nimport org.springframework.ai.vectorstore.SearchRequest;\nimport io.qdrant.client.QdrantGrpcClient;\nimport io.qdrant.client.grpc.Points.PointId;\nimport io.qdrant.client.grpc.Points.PointStruct;\nimport io.qdrant.client.grpc.Points.UpdateStatus;\nimport java.util.Map;\nimport io.qdrant.client.grpc.Collections.VectorParams;\nimport io.qdrant.client.grpc.Points.ScoredPoint;\nimport static io.qdrant.client.VectorsFactory.vectors;\nimport org.springframework.beans.factory.InitializingBean;\nimport org.springframework.ai.embedding.EmbeddingClient;\nimport io.qdrant.client.QdrantClient;\nimport io.qdrant.client.grpc.Points.SearchPoints;\nimport io.qdrant.client.grpc.Points.Filter;\nimport org.springframework.util.Assert;\nimport java.util.concurrent.ExecutionException;\nimport static io.qdrant.client.WithPayloadSelectorFactory.enable;\nimport org.springframework.ai.document.Document;\nimport static io.qdrant.client.ValueFactory.value;\nimport org.springframework.ai.vectorstore.VectorStore;\nimport io.qdrant.client.grpc.Collections.Distance;\nimport java.util.UUID;\nimport static io.qdrant.client.PointIdFactory.id;\nimport java.util.Optional;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.qdrant.QdrantVectorStor": "org.springframework.ai.vectorstore.qdrant.QdrantVectorStor",
            "org.springframework.ai.vectorstore.qdrant.QdrantVectorStoreConfi": "org.springframework.ai.vectorstore.qdrant.QdrantVectorStoreConfi",
            "org.springframework.ai.vectorstore.qdrant.Builder": "org.springframework.ai.vectorstore.qdrant.Builder",
            "org.springframework.ai.vectorstore.qdrant.builder": "org.springframework.ai.vectorstore.qdrant.builder",
            "org.springframework.ai.vectorstore.qdrant.defaultConfi": "org.springframework.ai.vectorstore.qdrant.defaultConfi",
            "org.springframework.ai.vectorstore.qdrant.withHost": "org.springframework.ai.vectorstore.qdrant.withHost",
            "org.springframework.ai.vectorstore.qdrant.withCollectionNam": "org.springframework.ai.vectorstore.qdrant.withCollectionNam",
            "org.springframework.ai.vectorstore.qdrant.withPort": "org.springframework.ai.vectorstore.qdrant.withPort",
            "org.springframework.ai.vectorstore.qdrant.withTls": "org.springframework.ai.vectorstore.qdrant.withTls",
            "org.springframework.ai.vectorstore.qdrant.withApiKey": "org.springframework.ai.vectorstore.qdrant.withApiKey",
            "org.springframework.ai.vectorstore.qdrant.build": "org.springframework.ai.vectorstore.qdrant.build",
            "org.springframework.ai.vectorstore.qdrant.add": "org.springframework.ai.vectorstore.qdrant.add",
            "org.springframework.ai.vectorstore.qdrant.delet": "org.springframework.ai.vectorstore.qdrant.delet",
            "org.springframework.ai.vectorstore.qdrant.similaritySearch": "org.springframework.ai.vectorstore.qdrant.similaritySearch",
            "org.springframework.ai.vectorstore.qdrant.toDocument": "org.springframework.ai.vectorstore.qdrant.toDocument",
            "org.springframework.ai.vectorstore.qdrant.toPayload": "org.springframework.ai.vectorstore.qdrant.toPayload",
            "org.springframework.ai.vectorstore.qdrant.toFloatList": "org.springframework.ai.vectorstore.qdrant.toFloatList",
            "org.springframework.ai.vectorstore.qdrant.afterPropertiesSet": "org.springframework.ai.vectorstore.qdrant.afterPropertiesSet",
            "org.springframework.ai.vectorstore.qdrant.isCollectionExists": "org.springframework.ai.vectorstore.qdrant.isCollectionExists",
            "org.springframework.ai.vectorstore.qdrant.CONTENT_FIELD_NAME": "org.springframework.ai.vectorstore.qdrant.CONTENT_FIELD_NAME",
            "org.springframework.ai.vectorstore.qdrant.DISTANCE_FIELD_NAME": "org.springframework.ai.vectorstore.qdrant.DISTANCE_FIELD_NAME",
            "org.springframework.ai.vectorstore.qdrant.embeddingClient": "org.springframework.ai.vectorstore.qdrant.embeddingClient",
            "org.springframework.ai.vectorstore.qdrant.qdrantClient": "org.springframework.ai.vectorstore.qdrant.qdrantClient",
            "org.springframework.ai.vectorstore.qdrant.collectionNam": "org.springframework.ai.vectorstore.qdrant.collectionNam",
            "org.springframework.ai.vectorstore.qdrant.filterExpressionConverter": "org.springframework.ai.vectorstore.qdrant.filterExpressionConverter",
            "org.springframework.ai.vectorstore.qdrant.host": "org.springframework.ai.vectorstore.qdrant.host",
            "org.springframework.ai.vectorstore.qdrant.port": "org.springframework.ai.vectorstore.qdrant.port",
            "org.springframework.ai.vectorstore.qdrant.useTls": "org.springframework.ai.vectorstore.qdrant.useTls",
            "org.springframework.ai.vectorstore.qdrant.apiKey": "org.springframework.ai.vectorstore.qdrant.apiKey"
        },
        "package": "package org.springframework.ai.vectorstore.qdrant;",
        "property_declarations": [
            "private final EmbeddingClient embeddingClient;",
            "private String apiKey = null;",
            "private final QdrantFilterExpressionConverter filterExpressionConverter = new QdrantFilterExpressionConverter();",
            "private final QdrantClient qdrantClient;",
            "private boolean useTls = false;",
            "private String host = \"localhost\";",
            "private static final String DISTANCE_FIELD_NAME = \"distance\";",
            "private static final String CONTENT_FIELD_NAME = \"doc_content\";",
            "private String collectionName;",
            "private final String collectionName;",
            "private int port = 6334;",
            "private QdrantClient qdrantClient;"
        ],
        "functions": [
            {
                "name": "builder",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Builder();",
                "is_abstract": "",
                "class_name": "QdrantVectorStore QdrantVectorStoreConfig",
                "annotations": []
            },
            {
                "name": "defaultConfig",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return builder().build();",
                "is_abstract": "",
                "class_name": "QdrantVectorStore QdrantVectorStoreConfig",
                "annotations": []
            },
            {
                "name": "withHost",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(host, \"host cannot be null\");\n\t\t\t\tthis.host = host;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "QdrantVectorStore QdrantVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "withCollectionName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.collectionName = collectionName;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "QdrantVectorStore QdrantVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "withPort",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.port = port;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "QdrantVectorStore QdrantVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "withTls",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.useTls = useTls;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "QdrantVectorStore QdrantVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "withApiKey",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.apiKey = apiKey;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "QdrantVectorStore QdrantVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "build",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(collectionName, \"collectionName cannot be null\");\n\t\t\t\treturn new QdrantVectorStoreConfig(this);",
                "is_abstract": "",
                "class_name": "QdrantVectorStore QdrantVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "add",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "try {\n\t\t\tList<PointStruct> points = documents.stream().map(document -> {\n\t\t\t\t// Compute and assign an embedding to the document.\n\t\t\t\tdocument.setEmbedding(this.embeddingClient.embed(document));\n\n\t\t\t\treturn PointStruct.newBuilder()\n\t\t\t\t\t.setId(id(UUID.fromString(document.getId())))\n\t\t\t\t\t.setVectors(vectors(toFloatList(document.getEmbedding())))\n\t\t\t\t\t.putAllPayload(toPayload(document))\n\t\t\t\t\t.build();\n\t\t\t}).toList();\n\n\t\t\tthis.qdrantClient.upsertAsync(this.collectionName, points).get();\n\t\t}\n\t\tcatch (InterruptedException | ExecutionException | IllegalArgumentException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}",
                "is_abstract": "",
                "class_name": "QdrantVectorStore QdrantVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "delete",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "try {\n\t\t\tList<PointId> ids = documentIds.stream().map(id -> id(UUID.fromString(id))).toList();\n\t\t\tvar result = this.qdrantClient.deleteAsync(this.collectionName, ids)\n\t\t\t\t.get()\n\t\t\t\t.getStatus() == UpdateStatus.Completed;\n\t\t\treturn Optional.of(result);\n\t\t}\n\t\tcatch (InterruptedException | ExecutionException | IllegalArgumentException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}",
                "is_abstract": "",
                "class_name": "QdrantVectorStore QdrantVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "similaritySearch",
                "parameters": [
                    ""
                ],
                "return_type": "Filter",
                "body": "try {\n\t\t\tFilter filter = (request.getFilterExpression() != null)\n\t\t\t\t\t? this.filterExpressionConverter.convertExpression(request.getFilterExpression())\n\t\t\t\t\t: Filter.getDefaultInstance();\n\n\t\t\tList<Double> queryEmbedding = this.embeddingClient.embed(request.getQuery());\n\n\t\t\tvar searchPoints = SearchPoints.newBuilder()\n\t\t\t\t.setCollectionName(this.collectionName)\n\t\t\t\t.setLimit(request.getTopK())\n\t\t\t\t.setWithPayload(enable(true))\n\t\t\t\t.addAllVector(toFloatList(queryEmbedding))\n\t\t\t\t.setFilter(filter)\n\t\t\t\t.setScoreThreshold((float) request.getSimilarityThreshold())\n\t\t\t\t.build();\n\n\t\t\tvar queryResponse = this.qdrantClient.searchAsync(searchPoints).get();\n\n\t\t\treturn queryResponse.stream().map(scoredPoint -> {\n\t\t\t\treturn toDocument(scoredPoint);\n\t\t\t}).toList();\n\n\t\t}\n\t\tcatch (InterruptedException | ExecutionException | IllegalArgumentException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}",
                "is_abstract": "",
                "class_name": "QdrantVectorStore QdrantVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "toDocument",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "try {\n\t\t\tvar id = point.getId().getUuid();\n\n\t\t\tvar payload = QdrantObjectFactory.toObjectMap(point.getPayloadMap());\n\t\t\tpayload.put(DISTANCE_FIELD_NAME, 1 - point.getScore());\n\n\t\t\tvar content = (String) payload.remove(CONTENT_FIELD_NAME);\n\n\t\t\treturn new Document(id, content, payload);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}",
                "is_abstract": "",
                "class_name": "QdrantVectorStore QdrantVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "toPayload",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "try {\n\t\t\tvar payload = QdrantValueFactory.toValueMap(document.getMetadata());\n\t\t\tpayload.put(CONTENT_FIELD_NAME, value(document.getContent()));\n\t\t\treturn payload;\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}",
                "is_abstract": "",
                "class_name": "QdrantVectorStore QdrantVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "toFloatList",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return doubleList.stream().map(d -> d.floatValue()).toList();",
                "is_abstract": "",
                "class_name": "QdrantVectorStore QdrantVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "afterPropertiesSet",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// Create the collection if it does not exist.\n\t\tif (!isCollectionExists()) {\n\t\t\tvar vectorParams = VectorParams.newBuilder()\n\t\t\t\t.setDistance(Distance.Cosine)\n\t\t\t\t.setSize(this.embeddingClient.dimensions())\n\t\t\t\t.build();\n\t\t\tthis.qdrantClient.createCollectionAsync(this.collectionName, vectorParams).get();\n\t\t}",
                "is_abstract": "",
                "class_name": "QdrantVectorStore QdrantVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "isCollectionExists",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "try {\n\t\t\treturn this.qdrantClient.listCollectionsAsync().get().stream().anyMatch(c -> c.equals(this.collectionName));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}",
                "is_abstract": "",
                "class_name": "QdrantVectorStore QdrantVectorStoreConfig Builder",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/vector-stores/spring-ai-qdrant/src/main/java/org/springframework/ai/vectorstore/qdrant/QdrantObjectFactory.java",
        "class_names": [
            "QdrantObjectFactory"
        ],
        "imports": "import java.util.stream.Collectors;\nimport io.qdrant.client.grpc.JsonWithInt.Value;\nimport org.springframework.util.Assert;\nimport org.apache.commons.logging.Log;\nimport java.util.Map;\nimport io.qdrant.client.grpc.JsonWithInt.ListValue;\nimport org.apache.commons.logging.LogFactory;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.qdrant.QdrantObjectFactory": "org.springframework.ai.vectorstore.qdrant.QdrantObjectFactory",
            "org.springframework.ai.vectorstore.qdrant.toObjectM": "org.springframework.ai.vectorstore.qdrant.toObjectM",
            "org.springframework.ai.vectorstore.qdrant.object": "org.springframework.ai.vectorstore.qdrant.object",
            "org.springframework.ai.vectorstore.qdrant.logger": "org.springframework.ai.vectorstore.qdrant.logger"
        },
        "package": "package org.springframework.ai.vectorstore.qdrant;",
        "property_declarations": [
            "private static final Log logger = LogFactory.getLog(QdrantObjectFactory.class);"
        ],
        "functions": [
            {
                "name": "toObjectMap",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(payload, \"Payload map must not be null\");\n\t\treturn payload.entrySet().stream().collect(Collectors.toMap(e -> e.getKey(), e -> object(e.getValue())));",
                "is_abstract": "",
                "class_name": "QdrantObjectFactory",
                "annotations": []
            },
            {
                "name": "object",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return listValue.getValuesList().stream().map(QdrantObjectFactory::object).collect(Collectors.toList());",
                "is_abstract": "",
                "class_name": "QdrantObjectFactory",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/vector-stores/spring-ai-qdrant/src/main/java/org/springframework/ai/vectorstore/qdrant/QdrantFilterExpressionConverter.java",
        "class_names": [
            "QdrantFilterExpressionConverter"
        ],
        "imports": "import static io.qdrant.client.ConditionFactory.matchKeyword;\nimport java.util.List;\nimport static io.qdrant.client.ConditionFactory.range;\nimport static io.qdrant.client.ConditionFactory.matchExceptValues;\nimport org.springframework.ai.vectorstore.filter.Filter.Operand;\nimport static io.qdrant.client.ConditionFactory.matchExceptKeywords;\nimport org.springframework.ai.vectorstore.filter.Filter.ExpressionType;\nimport static io.qdrant.client.ConditionFactory.matchValues;\nimport static io.qdrant.client.ConditionFactory.filter;\nimport static io.qdrant.client.ConditionFactory.match;\nimport java.util.ArrayList;\nimport io.qdrant.client.grpc.Points.Filter;\nimport io.qdrant.client.grpc.Points.Range;\nimport org.springframework.ai.vectorstore.filter.Filter.Key;\nimport org.springframework.ai.vectorstore.filter.Filter.Expression;\nimport org.springframework.ai.vectorstore.filter.Filter.Group;\nimport org.springframework.ai.vectorstore.filter.Filter.Value;\nimport io.qdrant.client.grpc.Points.Condition;\nimport static io.qdrant.client.ConditionFactory.matchKeywords;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.qdrant.QdrantFilterExpressionConverter": "org.springframework.ai.vectorstore.qdrant.QdrantFilterExpressionConverter",
            "org.springframework.ai.vectorstore.qdrant.convertExpression": "org.springframework.ai.vectorstore.qdrant.convertExpression",
            "org.springframework.ai.vectorstore.qdrant.convertOperand": "org.springframework.ai.vectorstore.qdrant.convertOperand",
            "org.springframework.ai.vectorstore.qdrant.parseComparison": "org.springframework.ai.vectorstore.qdrant.parseComparison",
            "org.springframework.ai.vectorstore.qdrant.buildEqCondition": "org.springframework.ai.vectorstore.qdrant.buildEqCondition",
            "org.springframework.ai.vectorstore.qdrant.buildNeCondition": "org.springframework.ai.vectorstore.qdrant.buildNeCondition",
            "org.springframework.ai.vectorstore.qdrant.buildGtCondition": "org.springframework.ai.vectorstore.qdrant.buildGtCondition",
            "org.springframework.ai.vectorstore.qdrant.buildLtCondition": "org.springframework.ai.vectorstore.qdrant.buildLtCondition",
            "org.springframework.ai.vectorstore.qdrant.buildGteCondition": "org.springframework.ai.vectorstore.qdrant.buildGteCondition",
            "org.springframework.ai.vectorstore.qdrant.buildLteCondition": "org.springframework.ai.vectorstore.qdrant.buildLteCondition",
            "org.springframework.ai.vectorstore.qdrant.buildInCondition": "org.springframework.ai.vectorstore.qdrant.buildInCondition",
            "org.springframework.ai.vectorstore.qdrant.buildNInCondition": "org.springframework.ai.vectorstore.qdrant.buildNInCondition",
            "org.springframework.ai.vectorstore.qdrant.doKey": "org.springframework.ai.vectorstore.qdrant.doKey",
            "org.springframework.ai.vectorstore.qdrant.hasOuterQuotes": "org.springframework.ai.vectorstore.qdrant.hasOuterQuotes",
            "org.springframework.ai.vectorstore.qdrant.removeOuterQuotes": "org.springframework.ai.vectorstore.qdrant.removeOuterQuotes"
        },
        "package": "package org.springframework.ai.vectorstore.qdrant;",
        "property_declarations": [],
        "functions": [
            {
                "name": "convertExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.convertOperand(expression);",
                "is_abstract": "",
                "class_name": "QdrantFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "convertOperand",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var context = Filter.newBuilder();\n\t\tList<Condition> mustClauses = new ArrayList<Condition>();\n\t\tList<Condition> shouldClauses = new ArrayList<Condition>();\n\t\tList<Condition> mustNotClauses = new ArrayList<Condition>();\n\n\t\tif (operand instanceof Expression expression) {\n\t\t\tif (expression.type() == ExpressionType.NOT && expression.left() instanceof Group group) {\n\t\t\t\tmustNotClauses.add(filter(convertOperand(group.content())));\n\t\t\t}\n\t\t\telse if (expression.type() == ExpressionType.AND) {\n\t\t\t\tmustClauses.add(filter(convertOperand(expression.left())));\n\t\t\t\tmustClauses.add(filter(convertOperand(expression.right())));\n\t\t\t}\n\t\t\telse if (expression.type() == ExpressionType.OR) {\n\t\t\t\tshouldClauses.add(filter(convertOperand(expression.left())));\n\t\t\t\tshouldClauses.add(filter(convertOperand(expression.right())));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (!(expression.right() instanceof Value)) {\n\t\t\t\t\tthrow new RuntimeException(\"Non AND/OR/NOT expression must have Value right argument!\");\n\t\t\t\t}\n\t\t\t\tmustClauses.add(parseComparison((Key) expression.left(), (Value) expression.right(), expression));\n\t\t\t}\n\n\t\t}\n\n\t\treturn context.addAllMust(mustClauses).addAllShould(shouldClauses).addAllMustNot(mustNotClauses).build();",
                "is_abstract": "",
                "class_name": "QdrantFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "parseComparison",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "ExpressionType type = exp.type();\n\t\tswitch (type) {\n\t\t\tcase EQ: {\n\t\t\t\treturn buildEqCondition(key, value);\n\t\t\t}\n\t\t\tcase NE: {\n\t\t\t\treturn buildNeCondition(key, value);\n\t\t\t}\n\t\t\tcase GT: {\n\t\t\t\treturn buildGtCondition(key, value);\n\t\t\t}\n\t\t\tcase GTE: {\n\t\t\t\treturn buildGteCondition(key, value);\n\t\t\t}\n\t\t\tcase LT: {\n\t\t\t\treturn buildLtCondition(key, value);\n\t\t\t}\n\t\t\tcase LTE: {\n\t\t\t\treturn buildLteCondition(key, value);\n\t\t\t}\n\t\t\tcase IN: {\n\t\t\t\treturn buildInCondition(key, value);\n\t\t\t}\n\t\t\tcase NIN: {\n\t\t\t\treturn buildNInCondition(key, value);\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\tthrow new RuntimeException(\"Unsupported expression type: \" + type);\n\t\t\t}\n\t\t}",
                "is_abstract": "",
                "class_name": "QdrantFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "buildEqCondition",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String identifier = doKey(key);\n\t\tif (value.value() instanceof String valueStr) {\n\t\t\treturn matchKeyword(identifier, valueStr);\n\t\t}\n\t\telse if (value.value() instanceof Number valueNum) {\n\t\t\tlong lValue = Long.parseLong(valueNum.toString());\n\t\t\treturn match(identifier, lValue);\n\t\t}\n\n\t\tthrow new IllegalArgumentException(\"Invalid value type for EQ. Can either be a string or Number\");",
                "is_abstract": "",
                "class_name": "QdrantFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "buildNeCondition",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String identifier = doKey(key);\n\t\tif (value.value() instanceof String valueStr) {\n\t\t\treturn filter(Filter.newBuilder().addMustNot(matchKeyword(identifier, valueStr)).build());\n\t\t}\n\t\telse if (value.value() instanceof Number valueNum) {\n\t\t\tlong lValue = Long.parseLong(valueNum.toString());\n\t\t\tCondition condition = match(identifier, lValue);\n\t\t\treturn filter(Filter.newBuilder().addMustNot(condition).build());\n\t\t}\n\n\t\tthrow new IllegalArgumentException(\"Invalid value type for NEQ. Can either be a string or Number\");",
                "is_abstract": "",
                "class_name": "QdrantFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "buildGtCondition",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String identifier = doKey(key);\n\t\tif (value.value() instanceof Number valueNum) {\n\t\t\tDouble dvalue = Double.parseDouble(valueNum.toString());\n\t\t\treturn range(identifier, Range.newBuilder().setGt(dvalue).build());\n\t\t}\n\t\tthrow new RuntimeException(\"Unsupported value type for GT condition. Only supports Number\");",
                "is_abstract": "",
                "class_name": "QdrantFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "buildLtCondition",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String identifier = doKey(key);\n\t\tif (value.value() instanceof Number valueNum) {\n\t\t\tDouble dvalue = Double.parseDouble(valueNum.toString());\n\t\t\treturn range(identifier, Range.newBuilder().setLt(dvalue).build());\n\t\t}\n\t\tthrow new RuntimeException(\"Unsupported value type for LT condition. Only supports Number\");",
                "is_abstract": "",
                "class_name": "QdrantFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "buildGteCondition",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String identifier = doKey(key);\n\t\tif (value.value() instanceof Number valueNum) {\n\t\t\tDouble dvalue = Double.parseDouble(valueNum.toString());\n\t\t\treturn range(identifier, Range.newBuilder().setGte(dvalue).build());\n\t\t}\n\t\tthrow new RuntimeException(\"Unsupported value type for GTE condition. Only supports Number\");",
                "is_abstract": "",
                "class_name": "QdrantFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "buildLteCondition",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String identifier = doKey(key);\n\t\tif (value.value() instanceof Number valueNum) {\n\t\t\tDouble dvalue = Double.parseDouble(valueNum.toString());\n\t\t\treturn range(identifier, Range.newBuilder().setLte(dvalue).build());\n\t\t}\n\t\tthrow new RuntimeException(\"Unsupported value type for LTE condition. Only supports Number\");",
                "is_abstract": "",
                "class_name": "QdrantFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "buildInCondition",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (value.value() instanceof List valueList && !valueList.isEmpty()) {\n\t\t\tObject firstValue = valueList.get(0);\n\t\t\tString identifier = doKey(key);\n\n\t\t\tif (firstValue instanceof String) {\n\t\t\t\t// If the first value is a string, then all values should be strings\n\t\t\t\tList<String> stringValues = new ArrayList<String>();\n\t\t\t\tfor (Object valueObj : valueList) {\n\t\t\t\t\tstringValues.add(valueObj.toString());\n\t\t\t\t}\n\t\t\t\treturn matchKeywords(identifier, stringValues);\n\t\t\t}\n\t\t\telse if (firstValue instanceof Number) {\n\t\t\t\t// If the first value is a number, then all values should be numbers\n\t\t\t\tList<Long> longValues = new ArrayList<Long>();\n\t\t\t\tfor (Object valueObj : valueList) {\n\t\t\t\t\tLong longValue = Long.parseLong(valueObj.toString());\n\t\t\t\t\tlongValues.add(longValue);\n\t\t\t\t}\n\t\t\t\treturn matchValues(identifier, longValues);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new RuntimeException(\"Unsupported value in IN value list. Only supports String or Number\");\n\t\t\t}\n\t\t}\n\t\tthrow new RuntimeException(\n\t\t\t\t\"Unsupported value type for IN condition. Only supports non-empty List of String or Number\");",
                "is_abstract": "",
                "class_name": "QdrantFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "buildNInCondition",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (value.value() instanceof List valueList && !valueList.isEmpty()) {\n\t\t\tObject firstValue = valueList.get(0);\n\t\t\tString identifier = doKey(key);\n\n\t\t\tif (firstValue instanceof String) {\n\t\t\t\t// If the first value is a string, then all values should be strings\n\t\t\t\tList<String> stringValues = new ArrayList<String>();\n\t\t\t\tfor (Object valueObj : valueList) {\n\t\t\t\t\tstringValues.add(valueObj.toString());\n\t\t\t\t}\n\t\t\t\treturn matchExceptKeywords(identifier, stringValues);\n\t\t\t}\n\t\t\telse if (firstValue instanceof Number) {\n\t\t\t\t// If the first value is a number, then all values should be numbers\n\t\t\t\tList<Long> longValues = new ArrayList<Long>();\n\t\t\t\tfor (Object valueObj : valueList) {\n\t\t\t\t\tLong longValue = Long.parseLong(valueObj.toString());\n\t\t\t\t\tlongValues.add(longValue);\n\t\t\t\t}\n\t\t\t\treturn matchExceptValues(identifier, longValues);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new RuntimeException(\"Unsupported value in NIN value list. Only supports String or Number\");\n\t\t\t}\n\t\t}\n\t\tthrow new RuntimeException(\n\t\t\t\t\"Unsupported value type for NIN condition. Only supports non-empty List of String or Number\");",
                "is_abstract": "",
                "class_name": "QdrantFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "doKey",
                "parameters": [
                    ""
                ],
                "return_type": "key",
                "body": "var identifier = (hasOuterQuotes(key.key())) ? removeOuterQuotes(key.key()) : key.key();\n\t\treturn identifier;",
                "is_abstract": "",
                "class_name": "QdrantFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "hasOuterQuotes",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "str = str.trim();\n\t\treturn (str.startsWith(\"\\\"\") && str.endsWith(\"\\\"\")) || (str.startsWith(\"'\") && str.endsWith(\"'\"));",
                "is_abstract": "",
                "class_name": "QdrantFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "removeOuterQuotes",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return in.substring(1, in.length() - 1);",
                "is_abstract": "",
                "class_name": "QdrantFilterExpressionConverter",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/vector-stores/spring-ai-qdrant/src/main/java/org/springframework/ai/vectorstore/qdrant/QdrantValueFactory.java",
        "class_names": [
            "QdrantValueFactory"
        ],
        "imports": "import java.lang.reflect.Array;\nimport java.util.ArrayList;\nimport java.util.stream.Collectors;\nimport io.qdrant.client.grpc.JsonWithInt.Value;\nimport java.util.List;\nimport org.springframework.util.Assert;\nimport java.util.Map;\nimport io.qdrant.client.ValueFactory;\nimport io.qdrant.client.grpc.JsonWithInt.Struct;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.qdrant.QdrantValueFactory": "org.springframework.ai.vectorstore.qdrant.QdrantValueFactory",
            "org.springframework.ai.vectorstore.qdrant.toValueM": "org.springframework.ai.vectorstore.qdrant.toValueM",
            "org.springframework.ai.vectorstore.qdrant.SuppressWarnings": "org.springframework.ai.vectorstore.qdrant.SuppressWarnings",
            "org.springframework.ai.vectorstore.qdrant.valu": "org.springframework.ai.vectorstore.qdrant.valu"
        },
        "package": "package org.springframework.ai.vectorstore.qdrant;",
        "property_declarations": [],
        "functions": [
            {
                "name": "toValueMap",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(inputMap, \"Input map must not be null\");\n\n\t\treturn inputMap.entrySet().stream().collect(Collectors.toMap(e -> e.getKey(), e -> value(e.getValue())));",
                "is_abstract": "",
                "class_name": "QdrantValueFactory",
                "annotations": []
            },
            {
                "name": "SuppressWarnings",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (value == null) {\n\t\t\treturn ValueFactory.nullValue();\n\t\t}\n\n\t\tif (value.getClass().isArray()) {\n\t\t\tint length = Array.getLength(value);\n\t\t\tObject[] objectArray = new Object[length];\n\t\t\tfor (int i = 0; i < length; i++) {\n\t\t\t\tobjectArray[i] = Array.get(value, i);\n\t\t\t}\n\t\t\treturn value(objectArray);\n\t\t}\n\n\t\tif (value instanceof Map) {\n\t\t\treturn value((Map<String, Object>) value);\n\t\t}\n\n\t\tswitch (value.getClass().getSimpleName()) {\n\t\t\tcase \"String\":\n\t\t\t\treturn ValueFactory.value((String) value);\n\t\t\tcase \"Integer\":\n\t\t\t\treturn ValueFactory.value((Integer) value);\n\t\t\tcase \"Double\":\n\t\t\t\treturn ValueFactory.value((Double) value);\n\t\t\tcase \"Float\":\n\t\t\t\treturn ValueFactory.value((Float) value);\n\t\t\tcase \"Boolean\":\n\t\t\t\treturn ValueFactory.value((Boolean) value);\n\t\t\tdefault:\n\t\t\t\tthrow new IllegalArgumentException(\"Unsupported Qdrant value type: \" + value.getClass());\n\t\t}",
                "is_abstract": "",
                "class_name": "QdrantValueFactory",
                "annotations": [
                    "@SuppressWarnings(\"unchecked\")"
                ]
            },
            {
                "name": "value",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "List<Value> values = new ArrayList<Value>(elements.length);\n\n\t\tfor (Object element : elements) {\n\t\t\tvalues.add(value(element));\n\t\t}\n\n\t\treturn ValueFactory.list(values);",
                "is_abstract": "",
                "class_name": "QdrantValueFactory",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/vector-stores/spring-ai-hanadb-store/src/test/java/org/springframework/ai/vectorstore/HanaCloudVectorStoreIT.java",
        "class_names": [
            "HanaTestApplication",
            "HanaCloudVectorStoreIT"
        ],
        "imports": "import java.util.List;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.orm.jpa.JpaVendorAdapter;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport org.junit.jupiter.api.Assertions;\nimport org.slf4j.Logger;\nimport org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\nimport java.util.function.Function;\nimport org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;\nimport org.springframework.ai.transformer.splitter.TokenTextSplitter;\nimport org.springframework.ai.openai.api.OpenAiApi;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.jdbc.datasource.DriverManagerDataSource;\nimport javax.sql.DataSource;\nimport org.springframework.ai.embedding.EmbeddingClient;\nimport org.springframework.boot.SpringBootConfiguration;\nimport org.springframework.ai.reader.pdf.PagePdfDocumentReader;\nimport java.util.function.Supplier;\nimport org.springframework.ai.document.Document;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.openai.OpenAiEmbeddingClient;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.HanaCloudVectorStoreIT": "org.springframework.ai.vectorstore.HanaCloudVectorStoreIT",
            "org.springframework.ai.vectorstore.HanaTestApplication": "org.springframework.ai.vectorstore.HanaTestApplication",
            "org.springframework.ai.vectorstore.vectorStoreTest": "org.springframework.ai.vectorstore.vectorStoreTest",
            "org.springframework.ai.vectorstore.hanaCloudVectorStor": "org.springframework.ai.vectorstore.hanaCloudVectorStor",
            "org.springframework.ai.vectorstore.cricketWorldCupRepository": "org.springframework.ai.vectorstore.cricketWorldCupRepository",
            "org.springframework.ai.vectorstore.dataSour": "org.springframework.ai.vectorstore.dataSour",
            "org.springframework.ai.vectorstore.entityManagerFactory": "org.springframework.ai.vectorstore.entityManagerFactory",
            "org.springframework.ai.vectorstore.embeddingClient": "org.springframework.ai.vectorstore.embeddingClient",
            "org.springframework.ai.vectorstore.logger": "org.springframework.ai.vectorstore.logger",
            "org.springframework.ai.vectorstore.contextRunner": "org.springframework.ai.vectorstore.contextRunner"
        },
        "package": "package org.springframework.ai.vectorstore;",
        "property_declarations": [
            "private static final Logger logger = LoggerFactory.getLogger(HanaCloudVectorStoreIT.class);",
            "private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t.withUserConfiguration(HanaTestApplication.class);"
        ],
        "functions": [
            {
                "name": "vectorStoreTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\n\t\t\tVectorStore vectorStore = context.getBean(HanaCloudVectorStore.class);\n\t\t\tint deleteCount = ((HanaCloudVectorStore) vectorStore).purgeEmbeddings();\n\t\t\tlogger.info(\"Purged all embeddings: count={}\", deleteCount);\n\n\t\t\tSupplier<List<Document>> reader = new PagePdfDocumentReader(\"classpath:Cricket_World_Cup.pdf\");\n\t\t\tFunction<List<Document>, List<Document>> splitter = new TokenTextSplitter();\n\t\t\tList<Document> documents = splitter.apply(reader.get());\n\t\t\tvectorStore.accept(documents);\n\n\t\t\tList<Document> results = vectorStore.similaritySearch(\"Who won the 2023 cricket world cup finals?\");\n\t\t\tAssertions.assertEquals(1, results.size());\n\t\t\tAssertions.assertTrue(results.get(0).getContent().contains(\"Australia\"));\n\n\t\t\t// Remove all documents from the store\n\t\t\tvectorStore.delete(documents.stream().map(Document::getId).toList());\n\t\t\tList<Document> results2 = vectorStore.similaritySearch(\"Who won the 2023 cricket world cup finals?\");\n\t\t\tAssertions.assertEquals(0, results2.size());\n\t\t});",
                "is_abstract": "",
                "class_name": "HanaCloudVectorStoreIT",
                "annotations": []
            },
            {
                "name": "hanaCloudVectorStore",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new HanaCloudVectorStore(cricketWorldCupRepository, embeddingClient,\n\t\t\t\t\tHanaCloudVectorStoreConfig.builder().tableName(\"CRICKET_WORLD_CUP\").topK(1).build());",
                "is_abstract": "",
                "class_name": "HanaCloudVectorStoreIT HanaTestApplication",
                "annotations": []
            },
            {
                "name": "cricketWorldCupRepository",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new CricketWorldCupRepository();",
                "is_abstract": "",
                "class_name": "HanaCloudVectorStoreIT HanaTestApplication",
                "annotations": []
            },
            {
                "name": "dataSource",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "DriverManagerDataSource dataSource = new DriverManagerDataSource();\n\n\t\t\tdataSource.setDriverClassName(\"com.sap.db.jdbc.Driver\");\n\t\t\tdataSource.setUrl(System.getenv(\"HANA_DATASOURCE_URL\"));\n\t\t\tdataSource.setUsername(System.getenv(\"HANA_DATASOURCE_USERNAME\"));\n\t\t\tdataSource.setPassword(System.getenv(\"HANA_DATASOURCE_PASSWORD\"));\n\n\t\t\treturn dataSource;",
                "is_abstract": "",
                "class_name": "HanaCloudVectorStoreIT HanaTestApplication",
                "annotations": []
            },
            {
                "name": "entityManagerFactory",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "LocalContainerEntityManagerFactoryBean em = new LocalContainerEntityManagerFactoryBean();\n\t\t\tem.setDataSource(dataSource());\n\t\t\tem.setPackagesToScan(\"org.springframework.ai.vectorstore\");\n\n\t\t\tJpaVendorAdapter vendorAdapter = new HibernateJpaVendorAdapter();\n\t\t\tem.setJpaVendorAdapter(vendorAdapter);\n\n\t\t\treturn em;",
                "is_abstract": "",
                "class_name": "HanaCloudVectorStoreIT HanaTestApplication",
                "annotations": []
            },
            {
                "name": "embeddingClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new OpenAiEmbeddingClient(new OpenAiApi(System.getenv(\"OPENAI_API_KEY\")));",
                "is_abstract": "",
                "class_name": "HanaCloudVectorStoreIT HanaTestApplication",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/vector-stores/spring-ai-hanadb-store/src/test/java/org/springframework/ai/vectorstore/CricketWorldCupHanaController.java",
        "class_names": [
            "CricketWorldCupHanaController"
        ],
        "imports": "import java.util.stream.Collectors;\nimport java.util.List;\nimport org.springframework.ai.chat.ChatClient;\nimport org.springframework.ai.chat.prompt.SystemPromptTemplate;\nimport org.springframework.core.io.Resource;\nimport java.io.IOException;\nimport org.springframework.web.multipart.MultipartFile;\nimport org.slf4j.Logger;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport java.util.Map;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport java.util.function.Function;\nimport org.springframework.ai.transformer.splitter.TokenTextSplitter;\nimport org.springframework.ai.chat.messages.UserMessage;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.ai.reader.pdf.PagePdfDocumentReader;\nimport org.springframework.ai.chat.prompt.Prompt;\nimport java.util.function.Supplier;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.ai.document.Document;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.CricketWorldCupHanaController": "org.springframework.ai.vectorstore.CricketWorldCupHanaController",
            "org.springframework.ai.vectorstore.PostMappin": "org.springframework.ai.vectorstore.PostMappin",
            "org.springframework.ai.vectorstore.GetMappin": "org.springframework.ai.vectorstore.GetMappin",
            "org.springframework.ai.vectorstore.logger": "org.springframework.ai.vectorstore.logger",
            "org.springframework.ai.vectorstore.hanaCloudVectorStor": "org.springframework.ai.vectorstore.hanaCloudVectorStor",
            "org.springframework.ai.vectorstore.chatClient": "org.springframework.ai.vectorstore.chatClient"
        },
        "package": "package org.springframework.ai.vectorstore;",
        "property_declarations": [
            "private final VectorStore hanaCloudVectorStore;",
            "private final ChatClient chatClient;",
            "private static final Logger logger = LoggerFactory.getLogger(CricketWorldCupHanaController.class);"
        ],
        "functions": [
            {
                "name": "PostMapping",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "int deleteCount = ((HanaCloudVectorStore) this.hanaCloudVectorStore).purgeEmbeddings();\n\t\tlogger.info(\"{} embeddings purged from CRICKET_WORLD_CUP table in Hana DB\", deleteCount);\n\t\treturn ResponseEntity.ok()\n\t\t\t.body(String.format(\"%d embeddings purged from CRICKET_WORLD_CUP table in Hana DB\", deleteCount));",
                "is_abstract": "",
                "class_name": "CricketWorldCupHanaController",
                "annotations": [
                    "@PostMapping(\"/ai/hana-vector-store/cricket-world-cup/purge-embeddings\")"
                ]
            },
            {
                "name": "GetMapping",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var documents = this.hanaCloudVectorStore.similaritySearch(message);\n\t\tvar inlined = documents.stream().map(Document::getContent).collect(Collectors.joining(System.lineSeparator()));\n\t\tvar similarDocsMessage = new SystemPromptTemplate(\"Based on the following: {documents}\")\n\t\t\t.createMessage(Map.of(\"documents\", inlined));\n\n\t\tvar userMessage = new UserMessage(message);\n\t\tPrompt prompt = new Prompt(List.of(similarDocsMessage, userMessage));\n\t\tString generation = chatClient.call(prompt).getResult().getOutput().getContent();\n\t\tlogger.info(\"Generation: {}\", generation);\n\t\treturn Map.of(\"generation\", generation);",
                "is_abstract": "",
                "class_name": "CricketWorldCupHanaController",
                "annotations": [
                    "@GetMapping(\"/ai/hana-vector-store/cricket-world-cup\")",
                    "@RequestParam(value = \"message\")"
                ]
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/vector-stores/spring-ai-hanadb-store/src/test/java/org/springframework/ai/vectorstore/CricketWorldCupRepository.java",
        "class_names": [
            "CricketWorldCupRepository"
        ],
        "imports": "import java.util.List;\nimport jakarta.persistence.PersistenceContext;\nimport org.springframework.stereotype.Repository;\nimport jakarta.persistence.EntityManager;\nimport jakarta.transaction.Transactional;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.CricketWorldCupRepository": "org.springframework.ai.vectorstore.CricketWorldCupRepository",
            "org.springframework.ai.vectorstore.sav": "org.springframework.ai.vectorstore.sav",
            "org.springframework.ai.vectorstore.deleteEmbeddingsById": "org.springframework.ai.vectorstore.deleteEmbeddingsById",
            "org.springframework.ai.vectorstore.deleteAllEmbeddings": "org.springframework.ai.vectorstore.deleteAllEmbeddings",
            "org.springframework.ai.vectorstore.cosineSimilaritySearch": "org.springframework.ai.vectorstore.cosineSimilaritySearch",
            "org.springframework.ai.vectorstore.privat": "org.springframework.ai.vectorstore.privat"
        },
        "package": "package org.springframework.ai.vectorstore;",
        "property_declarations": [
            "@PersistenceContext\n\tprivate EntityManager entityManager;"
        ],
        "functions": [
            {
                "name": "save",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String sql = String.format(\"\"\"\n\t\t\t\tINSERT INTO %s (_ID, EMBEDDING, CONTENT)\n\t\t\t\tVALUES(:_id, TO_REAL_VECTOR(:embedding), :content)\n\t\t\t\t\"\"\", tableName);\n\n\t\tentityManager.createNativeQuery(sql)\n\t\t\t.setParameter(\"_id\", id)\n\t\t\t.setParameter(\"embedding\", embedding)\n\t\t\t.setParameter(\"content\", content)\n\t\t\t.executeUpdate();",
                "is_abstract": "",
                "class_name": "CricketWorldCupRepository",
                "annotations": []
            },
            {
                "name": "deleteEmbeddingsById",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String sql = String.format(\"\"\"\n\t\t\t\tDELETE FROM %s WHERE _ID IN (:ids)\n\t\t\t\t\"\"\", tableName);\n\n\t\treturn entityManager.createNativeQuery(sql).setParameter(\"ids\", idList).executeUpdate();",
                "is_abstract": "",
                "class_name": "CricketWorldCupRepository",
                "annotations": []
            },
            {
                "name": "deleteAllEmbeddings",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String sql = String.format(\"\"\"\n\t\t\t\tDELETE FROM %s\n\t\t\t\t\"\"\", tableName);\n\n\t\treturn entityManager.createNativeQuery(sql).executeUpdate();",
                "is_abstract": "",
                "class_name": "CricketWorldCupRepository",
                "annotations": []
            },
            {
                "name": "cosineSimilaritySearch",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String sql = String.format(\"\"\"\n\t\t\t\tSELECT TOP :topK * FROM %s\n\t\t\t\tORDER BY COSINE_SIMILARITY(EMBEDDING, TO_REAL_VECTOR(:queryEmbedding)) DESC\n\t\t\t\t\"\"\", tableName);\n\n\t\treturn entityManager.createNativeQuery(sql, CricketWorldCup.class)\n\t\t\t.setParameter(\"topK\", topK)\n\t\t\t.setParameter(\"queryEmbedding\", queryEmbedding)\n\t\t\t.getResultList();",
                "is_abstract": "",
                "class_name": "CricketWorldCupRepository",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/vector-stores/spring-ai-hanadb-store/src/test/java/org/springframework/ai/vectorstore/CricketWorldCup.java",
        "class_names": [
            "CricketWorldCup"
        ],
        "imports": "import jakarta.persistence.Entity;\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Table;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.CricketWorldCu": "org.springframework.ai.vectorstore.CricketWorldCu",
            "org.springframework.ai.vectorstore.getContent": "org.springframework.ai.vectorstore.getContent",
            "org.springframework.ai.vectorstore.content": "org.springframework.ai.vectorstore.content"
        },
        "package": "package org.springframework.ai.vectorstore;",
        "property_declarations": [
            "@Column(name = \"content\")\n\tprivate String content;"
        ],
        "functions": [
            {
                "name": "getContent",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return content;",
                "is_abstract": "",
                "class_name": "CricketWorldCup",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/vector-stores/spring-ai-hanadb-store/src/main/java/org/springframework/ai/vectorstore/HanaVectorRepository.java",
        "class_names": [],
        "imports": "import java.util.List;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.sav": "org.springframework.ai.vectorstore.sav",
            "org.springframework.ai.vectorstore.deleteEmbeddingsById": "org.springframework.ai.vectorstore.deleteEmbeddingsById",
            "org.springframework.ai.vectorstore.deleteAllEmbeddings": "org.springframework.ai.vectorstore.deleteAllEmbeddings",
            "org.springframework.ai.vectorstore.cosineSimilaritySearch": "org.springframework.ai.vectorstore.cosineSimilaritySearch"
        },
        "package": "package org.springframework.ai.vectorstore;",
        "property_declarations": [],
        "functions": [
            {
                "name": "save",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "deleteEmbeddingsById",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "deleteAllEmbeddings",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "cosineSimilaritySearch",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/vector-stores/spring-ai-hanadb-store/src/main/java/org/springframework/ai/vectorstore/HanaVectorEntity.java",
        "class_names": [
            "HanaVectorEntity"
        ],
        "imports": "import com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.MappedSuperclass;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.HanaVectorEntity": "org.springframework.ai.vectorstore.HanaVectorEntity",
            "org.springframework.ai.vectorstore.toJson": "org.springframework.ai.vectorstore.toJson",
            "org.springframework.ai.vectorstore.get_id": "org.springframework.ai.vectorstore.get_id",
            "org.springframework.ai.vectorstore._id": "org.springframework.ai.vectorstore._id"
        },
        "package": "package org.springframework.ai.vectorstore;",
        "property_declarations": [
            "@Id\n\t@Column(name = \"_id\")\n\tprotected String _id;"
        ],
        "functions": [
            {
                "name": "toJson",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new ObjectMapper().writeValueAsString(this);",
                "is_abstract": "",
                "class_name": "HanaVectorEntity",
                "annotations": []
            },
            {
                "name": "get_id",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return _id;",
                "is_abstract": "",
                "class_name": "HanaVectorEntity",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/vector-stores/spring-ai-hanadb-store/src/main/java/org/springframework/ai/vectorstore/HanaCloudVectorStoreConfig.java",
        "class_names": [
            "HanaCloudVectorStoreConfig",
            "HanaCloudVectorStoreConfigBuilder"
        ],
        "imports": "",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.HanaCloudVectorStoreConfi": "org.springframework.ai.vectorstore.HanaCloudVectorStoreConfi",
            "org.springframework.ai.vectorstore.HanaCloudVectorStoreConfigBuilder": "org.springframework.ai.vectorstore.HanaCloudVectorStoreConfigBuilder",
            "org.springframework.ai.vectorstore.builder": "org.springframework.ai.vectorstore.builder",
            "org.springframework.ai.vectorstore.getTableNam": "org.springframework.ai.vectorstore.getTableNam",
            "org.springframework.ai.vectorstore.getTopK": "org.springframework.ai.vectorstore.getTopK",
            "org.springframework.ai.vectorstore.tableNam": "org.springframework.ai.vectorstore.tableNam",
            "org.springframework.ai.vectorstore.topK": "org.springframework.ai.vectorstore.topK",
            "org.springframework.ai.vectorstore.build": "org.springframework.ai.vectorstore.build"
        },
        "package": "package org.springframework.ai.vectorstore;",
        "property_declarations": [
            "private String tableName;",
            "private int topK;"
        ],
        "functions": [
            {
                "name": "builder",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new HanaCloudVectorStoreConfigBuilder();",
                "is_abstract": "",
                "class_name": "HanaCloudVectorStoreConfig",
                "annotations": []
            },
            {
                "name": "getTableName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return tableName;",
                "is_abstract": "",
                "class_name": "HanaCloudVectorStoreConfig",
                "annotations": []
            },
            {
                "name": "getTopK",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return topK;",
                "is_abstract": "",
                "class_name": "HanaCloudVectorStoreConfig",
                "annotations": []
            },
            {
                "name": "tableName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.tableName = tableName;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "HanaCloudVectorStoreConfig HanaCloudVectorStoreConfigBuilder",
                "annotations": []
            },
            {
                "name": "topK",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.topK = topK;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "HanaCloudVectorStoreConfig HanaCloudVectorStoreConfigBuilder",
                "annotations": []
            },
            {
                "name": "build",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "HanaCloudVectorStoreConfig config = new HanaCloudVectorStoreConfig();\n\t\t\tconfig.tableName = tableName;\n\t\t\tconfig.topK = topK;\n\t\t\treturn config;",
                "is_abstract": "",
                "class_name": "HanaCloudVectorStoreConfig HanaCloudVectorStoreConfigBuilder",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/vector-stores/spring-ai-hanadb-store/src/main/java/org/springframework/ai/vectorstore/HanaCloudVectorStore.java",
        "class_names": [
            "HanaCloudVectorStore"
        ],
        "imports": "import java.util.stream.Collectors;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport java.util.List;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.ai.document.Document;\nimport org.slf4j.Logger;\nimport java.util.Collections;\nimport org.springframework.ai.embedding.EmbeddingClient;\nimport java.util.Optional;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.HanaCloudVectorStor": "org.springframework.ai.vectorstore.HanaCloudVectorStor",
            "org.springframework.ai.vectorstore.add": "org.springframework.ai.vectorstore.add",
            "org.springframework.ai.vectorstore.delet": "org.springframework.ai.vectorstore.delet",
            "org.springframework.ai.vectorstore.purgeEmbeddings": "org.springframework.ai.vectorstore.purgeEmbeddings",
            "org.springframework.ai.vectorstore.similaritySearch": "org.springframework.ai.vectorstore.similaritySearch",
            "org.springframework.ai.vectorstore.getEmbeddin": "org.springframework.ai.vectorstore.getEmbeddin",
            "org.springframework.ai.vectorstore.logger": "org.springframework.ai.vectorstore.logger",
            "org.springframework.ai.vectorstore.repository": "org.springframework.ai.vectorstore.repository",
            "org.springframework.ai.vectorstore.embeddingClient": "org.springframework.ai.vectorstore.embeddingClient",
            "org.springframework.ai.vectorstore.confi": "org.springframework.ai.vectorstore.confi"
        },
        "package": "package org.springframework.ai.vectorstore;",
        "property_declarations": [
            "private final EmbeddingClient embeddingClient;",
            "private final HanaVectorRepository<? extends HanaVectorEntity> repository;",
            "private final HanaCloudVectorStoreConfig config;",
            "private static final Logger logger = LoggerFactory.getLogger(HanaCloudVectorStore.class);"
        ],
        "functions": [
            {
                "name": "add",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "int count = 1;\n\t\tfor (Document document : documents) {\n\t\t\tlogger.info(\"[{}/{}] Calling EmbeddingClient for document id = {}\", count++, documents.size(),\n\t\t\t\t\tdocument.getId());\n\t\t\tString content = document.getContent().replaceAll(\"\\\\s+\", \" \");\n\t\t\tString embedding = getEmbedding(document);\n\t\t\trepository.save(config.getTableName(), document.getId(), embedding, content);\n\t\t}\n\t\tlogger.info(\"Embeddings saved in HanaCloudVectorStore for {} documents\", count - 1);",
                "is_abstract": "",
                "class_name": "HanaCloudVectorStore",
                "annotations": []
            },
            {
                "name": "delete",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "int deleteCount = repository.deleteEmbeddingsById(config.getTableName(), idList);\n\t\tlogger.info(\"{} embeddings deleted\", deleteCount);\n\t\treturn Optional.of(deleteCount == idList.size());",
                "is_abstract": "",
                "class_name": "HanaCloudVectorStore",
                "annotations": []
            },
            {
                "name": "purgeEmbeddings",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "int deleteCount = repository.deleteAllEmbeddings(config.getTableName());\n\t\tlogger.info(\"{} embeddings deleted\", deleteCount);\n\t\treturn deleteCount;",
                "is_abstract": "",
                "class_name": "HanaCloudVectorStore",
                "annotations": []
            },
            {
                "name": "similaritySearch",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return similaritySearch(SearchRequest.query(query).withTopK(config.getTopK()));",
                "is_abstract": "",
                "class_name": "HanaCloudVectorStore",
                "annotations": []
            },
            {
                "name": "getEmbedding",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return \"[\" + this.embeddingClient.embed(searchRequest.getQuery())\n\t\t\t.stream()\n\t\t\t.map(String::valueOf)\n\t\t\t.collect(Collectors.joining(\", \")) + \"]\";",
                "is_abstract": "",
                "class_name": "HanaCloudVectorStore",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/vector-stores/spring-ai-elasticsearch-store/src/test/java/org/springframework/ai/vectorstore/ElasticsearchAiSearchFilterExpressionConverterTest.java",
        "class_names": [
            "ElasticsearchAiSearchFilterExpressionConverterTest"
        ],
        "imports": "import org.springframework.ai.vectorstore.filter.Filter;\nimport java.util.List;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.*;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.vectorstore.filter.FilterExpressionConverter;\nimport java.util.Date;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.ElasticsearchAiSearchFilterExpressionConverterTest": "org.springframework.ai.vectorstore.ElasticsearchAiSearchFilterExpressionConverterTest",
            "org.springframework.ai.vectorstore.testDat": "org.springframework.ai.vectorstore.testDat",
            "org.springframework.ai.vectorstore.testEQ": "org.springframework.ai.vectorstore.testEQ",
            "org.springframework.ai.vectorstore.tesEqAndGt": "org.springframework.ai.vectorstore.tesEqAndGt",
            "org.springframework.ai.vectorstore.tesIn": "org.springframework.ai.vectorstore.tesIn",
            "org.springframework.ai.vectorstore.testN": "org.springframework.ai.vectorstore.testN",
            "org.springframework.ai.vectorstore.testGrou": "org.springframework.ai.vectorstore.testGrou",
            "org.springframework.ai.vectorstore.tesBoolean": "org.springframework.ai.vectorstore.tesBoolean",
            "org.springframework.ai.vectorstore.testDecimal": "org.springframework.ai.vectorstore.testDecimal",
            "org.springframework.ai.vectorstore.testComplexIdentifiers": "org.springframework.ai.vectorstore.testComplexIdentifiers",
            "org.springframework.ai.vectorstore.converter": "org.springframework.ai.vectorstore.converter"
        },
        "package": "package org.springframework.ai.vectorstore;",
        "property_declarations": [
            "final FilterExpressionConverter converter = new ElasticsearchAiSearchFilterExpressionConverter();"
        ],
        "functions": [
            {
                "name": "testDate",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String vectorExpr = converter.convertExpression(new Filter.Expression(EQ, new Filter.Key(\"activationDate\"),\n\t\t\t\tnew Filter.Value(new Date(1704637752148L))));\n\t\tassertThat(vectorExpr).isEqualTo(\"metadata.activationDate:2024-01-07T14:29:12Z\");\n\n\t\tvectorExpr = converter.convertExpression(\n\t\t\t\tnew Filter.Expression(EQ, new Filter.Key(\"activationDate\"), new Filter.Value(\"1970-01-01T00:00:02Z\")));\n\t\tassertThat(vectorExpr).isEqualTo(\"metadata.activationDate:1970-01-01T00:00:02Z\");",
                "is_abstract": "",
                "class_name": "ElasticsearchAiSearchFilterExpressionConverterTest",
                "annotations": []
            },
            {
                "name": "testEQ",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String vectorExpr = converter\n\t\t\t.convertExpression(new Filter.Expression(EQ, new Filter.Key(\"country\"), new Filter.Value(\"BG\")));\n\t\tassertThat(vectorExpr).isEqualTo(\"metadata.country:BG\");",
                "is_abstract": "",
                "class_name": "ElasticsearchAiSearchFilterExpressionConverterTest",
                "annotations": []
            },
            {
                "name": "tesEqAndGte",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String vectorExpr = converter.convertExpression(new Filter.Expression(AND,\n\t\t\t\tnew Filter.Expression(EQ, new Filter.Key(\"genre\"), new Filter.Value(\"drama\")),\n\t\t\t\tnew Filter.Expression(GTE, new Filter.Key(\"year\"), new Filter.Value(2020))));\n\t\tassertThat(vectorExpr).isEqualTo(\"metadata.genre:drama AND metadata.year:>=2020\");",
                "is_abstract": "",
                "class_name": "ElasticsearchAiSearchFilterExpressionConverterTest",
                "annotations": []
            },
            {
                "name": "tesIn",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String vectorExpr = converter.convertExpression(new Filter.Expression(IN, new Filter.Key(\"genre\"),\n\t\t\t\tnew Filter.Value(List.of(\"comedy\", \"documentary\", \"drama\"))));\n\t\tassertThat(vectorExpr).isEqualTo(\"(metadata.genre:comedy OR documentary OR drama)\");",
                "is_abstract": "",
                "class_name": "ElasticsearchAiSearchFilterExpressionConverterTest",
                "annotations": []
            },
            {
                "name": "testNe",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String vectorExpr = converter.convertExpression(\n\t\t\t\tnew Filter.Expression(OR, new Filter.Expression(GTE, new Filter.Key(\"year\"), new Filter.Value(2020)),\n\t\t\t\t\t\tnew Filter.Expression(AND,\n\t\t\t\t\t\t\t\tnew Filter.Expression(EQ, new Filter.Key(\"country\"), new Filter.Value(\"BG\")),\n\t\t\t\t\t\t\t\tnew Filter.Expression(NE, new Filter.Key(\"city\"), new Filter.Value(\"Sofia\")))));\n\t\tassertThat(vectorExpr).isEqualTo(\"metadata.year:>=2020 OR metadata.country:BG AND metadata.city: NOT Sofia\");",
                "is_abstract": "",
                "class_name": "ElasticsearchAiSearchFilterExpressionConverterTest",
                "annotations": []
            },
            {
                "name": "testGroup",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String vectorExpr = converter.convertExpression(new Filter.Expression(AND,\n\t\t\t\tnew Filter.Group(new Filter.Expression(OR,\n\t\t\t\t\t\tnew Filter.Expression(GTE, new Filter.Key(\"year\"), new Filter.Value(2020)),\n\t\t\t\t\t\tnew Filter.Expression(EQ, new Filter.Key(\"country\"), new Filter.Value(\"BG\")))),\n\t\t\t\tnew Filter.Expression(NIN, new Filter.Key(\"city\"), new Filter.Value(List.of(\"Sofia\", \"Plovdiv\")))));\n\t\tassertThat(vectorExpr)\n\t\t\t.isEqualTo(\"(metadata.year:>=2020 OR metadata.country:BG) AND NOT (metadata.city:Sofia OR Plovdiv)\");",
                "is_abstract": "",
                "class_name": "ElasticsearchAiSearchFilterExpressionConverterTest",
                "annotations": []
            },
            {
                "name": "tesBoolean",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String vectorExpr = converter.convertExpression(new Filter.Expression(AND,\n\t\t\t\tnew Filter.Expression(AND, new Filter.Expression(EQ, new Filter.Key(\"isOpen\"), new Filter.Value(true)),\n\t\t\t\t\t\tnew Filter.Expression(GTE, new Filter.Key(\"year\"), new Filter.Value(2020))),\n\t\t\t\tnew Filter.Expression(IN, new Filter.Key(\"country\"), new Filter.Value(List.of(\"BG\", \"NL\", \"US\")))));\n\n\t\tassertThat(vectorExpr)\n\t\t\t.isEqualTo(\"metadata.isOpen:true AND metadata.year:>=2020 AND (metadata.country:BG OR NL OR US)\");",
                "is_abstract": "",
                "class_name": "ElasticsearchAiSearchFilterExpressionConverterTest",
                "annotations": []
            },
            {
                "name": "testDecimal",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String vectorExpr = converter.convertExpression(new Filter.Expression(AND,\n\t\t\t\tnew Filter.Expression(GTE, new Filter.Key(\"temperature\"), new Filter.Value(-15.6)),\n\t\t\t\tnew Filter.Expression(LTE, new Filter.Key(\"temperature\"), new Filter.Value(20.13))));\n\n\t\tassertThat(vectorExpr).isEqualTo(\"metadata.temperature:>=-15.6 AND metadata.temperature:<=20.13\");",
                "is_abstract": "",
                "class_name": "ElasticsearchAiSearchFilterExpressionConverterTest",
                "annotations": []
            },
            {
                "name": "testComplexIdentifiers",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String vectorExpr = converter\n\t\t\t.convertExpression(new Filter.Expression(EQ, new Filter.Key(\"\\\"country 1 2 3\\\"\"), new Filter.Value(\"BG\")));\n\t\tassertThat(vectorExpr).isEqualTo(\"metadata.country 1 2 3:BG\");\n\n\t\tvectorExpr = converter\n\t\t\t.convertExpression(new Filter.Expression(EQ, new Filter.Key(\"'country 1 2 3'\"), new Filter.Value(\"BG\")));\n\t\tassertThat(vectorExpr).isEqualTo(\"metadata.country 1 2 3:BG\");",
                "is_abstract": "",
                "class_name": "ElasticsearchAiSearchFilterExpressionConverterTest",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/vector-stores/spring-ai-elasticsearch-store/src/test/java/org/springframework/ai/vectorstore/ElasticsearchVectorStoreIT.java",
        "class_names": [
            "ElasticsearchVectorStoreIT",
            "TestApplication"
        ],
        "imports": "import java.util.List;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport java.io.IOException;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.hamcrest.Matchers.equalTo;\nimport java.time.ZonedDateTime;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.testcontainers.shaded.com.fasterxml.jackson.databind.ObjectMapper;\nimport java.util.Map;\nimport org.awaitility.Awaitility;\nimport java.nio.charset.StandardCharsets;\nimport java.time.Duration;\nimport static org.hamcrest.Matchers.hasSize;\nimport org.testcontainers.elasticsearch.ElasticsearchContainer;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.springframework.ai.openai.api.OpenAiApi;\nimport org.springframework.context.annotation.Bean;\nimport org.junit.jupiter.params.provider.ValueSource;\nimport org.elasticsearch.client.RestClient;\nimport org.springframework.core.io.DefaultResourceLoader;\nimport org.springframework.ai.embedding.EmbeddingClient;\nimport org.springframework.boot.SpringBootConfiguration;\nimport org.testcontainers.junit.jupiter.Testcontainers;\nimport org.junit.jupiter.api.BeforeEach;\nimport java.util.concurrent.TimeUnit;\nimport org.springframework.ai.document.Document;\nimport org.testcontainers.junit.jupiter.Container;\nimport java.util.Date;\nimport java.util.UUID;\nimport org.apache.http.HttpHost;\nimport org.springframework.ai.openai.OpenAiEmbeddingClient;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.ElasticsearchVectorStoreIT": "org.springframework.ai.vectorstore.ElasticsearchVectorStoreIT",
            "org.springframework.ai.vectorstore.TestApplication": "org.springframework.ai.vectorstore.TestApplication",
            "org.springframework.ai.vectorstore.beforeAll": "org.springframework.ai.vectorstore.beforeAll",
            "org.springframework.ai.vectorstore.getText": "org.springframework.ai.vectorstore.getText",
            "org.springframework.ai.vectorstore.getContextRunner": "org.springframework.ai.vectorstore.getContextRunner",
            "org.springframework.ai.vectorstore.cleanDatabas": "org.springframework.ai.vectorstore.cleanDatabas",
            "org.springframework.ai.vectorstore.ParameterizedTest": "org.springframework.ai.vectorstore.ParameterizedTest",
            "org.springframework.ai.vectorstore.vectorStor": "org.springframework.ai.vectorstore.vectorStor",
            "org.springframework.ai.vectorstore.embeddingClient": "org.springframework.ai.vectorstore.embeddingClient",
            "org.springframework.ai.vectorstore.privat": "org.springframework.ai.vectorstore.privat",
            "org.springframework.ai.vectorstore.DEFAULT": "org.springframework.ai.vectorstore.DEFAULT",
            "org.springframework.ai.vectorstore.objectMapper": "org.springframework.ai.vectorstore.objectMapper",
            "org.springframework.ai.vectorstore.documents": "org.springframework.ai.vectorstore.documents"
        },
        "package": "package org.springframework.ai.vectorstore;",
        "property_declarations": [
            "private static final String DEFAULT = \"default cosine similarity\";",
            "private List<Document> documents = List.of(\n\t\t\tnew Document(\"1\", getText(\"classpath:/test/data/spring.ai.txt\"), Map.of(\"meta1\", \"meta1\")),\n\t\t\tnew Document(\"2\", getText(\"classpath:/test/data/time.shelter.txt\"), Map.of()),\n\t\t\tnew Document(\"3\", getText(\"classpath:/test/data/great.depression.txt\"), Map.of(\"meta2\", \"meta2\")));",
            "protected final ObjectMapper objectMapper = new ObjectMapper();",
            "@Container\n\tprivate static final ElasticsearchContainer elasticsearchContainer = new ElasticsearchContainer(\n\t\t\t\"docker.elastic.co/elasticsearch/elasticsearch:8.12.2\")\n\t\t.withEnv(\"xpack.security.enabled\", \"false\");"
        ],
        "functions": [
            {
                "name": "beforeAll",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Awaitility.setDefaultPollInterval(2, TimeUnit.SECONDS);\n\t\tAwaitility.setDefaultPollDelay(Duration.ZERO);\n\t\tAwaitility.setDefaultTimeout(Duration.ofMinutes(1));",
                "is_abstract": "",
                "class_name": "ElasticsearchVectorStoreIT",
                "annotations": []
            },
            {
                "name": "getText",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var resource = new DefaultResourceLoader().getResource(uri);\n\t\ttry {\n\t\t\treturn resource.getContentAsString(StandardCharsets.UTF_8);\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}",
                "is_abstract": "",
                "class_name": "ElasticsearchVectorStoreIT",
                "annotations": []
            },
            {
                "name": "getContextRunner",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new ApplicationContextRunner().withUserConfiguration(TestApplication.class);",
                "is_abstract": "",
                "class_name": "ElasticsearchVectorStoreIT",
                "annotations": []
            },
            {
                "name": "cleanDatabase",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "getContextRunner().run(context -> {\n\t\t\tVectorStore vectorStore = context.getBean(VectorStore.class);\n\t\t\tvectorStore.delete(List.of(\"_all\"));\n\t\t});",
                "is_abstract": "",
                "class_name": "ElasticsearchVectorStoreIT",
                "annotations": []
            },
            {
                "name": "ParameterizedTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "0} : {displayName} \")\n\t@ValueSource(strings = { DEFAULT, \"\"\"\n\t\t\t  double value = dotProduct(params.query_vector, 'embedding');\n\t\t\t  return sigmoid(1, Math.E, -value);\n\t\t\t\"\"\", \"1 / (1 + l1norm(params.query_vector, 'embedding'))\",\n\t\t\t\"1 / (1 + l2norm(params.query_vector, 'embedding'))\" })\n\tpublic void addAndSearchTest(String similarityFunction) {\n\n\t\tgetContextRunner().run(context -> {\n\t\t\tElasticsearchVectorStore vectorStore = context.getBean(ElasticsearchVectorStore.class);\n\n\t\t\tif (!DEFAULT.equals(similarityFunction)) {\n\t\t\t\tvectorStore.withSimilarityFunction(similarityFunction);\n\t\t\t}\n\n\t\t\tvectorStore.add(documents);\n\n\t\t\tAwaitility.await()\n\t\t\t\t.until(() -> vectorStore\n\t\t\t\t\t.similaritySearch(SearchRequest.query(\"Great Depression\").withTopK(1).withSimilarityThreshold(0)),\n\t\t\t\t\t\thasSize(1));\n\n\t\t\tList<Document> results = vectorStore\n\t\t\t\t.similaritySearch(SearchRequest.query(\"Great Depression\").withTopK(1).withSimilarityThreshold(0));\n\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tDocument resultDoc = results.get(0);\n\t\t\tassertThat(resultDoc.getId()).isEqualTo(documents.get(2).getId());\n\t\t\tassertThat(resultDoc.getContent()).contains(\"The Great Depression (1929\u20131939) was an economic shock\");\n\t\t\tassertThat(resultDoc.getMetadata()).hasSize(2);\n\t\t\tassertThat(resultDoc.getMetadata()).containsKey(\"meta2\");\n\t\t\tassertThat(resultDoc.getMetadata()).containsKey(\"distance\");\n\n\t\t\t// Remove all documents from the store\n\t\t\tvectorStore.delete(documents.stream().map(Document::getId).toList());\n\n\t\t\tAwaitility.await()\n\t\t\t\t.until(() -> vectorStore\n\t\t\t\t\t.similaritySearch(SearchRequest.query(\"Great Depression\").withTopK(1).withSimilarityThreshold(0)),\n\t\t\t\t\t\thasSize(0));\n\t\t});",
                "is_abstract": "",
                "class_name": "ElasticsearchVectorStoreIT",
                "annotations": [
                    "@ParameterizedTest(name = \"{0} : {displayName} \")",
                    "@ValueSource(strings = { DEFAULT, \"\"\"\n\t\t\t  double value = dotProduct(params.query_vector, 'embedding');\n\t\t\t  return sigmoid(1, Math.E, -value);\n\t\t\t\"\"\", \"1 / (1 + l1norm(params.query_vector, 'embedding'))\",\n\t\t\t\"1 / (1 + l2norm(params.query_vector, 'embedding'))\" })"
                ]
            },
            {
                "name": "vectorStore",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new ElasticsearchVectorStore(\n\t\t\t\t\tRestClient.builder(HttpHost.create(elasticsearchContainer.getHttpHostAddress())).build(),\n\t\t\t\t\tembeddingClient);",
                "is_abstract": "",
                "class_name": "ElasticsearchVectorStoreIT TestApplication",
                "annotations": []
            },
            {
                "name": "embeddingClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new OpenAiEmbeddingClient(new OpenAiApi(System.getenv(\"OPENAI_API_KEY\")));",
                "is_abstract": "",
                "class_name": "ElasticsearchVectorStoreIT TestApplication",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/vector-stores/spring-ai-elasticsearch-store/src/main/java/org/springframework/ai/vectorstore/ElasticsearchVectorStore.java",
        "class_names": [
            "ElasticsearchVectorStore"
        ],
        "imports": "import java.util.stream.Collectors;\nimport java.util.List;\nimport org.springframework.ai.vectorstore.filter.FilterExpressionConverter;\nimport java.io.IOException;\nimport co.elastic.clients.json.JsonData;\nimport org.slf4j.Logger;\nimport java.io.StringReader;\nimport org.slf4j.LoggerFactory;\nimport co.elastic.clients.transport.endpoints.BooleanResponse;\nimport co.elastic.clients.elasticsearch.core.BulkResponse;\nimport org.elasticsearch.client.RestClient;\nimport org.springframework.beans.factory.InitializingBean;\nimport co.elastic.clients.elasticsearch.core.search.Hit;\nimport org.springframework.ai.embedding.EmbeddingClient;\nimport co.elastic.clients.transport.rest_client.RestClientTransport;\nimport co.elastic.clients.json.jackson.JacksonJsonpMapper;\nimport co.elastic.clients.elasticsearch._types.query_dsl.Query;\nimport org.springframework.ai.vectorstore.filter.Filter;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.springframework.util.Assert;\nimport org.springframework.ai.document.Document;\nimport co.elastic.clients.elasticsearch.ElasticsearchClient;\nimport co.elastic.clients.elasticsearch.core.BulkRequest;\nimport co.elastic.clients.elasticsearch.indices.CreateIndexResponse;\nimport java.util.Objects;\nimport com.fasterxml.jackson.databind.DeserializationFeature;\nimport java.util.Optional;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.ElasticsearchVectorStor": "org.springframework.ai.vectorstore.ElasticsearchVectorStor",
            "org.springframework.ai.vectorstore.withSimilarityFunction": "org.springframework.ai.vectorstore.withSimilarityFunction",
            "org.springframework.ai.vectorstore.add": "org.springframework.ai.vectorstore.add",
            "org.springframework.ai.vectorstore.delet": "org.springframework.ai.vectorstore.delet",
            "org.springframework.ai.vectorstore.bulkRequest": "org.springframework.ai.vectorstore.bulkRequest",
            "org.springframework.ai.vectorstore.similaritySearch": "org.springframework.ai.vectorstore.similaritySearch",
            "org.springframework.ai.vectorstore.getElasticsearchSimilarityQuery": "org.springframework.ai.vectorstore.getElasticsearchSimilarityQuery",
            "org.springframework.ai.vectorstore.getElasticsearchQueryStrin": "org.springframework.ai.vectorstore.getElasticsearchQueryStrin",
            "org.springframework.ai.vectorstore.toDocument": "org.springframework.ai.vectorstore.toDocument",
            "org.springframework.ai.vectorstore.exists": "org.springframework.ai.vectorstore.exists",
            "org.springframework.ai.vectorstore.createIndexMappin": "org.springframework.ai.vectorstore.createIndexMappin",
            "org.springframework.ai.vectorstore.afterPropertiesSet": "org.springframework.ai.vectorstore.afterPropertiesSet",
            "org.springframework.ai.vectorstore.COSINE_SIMILARITY_FUNCTION": "org.springframework.ai.vectorstore.COSINE_SIMILARITY_FUNCTION",
            "org.springframework.ai.vectorstore.logger": "org.springframework.ai.vectorstore.logger",
            "org.springframework.ai.vectorstore.INDEX_NAME": "org.springframework.ai.vectorstore.INDEX_NAME",
            "org.springframework.ai.vectorstore.embeddingClient": "org.springframework.ai.vectorstore.embeddingClient",
            "org.springframework.ai.vectorstore.elasticsearchClient": "org.springframework.ai.vectorstore.elasticsearchClient",
            "org.springframework.ai.vectorstore.index": "org.springframework.ai.vectorstore.index",
            "org.springframework.ai.vectorstore.filterExpressionConverter": "org.springframework.ai.vectorstore.filterExpressionConverter",
            "org.springframework.ai.vectorstore.similarityFunction": "org.springframework.ai.vectorstore.similarityFunction"
        },
        "package": "package org.springframework.ai.vectorstore;",
        "property_declarations": [
            "private final EmbeddingClient embeddingClient;",
            "private static final Logger logger = LoggerFactory.getLogger(ElasticsearchVectorStore.class);",
            "private static final String INDEX_NAME = \"spring-ai-document-index\";",
            "private String similarityFunction;",
            "private final String index;",
            "private final FilterExpressionConverter filterExpressionConverter;",
            "public static final String COSINE_SIMILARITY_FUNCTION = \"(cosineSimilarity(params.query_vector, 'embedding') + 1.0) / 2\";",
            "private final ElasticsearchClient elasticsearchClient;"
        ],
        "functions": [
            {
                "name": "withSimilarityFunction",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.similarityFunction = similarityFunction;\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "ElasticsearchVectorStore",
                "annotations": []
            },
            {
                "name": "add",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "BulkRequest.Builder builkRequestBuilder = new BulkRequest.Builder();\n\t\tfor (Document document : documents) {\n\t\t\tif (Objects.isNull(document.getEmbedding()) || document.getEmbedding().isEmpty()) {\n\t\t\t\tlogger.debug(\"Calling EmbeddingClient for document id = \" + document.getId());\n\t\t\t\tdocument.setEmbedding(this.embeddingClient.embed(document));\n\t\t\t}\n\t\t\tbuilkRequestBuilder\n\t\t\t\t.operations(op -> op.index(idx -> idx.index(this.index).id(document.getId()).document(document)));\n\t\t}\n\t\tbulkRequest(builkRequestBuilder.build());",
                "is_abstract": "",
                "class_name": "ElasticsearchVectorStore",
                "annotations": []
            },
            {
                "name": "delete",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "BulkRequest.Builder builkRequestBuilder = new BulkRequest.Builder();\n\t\tfor (String id : idList)\n\t\t\tbuilkRequestBuilder.operations(op -> op.delete(idx -> idx.index(this.index).id(id)));\n\t\treturn Optional.of(bulkRequest(builkRequestBuilder.build()).errors());",
                "is_abstract": "",
                "class_name": "ElasticsearchVectorStore",
                "annotations": []
            },
            {
                "name": "bulkRequest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "try {\n\t\t\treturn this.elasticsearchClient.bulk(bulkRequest);\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}",
                "is_abstract": "",
                "class_name": "ElasticsearchVectorStore",
                "annotations": []
            },
            {
                "name": "similaritySearch",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(searchRequest, \"The search request must not be null.\");\n\t\treturn similaritySearch(this.embeddingClient.embed(searchRequest.getQuery()), searchRequest.getTopK(),\n\t\t\t\tDouble.valueOf(searchRequest.getSimilarityThreshold()).floatValue(),\n\t\t\t\tsearchRequest.getFilterExpression());",
                "is_abstract": "",
                "class_name": "ElasticsearchVectorStore",
                "annotations": []
            },
            {
                "name": "getElasticsearchSimilarityQuery",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return Query.of(queryBuilder -> queryBuilder.scriptScore(scriptScoreQueryBuilder -> scriptScoreQueryBuilder\n\t\t\t.query(queryBuilder2 -> queryBuilder2.queryString(queryStringQuerybuilder -> queryStringQuerybuilder\n\t\t\t\t.query(getElasticsearchQueryString(filterExpression))))\n\t\t\t.script(scriptBuilder -> scriptBuilder\n\t\t\t\t.inline(inlineScriptBuilder -> inlineScriptBuilder.source(this.similarityFunction)\n\t\t\t\t\t.params(\"query_vector\", JsonData.of(embedding))))));",
                "is_abstract": "",
                "class_name": "ElasticsearchVectorStore",
                "annotations": []
            },
            {
                "name": "getElasticsearchQueryString",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return Objects.isNull(filterExpression) ? \"*\"\n\t\t\t\t: this.filterExpressionConverter.convertExpression(filterExpression);",
                "is_abstract": "",
                "class_name": "ElasticsearchVectorStore",
                "annotations": []
            },
            {
                "name": "toDocument",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Document document = hit.source();\n\t\tdocument.getMetadata().put(\"distance\", 1 - hit.score().floatValue());\n\t\treturn document;",
                "is_abstract": "",
                "class_name": "ElasticsearchVectorStore",
                "annotations": []
            },
            {
                "name": "exists",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "try {\n\t\t\tBooleanResponse response = this.elasticsearchClient.indices()\n\t\t\t\t.exists(existRequestBuilder -> existRequestBuilder.index(targetIndex));\n\t\t\treturn response.value();\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}",
                "is_abstract": "",
                "class_name": "ElasticsearchVectorStore",
                "annotations": []
            },
            {
                "name": "createIndexMapping",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "try {\n\t\t\treturn this.elasticsearchClient.indices()\n\t\t\t\t.create(createIndexBuilder -> createIndexBuilder.index(index)\n\t\t\t\t\t.mappings(typeMappingBuilder -> typeMappingBuilder.withJson(new StringReader(mappingJson))));\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}",
                "is_abstract": "",
                "class_name": "ElasticsearchVectorStore",
                "annotations": []
            },
            {
                "name": "afterPropertiesSet",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (!exists(this.index)) {\n\t\t\tcreateIndexMapping(this.index, \"\"\"\n\t\t\t\t\t{\n\t\t\t\t\t      \"properties\": {\n\t\t\t\t\t          \"embedding\": {\n\t\t\t\t\t              \"type\": \"dense_vector\",\n\t\t\t\t\t              \"dims\": 1536,\n\t\t\t\t\t              \"index\": true,\n\t\t\t\t\t              \"similarity\": \"cosine\"\n\t\t\t\t\t          }\n\t\t\t\t\t      }\n\t\t\t\t\t  }\n\t\t\t\t\t\"\"\");\n\t\t}",
                "is_abstract": "",
                "class_name": "ElasticsearchVectorStore",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/vector-stores/spring-ai-elasticsearch-store/src/main/java/org/springframework/ai/vectorstore/ElasticsearchAiSearchFilterExpressionConverter.java",
        "class_names": [
            "ElasticsearchAiSearchFilterExpressionConverter"
        ],
        "imports": "import org.springframework.ai.vectorstore.filter.Filter;\nimport java.text.SimpleDateFormat;\nimport java.util.List;\nimport java.text.ParseException;\nimport org.springframework.ai.vectorstore.filter.Filter.Key;\nimport java.util.regex.Pattern;\nimport org.springframework.ai.vectorstore.filter.Filter.Expression;\nimport org.springframework.ai.vectorstore.filter.converter.AbstractFilterExpressionConverter;\nimport java.util.Date;\nimport java.util.TimeZone;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.ElasticsearchAiSearchFilterExpressionConverter": "org.springframework.ai.vectorstore.ElasticsearchAiSearchFilterExpressionConverter",
            "org.springframework.ai.vectorstore.doExpression": "org.springframework.ai.vectorstore.doExpression",
            "org.springframework.ai.vectorstore.doStartValueRan": "org.springframework.ai.vectorstore.doStartValueRan",
            "org.springframework.ai.vectorstore.doEndValueRan": "org.springframework.ai.vectorstore.doEndValueRan",
            "org.springframework.ai.vectorstore.doAddValueRangeSpitter": "org.springframework.ai.vectorstore.doAddValueRangeSpitter",
            "org.springframework.ai.vectorstore.getOperationSymbol": "org.springframework.ai.vectorstore.getOperationSymbol",
            "org.springframework.ai.vectorstore.doKey": "org.springframework.ai.vectorstore.doKey",
            "org.springframework.ai.vectorstore.withMetaPrefix": "org.springframework.ai.vectorstore.withMetaPrefix",
            "org.springframework.ai.vectorstore.doValu": "org.springframework.ai.vectorstore.doValu",
            "org.springframework.ai.vectorstore.doSingleValu": "org.springframework.ai.vectorstore.doSingleValu",
            "org.springframework.ai.vectorstore.doStartGrou": "org.springframework.ai.vectorstore.doStartGrou",
            "org.springframework.ai.vectorstore.doEndGrou": "org.springframework.ai.vectorstore.doEndGrou",
            "org.springframework.ai.vectorstore.DATE_FORMAT_PATTERN": "org.springframework.ai.vectorstore.DATE_FORMAT_PATTERN",
            "org.springframework.ai.vectorstore.dateFormat": "org.springframework.ai.vectorstore.dateFormat"
        },
        "package": "package org.springframework.ai.vectorstore;",
        "property_declarations": [
            "private final SimpleDateFormat dateFormat;",
            "private static final Pattern DATE_FORMAT_PATTERN = Pattern.compile(\"\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}Z\");"
        ],
        "functions": [
            {
                "name": "doExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (expression.type() == Filter.ExpressionType.IN || expression.type() == Filter.ExpressionType.NIN) {\n\t\t\tcontext.append(getOperationSymbol(expression));\n\t\t\tcontext.append(\"(\");\n\t\t\tthis.convertOperand(expression.left(), context);\n\t\t\tthis.convertOperand(expression.right(), context);\n\t\t\tcontext.append(\")\");\n\t\t}\n\t\telse {\n\t\t\tthis.convertOperand(expression.left(), context);\n\t\t\tcontext.append(getOperationSymbol(expression));\n\t\t\tthis.convertOperand(expression.right(), context);\n\t\t}",
                "is_abstract": "",
                "class_name": "ElasticsearchAiSearchFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "doStartValueRange",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "ElasticsearchAiSearchFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "doEndValueRange",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "ElasticsearchAiSearchFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "doAddValueRangeSpitter",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "context.append(\" OR \");",
                "is_abstract": "",
                "class_name": "ElasticsearchAiSearchFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "getOperationSymbol",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return switch (exp.type()) {\n\t\t\tcase AND -> \" AND \";\n\t\t\tcase OR -> \" OR \";\n\t\t\tcase EQ, IN -> \"\";\n\t\t\tcase NE -> \" NOT \";\n\t\t\tcase LT -> \"<\";\n\t\t\tcase LTE -> \"<=\";\n\t\t\tcase GT -> \">\";\n\t\t\tcase GTE -> \">=\";\n\t\t\tcase NIN -> \"NOT \";\n\t\t\tdefault -> throw new RuntimeException(\"Not supported expression type: \" + exp.type());\n\t\t};",
                "is_abstract": "",
                "class_name": "ElasticsearchAiSearchFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "doKey",
                "parameters": [
                    ""
                ],
                "return_type": "key",
                "body": "var identifier = hasOuterQuotes(key.key()) ? removeOuterQuotes(key.key()) : key.key();\n\t\tvar prefixedIdentifier = withMetaPrefix(identifier);\n\t\tcontext.append(prefixedIdentifier.trim()).append(\":\");",
                "is_abstract": "",
                "class_name": "ElasticsearchAiSearchFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "withMetaPrefix",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return \"metadata.\" + identifier;",
                "is_abstract": "",
                "class_name": "ElasticsearchAiSearchFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "doValue",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (filterValue.value() instanceof List list) {\n\t\t\tint c = 0;\n\t\t\tfor (Object v : list) {\n\t\t\t\tcontext.append(v);\n\t\t\t\tif (c++ < list.size() - 1) {\n\t\t\t\t\tthis.doAddValueRangeSpitter(filterValue, context);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthis.doSingleValue(filterValue.value(), context);\n\t\t}",
                "is_abstract": "",
                "class_name": "ElasticsearchAiSearchFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "doSingleValue",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (value instanceof Date date) {\n\t\t\tcontext.append(this.dateFormat.format(date));\n\t\t}\n\t\telse if (value instanceof String text) {\n\t\t\tif (DATE_FORMAT_PATTERN.matcher(text).matches()) {\n\t\t\t\ttry {\n\t\t\t\t\tDate date = this.dateFormat.parse(text);\n\t\t\t\t\tcontext.append(this.dateFormat.format(date));\n\t\t\t\t}\n\t\t\t\tcatch (ParseException e) {\n\t\t\t\t\tthrow new IllegalArgumentException(\"Invalid date type:\" + text, e);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcontext.append(text);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tcontext.append(value);\n\t\t}",
                "is_abstract": "",
                "class_name": "ElasticsearchAiSearchFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "doStartGroup",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "context.append(\"(\");",
                "is_abstract": "",
                "class_name": "ElasticsearchAiSearchFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "doEndGroup",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "context.append(\")\");",
                "is_abstract": "",
                "class_name": "ElasticsearchAiSearchFilterExpressionConverter",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/vector-stores/spring-ai-cassandra/src/test/java/org/springframework/ai/vectorstore/CassandraRichSchemaVectorStoreIT.java",
        "class_names": [
            "TestApplication",
            "CassandraRichSchemaVectorStoreIT"
        ],
        "imports": "import org.springframework.context.ApplicationContext;\nimport static java.lang.String.format;\nimport java.util.List;\nimport java.util.concurrent.Executors;\nimport com.datastax.oss.driver.api.core.servererrors.SyntaxError;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport org.junit.jupiter.api.Assertions;\nimport java.io.IOException;\nimport org.testcontainers.shaded.org.apache.commons.lang3.RandomStringUtils;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.slf4j.Logger;\nimport com.datastax.oss.driver.api.core.servererrors.InvalidQueryException;\nimport java.util.Map;\nimport org.testcontainers.containers.CassandraContainer;\nimport com.datastax.oss.driver.api.core.CqlSession;\nimport java.nio.charset.StandardCharsets;\nimport java.time.Duration;\nimport org.springframework.ai.transformers.TransformersEmbeddingClient;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.context.annotation.Bean;\nimport java.util.concurrent.ThreadLocalRandom;\nimport java.util.Collections;\nimport org.springframework.core.io.DefaultResourceLoader;\nimport org.springframework.ai.embedding.EmbeddingClient;\nimport com.datastax.oss.driver.api.core.CqlSessionBuilder;\nimport org.springframework.boot.SpringBootConfiguration;\nimport org.testcontainers.junit.jupiter.Testcontainers;\nimport java.util.ArrayList;\nimport org.testcontainers.utility.DockerImageName;\nimport org.springframework.ai.document.Document;\nimport org.junit.jupiter.api.Test;\nimport org.testcontainers.junit.jupiter.Container;\nimport org.springframework.ai.vectorstore.CassandraVectorStoreConfig.SchemaColumn;\nimport java.util.Optional;\nimport com.datastax.oss.driver.api.core.type.DataTypes;\nimport java.util.concurrent.CompletableFuture;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.CassandraRichSchemaVectorStoreIT": "org.springframework.ai.vectorstore.CassandraRichSchemaVectorStoreIT",
            "org.springframework.ai.vectorstore.TestApplication": "org.springframework.ai.vectorstore.TestApplication",
            "org.springframework.ai.vectorstore.ensureSchemaCreation": "org.springframework.ai.vectorstore.ensureSchemaCreation",
            "org.springframework.ai.vectorstore.ensureSchemaNoCreation": "org.springframework.ai.vectorstore.ensureSchemaNoCreation",
            "org.springframework.ai.vectorstore.ensureSchemaPartialCreation": "org.springframework.ai.vectorstore.ensureSchemaPartialCreation",
            "org.springframework.ai.vectorstore.addAndSearch": "org.springframework.ai.vectorstore.addAndSearch",
            "org.springframework.ai.vectorstore.addAndSearchPoormansBench": "org.springframework.ai.vectorstore.addAndSearchPoormansBench",
            "org.springframework.ai.vectorstore.searchWithPartitionFilter": "org.springframework.ai.vectorstore.searchWithPartitionFilter",
            "org.springframework.ai.vectorstore.unsearchableFilters": "org.springframework.ai.vectorstore.unsearchableFilters",
            "org.springframework.ai.vectorstore.searchWithFilters": "org.springframework.ai.vectorstore.searchWithFilters",
            "org.springframework.ai.vectorstore.searchWithFilterOnPrimaryKeys": "org.springframework.ai.vectorstore.searchWithFilterOnPrimaryKeys",
            "org.springframework.ai.vectorstore.documentUpdat": "org.springframework.ai.vectorstore.documentUpdat",
            "org.springframework.ai.vectorstore.searchWithThreshold": "org.springframework.ai.vectorstore.searchWithThreshold",
            "org.springframework.ai.vectorstore.embeddingClient": "org.springframework.ai.vectorstore.embeddingClient",
            "org.springframework.ai.vectorstore.cqlSession": "org.springframework.ai.vectorstore.cqlSession",
            "org.springframework.ai.vectorstore.createStor": "org.springframework.ai.vectorstore.createStor",
            "org.springframework.ai.vectorstore.storeBuilder": "org.springframework.ai.vectorstore.storeBuilder",
            "org.springframework.ai.vectorstore.executeCqlFil": "org.springframework.ai.vectorstore.executeCqlFil",
            "org.springframework.ai.vectorstore.DEFAULT_IMAGE_NAME": "org.springframework.ai.vectorstore.DEFAULT_IMAGE_NAME",
            "org.springframework.ai.vectorstore.logger": "org.springframework.ai.vectorstore.logger",
            "org.springframework.ai.vectorstore.documents": "org.springframework.ai.vectorstore.documents",
            "org.springframework.ai.vectorstore.URANUS_ORBIT_QUERY": "org.springframework.ai.vectorstore.URANUS_ORBIT_QUERY",
            "org.springframework.ai.vectorstore.stati": "org.springframework.ai.vectorstore.stati",
            "org.springframework.ai.vectorstore.contextRunner": "org.springframework.ai.vectorstore.contextRunner"
        },
        "package": "package org.springframework.ai.vectorstore;",
        "property_declarations": [
            "@Container\n\tstatic CassandraContainer cassandraContainer = new CassandraContainer(DEFAULT_IMAGE_NAME.withTag(\"5.0\"));",
            "private static final List<Document> documents = List.of(\n\n\t\t\tnew Document(\"Neptune\u00a7\u00b60\",\n\t\t\t\t\t\"Neptune\\\\n\\\\nThis article contains special characters. Without proper rendering support, you may see question marks, boxes, or other symbols. Neptune is the eighth and farthest planet from the Sun in the Solar System. It is an ice giant. It is the fourth-largest planet in the system. Neptunes mass is 17 times Earths mass and a little bit more than Uranus mass. Neptune is denser and smaller than Uranus. Because of its greater mass, Neptunes gravity makes its atmosphere smaller and denser. It was named after the Roman god of the sea, Neptune. Neptunes astronomical symbol is \u2646, the trident of the god Neptune. Neptunes atmosphere is mostly hydrogen and helium. It also contains small amounts of methane which makes the planet appear blue. Neptunes blue color is similar, but slightly darker, than the color of Uranus. Neptune also has the strongest winds of any planet in the Solar System, as high as 2,100\\\\xa0km/h or 1,300\\\\xa0mph. Urbain Le Verrier and John Couch Adams were the astronomers who discovered Neptune. Neptune was not\",\n\t\t\t\t\tMap.of(\"revision\", 9385813, \"id\", 558)),\n\n\t\t\tnew Document(\"Neptune\u00a7\u00b61\",\n\t\t\t\t\t\"Neptune\\\\n\\\\nbut slightly darker, than the color of Uranus. Neptune also has the strongest winds of any planet in the Solar System, as high as 2,100\\\\xa0km/h or 1,300\\\\xa0mph. Urbain Le Verrier and John Couch Adams were the astronomers who discovered Neptune. Neptune was not discovered using a telescope. It was the first planet to be discovered using mathematics. In 1821, astronomers saw that Uranus orbit was different from what they expected. Another nearby planets mass was changing Uranus orbit. They found Neptune was the cause. Voyager 2 visited Neptune on 25 August 1989. It was the only spacecraft to visit the planet. Neptune used to have a huge storm known as the \\\"Great Dark Spot\\\". Voyager 2 discovered the spot in 1989. The dark spot was not seen in 1994, but new spots were found since then. It is not known why the dark spot disappeared. Visits by other space probes have been planned. Neptune has five rings surrounding it, however, it is hard too see from Earth due to the distance from Neptune. Galileo Galilei was the first\",\n\t\t\t\t\tMap.of(\"revision\", 9385813, \"id\", 558)),\n\n\t\t\tnew Document(\"Neptune\u00a7\u00b62\",\n\t\t\t\t\t\"Neptune\\\\n\\\\nfound since then. It is not known why the dark spot disappeared. Visits by other space probes have been planned. Neptune has five rings surrounding it, however, it is hard too see from Earth due to the distance from Neptune. Galileo Galilei was the first person who saw Neptune. He saw it on 28 December 1612 and 27 January 1613. His drawings showed points near Jupiter where Neptune is placed. But Galileo was not credited for the discovery. He thought Neptune was a \\\"fixed star\\\" instead of a planet. Because Neptune slowly moved across the sky, Galileos small telescope was not strong enough to see that Neptune was a planet. In 1821, Alexis Bouvard published the astronomical tables of the orbit of Uranus. Later observations showed that Uranus was moving in an irregular way in its orbit. Some astronomers thought this was caused by another large body. In 1843, John Couch Adams calculated the orbit of an eighth planet that could possibly affect the orbit of Uranus. He sent his calculations to Sir George Airy, the\",\n\t\t\t\t\tMap.of(\"revision\", 9385813, \"id\", 558)));",
            "private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t.withUserConfiguration(TestApplication.class);",
            "private static final Logger logger = LoggerFactory.getLogger(CassandraRichSchemaVectorStoreIT.class);",
            "static final DockerImageName DEFAULT_IMAGE_NAME = DockerImageName.parse(\"cassandra\");",
            "private static final String URANUS_ORBIT_QUERY = \"It was the first planet to be discovered using mathematics. In 1821, astronomers saw that Uranus orbit was different from what they expected. Another nearby planets mass was changing Uranus orbit.\";"
        ],
        "functions": [
            {
                "name": "ensureSchemaCreation",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.contextRunner.run(context -> {\n\t\t\ttry (CassandraVectorStore store = createStore(context, false).store()) {\n\t\t\t\tAssertions.assertNotNull(store);\n\t\t\t\tstore.checkSchemaValid();\n\t\t\t\tstore.similaritySearch(SearchRequest.query(\"1843\").withTopK(1));\n\t\t\t}\n\t\t});",
                "is_abstract": "",
                "class_name": "CassandraRichSchemaVectorStoreIT",
                "annotations": []
            },
            {
                "name": "ensureSchemaNoCreation",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.contextRunner.run(context -> {\n\t\t\texecuteCqlFile(context, \"test_wiki_full_schema.cql\");\n\t\t\tvar wrapper = createStore(context, List.of(), true, false);\n\t\t\ttry {\n\t\t\t\tAssertions.assertNotNull(wrapper.store());\n\t\t\t\twrapper.store().checkSchemaValid();\n\n\t\t\t\twrapper.store().similaritySearch(SearchRequest.query(\"1843\").withTopK(1));\n\n\t\t\t\twrapper.conf().dropKeyspace();\n\t\t\t\texecuteCqlFile(context, \"test_wiki_partial_3_schema.cql\");\n\n\t\t\t\t// IllegalStateException: column all_minilm_l6_v2_embedding does not exist\n\t\t\t\tIllegalStateException ise = Assertions.assertThrows(IllegalStateException.class, () -> {\n\t\t\t\t\tcreateStore(context, List.of(), true, false);\n\t\t\t\t});\n\n\t\t\t\tAssertions.assertEquals(\"column all_minilm_l6_v2_embedding does not exist\", ise.getMessage());\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\twrapper.conf().dropKeyspace();\n\t\t\t\twrapper.store().close();\n\t\t\t}\n\t\t});",
                "is_abstract": "",
                "class_name": "CassandraRichSchemaVectorStoreIT",
                "annotations": []
            },
            {
                "name": "ensureSchemaPartialCreation",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.contextRunner.run(context -> {\n\t\t\tfor (int i = 0; i < 4; ++i) {\n\t\t\t\texecuteCqlFile(context, format(\"test_wiki_partial_%d_schema.cql\", i));\n\t\t\t\tvar wrapper = createStore(context, List.of(), false, false);\n\t\t\t\ttry {\n\t\t\t\t\tAssertions.assertNotNull(wrapper.store());\n\t\t\t\t\twrapper.store().checkSchemaValid();\n\n\t\t\t\t\twrapper.store().similaritySearch(SearchRequest.query(\"1843\").withTopK(1));\n\t\t\t\t\twrapper.conf().dropKeyspace();\n\t\t\t\t}\n\t\t\t\tfinally {\n\t\t\t\t\twrapper.store().close();\n\t\t\t\t}\n\t\t\t}\n\t\t});",
                "is_abstract": "",
                "class_name": "CassandraRichSchemaVectorStoreIT",
                "annotations": []
            },
            {
                "name": "addAndSearch",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\t\t\ttry (CassandraVectorStore store = createStore(context, false).store()) {\n\t\t\t\tstore.add(documents);\n\n\t\t\t\tList<Document> results = store\n\t\t\t\t\t.similaritySearch(SearchRequest.query(\"Neptunes gravity makes its atmosphere\").withTopK(1));\n\n\t\t\t\tassertThat(results).hasSize(1);\n\t\t\t\tDocument resultDoc = results.get(0);\n\t\t\t\tassertThat(resultDoc.getId()).isEqualTo(documents.get(0).getId());\n\n\t\t\t\tassertThat(resultDoc.getContent()).contains(\"Neptunes gravity makes its atmosphere\");\n\n\t\t\t\tassertThat(resultDoc.getMetadata()).hasSize(3);\n\n\t\t\t\tassertThat(resultDoc.getMetadata()).containsKeys(\"id\", \"revision\",\n\t\t\t\t\t\tCassandraVectorStore.SIMILARITY_FIELD_NAME);\n\n\t\t\t\t// Remove all documents from the createStore\n\t\t\t\tstore.delete(documents.stream().map(doc -> doc.getId()).toList());\n\n\t\t\t\tresults = store.similaritySearch(SearchRequest.query(\"Spring\").withTopK(1));\n\t\t\t\tassertThat(results).isEmpty();\n\t\t\t}\n\t\t});",
                "is_abstract": "",
                "class_name": "CassandraRichSchemaVectorStoreIT",
                "annotations": []
            },
            {
                "name": "addAndSearchPoormansBench",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// todo \u2013\u00a0replace with JMH (parameters: nThreads, rounds, runs, docsPerAdd)\n\t\tint nThreads = CassandraVectorStoreConfig.DEFAULT_ADD_CONCURRENCY;\n\t\tint runs = 10; // 100;\n\t\tint docsPerAdd = 12; // 128;\n\t\tint rounds = 3;\n\n\t\tcontextRunner.run(context -> {\n\n\t\t\ttry (CassandraVectorStore store = new CassandraVectorStore(\n\t\t\t\t\tstoreBuilder(context, List.of()).withFixedThreadPoolExecutorSize(nThreads).build(),\n\t\t\t\t\tcontext.getBean(EmbeddingClient.class))) {\n\n\t\t\t\tvar executor = Executors.newFixedThreadPool((int) (nThreads * 1.2));\n\t\t\t\tfor (int k = 0; k < rounds; ++k) {\n\t\t\t\t\tlong start = System.nanoTime();\n\t\t\t\t\tvar futures = new CompletableFuture[runs];\n\t\t\t\t\tfor (int j = 0; j < runs; ++j) {\n\t\t\t\t\t\tfutures[j] = CompletableFuture.runAsync(() -> {\n\t\t\t\t\t\t\tList<Document> documents = new ArrayList<>();\n\t\t\t\t\t\t\tfor (int i = docsPerAdd; i >= 0; --i) {\n\n\t\t\t\t\t\t\t\tdocuments.add(new Document(\n\t\t\t\t\t\t\t\t\t\tRandomStringUtils.randomAlphanumeric(4) + \"\u00a7\u00b6\"\n\t\t\t\t\t\t\t\t\t\t\t\t+ ThreadLocalRandom.current().nextInt(1, 10),\n\t\t\t\t\t\t\t\t\t\tRandomStringUtils.randomAlphanumeric(1024), Map.of(\"revision\",\n\t\t\t\t\t\t\t\t\t\t\t\tThreadLocalRandom.current().nextInt(1, 100000), \"id\", 1000)));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstore.add(documents);\n\n\t\t\t\t\t\t\tvar results = store.similaritySearch(\n\t\t\t\t\t\t\t\t\tSearchRequest.query(RandomStringUtils.randomAlphanumeric(20)).withTopK(10));\n\n\t\t\t\t\t\t\tassertThat(results).hasSize(10);\n\t\t\t\t\t\t}, executor);\n\t\t\t\t\t}\n\t\t\t\t\tCompletableFuture.allOf(futures).join();\n\t\t\t\t\tlong time = System.nanoTime() - start;\n\t\t\t\t\tlogger.info(\"add+search took an average of {} ms\", Duration.ofNanos(time / runs).toMillis());\n\t\t\t\t}\n\t\t\t}\n\t\t});",
                "is_abstract": "",
                "class_name": "CassandraRichSchemaVectorStoreIT",
                "annotations": []
            },
            {
                "name": "searchWithPartitionFilter",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\t\t\ttry (CassandraVectorStore store = createStore(context, false).store()) {\n\t\t\t\tstore.add(documents);\n\n\t\t\t\tList<Document> results = store.similaritySearch(SearchRequest.query(\"Great Dark Spot\").withTopK(5));\n\t\t\t\tassertThat(results).hasSize(3);\n\n\t\t\t\tresults = store.similaritySearch(SearchRequest.query(URANUS_ORBIT_QUERY)\n\t\t\t\t\t.withTopK(5)\n\t\t\t\t\t.withSimilarityThresholdAll()\n\t\t\t\t\t.withFilterExpression(\"wiki == 'simplewiki' && language == 'en' && title == 'Neptune'\"));\n\n\t\t\t\tassertThat(results).hasSize(3);\n\t\t\t\tassertThat(results.get(0).getId()).isEqualTo(documents.get(1).getId());\n\n\t\t\t\t// BUG CASSANDRA-19544\n\t\t\t\t// should be able to restrict on clustering keys (when filtering isn't\n\t\t\t\t// required)\n\t\t\t\t//\n\t\t\t\t// results = store.similaritySearch(SearchRequest.query(\"Great Dark Spot\")\n\t\t\t\t// .withTopK(5)\n\t\t\t\t// .withSimilarityThresholdAll()\n\t\t\t\t// .withFilterExpression(\n\t\t\t\t// \"wiki == 'simplewiki' && language == 'en' && title == 'Neptune' &&\n\t\t\t\t// \\\"chunk_no\\\" == 0\"));\n\t\t\t\t//\n\t\t\t\t// assertThat(results).hasSize(1);\n\t\t\t\t// assertThat(results.get(0).getId()).isEqualTo(documents.get(0).getId());\n\n\t\t\t\tresults = store.similaritySearch(SearchRequest.query(\"Great Dark Spot\")\n\t\t\t\t\t.withTopK(5)\n\t\t\t\t\t.withSimilarityThresholdAll()\n\t\t\t\t\t.withFilterExpression(\n\t\t\t\t\t\t\t\"wiki == 'simplewiki' && language == 'en' && title == 'Neptune' && id == 558\"));\n\n\t\t\t\tassertThat(results).hasSize(3);\n\n\t\t\t\t// cassandra server will throw an error\n\t\t\t\tAssertions.assertThrows(SyntaxError.class, () -> {\n\t\t\t\t\tstore.similaritySearch(SearchRequest.query(\"Great Dark Spot\")\n\t\t\t\t\t\t.withTopK(5)\n\t\t\t\t\t\t.withSimilarityThresholdAll()\n\t\t\t\t\t\t.withFilterExpression(\n\t\t\t\t\t\t\t\t\"NOT(wiki == 'simplewiki' && language == 'en' && title == 'Neptune' && id == 1)\"));\n\t\t\t\t});\n\t\t\t}\n\t\t});",
                "is_abstract": "",
                "class_name": "CassandraRichSchemaVectorStoreIT",
                "annotations": []
            },
            {
                "name": "unsearchableFilters",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\t\t\ttry (CassandraVectorStore store = createStore(context, false).store()) {\n\t\t\t\tstore.add(documents);\n\n\t\t\t\tList<Document> results = store.similaritySearch(SearchRequest.query(\"Great Dark Spot\").withTopK(5));\n\t\t\t\tassertThat(results).hasSize(3);\n\n\t\t\t\tAssertions.assertThrows(InvalidQueryException.class, () -> {\n\t\t\t\t\tstore.similaritySearch(SearchRequest.query(\"The World\")\n\t\t\t\t\t\t.withTopK(5)\n\t\t\t\t\t\t.withSimilarityThresholdAll()\n\t\t\t\t\t\t.withFilterExpression(\"revision == 9385813\"));\n\t\t\t\t});\n\t\t\t}\n\t\t});",
                "is_abstract": "",
                "class_name": "CassandraRichSchemaVectorStoreIT",
                "annotations": []
            },
            {
                "name": "searchWithFilters",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\t\t\ttry (CassandraVectorStore store = createStore(context, false).store()) {\n\t\t\t\tstore.add(documents);\n\n\t\t\t\tList<Document> results = store.similaritySearch(SearchRequest.query(URANUS_ORBIT_QUERY).withTopK(5));\n\t\t\t\tassertThat(results).hasSize(3);\n\n\t\t\t\tresults = store.similaritySearch(SearchRequest.query(URANUS_ORBIT_QUERY)\n\t\t\t\t\t.withTopK(5)\n\t\t\t\t\t.withSimilarityThresholdAll()\n\t\t\t\t\t.withFilterExpression(\"id == 558\"));\n\n\t\t\t\tassertThat(results).hasSize(3);\n\t\t\t\tassertThat(results.get(0).getId()).isEqualTo(documents.get(1).getId());\n\n\t\t\t\tresults = store.similaritySearch(SearchRequest.query(URANUS_ORBIT_QUERY)\n\t\t\t\t\t.withTopK(5)\n\t\t\t\t\t.withSimilarityThresholdAll()\n\t\t\t\t\t.withFilterExpression(\"id > 557\"));\n\n\t\t\t\tassertThat(results).hasSize(3);\n\t\t\t\tassertThat(results.get(0).getId()).isEqualTo(documents.get(1).getId());\n\n\t\t\t\tresults = store.similaritySearch(SearchRequest.query(URANUS_ORBIT_QUERY)\n\t\t\t\t\t.withTopK(5)\n\t\t\t\t\t.withSimilarityThresholdAll()\n\t\t\t\t\t.withFilterExpression(\"id >= 558\"));\n\n\t\t\t\tassertThat(results).hasSize(3);\n\t\t\t\tassertThat(results.get(0).getId()).isEqualTo(documents.get(1).getId());\n\n\t\t\t\t// cassandra java-driver will throw an error,\n\t\t\t\t// as chunk_no is not searchable (i.e. no SAI index on it)\n\t\t\t\t// note, it is possible to have SAI indexes on primary key columns to\n\t\t\t\t// achieve\n\t\t\t\t// e.g. searchWithFilterOnPrimaryKeys()\n\t\t\t\tAssertions.assertThrows(InvalidQueryException.class, () -> {\n\t\t\t\t\tstore.similaritySearch(SearchRequest.query(URANUS_ORBIT_QUERY)\n\t\t\t\t\t\t.withTopK(5)\n\t\t\t\t\t\t.withSimilarityThresholdAll()\n\t\t\t\t\t\t.withFilterExpression(\"id > 557 && \\\"chunk_no\\\" == 1\"));\n\t\t\t\t});\n\n\t\t\t\t// cassandra server will throw an error,\n\t\t\t\t// as revision is not searchable (i.e. no SAI index on it)\n\t\t\t\tAssertions.assertThrows(SyntaxError.class, () -> {\n\t\t\t\t\tstore.similaritySearch(SearchRequest.query(\"Great Dark Spot\")\n\t\t\t\t\t\t.withTopK(5)\n\t\t\t\t\t\t.withSimilarityThresholdAll()\n\t\t\t\t\t\t.withFilterExpression(\"id == 558 || revision == 2020\"));\n\t\t\t\t});\n\n\t\t\t\t// cassandra java-driver will throw an error\n\t\t\t\tAssertions.assertThrows(InvalidQueryException.class, () -> {\n\t\t\t\t\tstore.similaritySearch(SearchRequest.query(\"Great Dark Spot\")\n\t\t\t\t\t\t.withTopK(5)\n\t\t\t\t\t\t.withSimilarityThresholdAll()\n\t\t\t\t\t\t.withFilterExpression(\"NOT(id == 557 || revision == 2020)\"));\n\t\t\t\t});\n\t\t\t}\n\t\t});",
                "is_abstract": "",
                "class_name": "CassandraRichSchemaVectorStoreIT",
                "annotations": []
            },
            {
                "name": "searchWithFilterOnPrimaryKeys",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\n\t\t\tList<SchemaColumn> overrides = List.of(\n\t\t\t\t\tnew SchemaColumn(\"title\", DataTypes.TEXT, CassandraVectorStoreConfig.SchemaColumnTags.INDEXED),\n\t\t\t\t\tnew SchemaColumn(\"chunk_no\", DataTypes.INT, CassandraVectorStoreConfig.SchemaColumnTags.INDEXED));\n\n\t\t\ttry (CassandraVectorStore store = createStore(context, overrides, false, true).store()) {\n\n\t\t\t\tstore.add(documents);\n\n\t\t\t\tList<Document> results = store.similaritySearch(SearchRequest.query(URANUS_ORBIT_QUERY).withTopK(5));\n\t\t\t\tassertThat(results).hasSize(3);\n\n\t\t\t\tstore.similaritySearch(SearchRequest.query(URANUS_ORBIT_QUERY)\n\t\t\t\t\t.withTopK(5)\n\t\t\t\t\t.withSimilarityThresholdAll()\n\t\t\t\t\t.withFilterExpression(\"id > 557 && \\\"chunk_no\\\" == 1\"));\n\n\t\t\t\tassertThat(results).hasSize(3);\n\t\t\t\tassertThat(results.get(0).getId()).isEqualTo(documents.get(1).getId());\n\n\t\t\t\t// Cassandra java-driver bug, not detecting index on title exists\n\t\t\t\t//\n\t\t\t\t// store.similaritySearch(SearchRequest.query(URANUS_ORBIT_QUERY)\n\t\t\t\t// .withTopK(5)\n\t\t\t\t// .withSimilarityThresholdAll()\n\t\t\t\t// .withFilterExpression(\"id > 557 && title == 'Neptune'\"));\n\t\t\t\t//\n\t\t\t\t// assertThat(results).hasSize(3);\n\t\t\t\t// assertThat(results.get(0).getId()).isEqualTo(documents.get(1).getId());\n\t\t\t}\n\t\t});",
                "is_abstract": "",
                "class_name": "CassandraRichSchemaVectorStoreIT",
                "annotations": []
            },
            {
                "name": "documentUpdate",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\t\t\ttry (CassandraVectorStore store = createStore(context, false).store()) {\n\t\t\t\tstore.add(documents);\n\n\t\t\t\tList<Document> results = store.similaritySearch(SearchRequest.query(URANUS_ORBIT_QUERY).withTopK(1));\n\n\t\t\t\tassertThat(results).hasSize(1);\n\t\t\t\tDocument resultDoc = results.get(0);\n\t\t\t\tassertThat(resultDoc.getContent()).contains(URANUS_ORBIT_QUERY);\n\t\t\t\tassertThat(resultDoc.getMetadata()).containsKey(\"revision\");\n\n\t\t\t\tString newContent = \"The World is Big and Salvation Lurks Around the Corner\";\n\n\t\t\t\tDocument sameIdDocument = new Document(documents.get(1).getId(), newContent, Collections.emptyMap());\n\n\t\t\t\t// BUG in Cassandra 5.0-beta1\n\t\t\t\t// uncomment when 5.0-beta2 is release and cassandraContainer pulls it\n\t\t\t\t//\n\t\t\t\t// store.add(List.of(sameIdDocument));\n\t\t\t\t//\n\t\t\t\t// results =\n\t\t\t\t// store.similaritySearch(SearchRequest.query(newContent).withTopK(1));\n\t\t\t\t//\n\t\t\t\t// assertThat(results).hasSize(1);\n\t\t\t\t// resultDoc = results.get(0);\n\t\t\t\t// assertThat(resultDoc.getId()).isEqualTo(sameIdDocument.getId());\n\t\t\t\t// assertThat(resultDoc.getContent()).contains(newContent);\n\t\t\t\t//\n\t\t\t\t// // the empty metadata map will not overwrite the row's existing \"id\"\n\t\t\t\t// and\n\t\t\t\t// // \"revision\" values\n\t\t\t\t// assertThat(resultDoc.getMetadata()).containsKeys(\"id\", \"revision\",\n\t\t\t\t// CassandraVectorStore.SIMILARITY_FIELD_NAME);\n\n\t\t\t\tstore.delete(List.of(sameIdDocument.getId()));\n\n\t\t\t\tresults = store.similaritySearch(SearchRequest.query(newContent).withTopK(1));\n\n\t\t\t\tassertThat(results).hasSize(1);\n\t\t\t\tresultDoc = results.get(0);\n\t\t\t\tassertThat(resultDoc.getId()).isNotEqualTo(sameIdDocument.getId());\n\t\t\t\tassertThat(resultDoc.getContent()).doesNotContain(newContent);\n\n\t\t\t\tassertThat(resultDoc.getMetadata()).containsKeys(\"id\", \"revision\",\n\t\t\t\t\t\tCassandraVectorStore.SIMILARITY_FIELD_NAME);\n\t\t\t}\n\t\t});",
                "is_abstract": "",
                "class_name": "CassandraRichSchemaVectorStoreIT",
                "annotations": []
            },
            {
                "name": "searchWithThreshold",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\t\t\ttry (CassandraVectorStore store = createStore(context, false).store()) {\n\t\t\t\tstore.add(documents);\n\n\t\t\t\tList<Document> fullResult = store\n\t\t\t\t\t.similaritySearch(SearchRequest.query(URANUS_ORBIT_QUERY).withTopK(5).withSimilarityThresholdAll());\n\n\t\t\t\tList<Float> distances = fullResult.stream()\n\t\t\t\t\t.map(doc -> (Float) doc.getMetadata().get(CassandraVectorStore.SIMILARITY_FIELD_NAME))\n\t\t\t\t\t.toList();\n\n\t\t\t\tassertThat(distances).hasSize(3);\n\n\t\t\t\tfloat threshold = (distances.get(0) + distances.get(1)) / 2;\n\n\t\t\t\tList<Document> results = store.similaritySearch(\n\t\t\t\t\t\tSearchRequest.query(URANUS_ORBIT_QUERY).withTopK(5).withSimilarityThreshold(threshold));\n\n\t\t\t\tassertThat(results).hasSize(1);\n\t\t\t\tDocument resultDoc = results.get(0);\n\t\t\t\tassertThat(resultDoc.getId()).isEqualTo(documents.get(1).getId());\n\n\t\t\t\tassertThat(resultDoc.getContent()).contains(URANUS_ORBIT_QUERY);\n\n\t\t\t\tassertThat(resultDoc.getMetadata()).containsKeys(\"id\", \"revision\",\n\t\t\t\t\t\tCassandraVectorStore.SIMILARITY_FIELD_NAME);\n\t\t\t}\n\t\t});",
                "is_abstract": "",
                "class_name": "CassandraRichSchemaVectorStoreIT",
                "annotations": [
                    "@EnableAutoConfiguration(exclude = { DataSourceAutoConfiguration.class })"
                ]
            },
            {
                "name": "embeddingClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// default is ONNX all-MiniLM-L6-v2\n\t\t\treturn new TransformersEmbeddingClient();",
                "is_abstract": "",
                "class_name": "CassandraRichSchemaVectorStoreIT TestApplication",
                "annotations": []
            },
            {
                "name": "cqlSession",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new CqlSessionBuilder()\n\t\t\t\t// comment next two lines out to connect to a local C* cluster\n\t\t\t\t.addContactPoint(cassandraContainer.getContactPoint())\n\t\t\t\t.withLocalDatacenter(cassandraContainer.getLocalDatacenter())\n\t\t\t\t.build();",
                "is_abstract": "",
                "class_name": "CassandraRichSchemaVectorStoreIT TestApplication",
                "annotations": []
            },
            {
                "name": "createStore",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return createStore(context, List.of(), disallowSchemaCreation, true);",
                "is_abstract": "",
                "class_name": "CassandraRichSchemaVectorStoreIT TestApplication",
                "annotations": []
            },
            {
                "name": "storeBuilder",
                "parameters": [
                    ""
                ],
                "return_type": "0",
                "body": "Optional<SchemaColumn> wikiOverride = columnOverrides.stream()\n\t\t\t.filter((f) -> \"wiki\".equals(f.name()))\n\t\t\t.findFirst();\n\n\t\tOptional<SchemaColumn> langOverride = columnOverrides.stream()\n\t\t\t.filter((f) -> \"language\".equals(f.name()))\n\t\t\t.findFirst();\n\n\t\tOptional<SchemaColumn> titleOverride = columnOverrides.stream()\n\t\t\t.filter((f) -> \"title\".equals(f.name()))\n\t\t\t.findFirst();\n\n\t\tOptional<SchemaColumn> chunkNoOverride = columnOverrides.stream()\n\t\t\t.filter((f) -> \"chunk_no\".equals(f.name()))\n\t\t\t.findFirst();\n\n\t\tSchemaColumn wikiSC = wikiOverride.orElse(new SchemaColumn(\"wiki\", DataTypes.TEXT));\n\t\tSchemaColumn langSC = langOverride.orElse(new SchemaColumn(\"language\", DataTypes.TEXT));\n\t\tSchemaColumn titleSC = titleOverride.orElse(new SchemaColumn(\"title\", DataTypes.TEXT));\n\t\tSchemaColumn chunkNoSC = chunkNoOverride.orElse(new SchemaColumn(\"chunk_no\", DataTypes.INT));\n\n\t\tList<SchemaColumn> partitionKeys = List.of(wikiSC, langSC, titleSC);\n\t\tList<SchemaColumn> clusteringKeys = List.of(chunkNoSC);\n\n\t\tCassandraVectorStoreConfig.Builder builder = CassandraVectorStoreConfig.builder()\n\t\t\t.withCqlSession(context.getBean(CqlSession.class))\n\t\t\t.withKeyspaceName(\"test_wikidata\")\n\t\t\t.withTableName(\"articles\")\n\t\t\t.withPartitionKeys(partitionKeys)\n\t\t\t.withClusteringKeys(clusteringKeys)\n\t\t\t.withContentColumnName(\"body\")\n\t\t\t.withEmbeddingColumnName(\"all_minilm_l6_v2_embedding\")\n\t\t\t.withIndexName(\"all_minilm_l6_v2_ann\")\n\n\t\t\t.addMetadataColumns(new SchemaColumn(\"revision\", DataTypes.INT),\n\t\t\t\t\tnew SchemaColumn(\"id\", DataTypes.INT, CassandraVectorStoreConfig.SchemaColumnTags.INDEXED))\n\n\t\t\t// this store uses '\u00a7\u00b6' as a deliminator in the document id between db columns\n\t\t\t// 'title' and 'chunk_no'\n\t\t\t.withPrimaryKeyTranslator((List<Object> primaryKeys) -> {\n\t\t\t\tif (primaryKeys.isEmpty()) {\n\t\t\t\t\treturn \"test\u00a7\u00b60\";\n\t\t\t\t}\n\t\t\t\treturn format(\"%s\u00a7\u00b6%s\", primaryKeys.get(2), primaryKeys.get(3));\n\t\t\t})\n\t\t\t.withDocumentIdTranslator((id) -> {\n\t\t\t\tString[] parts = id.split(\"\u00a7\u00b6\");\n\t\t\t\tString title = parts[0];\n\t\t\t\tint chunk_no = 0 < parts.length ? Integer.parseInt(parts[1]) : 0;\n\t\t\t\treturn List.of(\"simplewiki\", \"en\", title, chunk_no);\n\t\t\t});\n\n\t\treturn builder;",
                "is_abstract": "",
                "class_name": "CassandraRichSchemaVectorStoreIT TestApplication",
                "annotations": []
            },
            {
                "name": "executeCqlFile",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "logger.info(\"executing {}\", filename);\n\n\t\tCqlSession session = context.getBean(CqlSession.class);\n\n\t\tString[] cql = new DefaultResourceLoader().getResource(filename)\n\t\t\t.getContentAsString(StandardCharsets.UTF_8)\n\t\t\t.trim()\n\t\t\t.split(\";\");\n\n\t\tfor (var c : cql) {\n\t\t\tsession.execute(c.trim());\n\t\t}",
                "is_abstract": "",
                "class_name": "CassandraRichSchemaVectorStoreIT TestApplication",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/vector-stores/spring-ai-cassandra/src/test/java/org/springframework/ai/vectorstore/CassandraVectorStoreIT.java",
        "class_names": [
            "TestApplication",
            "CassandraVectorStoreIT"
        ],
        "imports": "import org.springframework.context.ApplicationContext;\nimport static java.lang.String.format;\nimport java.util.List;\nimport org.springframework.ai.vectorstore.CassandraVectorStoreConfig.SchemaColumnTags;\nimport com.datastax.oss.driver.api.core.servererrors.SyntaxError;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport org.junit.jupiter.api.Assertions;\nimport java.io.IOException;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.testcontainers.containers.CassandraContainer;\nimport com.datastax.oss.driver.api.core.servererrors.InvalidQueryException;\nimport java.util.Map;\nimport com.datastax.oss.driver.api.core.CqlSession;\nimport java.nio.charset.StandardCharsets;\nimport org.springframework.ai.transformers.TransformersEmbeddingClient;\nimport org.springframework.context.annotation.Bean;\nimport java.util.Collections;\nimport org.springframework.core.io.DefaultResourceLoader;\nimport org.springframework.ai.embedding.EmbeddingClient;\nimport com.datastax.oss.driver.api.core.CqlSessionBuilder;\nimport org.springframework.boot.SpringBootConfiguration;\nimport org.testcontainers.junit.jupiter.Testcontainers;\nimport org.testcontainers.utility.DockerImageName;\nimport static java.util.Collections.emptyMap;\nimport org.springframework.ai.document.Document;\nimport org.junit.jupiter.api.Test;\nimport org.testcontainers.junit.jupiter.Container;\nimport org.springframework.ai.vectorstore.CassandraVectorStoreConfig.SchemaColumn;\nimport java.util.UUID;\nimport com.datastax.oss.driver.api.core.type.DataTypes;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.CassandraVectorStoreIT": "org.springframework.ai.vectorstore.CassandraVectorStoreIT",
            "org.springframework.ai.vectorstore.TestApplication": "org.springframework.ai.vectorstore.TestApplication",
            "org.springframework.ai.vectorstore.getText": "org.springframework.ai.vectorstore.getText",
            "org.springframework.ai.vectorstore.ensureBeanGetsCreated": "org.springframework.ai.vectorstore.ensureBeanGetsCreated",
            "org.springframework.ai.vectorstore.addAndSearch": "org.springframework.ai.vectorstore.addAndSearch",
            "org.springframework.ai.vectorstore.searchWithPartitionFilter": "org.springframework.ai.vectorstore.searchWithPartitionFilter",
            "org.springframework.ai.vectorstore.unsearchableFilters": "org.springframework.ai.vectorstore.unsearchableFilters",
            "org.springframework.ai.vectorstore.searchWithFilters": "org.springframework.ai.vectorstore.searchWithFilters",
            "org.springframework.ai.vectorstore.documentUpdat": "org.springframework.ai.vectorstore.documentUpdat",
            "org.springframework.ai.vectorstore.searchWithThreshold": "org.springframework.ai.vectorstore.searchWithThreshold",
            "org.springframework.ai.vectorstore.stor": "org.springframework.ai.vectorstore.stor",
            "org.springframework.ai.vectorstore.embeddingClient": "org.springframework.ai.vectorstore.embeddingClient",
            "org.springframework.ai.vectorstore.cqlSession": "org.springframework.ai.vectorstore.cqlSession",
            "org.springframework.ai.vectorstore.storeBuilder": "org.springframework.ai.vectorstore.storeBuilder",
            "org.springframework.ai.vectorstore.createTestStor": "org.springframework.ai.vectorstore.createTestStor",
            "org.springframework.ai.vectorstore.DEFAULT_IMAGE_NAME": "org.springframework.ai.vectorstore.DEFAULT_IMAGE_NAME",
            "org.springframework.ai.vectorstore.stati": "org.springframework.ai.vectorstore.stati",
            "org.springframework.ai.vectorstore.contextRunner": "org.springframework.ai.vectorstore.contextRunner",
            "org.springframework.ai.vectorstore.documents": "org.springframework.ai.vectorstore.documents"
        },
        "package": "package org.springframework.ai.vectorstore;",
        "property_declarations": [
            "static final DockerImageName DEFAULT_IMAGE_NAME = DockerImageName.parse(\"cassandra\");",
            "private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t.withUserConfiguration(TestApplication.class);",
            "List<Document> documents = List.of(\n\t\t\tnew Document(\"1\", getText(\"classpath:/test/data/spring.ai.txt\"), Map.of(\"meta1\", \"meta1\")),\n\t\t\tnew Document(\"2\", getText(\"classpath:/test/data/time.shelter.txt\"), Map.of()),\n\t\t\tnew Document(\"3\", getText(\"classpath:/test/data/great.depression.txt\"),\n\t\t\t\t\tMap.of(\"meta2\", \"meta2\", \"something_extra\", \"blue\")));",
            "@Container\n\tstatic CassandraContainer cassandraContainer = new CassandraContainer(DEFAULT_IMAGE_NAME.withTag(\"5.0\"));"
        ],
        "functions": [
            {
                "name": "getText",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var resource = new DefaultResourceLoader().getResource(uri);\n\t\ttry {\n\t\t\treturn resource.getContentAsString(StandardCharsets.UTF_8);\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}",
                "is_abstract": "",
                "class_name": "CassandraVectorStoreIT",
                "annotations": []
            },
            {
                "name": "ensureBeanGetsCreated",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.contextRunner.run(context -> {\n\t\t\ttry (CassandraVectorStore store = context.getBean(CassandraVectorStore.class)) {\n\t\t\t\tAssertions.assertNotNull(store);\n\t\t\t\tstore.checkSchemaValid();\n\t\t\t}\n\t\t});",
                "is_abstract": "",
                "class_name": "CassandraVectorStoreIT",
                "annotations": []
            },
            {
                "name": "addAndSearch",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\t\t\ttry (CassandraVectorStore store = createTestStore(context, new SchemaColumn(\"meta1\", DataTypes.TEXT),\n\t\t\t\t\tnew SchemaColumn(\"meta2\", DataTypes.TEXT))) {\n\t\t\t\tstore.add(documents);\n\n\t\t\t\tList<Document> results = store.similaritySearch(SearchRequest.query(\"Spring\").withTopK(1));\n\n\t\t\t\tassertThat(results).hasSize(1);\n\t\t\t\tDocument resultDoc = results.get(0);\n\t\t\t\tassertThat(resultDoc.getId()).isEqualTo(documents.get(0).getId());\n\n\t\t\t\tassertThat(resultDoc.getContent()).contains(\n\t\t\t\t\t\t\"Spring AI provides abstractions that serve as the foundation for developing AI applications.\");\n\n\t\t\t\tassertThat(resultDoc.getMetadata()).hasSize(2);\n\t\t\t\tassertThat(resultDoc.getMetadata()).containsKeys(\"meta1\", CassandraVectorStore.SIMILARITY_FIELD_NAME);\n\n\t\t\t\t// Remove all documents from the store\n\t\t\t\tstore.delete(documents.stream().map(doc -> doc.getId()).toList());\n\n\t\t\t\tresults = store.similaritySearch(SearchRequest.query(\"Spring\").withTopK(1));\n\t\t\t\tassertThat(results).isEmpty();\n\t\t\t}\n\t\t});",
                "is_abstract": "",
                "class_name": "CassandraVectorStoreIT",
                "annotations": []
            },
            {
                "name": "searchWithPartitionFilter",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\n\t\t\ttry (CassandraVectorStore store = createTestStore(context,\n\t\t\t\t\tnew SchemaColumn(\"year\", DataTypes.SMALLINT, SchemaColumnTags.INDEXED))) {\n\n\t\t\t\tvar bgDocument = new Document(\"BG\", \"The World is Big and Salvation Lurks Around the Corner\",\n\t\t\t\t\t\tMap.of(\"year\", (short) 2020));\n\t\t\t\tvar nlDocument = new Document(\"NL\", \"The World is Big and Salvation Lurks Around the Corner\",\n\t\t\t\t\t\temptyMap());\n\t\t\t\tvar bgDocument2 = new Document(\"BG2\", \"The World is Big and Salvation Lurks Around the Corner\",\n\t\t\t\t\t\tMap.of(\"year\", (short) 2023));\n\n\t\t\t\tstore.add(List.of(bgDocument, nlDocument, bgDocument2));\n\n\t\t\t\tList<Document> results = store.similaritySearch(SearchRequest.query(\"The World\").withTopK(5));\n\t\t\t\tassertThat(results).hasSize(3);\n\n\t\t\t\tresults = store.similaritySearch(SearchRequest.query(\"The World\")\n\t\t\t\t\t.withTopK(5)\n\t\t\t\t\t.withSimilarityThresholdAll()\n\t\t\t\t\t.withFilterExpression(format(\"%s == 'NL'\", CassandraVectorStoreConfig.DEFAULT_ID_NAME)));\n\n\t\t\t\tassertThat(results).hasSize(1);\n\t\t\t\tassertThat(results.get(0).getId()).isEqualTo(nlDocument.getId());\n\n\t\t\t\tresults = store.similaritySearch(SearchRequest.query(\"The World\")\n\t\t\t\t\t.withTopK(5)\n\t\t\t\t\t.withSimilarityThresholdAll()\n\t\t\t\t\t.withFilterExpression(format(\"%s == 'BG2'\", CassandraVectorStoreConfig.DEFAULT_ID_NAME)));\n\n\t\t\t\tassertThat(results).hasSize(1);\n\t\t\t\tassertThat(results.get(0).getId()).isEqualTo(bgDocument2.getId());\n\n\t\t\t\tresults = store.similaritySearch(SearchRequest.query(\"The World\")\n\t\t\t\t\t.withTopK(5)\n\t\t\t\t\t.withSimilarityThresholdAll()\n\t\t\t\t\t.withFilterExpression(\n\t\t\t\t\t\t\tformat(\"%s == 'BG' && year == 2020\", CassandraVectorStoreConfig.DEFAULT_ID_NAME)));\n\n\t\t\t\tassertThat(results).hasSize(1);\n\t\t\t\tassertThat(results.get(0).getId()).isEqualTo(bgDocument.getId());\n\n\t\t\t\t// cassandra server will throw an error\n\t\t\t\tAssertions.assertThrows(SyntaxError.class, () -> {\n\t\t\t\t\tstore.similaritySearch(SearchRequest.query(\"The World\")\n\t\t\t\t\t\t.withTopK(5)\n\t\t\t\t\t\t.withSimilarityThresholdAll()\n\t\t\t\t\t\t.withFilterExpression(\n\t\t\t\t\t\t\t\tformat(\"NOT(%s == 'BG' && year == 2020)\", CassandraVectorStoreConfig.DEFAULT_ID_NAME)));\n\t\t\t\t});\n\t\t\t}\n\t\t});",
                "is_abstract": "",
                "class_name": "CassandraVectorStoreIT",
                "annotations": []
            },
            {
                "name": "unsearchableFilters",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\t\t\ttry (CassandraVectorStore store = context.getBean(CassandraVectorStore.class)) {\n\n\t\t\t\tvar bgDocument = new Document(\"The World is Big and Salvation Lurks Around the Corner\",\n\t\t\t\t\t\tMap.of(\"country\", \"BG\", \"year\", (short) 2020));\n\t\t\t\tvar nlDocument = new Document(\"The World is Big and Salvation Lurks Around the Corner\",\n\t\t\t\t\t\tMap.of(\"country\", \"NL\"));\n\t\t\t\tvar bgDocument2 = new Document(\"The World is Big and Salvation Lurks Around the Corner\",\n\t\t\t\t\t\tMap.of(\"country\", \"BG\", \"year\", (short) 2023));\n\n\t\t\t\tstore.add(List.of(bgDocument, nlDocument, bgDocument2));\n\n\t\t\t\tList<Document> results = store.similaritySearch(SearchRequest.query(\"The World\").withTopK(5));\n\t\t\t\tassertThat(results).hasSize(3);\n\n\t\t\t\tAssertions.assertThrows(InvalidQueryException.class, () -> {\n\t\t\t\t\tstore.similaritySearch(SearchRequest.query(\"The World\")\n\t\t\t\t\t\t.withTopK(5)\n\t\t\t\t\t\t.withSimilarityThresholdAll()\n\t\t\t\t\t\t.withFilterExpression(\"country == 'NL'\"));\n\t\t\t\t});\n\t\t\t}\n\t\t});",
                "is_abstract": "",
                "class_name": "CassandraVectorStoreIT",
                "annotations": []
            },
            {
                "name": "searchWithFilters",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\n\t\t\ttry (CassandraVectorStore store = createTestStore(context,\n\t\t\t\t\tnew SchemaColumn(\"country\", DataTypes.TEXT, SchemaColumnTags.INDEXED),\n\t\t\t\t\tnew SchemaColumn(\"year\", DataTypes.SMALLINT, SchemaColumnTags.INDEXED))) {\n\n\t\t\t\tvar bgDocument = new Document(\"The World is Big and Salvation Lurks Around the Corner\",\n\t\t\t\t\t\tMap.of(\"country\", \"BG\", \"year\", (short) 2020));\n\t\t\t\tvar nlDocument = new Document(\"The World is Big and Salvation Lurks Around the Corner\",\n\t\t\t\t\t\tMap.of(\"country\", \"NL\"));\n\t\t\t\tvar bgDocument2 = new Document(\"The World is Big and Salvation Lurks Around the Corner\",\n\t\t\t\t\t\tMap.of(\"country\", \"BG\", \"year\", (short) 2023));\n\n\t\t\t\tstore.add(List.of(bgDocument, nlDocument, bgDocument2));\n\n\t\t\t\tList<Document> results = store.similaritySearch(SearchRequest.query(\"The World\").withTopK(5));\n\t\t\t\tassertThat(results).hasSize(3);\n\n\t\t\t\tresults = store.similaritySearch(SearchRequest.query(\"The World\")\n\t\t\t\t\t.withTopK(5)\n\t\t\t\t\t.withSimilarityThresholdAll()\n\t\t\t\t\t.withFilterExpression(\"country == 'NL'\"));\n\t\t\t\tassertThat(results).hasSize(1);\n\t\t\t\tassertThat(results.get(0).getId()).isEqualTo(nlDocument.getId());\n\n\t\t\t\tresults = store.similaritySearch(SearchRequest.query(\"The World\")\n\t\t\t\t\t.withTopK(5)\n\t\t\t\t\t.withSimilarityThresholdAll()\n\t\t\t\t\t.withFilterExpression(\"country == 'BG'\"));\n\n\t\t\t\tassertThat(results).hasSize(2);\n\t\t\t\tassertThat(results.get(0).getId()).isIn(bgDocument.getId(), bgDocument2.getId());\n\t\t\t\tassertThat(results.get(1).getId()).isIn(bgDocument.getId(), bgDocument2.getId());\n\n\t\t\t\tresults = store.similaritySearch(SearchRequest.query(\"The World\")\n\t\t\t\t\t.withTopK(5)\n\t\t\t\t\t.withSimilarityThresholdAll()\n\t\t\t\t\t.withFilterExpression(\"country == 'BG' && year == 2020\"));\n\n\t\t\t\tassertThat(results).hasSize(1);\n\t\t\t\tassertThat(results.get(0).getId()).isEqualTo(bgDocument.getId());\n\n\t\t\t\t// cassandra server will throw an error\n\t\t\t\tAssertions.assertThrows(SyntaxError.class, () -> {\n\t\t\t\t\tstore.similaritySearch(SearchRequest.query(\"The World\")\n\t\t\t\t\t\t.withTopK(5)\n\t\t\t\t\t\t.withSimilarityThresholdAll()\n\t\t\t\t\t\t.withFilterExpression(\"country == 'BG' || year == 2020\"));\n\t\t\t\t});\n\n\t\t\t\t// cassandra server will throw an error\n\t\t\t\tAssertions.assertThrows(SyntaxError.class, () -> {\n\t\t\t\t\tstore.similaritySearch(SearchRequest.query(\"The World\")\n\t\t\t\t\t\t.withTopK(5)\n\t\t\t\t\t\t.withSimilarityThresholdAll()\n\t\t\t\t\t\t.withFilterExpression(\"NOT(country == 'BG' && year == 2020)\"));\n\t\t\t\t});\n\t\t\t}\n\t\t});",
                "is_abstract": "",
                "class_name": "CassandraVectorStoreIT",
                "annotations": []
            },
            {
                "name": "documentUpdate",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\t\t\ttry (CassandraVectorStore store = context.getBean(CassandraVectorStore.class)) {\n\n\t\t\t\tDocument document = new Document(UUID.randomUUID().toString(), \"Spring AI rocks!!\",\n\t\t\t\t\t\tCollections.singletonMap(\"meta1\", \"meta1\"));\n\n\t\t\t\tstore.add(List.of(document));\n\n\t\t\t\tList<Document> results = store.similaritySearch(SearchRequest.query(\"Spring\").withTopK(5));\n\n\t\t\t\tassertThat(results).hasSize(1);\n\t\t\t\tDocument resultDoc = results.get(0);\n\t\t\t\tassertThat(resultDoc.getId()).isEqualTo(document.getId());\n\t\t\t\tassertThat(resultDoc.getContent()).isEqualTo(\"Spring AI rocks!!\");\n\t\t\t\tassertThat(resultDoc.getMetadata()).containsKey(\"meta1\");\n\n\t\t\t\tDocument sameIdDocument = new Document(document.getId(),\n\t\t\t\t\t\t\"The World is Big and Salvation Lurks Around the Corner\",\n\t\t\t\t\t\tCollections.singletonMap(\"meta2\", \"meta2\"));\n\n\t\t\t\tstore.add(List.of(sameIdDocument));\n\n\t\t\t\tresults = store.similaritySearch(SearchRequest.query(\"FooBar\").withTopK(5));\n\n\t\t\t\tassertThat(results).hasSize(1);\n\t\t\t\tresultDoc = results.get(0);\n\t\t\t\tassertThat(resultDoc.getId()).isEqualTo(document.getId());\n\t\t\t\tassertThat(resultDoc.getContent()).isEqualTo(\"The World is Big and Salvation Lurks Around the Corner\");\n\t\t\t\tassertThat(resultDoc.getMetadata()).containsKeys(\"meta2\", CassandraVectorStore.SIMILARITY_FIELD_NAME);\n\n\t\t\t\tstore.delete(List.of(document.getId()));\n\t\t\t}\n\t\t});",
                "is_abstract": "",
                "class_name": "CassandraVectorStoreIT",
                "annotations": []
            },
            {
                "name": "searchWithThreshold",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\t\t\ttry (CassandraVectorStore store = context.getBean(CassandraVectorStore.class)) {\n\t\t\t\tstore.add(documents);\n\n\t\t\t\tList<Document> fullResult = store\n\t\t\t\t\t.similaritySearch(SearchRequest.query(\"Spring\").withTopK(5).withSimilarityThresholdAll());\n\n\t\t\t\tList<Float> distances = fullResult.stream()\n\t\t\t\t\t.map(doc -> (Float) doc.getMetadata().get(CassandraVectorStore.SIMILARITY_FIELD_NAME))\n\t\t\t\t\t.toList();\n\n\t\t\t\tassertThat(distances).hasSize(3);\n\n\t\t\t\tfloat threshold = (distances.get(0) + distances.get(1)) / 2;\n\n\t\t\t\tList<Document> results = store\n\t\t\t\t\t.similaritySearch(SearchRequest.query(\"Spring\").withTopK(5).withSimilarityThreshold(threshold));\n\n\t\t\t\tassertThat(results).hasSize(1);\n\t\t\t\tDocument resultDoc = results.get(0);\n\t\t\t\tassertThat(resultDoc.getId()).isEqualTo(documents.get(0).getId());\n\n\t\t\t\tassertThat(resultDoc.getContent()).contains(\n\t\t\t\t\t\t\"Spring AI provides abstractions that serve as the foundation for developing AI applications.\");\n\n\t\t\t\tassertThat(resultDoc.getMetadata()).containsKeys(\"meta1\", CassandraVectorStore.SIMILARITY_FIELD_NAME);\n\t\t\t}\n\t\t});",
                "is_abstract": "",
                "class_name": "CassandraVectorStoreIT",
                "annotations": [
                    "@EnableAutoConfiguration(exclude = { DataSourceAutoConfiguration.class })"
                ]
            },
            {
                "name": "store",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "CassandraVectorStoreConfig conf = storeBuilder(cqlSession)\n\t\t\t\t.addMetadataColumns(new SchemaColumn(\"meta1\", DataTypes.TEXT),\n\t\t\t\t\t\tnew SchemaColumn(\"meta2\", DataTypes.TEXT), new SchemaColumn(\"country\", DataTypes.TEXT),\n\t\t\t\t\t\tnew SchemaColumn(\"year\", DataTypes.SMALLINT))\n\t\t\t\t.build();\n\n\t\t\tconf.dropKeyspace();\n\t\t\treturn new CassandraVectorStore(conf, embeddingClient);",
                "is_abstract": "",
                "class_name": "CassandraVectorStoreIT TestApplication",
                "annotations": []
            },
            {
                "name": "embeddingClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new TransformersEmbeddingClient();",
                "is_abstract": "",
                "class_name": "CassandraVectorStoreIT TestApplication",
                "annotations": []
            },
            {
                "name": "cqlSession",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new CqlSessionBuilder()\n\t\t\t\t// comment next two lines out to connect to a local C* cluster\n\t\t\t\t.addContactPoint(cassandraContainer.getContactPoint())\n\t\t\t\t.withLocalDatacenter(cassandraContainer.getLocalDatacenter())\n\t\t\t\t.build();",
                "is_abstract": "",
                "class_name": "CassandraVectorStoreIT TestApplication",
                "annotations": []
            },
            {
                "name": "storeBuilder",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return CassandraVectorStoreConfig.builder()\n\t\t\t.withCqlSession(cqlSession)\n\t\t\t.withKeyspaceName(\"test_\" + CassandraVectorStoreConfig.DEFAULT_KEYSPACE_NAME);",
                "is_abstract": "",
                "class_name": "CassandraVectorStoreIT TestApplication",
                "annotations": []
            },
            {
                "name": "createTestStore",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "CassandraVectorStoreConfig.Builder builder = storeBuilder(context.getBean(CqlSession.class))\n\t\t\t.addMetadataColumns(metadataFields);\n\n\t\tCassandraVectorStoreConfig conf = builder.build();\n\t\tconf.dropKeyspace();\n\t\treturn new CassandraVectorStore(conf, context.getBean(EmbeddingClient.class));",
                "is_abstract": "",
                "class_name": "CassandraVectorStoreIT TestApplication",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/vector-stores/spring-ai-cassandra/src/test/java/org/springframework/ai/vectorstore/WikiVectorStoreExample.java",
        "class_names": [
            "TestApplication",
            "WikiVectorStoreExample"
        ],
        "imports": "import org.junit.jupiter.api.Assertions;\nimport static java.lang.String.format;\nimport java.util.List;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.springframework.ai.transformers.TransformersEmbeddingClient;\nimport org.springframework.context.annotation.Bean;\nimport com.datastax.oss.driver.api.core.CqlSession;\nimport org.junit.jupiter.api.Test;\nimport org.testcontainers.junit.jupiter.Testcontainers;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\nimport org.springframework.ai.vectorstore.CassandraVectorStoreConfig.SchemaColumn;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport org.springframework.ai.embedding.EmbeddingClient;\nimport com.datastax.oss.driver.api.core.CqlSessionBuilder;\nimport org.springframework.boot.SpringBootConfiguration;\nimport com.datastax.oss.driver.api.core.type.DataTypes;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.WikiVectorStoreExampl": "org.springframework.ai.vectorstore.WikiVectorStoreExampl",
            "org.springframework.ai.vectorstore.TestApplication": "org.springframework.ai.vectorstore.TestApplication",
            "org.springframework.ai.vectorstore.ensureBeanGetsCreated": "org.springframework.ai.vectorstore.ensureBeanGetsCreated",
            "org.springframework.ai.vectorstore.search": "org.springframework.ai.vectorstore.search",
            "org.springframework.ai.vectorstore.stor": "org.springframework.ai.vectorstore.stor",
            "org.springframework.ai.vectorstore.embeddingClient": "org.springframework.ai.vectorstore.embeddingClient",
            "org.springframework.ai.vectorstore.cqlSession": "org.springframework.ai.vectorstore.cqlSession",
            "org.springframework.ai.vectorstore.contextRunner": "org.springframework.ai.vectorstore.contextRunner"
        },
        "package": "package org.springframework.ai.vectorstore;",
        "property_declarations": [
            "private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t.withUserConfiguration(TestApplication.class);"
        ],
        "functions": [
            {
                "name": "ensureBeanGetsCreated",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.contextRunner.run(context -> {\n\t\t\tCassandraVectorStore store = context.getBean(CassandraVectorStore.class);\n\t\t\tAssertions.assertNotNull(store);\n\t\t\tstore.checkSchemaValid();\n\n\t\t\tstore.similaritySearch(SearchRequest.query(\"Spring\").withTopK(1));\n\t\t});",
                "is_abstract": "",
                "class_name": "WikiVectorStoreExample",
                "annotations": []
            },
            {
                "name": "search",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.contextRunner.run(context -> {\n\t\t\tCassandraVectorStore store = context.getBean(CassandraVectorStore.class);\n\t\t\tAssertions.assertNotNull(store);\n\t\t\tstore.checkSchemaValid();\n\n\t\t\tvar results = store.similaritySearch(SearchRequest.query(\"Spring\").withTopK(1));\n\t\t\tassertThat(results).hasSize(1);\n\t\t});",
                "is_abstract": "",
                "class_name": "WikiVectorStoreExample",
                "annotations": [
                    "@EnableAutoConfiguration(exclude = { DataSourceAutoConfiguration.class })"
                ]
            },
            {
                "name": "store",
                "parameters": [
                    ""
                ],
                "return_type": "0",
                "body": "List<SchemaColumn> partitionColumns = List.of(new SchemaColumn(\"wiki\", DataTypes.TEXT),\n\t\t\t\t\tnew SchemaColumn(\"language\", DataTypes.TEXT), new SchemaColumn(\"title\", DataTypes.TEXT));\n\n\t\t\tList<SchemaColumn> clusteringColumns = List.of(new SchemaColumn(\"chunk_no\", DataTypes.INT),\n\t\t\t\t\tnew SchemaColumn(\"bert_embedding_no\", DataTypes.INT));\n\n\t\t\tList<SchemaColumn> extraColumns = List.of(new SchemaColumn(\"revision\", DataTypes.INT),\n\t\t\t\t\tnew SchemaColumn(\"id\", DataTypes.INT));\n\n\t\t\tCassandraVectorStoreConfig conf = CassandraVectorStoreConfig.builder()\n\t\t\t\t.withCqlSession(cqlSession)\n\t\t\t\t.withKeyspaceName(\"wikidata\")\n\t\t\t\t.withTableName(\"articles\")\n\t\t\t\t.withPartitionKeys(partitionColumns)\n\t\t\t\t.withClusteringKeys(clusteringColumns)\n\t\t\t\t.withContentColumnName(\"body\")\n\t\t\t\t.withEmbeddingColumnName(\"all_minilm_l6_v2_embedding\")\n\t\t\t\t.withIndexName(\"all_minilm_l6_v2_ann\")\n\t\t\t\t.disallowSchemaChanges()\n\t\t\t\t.addMetadataColumns(extraColumns)\n\n\t\t\t\t.withPrimaryKeyTranslator((List<Object> primaryKeys) -> {\n\t\t\t\t\t// the deliminator used to join fields together into the document's id\n\t\t\t\t\t// is arbitary, here \"\u00a7\u00b6\" is used\n\t\t\t\t\tif (primaryKeys.isEmpty()) {\n\t\t\t\t\t\treturn \"test\u00a7\u00b60\";\n\t\t\t\t\t}\n\t\t\t\t\treturn format(\"%s\u00a7\u00b6%s\", primaryKeys.get(2), primaryKeys.get(3));\n\t\t\t\t})\n\n\t\t\t\t.withDocumentIdTranslator((id) -> {\n\t\t\t\t\tString[] parts = id.split(\"\u00a7\u00b6\");\n\t\t\t\t\tString title = parts[0];\n\t\t\t\t\tint chunk_no = 0 < parts.length ? Integer.parseInt(parts[1]) : 0;\n\t\t\t\t\treturn List.of(\"simplewiki\", \"en\", title, chunk_no, 0);\n\t\t\t\t})\n\t\t\t\t.build();\n\n\t\t\treturn new CassandraVectorStore(conf, embeddingClient());",
                "is_abstract": "",
                "class_name": "WikiVectorStoreExample TestApplication",
                "annotations": []
            },
            {
                "name": "embeddingClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// default is ONNX all-MiniLM-L6-v2 which is what we want\n\t\t\treturn new TransformersEmbeddingClient();",
                "is_abstract": "",
                "class_name": "WikiVectorStoreExample TestApplication",
                "annotations": []
            },
            {
                "name": "cqlSession",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new CqlSessionBuilder()\n\t\t\t\t// presumes a local C* cluster is running\n\t\t\t\t.build();",
                "is_abstract": "",
                "class_name": "WikiVectorStoreExample TestApplication",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/vector-stores/spring-ai-cassandra/src/test/java/org/springframework/ai/vectorstore/CassandraFilterExpressionConverterTests.java",
        "class_names": [
            "CassandraFilterExpressionConverterTests"
        ],
        "imports": "import java.util.List;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.GTE;\nimport com.datastax.oss.driver.api.core.CqlIdentifier;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.IN;\nimport org.junit.jupiter.api.Assertions;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.AND;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.EQ;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.LTE;\nimport java.util.HashSet;\nimport java.util.Collection;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.NE;\nimport com.datastax.oss.driver.internal.core.metadata.schema.DefaultColumnMetadata;\nimport java.util.Set;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.OR;\nimport org.springframework.ai.vectorstore.filter.Filter.Key;\nimport org.springframework.ai.vectorstore.filter.Filter.Expression;\nimport org.springframework.ai.vectorstore.filter.Filter.Group;\nimport com.datastax.oss.driver.api.core.metadata.schema.ColumnMetadata;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.vectorstore.filter.Filter.Value;\nimport com.datastax.oss.driver.api.core.type.DataTypes;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.CassandraFilterExpressionConverterTests": "org.springframework.ai.vectorstore.CassandraFilterExpressionConverterTests",
            "org.springframework.ai.vectorstore.testEQOnPartition": "org.springframework.ai.vectorstore.testEQOnPartition",
            "org.springframework.ai.vectorstore.testEQ": "org.springframework.ai.vectorstore.testEQ",
            "org.springframework.ai.vectorstore.testNoSuchColumn": "org.springframework.ai.vectorstore.testNoSuchColumn",
            "org.springframework.ai.vectorstore.tesEqAndGt": "org.springframework.ai.vectorstore.tesEqAndGt",
            "org.springframework.ai.vectorstore.tesOr": "org.springframework.ai.vectorstore.tesOr",
            "org.springframework.ai.vectorstore.tesIn": "org.springframework.ai.vectorstore.tesIn",
            "org.springframework.ai.vectorstore.testN": "org.springframework.ai.vectorstore.testN",
            "org.springframework.ai.vectorstore.testGrou": "org.springframework.ai.vectorstore.testGrou",
            "org.springframework.ai.vectorstore.tesBoolean": "org.springframework.ai.vectorstore.tesBoolean",
            "org.springframework.ai.vectorstore.testDecimal": "org.springframework.ai.vectorstore.testDecimal",
            "org.springframework.ai.vectorstore.testComplexIdentifiers": "org.springframework.ai.vectorstore.testComplexIdentifiers",
            "org.springframework.ai.vectorstore.T": "org.springframework.ai.vectorstore.T",
            "org.springframework.ai.vectorstore.COLUMNS": "org.springframework.ai.vectorstore.COLUMNS"
        },
        "package": "package org.springframework.ai.vectorstore;",
        "property_declarations": [
            "private static final CqlIdentifier T = CqlIdentifier.fromInternal(\"test\");",
            "private static final Collection<ColumnMetadata> COLUMNS = Set.of(\n\t\t\tnew DefaultColumnMetadata(T, T, CqlIdentifier.fromInternal(\"id\"), DataTypes.TEXT, false),\n\t\t\tnew DefaultColumnMetadata(T, T, CqlIdentifier.fromInternal(\"content\"), DataTypes.TEXT, false),\n\t\t\tnew DefaultColumnMetadata(T, T, CqlIdentifier.fromInternal(\"country\"), DataTypes.TEXT, false),\n\t\t\tnew DefaultColumnMetadata(T, T, CqlIdentifier.fromInternal(\"genre\"), DataTypes.TEXT, false),\n\t\t\tnew DefaultColumnMetadata(T, T, CqlIdentifier.fromInternal(\"drama\"), DataTypes.TEXT, false),\n\t\t\tnew DefaultColumnMetadata(T, T, CqlIdentifier.fromInternal(\"year\"), DataTypes.SMALLINT, false));"
        ],
        "functions": [
            {
                "name": "testEQOnPartition",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "CassandraFilterExpressionConverter filter = new CassandraFilterExpressionConverter(COLUMNS);\n\n\t\tString vectorExpr = filter.convertExpression(new Expression(EQ, new Key(\"id\"), new Value(\"BG\")));\n\n\t\tassertThat(vectorExpr).isEqualTo(\"\\\"id\\\" = 'BG'\");",
                "is_abstract": "",
                "class_name": "CassandraFilterExpressionConverterTests",
                "annotations": []
            },
            {
                "name": "testEQ",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "CassandraFilterExpressionConverter filter = new CassandraFilterExpressionConverter(COLUMNS);\n\n\t\tString vectorExpr = filter.convertExpression(new Expression(EQ, new Key(\"country\"), new Value(\"BG\")));\n\n\t\tassertThat(vectorExpr).isEqualTo(\"\\\"country\\\" = 'BG'\");",
                "is_abstract": "",
                "class_name": "CassandraFilterExpressionConverterTests",
                "annotations": []
            },
            {
                "name": "testNoSuchColumn",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "CassandraFilterExpressionConverter filter = new CassandraFilterExpressionConverter(COLUMNS);\n\n\t\tAssertions.assertThrows(IllegalArgumentException.class, () -> {\n\t\t\tfilter.convertExpression(new Expression(EQ, new Key(\"unknown_column\"), new Value(\"BG\")));\n\t\t});",
                "is_abstract": "",
                "class_name": "CassandraFilterExpressionConverterTests",
                "annotations": []
            },
            {
                "name": "tesEqAndGte",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "CassandraFilterExpressionConverter filter = new CassandraFilterExpressionConverter(COLUMNS);\n\n\t\t// genre == \"drama\" AND year >= 2020\n\t\tString vectorExpr = filter\n\t\t\t.convertExpression(new Expression(AND, new Expression(EQ, new Key(\"genre\"), new Value(\"drama\")),\n\t\t\t\t\tnew Expression(GTE, new Key(\"year\"), new Value(2020))));\n\n\t\tassertThat(vectorExpr).isEqualTo(\"\\\"genre\\\" = 'drama' and \\\"year\\\" >= 2020\");",
                "is_abstract": "",
                "class_name": "CassandraFilterExpressionConverterTests",
                "annotations": []
            },
            {
                "name": "tesOr",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "CassandraFilterExpressionConverter filter = new CassandraFilterExpressionConverter(COLUMNS);\n\n\t\t// genre == \"drama\" OR year = 2020\n\t\tString vectorExpr = filter\n\t\t\t.convertExpression(new Expression(OR, new Expression(EQ, new Key(\"genre\"), new Value(\"drama\")),\n\t\t\t\t\tnew Expression(EQ, new Key(\"year\"), new Value(2020))));\n\n\t\tassertThat(vectorExpr).isEqualTo(\"\\\"genre\\\" = 'drama' or \\\"year\\\" = 2020\");",
                "is_abstract": "",
                "class_name": "CassandraFilterExpressionConverterTests",
                "annotations": []
            },
            {
                "name": "tesIn",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "CassandraFilterExpressionConverter filter = new CassandraFilterExpressionConverter(COLUMNS);\n\n\t\t// genre in [\"comedy\", \"documentary\", \"drama\"]\n\t\tString vectorExpr = filter.convertExpression(\n\t\t\t\tnew Expression(IN, new Key(\"genre\"), new Value(List.of(\"comedy\", \"documentary\", \"drama\"))));\n\n\t\tassertThat(vectorExpr).isEqualTo(\"\\\"genre\\\" IN ('comedy','documentary','drama')\");",
                "is_abstract": "",
                "class_name": "CassandraFilterExpressionConverterTests",
                "annotations": []
            },
            {
                "name": "testNe",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Set<ColumnMetadata> columns = new HashSet(COLUMNS);\n\n\t\tcolumns.add(new DefaultColumnMetadata(T, T, CqlIdentifier.fromInternal(\"city\"), DataTypes.TEXT, false));\n\n\t\tCassandraFilterExpressionConverter filter = new CassandraFilterExpressionConverter(columns);\n\n\t\t// year >= 2020 OR country == \"BG\" AND city != \"Sofia\"\n\t\tString vectorExpr = filter\n\t\t\t.convertExpression(new Expression(OR, new Expression(GTE, new Key(\"year\"), new Value(2020)),\n\t\t\t\t\tnew Group(new Expression(AND, new Expression(EQ, new Key(\"country\"), new Value(\"BG\")),\n\t\t\t\t\t\t\tnew Expression(NE, new Key(\"city\"), new Value(\"Sofia\"))))));\n\n\t\tassertThat(vectorExpr).isEqualTo(\"\\\"year\\\" >= 2020 or \\\"country\\\" = 'BG' and \\\"city\\\" != 'Sofia'\");",
                "is_abstract": "",
                "class_name": "CassandraFilterExpressionConverterTests",
                "annotations": []
            },
            {
                "name": "testGroup",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Set<ColumnMetadata> columns = new HashSet(COLUMNS);\n\n\t\tcolumns.add(new DefaultColumnMetadata(T, T, CqlIdentifier.fromInternal(\"city\"), DataTypes.TEXT, false));\n\n\t\tCassandraFilterExpressionConverter filter = new CassandraFilterExpressionConverter(columns);\n\n\t\t// (year >= 2020 OR country == \"BG\") AND city IN [\"Sofia\", \"Plovdiv\"]\n\t\tString vectorExpr = filter.convertExpression(new Expression(AND,\n\t\t\t\tnew Group(new Expression(OR, new Expression(GTE, new Key(\"year\"), new Value(2020)),\n\t\t\t\t\t\tnew Expression(EQ, new Key(\"country\"), new Value(\"BG\")))),\n\t\t\t\tnew Expression(IN, new Key(\"city\"), new Value(List.of(\"Sofia\", \"Plovdiv\")))));\n\n\t\tassertThat(vectorExpr).isEqualTo(\"\\\"year\\\" >= 2020 or \\\"country\\\" = 'BG' and \\\"city\\\" IN ('Sofia','Plovdiv')\");",
                "is_abstract": "",
                "class_name": "CassandraFilterExpressionConverterTests",
                "annotations": []
            },
            {
                "name": "tesBoolean",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Set<ColumnMetadata> columns = new HashSet(COLUMNS);\n\n\t\tcolumns.add(new DefaultColumnMetadata(T, T, CqlIdentifier.fromInternal(\"isOpen\"), DataTypes.BOOLEAN, false));\n\n\t\tCassandraFilterExpressionConverter filter = new CassandraFilterExpressionConverter(columns);\n\n\t\t// isOpen == true AND year >= 2020 AND country IN [\"BG\", \"NL\", \"US\"]\n\t\tString vectorExpr = filter.convertExpression(new Expression(AND,\n\t\t\t\tnew Expression(AND, new Expression(EQ, new Key(\"isOpen\"), new Value(true)),\n\t\t\t\t\t\tnew Expression(GTE, new Key(\"year\"), new Value(2020))),\n\t\t\t\tnew Expression(IN, new Key(\"country\"), new Value(List.of(\"BG\", \"NL\", \"US\")))));\n\n\t\tassertThat(vectorExpr).isEqualTo(\"\\\"isOpen\\\" = true and \\\"year\\\" >= 2020 and \\\"country\\\" IN ('BG','NL','US')\");",
                "is_abstract": "",
                "class_name": "CassandraFilterExpressionConverterTests",
                "annotations": []
            },
            {
                "name": "testDecimal",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Set<ColumnMetadata> columns = new HashSet(COLUMNS);\n\n\t\tcolumns\n\t\t\t.add(new DefaultColumnMetadata(T, T, CqlIdentifier.fromInternal(\"temperature\"), DataTypes.DOUBLE, false));\n\n\t\tCassandraFilterExpressionConverter filter = new CassandraFilterExpressionConverter(columns);\n\n\t\t// temperature >= -15.6 && temperature <= +20.13\n\t\tString vectorExpr = filter\n\t\t\t.convertExpression(new Expression(AND, new Expression(GTE, new Key(\"temperature\"), new Value(-15.6)),\n\t\t\t\t\tnew Expression(LTE, new Key(\"temperature\"), new Value(20.13))));\n\n\t\tassertThat(vectorExpr).isEqualTo(\"\\\"temperature\\\" >= -15.6 and \\\"temperature\\\" <= 20.13\");",
                "is_abstract": "",
                "class_name": "CassandraFilterExpressionConverterTests",
                "annotations": []
            },
            {
                "name": "testComplexIdentifiers",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Set<ColumnMetadata> columns = new HashSet(COLUMNS);\n\n\t\tcolumns.add(new DefaultColumnMetadata(T, T, CqlIdentifier.fromInternal(\"\\\"country 1 2 3\\\"\"), DataTypes.TEXT,\n\t\t\t\tfalse));\n\n\t\tcolumns\n\t\t\t.add(new DefaultColumnMetadata(T, T, CqlIdentifier.fromInternal(\"'country 1 2 3'\"), DataTypes.TEXT, false));\n\n\t\tCassandraFilterExpressionConverter filter = new CassandraFilterExpressionConverter(columns);\n\n\t\tString vectorExpr = filter.convertExpression(new Expression(EQ, new Key(\"\\\"country 1 2 3\\\"\"), new Value(\"BG\")));\n\t\tassertThat(vectorExpr).isEqualTo(\"\\\"\\\"\\\"country 1 2 3\\\"\\\"\\\" = 'BG'\");\n\n\t\tvectorExpr = filter.convertExpression(new Expression(EQ, new Key(\"'country 1 2 3'\"), new Value(\"BG\")));\n\t\tassertThat(vectorExpr).isEqualTo(\"\\\"'country 1 2 3'\\\" = 'BG'\");",
                "is_abstract": "",
                "class_name": "CassandraFilterExpressionConverterTests",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/vector-stores/spring-ai-cassandra/src/main/java/org/springframework/ai/vectorstore/CassandraVectorStore.java",
        "class_names": [
            "CassandraVectorStore"
        ],
        "imports": "import java.util.List;\nimport com.datastax.oss.driver.api.querybuilder.delete.Delete;\nimport com.datastax.oss.driver.api.core.cql.BoundStatementBuilder;\nimport com.datastax.oss.driver.api.querybuilder.delete.DeleteSelection;\nimport org.springframework.ai.vectorstore.filter.FilterExpressionConverter;\nimport org.springframework.ai.vectorstore.CassandraVectorStoreConfig;\nimport com.datastax.oss.driver.shaded.guava.common.base.Preconditions;\nimport java.util.concurrent.ConcurrentHashMap;\nimport com.datastax.oss.driver.api.core.metadata.schema.TableMetadata;\nimport com.datastax.oss.driver.api.core.cql.Row;\nimport com.datastax.oss.driver.api.querybuilder.insert.InsertInto;\nimport org.slf4j.Logger;\nimport java.util.Map;\nimport com.datastax.oss.driver.api.querybuilder.insert.RegularInsert;\nimport com.datastax.oss.driver.api.core.cql.SimpleStatement;\nimport java.util.HashSet;\nimport com.datastax.oss.driver.api.core.cql.BoundStatement;\nimport com.datastax.oss.driver.api.querybuilder.QueryBuilder;\nimport com.datastax.oss.driver.api.core.cql.PreparedStatement;\nimport org.slf4j.LoggerFactory;\nimport java.util.HashMap;\nimport org.springframework.beans.factory.InitializingBean;\nimport java.util.Set;\nimport org.springframework.ai.embedding.EmbeddingClient;\nimport java.util.ArrayList;\nimport org.springframework.ai.document.Document;\nimport java.util.concurrent.ConcurrentMap;\nimport com.datastax.oss.driver.api.core.data.CqlVector;\nimport org.springframework.ai.vectorstore.CassandraVectorStoreConfig.SchemaColumn;\nimport java.util.Optional;\nimport java.util.concurrent.CompletableFuture;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.CassandraVectorStor": "org.springframework.ai.vectorstore.CassandraVectorStor",
            "org.springframework.ai.vectorstore.add": "org.springframework.ai.vectorstore.add",
            "org.springframework.ai.vectorstore.delet": "org.springframework.ai.vectorstore.delet",
            "org.springframework.ai.vectorstore.similaritySearch": "org.springframework.ai.vectorstore.similaritySearch",
            "org.springframework.ai.vectorstore.afterPropertiesSet": "org.springframework.ai.vectorstore.afterPropertiesSet",
            "org.springframework.ai.vectorstore.clos": "org.springframework.ai.vectorstore.clos",
            "org.springframework.ai.vectorstore.checkSchemaValid": "org.springframework.ai.vectorstore.checkSchemaValid",
            "org.springframework.ai.vectorstore.getIndexSimilarity": "org.springframework.ai.vectorstore.getIndexSimilarity",
            "org.springframework.ai.vectorstore.prepareDeleteStatement": "org.springframework.ai.vectorstore.prepareDeleteStatement",
            "org.springframework.ai.vectorstore.prepareAddStatement": "org.springframework.ai.vectorstore.prepareAddStatement",
            "org.springframework.ai.vectorstore.similaritySearchStatement": "org.springframework.ai.vectorstore.similaritySearchStatement",
            "org.springframework.ai.vectorstore.getDocumentId": "org.springframework.ai.vectorstore.getDocumentId",
            "org.springframework.ai.vectorstore.SIMILARITY_FIELD_NAME": "org.springframework.ai.vectorstore.SIMILARITY_FIELD_NAME",
            "org.springframework.ai.vectorstore.DRIVER_PROFILE_UPDATES": "org.springframework.ai.vectorstore.DRIVER_PROFILE_UPDATES",
            "org.springframework.ai.vectorstore.DRIVER_PROFILE_SEARCH": "org.springframework.ai.vectorstore.DRIVER_PROFILE_SEARCH",
            "org.springframework.ai.vectorstore.QUERY_FORMAT": "org.springframework.ai.vectorstore.QUERY_FORMAT",
            "org.springframework.ai.vectorstore.logger": "org.springframework.ai.vectorstore.logger",
            "org.springframework.ai.vectorstore.conf": "org.springframework.ai.vectorstore.conf",
            "org.springframework.ai.vectorstore.embeddingClient": "org.springframework.ai.vectorstore.embeddingClient",
            "org.springframework.ai.vectorstore.filterExpressionConverter": "org.springframework.ai.vectorstore.filterExpressionConverter",
            "org.springframework.ai.vectorstore.addStmts": "org.springframework.ai.vectorstore.addStmts",
            "org.springframework.ai.vectorstore.deleteStmt": "org.springframework.ai.vectorstore.deleteStmt",
            "org.springframework.ai.vectorstore.similarityStmt": "org.springframework.ai.vectorstore.similarityStmt",
            "org.springframework.ai.vectorstore.similarity": "org.springframework.ai.vectorstore.similarity"
        },
        "package": "package org.springframework.ai.vectorstore;",
        "property_declarations": [
            "public static final String DRIVER_PROFILE_UPDATES = \"spring-ai-updates\";",
            "private final EmbeddingClient embeddingClient;",
            "private final PreparedStatement deleteStmt;",
            "private final Similarity similarity;",
            "private final CassandraVectorStoreConfig conf;",
            "public static final String SIMILARITY_FIELD_NAME = \"similarity_score\";",
            "private final String similarityStmt;",
            "public static final String DRIVER_PROFILE_SEARCH = \"spring-ai-search\";",
            "private final FilterExpressionConverter filterExpressionConverter;",
            "private final ConcurrentMap<Set<String>, PreparedStatement> addStmts = new ConcurrentHashMap<>();",
            "private static final Logger logger = LoggerFactory.getLogger(CassandraVectorStore.class);",
            "private static final String QUERY_FORMAT = \"select %s,%s,%s%s from %s.%s ? order by %s ann of ? limit ?\";"
        ],
        "functions": [
            {
                "name": "add",
                "parameters": [
                    ""
                ],
                "return_type": "this",
                "body": "var futures = new CompletableFuture[documents.size()];\n\n\t\tint i = 0;\n\t\tfor (Document d : documents) {\n\t\t\tfutures[i++] = CompletableFuture.runAsync(() -> {\n\t\t\t\tList<Object> primaryKeyValues = this.conf.documentIdTranslator.apply(d.getId());\n\n\t\t\t\tvar embedding = (null != d.getEmbedding() && !d.getEmbedding().isEmpty() ? d.getEmbedding()\n\t\t\t\t\t\t: this.embeddingClient.embed(d))\n\t\t\t\t\t.stream()\n\t\t\t\t\t.map(Double::floatValue)\n\t\t\t\t\t.toList();\n\n\t\t\t\tBoundStatementBuilder builder = prepareAddStatement(d.getMetadata().keySet()).boundStatementBuilder();\n\t\t\t\tfor (int k = 0; k < primaryKeyValues.size(); ++k) {\n\t\t\t\t\tSchemaColumn keyColumn = this.conf.getPrimaryKeyColumn(k);\n\t\t\t\t\tbuilder = builder.set(keyColumn.name(), primaryKeyValues.get(k), keyColumn.javaType());\n\t\t\t\t}\n\n\t\t\t\tbuilder = builder.setString(this.conf.schema.content(), d.getContent())\n\t\t\t\t\t.setVector(this.conf.schema.embedding(), CqlVector.newInstance(embedding), Float.class);\n\n\t\t\t\tfor (var metadataColumn : this.conf.schema.metadataColumns()\n\t\t\t\t\t.stream()\n\t\t\t\t\t.filter((mc) -> d.getMetadata().containsKey(mc.name()))\n\t\t\t\t\t.toList()) {\n\n\t\t\t\t\tbuilder = builder.set(metadataColumn.name(), d.getMetadata().get(metadataColumn.name()),\n\t\t\t\t\t\t\tmetadataColumn.javaType());\n\t\t\t\t}\n\t\t\t\tBoundStatement s = builder.build().setExecutionProfileName(DRIVER_PROFILE_UPDATES);\n\t\t\t\tthis.conf.session.execute(s);\n\t\t\t}, this.conf.executor);\n\t\t}\n\t\tCompletableFuture.allOf(futures).join();",
                "is_abstract": "",
                "class_name": "CassandraVectorStore",
                "annotations": []
            },
            {
                "name": "delete",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "CompletableFuture[] futures = new CompletableFuture[idList.size()];\n\t\tint i = 0;\n\t\tfor (String id : idList) {\n\t\t\tList<Object> primaryKeyValues = this.conf.documentIdTranslator.apply(id);\n\t\t\tBoundStatement s = this.deleteStmt.bind(primaryKeyValues.toArray());\n\t\t\tfutures[i++] = this.conf.session.executeAsync(s).toCompletableFuture();\n\t\t}\n\t\tCompletableFuture.allOf(futures).join();\n\t\treturn Optional.of(Boolean.TRUE);",
                "is_abstract": "",
                "class_name": "CassandraVectorStore",
                "annotations": []
            },
            {
                "name": "similaritySearch",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Preconditions.checkArgument(request.getTopK() <= 1000);\n\t\tvar embedding = this.embeddingClient.embed(request.getQuery()).stream().map(Double::floatValue).toList();\n\t\tCqlVector<Float> cqlVector = CqlVector.newInstance(embedding);\n\n\t\tString whereClause = \"\";\n\t\tif (request.hasFilterExpression()) {\n\t\t\tString expression = this.filterExpressionConverter.convertExpression(request.getFilterExpression());\n\t\t\tif (!expression.isBlank()) {\n\t\t\t\twhereClause = String.format(\"where %s\", expression);\n\t\t\t}\n\t\t}\n\n\t\tString query = String.format(this.similarityStmt, cqlVector, whereClause, cqlVector, request.getTopK());\n\t\tList<Document> documents = new ArrayList<>();\n\t\tlogger.trace(\"Executing {}\", query);\n\t\tSimpleStatement s = SimpleStatement.newInstance(query).setExecutionProfileName(DRIVER_PROFILE_SEARCH);\n\n\t\tfor (Row row : this.conf.session.execute(s)) {\n\t\t\tfloat score = row.getFloat(0);\n\t\t\tif (score < request.getSimilarityThreshold()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tMap<String, Object> docFields = new HashMap<>();\n\t\t\tdocFields.put(SIMILARITY_FIELD_NAME, score);\n\t\t\tfor (var metadata : this.conf.schema.metadataColumns()) {\n\t\t\t\tvar value = row.get(metadata.name(), metadata.javaType());\n\t\t\t\tif (null != value) {\n\t\t\t\t\tdocFields.put(metadata.name(), value);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdocuments.add(new Document(getDocumentId(row), row.getString(this.conf.schema.content()), docFields));\n\t\t}\n\t\treturn documents;",
                "is_abstract": "",
                "class_name": "CassandraVectorStore",
                "annotations": []
            },
            {
                "name": "afterPropertiesSet",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "CassandraVectorStore",
                "annotations": []
            },
            {
                "name": "close",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.conf.close();",
                "is_abstract": "",
                "class_name": "CassandraVectorStore",
                "annotations": []
            },
            {
                "name": "checkSchemaValid",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.conf.checkSchemaValid(embeddingClient.dimensions());",
                "is_abstract": "",
                "class_name": "CassandraVectorStore",
                "annotations": []
            },
            {
                "name": "getIndexSimilarity",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return Similarity.valueOf(metadata.getIndex(this.conf.schema.index())\n\t\t\t.get()\n\t\t\t.getOptions()\n\t\t\t.getOrDefault(\"similarity_function\", \"COSINE\")\n\t\t\t.toUpperCase());",
                "is_abstract": "",
                "class_name": "CassandraVectorStore",
                "annotations": []
            },
            {
                "name": "prepareDeleteStatement",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Delete stmt = null;\n\t\tDeleteSelection stmtStart = QueryBuilder.deleteFrom(conf.schema.keyspace(), conf.schema.table());\n\n\t\tfor (var c : this.conf.schema.partitionKeys()) {\n\t\t\tstmt = (null != stmt ? stmt : stmtStart).whereColumn(c.name()).isEqualTo(QueryBuilder.bindMarker(c.name()));\n\t\t}\n\t\tfor (var c : this.conf.schema.clusteringKeys()) {\n\t\t\tstmt = stmt.whereColumn(c.name()).isEqualTo(QueryBuilder.bindMarker(c.name()));\n\t\t}\n\n\t\treturn this.conf.session.prepare(stmt.build());",
                "is_abstract": "",
                "class_name": "CassandraVectorStore",
                "annotations": []
            },
            {
                "name": "prepareAddStatement",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// metadata fields that are not configured as metadata columns are not added\n\t\tSet<String> fieldsThatAreColumns = new HashSet<>(this.conf.schema.metadataColumns()\n\t\t\t.stream()\n\t\t\t.map((mc) -> mc.name())\n\t\t\t.filter((mc) -> metadataFields.contains(mc))\n\t\t\t.toList());\n\n\t\treturn this.addStmts.computeIfAbsent(fieldsThatAreColumns, (fields) -> {\n\n\t\t\tRegularInsert stmt = null;\n\t\t\tInsertInto stmtStart = QueryBuilder.insertInto(this.conf.schema.keyspace(), this.conf.schema.table());\n\n\t\t\tfor (var c : this.conf.schema.partitionKeys()) {\n\t\t\t\tstmt = (null != stmt ? stmt : stmtStart).value(c.name(), QueryBuilder.bindMarker(c.name()));\n\t\t\t}\n\t\t\tfor (var c : this.conf.schema.clusteringKeys()) {\n\t\t\t\tstmt = stmt.value(c.name(), QueryBuilder.bindMarker(c.name()));\n\t\t\t}\n\n\t\t\tstmt = stmt.value(this.conf.schema.content(), QueryBuilder.bindMarker(this.conf.schema.content()))\n\t\t\t\t.value(this.conf.schema.embedding(), QueryBuilder.bindMarker(this.conf.schema.embedding()));\n\n\t\t\tfor (String metadataField : fields) {\n\t\t\t\tstmt = stmt.value(metadataField, QueryBuilder.bindMarker(metadataField));\n\t\t\t}\n\t\t\treturn this.conf.session.prepare(stmt.build());\n\t\t});",
                "is_abstract": "",
                "class_name": "CassandraVectorStore",
                "annotations": []
            },
            {
                "name": "similaritySearchStatement",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "StringBuilder ids = new StringBuilder();\n\t\tfor (var m : this.conf.schema.partitionKeys()) {\n\t\t\tids.append(m.name()).append(',');\n\t\t}\n\t\tfor (var m : this.conf.schema.clusteringKeys()) {\n\t\t\tids.append(m.name()).append(',');\n\t\t}\n\t\tids.deleteCharAt(ids.length() - 1);\n\n\t\tString similarityFunction = new StringBuilder(\"similarity_\").append(this.similarity.toString().toLowerCase())\n\t\t\t.append('(')\n\t\t\t.append(conf.schema.embedding())\n\t\t\t.append(\",?)\")\n\t\t\t.toString();\n\n\t\tStringBuilder extraSelectFields = new StringBuilder();\n\t\tfor (var m : this.conf.schema.metadataColumns()) {\n\t\t\textraSelectFields.append(',').append(m.name());\n\t\t}\n\n\t\t// java-driver-query-builder doesn't support orderByAnnOf yet\n\t\tString query = String.format(QUERY_FORMAT, similarityFunction, ids.toString(), this.conf.schema.content(),\n\t\t\t\textraSelectFields.toString(), this.conf.schema.keyspace(), this.conf.schema.table(),\n\t\t\t\tthis.conf.schema.embedding());\n\n\t\tquery = query.replace(\"?\", \"%s\");\n\t\tlogger.debug(\"preparing {}\", query);\n\t\treturn query;",
                "is_abstract": "",
                "class_name": "CassandraVectorStore",
                "annotations": []
            },
            {
                "name": "getDocumentId",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "List<Object> primaryKeyValues = new ArrayList<>();\n\t\tfor (var m : this.conf.schema.partitionKeys()) {\n\t\t\tprimaryKeyValues.add(row.get(m.name(), m.javaType()));\n\t\t}\n\t\tfor (var m : this.conf.schema.clusteringKeys()) {\n\t\t\tprimaryKeyValues.add(row.get(m.name(), m.javaType()));\n\t\t}\n\t\treturn this.conf.primaryKeyTranslator.apply(primaryKeyValues);",
                "is_abstract": "",
                "class_name": "CassandraVectorStore",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/vector-stores/spring-ai-cassandra/src/main/java/org/springframework/ai/vectorstore/CassandraFilterExpressionConverter.java",
        "class_names": [
            "CassandraFilterExpressionConverter"
        ],
        "imports": "import org.springframework.ai.vectorstore.filter.Filter;\nimport java.util.stream.Collectors;\nimport java.util.Collection;\nimport org.springframework.ai.vectorstore.filter.Filter.ExpressionType;\nimport org.springframework.ai.vectorstore.filter.Filter.Key;\nimport java.util.Map;\nimport org.springframework.ai.vectorstore.filter.Filter.Value;\nimport com.datastax.oss.driver.api.core.metadata.schema.ColumnMetadata;\nimport java.util.function.Function;\nimport com.datastax.oss.driver.api.core.type.codec.registry.CodecRegistry;\nimport org.springframework.ai.vectorstore.filter.converter.AbstractFilterExpressionConverter;\nimport com.datastax.oss.driver.shaded.guava.common.base.Preconditions;\nimport java.util.Optional;\nimport com.datastax.oss.driver.api.core.type.DataTypes;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.CassandraFilterExpressionConverter": "org.springframework.ai.vectorstore.CassandraFilterExpressionConverter",
            "org.springframework.ai.vectorstore.doKey": "org.springframework.ai.vectorstore.doKey",
            "org.springframework.ai.vectorstore.doExpression": "org.springframework.ai.vectorstore.doExpression",
            "org.springframework.ai.vectorstore.doOperand": "org.springframework.ai.vectorstore.doOperand",
            "org.springframework.ai.vectorstore.doBinaryOperation": "org.springframework.ai.vectorstore.doBinaryOperation",
            "org.springframework.ai.vectorstore.doField": "org.springframework.ai.vectorstore.doField",
            "org.springframework.ai.vectorstore.doListValu": "org.springframework.ai.vectorstore.doListValu",
            "org.springframework.ai.vectorstore.doValu": "org.springframework.ai.vectorstore.doValu",
            "org.springframework.ai.vectorstore.getColumn": "org.springframework.ai.vectorstore.getColumn",
            "org.springframework.ai.vectorstore.columnsByNam": "org.springframework.ai.vectorstore.columnsByNam"
        },
        "package": "package org.springframework.ai.vectorstore;",
        "property_declarations": [
            "private final Map<String, ColumnMetadata> columnsByName;"
        ],
        "functions": [
            {
                "name": "doKey",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String keyName = key.key();\n\t\tOptional<ColumnMetadata> column = getColumn(keyName);\n\t\tPreconditions.checkArgument(column.isPresent(), \"No metafield %s has been configured\", keyName);\n\t\tcontext.append(column.get().getName().asCql(false));",
                "is_abstract": "",
                "class_name": "CassandraFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "doExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "switch (expression.type()) {\n\t\t\tcase AND -> doBinaryOperation(\" and \", expression, context);\n\t\t\tcase OR -> doBinaryOperation(\" or \", expression, context);\n\t\t\tcase NIN, NOT -> throw new UnsupportedOperationException(\n\t\t\t\t\tString.format(\"Expression type %s not yet implemented. Patches welcome.\", expression.type()));\n\t\t\tdefault -> doField(expression, context);\n\t\t}",
                "is_abstract": "",
                "class_name": "CassandraFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "doOperand",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "switch (type) {\n\t\t\tcase EQ -> context.append(\" = \");\n\t\t\tcase NE -> context.append(\" != \");\n\t\t\tcase GT -> context.append(\" > \");\n\t\t\tcase GTE -> context.append(\" >= \");\n\t\t\tcase IN -> context.append(\" IN \");\n\t\t\tcase LT -> context.append(\" < \");\n\t\t\tcase LTE -> context.append(\" <= \");\n\t\t\t// TODO SAI supports collections\n\t\t\t// reach out to mck@apache.org if you'd like these implemented\n\t\t\t// case CONTAINS -> context.append(\" CONTAINS \");\n\t\t\t// case CONTAINS_KEY -> context.append(\" CONTAINS_KEY \");\n\t\t\tdefault -> throw new UnsupportedOperationException(\n\t\t\t\t\tString.format(\"Expression type %s not yet implemented. Patches welcome.\", type));\n\t\t}",
                "is_abstract": "",
                "class_name": "CassandraFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "doBinaryOperation",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.convertOperand(expression.left(), context);\n\t\tcontext.append(operator);\n\t\tthis.convertOperand(expression.right(), context);",
                "is_abstract": "",
                "class_name": "CassandraFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "doField",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "doKey((Key) expression.left(), context);\n\t\tdoOperand(expression.type(), context);\n\t\tColumnMetadata column = getColumn(((Key) expression.left()).key()).get();\n\t\tvar v = ((Value) expression.right()).value();\n\t\tif (ExpressionType.IN.equals(expression.type())) {\n\t\t\tPreconditions.checkArgument(v instanceof Collection);\n\t\t\tdoListValue(column, v, context);\n\t\t}\n\t\telse {\n\t\t\tdoValue(column, v, context);\n\t\t}",
                "is_abstract": "",
                "class_name": "CassandraFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "doListValue",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "context.append('(');\n\t\tfor (var e : (Collection) v) {\n\t\t\tdoValue(column, e, context);\n\t\t\tcontext.append(',');\n\t\t}\n\t\tcontext.deleteCharAt(context.length() - 1);\n\t\tcontext.append(')');",
                "is_abstract": "",
                "class_name": "CassandraFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "doValue",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (DataTypes.SMALLINT.equals(column.getType())) {\n\t\t\tv = ((Number) v).shortValue();\n\t\t}\n\t\tcontext.append(CodecRegistry.DEFAULT.codecFor(column.getType()).format(v));",
                "is_abstract": "",
                "class_name": "CassandraFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "getColumn",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Optional<ColumnMetadata> column = Optional.ofNullable(this.columnsByName.get(name));\n\n\t\t// work around the need to escape filter keys the ANTLR parser doesn't like\n\t\t// e.g. with underscores like chunk_no\n\t\tif (column.isEmpty()) {\n\t\t\tif (name.startsWith(\"\\\"\") && name.endsWith(\"\\\"\")) {\n\t\t\t\tname = name.substring(1, name.length() - 1);\n\t\t\t\tcolumn = Optional.ofNullable(this.columnsByName.get(name));\n\t\t\t}\n\t\t}\n\t\treturn column;",
                "is_abstract": "",
                "class_name": "CassandraFilterExpressionConverter",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/vector-stores/spring-ai-cassandra/src/main/java/org/springframework/ai/vectorstore/CassandraVectorStoreConfig.java",
        "class_names": [
            "Builder",
            "CassandraVectorStoreConfig"
        ],
        "imports": "import java.util.List;\nimport com.datastax.oss.driver.shaded.guava.common.annotations.VisibleForTesting;\nimport com.datastax.oss.driver.api.querybuilder.schema.CreateTable;\nimport java.util.concurrent.Executors;\nimport com.datastax.oss.driver.shaded.guava.common.base.Preconditions;\nimport com.datastax.oss.driver.api.core.metadata.schema.TableMetadata;\nimport com.datastax.oss.driver.api.querybuilder.schema.CreateTableStart;\nimport org.slf4j.Logger;\nimport com.datastax.oss.driver.api.core.CqlSession;\nimport java.util.function.Function;\nimport com.datastax.oss.driver.api.core.cql.SimpleStatement;\nimport java.net.InetSocketAddress;\nimport com.datastax.oss.driver.api.querybuilder.schema.AlterTableAddColumnEnd;\nimport java.time.Duration;\nimport java.util.HashSet;\nimport com.datastax.oss.driver.api.querybuilder.schema.AlterTableAddColumn;\nimport org.slf4j.LoggerFactory;\nimport com.datastax.oss.driver.api.core.type.DataType;\nimport java.util.concurrent.Executor;\nimport com.datastax.oss.driver.api.querybuilder.BuildableQuery;\nimport java.util.Collections;\nimport java.util.Set;\nimport com.datastax.oss.driver.api.core.CqlSessionBuilder;\nimport com.datastax.oss.driver.api.core.type.reflect.GenericType;\nimport java.util.stream.Stream;\nimport com.datastax.oss.driver.api.core.metadata.schema.ColumnMetadata;\nimport com.datastax.oss.driver.api.querybuilder.SchemaBuilder;\nimport com.datastax.oss.driver.api.core.type.codec.registry.CodecRegistry;\nimport java.util.Optional;\nimport com.datastax.oss.driver.api.core.type.DataTypes;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.CassandraVectorStoreConfi": "org.springframework.ai.vectorstore.CassandraVectorStoreConfi",
            "org.springframework.ai.vectorstore.Builder": "org.springframework.ai.vectorstore.Builder",
            "org.springframework.ai.vectorstore.javaTy": "org.springframework.ai.vectorstore.javaTy",
            "org.springframework.ai.vectorstore.indexed": "org.springframework.ai.vectorstore.indexed",
            "org.springframework.ai.vectorstore.builder": "org.springframework.ai.vectorstore.builder",
            "org.springframework.ai.vectorstore.clos": "org.springframework.ai.vectorstore.clos",
            "org.springframework.ai.vectorstore.getPrimaryKeyColumn": "org.springframework.ai.vectorstore.getPrimaryKeyColumn",
            "org.springframework.ai.vectorstore.dropKeys": "org.springframework.ai.vectorstore.dropKeys",
            "org.springframework.ai.vectorstore.withCqlSession": "org.springframework.ai.vectorstore.withCqlSession",
            "org.springframework.ai.vectorstore.addContactPoint": "org.springframework.ai.vectorstore.addContactPoint",
            "org.springframework.ai.vectorstore.withLocalDatacenter": "org.springframework.ai.vectorstore.withLocalDatacenter",
            "org.springframework.ai.vectorstore.withKeyspaceNam": "org.springframework.ai.vectorstore.withKeyspaceNam",
            "org.springframework.ai.vectorstore.withTableNam": "org.springframework.ai.vectorstore.withTableNam",
            "org.springframework.ai.vectorstore.withPartitionKeys": "org.springframework.ai.vectorstore.withPartitionKeys",
            "org.springframework.ai.vectorstore.withClusteringKeys": "org.springframework.ai.vectorstore.withClusteringKeys",
            "org.springframework.ai.vectorstore.withIndexNam": "org.springframework.ai.vectorstore.withIndexNam",
            "org.springframework.ai.vectorstore.withContentColumnNam": "org.springframework.ai.vectorstore.withContentColumnNam",
            "org.springframework.ai.vectorstore.withEmbeddingColumnNam": "org.springframework.ai.vectorstore.withEmbeddingColumnNam",
            "org.springframework.ai.vectorstore.addMetadataColumns": "org.springframework.ai.vectorstore.addMetadataColumns",
            "org.springframework.ai.vectorstore.addMetadataColumn": "org.springframework.ai.vectorstore.addMetadataColumn",
            "org.springframework.ai.vectorstore.disallowSchemaChanges": "org.springframework.ai.vectorstore.disallowSchemaChanges",
            "org.springframework.ai.vectorstore.withFixedThreadPoolExecutorSiz": "org.springframework.ai.vectorstore.withFixedThreadPoolExecutorSiz",
            "org.springframework.ai.vectorstore.withDocumentIdTranslator": "org.springframework.ai.vectorstore.withDocumentIdTranslator",
            "org.springframework.ai.vectorstore.withPrimaryKeyTranslator": "org.springframework.ai.vectorstore.withPrimaryKeyTranslator",
            "org.springframework.ai.vectorstore.build": "org.springframework.ai.vectorstore.build",
            "org.springframework.ai.vectorstore.ensureSchemaExists": "org.springframework.ai.vectorstore.ensureSchemaExists",
            "org.springframework.ai.vectorstore.checkSchemaAgreement": "org.springframework.ai.vectorstore.checkSchemaAgreement",
            "org.springframework.ai.vectorstore.checkSchemaValid": "org.springframework.ai.vectorstore.checkSchemaValid",
            "org.springframework.ai.vectorstore.ensureIndexesExists": "org.springframework.ai.vectorstore.ensureIndexesExists",
            "org.springframework.ai.vectorstore.ensureTableExists": "org.springframework.ai.vectorstore.ensureTableExists",
            "org.springframework.ai.vectorstore.ensureTableColumnsExist": "org.springframework.ai.vectorstore.ensureTableColumnsExist",
            "org.springframework.ai.vectorstore.ensureKeyspaceExists": "org.springframework.ai.vectorstore.ensureKeyspaceExists",
            "org.springframework.ai.vectorstore.DEFAULT_KEYSPACE_NAME": "org.springframework.ai.vectorstore.DEFAULT_KEYSPACE_NAME",
            "org.springframework.ai.vectorstore.DEFAULT_TABLE_NAME": "org.springframework.ai.vectorstore.DEFAULT_TABLE_NAME",
            "org.springframework.ai.vectorstore.DEFAULT_ID_NAME": "org.springframework.ai.vectorstore.DEFAULT_ID_NAME",
            "org.springframework.ai.vectorstore.DEFAULT_INDEX_NAME": "org.springframework.ai.vectorstore.DEFAULT_INDEX_NAME",
            "org.springframework.ai.vectorstore.DEFAULT_CONTENT_COLUMN_NAME": "org.springframework.ai.vectorstore.DEFAULT_CONTENT_COLUMN_NAME",
            "org.springframework.ai.vectorstore.DEFAULT_EMBEDDING_COLUMN_NAME": "org.springframework.ai.vectorstore.DEFAULT_EMBEDDING_COLUMN_NAME",
            "org.springframework.ai.vectorstore.DEFAULT_ADD_CONCURRENCY": "org.springframework.ai.vectorstore.DEFAULT_ADD_CONCURRENCY",
            "org.springframework.ai.vectorstore.logger": "org.springframework.ai.vectorstore.logger",
            "org.springframework.ai.vectorstore.session": "org.springframework.ai.vectorstore.session",
            "org.springframework.ai.vectorstore.schem": "org.springframework.ai.vectorstore.schem",
            "org.springframework.ai.vectorstore.documentIdTranslator": "org.springframework.ai.vectorstore.documentIdTranslator",
            "org.springframework.ai.vectorstore.primaryKeyTranslator": "org.springframework.ai.vectorstore.primaryKeyTranslator",
            "org.springframework.ai.vectorstore.executor": "org.springframework.ai.vectorstore.executor",
            "org.springframework.ai.vectorstore.closeSessionOnClos": "org.springframework.ai.vectorstore.closeSessionOnClos",
            "org.springframework.ai.vectorstore.sessionBuilder": "org.springframework.ai.vectorstore.sessionBuilder",
            "org.springframework.ai.vectorstore.keys": "org.springframework.ai.vectorstore.keys",
            "org.springframework.ai.vectorstore.tabl": "org.springframework.ai.vectorstore.tabl",
            "org.springframework.ai.vectorstore.partitionKeys": "org.springframework.ai.vectorstore.partitionKeys",
            "org.springframework.ai.vectorstore.clusteringKeys": "org.springframework.ai.vectorstore.clusteringKeys",
            "org.springframework.ai.vectorstore.indexNam": "org.springframework.ai.vectorstore.indexNam",
            "org.springframework.ai.vectorstore.contentColumnNam": "org.springframework.ai.vectorstore.contentColumnNam",
            "org.springframework.ai.vectorstore.embeddingColumnNam": "org.springframework.ai.vectorstore.embeddingColumnNam",
            "org.springframework.ai.vectorstore.metadataColumns": "org.springframework.ai.vectorstore.metadataColumns",
            "org.springframework.ai.vectorstore.disallowSchemaCreation": "org.springframework.ai.vectorstore.disallowSchemaCreation",
            "org.springframework.ai.vectorstore.fixedThreadPoolExecutorSiz": "org.springframework.ai.vectorstore.fixedThreadPoolExecutorSiz"
        },
        "package": "package org.springframework.ai.vectorstore;",
        "property_declarations": [
            "private CqlSession session = null;",
            "private boolean disallowSchemaCreation = false;",
            "public static final String DEFAULT_ID_NAME = \"id\";",
            "private final boolean closeSessionOnClose;",
            "private List<SchemaColumn> partitionKeys = List.of(new SchemaColumn(DEFAULT_ID_NAME, DataTypes.TEXT));",
            "private DocumentIdTranslator documentIdTranslator = (String id) -> List.of(id);",
            "private String indexName = DEFAULT_INDEX_NAME;",
            "private List<SchemaColumn> clusteringKeys = List.of();",
            "public static final int DEFAULT_ADD_CONCURRENCY = 16;",
            "private static final Logger logger = LoggerFactory.getLogger(CassandraVectorStoreConfig.class);",
            "private int fixedThreadPoolExecutorSize = DEFAULT_ADD_CONCURRENCY;",
            "final DocumentIdTranslator documentIdTranslator;",
            "final PrimaryKeyTranslator primaryKeyTranslator;",
            "final boolean disallowSchemaChanges;",
            "private PrimaryKeyTranslator primaryKeyTranslator = (List<Object> primaryKeyColumns) -> {\n\t\t\tif (primaryKeyColumns.isEmpty()) {\n\t\t\t\treturn \"test\";\n\t\t\t}\n\t\t\tPreconditions.checkArgument(1 == primaryKeyColumns.size());\n\t\t\treturn (String) primaryKeyColumns.get(0);\n\t\t};",
            "private String contentColumnName = DEFAULT_CONTENT_COLUMN_NAME;",
            "private String table = DEFAULT_TABLE_NAME;",
            "public static final String DEFAULT_KEYSPACE_NAME = \"springframework\";",
            "final CqlSession session;",
            "public static final String DEFAULT_CONTENT_COLUMN_NAME = \"content\";",
            "private CqlSessionBuilder sessionBuilder = null;",
            "private String keyspace = DEFAULT_KEYSPACE_NAME;",
            "private Set<SchemaColumn> metadataColumns = new HashSet<>();",
            "final Executor executor;",
            "private String embeddingColumnName = DEFAULT_EMBEDDING_COLUMN_NAME;",
            "final Schema schema;",
            "public static final String DEFAULT_INDEX_NAME = \"embedding_index\";",
            "public static final String DEFAULT_EMBEDDING_COLUMN_NAME = \"embedding\";",
            "public static final String DEFAULT_TABLE_NAME = \"ai_vector_store\";"
        ],
        "functions": [
            {
                "name": "javaType",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return CodecRegistry.DEFAULT.codecFor(type).getJavaType();",
                "is_abstract": "",
                "class_name": "CassandraVectorStoreConfig",
                "annotations": []
            },
            {
                "name": "indexed",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "for (SchemaColumnTags t : tags) {\n\t\t\t\tif (SchemaColumnTags.INDEXED == t) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;",
                "is_abstract": "",
                "class_name": "CassandraVectorStoreConfig",
                "annotations": []
            },
            {
                "name": "builder",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Builder();",
                "is_abstract": "",
                "class_name": "CassandraVectorStoreConfig",
                "annotations": []
            },
            {
                "name": "close",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (this.closeSessionOnClose) {\n\t\t\tthis.session.close();\n\t\t}",
                "is_abstract": "",
                "class_name": "CassandraVectorStoreConfig",
                "annotations": []
            },
            {
                "name": "getPrimaryKeyColumn",
                "parameters": [
                    ""
                ],
                "return_type": "this",
                "body": "return index < this.schema.partitionKeys().size() ? this.schema.partitionKeys().get(index)\n\t\t\t\t: this.schema.clusteringKeys().get(index - this.schema.partitionKeys().size());",
                "is_abstract": "",
                "class_name": "CassandraVectorStoreConfig",
                "annotations": []
            },
            {
                "name": "dropKeyspace",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Preconditions.checkState(this.schema.keyspace.startsWith(\"test_\"), \"Only test keyspaces can be dropped\");\n\t\tthis.session.execute(SchemaBuilder.dropKeyspace(this.schema.keyspace).ifExists().build());",
                "is_abstract": "",
                "class_name": "CassandraVectorStoreConfig",
                "annotations": []
            },
            {
                "name": "withCqlSession",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Preconditions.checkState(null == this.sessionBuilder,\n\t\t\t\t\t\"Cannot call withContactPoint(..) or withLocalDatacenter(..) and this method\");\n\n\t\t\tthis.session = session;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "CassandraVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "addContactPoint",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Preconditions.checkState(null == this.session, \"Cannot call withCqlSession(..) and this method\");\n\t\t\tif (null == this.sessionBuilder) {\n\t\t\t\tthis.sessionBuilder = new CqlSessionBuilder();\n\t\t\t}\n\t\t\tthis.sessionBuilder.addContactPoint(contactPoint);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "CassandraVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "withLocalDatacenter",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Preconditions.checkState(null == this.session, \"Cannot call withCqlSession(..) and this method\");\n\t\t\tif (null == this.sessionBuilder) {\n\t\t\t\tthis.sessionBuilder = new CqlSessionBuilder();\n\t\t\t}\n\t\t\tthis.sessionBuilder.withLocalDatacenter(localDC);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "CassandraVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "withKeyspaceName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.keyspace = keyspace;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "CassandraVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "withTableName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.table = table;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "CassandraVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "withPartitionKeys",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.partitionKeys = partitionKeys;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "CassandraVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "withClusteringKeys",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.clusteringKeys = clusteringKeys;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "CassandraVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "withIndexName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.indexName = name;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "CassandraVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "withContentColumnName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.contentColumnName = name;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "CassandraVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "withEmbeddingColumnName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.embeddingColumnName = name;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "CassandraVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "addMetadataColumns",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Builder builder = this;\n\t\t\tfor (SchemaColumn f : columns) {\n\t\t\t\tbuilder = builder.addMetadataColumn(f);\n\t\t\t}\n\t\t\treturn builder;",
                "is_abstract": "",
                "class_name": "CassandraVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "addMetadataColumn",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Preconditions.checkArgument(\n\t\t\t\t\tthis.metadataColumns.stream().noneMatch((sc) -> sc.name().equals(column.name())),\n\t\t\t\t\t\"A metadata column with name %s has already been added\", column.name());\n\n\t\t\tthis.metadataColumns.add(column);\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "CassandraVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "disallowSchemaChanges",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.disallowSchemaCreation = true;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "CassandraVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "withFixedThreadPoolExecutorSize",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Preconditions.checkArgument(0 < threads);\n\t\t\tthis.fixedThreadPoolExecutorSize = threads;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "CassandraVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "withDocumentIdTranslator",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.documentIdTranslator = documentIdTranslator;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "CassandraVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "withPrimaryKeyTranslator",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.primaryKeyTranslator = primaryKeyTranslator;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "CassandraVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "build",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "for (SchemaColumn metadata : this.metadataColumns) {\n\n\t\t\t\tPreconditions.checkArgument(\n\t\t\t\t\t\t!this.partitionKeys.stream().anyMatch((c) -> c.name().equals(metadata.name())),\n\t\t\t\t\t\t\"metadataColumn %s cannot have same name as a partition key\", metadata.name());\n\n\t\t\t\tPreconditions.checkArgument(\n\t\t\t\t\t\t!this.clusteringKeys.stream().anyMatch((c) -> c.name().equals(metadata.name())),\n\t\t\t\t\t\t\"metadataColumn %s cannot have same name as a clustering key\", metadata.name());\n\n\t\t\t\tPreconditions.checkArgument(!metadata.name().equals(this.contentColumnName),\n\t\t\t\t\t\t\"metadataColumn %s cannot have same name as content column name\", this.contentColumnName);\n\n\t\t\t\tPreconditions.checkArgument(!metadata.name().equals(this.embeddingColumnName),\n\t\t\t\t\t\t\"metadataColumn %s cannot have same name as embedding column name\", this.embeddingColumnName);\n\n\t\t\t}\n\t\t\t{\n\t\t\t\tint primaryKeyColumnsCount = this.partitionKeys.size() + this.clusteringKeys.size();\n\t\t\t\tString exampleId = this.primaryKeyTranslator.apply(Collections.emptyList());\n\t\t\t\tList<Object> testIdTranslation = this.documentIdTranslator.apply(exampleId);\n\n\t\t\t\tPreconditions.checkArgument(testIdTranslation.size() == primaryKeyColumnsCount,\n\t\t\t\t\t\t\"documentIdTranslator results length %s doesn't match number of primary key columns %s\",\n\t\t\t\t\t\tString.valueOf(testIdTranslation.size()), String.valueOf(primaryKeyColumnsCount));\n\n\t\t\t\tPreconditions.checkArgument(\n\t\t\t\t\t\texampleId.equals(this.primaryKeyTranslator.apply(this.documentIdTranslator.apply(exampleId))),\n\t\t\t\t\t\t\"primaryKeyTranslator is not an inverse function to documentIdTranslator\");\n\t\t\t}\n\t\t\treturn new CassandraVectorStoreConfig(this);",
                "is_abstract": "",
                "class_name": "CassandraVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "ensureSchemaExists",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (!this.disallowSchemaChanges) {\n\t\t\tensureKeyspaceExists();\n\t\t\tensureTableExists(vectorDimension);\n\t\t\tensureTableColumnsExist(vectorDimension);\n\t\t\tensureIndexesExists();\n\t\t\tcheckSchemaAgreement();\n\t\t}\n\t\telse {\n\t\t\tcheckSchemaValid(vectorDimension);\n\t\t}",
                "is_abstract": "",
                "class_name": "CassandraVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "checkSchemaAgreement",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (!this.session.checkSchemaAgreement()) {\n\t\t\tlogger.warn(\"Waiting for cluster schema agreement, sleeping 10s\u2026\");\n\t\t\ttry {\n\t\t\t\tThread.sleep(Duration.ofSeconds(10).toMillis());\n\t\t\t}\n\t\t\tcatch (InterruptedException ex) {\n\t\t\t\tThread.currentThread().interrupt();\n\t\t\t\tthrow new IllegalStateException(ex);\n\t\t\t}\n\t\t\tif (!this.session.checkSchemaAgreement()) {\n\t\t\t\tlogger.error(\"no cluster schema agreement still, continuing, let's hope this works\u2026\");\n\t\t\t}\n\t\t}",
                "is_abstract": "",
                "class_name": "CassandraVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "checkSchemaValid",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Preconditions.checkState(this.session.getMetadata().getKeyspace(this.schema.keyspace).isPresent(),\n\t\t\t\t\"keyspace %s does not exist\", this.schema.keyspace);\n\n\t\tPreconditions.checkState(this.session.getMetadata()\n\t\t\t.getKeyspace(this.schema.keyspace)\n\t\t\t.get()\n\t\t\t.getTable(this.schema.table)\n\t\t\t.isPresent(), \"table %s does not exist\");\n\n\t\tTableMetadata tableMetadata = this.session.getMetadata()\n\t\t\t.getKeyspace(this.schema.keyspace)\n\t\t\t.get()\n\t\t\t.getTable(this.schema.table)\n\t\t\t.get();\n\n\t\tPreconditions.checkState(tableMetadata.getColumn(this.schema.content).isPresent(), \"column %s does not exist\",\n\t\t\t\tthis.schema.content);\n\n\t\tPreconditions.checkState(tableMetadata.getColumn(this.schema.embedding).isPresent(), \"column %s does not exist\",\n\t\t\t\tthis.schema.embedding);\n\n\t\tfor (SchemaColumn m : this.schema.metadataColumns) {\n\t\t\tOptional<ColumnMetadata> column = tableMetadata.getColumn(m.name());\n\t\t\tPreconditions.checkState(column.isPresent(), \"column %s does not exist\", m.name());\n\n\t\t\tPreconditions.checkArgument(column.get().getType().equals(m.type()),\n\t\t\t\t\t\"Mismatching type on metadata column %s of %s vs %s\", m.name(), column.get().getType(), m.type());\n\n\t\t\tif (m.indexed()) {\n\t\t\t\tPreconditions.checkState(\n\t\t\t\t\t\ttableMetadata.getIndexes().values().stream().anyMatch((i) -> i.getTarget().equals(m.name())),\n\t\t\t\t\t\t\"index %s does not exist\", m.name());\n\t\t\t}\n\t\t}",
                "is_abstract": "",
                "class_name": "CassandraVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "ensureIndexesExists",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "{\n\t\t\tSimpleStatement indexStmt = SchemaBuilder.createIndex(this.schema.index)\n\t\t\t\t.ifNotExists()\n\t\t\t\t.custom(\"SAI\")\n\t\t\t\t.onTable(this.schema.keyspace, this.schema.table)\n\t\t\t\t.andColumn(this.schema.embedding)\n\t\t\t\t.build();\n\n\t\t\tlogger.debug(\"Executing {}\", indexStmt.getQuery());\n\t\t\tthis.session.execute(indexStmt);\n\t\t}\n\t\tStream\n\t\t\t.concat(this.schema.partitionKeys.stream(),\n\t\t\t\t\tStream.concat(this.schema.clusteringKeys.stream(), this.schema.metadataColumns.stream()))\n\t\t\t.filter((cs) -> cs.indexed())\n\t\t\t.forEach((metadata) -> {\n\n\t\t\t\tSimpleStatement indexStmt = SchemaBuilder.createIndex(String.format(\"%s_idx\", metadata.name()))\n\t\t\t\t\t.ifNotExists()\n\t\t\t\t\t.custom(\"SAI\")\n\t\t\t\t\t.onTable(this.schema.keyspace, this.schema.table)\n\t\t\t\t\t.andColumn(metadata.name())\n\t\t\t\t\t.build();\n\n\t\t\t\tlogger.debug(\"Executing {}\", indexStmt.getQuery());\n\t\t\t\tthis.session.execute(indexStmt);\n\t\t\t});",
                "is_abstract": "",
                "class_name": "CassandraVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "ensureTableExists",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "CreateTable createTable = null;\n\n\t\tCreateTableStart createTableStart = SchemaBuilder.createTable(this.schema.keyspace, this.schema.table)\n\t\t\t.ifNotExists();\n\n\t\tfor (SchemaColumn partitionKey : this.schema.partitionKeys) {\n\t\t\tcreateTable = (null != createTable ? createTable : createTableStart).withPartitionKey(partitionKey.name,\n\t\t\t\t\tpartitionKey.type);\n\t\t}\n\t\tfor (SchemaColumn clusteringKey : this.schema.clusteringKeys) {\n\t\t\tcreateTable = createTable.withClusteringColumn(clusteringKey.name, clusteringKey.type);\n\t\t}\n\n\t\tcreateTable = createTable.withColumn(this.schema.content, DataTypes.TEXT);\n\n\t\tfor (SchemaColumn metadata : this.schema.metadataColumns) {\n\t\t\tcreateTable = createTable.withColumn(metadata.name(), metadata.type());\n\t\t}\n\n\t\t// https://datastax-oss.atlassian.net/browse/JAVA-3118\n\t\t// .withColumn(config.embedding, new DefaultVectorType(DataTypes.FLOAT,\n\t\t// vectorDimension));\n\n\t\tStringBuilder tableStmt = new StringBuilder(createTable.asCql());\n\t\ttableStmt.setLength(tableStmt.length() - 1);\n\t\ttableStmt.append(',')\n\t\t\t.append(this.schema.embedding)\n\t\t\t.append(\" vector<float,\")\n\t\t\t.append(vectorDimension)\n\t\t\t.append(\">)\");\n\t\tlogger.debug(\"Executing {}\", tableStmt.toString());\n\t\tthis.session.execute(tableStmt.toString());",
                "is_abstract": "",
                "class_name": "CassandraVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "ensureTableColumnsExist",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "TableMetadata tableMetadata = this.session.getMetadata()\n\t\t\t.getKeyspace(this.schema.keyspace)\n\t\t\t.get()\n\t\t\t.getTable(this.schema.table)\n\t\t\t.get();\n\n\t\tSet<SchemaColumn> newColumns = new HashSet<>();\n\t\tboolean addContent = tableMetadata.getColumn(this.schema.content).isEmpty();\n\t\tboolean addEmbedding = tableMetadata.getColumn(this.schema.embedding).isEmpty();\n\n\t\tfor (SchemaColumn metadata : this.schema.metadataColumns) {\n\t\t\tOptional<ColumnMetadata> column = tableMetadata.getColumn(metadata.name());\n\t\t\tif (column.isPresent()) {\n\n\t\t\t\tPreconditions.checkArgument(column.get().getType().equals(metadata.type()),\n\t\t\t\t\t\t\"Cannot change type on metadata column %s from %s to %s\", metadata.name(),\n\t\t\t\t\t\tcolumn.get().getType(), metadata.type());\n\t\t\t}\n\t\t\telse {\n\t\t\t\tnewColumns.add(metadata);\n\t\t\t}\n\t\t}\n\n\t\tif (!newColumns.isEmpty() || addContent || addEmbedding) {\n\t\t\tAlterTableAddColumn alterTable = SchemaBuilder.alterTable(this.schema.keyspace, this.schema.table);\n\t\t\tfor (SchemaColumn metadata : newColumns) {\n\t\t\t\talterTable = alterTable.addColumn(metadata.name(), metadata.type());\n\t\t\t}\n\t\t\tif (addContent) {\n\t\t\t\talterTable = alterTable.addColumn(this.schema.content, DataTypes.TEXT);\n\t\t\t}\n\t\t\tif (addEmbedding) {\n\t\t\t\t// special case for embedding column, bc JAVA-3118, as above\n\t\t\t\tStringBuilder alterTableStmt = new StringBuilder(((BuildableQuery) alterTable).asCql());\n\t\t\t\tif (newColumns.isEmpty() && !addContent) {\n\t\t\t\t\talterTableStmt.append(\" ADD \");\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\talterTableStmt.setLength(alterTableStmt.length() - 1);\n\t\t\t\t\talterTableStmt.append(',');\n\t\t\t\t}\n\t\t\t\talterTableStmt.append(this.schema.embedding)\n\t\t\t\t\t.append(\" vector<float,\")\n\t\t\t\t\t.append(vectorDimension)\n\t\t\t\t\t.append(\">\");\n\n\t\t\t\tlogger.debug(\"Executing {}\", alterTableStmt.toString());\n\t\t\t\tthis.session.execute(alterTableStmt.toString());\n\t\t\t}\n\t\t\telse {\n\t\t\t\tSimpleStatement stmt = ((AlterTableAddColumnEnd) alterTable).build();\n\t\t\t\tlogger.debug(\"Executing {}\", stmt.getQuery());\n\t\t\t\tthis.session.execute(stmt);\n\t\t\t}\n\t\t}",
                "is_abstract": "",
                "class_name": "CassandraVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "ensureKeyspaceExists",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "SimpleStatement keyspaceStmt = SchemaBuilder.createKeyspace(this.schema.keyspace)\n\t\t\t.ifNotExists()\n\t\t\t.withSimpleStrategy(1)\n\t\t\t.build();\n\n\t\tlogger.debug(\"Executing {}\", keyspaceStmt.getQuery());\n\t\tthis.session.execute(keyspaceStmt);",
                "is_abstract": "",
                "class_name": "CassandraVectorStoreConfig Builder",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/vector-stores/spring-ai-gemfire/src/test/java/org/springframework/ai/vectorstore/GemFireVectorStoreIT.java",
        "class_names": [
            "GemFireVectorStoreIT",
            "TestApplication"
        ],
        "imports": "import java.util.List;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport java.io.IOException;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport java.util.Map;\nimport org.awaitility.Awaitility;\nimport java.nio.charset.StandardCharsets;\nimport static org.hamcrest.Matchers.hasSize;\nimport org.junit.jupiter.api.AfterEach;\nimport org.springframework.ai.transformers.TransformersEmbeddingClient;\nimport org.springframework.context.annotation.Bean;\nimport static java.util.concurrent.TimeUnit.MINUTES;\nimport org.springframework.ai.vectorstore.GemFireVectorStore.GemFireVectorStoreConfig;\nimport java.util.Collections;\nimport org.springframework.core.io.DefaultResourceLoader;\nimport org.springframework.ai.embedding.EmbeddingClient;\nimport org.springframework.boot.SpringBootConfiguration;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.springframework.ai.document.Document;\nimport org.junit.jupiter.api.Test;\nimport java.util.UUID;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.GemFireVectorStoreIT": "org.springframework.ai.vectorstore.GemFireVectorStoreIT",
            "org.springframework.ai.vectorstore.TestApplication": "org.springframework.ai.vectorstore.TestApplication",
            "org.springframework.ai.vectorstore.getText": "org.springframework.ai.vectorstore.getText",
            "org.springframework.ai.vectorstore.createIndex": "org.springframework.ai.vectorstore.createIndex",
            "org.springframework.ai.vectorstore.deleteIndex": "org.springframework.ai.vectorstore.deleteIndex",
            "org.springframework.ai.vectorstore.addAndDeleteEmbeddingTest": "org.springframework.ai.vectorstore.addAndDeleteEmbeddingTest",
            "org.springframework.ai.vectorstore.addAndSearchTest": "org.springframework.ai.vectorstore.addAndSearchTest",
            "org.springframework.ai.vectorstore.documentUpdateTest": "org.springframework.ai.vectorstore.documentUpdateTest",
            "org.springframework.ai.vectorstore.searchThresholdTest": "org.springframework.ai.vectorstore.searchThresholdTest",
            "org.springframework.ai.vectorstore.gemfireVectorStoreConfi": "org.springframework.ai.vectorstore.gemfireVectorStoreConfi",
            "org.springframework.ai.vectorstore.vectorStor": "org.springframework.ai.vectorstore.vectorStor",
            "org.springframework.ai.vectorstore.embeddingClient": "org.springframework.ai.vectorstore.embeddingClient",
            "org.springframework.ai.vectorstore.INDEX_NAME": "org.springframework.ai.vectorstore.INDEX_NAME",
            "org.springframework.ai.vectorstore.documents": "org.springframework.ai.vectorstore.documents",
            "org.springframework.ai.vectorstore.contextRunner": "org.springframework.ai.vectorstore.contextRunner"
        },
        "package": "package org.springframework.ai.vectorstore;",
        "property_declarations": [
            "private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t.withUserConfiguration(TestApplication.class);",
            "List<Document> documents = List.of(\n\t\t\tnew Document(\"1\", getText(\"classpath:/test/data/spring.ai.txt\"), Map.of(\"meta1\", \"meta1\")),\n\t\t\tnew Document(\"2\", getText(\"classpath:/test/data/time.shelter.txt\"), Map.of()),\n\t\t\tnew Document(\"3\", getText(\"classpath:/test/data/great.depression.txt\"), Map.of(\"meta2\", \"meta2\")));",
            "public static final String INDEX_NAME = \"spring-ai-index1\";"
        ],
        "functions": [
            {
                "name": "getText",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var resource = new DefaultResourceLoader().getResource(uri);\n\t\ttry {\n\t\t\treturn resource.getContentAsString(StandardCharsets.UTF_8);\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}",
                "is_abstract": "",
                "class_name": "GemFireVectorStoreIT",
                "annotations": []
            },
            {
                "name": "createIndex",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(c -> c.getBean(GemFireVectorStore.class).createIndex(INDEX_NAME));",
                "is_abstract": "",
                "class_name": "GemFireVectorStoreIT",
                "annotations": []
            },
            {
                "name": "deleteIndex",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(c -> c.getBean(GemFireVectorStore.class).deleteIndex(INDEX_NAME));",
                "is_abstract": "",
                "class_name": "GemFireVectorStoreIT",
                "annotations": []
            },
            {
                "name": "addAndDeleteEmbeddingTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\t\t\tVectorStore vectorStore = context.getBean(VectorStore.class);\n\t\t\tvectorStore.add(documents);\n\t\t\tvectorStore.delete(documents.stream().map(doc -> doc.getId()).toList());\n\t\t\tAwaitility.await().atMost(1, MINUTES).until(() -> {\n\t\t\t\treturn vectorStore.similaritySearch(SearchRequest.query(\"Great Depression\").withTopK(3));\n\t\t\t}, hasSize(0));\n\t\t});",
                "is_abstract": "",
                "class_name": "GemFireVectorStoreIT",
                "annotations": []
            },
            {
                "name": "addAndSearchTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\t\t\tVectorStore vectorStore = context.getBean(VectorStore.class);\n\t\t\tvectorStore.add(documents);\n\n\t\t\tAwaitility.await().atMost(1, MINUTES).until(() -> {\n\t\t\t\treturn vectorStore.similaritySearch(SearchRequest.query(\"Great Depression\").withTopK(1));\n\t\t\t}, hasSize(1));\n\n\t\t\tList<Document> results = vectorStore.similaritySearch(SearchRequest.query(\"Great Depression\").withTopK(5));\n\t\t\tDocument resultDoc = results.get(0);\n\t\t\tassertThat(resultDoc.getId()).isEqualTo(documents.get(2).getId());\n\t\t\tassertThat(resultDoc.getContent()).contains(\"The Great Depression (1929\u20131939) was an economic shock\");\n\t\t\tassertThat(resultDoc.getMetadata()).hasSize(2);\n\t\t\tassertThat(resultDoc.getMetadata()).containsKey(\"meta2\");\n\t\t\tassertThat(resultDoc.getMetadata()).containsKey(\"distance\");\n\t\t});",
                "is_abstract": "",
                "class_name": "GemFireVectorStoreIT",
                "annotations": []
            },
            {
                "name": "documentUpdateTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\t\t\tVectorStore vectorStore = context.getBean(VectorStore.class);\n\n\t\t\tDocument document = new Document(UUID.randomUUID().toString(), \"Spring AI rocks!!\",\n\t\t\t\t\tCollections.singletonMap(\"meta1\", \"meta1\"));\n\t\t\tvectorStore.add(List.of(document));\n\t\t\tSearchRequest springSearchRequest = SearchRequest.query(\"Spring\").withTopK(5);\n\t\t\tAwaitility.await().atMost(1, MINUTES).until(() -> {\n\t\t\t\treturn vectorStore.similaritySearch(SearchRequest.query(\"Great Depression\").withTopK(1));\n\t\t\t}, hasSize(1));\n\t\t\tList<Document> results = vectorStore.similaritySearch(springSearchRequest);\n\t\t\tDocument resultDoc = results.get(0);\n\t\t\tassertThat(resultDoc.getId()).isEqualTo(document.getId());\n\t\t\tassertThat(resultDoc.getContent()).isEqualTo(\"Spring AI rocks!!\");\n\t\t\tassertThat(resultDoc.getMetadata()).containsKey(\"meta1\");\n\t\t\tassertThat(resultDoc.getMetadata()).containsKey(\"distance\");\n\n\t\t\tDocument sameIdDocument = new Document(document.getId(),\n\t\t\t\t\t\"The World is Big and Salvation Lurks Around the Corner\",\n\t\t\t\t\tCollections.singletonMap(\"meta2\", \"meta2\"));\n\n\t\t\tvectorStore.add(List.of(sameIdDocument));\n\t\t\tSearchRequest fooBarSearchRequest = SearchRequest.query(\"FooBar\").withTopK(5);\n\t\t\tresults = vectorStore.similaritySearch(fooBarSearchRequest);\n\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tresultDoc = results.get(0);\n\t\t\tassertThat(resultDoc.getId()).isEqualTo(document.getId());\n\t\t\tassertThat(resultDoc.getContent()).isEqualTo(\"The World is Big and Salvation Lurks Around the Corner\");\n\t\t\tassertThat(resultDoc.getMetadata()).containsKey(\"meta2\");\n\t\t\tassertThat(resultDoc.getMetadata()).containsKey(\"distance\");\n\t\t});",
                "is_abstract": "",
                "class_name": "GemFireVectorStoreIT",
                "annotations": []
            },
            {
                "name": "searchThresholdTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\t\t\tVectorStore vectorStore = context.getBean(VectorStore.class);\n\t\t\tvectorStore.add(documents);\n\n\t\t\tAwaitility.await().atMost(1, MINUTES).until(() -> {\n\t\t\t\treturn vectorStore\n\t\t\t\t\t.similaritySearch(SearchRequest.query(\"Great Depression\").withTopK(5).withSimilarityThresholdAll());\n\t\t\t}, hasSize(3));\n\n\t\t\tList<Document> fullResult = vectorStore\n\t\t\t\t.similaritySearch(SearchRequest.query(\"Depression\").withTopK(5).withSimilarityThresholdAll());\n\n\t\t\tList<Float> distances = fullResult.stream().map(doc -> (Float) doc.getMetadata().get(\"distance\")).toList();\n\t\t\tassertThat(distances).hasSize(3);\n\n\t\t\tfloat threshold = (distances.get(0) + distances.get(1)) / 2;\n\t\t\tList<Document> results = vectorStore\n\t\t\t\t.similaritySearch(SearchRequest.query(\"Depression\").withTopK(5).withSimilarityThreshold(1 - threshold));\n\n\t\t\tassertThat(results).hasSize(1);\n\n\t\t\tDocument resultDoc = results.get(0);\n\t\t\tassertThat(resultDoc.getId()).isEqualTo(documents.get(2).getId());\n\t\t\tassertThat(resultDoc.getContent()).contains(\"The Great Depression (1929\u20131939) was an economic shock\");\n\t\t\tassertThat(resultDoc.getMetadata()).containsKey(\"meta2\");\n\t\t\tassertThat(resultDoc.getMetadata()).containsKey(\"distance\");\n\t\t});",
                "is_abstract": "",
                "class_name": "GemFireVectorStoreIT",
                "annotations": []
            },
            {
                "name": "gemfireVectorStoreConfig",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return GemFireVectorStoreConfig.builder().withHost(\"localhost\").build();",
                "is_abstract": "",
                "class_name": "GemFireVectorStoreIT TestApplication",
                "annotations": []
            },
            {
                "name": "vectorStore",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "GemFireVectorStore gemFireVectorStore = new GemFireVectorStore(config, embeddingClient);\n\t\t\tgemFireVectorStore.setIndexName(INDEX_NAME);\n\t\t\treturn gemFireVectorStore;",
                "is_abstract": "",
                "class_name": "GemFireVectorStoreIT TestApplication",
                "annotations": []
            },
            {
                "name": "embeddingClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new TransformersEmbeddingClient();",
                "is_abstract": "",
                "class_name": "GemFireVectorStoreIT TestApplication",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/vector-stores/spring-ai-gemfire/src/main/java/org/springframework/ai/vectorstore/GemFireVectorStore.java",
        "class_names": [
            "QueryResponse",
            "CreateRequest",
            "DeleteRequest",
            "UploadRequest",
            "GemFireVectorStoreConfig",
            "Builder",
            "QueryRequest",
            "Embedding",
            "GemFireVectorStore"
        ],
        "imports": "import java.util.List;\nimport org.springframework.web.util.UriComponentsBuilder;\nimport com.fasterxml.jackson.annotation.JsonCreator;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport static org.springframework.http.HttpStatus.NOT_FOUND;\nimport org.slf4j.Logger;\nimport java.util.Map;\nimport static org.springframework.http.HttpStatus.BAD_REQUEST;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport org.slf4j.LoggerFactory;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport org.springframework.web.reactive.function.client.WebClientResponseException;\nimport java.util.HashMap;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.http.MediaType;\nimport org.springframework.ai.embedding.EmbeddingClient;\nimport reactor.util.annotation.NonNull;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.springframework.util.Assert;\nimport org.springframework.web.reactive.function.BodyInserters;\nimport org.springframework.web.reactive.function.client.WebClient;\nimport org.springframework.ai.document.Document;\nimport java.util.Optional;\nimport org.springframework.web.reactive.function.client.WebClientException;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.GemFireVectorStor": "org.springframework.ai.vectorstore.GemFireVectorStor",
            "org.springframework.ai.vectorstore.GemFireVectorStoreConfi": "org.springframework.ai.vectorstore.GemFireVectorStoreConfi",
            "org.springframework.ai.vectorstore.Builder": "org.springframework.ai.vectorstore.Builder",
            "org.springframework.ai.vectorstore.CreateRequest": "org.springframework.ai.vectorstore.CreateRequest",
            "org.springframework.ai.vectorstore.UploadRequest": "org.springframework.ai.vectorstore.UploadRequest",
            "org.springframework.ai.vectorstore.Embeddin": "org.springframework.ai.vectorstore.Embeddin",
            "org.springframework.ai.vectorstore.QueryRequest": "org.springframework.ai.vectorstore.QueryRequest",
            "org.springframework.ai.vectorstore.QueryRespons": "org.springframework.ai.vectorstore.QueryRespons",
            "org.springframework.ai.vectorstore.DeleteRequest": "org.springframework.ai.vectorstore.DeleteRequest",
            "org.springframework.ai.vectorstore.builder": "org.springframework.ai.vectorstore.builder",
            "org.springframework.ai.vectorstore.withHost": "org.springframework.ai.vectorstore.withHost",
            "org.springframework.ai.vectorstore.withPort": "org.springframework.ai.vectorstore.withPort",
            "org.springframework.ai.vectorstore.withSslEnabled": "org.springframework.ai.vectorstore.withSslEnabled",
            "org.springframework.ai.vectorstore.withConnectionTimeout": "org.springframework.ai.vectorstore.withConnectionTimeout",
            "org.springframework.ai.vectorstore.withRequestTimeout": "org.springframework.ai.vectorstore.withRequestTimeout",
            "org.springframework.ai.vectorstore.withIndex": "org.springframework.ai.vectorstore.withIndex",
            "org.springframework.ai.vectorstore.withTopKPerBucket": "org.springframework.ai.vectorstore.withTopKPerBucket",
            "org.springframework.ai.vectorstore.withTopK": "org.springframework.ai.vectorstore.withTopK",
            "org.springframework.ai.vectorstore.withDocumentField": "org.springframework.ai.vectorstore.withDocumentField",
            "org.springframework.ai.vectorstore.build": "org.springframework.ai.vectorstore.build",
            "org.springframework.ai.vectorstore.setIndexNam": "org.springframework.ai.vectorstore.setIndexNam",
            "org.springframework.ai.vectorstore.getNam": "org.springframework.ai.vectorstore.getNam",
            "org.springframework.ai.vectorstore.setNam": "org.springframework.ai.vectorstore.setNam",
            "org.springframework.ai.vectorstore.getBeamWidth": "org.springframework.ai.vectorstore.getBeamWidth",
            "org.springframework.ai.vectorstore.setBeamWidth": "org.springframework.ai.vectorstore.setBeamWidth",
            "org.springframework.ai.vectorstore.getMaxConnections": "org.springframework.ai.vectorstore.getMaxConnections",
            "org.springframework.ai.vectorstore.setMaxConnections": "org.springframework.ai.vectorstore.setMaxConnections",
            "org.springframework.ai.vectorstore.getVectorSimilarityFunction": "org.springframework.ai.vectorstore.getVectorSimilarityFunction",
            "org.springframework.ai.vectorstore.setVectorSimilarityFunction": "org.springframework.ai.vectorstore.setVectorSimilarityFunction",
            "org.springframework.ai.vectorstore.getFields": "org.springframework.ai.vectorstore.getFields",
            "org.springframework.ai.vectorstore.setFields": "org.springframework.ai.vectorstore.setFields",
            "org.springframework.ai.vectorstore.getBuckets": "org.springframework.ai.vectorstore.getBuckets",
            "org.springframework.ai.vectorstore.setBuckets": "org.springframework.ai.vectorstore.setBuckets",
            "org.springframework.ai.vectorstore.getEmbeddings": "org.springframework.ai.vectorstore.getEmbeddings",
            "org.springframework.ai.vectorstore.getKey": "org.springframework.ai.vectorstore.getKey",
            "org.springframework.ai.vectorstore.getVector": "org.springframework.ai.vectorstore.getVector",
            "org.springframework.ai.vectorstore.getMetadat": "org.springframework.ai.vectorstore.getMetadat",
            "org.springframework.ai.vectorstore.getK": "org.springframework.ai.vectorstore.getK",
            "org.springframework.ai.vectorstore.getkPerBucket": "org.springframework.ai.vectorstore.getkPerBucket",
            "org.springframework.ai.vectorstore.isIncludeMetadat": "org.springframework.ai.vectorstore.isIncludeMetadat",
            "org.springframework.ai.vectorstore.getContent": "org.springframework.ai.vectorstore.getContent",
            "org.springframework.ai.vectorstore.setKey": "org.springframework.ai.vectorstore.setKey",
            "org.springframework.ai.vectorstore.setScor": "org.springframework.ai.vectorstore.setScor",
            "org.springframework.ai.vectorstore.setMetadat": "org.springframework.ai.vectorstore.setMetadat",
            "org.springframework.ai.vectorstore.isDeleteDat": "org.springframework.ai.vectorstore.isDeleteDat",
            "org.springframework.ai.vectorstore.setDeleteDat": "org.springframework.ai.vectorstore.setDeleteDat",
            "org.springframework.ai.vectorstore.add": "org.springframework.ai.vectorstore.add",
            "org.springframework.ai.vectorstore.delet": "org.springframework.ai.vectorstore.delet",
            "org.springframework.ai.vectorstore.similaritySearch": "org.springframework.ai.vectorstore.similaritySearch",
            "org.springframework.ai.vectorstore.createIndex": "org.springframework.ai.vectorstore.createIndex",
            "org.springframework.ai.vectorstore.deleteIndex": "org.springframework.ai.vectorstore.deleteIndex",
            "org.springframework.ai.vectorstore.handleHttpClientException": "org.springframework.ai.vectorstore.handleHttpClientException",
            "org.springframework.ai.vectorstore.QUERY": "org.springframework.ai.vectorstore.QUERY",
            "org.springframework.ai.vectorstore.logger": "org.springframework.ai.vectorstore.logger",
            "org.springframework.ai.vectorstore.DISTANCE_METADATA_FIELD_NAME": "org.springframework.ai.vectorstore.DISTANCE_METADATA_FIELD_NAME",
            "org.springframework.ai.vectorstore.EMBEDDINGS": "org.springframework.ai.vectorstore.EMBEDDINGS",
            "org.springframework.ai.vectorstore.client": "org.springframework.ai.vectorstore.client",
            "org.springframework.ai.vectorstore.embeddingClient": "org.springframework.ai.vectorstore.embeddingClient",
            "org.springframework.ai.vectorstore.topKPerBucket": "org.springframework.ai.vectorstore.topKPerBucket",
            "org.springframework.ai.vectorstore.topK": "org.springframework.ai.vectorstore.topK",
            "org.springframework.ai.vectorstore.documentField": "org.springframework.ai.vectorstore.documentField",
            "org.springframework.ai.vectorstore.index": "org.springframework.ai.vectorstore.index",
            "org.springframework.ai.vectorstore.host": "org.springframework.ai.vectorstore.host",
            "org.springframework.ai.vectorstore.port": "org.springframework.ai.vectorstore.port",
            "org.springframework.ai.vectorstore.sslEnabled": "org.springframework.ai.vectorstore.sslEnabled",
            "org.springframework.ai.vectorstore.connectionTimeout": "org.springframework.ai.vectorstore.connectionTimeout",
            "org.springframework.ai.vectorstore.requestTimeout": "org.springframework.ai.vectorstore.requestTimeout",
            "org.springframework.ai.vectorstore.DEFAULT_PORT": "org.springframework.ai.vectorstore.DEFAULT_PORT",
            "org.springframework.ai.vectorstore.DEFAULT_URI": "org.springframework.ai.vectorstore.DEFAULT_URI",
            "org.springframework.ai.vectorstore.DEFAULT_TOP_K_PER_BUCKET": "org.springframework.ai.vectorstore.DEFAULT_TOP_K_PER_BUCKET",
            "org.springframework.ai.vectorstore.DEFAULT_TOP_K": "org.springframework.ai.vectorstore.DEFAULT_TOP_K",
            "org.springframework.ai.vectorstore.DEFAULT_DOCUMENT_FIELD": "org.springframework.ai.vectorstore.DEFAULT_DOCUMENT_FIELD",
            "org.springframework.ai.vectorstore.indexNam": "org.springframework.ai.vectorstore.indexNam",
            "org.springframework.ai.vectorstore.nam": "org.springframework.ai.vectorstore.nam",
            "org.springframework.ai.vectorstore.beamWidth": "org.springframework.ai.vectorstore.beamWidth",
            "org.springframework.ai.vectorstore.maxConnections": "org.springframework.ai.vectorstore.maxConnections",
            "org.springframework.ai.vectorstore.vectorSimilarityFunction": "org.springframework.ai.vectorstore.vectorSimilarityFunction",
            "org.springframework.ai.vectorstore.fields": "org.springframework.ai.vectorstore.fields",
            "org.springframework.ai.vectorstore.buckets": "org.springframework.ai.vectorstore.buckets",
            "org.springframework.ai.vectorstore.embeddings": "org.springframework.ai.vectorstore.embeddings",
            "org.springframework.ai.vectorstore.key": "org.springframework.ai.vectorstore.key",
            "org.springframework.ai.vectorstore.vector": "org.springframework.ai.vectorstore.vector",
            "org.springframework.ai.vectorstore.metadat": "org.springframework.ai.vectorstore.metadat",
            "org.springframework.ai.vectorstore.privat": "org.springframework.ai.vectorstore.privat",
            "org.springframework.ai.vectorstore.": "org.springframework.ai.vectorstore.",
            "org.springframework.ai.vectorstore.kPerBucket": "org.springframework.ai.vectorstore.kPerBucket",
            "org.springframework.ai.vectorstore.includeMetadat": "org.springframework.ai.vectorstore.includeMetadat",
            "org.springframework.ai.vectorstore.scor": "org.springframework.ai.vectorstore.scor",
            "org.springframework.ai.vectorstore.deleteDat": "org.springframework.ai.vectorstore.deleteDat"
        },
        "package": "package org.springframework.ai.vectorstore;",
        "property_declarations": [
            "private String documentField = DEFAULT_DOCUMENT_FIELD;",
            "private boolean sslEnabled;",
            "private Map<String, Object> metadata;",
            "private static final String DISTANCE_METADATA_FIELD_NAME = \"distance\";",
            "private static final String EMBEDDINGS = \"/embeddings\";",
            "private int topK = DEFAULT_TOP_K;",
            "private final int topKPerBucket;",
            "private static final String DEFAULT_DOCUMENT_FIELD = \"document\";",
            "@JsonProperty(\"fields\")\n\t\tprivate String[] fields = new String[] { \"vector\" };",
            "private final WebClient client;",
            "private static final int DEFAULT_TOP_K_PER_BUCKET = 10;",
            "private long connectionTimeout;",
            "private String index;",
            "private static final int DEFAULT_PORT = 9090;",
            "@JsonProperty(\"max-connections\")\n\t\tprivate int maxConnections = 16;",
            "private int topKPerBucket = DEFAULT_TOP_K_PER_BUCKET;",
            "public final int topK;",
            "@JsonInclude(JsonInclude.Include.NON_NULL)\n\t\t\tprivate Map<String, Object> metadata;",
            "private final EmbeddingClient embeddingClient;",
            "private int port = DEFAULT_PORT;",
            "@JsonProperty(\"name\")\n\t\tprivate String name;",
            "private String key;",
            "private final String documentField;",
            "public String indexName;",
            "private final String key;",
            "private final String index;",
            "private String host;",
            "private final int topK;",
            "private static final int DEFAULT_TOP_K = 10;",
            "@JsonProperty(\"k-per-bucket\")\n\t\tprivate final int kPerBucket;",
            "private float score;",
            "@JsonProperty(\"buckets\")\n\t\tprivate int buckets = 0;",
            "public static final String DEFAULT_URI = \"http{ssl}://{host}:{port}/gemfire-vectordb/v1/indexes\";",
            "@JsonProperty(\"vector-similarity-function\")\n\t\tprivate String vectorSimilarityFunction = \"COSINE\";",
            "private static final Logger logger = LoggerFactory.getLogger(GemFireVectorStore.class);",
            "public static final String QUERY = \"/query\";",
            "private List<Float> vector;",
            "@JsonProperty(\"vector\")\n\t\t@NonNull\n\t\tprivate final List<Float> vector;",
            "@JsonProperty(\"beam-width\")\n\t\tprivate int beamWidth = 100;",
            "private long requestTimeout;",
            "@JsonProperty(\"include-metadata\")\n\t\tprivate final boolean includeMetadata;",
            "@JsonProperty(\"top-k\")\n\t\tprivate final int k;",
            "@JsonProperty(\"delete-data\")\n\t\tprivate boolean deleteData = true;",
            "private final List<Embedding> embeddings;"
        ],
        "functions": [
            {
                "name": "builder",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Builder();",
                "is_abstract": "",
                "class_name": "GemFireVectorStore GemFireVectorStoreConfig",
                "annotations": []
            },
            {
                "name": "withHost",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.hasText(host, \"host must have a value\");\n\t\t\t\tthis.host = host;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "GemFireVectorStore GemFireVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "withPort",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.isTrue(port > 0, \"port must be postive\");\n\t\t\t\tthis.port = port;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "GemFireVectorStore GemFireVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "withSslEnabled",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.sslEnabled = sslEnabled;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "GemFireVectorStore GemFireVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "withConnectionTimeout",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.isTrue(timeout >= 0, \"timeout must be >= 0\");\n\t\t\t\tthis.connectionTimeout = timeout;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "GemFireVectorStore GemFireVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "withRequestTimeout",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.isTrue(timeout >= 0, \"timeout must be >= 0\");\n\t\t\t\tthis.requestTimeout = timeout;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "GemFireVectorStore GemFireVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "withIndex",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.hasText(index, \"index must have a value\");\n\t\t\t\tthis.index = index;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "GemFireVectorStore GemFireVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "withTopKPerBucket",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.isTrue(topKPerBucket > 0, \"topKPerBucket must be positive\");\n\t\t\t\tthis.topKPerBucket = topKPerBucket;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "GemFireVectorStore GemFireVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "withTopK",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.isTrue(topK > 0, \"topK must be positive\");\n\t\t\t\tthis.topK = topK;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "GemFireVectorStore GemFireVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "withDocumentField",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.hasText(documentField, \"documentField must have a value\");\n\t\t\t\tthis.documentField = documentField;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "GemFireVectorStore GemFireVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "build",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new GemFireVectorStoreConfig(this);",
                "is_abstract": "",
                "class_name": "GemFireVectorStore GemFireVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "setIndexName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.indexName = indexName;",
                "is_abstract": "",
                "class_name": "GemFireVectorStore GemFireVectorStoreConfig Builder",
                "annotations": [
                    "@JsonProperty(\"name\")",
                    "@JsonProperty(\"beam-width\")",
                    "@JsonProperty(\"max-connections\")",
                    "@JsonProperty(\"vector-similarity-function\")",
                    "@JsonProperty(\"fields\")",
                    "@JsonProperty(\"buckets\")"
                ]
            },
            {
                "name": "getName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return name;",
                "is_abstract": "",
                "class_name": "GemFireVectorStore GemFireVectorStoreConfig Builder CreateRequest",
                "annotations": []
            },
            {
                "name": "setName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.name = name;",
                "is_abstract": "",
                "class_name": "GemFireVectorStore GemFireVectorStoreConfig Builder CreateRequest",
                "annotations": []
            },
            {
                "name": "getBeamWidth",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return beamWidth;",
                "is_abstract": "",
                "class_name": "GemFireVectorStore GemFireVectorStoreConfig Builder CreateRequest",
                "annotations": []
            },
            {
                "name": "setBeamWidth",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.beamWidth = beamWidth;",
                "is_abstract": "",
                "class_name": "GemFireVectorStore GemFireVectorStoreConfig Builder CreateRequest",
                "annotations": []
            },
            {
                "name": "getMaxConnections",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return maxConnections;",
                "is_abstract": "",
                "class_name": "GemFireVectorStore GemFireVectorStoreConfig Builder CreateRequest",
                "annotations": []
            },
            {
                "name": "setMaxConnections",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.maxConnections = maxConnections;",
                "is_abstract": "",
                "class_name": "GemFireVectorStore GemFireVectorStoreConfig Builder CreateRequest",
                "annotations": []
            },
            {
                "name": "getVectorSimilarityFunction",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return vectorSimilarityFunction;",
                "is_abstract": "",
                "class_name": "GemFireVectorStore GemFireVectorStoreConfig Builder CreateRequest",
                "annotations": []
            },
            {
                "name": "setVectorSimilarityFunction",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.vectorSimilarityFunction = vectorSimilarityFunction;",
                "is_abstract": "",
                "class_name": "GemFireVectorStore GemFireVectorStoreConfig Builder CreateRequest",
                "annotations": []
            },
            {
                "name": "getFields",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return fields;",
                "is_abstract": "",
                "class_name": "GemFireVectorStore GemFireVectorStoreConfig Builder CreateRequest",
                "annotations": []
            },
            {
                "name": "setFields",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.fields = fields;",
                "is_abstract": "",
                "class_name": "GemFireVectorStore GemFireVectorStoreConfig Builder CreateRequest",
                "annotations": []
            },
            {
                "name": "getBuckets",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return buckets;",
                "is_abstract": "",
                "class_name": "GemFireVectorStore GemFireVectorStoreConfig Builder CreateRequest",
                "annotations": []
            },
            {
                "name": "setBuckets",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.buckets = buckets;",
                "is_abstract": "",
                "class_name": "GemFireVectorStore GemFireVectorStoreConfig Builder CreateRequest",
                "annotations": []
            },
            {
                "name": "getEmbeddings",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return embeddings;",
                "is_abstract": "",
                "class_name": "GemFireVectorStore GemFireVectorStoreConfig Builder CreateRequest UploadRequest",
                "annotations": [
                    "@JsonProperty(\"embeddings\")",
                    "@JsonInclude(JsonInclude.Include.NON_NULL)",
                    "@JsonProperty(\"key\")",
                    "@JsonProperty(\"vector\")",
                    "@JsonProperty(\"metadata\")"
                ]
            },
            {
                "name": "getKey",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return key;",
                "is_abstract": "",
                "class_name": "GemFireVectorStore GemFireVectorStoreConfig Builder CreateRequest UploadRequest Embedding",
                "annotations": []
            },
            {
                "name": "getVector",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return vector;",
                "is_abstract": "",
                "class_name": "GemFireVectorStore GemFireVectorStoreConfig Builder CreateRequest UploadRequest Embedding",
                "annotations": []
            },
            {
                "name": "getMetadata",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return metadata;",
                "is_abstract": "",
                "class_name": "GemFireVectorStore GemFireVectorStoreConfig Builder CreateRequest UploadRequest Embedding",
                "annotations": [
                    "@JsonProperty(\"vector\")",
                    "@JsonProperty(\"top-k\")",
                    "@JsonProperty(\"k-per-bucket\")",
                    "@JsonProperty(\"include-metadata\")"
                ]
            },
            {
                "name": "getK",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return k;",
                "is_abstract": "",
                "class_name": "GemFireVectorStore GemFireVectorStoreConfig Builder CreateRequest UploadRequest Embedding QueryRequest",
                "annotations": []
            },
            {
                "name": "getkPerBucket",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return kPerBucket;",
                "is_abstract": "",
                "class_name": "GemFireVectorStore GemFireVectorStoreConfig Builder CreateRequest UploadRequest Embedding QueryRequest",
                "annotations": []
            },
            {
                "name": "isIncludeMetadata",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return includeMetadata;",
                "is_abstract": "",
                "class_name": "GemFireVectorStore GemFireVectorStoreConfig Builder CreateRequest UploadRequest Embedding QueryRequest",
                "annotations": []
            },
            {
                "name": "getContent",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return (String) metadata.get(field);",
                "is_abstract": "",
                "class_name": "GemFireVectorStore GemFireVectorStoreConfig Builder CreateRequest UploadRequest Embedding QueryRequest QueryResponse",
                "annotations": []
            },
            {
                "name": "setKey",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.key = key;",
                "is_abstract": "",
                "class_name": "GemFireVectorStore GemFireVectorStoreConfig Builder CreateRequest UploadRequest Embedding QueryRequest QueryResponse",
                "annotations": []
            },
            {
                "name": "setScore",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.score = score;",
                "is_abstract": "",
                "class_name": "GemFireVectorStore GemFireVectorStoreConfig Builder CreateRequest UploadRequest Embedding QueryRequest QueryResponse",
                "annotations": []
            },
            {
                "name": "setMetadata",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.metadata = metadata;",
                "is_abstract": "",
                "class_name": "GemFireVectorStore GemFireVectorStoreConfig Builder CreateRequest UploadRequest Embedding QueryRequest QueryResponse",
                "annotations": [
                    "@JsonProperty(\"delete-data\")"
                ]
            },
            {
                "name": "isDeleteData",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return deleteData;",
                "is_abstract": "",
                "class_name": "GemFireVectorStore GemFireVectorStoreConfig Builder CreateRequest UploadRequest Embedding QueryRequest QueryResponse DeleteRequest",
                "annotations": []
            },
            {
                "name": "setDeleteData",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.deleteData = deleteData;",
                "is_abstract": "",
                "class_name": "GemFireVectorStore GemFireVectorStoreConfig Builder CreateRequest UploadRequest Embedding QueryRequest QueryResponse DeleteRequest",
                "annotations": []
            },
            {
                "name": "add",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "UploadRequest upload = new UploadRequest(documents.stream().map(document -> {\n\t\t\t// Compute and assign an embedding to the document.\n\t\t\tdocument.setEmbedding(this.embeddingClient.embed(document));\n\t\t\tList<Float> floatVector = document.getEmbedding().stream().map(Double::floatValue).toList();\n\t\t\treturn new UploadRequest.Embedding(document.getId(), floatVector, documentField, document.getContent(),\n\t\t\t\t\tdocument.getMetadata());\n\t\t}).toList());\n\n\t\tObjectMapper objectMapper = new ObjectMapper();\n\t\tString embeddingsJson = null;\n\t\ttry {\n\t\t\tString embeddingString = objectMapper.writeValueAsString(upload);\n\t\t\tembeddingsJson = embeddingString.substring(\"{\\\"embeddings\\\":\".length());\n\t\t}\n\t\tcatch (JsonProcessingException e) {\n\t\t\tthrow new RuntimeException(String.format(\"Embedding JSON parsing error: %s\", e.getMessage()));\n\t\t}\n\n\t\tclient.post()\n\t\t\t.uri(\"/\" + indexName + EMBEDDINGS)\n\t\t\t.contentType(MediaType.APPLICATION_JSON)\n\t\t\t.bodyValue(embeddingsJson)\n\t\t\t.retrieve()\n\t\t\t.bodyToMono(Void.class)\n\t\t\t.onErrorMap(WebClientException.class, this::handleHttpClientException)\n\t\t\t.block();",
                "is_abstract": "",
                "class_name": "GemFireVectorStore GemFireVectorStoreConfig Builder CreateRequest UploadRequest Embedding QueryRequest QueryResponse DeleteRequest",
                "annotations": []
            },
            {
                "name": "delete",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "try {\n\t\t\tclient.method(HttpMethod.DELETE)\n\t\t\t\t.uri(\"/\" + indexName + EMBEDDINGS)\n\t\t\t\t.body(BodyInserters.fromValue(idList))\n\t\t\t\t.retrieve()\n\t\t\t\t.bodyToMono(Void.class)\n\t\t\t\t.block();\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tlogger.warn(\"Error removing embedding: \" + e);\n\t\t\treturn Optional.of(false);\n\t\t}\n\t\treturn Optional.of(true);",
                "is_abstract": "",
                "class_name": "GemFireVectorStore GemFireVectorStoreConfig Builder CreateRequest UploadRequest Embedding QueryRequest QueryResponse DeleteRequest",
                "annotations": []
            },
            {
                "name": "similaritySearch",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (request.hasFilterExpression()) {\n\t\t\tthrow new UnsupportedOperationException(\"Gemfire does not support metadata filter expressions yet.\");\n\t\t}\n\t\tList<Double> vector = this.embeddingClient.embed(request.getQuery());\n\t\tList<Float> floatVector = vector.stream().map(Double::floatValue).toList();\n\n\t\treturn client.post()\n\t\t\t.uri(\"/\" + indexName + QUERY)\n\t\t\t.contentType(MediaType.APPLICATION_JSON)\n\t\t\t.bodyValue(new QueryRequest(floatVector, request.getTopK(), topKPerBucket, true))\n\t\t\t.retrieve()\n\t\t\t.bodyToFlux(QueryResponse.class)\n\t\t\t.filter(r -> r.score >= request.getSimilarityThreshold())\n\t\t\t.map(r -> {\n\t\t\t\tMap<String, Object> metadata = r.metadata;\n\t\t\t\tmetadata.put(DISTANCE_METADATA_FIELD_NAME, 1 - r.score);\n\t\t\t\tString content = (String) metadata.remove(documentField);\n\t\t\t\treturn new Document(r.key, content, metadata);\n\t\t\t})\n\t\t\t.collectList()\n\t\t\t.onErrorMap(WebClientException.class, this::handleHttpClientException)\n\t\t\t.block();",
                "is_abstract": "",
                "class_name": "GemFireVectorStore GemFireVectorStoreConfig Builder CreateRequest UploadRequest Embedding QueryRequest QueryResponse DeleteRequest",
                "annotations": []
            },
            {
                "name": "createIndex",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "CreateRequest createRequest = new CreateRequest(indexName);\n\t\tObjectMapper objectMapper = new ObjectMapper();\n\t\tString index = objectMapper.writeValueAsString(createRequest);\n\t\tclient.post()\n\t\t\t.contentType(MediaType.APPLICATION_JSON)\n\t\t\t.bodyValue(index)\n\t\t\t.retrieve()\n\t\t\t.bodyToMono(Void.class)\n\t\t\t.onErrorMap(WebClientException.class, this::handleHttpClientException)\n\t\t\t.block();",
                "is_abstract": "",
                "class_name": "GemFireVectorStore GemFireVectorStoreConfig Builder CreateRequest UploadRequest Embedding QueryRequest QueryResponse DeleteRequest",
                "annotations": []
            },
            {
                "name": "deleteIndex",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "DeleteRequest deleteRequest = new DeleteRequest();\n\t\tdeleteRequest.setDeleteData(true);\n\t\tclient.method(HttpMethod.DELETE)\n\t\t\t.uri(\"/\" + indexName)\n\t\t\t.body(BodyInserters.fromValue(deleteRequest))\n\t\t\t.retrieve()\n\t\t\t.bodyToMono(Void.class)\n\t\t\t.onErrorMap(WebClientException.class, this::handleHttpClientException)\n\t\t\t.block();",
                "is_abstract": "",
                "class_name": "GemFireVectorStore GemFireVectorStoreConfig Builder CreateRequest UploadRequest Embedding QueryRequest QueryResponse DeleteRequest",
                "annotations": []
            },
            {
                "name": "handleHttpClientException",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (!(ex instanceof WebClientResponseException clientException)) {\n\t\t\tthrow new RuntimeException(String.format(\"Got an unexpected error: %s\", ex));\n\t\t}\n\n\t\tif (clientException.getStatusCode().equals(NOT_FOUND)) {\n\t\t\tthrow new RuntimeException(String.format(\"Index %s not found: %s\", indexName, ex));\n\t\t}\n\t\telse if (clientException.getStatusCode().equals(BAD_REQUEST)) {\n\t\t\tthrow new RuntimeException(String.format(\"Bad Request: %s\", ex));\n\t\t}\n\t\telse {\n\t\t\tthrow new RuntimeException(String.format(\"Got an unexpected HTTP error: %s\", ex));\n\t\t}",
                "is_abstract": "",
                "class_name": "GemFireVectorStore GemFireVectorStoreConfig Builder CreateRequest UploadRequest Embedding QueryRequest QueryResponse DeleteRequest",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/vector-stores/spring-ai-pgvector-store/src/test/java/org/springframework/ai/vectorstore/PgVectorStoreIT.java",
        "class_names": [
            "PgVectorStoreIT",
            "TestApplication"
        ],
        "imports": "import org.springframework.context.ApplicationContext;\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport java.util.List;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.util.CollectionUtils;\nimport org.springframework.ai.vectorstore.filter.FilterExpressionTextParser.FilterExpressionParseException;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport org.springframework.context.annotation.Primary;\nimport org.testcontainers.containers.GenericContainer;\nimport java.io.IOException;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport java.util.Map;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceProperties;\nimport java.nio.charset.StandardCharsets;\nimport com.zaxxer.hikari.HikariDataSource;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.springframework.ai.openai.api.OpenAiApi;\nimport org.springframework.ai.vectorstore.PgVectorStore.PgIndexType;\nimport org.springframework.context.annotation.Bean;\nimport org.junit.jupiter.params.provider.ValueSource;\nimport java.util.Collections;\nimport javax.sql.DataSource;\nimport org.springframework.ai.embedding.EmbeddingClient;\nimport org.springframework.core.io.DefaultResourceLoader;\nimport org.springframework.boot.SpringBootConfiguration;\nimport org.testcontainers.junit.jupiter.Testcontainers;\nimport org.springframework.ai.document.Document;\nimport org.junit.Assert;\nimport org.testcontainers.junit.jupiter.Container;\nimport java.util.UUID;\nimport java.util.Iterator;\nimport org.springframework.ai.openai.OpenAiEmbeddingClient;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.PgVectorStoreIT": "org.springframework.ai.vectorstore.PgVectorStoreIT",
            "org.springframework.ai.vectorstore.TestApplication": "org.springframework.ai.vectorstore.TestApplication",
            "org.springframework.ai.vectorstore.getText": "org.springframework.ai.vectorstore.getText",
            "org.springframework.ai.vectorstore.dropTabl": "org.springframework.ai.vectorstore.dropTabl",
            "org.springframework.ai.vectorstore.ParameterizedTest": "org.springframework.ai.vectorstore.ParameterizedTest",
            "org.springframework.ai.vectorstore.isSortedByDistan": "org.springframework.ai.vectorstore.isSortedByDistan",
            "org.springframework.ai.vectorstore.vectorStor": "org.springframework.ai.vectorstore.vectorStor",
            "org.springframework.ai.vectorstore.myJdbcTemplat": "org.springframework.ai.vectorstore.myJdbcTemplat",
            "org.springframework.ai.vectorstore.ConfigurationProperties": "org.springframework.ai.vectorstore.ConfigurationProperties",
            "org.springframework.ai.vectorstore.dataSour": "org.springframework.ai.vectorstore.dataSour",
            "org.springframework.ai.vectorstore.embeddingClient": "org.springframework.ai.vectorstore.embeddingClient",
            "org.springframework.ai.vectorstore.stati": "org.springframework.ai.vectorstore.stati",
            "org.springframework.ai.vectorstore.documents": "org.springframework.ai.vectorstore.documents",
            "org.springframework.ai.vectorstore.contextRunner": "org.springframework.ai.vectorstore.contextRunner",
            "org.springframework.ai.vectorstore.distanceTy": "org.springframework.ai.vectorstore.distanceTy"
        },
        "package": "package org.springframework.ai.vectorstore;",
        "property_declarations": [
            "@Container\n\tstatic GenericContainer<?> postgresContainer = new GenericContainer<>(\"ankane/pgvector:v0.5.1\")\n\t\t.withEnv(\"POSTGRES_USER\", \"postgres\")\n\t\t.withEnv(\"POSTGRES_PASSWORD\", \"postgres\")\n\t\t.withExposedPorts(5432);",
            "@Value(\"${test.spring.ai.vectorstore.pgvector.distanceType}\")\n\t\tPgVectorStore.PgDistanceType distanceType;",
            "private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t.withUserConfiguration(TestApplication.class)\n\t\t.withPropertyValues(\"test.spring.ai.vectorstore.pgvector.distanceType=COSINE_DISTANCE\",\n\n\t\t\t\t// JdbcTemplate configuration\n\t\t\t\tString.format(\"app.datasource.url=jdbc:postgresql://%s:%d/%s\", postgresContainer.getHost(),\n\t\t\t\t\t\tpostgresContainer.getMappedPort(5432), \"postgres\"),\n\t\t\t\t\"app.datasource.username=postgres\", \"app.datasource.password=postgres\",\n\t\t\t\t\"app.datasource.type=com.zaxxer.hikari.HikariDataSource\");",
            "List<Document> documents = List.of(\n\t\t\tnew Document(getText(\"classpath:/test/data/spring.ai.txt\"), Map.of(\"meta1\", \"meta1\")),\n\t\t\tnew Document(getText(\"classpath:/test/data/time.shelter.txt\")),\n\t\t\tnew Document(getText(\"classpath:/test/data/great.depression.txt\"), Map.of(\"meta2\", \"meta2\")));"
        ],
        "functions": [
            {
                "name": "getText",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var resource = new DefaultResourceLoader().getResource(uri);\n\t\ttry {\n\t\t\treturn resource.getContentAsString(StandardCharsets.UTF_8);\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}",
                "is_abstract": "",
                "class_name": "PgVectorStoreIT",
                "annotations": []
            },
            {
                "name": "dropTable",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "JdbcTemplate jdbcTemplate = context.getBean(JdbcTemplate.class);\n\t\tjdbcTemplate.execute(\"DROP TABLE IF EXISTS vector_store\");",
                "is_abstract": "",
                "class_name": "PgVectorStoreIT",
                "annotations": []
            },
            {
                "name": "ParameterizedTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "0} : {displayName} \")\n\t@ValueSource(strings = { \"COSINE_DISTANCE\", \"EUCLIDEAN_DISTANCE\", \"NEGATIVE_INNER_PRODUCT\" })\n\tpublic void addAndSearch(String distanceType) {\n\t\tcontextRunner.withPropertyValues(\"test.spring.ai.vectorstore.pgvector.distanceType=\" + distanceType)\n\t\t\t.run(context -> {\n\n\t\t\t\tVectorStore vectorStore = context.getBean(VectorStore.class);\n\n\t\t\t\tvectorStore.add(documents);\n\n\t\t\t\tList<Document> results = vectorStore\n\t\t\t\t\t.similaritySearch(SearchRequest.query(\"What is Great Depression\").withTopK(1));\n\n\t\t\t\tassertThat(results).hasSize(1);\n\t\t\t\tDocument resultDoc = results.get(0);\n\t\t\t\tassertThat(resultDoc.getId()).isEqualTo(documents.get(2).getId());\n\t\t\t\tassertThat(resultDoc.getMetadata()).containsKeys(\"meta2\", \"distance\");\n\n\t\t\t\t// Remove all documents from the store\n\t\t\t\tvectorStore.delete(documents.stream().map(doc -> doc.getId()).toList());\n\n\t\t\t\tList<Document> results2 = vectorStore\n\t\t\t\t\t.similaritySearch(SearchRequest.query(\"Great Depression\").withTopK(1));\n\t\t\t\tassertThat(results2).hasSize(0);\n\n\t\t\t\tdropTable(context);\n\t\t\t});",
                "is_abstract": "",
                "class_name": "PgVectorStoreIT",
                "annotations": [
                    "@ParameterizedTest(name = \"{0} : {displayName} \")",
                    "@ValueSource(strings = { \"COSINE_DISTANCE\", \"EUCLIDEAN_DISTANCE\", \"NEGATIVE_INNER_PRODUCT\" })"
                ]
            },
            {
                "name": "isSortedByDistance",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "List<Float> distances = docs.stream().map(doc -> (Float) doc.getMetadata().get(\"distance\")).toList();\n\n\t\tif (CollectionUtils.isEmpty(distances) || distances.size() == 1) {\n\t\t\treturn true;\n\t\t}\n\n\t\tIterator<Float> iter = distances.iterator();\n\t\tFloat current, previous = iter.next();\n\t\twhile (iter.hasNext()) {\n\t\t\tcurrent = iter.next();\n\t\t\tif (previous > current) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tprevious = current;\n\t\t}\n\t\treturn true;",
                "is_abstract": "",
                "class_name": "PgVectorStoreIT",
                "annotations": [
                    "@EnableAutoConfiguration(exclude = { DataSourceAutoConfiguration.class })",
                    "@Value(\"${test.spring.ai.vectorstore.pgvector.distanceType}\")"
                ]
            },
            {
                "name": "vectorStore",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new PgVectorStore(jdbcTemplate, embeddingClient, PgVectorStore.INVALID_EMBEDDING_DIMENSION,\n\t\t\t\t\tdistanceType, true, PgIndexType.HNSW);",
                "is_abstract": "",
                "class_name": "PgVectorStoreIT TestApplication",
                "annotations": []
            },
            {
                "name": "myJdbcTemplate",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new JdbcTemplate(dataSource);",
                "is_abstract": "",
                "class_name": "PgVectorStoreIT TestApplication",
                "annotations": []
            },
            {
                "name": "ConfigurationProperties",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new DataSourceProperties();",
                "is_abstract": "",
                "class_name": "PgVectorStoreIT TestApplication",
                "annotations": [
                    "@ConfigurationProperties(\"app.datasource\")"
                ]
            },
            {
                "name": "dataSource",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return dataSourceProperties.initializeDataSourceBuilder().type(HikariDataSource.class).build();",
                "is_abstract": "",
                "class_name": "PgVectorStoreIT TestApplication",
                "annotations": []
            },
            {
                "name": "embeddingClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new OpenAiEmbeddingClient(new OpenAiApi(System.getenv(\"OPENAI_API_KEY\")));",
                "is_abstract": "",
                "class_name": "PgVectorStoreIT TestApplication",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/vector-stores/spring-ai-pgvector-store/src/test/java/org/springframework/ai/vectorstore/PgVectorEmbeddingDimensionsTests.java",
        "class_names": [
            "PgVectorEmbeddingDimensionsTests"
        ],
        "imports": "import org.springframework.jdbc.core.JdbcTemplate;\nimport org.mockito.Mock;\nimport static org.mockito.Mockito.only;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.junit.jupiter.api.Test;\nimport static org.mockito.Mockito.when;\nimport static org.mockito.Mockito.never;\nimport static org.mockito.Mockito.verify;\nimport org.springframework.ai.embedding.EmbeddingClient;\nimport org.mockito.junit.jupiter.MockitoExtension;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.PgVectorEmbeddingDimensionsTests": "org.springframework.ai.vectorstore.PgVectorEmbeddingDimensionsTests",
            "org.springframework.ai.vectorstore.explicitlySetDimensions": "org.springframework.ai.vectorstore.explicitlySetDimensions",
            "org.springframework.ai.vectorstore.embeddingClientDimensions": "org.springframework.ai.vectorstore.embeddingClientDimensions",
            "org.springframework.ai.vectorstore.fallBackToDefaultDimensions": "org.springframework.ai.vectorstore.fallBackToDefaultDimensions",
            "org.springframework.ai.vectorstore.privat": "org.springframework.ai.vectorstore.privat"
        },
        "package": "package org.springframework.ai.vectorstore;",
        "property_declarations": [
            "@Mock\n\tprivate JdbcTemplate jdbcTemplate;",
            "@Mock\n\tprivate EmbeddingClient embeddingClient;"
        ],
        "functions": [
            {
                "name": "explicitlySetDimensions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "final int explicitDimensions = 696;\n\n\t\tvar dim = new PgVectorStore(jdbcTemplate, embeddingClient, explicitDimensions).embeddingDimensions();\n\n\t\tassertThat(dim).isEqualTo(explicitDimensions);\n\t\tverify(embeddingClient, never()).dimensions();",
                "is_abstract": "",
                "class_name": "PgVectorEmbeddingDimensionsTests",
                "annotations": []
            },
            {
                "name": "embeddingClientDimensions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "when(embeddingClient.dimensions()).thenReturn(969);\n\n\t\tvar dim = new PgVectorStore(jdbcTemplate, embeddingClient).embeddingDimensions();\n\n\t\tassertThat(dim).isEqualTo(969);\n\n\t\tverify(embeddingClient, only()).dimensions();",
                "is_abstract": "",
                "class_name": "PgVectorEmbeddingDimensionsTests",
                "annotations": []
            },
            {
                "name": "fallBackToDefaultDimensions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "when(embeddingClient.dimensions()).thenThrow(new RuntimeException());\n\n\t\tvar dim = new PgVectorStore(jdbcTemplate, embeddingClient).embeddingDimensions();\n\n\t\tassertThat(dim).isEqualTo(PgVectorStore.OPENAI_EMBEDDING_DIMENSION_SIZE);\n\t\tverify(embeddingClient, only()).dimensions();",
                "is_abstract": "",
                "class_name": "PgVectorEmbeddingDimensionsTests",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/vector-stores/spring-ai-pgvector-store/src/main/java/org/springframework/ai/vectorstore/PgVectorStore.java",
        "class_names": [
            "PgVectorStore",
            "DocumentRowMapper"
        ],
        "imports": "import org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.lang.Nullable;\nimport java.util.List;\nimport org.springframework.jdbc.core.SqlTypeValue;\nimport org.springframework.ai.vectorstore.filter.FilterExpressionConverter;\nimport org.springframework.util.StringUtils;\nimport org.slf4j.Logger;\nimport org.springframework.jdbc.core.BatchPreparedStatementSetter;\nimport java.util.Map;\nimport java.util.stream.IntStream;\nimport org.postgresql.util.PGobject;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport java.sql.PreparedStatement;\nimport org.slf4j.LoggerFactory;\nimport java.sql.SQLException;\nimport org.springframework.beans.factory.InitializingBean;\nimport com.pgvector.PGvector;\nimport org.springframework.ai.embedding.EmbeddingClient;\nimport org.springframework.jdbc.core.StatementCreatorUtils;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.springframework.ai.document.Document;\nimport org.springframework.jdbc.core.RowMapper;\nimport java.sql.ResultSet;\nimport java.util.UUID;\nimport java.util.Optional;\nimport org.springframework.ai.vectorstore.filter.converter.PgVectorFilterExpressionConverter;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.PgVectorStor": "org.springframework.ai.vectorstore.PgVectorStor",
            "org.springframework.ai.vectorstore.DocumentRowMapper": "org.springframework.ai.vectorstore.DocumentRowMapper",
            "org.springframework.ai.vectorstore.mapRow": "org.springframework.ai.vectorstore.mapRow",
            "org.springframework.ai.vectorstore.toDoubleList": "org.springframework.ai.vectorstore.toDoubleList",
            "org.springframework.ai.vectorstore.toM": "org.springframework.ai.vectorstore.toM",
            "org.springframework.ai.vectorstore.getDistanceTy": "org.springframework.ai.vectorstore.getDistanceTy",
            "org.springframework.ai.vectorstore.add": "org.springframework.ai.vectorstore.add",
            "org.springframework.ai.vectorstore.setValues": "org.springframework.ai.vectorstore.setValues",
            "org.springframework.ai.vectorstore.getBatchSiz": "org.springframework.ai.vectorstore.getBatchSiz",
            "org.springframework.ai.vectorstore.toJson": "org.springframework.ai.vectorstore.toJson",
            "org.springframework.ai.vectorstore.toFloatArray": "org.springframework.ai.vectorstore.toFloatArray",
            "org.springframework.ai.vectorstore.delet": "org.springframework.ai.vectorstore.delet",
            "org.springframework.ai.vectorstore.similaritySearch": "org.springframework.ai.vectorstore.similaritySearch",
            "org.springframework.ai.vectorstore.embeddingDistan": "org.springframework.ai.vectorstore.embeddingDistan",
            "org.springframework.ai.vectorstore.getQueryEmbeddin": "org.springframework.ai.vectorstore.getQueryEmbeddin",
            "org.springframework.ai.vectorstore.comparisonOperator": "org.springframework.ai.vectorstore.comparisonOperator",
            "org.springframework.ai.vectorstore.afterPropertiesSet": "org.springframework.ai.vectorstore.afterPropertiesSet",
            "org.springframework.ai.vectorstore.embeddingDimensions": "org.springframework.ai.vectorstore.embeddingDimensions",
            "org.springframework.ai.vectorstore.logger": "org.springframework.ai.vectorstore.logger",
            "org.springframework.ai.vectorstore.OPENAI_EMBEDDING_DIMENSION_SIZE": "org.springframework.ai.vectorstore.OPENAI_EMBEDDING_DIMENSION_SIZE",
            "org.springframework.ai.vectorstore.INVALID_EMBEDDING_DIMENSION": "org.springframework.ai.vectorstore.INVALID_EMBEDDING_DIMENSION",
            "org.springframework.ai.vectorstore.VECTOR_TABLE_NAME": "org.springframework.ai.vectorstore.VECTOR_TABLE_NAME",
            "org.springframework.ai.vectorstore.filterExpressionConverter": "org.springframework.ai.vectorstore.filterExpressionConverter",
            "org.springframework.ai.vectorstore.jdbcTemplat": "org.springframework.ai.vectorstore.jdbcTemplat",
            "org.springframework.ai.vectorstore.embeddingClient": "org.springframework.ai.vectorstore.embeddingClient",
            "org.springframework.ai.vectorstore.dimensions": "org.springframework.ai.vectorstore.dimensions",
            "org.springframework.ai.vectorstore.distanceTy": "org.springframework.ai.vectorstore.distanceTy",
            "org.springframework.ai.vectorstore.objectMapper": "org.springframework.ai.vectorstore.objectMapper",
            "org.springframework.ai.vectorstore.removeExistingVectorStoreTabl": "org.springframework.ai.vectorstore.removeExistingVectorStoreTabl",
            "org.springframework.ai.vectorstore.createIndexMethod": "org.springframework.ai.vectorstore.createIndexMethod",
            "org.springframework.ai.vectorstore.operator": "org.springframework.ai.vectorstore.operator",
            "org.springframework.ai.vectorstore.index": "org.springframework.ai.vectorstore.index",
            "org.springframework.ai.vectorstore.similaritySearchSqlTemplat": "org.springframework.ai.vectorstore.similaritySearchSqlTemplat",
            "org.springframework.ai.vectorstore.COLUMN_EMBEDDING": "org.springframework.ai.vectorstore.COLUMN_EMBEDDING",
            "org.springframework.ai.vectorstore.COLUMN_METADATA": "org.springframework.ai.vectorstore.COLUMN_METADATA",
            "org.springframework.ai.vectorstore.COLUMN_ID": "org.springframework.ai.vectorstore.COLUMN_ID",
            "org.springframework.ai.vectorstore.COLUMN_CONTENT": "org.springframework.ai.vectorstore.COLUMN_CONTENT",
            "org.springframework.ai.vectorstore.COLUMN_DISTANCE": "org.springframework.ai.vectorstore.COLUMN_DISTANCE"
        },
        "package": "package org.springframework.ai.vectorstore;",
        "property_declarations": [
            "public static final int INVALID_EMBEDDING_DIMENSION = -1;",
            "private boolean removeExistingVectorStoreTable;",
            "private static final String COLUMN_EMBEDDING = \"embedding\";",
            "public static final int OPENAI_EMBEDDING_DIMENSION_SIZE = 1536;",
            "public final String similaritySearchSqlTemplate;",
            "private static final String COLUMN_METADATA = \"metadata\";",
            "private static final String COLUMN_DISTANCE = \"distance\";",
            "private final EmbeddingClient embeddingClient;",
            "private ObjectMapper objectMapper = new ObjectMapper();",
            "private int dimensions;",
            "public final FilterExpressionConverter filterExpressionConverter = new PgVectorFilterExpressionConverter();",
            "private PgIndexType createIndexMethod;",
            "public final String operator;",
            "private static final String COLUMN_ID = \"id\";",
            "private ObjectMapper objectMapper;",
            "public static final String VECTOR_TABLE_NAME = \"vector_store\";",
            "private static final String COLUMN_CONTENT = \"content\";",
            "private static final Logger logger = LoggerFactory.getLogger(PgVectorStore.class);",
            "public final String index;",
            "private PgDistanceType distanceType;",
            "private final JdbcTemplate jdbcTemplate;"
        ],
        "functions": [
            {
                "name": "mapRow",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String id = rs.getString(COLUMN_ID);\n\t\t\tString content = rs.getString(COLUMN_CONTENT);\n\t\t\tPGobject pgMetadata = rs.getObject(COLUMN_METADATA, PGobject.class);\n\t\t\tPGobject embedding = rs.getObject(COLUMN_EMBEDDING, PGobject.class);\n\t\t\tFloat distance = rs.getFloat(COLUMN_DISTANCE);\n\n\t\t\tMap<String, Object> metadata = toMap(pgMetadata);\n\t\t\tmetadata.put(COLUMN_DISTANCE, distance);\n\n\t\t\tDocument document = new Document(id, content, metadata);\n\t\t\tdocument.setEmbedding(toDoubleList(embedding));\n\n\t\t\treturn document;",
                "is_abstract": "",
                "class_name": "PgVectorStore DocumentRowMapper",
                "annotations": []
            },
            {
                "name": "toDoubleList",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "float[] floatArray = new PGvector(embedding.getValue()).toArray();\n\t\t\treturn IntStream.range(0, floatArray.length).mapToDouble(i -> floatArray[i]).boxed().toList();",
                "is_abstract": "",
                "class_name": "PgVectorStore DocumentRowMapper",
                "annotations": []
            },
            {
                "name": "toMap",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String source = pgObject.getValue();\n\t\t\ttry {\n\t\t\t\treturn (Map<String, Object>) objectMapper.readValue(source, Map.class);\n\t\t\t}\n\t\t\tcatch (JsonProcessingException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}",
                "is_abstract": "",
                "class_name": "PgVectorStore DocumentRowMapper",
                "annotations": []
            },
            {
                "name": "getDistanceType",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return distanceType;",
                "is_abstract": "",
                "class_name": "PgVectorStore DocumentRowMapper",
                "annotations": []
            },
            {
                "name": "add",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "int size = documents.size();\n\n\t\tthis.jdbcTemplate.batchUpdate(\n\t\t\t\t\"INSERT INTO \" + VECTOR_TABLE_NAME + \" (id, content, metadata, embedding) VALUES (?, ?, ?::jsonb, ?) \"\n\t\t\t\t\t\t+ \"ON CONFLICT (id) DO \" + \"UPDATE SET content = ? , metadata = ?::jsonb , embedding = ? \",\n\t\t\t\tnew BatchPreparedStatementSetter() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void setValues(PreparedStatement ps, int i) throws SQLException {\n\n\t\t\t\t\t\tvar document = documents.get(i);\n\t\t\t\t\t\tvar content = document.getContent();\n\t\t\t\t\t\tvar json = toJson(document.getMetadata());\n\t\t\t\t\t\tvar pGvector = new PGvector(toFloatArray(embeddingClient.embed(document)));\n\n\t\t\t\t\t\tStatementCreatorUtils.setParameterValue(ps, 1, SqlTypeValue.TYPE_UNKNOWN,\n\t\t\t\t\t\t\t\tUUID.fromString(document.getId()));\n\t\t\t\t\t\tStatementCreatorUtils.setParameterValue(ps, 2, SqlTypeValue.TYPE_UNKNOWN, content);\n\t\t\t\t\t\tStatementCreatorUtils.setParameterValue(ps, 3, SqlTypeValue.TYPE_UNKNOWN, json);\n\t\t\t\t\t\tStatementCreatorUtils.setParameterValue(ps, 4, SqlTypeValue.TYPE_UNKNOWN, pGvector);\n\t\t\t\t\t\tStatementCreatorUtils.setParameterValue(ps, 5, SqlTypeValue.TYPE_UNKNOWN, content);\n\t\t\t\t\t\tStatementCreatorUtils.setParameterValue(ps, 6, SqlTypeValue.TYPE_UNKNOWN, json);\n\t\t\t\t\t\tStatementCreatorUtils.setParameterValue(ps, 7, SqlTypeValue.TYPE_UNKNOWN, pGvector);\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic int getBatchSize() {\n\t\t\t\t\t\treturn size;\n\t\t\t\t\t}\n\t\t\t\t});",
                "is_abstract": "",
                "class_name": "PgVectorStore DocumentRowMapper",
                "annotations": []
            },
            {
                "name": "setValues",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var document = documents.get(i);\n\t\t\t\t\t\tvar content = document.getContent();\n\t\t\t\t\t\tvar json = toJson(document.getMetadata());\n\t\t\t\t\t\tvar pGvector = new PGvector(toFloatArray(embeddingClient.embed(document)));\n\n\t\t\t\t\t\tStatementCreatorUtils.setParameterValue(ps, 1, SqlTypeValue.TYPE_UNKNOWN,\n\t\t\t\t\t\t\t\tUUID.fromString(document.getId()));\n\t\t\t\t\t\tStatementCreatorUtils.setParameterValue(ps, 2, SqlTypeValue.TYPE_UNKNOWN, content);\n\t\t\t\t\t\tStatementCreatorUtils.setParameterValue(ps, 3, SqlTypeValue.TYPE_UNKNOWN, json);\n\t\t\t\t\t\tStatementCreatorUtils.setParameterValue(ps, 4, SqlTypeValue.TYPE_UNKNOWN, pGvector);\n\t\t\t\t\t\tStatementCreatorUtils.setParameterValue(ps, 5, SqlTypeValue.TYPE_UNKNOWN, content);\n\t\t\t\t\t\tStatementCreatorUtils.setParameterValue(ps, 6, SqlTypeValue.TYPE_UNKNOWN, json);\n\t\t\t\t\t\tStatementCreatorUtils.setParameterValue(ps, 7, SqlTypeValue.TYPE_UNKNOWN, pGvector);",
                "is_abstract": "",
                "class_name": "PgVectorStore DocumentRowMapper",
                "annotations": []
            },
            {
                "name": "getBatchSize",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return size;",
                "is_abstract": "",
                "class_name": "PgVectorStore DocumentRowMapper",
                "annotations": []
            },
            {
                "name": "toJson",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "try {\n\t\t\treturn objectMapper.writeValueAsString(map);\n\t\t}\n\t\tcatch (JsonProcessingException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}",
                "is_abstract": "",
                "class_name": "PgVectorStore DocumentRowMapper",
                "annotations": []
            },
            {
                "name": "toFloatArray",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "float[] embeddingFloat = new float[embeddingDouble.size()];\n\t\tint i = 0;\n\t\tfor (Double d : embeddingDouble) {\n\t\t\tembeddingFloat[i++] = d.floatValue();\n\t\t}\n\t\treturn embeddingFloat;",
                "is_abstract": "",
                "class_name": "PgVectorStore DocumentRowMapper",
                "annotations": []
            },
            {
                "name": "delete",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "int updateCount = 0;\n\t\tfor (String id : idList) {\n\t\t\tint count = jdbcTemplate.update(\"DELETE FROM \" + VECTOR_TABLE_NAME + \" WHERE id = ?\", UUID.fromString(id));\n\t\t\tupdateCount = updateCount + count;\n\t\t}\n\n\t\treturn Optional.of(updateCount == idList.size());",
                "is_abstract": "",
                "class_name": "PgVectorStore DocumentRowMapper",
                "annotations": []
            },
            {
                "name": "similaritySearch",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String nativeFilterExpression = (request.getFilterExpression() != null)\n\t\t\t\t? this.filterExpressionConverter.convertExpression(request.getFilterExpression()) : \"\";\n\n\t\tString jsonPathFilter = \"\";\n\n\t\tif (StringUtils.hasText(nativeFilterExpression)) {\n\t\t\tjsonPathFilter = \" AND metadata::jsonb @@ '\" + nativeFilterExpression + \"'::jsonpath \";\n\t\t}\n\n\t\tdouble distance = 1 - request.getSimilarityThreshold();\n\n\t\tPGvector queryEmbedding = getQueryEmbedding(request.getQuery());\n\n\t\treturn this.jdbcTemplate.query(\n\t\t\t\tString.format(this.getDistanceType().similaritySearchSqlTemplate, VECTOR_TABLE_NAME, jsonPathFilter),\n\t\t\t\tnew DocumentRowMapper(this.objectMapper), queryEmbedding, queryEmbedding, distance, request.getTopK());",
                "is_abstract": "",
                "class_name": "PgVectorStore DocumentRowMapper",
                "annotations": []
            },
            {
                "name": "embeddingDistance",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.jdbcTemplate.query(\n\t\t\t\t\"SELECT embedding \" + this.comparisonOperator() + \" ? AS distance FROM \" + VECTOR_TABLE_NAME,\n\t\t\t\tnew RowMapper<Double>() {\n\t\t\t\t\t@Override\n\t\t\t\t\t@Nullable\n\t\t\t\t\tpublic Double mapRow(ResultSet rs, int rowNum) throws SQLException {\n\t\t\t\t\t\treturn rs.getDouble(DocumentRowMapper.COLUMN_DISTANCE);\n\t\t\t\t\t}\n\n\t\t\t\t}, getQueryEmbedding(query));",
                "is_abstract": "",
                "class_name": "PgVectorStore DocumentRowMapper",
                "annotations": []
            },
            {
                "name": "getQueryEmbedding",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "List<Double> embedding = this.embeddingClient.embed(query);\n\t\treturn new PGvector(toFloatArray(embedding));",
                "is_abstract": "",
                "class_name": "PgVectorStore DocumentRowMapper",
                "annotations": []
            },
            {
                "name": "comparisonOperator",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.getDistanceType().operator;",
                "is_abstract": "",
                "class_name": "PgVectorStore DocumentRowMapper",
                "annotations": []
            },
            {
                "name": "afterPropertiesSet",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// Enable the PGVector, JSONB and UUID support.\n\t\tthis.jdbcTemplate.execute(\"CREATE EXTENSION IF NOT EXISTS vector\");\n\t\tthis.jdbcTemplate.execute(\"CREATE EXTENSION IF NOT EXISTS hstore\");\n\t\tthis.jdbcTemplate.execute(\"CREATE EXTENSION IF NOT EXISTS \\\"uuid-ossp\\\"\");\n\n\t\t// Remove existing VectorStoreTable\n\t\tif (this.removeExistingVectorStoreTable) {\n\t\t\tthis.jdbcTemplate.execute(\"DROP TABLE IF EXISTS \" + VECTOR_TABLE_NAME);\n\t\t}\n\n\t\tthis.jdbcTemplate.execute(String.format(\"\"\"\n\t\t\t\tCREATE TABLE IF NOT EXISTS %s (\n\t\t\t\t\tid uuid DEFAULT uuid_generate_v4() PRIMARY KEY,\n\t\t\t\t\tcontent text,\n\t\t\t\t\tmetadata json,\n\t\t\t\t\tembedding vector(%d)\n\t\t\t\t)\n\t\t\t\t\"\"\", VECTOR_TABLE_NAME, this.embeddingDimensions()));\n\n\t\tif (this.createIndexMethod != PgIndexType.NONE) {\n\t\t\tthis.jdbcTemplate.execute(String.format(\"\"\"\n\t\t\t\t\tCREATE INDEX ON %s USING %s (embedding %s)\n\t\t\t\t\t\"\"\", VECTOR_TABLE_NAME, this.createIndexMethod, this.getDistanceType().index));\n\t\t}",
                "is_abstract": "",
                "class_name": "PgVectorStore DocumentRowMapper",
                "annotations": []
            },
            {
                "name": "embeddingDimensions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// The manually set dimensions have precedence over the computed one.\n\t\tif (this.dimensions > 0) {\n\t\t\treturn this.dimensions;\n\t\t}\n\n\t\ttry {\n\t\t\tint embeddingDimensions = this.embeddingClient.dimensions();\n\t\t\tif (embeddingDimensions > 0) {\n\t\t\t\treturn embeddingDimensions;\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tlogger.warn(\"Failed to obtain the embedding dimensions from the embedding client and fall backs to default:\"\n\t\t\t\t\t+ OPENAI_EMBEDDING_DIMENSION_SIZE, e);\n\t\t}\n\t\treturn OPENAI_EMBEDDING_DIMENSION_SIZE;",
                "is_abstract": "",
                "class_name": "PgVectorStore DocumentRowMapper",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/vector-stores/spring-ai-weaviate/src/test/java/org/springframework/ai/vectorstore/WeaviateFilterExpressionConverterTests.java",
        "class_names": [
            "WeaviateFilterExpressionConverterTests"
        ],
        "imports": "import static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.NIN;\nimport java.util.List;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.GTE;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.NE;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.AND;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.OR;\nimport org.springframework.ai.vectorstore.filter.Filter.Key;\nimport org.springframework.ai.vectorstore.filter.Filter.Group;\nimport org.springframework.ai.vectorstore.filter.Filter.Expression;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.vectorstore.filter.Filter.Value;\nimport org.springframework.ai.vectorstore.filter.FilterExpressionConverter;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.IN;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.LTE;\nimport static org.assertj.core.api.Assertions.assertThatThrownBy;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.EQ;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.WeaviateFilterExpressionConverterTests": "org.springframework.ai.vectorstore.WeaviateFilterExpressionConverterTests",
            "org.springframework.ai.vectorstore.format": "org.springframework.ai.vectorstore.format",
            "org.springframework.ai.vectorstore.testMissingFilterNam": "org.springframework.ai.vectorstore.testMissingFilterNam",
            "org.springframework.ai.vectorstore.testSystemIdentifiers": "org.springframework.ai.vectorstore.testSystemIdentifiers",
            "org.springframework.ai.vectorstore.testEQ": "org.springframework.ai.vectorstore.testEQ",
            "org.springframework.ai.vectorstore.tesEqAndGt": "org.springframework.ai.vectorstore.tesEqAndGt",
            "org.springframework.ai.vectorstore.tesIn": "org.springframework.ai.vectorstore.tesIn",
            "org.springframework.ai.vectorstore.testN": "org.springframework.ai.vectorstore.testN",
            "org.springframework.ai.vectorstore.testGrou": "org.springframework.ai.vectorstore.testGrou",
            "org.springframework.ai.vectorstore.tesBoolean": "org.springframework.ai.vectorstore.tesBoolean",
            "org.springframework.ai.vectorstore.testDecimal": "org.springframework.ai.vectorstore.testDecimal",
            "org.springframework.ai.vectorstore.testComplexIdentifiers": "org.springframework.ai.vectorstore.testComplexIdentifiers"
        },
        "package": "package org.springframework.ai.vectorstore;",
        "property_declarations": [],
        "functions": [
            {
                "name": "format",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return text.trim().replace(\" \" + System.lineSeparator(), System.lineSeparator()) + System.lineSeparator();",
                "is_abstract": "",
                "class_name": "WeaviateFilterExpressionConverterTests",
                "annotations": []
            },
            {
                "name": "testMissingFilterName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "FilterExpressionConverter converter = new WeaviateFilterExpressionConverter(List.of());\n\n\t\tassertThatThrownBy(() -> {\n\t\t\tconverter.convertExpression(new Expression(EQ, new Key(\"country\"), new Value(\"BG\")));\n\t\t}).isInstanceOf(IllegalArgumentException.class)\n\t\t\t.hasMessageContaining(\n\t\t\t\t\t\"Not allowed filter identifier name: country. Consider adding it to WeaviateVectorStore#filterMetadataKeys.\");",
                "is_abstract": "",
                "class_name": "WeaviateFilterExpressionConverterTests",
                "annotations": []
            },
            {
                "name": "testSystemIdentifiers",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "FilterExpressionConverter converter = new WeaviateFilterExpressionConverter(List.of());\n\n\t\t// id == \"1\" && _creationTimeUnix >= \"36\" && _lastUpdateTimeUnix <= \"100\"\n\n\t\tString vectorExpr = converter.convertExpression(new Expression(AND,\n\t\t\t\tnew Expression(AND, new Expression(EQ, new Key(\"id\"), new Value(\"1\")),\n\t\t\t\t\t\tnew Expression(GTE, new Key(\"_creationTimeUnix\"), new Value(\"36\"))),\n\t\t\t\tnew Expression(LTE, new Key(\"_lastUpdateTimeUnix\"), new Value(\"100\"))));\n\n\t\tassertThat(format(vectorExpr)).isEqualTo(\"\"\"\n\t\t\t\toperator:And\n\t\t\t\toperands:[{operator:And\n\t\t\t\toperands:[{path:[\"id\"]\n\t\t\t\toperator:Equal\n\t\t\t\tvalueText:\"1\" },\n\t\t\t\t{path:[\"_creationTimeUnix\"]\n\t\t\t\toperator:GreaterThanEqual\n\t\t\t\tvalueText:\"36\" }]},\n\t\t\t\t{path:[\"_lastUpdateTimeUnix\"]\n\t\t\t\toperator:LessThanEqual\n\t\t\t\tvalueText:\"100\" }]\n\t\t\t\t\"\"\");",
                "is_abstract": "",
                "class_name": "WeaviateFilterExpressionConverterTests",
                "annotations": []
            },
            {
                "name": "testEQ",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "FilterExpressionConverter converter = new WeaviateFilterExpressionConverter(List.of(\"country\"));\n\n\t\t// country == \"BG\"\n\t\tString vectorExpr = converter.convertExpression(new Expression(EQ, new Key(\"country\"), new Value(\"BG\")));\n\t\tassertThat(format(vectorExpr)).isEqualTo(\"\"\"\n\t\t\t\tpath:[\"meta_country\"]\n\t\t\t\toperator:Equal\n\t\t\t\tvalueText:\"BG\"\n\t\t\t\t\"\"\");",
                "is_abstract": "",
                "class_name": "WeaviateFilterExpressionConverterTests",
                "annotations": []
            },
            {
                "name": "tesEqAndGte",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "FilterExpressionConverter converter = new WeaviateFilterExpressionConverter(List.of(\"genre\", \"year\"));\n\n\t\t// genre == \"drama\" AND year >= 2020\n\t\tString vectorExpr = converter\n\t\t\t.convertExpression(new Expression(AND, new Expression(EQ, new Key(\"genre\"), new Value(\"drama\")),\n\t\t\t\t\tnew Expression(GTE, new Key(\"year\"), new Value(2020))));\n\t\tassertThat(format(vectorExpr)).isEqualTo(\"\"\"\n\t\t\t\toperator:And\n\t\t\t\toperands:[{path:[\"meta_genre\"]\n\t\t\t\toperator:Equal\n\t\t\t\tvalueText:\"drama\" },\n\t\t\t\t{path:[\"meta_year\"]\n\t\t\t\toperator:GreaterThanEqual\n\t\t\t\tvalueNumber:2020 }]\n\t\t\t\t\"\"\");",
                "is_abstract": "",
                "class_name": "WeaviateFilterExpressionConverterTests",
                "annotations": []
            },
            {
                "name": "tesIn",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "FilterExpressionConverter converter = new WeaviateFilterExpressionConverter(List.of(\"genre\"));\n\n\t\t// genre in [\"comedy\", \"documentary\", \"drama\"]\n\t\tString vectorExpr = converter.convertExpression(\n\t\t\t\tnew Expression(IN, new Key(\"genre\"), new Value(List.of(\"comedy\", \"documentary\", \"drama\"))));\n\t\tassertThat(format(vectorExpr)).isEqualTo(\"\"\"\n\t\t\t\toperator:Or\n\t\t\t\toperands:[{path:[\"meta_genre\"]\n\t\t\t\toperator:Equal\n\t\t\t\tvalueText:\"comedy\" },\n\t\t\t\t{operator:Or\n\t\t\t\toperands:[{path:[\"meta_genre\"]\n\t\t\t\toperator:Equal\n\t\t\t\tvalueText:\"documentary\" },\n\t\t\t\t{path:[\"meta_genre\"]\n\t\t\t\toperator:Equal\n\t\t\t\tvalueText:\"drama\" }]}]\n\t\t\t\t\"\"\");",
                "is_abstract": "",
                "class_name": "WeaviateFilterExpressionConverterTests",
                "annotations": []
            },
            {
                "name": "testNe",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "FilterExpressionConverter converter = new WeaviateFilterExpressionConverter(List.of(\"city\", \"year\", \"country\"));\n\n\t\t// year >= 2020 OR country == \"BG\" AND city != \"Sofia\"\n\t\tString vectorExpr = converter\n\t\t\t.convertExpression(new Expression(OR, new Expression(GTE, new Key(\"year\"), new Value(2020)),\n\t\t\t\t\tnew Expression(AND, new Expression(EQ, new Key(\"country\"), new Value(\"BG\")),\n\t\t\t\t\t\t\tnew Expression(NE, new Key(\"city\"), new Value(\"Sofia\")))));\n\t\tassertThat(format(vectorExpr)).isEqualTo(\"\"\"\n\t\t\t\toperator:Or\n\t\t\t\toperands:[{path:[\"meta_year\"]\n\t\t\t\toperator:GreaterThanEqual\n\t\t\t\tvalueNumber:2020 },\n\t\t\t\t{operator:And\n\t\t\t\toperands:[{path:[\"meta_country\"]\n\t\t\t\toperator:Equal\n\t\t\t\tvalueText:\"BG\" },\n\t\t\t\t{path:[\"meta_city\"]\n\t\t\t\toperator:NotEqual\n\t\t\t\tvalueText:\"Sofia\" }]}]\n\t\t\t\t\"\"\");",
                "is_abstract": "",
                "class_name": "WeaviateFilterExpressionConverterTests",
                "annotations": []
            },
            {
                "name": "testGroup",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "FilterExpressionConverter converter = new WeaviateFilterExpressionConverter(List.of(\"city\", \"year\", \"country\"));\n\n\t\t// (year >= 2020 OR country == \"BG\") AND city NIN [\"Sofia\", \"Plovdiv\"]\n\t\tString vectorExpr = converter.convertExpression(new Expression(AND,\n\t\t\t\tnew Group(new Expression(OR, new Expression(GTE, new Key(\"year\"), new Value(2020)),\n\t\t\t\t\t\tnew Expression(EQ, new Key(\"country\"), new Value(\"BG\")))),\n\t\t\t\tnew Expression(NIN, new Key(\"city\"), new Value(List.of(\"Sofia\", \"Plovdiv\")))));\n\n\t\tassertThat(format(vectorExpr)).isEqualTo(\"\"\"\n\t\t\t\toperator:And\n\t\t\t\toperands:[{operator:And\n\t\t\t\toperands:[{path:[\"id\"]\n\t\t\t\toperator:NotEqual\n\t\t\t\tvalueText:\"-1\" },\n\t\t\t\t{operator:Or\n\t\t\t\toperands:[{path:[\"meta_year\"]\n\t\t\t\toperator:GreaterThanEqual\n\t\t\t\tvalueNumber:2020 },\n\t\t\t\t{path:[\"meta_country\"]\n\t\t\t\toperator:Equal\n\t\t\t\tvalueText:\"BG\" }]}]},\n\t\t\t\t{operator:And\n\t\t\t\toperands:[{path:[\"meta_city\"]\n\t\t\t\toperator:NotEqual\n\t\t\t\tvalueText:\"Sofia\" },\n\t\t\t\t{path:[\"meta_city\"]\n\t\t\t\toperator:NotEqual\n\t\t\t\tvalueText:\"Plovdiv\" }]}]\n\t\t\t\t\"\"\");",
                "is_abstract": "",
                "class_name": "WeaviateFilterExpressionConverterTests",
                "annotations": []
            },
            {
                "name": "tesBoolean",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "FilterExpressionConverter converter = new WeaviateFilterExpressionConverter(\n\t\t\t\tList.of(\"isOpen\", \"year\", \"country\"));\n\n\t\t// isOpen == true AND year >= 2020 AND country IN [\"BG\", \"NL\", \"US\"]\n\t\tString vectorExpr = converter.convertExpression(new Expression(AND,\n\t\t\t\tnew Expression(AND, new Expression(EQ, new Key(\"isOpen\"), new Value(true)),\n\t\t\t\t\t\tnew Expression(GTE, new Key(\"year\"), new Value(2020))),\n\t\t\t\tnew Expression(IN, new Key(\"country\"), new Value(List.of(\"BG\", \"NL\", \"US\")))));\n\n\t\tassertThat(format(vectorExpr)).isEqualTo(\"\"\"\n\t\t\t\toperator:And\n\t\t\t\toperands:[{operator:And\n\t\t\t\toperands:[{path:[\"meta_isOpen\"]\n\t\t\t\toperator:Equal\n\t\t\t\tvalueBoolean:true },\n\t\t\t\t{path:[\"meta_year\"]\n\t\t\t\toperator:GreaterThanEqual\n\t\t\t\tvalueNumber:2020 }]},\n\t\t\t\t{operator:Or\n\t\t\t\toperands:[{path:[\"meta_country\"]\n\t\t\t\toperator:Equal\n\t\t\t\tvalueText:\"BG\" },\n\t\t\t\t{operator:Or\n\t\t\t\toperands:[{path:[\"meta_country\"]\n\t\t\t\toperator:Equal\n\t\t\t\tvalueText:\"NL\" },\n\t\t\t\t{path:[\"meta_country\"]\n\t\t\t\toperator:Equal\n\t\t\t\tvalueText:\"US\" }]}]}]\n\t\t\t\t\"\"\");",
                "is_abstract": "",
                "class_name": "WeaviateFilterExpressionConverterTests",
                "annotations": []
            },
            {
                "name": "testDecimal",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "FilterExpressionConverter converter = new WeaviateFilterExpressionConverter(List.of(\"temperature\"));\n\n\t\t// temperature >= -15.6 && temperature <= +20.13\n\t\tString vectorExpr = converter\n\t\t\t.convertExpression(new Expression(AND, new Expression(GTE, new Key(\"temperature\"), new Value(-15.6)),\n\t\t\t\t\tnew Expression(LTE, new Key(\"temperature\"), new Value(20.13))));\n\n\t\tassertThat(format(vectorExpr)).isEqualTo(\"\"\"\n\t\t\t\toperator:And\n\t\t\t\toperands:[{path:[\"meta_temperature\"]\n\t\t\t\toperator:GreaterThanEqual\n\t\t\t\tvalueNumber:-15.6 },\n\t\t\t\t{path:[\"meta_temperature\"]\n\t\t\t\toperator:LessThanEqual\n\t\t\t\tvalueNumber:20.13 }]\n\t\t\t\t\"\"\");",
                "is_abstract": "",
                "class_name": "WeaviateFilterExpressionConverterTests",
                "annotations": []
            },
            {
                "name": "testComplexIdentifiers",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "FilterExpressionConverter converter = new WeaviateFilterExpressionConverter(List.of(\"country 1 2 3\"));\n\n\t\tString vectorExpr = converter\n\t\t\t.convertExpression(new Expression(EQ, new Key(\"\\\"country 1 2 3\\\"\"), new Value(\"BG\")));\n\t\tassertThat(format(vectorExpr)).isEqualTo(\"\"\"\n\t\t\t\tpath:[\"meta_country 1 2 3\"]\n\t\t\t\toperator:Equal\n\t\t\t\tvalueText:\"BG\"\n\t\t\t\t\"\"\");\n\n\t\tvectorExpr = converter.convertExpression(new Expression(EQ, new Key(\"'country 1 2 3'\"), new Value(\"BG\")));\n\t\tassertThat(format(vectorExpr)).isEqualTo(\"\"\"\n\t\t\t\tpath:[\"meta_country 1 2 3\"]\n\t\t\t\toperator:Equal\n\t\t\t\tvalueText:\"BG\"\n\t\t\t\t\"\"\");",
                "is_abstract": "",
                "class_name": "WeaviateFilterExpressionConverterTests",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/vector-stores/spring-ai-weaviate/src/test/java/org/springframework/ai/vectorstore/WeaviateVectorStoreIT.java",
        "class_names": [
            "WeaviateVectorStoreIT",
            "TestApplication"
        ],
        "imports": "import java.util.List;\nimport org.springframework.ai.vectorstore.WeaviateVectorStore.WeaviateVectorStoreConfig;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport java.io.IOException;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport java.util.Map;\nimport org.springframework.ai.vectorstore.WeaviateVectorStore.WeaviateVectorStoreConfig.MetadataField;\nimport java.nio.charset.StandardCharsets;\nimport org.springframework.ai.transformers.TransformersEmbeddingClient;\nimport org.springframework.context.annotation.Bean;\nimport java.util.Collections;\nimport org.springframework.core.io.DefaultResourceLoader;\nimport org.springframework.ai.embedding.EmbeddingClient;\nimport org.springframework.boot.SpringBootConfiguration;\nimport org.testcontainers.junit.jupiter.Testcontainers;\nimport org.springframework.ai.document.Document;\nimport org.junit.jupiter.api.Test;\nimport org.testcontainers.junit.jupiter.Container;\nimport java.util.UUID;\nimport org.testcontainers.weaviate.WeaviateContainer;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.WeaviateVectorStoreIT": "org.springframework.ai.vectorstore.WeaviateVectorStoreIT",
            "org.springframework.ai.vectorstore.TestApplication": "org.springframework.ai.vectorstore.TestApplication",
            "org.springframework.ai.vectorstore.getText": "org.springframework.ai.vectorstore.getText",
            "org.springframework.ai.vectorstore.resetCollection": "org.springframework.ai.vectorstore.resetCollection",
            "org.springframework.ai.vectorstore.addAndSearch": "org.springframework.ai.vectorstore.addAndSearch",
            "org.springframework.ai.vectorstore.searchWithFilters": "org.springframework.ai.vectorstore.searchWithFilters",
            "org.springframework.ai.vectorstore.documentUpdat": "org.springframework.ai.vectorstore.documentUpdat",
            "org.springframework.ai.vectorstore.searchWithThreshold": "org.springframework.ai.vectorstore.searchWithThreshold",
            "org.springframework.ai.vectorstore.vectorStor": "org.springframework.ai.vectorstore.vectorStor",
            "org.springframework.ai.vectorstore.embeddingClient": "org.springframework.ai.vectorstore.embeddingClient",
            "org.springframework.ai.vectorstore.stati": "org.springframework.ai.vectorstore.stati",
            "org.springframework.ai.vectorstore.contextRunner": "org.springframework.ai.vectorstore.contextRunner",
            "org.springframework.ai.vectorstore.documents": "org.springframework.ai.vectorstore.documents"
        },
        "package": "package org.springframework.ai.vectorstore;",
        "property_declarations": [
            "private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t.withUserConfiguration(TestApplication.class);",
            "List<Document> documents = List.of(\n\t\t\tnew Document(\"471a8c78-549a-4b2c-bce5-ef3ae6579be3\", getText(\"classpath:/test/data/spring.ai.txt\"),\n\t\t\t\t\tMap.of(\"meta1\", \"meta1\")),\n\t\t\tnew Document(\"bc51d7f7-627b-4ba6-adf4-f0bcd1998f8f\", getText(\"classpath:/test/data/time.shelter.txt\"),\n\t\t\t\t\tMap.of()),\n\t\t\tnew Document(\"d0237682-1150-44ff-b4d2-1be9b1731ee5\", getText(\"classpath:/test/data/great.depression.txt\"),\n\t\t\t\t\tMap.of(\"meta2\", \"meta2\")));",
            "@Container\n\tstatic WeaviateContainer weaviateContainer = new WeaviateContainer(\"semitechnologies/weaviate:1.22.4\");"
        ],
        "functions": [
            {
                "name": "getText",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var resource = new DefaultResourceLoader().getResource(uri);\n\t\ttry {\n\t\t\treturn resource.getContentAsString(StandardCharsets.UTF_8);\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}",
                "is_abstract": "",
                "class_name": "WeaviateVectorStoreIT",
                "annotations": []
            },
            {
                "name": "resetCollection",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "vectorStore.delete(documents.stream().map(Document::getId).toList());",
                "is_abstract": "",
                "class_name": "WeaviateVectorStoreIT",
                "annotations": []
            },
            {
                "name": "addAndSearch",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\n\t\t\tVectorStore vectorStore = context.getBean(VectorStore.class);\n\n\t\t\tresetCollection(vectorStore);\n\n\t\t\tvectorStore.add(documents);\n\n\t\t\tList<Document> results = vectorStore.similaritySearch(SearchRequest.query(\"Spring\").withTopK(1));\n\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tDocument resultDoc = results.get(0);\n\t\t\tassertThat(resultDoc.getId()).isEqualTo(documents.get(0).getId());\n\t\t\tassertThat(resultDoc.getContent()).contains(\n\t\t\t\t\t\"Spring AI provides abstractions that serve as the foundation for developing AI applications.\");\n\t\t\tassertThat(resultDoc.getMetadata()).hasSize(2);\n\t\t\tassertThat(resultDoc.getMetadata()).containsKeys(\"meta1\", \"distance\");\n\n\t\t\t// Remove all documents from the store\n\t\t\tvectorStore.delete(documents.stream().map(doc -> doc.getId()).toList());\n\n\t\t\tresults = vectorStore.similaritySearch(SearchRequest.query(\"Spring\").withTopK(1));\n\t\t\tassertThat(results).hasSize(0);\n\t\t});",
                "is_abstract": "",
                "class_name": "WeaviateVectorStoreIT",
                "annotations": []
            },
            {
                "name": "searchWithFilters",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\t\t\tVectorStore vectorStore = context.getBean(VectorStore.class);\n\n\t\t\tvar bgDocument = new Document(\"The World is Big and Salvation Lurks Around the Corner\",\n\t\t\t\t\tMap.of(\"country\", \"BG\", \"year\", 2020));\n\t\t\tvar nlDocument = new Document(\"The World is Big and Salvation Lurks Around the Corner\",\n\t\t\t\t\tMap.of(\"country\", \"NL\"));\n\t\t\tvar bgDocument2 = new Document(\"The World is Big and Salvation Lurks Around the Corner\",\n\t\t\t\t\tMap.of(\"country\", \"BG\", \"year\", 2023));\n\n\t\t\tvectorStore.add(List.of(bgDocument, nlDocument, bgDocument2));\n\n\t\t\tList<Document> results = vectorStore.similaritySearch(SearchRequest.query(\"The World\").withTopK(5));\n\t\t\tassertThat(results).hasSize(3);\n\n\t\t\tresults = vectorStore.similaritySearch(SearchRequest.query(\"The World\")\n\t\t\t\t.withTopK(5)\n\t\t\t\t.withSimilarityThresholdAll()\n\t\t\t\t.withFilterExpression(\"country == 'NL'\"));\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tassertThat(results.get(0).getId()).isEqualTo(nlDocument.getId());\n\n\t\t\tresults = vectorStore.similaritySearch(SearchRequest.query(\"The World\")\n\t\t\t\t.withTopK(5)\n\t\t\t\t.withSimilarityThresholdAll()\n\t\t\t\t.withFilterExpression(\"country == 'BG'\"));\n\n\t\t\tassertThat(results).hasSize(2);\n\t\t\tassertThat(results.get(0).getId()).isIn(bgDocument.getId(), bgDocument2.getId());\n\t\t\tassertThat(results.get(1).getId()).isIn(bgDocument.getId(), bgDocument2.getId());\n\n\t\t\tresults = vectorStore.similaritySearch(SearchRequest.query(\"The World\")\n\t\t\t\t.withTopK(5)\n\t\t\t\t.withSimilarityThresholdAll()\n\t\t\t\t.withFilterExpression(\"country == 'BG' && year == 2020\"));\n\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tassertThat(results.get(0).getId()).isEqualTo(bgDocument.getId());\n\n\t\t\tresults = vectorStore.similaritySearch(SearchRequest.query(\"The World\")\n\t\t\t\t.withTopK(5)\n\t\t\t\t.withSimilarityThresholdAll()\n\t\t\t\t.withFilterExpression(\"NOT((country == 'BG' && year == 2020) || (country == 'NL'))\"));\n\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tassertThat(results.get(0).getId()).isEqualTo(bgDocument2.getId());\n\n\t\t\tvectorStore.delete(List.of(bgDocument.getId(), nlDocument.getId(), bgDocument2.getId()));\n\t\t});",
                "is_abstract": "",
                "class_name": "WeaviateVectorStoreIT",
                "annotations": []
            },
            {
                "name": "documentUpdate",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\n\t\t\tVectorStore vectorStore = context.getBean(VectorStore.class);\n\n\t\t\tresetCollection(vectorStore);\n\n\t\t\tDocument document = new Document(UUID.randomUUID().toString(), \"Spring AI rocks!!\",\n\t\t\t\t\tCollections.singletonMap(\"meta1\", \"meta1\"));\n\n\t\t\tvectorStore.add(List.of(document));\n\n\t\t\tList<Document> results = vectorStore.similaritySearch(SearchRequest.query(\"Spring\").withTopK(5));\n\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tDocument resultDoc = results.get(0);\n\t\t\tassertThat(resultDoc.getId()).isEqualTo(document.getId());\n\t\t\tassertThat(resultDoc.getContent()).isEqualTo(\"Spring AI rocks!!\");\n\t\t\tassertThat(resultDoc.getMetadata()).containsKey(\"meta1\");\n\t\t\tassertThat(resultDoc.getMetadata()).containsKey(\"distance\");\n\n\t\t\tDocument sameIdDocument = new Document(document.getId(),\n\t\t\t\t\t\"The World is Big and Salvation Lurks Around the Corner\",\n\t\t\t\t\tCollections.singletonMap(\"meta2\", \"meta2\"));\n\n\t\t\tvectorStore.add(List.of(sameIdDocument));\n\n\t\t\tresults = vectorStore.similaritySearch(SearchRequest.query(\"FooBar\").withTopK(5));\n\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tresultDoc = results.get(0);\n\t\t\tassertThat(resultDoc.getId()).isEqualTo(document.getId());\n\t\t\tassertThat(resultDoc.getContent()).isEqualTo(\"The World is Big and Salvation Lurks Around the Corner\");\n\t\t\tassertThat(resultDoc.getMetadata()).containsKey(\"meta2\");\n\t\t\tassertThat(resultDoc.getMetadata()).containsKey(\"distance\");\n\n\t\t\tvectorStore.delete(List.of(document.getId()));\n\n\t\t});",
                "is_abstract": "",
                "class_name": "WeaviateVectorStoreIT",
                "annotations": []
            },
            {
                "name": "searchWithThreshold",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\n\t\t\tVectorStore vectorStore = context.getBean(VectorStore.class);\n\n\t\t\tresetCollection(vectorStore);\n\n\t\t\tvectorStore.add(documents);\n\n\t\t\tList<Document> fullResult = vectorStore\n\t\t\t\t.similaritySearch(SearchRequest.query(\"Spring\").withTopK(5).withSimilarityThresholdAll());\n\n\t\t\tList<Double> distances = fullResult.stream()\n\t\t\t\t.map(doc -> (Double) doc.getMetadata().get(\"distance\"))\n\t\t\t\t.toList();\n\n\t\t\tassertThat(distances).hasSize(3);\n\n\t\t\tdouble threshold = (distances.get(0) + distances.get(1)) / 2;\n\n\t\t\tList<Document> results = vectorStore\n\t\t\t\t.similaritySearch(SearchRequest.query(\"Spring\").withTopK(5).withSimilarityThreshold(1 - threshold));\n\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tDocument resultDoc = results.get(0);\n\t\t\tassertThat(resultDoc.getId()).isEqualTo(documents.get(0).getId());\n\t\t\tassertThat(resultDoc.getContent()).contains(\n\t\t\t\t\t\"Spring AI provides abstractions that serve as the foundation for developing AI applications.\");\n\t\t\tassertThat(resultDoc.getMetadata()).containsKeys(\"meta1\", \"distance\");\n\n\t\t});",
                "is_abstract": "",
                "class_name": "WeaviateVectorStoreIT",
                "annotations": []
            },
            {
                "name": "vectorStore",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "WeaviateVectorStoreConfig config = WeaviateVectorStore.WeaviateVectorStoreConfig.builder()\n\t\t\t\t.withScheme(\"http\")\n\t\t\t\t.withHost(weaviateContainer.getHttpHostAddress())\n\t\t\t\t.withFilterableMetadataFields(List.of(MetadataField.text(\"country\"), MetadataField.number(\"year\")))\n\t\t\t\t.withConsistencyLevel(WeaviateVectorStoreConfig.ConsistentLevel.ONE)\n\t\t\t\t.build();\n\n\t\t\tWeaviateVectorStore vectorStore = new WeaviateVectorStore(config, embeddingClient);\n\n\t\t\treturn vectorStore;",
                "is_abstract": "",
                "class_name": "WeaviateVectorStoreIT TestApplication",
                "annotations": []
            },
            {
                "name": "embeddingClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new TransformersEmbeddingClient();",
                "is_abstract": "",
                "class_name": "WeaviateVectorStoreIT TestApplication",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/vector-stores/spring-ai-weaviate/src/main/java/org/springframework/ai/vectorstore/WeaviateFilterExpressionConverter.java",
        "class_names": [
            "WeaviateFilterExpressionConverter"
        ],
        "imports": "import org.springframework.ai.vectorstore.filter.Filter;\nimport org.apache.commons.lang3.time.DateFormatUtils;\nimport java.util.List;\nimport org.springframework.ai.vectorstore.filter.Filter.ExpressionType;\nimport org.springframework.util.Assert;\nimport org.springframework.ai.vectorstore.filter.Filter.Key;\nimport org.springframework.ai.vectorstore.filter.Filter.Expression;\nimport org.springframework.ai.vectorstore.filter.Filter.Group;\nimport org.springframework.ai.vectorstore.filter.converter.AbstractFilterExpressionConverter;\nimport java.util.Date;\nimport org.springframework.ai.vectorstore.filter.FilterHelper;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.WeaviateFilterExpressionConverter": "org.springframework.ai.vectorstore.WeaviateFilterExpressionConverter",
            "org.springframework.ai.vectorstore.setAllowedIdentifierNames": "org.springframework.ai.vectorstore.setAllowedIdentifierNames",
            "org.springframework.ai.vectorstore.setMapIntegerToNumberValu": "org.springframework.ai.vectorstore.setMapIntegerToNumberValu",
            "org.springframework.ai.vectorstore.doExpression": "org.springframework.ai.vectorstore.doExpression",
            "org.springframework.ai.vectorstore.getOperationSymbol": "org.springframework.ai.vectorstore.getOperationSymbol",
            "org.springframework.ai.vectorstore.doKey": "org.springframework.ai.vectorstore.doKey",
            "org.springframework.ai.vectorstore.withMetaPrefix": "org.springframework.ai.vectorstore.withMetaPrefix",
            "org.springframework.ai.vectorstore.doValu": "org.springframework.ai.vectorstore.doValu",
            "org.springframework.ai.vectorstore.doSingleValu": "org.springframework.ai.vectorstore.doSingleValu",
            "org.springframework.ai.vectorstore.doGrou": "org.springframework.ai.vectorstore.doGrou",
            "org.springframework.ai.vectorstore.mapIntegerToNumberValu": "org.springframework.ai.vectorstore.mapIntegerToNumberValu",
            "org.springframework.ai.vectorstore.SYSTEM_IDENTIFIERS": "org.springframework.ai.vectorstore.SYSTEM_IDENTIFIERS",
            "org.springframework.ai.vectorstore.allowedIdentifierNames": "org.springframework.ai.vectorstore.allowedIdentifierNames"
        },
        "package": "package org.springframework.ai.vectorstore;",
        "property_declarations": [
            "private static final List<String> SYSTEM_IDENTIFIERS = List.of(\"id\", \"_creationTimeUnix\", \"_lastUpdateTimeUnix\");",
            "private List<String> allowedIdentifierNames;",
            "private boolean mapIntegerToNumberValue = true;"
        ],
        "functions": [
            {
                "name": "setAllowedIdentifierNames",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.allowedIdentifierNames = allowedIdentifierNames;",
                "is_abstract": "",
                "class_name": "WeaviateFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "setMapIntegerToNumberValue",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.mapIntegerToNumberValue = mapIntegerToNumberValue;",
                "is_abstract": "",
                "class_name": "WeaviateFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "doExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (exp.type() == ExpressionType.IN) {\n\t\t\tFilterHelper.expandIn(exp, context, this);\n\t\t}\n\t\telse if (exp.type() == ExpressionType.NIN) {\n\t\t\tFilterHelper.expandNin(exp, context, this);\n\t\t}\n\t\telse if (exp.type() == ExpressionType.AND || exp.type() == ExpressionType.OR) {\n\t\t\tcontext.append(getOperationSymbol(exp));\n\t\t\tcontext.append(\"operands:[{\");\n\t\t\tthis.convertOperand(exp.left(), context);\n\t\t\tcontext.append(\"},\\n{\");\n\t\t\tthis.convertOperand(exp.right(), context);\n\t\t\tcontext.append(\"}]\");\n\t\t}\n\t\telse {\n\t\t\tthis.convertOperand(exp.left(), context);\n\t\t\tcontext.append(getOperationSymbol(exp));\n\t\t\tthis.convertOperand(exp.right(), context);\n\t\t}",
                "is_abstract": "",
                "class_name": "WeaviateFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "getOperationSymbol",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "switch (exp.type()) {\n\t\t\tcase AND:\n\t\t\t\treturn \"operator:And \\n\";\n\t\t\tcase OR:\n\t\t\t\treturn \"operator:Or \\n\";\n\t\t\tcase EQ:\n\t\t\t\treturn \"operator:Equal \\n\";\n\t\t\tcase NE:\n\t\t\t\treturn \"operator:NotEqual \\n\";\n\t\t\tcase LT:\n\t\t\t\treturn \"operator:LessThan \\n\";\n\t\t\tcase LTE:\n\t\t\t\treturn \"operator:LessThanEqual \\n\";\n\t\t\tcase GT:\n\t\t\t\treturn \"operator:GreaterThan \\n\";\n\t\t\tcase GTE:\n\t\t\t\treturn \"operator:GreaterThanEqual \\n\";\n\t\t\tcase IN:\n\t\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\t\"The 'IN' operator should have been transformed into chain of OR/EQ expressions.\");\n\t\t\tcase NIN:\n\t\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\t\"The 'NIN' operator should have been transformed into chain of AND/NEQ expressions.\");\n\t\t\tdefault:\n\t\t\t\tthrow new UnsupportedOperationException(\"Not supported expression type:\" + exp.type());\n\t\t}",
                "is_abstract": "",
                "class_name": "WeaviateFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "doKey",
                "parameters": [
                    ""
                ],
                "return_type": "key",
                "body": "var identifier = (hasOuterQuotes(key.key())) ? removeOuterQuotes(key.key()) : key.key();\n\t\tcontext.append(\"path:[\\\"\" + withMetaPrefix(identifier) + \"\\\"] \\n\");",
                "is_abstract": "",
                "class_name": "WeaviateFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "withMetaPrefix",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (SYSTEM_IDENTIFIERS.contains(identifier)) {\n\t\t\treturn identifier;\n\t\t}\n\n\t\tif (this.allowedIdentifierNames.contains(identifier)) {\n\t\t\treturn \"meta_\" + identifier;\n\t\t}\n\n\t\tthrow new IllegalArgumentException(\"Not allowed filter identifier name: \" + identifier\n\t\t\t\t+ \". Consider adding it to WeaviateVectorStore#filterMetadataKeys.\");",
                "is_abstract": "",
                "class_name": "WeaviateFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "doValue",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (filterValue.value() instanceof List) {\n\t\t\t// nothing\n\t\t\tthrow new IllegalStateException(\"\");\n\t\t}\n\t\telse {\n\t\t\tthis.doSingleValue(filterValue.value(), context);\n\t\t}",
                "is_abstract": "",
                "class_name": "WeaviateFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "doSingleValue",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String singleValueFormat = \"valueNumber:%s \";\n\t\tif (value instanceof Integer i) {\n\t\t\tif (this.mapIntegerToNumberValue) {\n\t\t\t\tcontext.append(String.format(singleValueFormat, i));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcontext.append(String.format(\"valueInt:%s \", i));\n\t\t\t}\n\t\t}\n\t\telse if (value instanceof Long l) {\n\t\t\tif (this.mapIntegerToNumberValue) {\n\t\t\t\tcontext.append(String.format(singleValueFormat, l));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcontext.append(String.format(\"valueInt:%s \", l));\n\t\t\t}\n\t\t}\n\t\telse if (value instanceof Double d) {\n\t\t\tcontext.append(String.format(singleValueFormat, d));\n\t\t}\n\t\telse if (value instanceof Float f) {\n\t\t\tcontext.append(String.format(singleValueFormat, f));\n\t\t}\n\t\telse if (value instanceof Boolean b) {\n\t\t\tcontext.append(String.format(\"valueBoolean:%s \", b));\n\t\t}\n\t\telse if (value instanceof String s) {\n\t\t\tcontext.append(String.format(\"valueText:\\\"%s\\\" \", s));\n\t\t}\n\t\telse if (value instanceof Date date) {\n\t\t\tString dateString = DateFormatUtils.format(date, \"yyyy-MM-dd\\'T\\'HH:mm:ssZZZZZ\");\n\t\t\tcontext.append(String.format(\"valueDate:\\\"%s\\\" \", dateString));\n\t\t}\n\t\telse {\n\t\t\tthrow new RuntimeException(\"Unsupported value type: \" + value);\n\t\t}",
                "is_abstract": "",
                "class_name": "WeaviateFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "doGroup",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// Replaces the group: AND((foo == \"bar\" OR bar == \"foo\"), \"boza\" == \"koza\") into\n\t\t// AND(AND(id != -1, (foo == \"bar\" OR bar == \"foo\")), \"boza\" == \"koza\") into\n\t\tthis.convertOperand(new Expression(ExpressionType.AND,\n\t\t\t\tnew Expression(ExpressionType.NE, new Filter.Key(\"id\"), new Filter.Value(\"-1\")), group.content()),\n\t\t\t\tcontext);",
                "is_abstract": "",
                "class_name": "WeaviateFilterExpressionConverter",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/vector-stores/spring-ai-weaviate/src/main/java/org/springframework/ai/vectorstore/WeaviateVectorStore.java",
        "class_names": [
            "WeaviateVectorStoreConfig",
            "Builder",
            "WeaviateVectorStore"
        ],
        "imports": "import java.util.stream.Collectors;\nimport io.weaviate.client.v1.graphql.model.GraphQLResponse;\nimport io.weaviate.client.v1.graphql.query.argument.WhereArgument;\nimport java.util.List;\nimport org.springframework.util.CollectionUtils;\nimport io.weaviate.client.v1.graphql.query.fields.Field;\nimport org.springframework.util.StringUtils;\nimport io.weaviate.client.Config;\nimport io.weaviate.client.v1.filters.Operator;\nimport io.weaviate.client.base.Result;\nimport io.weaviate.client.v1.graphql.query.builder.GetBuilder.GetBuilderBuilder;\nimport io.weaviate.client.v1.graphql.query.fields.Fields;\nimport io.weaviate.client.v1.filters.WhereFilter;\nimport io.weaviate.client.v1.auth.exception.AuthException;\nimport io.weaviate.client.WeaviateAuthClient;\nimport io.weaviate.client.v1.graphql.query.argument.NearVectorArgument;\nimport io.weaviate.client.v1.data.model.WeaviateObject;\nimport java.util.Map;\nimport org.springframework.ai.vectorstore.WeaviateVectorStore.WeaviateVectorStoreConfig.ConsistentLevel;\nimport io.weaviate.client.v1.graphql.query.builder.GetBuilder;\nimport java.util.Arrays;\nimport org.springframework.ai.vectorstore.WeaviateVectorStore.WeaviateVectorStoreConfig.MetadataField;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport io.weaviate.client.v1.batch.model.ObjectGetResponse;\nimport java.util.HashMap;\nimport org.springframework.beans.factory.InitializingBean;\nimport io.weaviate.client.WeaviateClient;\nimport org.springframework.ai.embedding.EmbeddingClient;\nimport java.util.ArrayList;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.springframework.util.Assert;\nimport org.springframework.ai.document.Document;\nimport io.weaviate.client.v1.graphql.model.GraphQLError;\nimport io.weaviate.client.base.WeaviateErrorMessage;\nimport java.util.Optional;\nimport io.weaviate.client.v1.batch.model.BatchDeleteResponse;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.WeaviateVectorStor": "org.springframework.ai.vectorstore.WeaviateVectorStor",
            "org.springframework.ai.vectorstore.WeaviateVectorStoreConfi": "org.springframework.ai.vectorstore.WeaviateVectorStoreConfi",
            "org.springframework.ai.vectorstore.Builder": "org.springframework.ai.vectorstore.Builder",
            "org.springframework.ai.vectorstore.text": "org.springframework.ai.vectorstore.text",
            "org.springframework.ai.vectorstore.number": "org.springframework.ai.vectorstore.number",
            "org.springframework.ai.vectorstore.bool": "org.springframework.ai.vectorstore.bool",
            "org.springframework.ai.vectorstore.builder": "org.springframework.ai.vectorstore.builder",
            "org.springframework.ai.vectorstore.defaultConfi": "org.springframework.ai.vectorstore.defaultConfi",
            "org.springframework.ai.vectorstore.withApiKey": "org.springframework.ai.vectorstore.withApiKey",
            "org.springframework.ai.vectorstore.withSchem": "org.springframework.ai.vectorstore.withSchem",
            "org.springframework.ai.vectorstore.withHost": "org.springframework.ai.vectorstore.withHost",
            "org.springframework.ai.vectorstore.withFilterableMetadataFields": "org.springframework.ai.vectorstore.withFilterableMetadataFields",
            "org.springframework.ai.vectorstore.withHeaders": "org.springframework.ai.vectorstore.withHeaders",
            "org.springframework.ai.vectorstore.withObjectClass": "org.springframework.ai.vectorstore.withObjectClass",
            "org.springframework.ai.vectorstore.withConsistencyLevel": "org.springframework.ai.vectorstore.withConsistencyLevel",
            "org.springframework.ai.vectorstore.build": "org.springframework.ai.vectorstore.build",
            "org.springframework.ai.vectorstore.buildWeaviateSimilaritySearchFields": "org.springframework.ai.vectorstore.buildWeaviateSimilaritySearchFields",
            "org.springframework.ai.vectorstore.add": "org.springframework.ai.vectorstore.add",
            "org.springframework.ai.vectorstore.toWeaviateObject": "org.springframework.ai.vectorstore.toWeaviateObject",
            "org.springframework.ai.vectorstore.delet": "org.springframework.ai.vectorstore.delet",
            "org.springframework.ai.vectorstore.similaritySearch": "org.springframework.ai.vectorstore.similaritySearch",
            "org.springframework.ai.vectorstore.SuppressWarnings": "org.springframework.ai.vectorstore.SuppressWarnings",
            "org.springframework.ai.vectorstore.toFloatArray": "org.springframework.ai.vectorstore.toFloatArray",
            "org.springframework.ai.vectorstore.afterPropertiesSet": "org.springframework.ai.vectorstore.afterPropertiesSet",
            "org.springframework.ai.vectorstore.DOCUMENT_METADATA_DISTANCE_KEY_NAME": "org.springframework.ai.vectorstore.DOCUMENT_METADATA_DISTANCE_KEY_NAME",
            "org.springframework.ai.vectorstore.METADATA_FIELD_PREFIX": "org.springframework.ai.vectorstore.METADATA_FIELD_PREFIX",
            "org.springframework.ai.vectorstore.CONTENT_FIELD_NAME": "org.springframework.ai.vectorstore.CONTENT_FIELD_NAME",
            "org.springframework.ai.vectorstore.METADATA_FIELD_NAME": "org.springframework.ai.vectorstore.METADATA_FIELD_NAME",
            "org.springframework.ai.vectorstore.ADDITIONAL_FIELD_NAME": "org.springframework.ai.vectorstore.ADDITIONAL_FIELD_NAME",
            "org.springframework.ai.vectorstore.ADDITIONAL_ID_FIELD_NAME": "org.springframework.ai.vectorstore.ADDITIONAL_ID_FIELD_NAME",
            "org.springframework.ai.vectorstore.ADDITIONAL_CERTAINTY_FIELD_NAME": "org.springframework.ai.vectorstore.ADDITIONAL_CERTAINTY_FIELD_NAME",
            "org.springframework.ai.vectorstore.ADDITIONAL_VECTOR_FIELD_NAME": "org.springframework.ai.vectorstore.ADDITIONAL_VECTOR_FIELD_NAME",
            "org.springframework.ai.vectorstore.embeddingClient": "org.springframework.ai.vectorstore.embeddingClient",
            "org.springframework.ai.vectorstore.weaviateClient": "org.springframework.ai.vectorstore.weaviateClient",
            "org.springframework.ai.vectorstore.consistencyLevel": "org.springframework.ai.vectorstore.consistencyLevel",
            "org.springframework.ai.vectorstore.weaviateObjectClass": "org.springframework.ai.vectorstore.weaviateObjectClass",
            "org.springframework.ai.vectorstore.filterMetadataFields": "org.springframework.ai.vectorstore.filterMetadataFields",
            "org.springframework.ai.vectorstore.weaviateSimilaritySearchFields": "org.springframework.ai.vectorstore.weaviateSimilaritySearchFields",
            "org.springframework.ai.vectorstore.filterExpressionConverter": "org.springframework.ai.vectorstore.filterExpressionConverter",
            "org.springframework.ai.vectorstore.objetMapper": "org.springframework.ai.vectorstore.objetMapper",
            "org.springframework.ai.vectorstore.apiKey": "org.springframework.ai.vectorstore.apiKey",
            "org.springframework.ai.vectorstore.schem": "org.springframework.ai.vectorstore.schem",
            "org.springframework.ai.vectorstore.host": "org.springframework.ai.vectorstore.host",
            "org.springframework.ai.vectorstore.headers": "org.springframework.ai.vectorstore.headers",
            "org.springframework.ai.vectorstore.objectClass": "org.springframework.ai.vectorstore.objectClass"
        },
        "package": "package org.springframework.ai.vectorstore;",
        "property_declarations": [
            "private final String weaviateObjectClass;",
            "private List<MetadataField> filterMetadataFields = List.of();",
            "private final String apiKey;",
            "private final Map<String, String> headers;",
            "private static final String ADDITIONAL_FIELD_NAME = \"_additional\";",
            "private final ConsistentLevel consistencyLevel;",
            "public static final String DOCUMENT_METADATA_DISTANCE_KEY_NAME = \"distance\";",
            "private final Field[] weaviateSimilaritySearchFields;",
            "private static final String ADDITIONAL_ID_FIELD_NAME = \"id\";",
            "private static final String CONTENT_FIELD_NAME = \"content\";",
            "private static final String METADATA_FIELD_NAME = \"metadata\";",
            "private final WeaviateClient weaviateClient;",
            "private String objectClass = \"SpringAiWeaviate\";",
            "private final EmbeddingClient embeddingClient;",
            "private final List<MetadataField> filterMetadataFields;",
            "private final WeaviateFilterExpressionConverter filterExpressionConverter;",
            "private final String host;",
            "private static final String ADDITIONAL_CERTAINTY_FIELD_NAME = \"certainty\";",
            "private Map<String, String> headers = Map.of();",
            "private final String scheme;",
            "private ConsistentLevel consistencyLevel = WeaviateVectorStoreConfig.ConsistentLevel.ONE;",
            "private String host = \"localhost:8080\";",
            "private final ObjectMapper objetMapper = new ObjectMapper();",
            "private String scheme = \"http\";",
            "private static final String ADDITIONAL_VECTOR_FIELD_NAME = \"vector\";",
            "private String apiKey = \"\";",
            "private static final String METADATA_FIELD_PREFIX = \"meta_\";"
        ],
        "functions": [
            {
                "name": "text",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new MetadataField(name, Type.TEXT);",
                "is_abstract": "",
                "class_name": "WeaviateVectorStore WeaviateVectorStoreConfig",
                "annotations": []
            },
            {
                "name": "number",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new MetadataField(name, Type.NUMBER);",
                "is_abstract": "",
                "class_name": "WeaviateVectorStore WeaviateVectorStoreConfig",
                "annotations": []
            },
            {
                "name": "bool",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new MetadataField(name, Type.BOOLEAN);",
                "is_abstract": "",
                "class_name": "WeaviateVectorStore WeaviateVectorStoreConfig",
                "annotations": []
            },
            {
                "name": "builder",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Builder();",
                "is_abstract": "",
                "class_name": "WeaviateVectorStore WeaviateVectorStoreConfig",
                "annotations": []
            },
            {
                "name": "defaultConfig",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return builder().build();",
                "is_abstract": "",
                "class_name": "WeaviateVectorStore WeaviateVectorStoreConfig",
                "annotations": []
            },
            {
                "name": "withApiKey",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(apiKey, \"The apiKey can not be null.\");\n\t\t\t\tthis.apiKey = apiKey;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "WeaviateVectorStore WeaviateVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "withScheme",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.hasText(scheme, \"The scheme can not be empty.\");\n\t\t\t\tthis.scheme = scheme;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "WeaviateVectorStore WeaviateVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "withHost",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.hasText(host, \"The host can not be empty.\");\n\t\t\t\tthis.host = host;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "WeaviateVectorStore WeaviateVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "withFilterableMetadataFields",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(filterMetadataFields, \"The filterMetadataFields can not be null.\");\n\t\t\t\tthis.filterMetadataFields = filterMetadataFields;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "WeaviateVectorStore WeaviateVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "withHeaders",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(headers, \"The headers can not be null.\");\n\t\t\t\tthis.headers = headers;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "WeaviateVectorStore WeaviateVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "withObjectClass",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.hasText(objectClass, \"The objectClass can not be empty.\");\n\t\t\t\tthis.objectClass = objectClass;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "WeaviateVectorStore WeaviateVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "withConsistencyLevel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(consistencyLevel, \"The consistencyLevel can not be null.\");\n\t\t\t\tthis.consistencyLevel = consistencyLevel;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "WeaviateVectorStore WeaviateVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "build",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new WeaviateVectorStoreConfig(this);",
                "is_abstract": "",
                "class_name": "WeaviateVectorStore WeaviateVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "buildWeaviateSimilaritySearchFields",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "List<Field> searchWeaviateFieldList = new ArrayList<>();\n\n\t\tsearchWeaviateFieldList.add(Field.builder().name(CONTENT_FIELD_NAME).build());\n\t\tsearchWeaviateFieldList.add(Field.builder().name(METADATA_FIELD_NAME).build());\n\t\tsearchWeaviateFieldList.addAll(this.filterMetadataFields.stream()\n\t\t\t.map(mf -> Field.builder().name(METADATA_FIELD_PREFIX + mf.name()).build())\n\t\t\t.toList());\n\t\tsearchWeaviateFieldList.add(Field.builder()\n\t\t\t.name(ADDITIONAL_FIELD_NAME)\n\t\t\t// https://weaviate.io/developers/weaviate/api/graphql/get#additional-properties--metadata\n\t\t\t.fields(Field.builder().name(ADDITIONAL_ID_FIELD_NAME).build(),\n\t\t\t\t\tField.builder().name(ADDITIONAL_CERTAINTY_FIELD_NAME).build(),\n\t\t\t\t\tField.builder().name(ADDITIONAL_VECTOR_FIELD_NAME).build())\n\t\t\t.build());\n\n\t\treturn searchWeaviateFieldList.toArray(new Field[0]);",
                "is_abstract": "",
                "class_name": "WeaviateVectorStore WeaviateVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "add",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (CollectionUtils.isEmpty(documents)) {\n\t\t\treturn;\n\t\t}\n\n\t\tList<WeaviateObject> weaviateObjects = documents.stream().map(this::toWeaviateObject).toList();\n\n\t\tResult<ObjectGetResponse[]> response = this.weaviateClient.batch()\n\t\t\t.objectsBatcher()\n\t\t\t.withObjects(weaviateObjects.toArray(new WeaviateObject[0]))\n\t\t\t.withConsistencyLevel(this.consistencyLevel.name())\n\t\t\t.run();\n\n\t\tList<String> errorMessages = new ArrayList<>();\n\n\t\tif (response.hasErrors()) {\n\t\t\terrorMessages.add(response.getError()\n\t\t\t\t.getMessages()\n\t\t\t\t.stream()\n\t\t\t\t.map(wm -> wm.getMessage())\n\t\t\t\t.collect(Collectors.joining(System.lineSeparator())));\n\t\t\tthrow new RuntimeException(\"Failed to add documents because: \\n\" + errorMessages);\n\t\t}\n\n\t\tif (response.getResult() != null) {\n\t\t\tfor (var r : response.getResult()) {\n\t\t\t\tif (r.getResult() != null && r.getResult().getErrors() != null) {\n\t\t\t\t\tvar error = r.getResult().getErrors();\n\t\t\t\t\terrorMessages.add(error.getError()\n\t\t\t\t\t\t.stream()\n\t\t\t\t\t\t.map(e -> e.getMessage())\n\t\t\t\t\t\t.collect(Collectors.joining(System.lineSeparator())));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!CollectionUtils.isEmpty(errorMessages)) {\n\t\t\tthrow new RuntimeException(\"Failed to add documents because: \\n\" + errorMessages);\n\t\t}",
                "is_abstract": "",
                "class_name": "WeaviateVectorStore WeaviateVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "toWeaviateObject",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (CollectionUtils.isEmpty(document.getEmbedding())) {\n\t\t\tList<Double> embedding = this.embeddingClient.embed(document);\n\t\t\tdocument.setEmbedding(embedding);\n\t\t}\n\n\t\t// https://weaviate.io/developers/weaviate/config-refs/datatypes\n\t\tMap<String, Object> fields = new HashMap<>();\n\t\tfields.put(CONTENT_FIELD_NAME, document.getContent());\n\t\ttry {\n\t\t\tString metadataString = this.objetMapper.writeValueAsString(document.getMetadata());\n\t\t\tfields.put(METADATA_FIELD_NAME, metadataString);\n\t\t}\n\t\tcatch (JsonProcessingException e) {\n\t\t\tthrow new RuntimeException(\"Failed to serialize the Document metadata: \" + document.getContent());\n\t\t}\n\n\t\t// Add the filterable metadata fields as top level fields, allowing filler\n\t\t// expressions on them.\n\t\tfor (MetadataField mf : this.filterMetadataFields) {\n\t\t\tif (document.getMetadata().containsKey(mf.name())) {\n\t\t\t\tfields.put(METADATA_FIELD_PREFIX + mf.name(), document.getMetadata().get(mf.name()));\n\t\t\t}\n\t\t}\n\n\t\treturn WeaviateObject.builder()\n\t\t\t.className(this.weaviateObjectClass)\n\t\t\t.id(document.getId())\n\t\t\t.vector(toFloatArray(document.getEmbedding()))\n\t\t\t.properties(fields)\n\t\t\t.build();",
                "is_abstract": "",
                "class_name": "WeaviateVectorStore WeaviateVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "delete",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Result<BatchDeleteResponse> result = this.weaviateClient.batch()\n\t\t\t.objectsBatchDeleter()\n\t\t\t.withClassName(this.weaviateObjectClass)\n\t\t\t.withConsistencyLevel(this.consistencyLevel.name())\n\t\t\t.withWhere(WhereFilter.builder()\n\t\t\t\t.path(\"id\")\n\t\t\t\t.operator(Operator.ContainsAny)\n\t\t\t\t.valueString(documentIds.toArray(new String[0]))\n\t\t\t\t.build())\n\t\t\t.run();\n\n\t\tif (result.hasErrors()) {\n\t\t\tString errorMessages = result.getError()\n\t\t\t\t.getMessages()\n\t\t\t\t.stream()\n\t\t\t\t.map(wm -> wm.getMessage())\n\t\t\t\t.collect(Collectors.joining(\",\"));\n\t\t\tthrow new RuntimeException(\"Failed to delete documents because: \\n\" + errorMessages);\n\t\t}\n\n\t\treturn Optional.of(!result.hasErrors());",
                "is_abstract": "",
                "class_name": "WeaviateVectorStore WeaviateVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "similaritySearch",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Float[] embedding = toFloatArray(this.embeddingClient.embed(request.getQuery()));\n\n\t\tGetBuilder.GetBuilderBuilder builder = GetBuilder.builder();\n\n\t\tGetBuilderBuilder queryBuilder = builder.className(this.weaviateObjectClass)\n\t\t\t.withNearVectorFilter(NearVectorArgument.builder()\n\t\t\t\t.vector(embedding)\n\t\t\t\t.certainty((float) request.getSimilarityThreshold())\n\t\t\t\t.build())\n\t\t\t.limit(request.getTopK())\n\t\t\t.withWhereFilter(WhereArgument.builder().build()) // adds an empty 'where:{}'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// placeholder.\n\t\t\t.fields(Fields.builder().fields(this.weaviateSimilaritySearchFields).build());\n\n\t\tString graphQLQuery = queryBuilder.build().buildQuery();\n\n\t\tif (request.hasFilterExpression()) {\n\t\t\t// replace the empty 'where:{}' placeholder with real filter.\n\t\t\tString filter = this.filterExpressionConverter.convertExpression(request.getFilterExpression());\n\t\t\tgraphQLQuery = graphQLQuery.replace(\"where:{}\", String.format(\"where:{%s}\", filter));\n\t\t}\n\t\telse {\n\t\t\t// remove the empty 'where:{}' placeholder.\n\t\t\tgraphQLQuery = graphQLQuery.replace(\"where:{}\", \"\");\n\t\t}\n\n\t\tResult<GraphQLResponse> result = this.weaviateClient.graphQL().raw().withQuery(graphQLQuery).run();\n\n\t\tif (result.hasErrors()) {\n\t\t\tthrow new IllegalArgumentException(result.getError()\n\t\t\t\t.getMessages()\n\t\t\t\t.stream()\n\t\t\t\t.map(WeaviateErrorMessage::getMessage)\n\t\t\t\t.collect(Collectors.joining(System.lineSeparator())));\n\t\t}\n\n\t\tGraphQLError[] errors = result.getResult().getErrors();\n\t\tif (errors != null && errors.length > 0) {\n\t\t\tthrow new IllegalArgumentException(Arrays.stream(errors)\n\t\t\t\t.map(GraphQLError::getMessage)\n\t\t\t\t.collect(Collectors.joining(System.lineSeparator())));\n\t\t}\n\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tOptional<Map.Entry<String, Map<?, ?>>> resGetPart = ((Map<String, Map<?, ?>>) result.getResult().getData())\n\t\t\t.entrySet()\n\t\t\t.stream()\n\t\t\t.findFirst();\n\t\tif (!resGetPart.isPresent()) {\n\t\t\treturn List.of();\n\t\t}\n\n\t\tOptional<?> resItemsPart = resGetPart.get().getValue().entrySet().stream().findFirst();\n\t\tif (!resItemsPart.isPresent()) {\n\t\t\treturn List.of();\n\t\t}\n\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tList<Map<String, ?>> resItems = ((Map.Entry<String, List<Map<String, ?>>>) resItemsPart.get()).getValue();\n\n\t\treturn resItems.stream().map(this::toDocument).toList();",
                "is_abstract": "",
                "class_name": "WeaviateVectorStore WeaviateVectorStoreConfig Builder",
                "annotations": [
                    "@SuppressWarnings(\"unchecked\")",
                    "@SuppressWarnings(\"unchecked\")"
                ]
            },
            {
                "name": "SuppressWarnings",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// Additional (System)\n\t\tMap<String, ?> additional = (Map<String, ?>) item.get(ADDITIONAL_FIELD_NAME);\n\t\tdouble certainty = (Double) additional.get(ADDITIONAL_CERTAINTY_FIELD_NAME);\n\t\tString id = (String) additional.get(ADDITIONAL_ID_FIELD_NAME);\n\t\tList<Double> embedding = ((List<Double>) additional.get(ADDITIONAL_VECTOR_FIELD_NAME)).stream().toList();\n\n\t\t// Metadata\n\t\tMap<String, Object> metadata = new HashMap<>();\n\t\tmetadata.put(DOCUMENT_METADATA_DISTANCE_KEY_NAME, 1 - certainty);\n\n\t\ttry {\n\t\t\tString metadataJson = (String) item.get(METADATA_FIELD_NAME);\n\t\t\tif (StringUtils.hasText(metadataJson)) {\n\t\t\t\tmetadata.putAll(this.objetMapper.readValue(metadataJson, Map.class));\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\n\t\t// Content\n\t\tString content = (String) item.get(CONTENT_FIELD_NAME);\n\n\t\tvar document = new Document(id, content, metadata);\n\t\tdocument.setEmbedding(embedding);\n\n\t\treturn document;",
                "is_abstract": "",
                "class_name": "WeaviateVectorStore WeaviateVectorStoreConfig Builder",
                "annotations": [
                    "@SuppressWarnings(\"unchecked\")"
                ]
            },
            {
                "name": "toFloatArray",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return doubleList.stream().map(Number::floatValue).toList().toArray(new Float[0]);",
                "is_abstract": "",
                "class_name": "WeaviateVectorStore WeaviateVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "afterPropertiesSet",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Map<String, Object> metadata = new HashMap<>();\n\t\tif (!CollectionUtils.isEmpty(this.filterMetadataFields)) {\n\t\t\tfor (MetadataField mf : this.filterMetadataFields) {\n\t\t\t\tswitch (mf.type()) {\n\t\t\t\t\tcase TEXT:\n\t\t\t\t\t\tmetadata.put(mf.name(), \"Hello\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase NUMBER:\n\t\t\t\t\t\tmetadata.put(mf.name(), 3.14);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase BOOLEAN:\n\t\t\t\t\t\tmetadata.put(mf.name(), true);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvar document = new Document(\"Hello world\", metadata);\n\t\tthis.add(List.of(document));\n\t\tthis.delete(List.of(document.getId()));",
                "is_abstract": "",
                "class_name": "WeaviateVectorStore WeaviateVectorStoreConfig Builder",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/vector-stores/spring-ai-mongodb-atlas-store/src/test/java/org/springframework/ai/vectorstore/VectorSearchAggregationTest.java",
        "class_names": [
            "VectorSearchAggregationTest"
        ],
        "imports": "import org.springframework.data.mongodb.core.aggregation.Aggregation;\nimport java.util.List;\nimport org.bson.Document;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.VectorSearchAggregationTest": "org.springframework.ai.vectorstore.VectorSearchAggregationTest",
            "org.springframework.ai.vectorstore.toDocumentNoFilter": "org.springframework.ai.vectorstore.toDocumentNoFilter",
            "org.springframework.ai.vectorstore.toDocumentWithFilter": "org.springframework.ai.vectorstore.toDocumentWithFilter"
        },
        "package": "package org.springframework.ai.vectorstore;",
        "property_declarations": [],
        "functions": [
            {
                "name": "toDocumentNoFilter",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var vectorSearchAggregation = new VectorSearchAggregation(List.of(1.0, 2.0, 3.0), \"embedding\", 10,\n\t\t\t\t\"vector_store\", 10, \"\");\n\t\tvar aggregation = Aggregation.newAggregation(vectorSearchAggregation);\n\t\tvar document = aggregation.toDocument(\"vector_store\", Aggregation.DEFAULT_CONTEXT);\n\n\t\tvar vectorSearchDocument = new Document(\"$vectorSearch\",\n\t\t\t\tnew Document(\"queryVector\", List.of(1.0, 2.0, 3.0)).append(\"path\", \"embedding\")\n\t\t\t\t\t.append(\"numCandidates\", 10)\n\t\t\t\t\t.append(\"index\", \"vector_store\")\n\t\t\t\t\t.append(\"limit\", 10));\n\t\tvar expected = new Document().append(\"aggregate\", \"vector_store\")\n\t\t\t.append(\"pipeline\", List.of(vectorSearchDocument));\n\t\tassertEquals(expected, document);",
                "is_abstract": "",
                "class_name": "VectorSearchAggregationTest",
                "annotations": []
            },
            {
                "name": "toDocumentWithFilter",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var vectorSearchAggregation = new VectorSearchAggregation(List.of(1.0, 2.0, 3.0), \"embedding\", 10,\n\t\t\t\t\"vector_store\", 10, \"{\\\"metadata.country\\\":{$eq:\\\"BG\\\"}}\");\n\t\tvar aggregation = Aggregation.newAggregation(vectorSearchAggregation);\n\t\tvar document = aggregation.toDocument(\"vector_store\", Aggregation.DEFAULT_CONTEXT);\n\n\t\tvar vectorSearchDocument = new Document(\"$vectorSearch\",\n\t\t\t\tnew Document(\"queryVector\", List.of(1.0, 2.0, 3.0)).append(\"path\", \"embedding\")\n\t\t\t\t\t.append(\"numCandidates\", 10)\n\t\t\t\t\t.append(\"index\", \"vector_store\")\n\t\t\t\t\t.append(\"filter\", new Document(\"metadata.country\", new Document().append(\"$eq\", \"BG\")))\n\t\t\t\t\t.append(\"limit\", 10));\n\t\tvar expected = new Document().append(\"aggregate\", \"vector_store\")\n\t\t\t.append(\"pipeline\", List.of(vectorSearchDocument));\n\t\tassertEquals(expected, document);",
                "is_abstract": "",
                "class_name": "VectorSearchAggregationTest",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/vector-stores/spring-ai-mongodb-atlas-store/src/test/java/org/springframework/ai/vectorstore/MongoDBAtlasVectorStoreIT.java",
        "class_names": [
            "MongoDBAtlasVectorStoreIT",
            "TestApplication"
        ],
        "imports": "import java.util.stream.Collectors;\nimport java.util.List;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport org.springframework.data.mongodb.core.MongoTemplate;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport java.util.Map;\nimport org.springframework.ai.openai.api.OpenAiApi;\nimport org.springframework.context.annotation.Bean;\nimport java.util.Collections;\nimport org.springframework.ai.embedding.EmbeddingClient;\nimport org.springframework.boot.SpringBootConfiguration;\nimport org.testcontainers.junit.jupiter.Testcontainers;\nimport com.mongodb.client.MongoClient;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.springframework.ai.document.Document;\nimport org.junit.jupiter.api.Test;\nimport org.testcontainers.junit.jupiter.Container;\nimport java.util.UUID;\nimport org.springframework.ai.openai.OpenAiEmbeddingClient;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.MongoDBAtlasVectorStoreIT": "org.springframework.ai.vectorstore.MongoDBAtlasVectorStoreIT",
            "org.springframework.ai.vectorstore.TestApplication": "org.springframework.ai.vectorstore.TestApplication",
            "org.springframework.ai.vectorstore.beforeEach": "org.springframework.ai.vectorstore.beforeEach",
            "org.springframework.ai.vectorstore.vectorStoreTest": "org.springframework.ai.vectorstore.vectorStoreTest",
            "org.springframework.ai.vectorstore.documentUpdateTest": "org.springframework.ai.vectorstore.documentUpdateTest",
            "org.springframework.ai.vectorstore.searchWithFilters": "org.springframework.ai.vectorstore.searchWithFilters",
            "org.springframework.ai.vectorstore.vectorStor": "org.springframework.ai.vectorstore.vectorStor",
            "org.springframework.ai.vectorstore.mongoTemplat": "org.springframework.ai.vectorstore.mongoTemplat",
            "org.springframework.ai.vectorstore.embeddingClient": "org.springframework.ai.vectorstore.embeddingClient",
            "org.springframework.ai.vectorstore.privat": "org.springframework.ai.vectorstore.privat",
            "org.springframework.ai.vectorstore.contextRunner": "org.springframework.ai.vectorstore.contextRunner"
        },
        "package": "package org.springframework.ai.vectorstore;",
        "property_declarations": [
            "private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t.withUserConfiguration(TestApplication.class)\n\t\t.withPropertyValues(\"spring.data.mongodb.database=springaisample\",\n\t\t\t\tString.format(\"spring.data.mongodb.uri=\" + container.getConnectionString()));",
            "@Container\n\tprivate static MongoDBAtlasContainer container = new MongoDBAtlasContainer();"
        ],
        "functions": [
            {
                "name": "beforeEach",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\t\t\tMongoTemplate mongoTemplate = context.getBean(MongoTemplate.class);\n\t\t\tmongoTemplate.getCollection(\"vector_store\").deleteMany(new org.bson.Document());\n\t\t});",
                "is_abstract": "",
                "class_name": "MongoDBAtlasVectorStoreIT",
                "annotations": []
            },
            {
                "name": "vectorStoreTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\t\t\tVectorStore vectorStore = context.getBean(VectorStore.class);\n\n\t\t\tList<Document> documents = List.of(\n\t\t\t\t\tnew Document(\n\t\t\t\t\t\t\t\"Spring AI rocks!! Spring AI rocks!! Spring AI rocks!! Spring AI rocks!! Spring AI rocks!!\",\n\t\t\t\t\t\t\tCollections.singletonMap(\"meta1\", \"meta1\")),\n\t\t\t\t\tnew Document(\"Hello World Hello World Hello World Hello World Hello World Hello World Hello World\"),\n\t\t\t\t\tnew Document(\n\t\t\t\t\t\t\t\"Great Depression Great Depression Great Depression Great Depression Great Depression Great Depression\",\n\t\t\t\t\t\t\tCollections.singletonMap(\"meta2\", \"meta2\")));\n\n\t\t\tvectorStore.add(documents);\n\t\t\tThread.sleep(5000); // Await a second for the document to be indexed\n\n\t\t\tList<Document> results = vectorStore.similaritySearch(SearchRequest.query(\"Great\").withTopK(1));\n\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tDocument resultDoc = results.get(0);\n\t\t\tassertThat(resultDoc.getId()).isEqualTo(documents.get(2).getId());\n\t\t\tassertThat(resultDoc.getContent()).isEqualTo(\n\t\t\t\t\t\"Great Depression Great Depression Great Depression Great Depression Great Depression Great Depression\");\n\t\t\tassertThat(resultDoc.getMetadata()).containsEntry(\"meta2\", \"meta2\");\n\n\t\t\t// Remove all documents from the store\n\t\t\tvectorStore.delete(documents.stream().map(Document::getId).collect(Collectors.toList()));\n\n\t\t\tList<Document> results2 = vectorStore.similaritySearch(SearchRequest.query(\"Great\").withTopK(1));\n\t\t\tassertThat(results2).isEmpty();\n\n\t\t});",
                "is_abstract": "",
                "class_name": "MongoDBAtlasVectorStoreIT",
                "annotations": []
            },
            {
                "name": "documentUpdateTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\t\t\tVectorStore vectorStore = context.getBean(VectorStore.class);\n\n\t\t\tDocument document = new Document(UUID.randomUUID().toString(), \"Spring AI rocks!!\",\n\t\t\t\t\tCollections.singletonMap(\"meta1\", \"meta1\"));\n\n\t\t\tvectorStore.add(List.of(document));\n\t\t\tThread.sleep(5000); // Await a second for the document to be indexed\n\n\t\t\tList<Document> results = vectorStore.similaritySearch(SearchRequest.query(\"Spring\").withTopK(5));\n\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tDocument resultDoc = results.get(0);\n\t\t\tassertThat(resultDoc.getId()).isEqualTo(document.getId());\n\t\t\tassertThat(resultDoc.getContent()).isEqualTo(\"Spring AI rocks!!\");\n\t\t\tassertThat(resultDoc.getMetadata()).containsEntry(\"meta1\", \"meta1\");\n\n\t\t\tDocument sameIdDocument = new Document(document.getId(),\n\t\t\t\t\t\"The World is Big and Salvation Lurks Around the Corner\",\n\t\t\t\t\tCollections.singletonMap(\"meta2\", \"meta2\"));\n\n\t\t\tvectorStore.add(List.of(sameIdDocument));\n\n\t\t\tresults = vectorStore.similaritySearch(SearchRequest.query(\"FooBar\").withTopK(5));\n\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tresultDoc = results.get(0);\n\t\t\tassertThat(resultDoc.getId()).isEqualTo(document.getId());\n\t\t\tassertThat(resultDoc.getContent()).isEqualTo(\"The World is Big and Salvation Lurks Around the Corner\");\n\t\t\tassertThat(resultDoc.getMetadata()).containsEntry(\"meta2\", \"meta2\");\n\t\t});",
                "is_abstract": "",
                "class_name": "MongoDBAtlasVectorStoreIT",
                "annotations": []
            },
            {
                "name": "searchWithFilters",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\t\t\tVectorStore vectorStore = context.getBean(VectorStore.class);\n\n\t\t\tvar bgDocument = new Document(\"The World is Big and Salvation Lurks Around the Corner\",\n\t\t\t\t\tMap.of(\"country\", \"BG\", \"year\", 2020));\n\t\t\tvar nlDocument = new Document(\"The World is Big and Salvation Lurks Around the Corner\",\n\t\t\t\t\tMap.of(\"country\", \"NL\"));\n\t\t\tvar bgDocument2 = new Document(\"The World is Big and Salvation Lurks Around the Corner\",\n\t\t\t\t\tMap.of(\"country\", \"BG\", \"year\", 2023));\n\n\t\t\tvectorStore.add(List.of(bgDocument, nlDocument, bgDocument2));\n\t\t\tThread.sleep(5000); // Await a second for the document to be indexed\n\n\t\t\tList<Document> results = vectorStore.similaritySearch(SearchRequest.query(\"The World\").withTopK(5));\n\t\t\tassertThat(results).hasSize(3);\n\n\t\t\tresults = vectorStore.similaritySearch(SearchRequest.query(\"The World\")\n\t\t\t\t.withTopK(5)\n\t\t\t\t.withSimilarityThresholdAll()\n\t\t\t\t.withFilterExpression(\"country == 'NL'\"));\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tassertThat(results.get(0).getId()).isEqualTo(nlDocument.getId());\n\n\t\t\tresults = vectorStore.similaritySearch(SearchRequest.query(\"The World\")\n\t\t\t\t.withTopK(5)\n\t\t\t\t.withSimilarityThresholdAll()\n\t\t\t\t.withFilterExpression(\"country == 'BG'\"));\n\n\t\t\tassertThat(results).hasSize(2);\n\t\t\tassertThat(results.get(0).getId()).isIn(bgDocument.getId(), bgDocument2.getId());\n\t\t\tassertThat(results.get(1).getId()).isIn(bgDocument.getId(), bgDocument2.getId());\n\n\t\t\tresults = vectorStore.similaritySearch(SearchRequest.query(\"The World\")\n\t\t\t\t.withTopK(5)\n\t\t\t\t.withSimilarityThresholdAll()\n\t\t\t\t.withFilterExpression(\"country == 'BG' && year == 2020\"));\n\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tassertThat(results.get(0).getId()).isEqualTo(bgDocument.getId());\n\n\t\t\tresults = vectorStore.similaritySearch(SearchRequest.query(\"The World\")\n\t\t\t\t.withTopK(5)\n\t\t\t\t.withSimilarityThresholdAll()\n\t\t\t\t.withFilterExpression(\"NOT(country == 'BG' && year == 2020)\"));\n\n\t\t\tassertThat(results).hasSize(2);\n\t\t\tassertThat(results.get(0).getId()).isIn(nlDocument.getId(), bgDocument2.getId());\n\t\t\tassertThat(results.get(1).getId()).isIn(nlDocument.getId(), bgDocument2.getId());\n\n\t\t});",
                "is_abstract": "",
                "class_name": "MongoDBAtlasVectorStoreIT",
                "annotations": []
            },
            {
                "name": "vectorStore",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new MongoDBAtlasVectorStore(mongoTemplate, embeddingClient,\n\t\t\t\t\tMongoDBAtlasVectorStore.MongoDBVectorStoreConfig.builder()\n\t\t\t\t\t\t.withMetadataFieldsToFilter(List.of(\"country\", \"year\"))\n\t\t\t\t\t\t.build());",
                "is_abstract": "",
                "class_name": "MongoDBAtlasVectorStoreIT TestApplication",
                "annotations": []
            },
            {
                "name": "mongoTemplate",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new MongoTemplate(mongoClient, \"springaisample\");",
                "is_abstract": "",
                "class_name": "MongoDBAtlasVectorStoreIT TestApplication",
                "annotations": []
            },
            {
                "name": "embeddingClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new OpenAiEmbeddingClient(new OpenAiApi(System.getenv(\"OPENAI_API_KEY\")));",
                "is_abstract": "",
                "class_name": "MongoDBAtlasVectorStoreIT TestApplication",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/vector-stores/spring-ai-mongodb-atlas-store/src/test/java/org/springframework/ai/vectorstore/MongoDBAtlasContainer.java",
        "class_names": [
            "MongoDBAtlasContainer"
        ],
        "imports": "import java.time.Duration;\nimport org.testcontainers.containers.GenericContainer;\nimport org.testcontainers.containers.wait.strategy.Wait;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.MongoDBAtlasContainer": "org.springframework.ai.vectorstore.MongoDBAtlasContainer",
            "org.springframework.ai.vectorstore.getConnectionStrin": "org.springframework.ai.vectorstore.getConnectionStrin"
        },
        "package": "package org.springframework.ai.vectorstore;",
        "property_declarations": [],
        "functions": [
            {
                "name": "getConnectionString",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return String.format(\"mongodb://root:root@%s:%s/?directConnection=true\", getHost(), getMappedPort(27778));",
                "is_abstract": "",
                "class_name": "MongoDBAtlasContainer",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/vector-stores/spring-ai-mongodb-atlas-store/src/test/java/org/springframework/ai/vectorstore/MongoDBAtlasFilterConverterTest.java",
        "class_names": [
            "MongoDBAtlasFilterConverterTest"
        ],
        "imports": "import static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.NIN;\nimport java.util.List;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.GTE;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.NE;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.OR;\nimport org.springframework.ai.vectorstore.filter.Filter.Key;\nimport org.springframework.ai.vectorstore.filter.Filter.Group;\nimport org.springframework.ai.vectorstore.filter.Filter.Expression;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.vectorstore.filter.Filter.Value;\nimport org.springframework.ai.vectorstore.filter.FilterExpressionConverter;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.IN;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.LTE;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.AND;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.EQ;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.MongoDBAtlasFilterConverterTest": "org.springframework.ai.vectorstore.MongoDBAtlasFilterConverterTest",
            "org.springframework.ai.vectorstore.testEQ": "org.springframework.ai.vectorstore.testEQ",
            "org.springframework.ai.vectorstore.tesEqAndGt": "org.springframework.ai.vectorstore.tesEqAndGt",
            "org.springframework.ai.vectorstore.tesIn": "org.springframework.ai.vectorstore.tesIn",
            "org.springframework.ai.vectorstore.testN": "org.springframework.ai.vectorstore.testN",
            "org.springframework.ai.vectorstore.testGrou": "org.springframework.ai.vectorstore.testGrou",
            "org.springframework.ai.vectorstore.testBoolean": "org.springframework.ai.vectorstore.testBoolean",
            "org.springframework.ai.vectorstore.testDecimal": "org.springframework.ai.vectorstore.testDecimal",
            "org.springframework.ai.vectorstore.testComplexIdentifiers": "org.springframework.ai.vectorstore.testComplexIdentifiers",
            "org.springframework.ai.vectorstore.converter": "org.springframework.ai.vectorstore.converter"
        },
        "package": "package org.springframework.ai.vectorstore;",
        "property_declarations": [
            "FilterExpressionConverter converter = new MongoDBAtlasFilterExpressionConverter();"
        ],
        "functions": [
            {
                "name": "testEQ",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// country == \"BG\"\n\t\tString vectorExpr = converter.convertExpression(new Expression(EQ, new Key(\"country\"), new Value(\"BG\")));\n\t\tassertThat(vectorExpr).isEqualTo(\"{\\\"metadata.country\\\":{$eq:\\\"BG\\\"}}\");",
                "is_abstract": "",
                "class_name": "MongoDBAtlasFilterConverterTest",
                "annotations": []
            },
            {
                "name": "tesEqAndGte",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// genre == \"drama\" AND year >= 2020\n\t\tString vectorExpr = converter\n\t\t\t.convertExpression(new Expression(AND, new Expression(EQ, new Key(\"genre\"), new Value(\"drama\")),\n\t\t\t\t\tnew Expression(GTE, new Key(\"year\"), new Value(2020))));\n\t\tassertThat(vectorExpr)\n\t\t\t.isEqualTo(\"{$and:[{\\\"metadata.genre\\\":{$eq:\\\"drama\\\"}},{\\\"metadata.year\\\":{$gte:2020}}]}\");",
                "is_abstract": "",
                "class_name": "MongoDBAtlasFilterConverterTest",
                "annotations": []
            },
            {
                "name": "tesIn",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// genre in [\"comedy\", \"documentary\", \"drama\"]\n\t\tString vectorExpr = converter.convertExpression(\n\t\t\t\tnew Expression(IN, new Key(\"genre\"), new Value(List.of(\"comedy\", \"documentary\", \"drama\"))));\n\t\tassertThat(vectorExpr).isEqualTo(\"{\\\"metadata.genre\\\":{$in:[\\\"comedy\\\",\\\"documentary\\\",\\\"drama\\\"]}}\");",
                "is_abstract": "",
                "class_name": "MongoDBAtlasFilterConverterTest",
                "annotations": []
            },
            {
                "name": "testNe",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// year >= 2020 OR country == \"BG\" AND city != \"Sofia\"\n\t\tString vectorExpr = converter\n\t\t\t.convertExpression(new Expression(OR, new Expression(GTE, new Key(\"year\"), new Value(2020)),\n\t\t\t\t\tnew Expression(AND, new Expression(EQ, new Key(\"country\"), new Value(\"BG\")),\n\t\t\t\t\t\t\tnew Expression(NE, new Key(\"city\"), new Value(\"Sofia\")))));\n\t\tassertThat(vectorExpr).isEqualTo(\n\t\t\t\t\"{$or:[{\\\"metadata.year\\\":{$gte:2020}},{$and:[{\\\"metadata.country\\\":{$eq:\\\"BG\\\"}},{\\\"metadata.city\\\":{$ne:\\\"Sofia\\\"}}]}]}\");",
                "is_abstract": "",
                "class_name": "MongoDBAtlasFilterConverterTest",
                "annotations": []
            },
            {
                "name": "testGroup",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// (year >= 2020 OR country == \"BG\") AND city NIN [\"Sofia\", \"Plovdiv\"]\n\t\tString vectorExpr = converter.convertExpression(new Expression(AND,\n\t\t\t\tnew Group(new Expression(OR, new Expression(GTE, new Key(\"year\"), new Value(2020)),\n\t\t\t\t\t\tnew Expression(EQ, new Key(\"country\"), new Value(\"BG\")))),\n\t\t\t\tnew Expression(NIN, new Key(\"city\"), new Value(List.of(\"Sofia\", \"Plovdiv\")))));\n\t\tassertThat(vectorExpr).isEqualTo(\n\t\t\t\t\"{$and:[{$or:[{\\\"metadata.year\\\":{$gte:2020}},{\\\"metadata.country\\\":{$eq:\\\"BG\\\"}}]},{\\\"metadata.city\\\":{$nin:[\\\"Sofia\\\",\\\"Plovdiv\\\"]}}]}\");",
                "is_abstract": "",
                "class_name": "MongoDBAtlasFilterConverterTest",
                "annotations": []
            },
            {
                "name": "testBoolean",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// isOpen == true AND year >= 2020 AND country IN [\"BG\", \"NL\", \"US\"]\n\t\tString vectorExpr = converter.convertExpression(new Expression(AND,\n\t\t\t\tnew Expression(AND, new Expression(EQ, new Key(\"isOpen\"), new Value(true)),\n\t\t\t\t\t\tnew Expression(GTE, new Key(\"year\"), new Value(2020))),\n\t\t\t\tnew Expression(IN, new Key(\"country\"), new Value(List.of(\"BG\", \"NL\", \"US\")))));\n\n\t\tassertThat(vectorExpr).isEqualTo(\n\t\t\t\t\"{$and:[{$and:[{\\\"metadata.isOpen\\\":{$eq:true}},{\\\"metadata.year\\\":{$gte:2020}}]},{\\\"metadata.country\\\":{$in:[\\\"BG\\\",\\\"NL\\\",\\\"US\\\"]}}]}\");",
                "is_abstract": "",
                "class_name": "MongoDBAtlasFilterConverterTest",
                "annotations": []
            },
            {
                "name": "testDecimal",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// temperature >= -15.6 && temperature <= +20.13\n\t\tString vectorExpr = converter\n\t\t\t.convertExpression(new Expression(AND, new Expression(GTE, new Key(\"temperature\"), new Value(-15.6)),\n\t\t\t\t\tnew Expression(LTE, new Key(\"temperature\"), new Value(20.13))));\n\n\t\tassertThat(vectorExpr)\n\t\t\t.isEqualTo(\"{$and:[{\\\"metadata.temperature\\\":{$gte:-15.6}},{\\\"metadata.temperature\\\":{$lte:20.13}}]}\");",
                "is_abstract": "",
                "class_name": "MongoDBAtlasFilterConverterTest",
                "annotations": []
            },
            {
                "name": "testComplexIdentifiers",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String vectorExpr = converter\n\t\t\t.convertExpression(new Expression(EQ, new Key(\"\\\"country 1 2 3\\\"\"), new Value(\"BG\")));\n\t\tassertThat(vectorExpr).isEqualTo(\"{\\\"metadata.country 1 2 3\\\":{$eq:\\\"BG\\\"}}\");\n\n\t\tvectorExpr = converter.convertExpression(new Expression(EQ, new Key(\"'country 1 2 3'\"), new Value(\"BG\")));\n\t\tassertThat(vectorExpr).isEqualTo(\"{\\\"metadata.country 1 2 3\\\":{$eq:\\\"BG\\\"}}\");",
                "is_abstract": "",
                "class_name": "MongoDBAtlasFilterConverterTest",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/vector-stores/spring-ai-mongodb-atlas-store/src/main/java/org/springframework/ai/vectorstore/MongoDBAtlasVectorStore.java",
        "class_names": [
            "Builder",
            "MongoDBAtlasVectorStore",
            "MongoDBVectorStoreConfig"
        ],
        "imports": "import org.springframework.data.mongodb.core.aggregation.Aggregation;\nimport java.util.ArrayList;\nimport static org.springframework.data.mongodb.core.query.Criteria.where;\nimport com.mongodb.BasicDBObject;\nimport java.util.List;\nimport org.springframework.util.Assert;\nimport org.springframework.ai.document.Document;\nimport java.util.Map;\nimport org.springframework.data.mongodb.core.MongoTemplate;\nimport org.springframework.data.mongodb.core.query.Criteria;\nimport org.springframework.data.mongodb.core.query.Query;\nimport org.springframework.beans.factory.InitializingBean;\nimport java.util.Collections;\nimport org.springframework.ai.embedding.EmbeddingClient;\nimport java.util.Optional;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.MongoDBAtlasVectorStor": "org.springframework.ai.vectorstore.MongoDBAtlasVectorStor",
            "org.springframework.ai.vectorstore.MongoDBVectorStoreConfi": "org.springframework.ai.vectorstore.MongoDBVectorStoreConfi",
            "org.springframework.ai.vectorstore.Builder": "org.springframework.ai.vectorstore.Builder",
            "org.springframework.ai.vectorstore.afterPropertiesSet": "org.springframework.ai.vectorstore.afterPropertiesSet",
            "org.springframework.ai.vectorstore.createSearchIndex": "org.springframework.ai.vectorstore.createSearchIndex",
            "org.springframework.ai.vectorstore.SuppressWarnings": "org.springframework.ai.vectorstore.SuppressWarnings",
            "org.springframework.ai.vectorstore.add": "org.springframework.ai.vectorstore.add",
            "org.springframework.ai.vectorstore.delet": "org.springframework.ai.vectorstore.delet",
            "org.springframework.ai.vectorstore.similaritySearch": "org.springframework.ai.vectorstore.similaritySearch",
            "org.springframework.ai.vectorstore.builder": "org.springframework.ai.vectorstore.builder",
            "org.springframework.ai.vectorstore.defaultConfi": "org.springframework.ai.vectorstore.defaultConfi",
            "org.springframework.ai.vectorstore.withCollectionNam": "org.springframework.ai.vectorstore.withCollectionNam",
            "org.springframework.ai.vectorstore.withVectorIndexNam": "org.springframework.ai.vectorstore.withVectorIndexNam",
            "org.springframework.ai.vectorstore.withPathNam": "org.springframework.ai.vectorstore.withPathNam",
            "org.springframework.ai.vectorstore.withMetadataFieldsToFilter": "org.springframework.ai.vectorstore.withMetadataFieldsToFilter",
            "org.springframework.ai.vectorstore.build": "org.springframework.ai.vectorstore.build",
            "org.springframework.ai.vectorstore.ID_FIELD_NAME": "org.springframework.ai.vectorstore.ID_FIELD_NAME",
            "org.springframework.ai.vectorstore.METADATA_FIELD_NAME": "org.springframework.ai.vectorstore.METADATA_FIELD_NAME",
            "org.springframework.ai.vectorstore.CONTENT_FIELD_NAME": "org.springframework.ai.vectorstore.CONTENT_FIELD_NAME",
            "org.springframework.ai.vectorstore.SCORE_FIELD_NAME": "org.springframework.ai.vectorstore.SCORE_FIELD_NAME",
            "org.springframework.ai.vectorstore.DEFAULT_VECTOR_COLLECTION_NAME": "org.springframework.ai.vectorstore.DEFAULT_VECTOR_COLLECTION_NAME",
            "org.springframework.ai.vectorstore.DEFAULT_VECTOR_INDEX_NAME": "org.springframework.ai.vectorstore.DEFAULT_VECTOR_INDEX_NAME",
            "org.springframework.ai.vectorstore.DEFAULT_PATH_NAME": "org.springframework.ai.vectorstore.DEFAULT_PATH_NAME",
            "org.springframework.ai.vectorstore.DEFAULT_NUM_CANDIDATES": "org.springframework.ai.vectorstore.DEFAULT_NUM_CANDIDATES",
            "org.springframework.ai.vectorstore.mongoTemplat": "org.springframework.ai.vectorstore.mongoTemplat",
            "org.springframework.ai.vectorstore.embeddingClient": "org.springframework.ai.vectorstore.embeddingClient",
            "org.springframework.ai.vectorstore.confi": "org.springframework.ai.vectorstore.confi",
            "org.springframework.ai.vectorstore.filterExpressionConverter": "org.springframework.ai.vectorstore.filterExpressionConverter",
            "org.springframework.ai.vectorstore.collectionNam": "org.springframework.ai.vectorstore.collectionNam",
            "org.springframework.ai.vectorstore.vectorIndexNam": "org.springframework.ai.vectorstore.vectorIndexNam",
            "org.springframework.ai.vectorstore.pathNam": "org.springframework.ai.vectorstore.pathNam",
            "org.springframework.ai.vectorstore.metadataFieldsToFilter": "org.springframework.ai.vectorstore.metadataFieldsToFilter",
            "org.springframework.ai.vectorstore.numCandidates": "org.springframework.ai.vectorstore.numCandidates"
        },
        "package": "package org.springframework.ai.vectorstore;",
        "property_declarations": [
            "private final String pathName;",
            "private final MongoDBAtlasFilterExpressionConverter filterExpressionConverter = new MongoDBAtlasFilterExpressionConverter();",
            "private String collectionName = DEFAULT_VECTOR_COLLECTION_NAME;",
            "private final List<String> metadataFieldsToFilter;",
            "private final int numCandidates;",
            "private final String collectionName;",
            "private final MongoDBVectorStoreConfig config;",
            "public static final String CONTENT_FIELD_NAME = \"content\";",
            "private final MongoTemplate mongoTemplate;",
            "public static final String SCORE_FIELD_NAME = \"score\";",
            "private final EmbeddingClient embeddingClient;",
            "public static final String ID_FIELD_NAME = \"_id\";",
            "public static final String METADATA_FIELD_NAME = \"metadata\";",
            "private static final String DEFAULT_PATH_NAME = \"embedding\";",
            "private static final String DEFAULT_VECTOR_COLLECTION_NAME = \"vector_store\";",
            "private String pathName = DEFAULT_PATH_NAME;",
            "private int numCandidates = DEFAULT_NUM_CANDIDATES;",
            "private String vectorIndexName = DEFAULT_VECTOR_INDEX_NAME;",
            "private static final int DEFAULT_NUM_CANDIDATES = 200;",
            "private static final String DEFAULT_VECTOR_INDEX_NAME = \"vector_index\";",
            "private final String vectorIndexName;",
            "private List<String> metadataFieldsToFilter = Collections.emptyList();"
        ],
        "functions": [
            {
                "name": "afterPropertiesSet",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// Create the collection if it does not exist\n\t\tif (!mongoTemplate.collectionExists(this.config.collectionName)) {\n\t\t\tmongoTemplate.createCollection(this.config.collectionName);\n\t\t}\n\t\t// Create search index, command doesn't do anything if already existing\n\t\tmongoTemplate.executeCommand(createSearchIndex());",
                "is_abstract": "",
                "class_name": "MongoDBAtlasVectorStore",
                "annotations": []
            },
            {
                "name": "createSearchIndex",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "List<org.bson.Document> vectorFields = new ArrayList<>();\n\n\t\tvectorFields.add(new org.bson.Document().append(\"type\", \"vector\")\n\t\t\t.append(\"path\", this.config.pathName)\n\t\t\t.append(\"numDimensions\", this.embeddingClient.dimensions())\n\t\t\t.append(\"similarity\", \"cosine\"));\n\n\t\tvectorFields.addAll(this.config.metadataFieldsToFilter.stream()\n\t\t\t.map(fieldName -> new org.bson.Document().append(\"type\", \"filter\").append(\"path\", \"metadata.\" + fieldName))\n\t\t\t.toList());\n\n\t\treturn new org.bson.Document().append(\"createSearchIndexes\", this.config.collectionName)\n\t\t\t.append(\"indexes\",\n\t\t\t\t\tList.of(new org.bson.Document().append(\"name\", this.config.vectorIndexName)\n\t\t\t\t\t\t.append(\"type\", \"vectorSearch\")\n\t\t\t\t\t\t.append(\"definition\", new org.bson.Document(\"fields\", vectorFields))));",
                "is_abstract": "",
                "class_name": "MongoDBAtlasVectorStore",
                "annotations": []
            },
            {
                "name": "SuppressWarnings",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String id = basicDBObject.getString(ID_FIELD_NAME);\n\t\tString content = basicDBObject.getString(CONTENT_FIELD_NAME);\n\t\tMap<String, Object> metadata = (Map<String, Object>) basicDBObject.get(METADATA_FIELD_NAME);\n\t\tList<Double> embedding = (List<Double>) basicDBObject.get(this.config.pathName);\n\n\t\tDocument document = new Document(id, content, metadata);\n\t\tdocument.setEmbedding(embedding);\n\n\t\treturn document;",
                "is_abstract": "",
                "class_name": "MongoDBAtlasVectorStore",
                "annotations": [
                    "@SuppressWarnings(\"unchecked\")"
                ]
            },
            {
                "name": "add",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "for (Document document : documents) {\n\t\t\tList<Double> embedding = this.embeddingClient.embed(document);\n\t\t\tdocument.setEmbedding(embedding);\n\t\t\tthis.mongoTemplate.save(document, this.config.collectionName);\n\t\t}",
                "is_abstract": "",
                "class_name": "MongoDBAtlasVectorStore",
                "annotations": []
            },
            {
                "name": "delete",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Query query = new Query(where(ID_FIELD_NAME).in(idList));\n\n\t\tvar deleteRes = this.mongoTemplate.remove(query, this.config.collectionName);\n\t\tlong deleteCount = deleteRes.getDeletedCount();\n\n\t\treturn Optional.of(deleteCount == idList.size());",
                "is_abstract": "",
                "class_name": "MongoDBAtlasVectorStore",
                "annotations": []
            },
            {
                "name": "similaritySearch",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return similaritySearch(SearchRequest.query(query));",
                "is_abstract": "",
                "class_name": "MongoDBAtlasVectorStore",
                "annotations": []
            },
            {
                "name": "builder",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Builder();",
                "is_abstract": "",
                "class_name": "MongoDBAtlasVectorStore MongoDBVectorStoreConfig",
                "annotations": []
            },
            {
                "name": "defaultConfig",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return builder().build();",
                "is_abstract": "",
                "class_name": "MongoDBAtlasVectorStore MongoDBVectorStoreConfig",
                "annotations": []
            },
            {
                "name": "withCollectionName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(collectionName, \"Collection Name must not be null\");\n\t\t\t\tAssert.notNull(collectionName, \"Collection Name must not be empty\");\n\t\t\t\tthis.collectionName = collectionName;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "MongoDBAtlasVectorStore MongoDBVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "withVectorIndexName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(vectorIndexName, \"Vector Index Name must not be null\");\n\t\t\t\tAssert.notNull(vectorIndexName, \"Vector Index Name must not be empty\");\n\t\t\t\tthis.vectorIndexName = vectorIndexName;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "MongoDBAtlasVectorStore MongoDBVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "withPathName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(pathName, \"Path Name must not be null\");\n\t\t\t\tAssert.notNull(pathName, \"Path Name must not be empty\");\n\t\t\t\tthis.pathName = pathName;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "MongoDBAtlasVectorStore MongoDBVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "withMetadataFieldsToFilter",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notEmpty(metadataFieldsToFilter, \"Fields list must not be empty\");\n\t\t\t\tthis.metadataFieldsToFilter = metadataFieldsToFilter;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "MongoDBAtlasVectorStore MongoDBVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "build",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new MongoDBVectorStoreConfig(this);",
                "is_abstract": "",
                "class_name": "MongoDBAtlasVectorStore MongoDBVectorStoreConfig Builder",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/vector-stores/spring-ai-mongodb-atlas-store/src/main/java/org/springframework/ai/vectorstore/VectorSearchAggregation.java",
        "class_names": [],
        "imports": "import java.util.List;\nimport org.bson.Document;\nimport org.springframework.data.mongodb.core.aggregation.AggregationOperation;\nimport org.springframework.data.mongodb.core.aggregation.AggregationOperationContext;\nimport org.springframework.lang.NonNull;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.SuppressWarnings": "org.springframework.ai.vectorstore.SuppressWarnings"
        },
        "package": "package org.springframework.ai.vectorstore;",
        "property_declarations": [],
        "functions": [
            {
                "name": "SuppressWarnings",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var vectorSearch = new Document(\"queryVector\", embeddings).append(\"path\", path)\n\t\t\t.append(\"numCandidates\", numCandidates)\n\t\t\t.append(\"index\", index)\n\t\t\t.append(\"limit\", count);\n\t\tif (!filter.isEmpty()) {\n\t\t\tvectorSearch.append(\"filter\", Document.parse(filter));\n\t\t}\n\t\tvar doc = new Document(\"$vectorSearch\", vectorSearch);\n\n\t\treturn context.getMappedObject(doc);",
                "is_abstract": "",
                "class_name": "",
                "annotations": [
                    "@SuppressWarnings(\"null\")"
                ]
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/vector-stores/spring-ai-mongodb-atlas-store/src/main/java/org/springframework/ai/vectorstore/MongoDBAtlasFilterExpressionConverter.java",
        "class_names": [
            "MongoDBAtlasFilterExpressionConverter"
        ],
        "imports": "import org.springframework.ai.vectorstore.filter.Filter;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.OR;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.AND;\nimport org.springframework.ai.vectorstore.filter.converter.AbstractFilterExpressionConverter;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.MongoDBAtlasFilterExpressionConverter": "org.springframework.ai.vectorstore.MongoDBAtlasFilterExpressionConverter",
            "org.springframework.ai.vectorstore.doExpression": "org.springframework.ai.vectorstore.doExpression",
            "org.springframework.ai.vectorstore.doCompoundExpressionTy": "org.springframework.ai.vectorstore.doCompoundExpressionTy",
            "org.springframework.ai.vectorstore.doSingleExpressionTy": "org.springframework.ai.vectorstore.doSingleExpressionTy",
            "org.springframework.ai.vectorstore.getOperationSymbol": "org.springframework.ai.vectorstore.getOperationSymbol",
            "org.springframework.ai.vectorstore.doKey": "org.springframework.ai.vectorstore.doKey"
        },
        "package": "package org.springframework.ai.vectorstore;",
        "property_declarations": [],
        "functions": [
            {
                "name": "doExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// Handling AND/OR\n\t\tif (AND.equals(expression.type()) || OR.equals(expression.type())) {\n\t\t\tdoCompoundExpressionType(expression, context);\n\t\t}\n\t\telse {\n\t\t\tdoSingleExpressionType(expression, context);\n\t\t}",
                "is_abstract": "",
                "class_name": "MongoDBAtlasFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "doCompoundExpressionType",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "context.append(\"{\");\n\t\tcontext.append(getOperationSymbol(expression));\n\t\tcontext.append(\":[\");\n\t\tthis.convertOperand(expression.left(), context);\n\t\tcontext.append(\",\");\n\t\tthis.convertOperand(expression.right(), context);\n\t\tcontext.append(\"]}\");",
                "is_abstract": "",
                "class_name": "MongoDBAtlasFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "doSingleExpressionType",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "context.append(\"{\");\n\t\tthis.convertOperand(expression.left(), context);\n\t\tcontext.append(\":{\");\n\t\tcontext.append(getOperationSymbol(expression));\n\t\tcontext.append(\":\");\n\t\tthis.convertOperand(expression.right(), context);\n\t\tcontext.append(\"}}\");",
                "is_abstract": "",
                "class_name": "MongoDBAtlasFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "getOperationSymbol",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "switch (exp.type()) {\n\t\t\tcase AND:\n\t\t\t\treturn \"$and\";\n\t\t\tcase OR:\n\t\t\t\treturn \"$or\";\n\t\t\tcase EQ:\n\t\t\t\treturn \"$eq\";\n\t\t\tcase NE:\n\t\t\t\treturn \"$ne\";\n\t\t\tcase LT:\n\t\t\t\treturn \"$lt\";\n\t\t\tcase LTE:\n\t\t\t\treturn \"$lte\";\n\t\t\tcase GT:\n\t\t\t\treturn \"$gt\";\n\t\t\tcase GTE:\n\t\t\t\treturn \"$gte\";\n\t\t\tcase IN:\n\t\t\t\treturn \"$in\";\n\t\t\tcase NIN:\n\t\t\t\treturn \"$nin\";\n\t\t\tdefault:\n\t\t\t\tthrow new RuntimeException(\"Not supported expression type:\" + exp.type());\n\t\t}",
                "is_abstract": "",
                "class_name": "MongoDBAtlasFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "doKey",
                "parameters": [
                    ""
                ],
                "return_type": "filterKey",
                "body": "var identifier = (hasOuterQuotes(filterKey.key())) ? removeOuterQuotes(filterKey.key()) : filterKey.key();\n\t\tcontext.append(\"\\\"metadata.\" + identifier + \"\\\"\");",
                "is_abstract": "",
                "class_name": "MongoDBAtlasFilterExpressionConverter",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/vector-stores/spring-ai-chroma/src/test/java/org/springframework/ai/chroma/ChromaApiIT.java",
        "class_names": [
            "Config",
            "ChromaApiIT"
        ],
        "imports": "import org.springframework.web.client.RestTemplate;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.springframework.ai.chroma.ChromaApi.Collection;\nimport java.util.List;\nimport org.springframework.ai.chroma.ChromaApi.QueryRequest;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport java.util.Map;\nimport org.junit.jupiter.api.Test;\nimport org.testcontainers.chromadb.ChromaDBContainer;\nimport org.testcontainers.junit.jupiter.Container;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.ai.chroma.ChromaApi.GetEmbeddingsRequest;\nimport org.springframework.boot.SpringBootConfiguration;\nimport org.testcontainers.junit.jupiter.Testcontainers;\nimport org.springframework.ai.chroma.ChromaApi.AddEmbeddingsRequest;",
        "package_import_paths": {
            "org.springframework.ai.chroma.ChromaApiIT": "org.springframework.ai.chroma.ChromaApiIT",
            "org.springframework.ai.chroma.Confi": "org.springframework.ai.chroma.Confi",
            "org.springframework.ai.chroma.beforeEach": "org.springframework.ai.chroma.beforeEach",
            "org.springframework.ai.chroma.testClient": "org.springframework.ai.chroma.testClient",
            "org.springframework.ai.chroma.testCollection": "org.springframework.ai.chroma.testCollection",
            "org.springframework.ai.chroma.testQueryWher": "org.springframework.ai.chroma.testQueryWher",
            "org.springframework.ai.chroma.restTemplat": "org.springframework.ai.chroma.restTemplat",
            "org.springframework.ai.chroma.chromaApi": "org.springframework.ai.chroma.chromaApi",
            "org.springframework.ai.chroma.stati": "org.springframework.ai.chroma.stati",
            "org.springframework.ai.chroma.ChromaApi": "org.springframework.ai.chroma.ChromaApi"
        },
        "package": "package org.springframework.ai.chroma;",
        "property_declarations": [
            "@Autowired\n\tChromaApi chroma;",
            "@Container\n\tstatic ChromaDBContainer chromaContainer = new ChromaDBContainer(\"ghcr.io/chroma-core/chroma:0.4.22.dev44\");"
        ],
        "functions": [
            {
                "name": "beforeEach",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "chroma.listCollections().stream().forEach(c -> chroma.deleteCollection(c.name()));",
                "is_abstract": "",
                "class_name": "ChromaApiIT",
                "annotations": []
            },
            {
                "name": "testClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var newCollection = chroma.createCollection(new ChromaApi.CreateCollectionRequest(\"TestCollection\"));\n\t\tassertThat(newCollection).isNotNull();\n\t\tassertThat(newCollection.name()).isEqualTo(\"TestCollection\");\n\n\t\tvar getCollection = chroma.getCollection(\"TestCollection\");\n\t\tassertThat(getCollection).isNotNull();\n\t\tassertThat(getCollection.name()).isEqualTo(\"TestCollection\");\n\t\tassertThat(getCollection.id()).isEqualTo(newCollection.id());\n\n\t\tList<Collection> collections = chroma.listCollections();\n\t\tassertThat(collections).hasSize(1);\n\t\tassertThat(collections.get(0).id()).isEqualTo(newCollection.id());\n\n\t\tchroma.deleteCollection(newCollection.name());\n\t\tassertThat(chroma.listCollections()).hasSize(0);",
                "is_abstract": "",
                "class_name": "ChromaApiIT",
                "annotations": []
            },
            {
                "name": "testCollection",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var newCollection = chroma.createCollection(new ChromaApi.CreateCollectionRequest(\"TestCollection\"));\n\t\tassertThat(chroma.countEmbeddings(newCollection.id())).isEqualTo(0);\n\n\t\tvar addEmbeddingRequest = new AddEmbeddingsRequest(List.of(\"id1\", \"id2\"),\n\t\t\t\tList.of(new float[] { 1f, 1f, 1f }, new float[] { 2f, 2f, 2f }),\n\t\t\t\tList.of(Map.of(), Map.of(\"key1\", \"value1\", \"key2\", true, \"key3\", 23.4)),\n\t\t\t\tList.of(\"Hello World\", \"Big World\"));\n\n\t\tchroma.upsertEmbeddings(newCollection.id(), addEmbeddingRequest);\n\n\t\tvar addEmbeddingRequest2 = new AddEmbeddingsRequest(\"id3\", new float[] { 3f, 3f, 3f },\n\t\t\t\tMap.of(\"key1\", \"value1\", \"key2\", true, \"key3\", 23.4), \"Big World\");\n\n\t\tchroma.upsertEmbeddings(newCollection.id(), addEmbeddingRequest2);\n\n\t\tassertThat(chroma.countEmbeddings(newCollection.id())).isEqualTo(3);\n\n\t\tvar queryResult = chroma.queryCollection(newCollection.id(),\n\t\t\t\tnew QueryRequest(List.of(1f, 1f, 1f), 3, chroma.where(\"\"\"\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"key2\" : { \"$eq\": true }\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\"\"\")));\n\t\tassertThat(queryResult.ids().get(0)).hasSize(2);\n\t\tassertThat(queryResult.ids().get(0)).containsExactlyInAnyOrder(\"id2\", \"id3\");\n\n\t\t// Update existing embedding.\n\t\tchroma.upsertEmbeddings(newCollection.id(), new AddEmbeddingsRequest(\"id3\", new float[] { 6f, 6f, 6f },\n\t\t\t\tMap.of(\"key1\", \"value2\", \"key2\", false, \"key4\", 23.4), \"Small World\"));\n\n\t\tvar result = chroma.getEmbeddings(newCollection.id(), new GetEmbeddingsRequest(List.of(\"id2\")));\n\t\tassertThat(result.ids().get(0)).isEqualTo(\"id2\");\n\n\t\tqueryResult = chroma.queryCollection(newCollection.id(),\n\t\t\t\tnew QueryRequest(List.of(1f, 1f, 1f), 3, chroma.where(\"\"\"\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"key2\" : { \"$eq\": true }\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\"\"\")));\n\t\tassertThat(queryResult.ids().get(0)).hasSize(1);\n\t\tassertThat(queryResult.ids().get(0)).containsExactlyInAnyOrder(\"id2\");",
                "is_abstract": "",
                "class_name": "ChromaApiIT",
                "annotations": []
            },
            {
                "name": "testQueryWhere",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var collection = chroma.createCollection(new ChromaApi.CreateCollectionRequest(\"TestCollection\"));\n\n\t\tvar add1 = new AddEmbeddingsRequest(\"id1\", new float[] { 1f, 1f, 1f },\n\t\t\t\tMap.of(\"country\", \"BG\", \"active\", true, \"price\", 23.4, \"year\", 2020),\n\t\t\t\t\"The World is Big and Salvation Lurks Around the Corner\");\n\n\t\tvar add2 = new AddEmbeddingsRequest(\"id2\", new float[] { 1f, 1f, 1f }, Map.of(\"country\", \"NL\"),\n\t\t\t\t\"The World is Big and Salvation Lurks Around the Corner\");\n\n\t\tvar add3 = new AddEmbeddingsRequest(\"id3\", new float[] { 1f, 1f, 1f },\n\t\t\t\tMap.of(\"country\", \"BG\", \"active\", false, \"price\", 40.1, \"year\", 2023),\n\t\t\t\t\"The World is Big and Salvation Lurks Around the Corner\");\n\n\t\tchroma.upsertEmbeddings(collection.id(), add1);\n\t\tchroma.upsertEmbeddings(collection.id(), add2);\n\t\tchroma.upsertEmbeddings(collection.id(), add3);\n\n\t\tassertThat(chroma.countEmbeddings(collection.id())).isEqualTo(3);\n\n\t\tvar queryResult = chroma.queryCollection(collection.id(), new QueryRequest(List.of(1f, 1f, 1f), 3));\n\n\t\tassertThat(queryResult.ids().get(0)).hasSize(3);\n\t\tassertThat(queryResult.ids().get(0)).containsExactlyInAnyOrder(\"id1\", \"id2\", \"id3\");\n\n\t\tvar chromaEmbeddings = chroma.toEmbeddingResponseList(queryResult);\n\n\t\tassertThat(chromaEmbeddings).hasSize(3);\n\t\tassertThat(chromaEmbeddings).hasSize(3);\n\n\t\tqueryResult = chroma.queryCollection(collection.id(), new QueryRequest(List.of(1f, 1f, 1f), 3, chroma.where(\"\"\"\n\t\t\t\t{\n\t\t\t\t\t\"$and\" : [\n\t\t\t\t\t\t{\"country\" : { \"$eq\": \"BG\"}},\n\t\t\t\t\t\t{\"year\" : { \"$gte\": 2020}}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t\t\"\"\")));\n\t\tassertThat(queryResult.ids().get(0)).hasSize(2);\n\t\tassertThat(queryResult.ids().get(0)).containsExactlyInAnyOrder(\"id1\", \"id3\");\n\n\t\tqueryResult = chroma.queryCollection(collection.id(), new QueryRequest(List.of(1f, 1f, 1f), 3, chroma.where(\"\"\"\n\t\t\t\t{\n\t\t\t\t\t\"$and\" : [\n\t\t\t\t\t\t{\"country\" : { \"$eq\": \"BG\"}},\n\t\t\t\t\t\t{\"year\" : { \"$gte\": 2020}},\n\t\t\t\t\t\t{\"active\" : { \"$eq\": true}}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t\t\"\"\")));\n\t\tassertThat(queryResult.ids().get(0)).hasSize(1);\n\t\tassertThat(queryResult.ids().get(0)).containsExactlyInAnyOrder(\"id1\");",
                "is_abstract": "",
                "class_name": "ChromaApiIT",
                "annotations": []
            },
            {
                "name": "restTemplate",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new RestTemplate();",
                "is_abstract": "",
                "class_name": "ChromaApiIT Config",
                "annotations": []
            },
            {
                "name": "chromaApi",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new ChromaApi(chromaContainer.getEndpoint(), restTemplate);",
                "is_abstract": "",
                "class_name": "ChromaApiIT Config",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/vector-stores/spring-ai-chroma/src/test/java/org/springframework/ai/vectorstore/ChromaVectorStoreIT.java",
        "class_names": [
            "ChromaVectorStoreIT",
            "TestApplication"
        ],
        "imports": "import java.util.List;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport java.util.Map;\nimport org.springframework.web.client.RestTemplate;\nimport org.springframework.ai.openai.api.OpenAiApi;\nimport org.springframework.context.annotation.Bean;\nimport org.testcontainers.chromadb.ChromaDBContainer;\nimport org.springframework.ai.vectorstore.ChromaVectorStore;\nimport java.util.Collections;\nimport org.springframework.ai.embedding.EmbeddingClient;\nimport org.springframework.boot.SpringBootConfiguration;\nimport org.testcontainers.junit.jupiter.Testcontainers;\nimport org.springframework.ai.document.Document;\nimport org.springframework.ai.chroma.ChromaApi;\nimport org.junit.jupiter.api.Test;\nimport org.testcontainers.junit.jupiter.Container;\nimport java.util.UUID;\nimport org.springframework.ai.openai.OpenAiEmbeddingClient;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.ChromaVectorStoreIT": "org.springframework.ai.vectorstore.ChromaVectorStoreIT",
            "org.springframework.ai.vectorstore.TestApplication": "org.springframework.ai.vectorstore.TestApplication",
            "org.springframework.ai.vectorstore.addAndSearch": "org.springframework.ai.vectorstore.addAndSearch",
            "org.springframework.ai.vectorstore.addAndSearchWithFilters": "org.springframework.ai.vectorstore.addAndSearchWithFilters",
            "org.springframework.ai.vectorstore.documentUpdateTest": "org.springframework.ai.vectorstore.documentUpdateTest",
            "org.springframework.ai.vectorstore.searchThresholdTest": "org.springframework.ai.vectorstore.searchThresholdTest",
            "org.springframework.ai.vectorstore.restTemplat": "org.springframework.ai.vectorstore.restTemplat",
            "org.springframework.ai.vectorstore.chromaApi": "org.springframework.ai.vectorstore.chromaApi",
            "org.springframework.ai.vectorstore.chromaVectorStor": "org.springframework.ai.vectorstore.chromaVectorStor",
            "org.springframework.ai.vectorstore.embeddingClient": "org.springframework.ai.vectorstore.embeddingClient",
            "org.springframework.ai.vectorstore.stati": "org.springframework.ai.vectorstore.stati",
            "org.springframework.ai.vectorstore.documents": "org.springframework.ai.vectorstore.documents",
            "org.springframework.ai.vectorstore.contextRunner": "org.springframework.ai.vectorstore.contextRunner"
        },
        "package": "package org.springframework.ai.vectorstore;",
        "property_declarations": [
            "private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t.withUserConfiguration(TestApplication.class)\n\t\t.withPropertyValues(\"spring.ai.openai.apiKey=\" + System.getenv(\"OPENAI_API_KEY\"));",
            "@Container\n\tstatic ChromaDBContainer chromaContainer = new ChromaDBContainer(\"ghcr.io/chroma-core/chroma:0.4.22\");",
            "List<Document> documents = List.of(\n\t\t\tnew Document(\"Spring AI rocks!! Spring AI rocks!! Spring AI rocks!! Spring AI rocks!! Spring AI rocks!!\",\n\t\t\t\t\tCollections.singletonMap(\"meta1\", \"meta1\")),\n\t\t\tnew Document(\"Hello World Hello World Hello World Hello World Hello World Hello World Hello World\"),\n\t\t\tnew Document(\n\t\t\t\t\t\"Great Depression Great Depression Great Depression Great Depression Great Depression Great Depression\",\n\t\t\t\t\tCollections.singletonMap(\"meta2\", \"meta2\")));"
        ],
        "functions": [
            {
                "name": "addAndSearch",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\n\t\t\tVectorStore vectorStore = context.getBean(VectorStore.class);\n\n\t\t\tvectorStore.add(documents);\n\n\t\t\tList<Document> results = vectorStore.similaritySearch(SearchRequest.query(\"Great\").withTopK(1));\n\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tDocument resultDoc = results.get(0);\n\t\t\tassertThat(resultDoc.getId()).isEqualTo(documents.get(2).getId());\n\t\t\tassertThat(resultDoc.getContent()).isEqualTo(\n\t\t\t\t\t\"Great Depression Great Depression Great Depression Great Depression Great Depression Great Depression\");\n\t\t\tassertThat(resultDoc.getMetadata()).containsKeys(\"meta2\", \"distance\");\n\n\t\t\t// Remove all documents from the store\n\t\t\tvectorStore.delete(documents.stream().map(doc -> doc.getId()).toList());\n\n\t\t\tList<Document> results2 = vectorStore.similaritySearch(SearchRequest.query(\"Great\").withTopK(1));\n\t\t\tassertThat(results2).hasSize(0);\n\t\t});",
                "is_abstract": "",
                "class_name": "ChromaVectorStoreIT",
                "annotations": []
            },
            {
                "name": "addAndSearchWithFilters",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\n\t\t\tVectorStore vectorStore = context.getBean(VectorStore.class);\n\n\t\t\tvar bgDocument = new Document(\"The World is Big and Salvation Lurks Around the Corner\",\n\t\t\t\t\tMap.of(\"country\", \"Bulgaria\"));\n\t\t\tvar nlDocument = new Document(\"The World is Big and Salvation Lurks Around the Corner\",\n\t\t\t\t\tMap.of(\"country\", \"Netherlands\"));\n\n\t\t\tvectorStore.add(List.of(bgDocument, nlDocument));\n\n\t\t\tvar request = SearchRequest.query(\"The World\").withTopK(5);\n\n\t\t\tList<Document> results = vectorStore.similaritySearch(request);\n\t\t\tassertThat(results).hasSize(2);\n\n\t\t\tresults = vectorStore\n\t\t\t\t.similaritySearch(request.withSimilarityThresholdAll().withFilterExpression(\"country == 'Bulgaria'\"));\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tassertThat(results.get(0).getId()).isEqualTo(bgDocument.getId());\n\n\t\t\tresults = vectorStore.similaritySearch(\n\t\t\t\t\trequest.withSimilarityThresholdAll().withFilterExpression(\"country == 'Netherlands'\"));\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tassertThat(results.get(0).getId()).isEqualTo(nlDocument.getId());\n\n\t\t\tresults = vectorStore.similaritySearch(\n\t\t\t\t\trequest.withSimilarityThresholdAll().withFilterExpression(\"NOT(country == 'Netherlands')\"));\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tassertThat(results.get(0).getId()).isEqualTo(bgDocument.getId());\n\n\t\t\t// Remove all documents from the store\n\t\t\tvectorStore.delete(List.of(bgDocument, nlDocument).stream().map(doc -> doc.getId()).toList());\n\t\t});",
                "is_abstract": "",
                "class_name": "ChromaVectorStoreIT",
                "annotations": []
            },
            {
                "name": "documentUpdateTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// Note ,using OpenAI to calculate embeddings\n\t\tcontextRunner.run(context -> {\n\n\t\t\tVectorStore vectorStore = context.getBean(VectorStore.class);\n\n\t\t\tDocument document = new Document(UUID.randomUUID().toString(), \"Spring AI rocks!!\",\n\t\t\t\t\tCollections.singletonMap(\"meta1\", \"meta1\"));\n\n\t\t\tvectorStore.add(List.of(document));\n\n\t\t\tList<Document> results = vectorStore.similaritySearch(SearchRequest.query(\"Spring\").withTopK(5));\n\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tDocument resultDoc = results.get(0);\n\t\t\tassertThat(resultDoc.getId()).isEqualTo(document.getId());\n\t\t\tassertThat(resultDoc.getContent()).isEqualTo(\"Spring AI rocks!!\");\n\t\t\tassertThat(resultDoc.getMetadata()).containsKey(\"meta1\");\n\t\t\tassertThat(resultDoc.getMetadata()).containsKey(\"distance\");\n\n\t\t\tDocument sameIdDocument = new Document(document.getId(),\n\t\t\t\t\t\"The World is Big and Salvation Lurks Around the Corner\",\n\t\t\t\t\tCollections.singletonMap(\"meta2\", \"meta2\"));\n\n\t\t\tvectorStore.add(List.of(sameIdDocument));\n\n\t\t\tresults = vectorStore.similaritySearch(SearchRequest.query(\"FooBar\").withTopK(5));\n\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tresultDoc = results.get(0);\n\t\t\tassertThat(resultDoc.getId()).isEqualTo(document.getId());\n\t\t\tassertThat(resultDoc.getContent()).isEqualTo(\"The World is Big and Salvation Lurks Around the Corner\");\n\t\t\tassertThat(resultDoc.getMetadata()).containsKey(\"meta2\");\n\t\t\tassertThat(resultDoc.getMetadata()).containsKey(\"distance\");\n\n\t\t\t// Remove all documents from the store\n\t\t\tvectorStore.delete(List.of(document.getId()));\n\t\t});",
                "is_abstract": "",
                "class_name": "ChromaVectorStoreIT",
                "annotations": []
            },
            {
                "name": "searchThresholdTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\n\t\t\tVectorStore vectorStore = context.getBean(VectorStore.class);\n\n\t\t\tvectorStore.add(documents);\n\n\t\t\tvar request = SearchRequest.query(\"Great\").withTopK(5);\n\t\t\tList<Document> fullResult = vectorStore.similaritySearch(request.withSimilarityThresholdAll());\n\n\t\t\tList<Float> distances = fullResult.stream().map(doc -> (Float) doc.getMetadata().get(\"distance\")).toList();\n\n\t\t\tassertThat(distances).hasSize(3);\n\n\t\t\tfloat threshold = (distances.get(0) + distances.get(1)) / 2;\n\n\t\t\tList<Document> results = vectorStore.similaritySearch(request.withSimilarityThreshold(1 - threshold));\n\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tDocument resultDoc = results.get(0);\n\t\t\tassertThat(resultDoc.getId()).isEqualTo(documents.get(2).getId());\n\t\t\tassertThat(resultDoc.getContent()).isEqualTo(\n\t\t\t\t\t\"Great Depression Great Depression Great Depression Great Depression Great Depression Great Depression\");\n\t\t\tassertThat(resultDoc.getMetadata()).containsKey(\"meta2\");\n\t\t\tassertThat(resultDoc.getMetadata()).containsKey(\"distance\");\n\n\t\t\t// Remove all documents from the store\n\t\t\tvectorStore.delete(documents.stream().map(doc -> doc.getId()).toList());\n\t\t});",
                "is_abstract": "",
                "class_name": "ChromaVectorStoreIT",
                "annotations": []
            },
            {
                "name": "restTemplate",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new RestTemplate();",
                "is_abstract": "",
                "class_name": "ChromaVectorStoreIT TestApplication",
                "annotations": []
            },
            {
                "name": "chromaApi",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new ChromaApi(chromaContainer.getEndpoint(), restTemplate);",
                "is_abstract": "",
                "class_name": "ChromaVectorStoreIT TestApplication",
                "annotations": []
            },
            {
                "name": "chromaVectorStore",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new ChromaVectorStore(embeddingClient, chromaApi, \"TestCollection\");",
                "is_abstract": "",
                "class_name": "ChromaVectorStoreIT TestApplication",
                "annotations": []
            },
            {
                "name": "embeddingClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new OpenAiEmbeddingClient(new OpenAiApi(System.getenv(\"OPENAI_API_KEY\")));",
                "is_abstract": "",
                "class_name": "ChromaVectorStoreIT TestApplication",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/vector-stores/spring-ai-chroma/src/test/java/org/springframework/ai/vectorstore/BasicAuthChromaWhereIT.java",
        "class_names": [
            "BasicAuthChromaWhereIT",
            "TestApplication"
        ],
        "imports": "import org.springframework.web.client.RestTemplate;\nimport org.springframework.ai.openai.api.OpenAiApi;\nimport java.util.List;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.ai.document.Document;\nimport java.util.Map;\nimport org.springframework.ai.chroma.ChromaApi;\nimport org.junit.jupiter.api.Test;\nimport org.testcontainers.chromadb.ChromaDBContainer;\nimport org.testcontainers.junit.jupiter.Container;\nimport org.springframework.ai.vectorstore.ChromaVectorStore;\nimport org.testcontainers.images.builder.Transferable;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport org.springframework.ai.embedding.EmbeddingClient;\nimport org.springframework.boot.SpringBootConfiguration;\nimport org.testcontainers.junit.jupiter.Testcontainers;\nimport org.springframework.ai.openai.OpenAiEmbeddingClient;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.BasicAuthChromaWhereIT": "org.springframework.ai.vectorstore.BasicAuthChromaWhereIT",
            "org.springframework.ai.vectorstore.TestApplication": "org.springframework.ai.vectorstore.TestApplication",
            "org.springframework.ai.vectorstore.withInFiltersExpressions1": "org.springframework.ai.vectorstore.withInFiltersExpressions1",
            "org.springframework.ai.vectorstore.restTemplat": "org.springframework.ai.vectorstore.restTemplat",
            "org.springframework.ai.vectorstore.chromaApi": "org.springframework.ai.vectorstore.chromaApi",
            "org.springframework.ai.vectorstore.chromaVectorStor": "org.springframework.ai.vectorstore.chromaVectorStor",
            "org.springframework.ai.vectorstore.embeddingClient": "org.springframework.ai.vectorstore.embeddingClient",
            "org.springframework.ai.vectorstore.stati": "org.springframework.ai.vectorstore.stati",
            "org.springframework.ai.vectorstore.contextRunner": "org.springframework.ai.vectorstore.contextRunner"
        },
        "package": "package org.springframework.ai.vectorstore;",
        "property_declarations": [
            "private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t.withUserConfiguration(TestApplication.class)\n\t\t.withPropertyValues(\"spring.ai.openai.apiKey=\" + System.getenv(\"OPENAI_API_KEY\"));",
            "@Container\n\tstatic ChromaDBContainer chromaContainer = new ChromaDBContainer(\"ghcr.io/chroma-core/chroma:0.4.22\")\n\t\t.withEnv(\"CHROMA_SERVER_AUTH_CREDENTIALS_FILE\", \"server.htpasswd\")\n\t\t.withEnv(\"CHROMA_SERVER_AUTH_CREDENTIALS_PROVIDER\",\n\t\t\t\t\"chromadb.auth.providers.HtpasswdFileServerAuthCredentialsProvider\")\n\t\t.withEnv(\"CHROMA_SERVER_AUTH_PROVIDER\", \"chromadb.auth.basic.BasicAuthServerProvider\")\n\t\t.withCopyToContainer(Transferable.of(\"src/test/resources/server.htpasswd\"), \"server.htpasswd\");"
        ],
        "functions": [
            {
                "name": "withInFiltersExpressions1",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\n\t\t\tVectorStore vectorStore = context.getBean(VectorStore.class);\n\n\t\t\tvectorStore.add(List.of(new Document(\"1\", \"Article by john\", Map.of(\"author\", \"john\")),\n\t\t\t\t\tnew Document(\"2\", \"Article by Jack\", Map.of(\"author\", \"jack\")),\n\t\t\t\t\tnew Document(\"3\", \"Article by Jill\", Map.of(\"author\", \"jill\"))));\n\n\t\t\tString query = \"Give me articles by john\";\n\n\t\t\tList<Document> results = vectorStore.similaritySearch(SearchRequest.query(query).withTopK(5));\n\t\t\tassertThat(results).hasSize(3);\n\n\t\t\tresults = vectorStore.similaritySearch(SearchRequest.query(query)\n\t\t\t\t.withTopK(5)\n\t\t\t\t.withSimilarityThresholdAll()\n\t\t\t\t.withFilterExpression(\"author in ['john', 'jill']\"));\n\n\t\t\tassertThat(results).hasSize(2);\n\t\t\tassertThat(results.stream().map(d -> d.getId()).toList()).containsExactlyInAnyOrder(\"1\", \"3\");\n\t\t});",
                "is_abstract": "",
                "class_name": "BasicAuthChromaWhereIT",
                "annotations": []
            },
            {
                "name": "restTemplate",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new RestTemplate();",
                "is_abstract": "",
                "class_name": "BasicAuthChromaWhereIT TestApplication",
                "annotations": []
            },
            {
                "name": "chromaApi",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new ChromaApi(chromaContainer.getEndpoint(), restTemplate).withBasicAuthCredentials(\"admin\",\n\t\t\t\t\t\"admin\");",
                "is_abstract": "",
                "class_name": "BasicAuthChromaWhereIT TestApplication",
                "annotations": []
            },
            {
                "name": "chromaVectorStore",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new ChromaVectorStore(embeddingClient, chromaApi, \"TestCollection\");",
                "is_abstract": "",
                "class_name": "BasicAuthChromaWhereIT TestApplication",
                "annotations": []
            },
            {
                "name": "embeddingClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new OpenAiEmbeddingClient(new OpenAiApi(System.getenv(\"OPENAI_API_KEY\")));",
                "is_abstract": "",
                "class_name": "BasicAuthChromaWhereIT TestApplication",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/vector-stores/spring-ai-chroma/src/test/java/org/springframework/ai/vectorstore/TokenSecuredChromaWhereIT.java",
        "class_names": [
            "TokenSecuredChromaWhereIT",
            "TestApplication"
        ],
        "imports": "import org.springframework.web.client.RestTemplate;\nimport org.springframework.ai.openai.api.OpenAiApi;\nimport java.util.List;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.ai.document.Document;\nimport java.util.Map;\nimport org.springframework.ai.chroma.ChromaApi;\nimport org.junit.jupiter.api.Test;\nimport org.testcontainers.chromadb.ChromaDBContainer;\nimport org.testcontainers.junit.jupiter.Container;\nimport org.springframework.ai.vectorstore.ChromaVectorStore;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport org.springframework.ai.embedding.EmbeddingClient;\nimport org.springframework.boot.SpringBootConfiguration;\nimport org.testcontainers.junit.jupiter.Testcontainers;\nimport org.springframework.ai.openai.OpenAiEmbeddingClient;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.TokenSecuredChromaWhereIT": "org.springframework.ai.vectorstore.TokenSecuredChromaWhereIT",
            "org.springframework.ai.vectorstore.TestApplication": "org.springframework.ai.vectorstore.TestApplication",
            "org.springframework.ai.vectorstore.withInFiltersExpressions1": "org.springframework.ai.vectorstore.withInFiltersExpressions1",
            "org.springframework.ai.vectorstore.withInFiltersExpressions": "org.springframework.ai.vectorstore.withInFiltersExpressions",
            "org.springframework.ai.vectorstore.restTemplat": "org.springframework.ai.vectorstore.restTemplat",
            "org.springframework.ai.vectorstore.chromaApi": "org.springframework.ai.vectorstore.chromaApi",
            "org.springframework.ai.vectorstore.chromaVectorStor": "org.springframework.ai.vectorstore.chromaVectorStor",
            "org.springframework.ai.vectorstore.embeddingClient": "org.springframework.ai.vectorstore.embeddingClient",
            "org.springframework.ai.vectorstore.CHROMA_SERVER_AUTH_CREDENTIALS": "org.springframework.ai.vectorstore.CHROMA_SERVER_AUTH_CREDENTIALS",
            "org.springframework.ai.vectorstore.stati": "org.springframework.ai.vectorstore.stati",
            "org.springframework.ai.vectorstore.contextRunner": "org.springframework.ai.vectorstore.contextRunner"
        },
        "package": "package org.springframework.ai.vectorstore;",
        "property_declarations": [
            "private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t.withUserConfiguration(TestApplication.class)\n\t\t.withPropertyValues(\"spring.ai.openai.apiKey=\" + System.getenv(\"OPENAI_API_KEY\"));",
            "@Container\n\tstatic ChromaDBContainer chromaContainer = new ChromaDBContainer(\"ghcr.io/chroma-core/chroma:0.4.22\")\n\t\t.withEnv(\"CHROMA_SERVER_AUTH_CREDENTIALS\", CHROMA_SERVER_AUTH_CREDENTIALS)\n\t\t.withEnv(\"CHROMA_SERVER_AUTH_CREDENTIALS_PROVIDER\",\n\t\t\t\t\"chromadb.auth.token.TokenConfigServerAuthCredentialsProvider\")\n\t\t.withEnv(\"CHROMA_SERVER_AUTH_PROVIDER\", \"chromadb.auth.token.TokenAuthServerProvider\");",
            "public static String CHROMA_SERVER_AUTH_CREDENTIALS = \"test-token\";"
        ],
        "functions": [
            {
                "name": "withInFiltersExpressions1",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\n\t\t\tVectorStore vectorStore = context.getBean(VectorStore.class);\n\n\t\t\tvectorStore.add(List.of(new Document(\"1\", \"Article by john\", Map.of(\"author\", \"john\")),\n\t\t\t\t\tnew Document(\"2\", \"Article by Jack\", Map.of(\"author\", \"jack\")),\n\t\t\t\t\tnew Document(\"3\", \"Article by Jill\", Map.of(\"author\", \"jill\"))));\n\n\t\t\tvar request = SearchRequest.query(\"Give me articles by john\").withTopK(5);\n\n\t\t\tList<Document> results = vectorStore.similaritySearch(request);\n\t\t\tassertThat(results).hasSize(3);\n\n\t\t\tresults = vectorStore.similaritySearch(\n\t\t\t\t\trequest.withSimilarityThresholdAll().withFilterExpression(\"author in ['john', 'jill']\"));\n\n\t\t\tassertThat(results).hasSize(2);\n\t\t\tassertThat(results.stream().map(d -> d.getId()).toList()).containsExactlyInAnyOrder(\"1\", \"3\");\n\t\t});",
                "is_abstract": "",
                "class_name": "TokenSecuredChromaWhereIT",
                "annotations": []
            },
            {
                "name": "withInFiltersExpressions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\n\t\t\tVectorStore vectorStore = context.getBean(VectorStore.class);\n\n\t\t\tvectorStore\n\t\t\t\t.add(List.of(new Document(\"1\", \"Article by john\", Map.of(\"author\", \"john\", \"article_type\", \"blog\")),\n\t\t\t\t\t\tnew Document(\"2\", \"Article by Jack\", Map.of(\"author\", \"jack\", \"article_type\", \"social\")),\n\t\t\t\t\t\tnew Document(\"3\", \"Article by Jill\", Map.of(\"author\", \"jill\", \"article_type\", \"paper\"))));\n\n\t\t\tvar request = SearchRequest.query(\"Give me articles by john\").withTopK(5);\n\n\t\t\tList<Document> results = vectorStore.similaritySearch(request);\n\t\t\tassertThat(results).hasSize(3);\n\n\t\t\tresults = vectorStore.similaritySearch(request.withSimilarityThresholdAll()\n\t\t\t\t.withFilterExpression(\"author in ['john', 'jill'] && 'article_type' == 'blog'\"));\n\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tassertThat(results.get(0).getId()).isEqualTo(\"1\");\n\n\t\t\tresults = vectorStore.similaritySearch(request.withSimilarityThresholdAll()\n\t\t\t\t.withFilterExpression(\"author in ['john'] || 'article_type' == 'paper'\"));\n\n\t\t\tassertThat(results).hasSize(2);\n\n\t\t\tassertThat(results.stream().map(d -> d.getId()).toList()).containsExactlyInAnyOrder(\"1\", \"3\");\n\t\t});",
                "is_abstract": "",
                "class_name": "TokenSecuredChromaWhereIT",
                "annotations": []
            },
            {
                "name": "restTemplate",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new RestTemplate();",
                "is_abstract": "",
                "class_name": "TokenSecuredChromaWhereIT TestApplication",
                "annotations": []
            },
            {
                "name": "chromaApi",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var chromaApi = new ChromaApi(chromaContainer.getEndpoint(), restTemplate);\n\t\t\tchromaApi.withKeyToken(CHROMA_SERVER_AUTH_CREDENTIALS);\n\t\t\treturn chromaApi;",
                "is_abstract": "",
                "class_name": "TokenSecuredChromaWhereIT TestApplication",
                "annotations": []
            },
            {
                "name": "chromaVectorStore",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new ChromaVectorStore(embeddingClient, chromaApi, \"TestCollection\");",
                "is_abstract": "",
                "class_name": "TokenSecuredChromaWhereIT TestApplication",
                "annotations": []
            },
            {
                "name": "embeddingClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new OpenAiEmbeddingClient(new OpenAiApi(System.getenv(\"OPENAI_API_KEY\")));",
                "is_abstract": "",
                "class_name": "TokenSecuredChromaWhereIT TestApplication",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/vector-stores/spring-ai-chroma/src/main/java/org/springframework/ai/chroma/ChromaApi.java",
        "class_names": [
            "ChromaApi",
            "CollectionList"
        ],
        "imports": "import java.util.List;\nimport org.springframework.util.CollectionUtils;\nimport java.util.regex.Matcher;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport org.springframework.util.StringUtils;\nimport java.util.Map;\nimport org.springframework.http.HttpEntity;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.web.client.RestTemplate;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport java.util.regex.Pattern;\nimport java.util.HashMap;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.http.MediaType;\nimport org.springframework.web.client.HttpServerErrorException;\nimport org.springframework.ai.chroma.ChromaApi.QueryRequest.Include;\nimport java.util.ArrayList;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.springframework.http.client.support.BasicAuthenticationInterceptor;",
        "package_import_paths": {
            "org.springframework.ai.chroma.ChromaApi": "org.springframework.ai.chroma.ChromaApi",
            "org.springframework.ai.chroma.CollectionList": "org.springframework.ai.chroma.CollectionList",
            "org.springframework.ai.chroma.withKeyToken": "org.springframework.ai.chroma.withKeyToken",
            "org.springframework.ai.chroma.withBasicAuthCredentials": "org.springframework.ai.chroma.withBasicAuthCredentials",
            "org.springframework.ai.chroma.toEmbeddingResponseList": "org.springframework.ai.chroma.toEmbeddingResponseList",
            "org.springframework.ai.chroma.createCollection": "org.springframework.ai.chroma.createCollection",
            "org.springframework.ai.chroma.deleteCollection": "org.springframework.ai.chroma.deleteCollection",
            "org.springframework.ai.chroma.getCollection": "org.springframework.ai.chroma.getCollection",
            "org.springframework.ai.chroma.listCollections": "org.springframework.ai.chroma.listCollections",
            "org.springframework.ai.chroma.upsertEmbeddings": "org.springframework.ai.chroma.upsertEmbeddings",
            "org.springframework.ai.chroma.deleteEmbeddings": "org.springframework.ai.chroma.deleteEmbeddings",
            "org.springframework.ai.chroma.countEmbeddings": "org.springframework.ai.chroma.countEmbeddings",
            "org.springframework.ai.chroma.queryCollection": "org.springframework.ai.chroma.queryCollection",
            "org.springframework.ai.chroma.getEmbeddings": "org.springframework.ai.chroma.getEmbeddings",
            "org.springframework.ai.chroma.wher": "org.springframework.ai.chroma.wher",
            "org.springframework.ai.chroma.getHttpEntityFor": "org.springframework.ai.chroma.getHttpEntityFor",
            "org.springframework.ai.chroma.httpHeaders": "org.springframework.ai.chroma.httpHeaders",
            "org.springframework.ai.chroma.getValueErrorMess": "org.springframework.ai.chroma.getValueErrorMess",
            "org.springframework.ai.chroma.VALUE_ERROR_PATTERN": "org.springframework.ai.chroma.VALUE_ERROR_PATTERN",
            "org.springframework.ai.chroma.baseUrl": "org.springframework.ai.chroma.baseUrl",
            "org.springframework.ai.chroma.restTemplat": "org.springframework.ai.chroma.restTemplat",
            "org.springframework.ai.chroma.objectMapper": "org.springframework.ai.chroma.objectMapper",
            "org.springframework.ai.chroma.keyToken": "org.springframework.ai.chroma.keyToken",
            "org.springframework.ai.chroma.all": "org.springframework.ai.chroma.all"
        },
        "package": "package org.springframework.ai.chroma;",
        "property_declarations": [
            "private static Pattern VALUE_ERROR_PATTERN = Pattern.compile(\"ValueError\\\\('([^']*)'\\\\)\");",
            "private final ObjectMapper objectMapper;",
            "private final RestTemplate restTemplate;",
            "private String keyToken;",
            "public static final List<Include> all = List.of(METADATAS, DOCUMENTS, DISTANCES, EMBEDDINGS);",
            "private final String baseUrl;"
        ],
        "functions": [
            {
                "name": "withKeyToken",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.keyToken = keyToken;\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "ChromaApi",
                "annotations": []
            },
            {
                "name": "withBasicAuthCredentials",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.restTemplate.getInterceptors().add(new BasicAuthenticationInterceptor(username, username));\n\t\treturn this;",
                "is_abstract": "",
                "class_name": "ChromaApi",
                "annotations": [
                    "@JsonProperty(\"metadatas\")",
                    "@JsonProperty(\"metadatas\")",
                    "@JsonProperty(\"query_embeddings\")",
                    "@JsonProperty(\"n_results\")",
                    "@JsonProperty(\"metadatas\")",
                    "@JsonProperty(\"documents\")",
                    "@JsonProperty(\"distances\")",
                    "@JsonProperty(\"embeddings\")",
                    "@JsonProperty(\"metadatas\")"
                ]
            },
            {
                "name": "toEmbeddingResponseList",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "List<Embedding> result = new ArrayList<>();\n\n\t\tif (queryResponse != null && !CollectionUtils.isEmpty(queryResponse.ids())) {\n\t\t\tfor (int i = 0; i < queryResponse.ids().get(0).size(); i++) {\n\t\t\t\tresult.add(new Embedding(queryResponse.ids().get(0).get(i), queryResponse.embeddings().get(0).get(i),\n\t\t\t\t\t\tqueryResponse.documents().get(0).get(i), queryResponse.metadata().get(0).get(i),\n\t\t\t\t\t\tqueryResponse.distances().get(0).get(i)));\n\t\t\t}\n\t\t}\n\n\t\treturn result;",
                "is_abstract": "",
                "class_name": "ChromaApi",
                "annotations": []
            },
            {
                "name": "createCollection",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.restTemplate\n\t\t\t.exchange(this.baseUrl + \"/api/v1/collections\", HttpMethod.POST,\n\t\t\t\t\tthis.getHttpEntityFor(createCollectionRequest), Collection.class)\n\t\t\t.getBody();",
                "is_abstract": "",
                "class_name": "ChromaApi",
                "annotations": []
            },
            {
                "name": "deleteCollection",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.restTemplate.exchange(this.baseUrl + \"/api/v1/collections/{collection_name}\", HttpMethod.DELETE,\n\t\t\t\tnew HttpEntity<>(httpHeaders()), Void.class, collectionName);",
                "is_abstract": "",
                "class_name": "ChromaApi",
                "annotations": []
            },
            {
                "name": "getCollection",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "try {\n\t\t\treturn this.restTemplate\n\t\t\t\t.exchange(this.baseUrl + \"/api/v1/collections/{collection_name}\", HttpMethod.GET,\n\t\t\t\t\t\tnew HttpEntity<>(httpHeaders()), Collection.class, collectionName)\n\t\t\t\t.getBody();\n\t\t}\n\t\tcatch (HttpServerErrorException e) {\n\t\t\tString msg = this.getValueErrorMessage(e.getMessage());\n\t\t\tif (String.format(\"Collection %s does not exist.\", collectionName).equals(msg)) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tthrow new RuntimeException(msg, e);\n\t\t}",
                "is_abstract": "",
                "class_name": "ChromaApi",
                "annotations": []
            },
            {
                "name": "listCollections",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.restTemplate\n\t\t\t.exchange(this.baseUrl + \"/api/v1/collections\", HttpMethod.GET, new HttpEntity<>(httpHeaders()),\n\t\t\t\t\tCollectionList.class)\n\t\t\t.getBody();",
                "is_abstract": "",
                "class_name": "ChromaApi CollectionList",
                "annotations": []
            },
            {
                "name": "upsertEmbeddings",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.restTemplate\n\t\t\t.exchange(this.baseUrl + \"/api/v1/collections/{collection_id}/upsert\", HttpMethod.POST,\n\t\t\t\t\tthis.getHttpEntityFor(embedding), Boolean.class, collectionId)\n\t\t\t.getBody();",
                "is_abstract": "",
                "class_name": "ChromaApi CollectionList",
                "annotations": []
            },
            {
                "name": "deleteEmbeddings",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.restTemplate\n\t\t\t.exchange(this.baseUrl + \"/api/v1/collections/{collection_id}/delete\", HttpMethod.POST,\n\t\t\t\t\tthis.getHttpEntityFor(deleteRequest), List.class, collectionId)\n\t\t\t.getBody();",
                "is_abstract": "",
                "class_name": "ChromaApi CollectionList",
                "annotations": []
            },
            {
                "name": "countEmbeddings",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.restTemplate\n\t\t\t.exchange(this.baseUrl + \"/api/v1/collections/{collection_id}/count\", HttpMethod.GET,\n\t\t\t\t\tnew HttpEntity<>(httpHeaders()), Long.class, collectionId)\n\t\t\t.getBody();",
                "is_abstract": "",
                "class_name": "ChromaApi CollectionList",
                "annotations": []
            },
            {
                "name": "queryCollection",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.restTemplate\n\t\t\t.exchange(this.baseUrl + \"/api/v1/collections/{collection_id}/query\", HttpMethod.POST,\n\t\t\t\t\tthis.getHttpEntityFor(queryRequest), QueryResponse.class, collectionId)\n\t\t\t.getBody();",
                "is_abstract": "",
                "class_name": "ChromaApi CollectionList",
                "annotations": []
            },
            {
                "name": "getEmbeddings",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.restTemplate\n\t\t\t.exchange(this.baseUrl + \"/api/v1/collections/{collection_id}/get\", HttpMethod.POST,\n\t\t\t\t\tthis.getHttpEntityFor(getEmbeddingsRequest), GetEmbeddingResponse.class, collectionId)\n\t\t\t.getBody();",
                "is_abstract": "",
                "class_name": "ChromaApi CollectionList",
                "annotations": []
            },
            {
                "name": "where",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "try {\n\t\t\treturn this.objectMapper.readValue(text, Map.class);\n\t\t}\n\t\tcatch (JsonProcessingException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}",
                "is_abstract": "",
                "class_name": "ChromaApi CollectionList",
                "annotations": []
            },
            {
                "name": "getHttpEntityFor",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new HttpEntity<>(body, httpHeaders());",
                "is_abstract": "",
                "class_name": "ChromaApi CollectionList",
                "annotations": []
            },
            {
                "name": "httpHeaders",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "HttpHeaders headers = new HttpHeaders();\n\t\theaders.setContentType(MediaType.APPLICATION_JSON);\n\t\tif (StringUtils.hasText(this.keyToken)) {\n\t\t\theaders.setBearerAuth(this.keyToken);\n\t\t}\n\t\treturn headers;",
                "is_abstract": "",
                "class_name": "ChromaApi CollectionList",
                "annotations": []
            },
            {
                "name": "getValueErrorMessage",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (!StringUtils.hasText(logString)) {\n\t\t\treturn \"\";\n\t\t}\n\t\tMatcher m = VALUE_ERROR_PATTERN.matcher(logString);\n\t\treturn (m.find()) ? m.group(1) : \"\";",
                "is_abstract": "",
                "class_name": "ChromaApi CollectionList",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/vector-stores/spring-ai-chroma/src/main/java/org/springframework/ai/vectorstore/JsonUtils.java",
        "class_names": [
            "JsonUtils"
        ],
        "imports": "import com.fasterxml.jackson.core.JsonProcessingException;\nimport java.util.List;\nimport java.util.Map;\nimport com.fasterxml.jackson.databind.ObjectMapper;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.JsonUtils": "org.springframework.ai.vectorstore.JsonUtils",
            "org.springframework.ai.vectorstore.jsonToM": "org.springframework.ai.vectorstore.jsonToM",
            "org.springframework.ai.vectorstore.toFloatList": "org.springframework.ai.vectorstore.toFloatList",
            "org.springframework.ai.vectorstore.toFloatArray": "org.springframework.ai.vectorstore.toFloatArray",
            "org.springframework.ai.vectorstore.toDoubl": "org.springframework.ai.vectorstore.toDoubl"
        },
        "package": "package org.springframework.ai.vectorstore;",
        "property_declarations": [],
        "functions": [
            {
                "name": "jsonToMap",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "try {\n\t\t\treturn (Map<String, Object>) new ObjectMapper().readValue(jsonText, Map.class);\n\t\t}\n\t\tcatch (JsonProcessingException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}",
                "is_abstract": "",
                "class_name": "JsonUtils",
                "annotations": []
            },
            {
                "name": "toFloatList",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return embeddingDouble.stream().map(Number::floatValue).toList();",
                "is_abstract": "",
                "class_name": "JsonUtils",
                "annotations": []
            },
            {
                "name": "toFloatArray",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "float[] embeddingFloat = new float[embeddingDouble.size()];\n\t\tint i = 0;\n\t\tfor (Double d : embeddingDouble) {\n\t\t\tembeddingFloat[i++] = d.floatValue();\n\t\t}\n\t\treturn embeddingFloat;",
                "is_abstract": "",
                "class_name": "JsonUtils",
                "annotations": []
            },
            {
                "name": "toDouble",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return floats.stream().map(f -> f.doubleValue()).toList();",
                "is_abstract": "",
                "class_name": "JsonUtils",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/vector-stores/spring-ai-chroma/src/main/java/org/springframework/ai/vectorstore/ChromaVectorStore.java",
        "class_names": [
            "ChromaVectorStore"
        ],
        "imports": "import java.util.ArrayList;\nimport java.util.List;\nimport org.springframework.ai.chroma.ChromaApi.Embedding;\nimport org.springframework.ai.chroma.ChromaApi.DeleteEmbeddingsRequest;\nimport org.springframework.util.Assert;\nimport org.springframework.ai.document.Document;\nimport org.springframework.util.CollectionUtils;\nimport java.util.Map;\nimport java.util.HashMap;\nimport org.springframework.ai.chroma.ChromaApi;\nimport org.springframework.ai.vectorstore.filter.FilterExpressionConverter;\nimport org.springframework.beans.factory.InitializingBean;\nimport org.springframework.ai.vectorstore.filter.converter.ChromaFilterExpressionConverter;\nimport org.springframework.util.StringUtils;\nimport org.springframework.ai.embedding.EmbeddingClient;\nimport java.util.Optional;\nimport org.springframework.ai.chroma.ChromaApi.AddEmbeddingsRequest;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.ChromaVectorStor": "org.springframework.ai.vectorstore.ChromaVectorStor",
            "org.springframework.ai.vectorstore.setFilterExpressionConverter": "org.springframework.ai.vectorstore.setFilterExpressionConverter",
            "org.springframework.ai.vectorstore.add": "org.springframework.ai.vectorstore.add",
            "org.springframework.ai.vectorstore.delet": "org.springframework.ai.vectorstore.delet",
            "org.springframework.ai.vectorstore.similaritySearch": "org.springframework.ai.vectorstore.similaritySearch",
            "org.springframework.ai.vectorstore.afterPropertiesSet": "org.springframework.ai.vectorstore.afterPropertiesSet",
            "org.springframework.ai.vectorstore.DISTANCE_FIELD_NAME": "org.springframework.ai.vectorstore.DISTANCE_FIELD_NAME",
            "org.springframework.ai.vectorstore.DEFAULT_COLLECTION_NAME": "org.springframework.ai.vectorstore.DEFAULT_COLLECTION_NAME",
            "org.springframework.ai.vectorstore.SIMILARITY_THRESHOLD_ALL": "org.springframework.ai.vectorstore.SIMILARITY_THRESHOLD_ALL",
            "org.springframework.ai.vectorstore.DEFAULT_TOP_K": "org.springframework.ai.vectorstore.DEFAULT_TOP_K",
            "org.springframework.ai.vectorstore.embeddingClient": "org.springframework.ai.vectorstore.embeddingClient",
            "org.springframework.ai.vectorstore.chromaApi": "org.springframework.ai.vectorstore.chromaApi",
            "org.springframework.ai.vectorstore.collectionNam": "org.springframework.ai.vectorstore.collectionNam",
            "org.springframework.ai.vectorstore.filterExpressionConverter": "org.springframework.ai.vectorstore.filterExpressionConverter",
            "org.springframework.ai.vectorstore.collectionId": "org.springframework.ai.vectorstore.collectionId"
        },
        "package": "package org.springframework.ai.vectorstore;",
        "property_declarations": [
            "private final EmbeddingClient embeddingClient;",
            "private FilterExpressionConverter filterExpressionConverter;",
            "public static final String DEFAULT_COLLECTION_NAME = \"SpringAiCollection\";",
            "public static final double SIMILARITY_THRESHOLD_ALL = 0.0;",
            "private String collectionId;",
            "private final String collectionName;",
            "private final ChromaApi chromaApi;",
            "public static final int DEFAULT_TOP_K = 4;",
            "public static final String DISTANCE_FIELD_NAME = \"distance\";"
        ],
        "functions": [
            {
                "name": "setFilterExpressionConverter",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(filterExpressionConverter, \"FilterExpressionConverter should not be null.\");\n\t\tthis.filterExpressionConverter = filterExpressionConverter;",
                "is_abstract": "",
                "class_name": "ChromaVectorStore",
                "annotations": []
            },
            {
                "name": "add",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(documents, \"Documents must not be null\");\n\t\tif (CollectionUtils.isEmpty(documents)) {\n\t\t\treturn;\n\t\t}\n\n\t\tList<String> ids = new ArrayList<>();\n\t\tList<Map<String, Object>> metadatas = new ArrayList<>();\n\t\tList<String> contents = new ArrayList<>();\n\t\tList<float[]> embeddings = new ArrayList<>();\n\n\t\tfor (Document document : documents) {\n\t\t\tids.add(document.getId());\n\t\t\tmetadatas.add(document.getMetadata());\n\t\t\tcontents.add(document.getContent());\n\t\t\tdocument.setEmbedding(this.embeddingClient.embed(document));\n\t\t\tembeddings.add(JsonUtils.toFloatArray(document.getEmbedding()));\n\t\t}\n\n\t\tthis.chromaApi.upsertEmbeddings(this.collectionId,\n\t\t\t\tnew AddEmbeddingsRequest(ids, embeddings, metadatas, contents));",
                "is_abstract": "",
                "class_name": "ChromaVectorStore",
                "annotations": []
            },
            {
                "name": "delete",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(idList, \"Document id list must not be null\");\n\t\tList<String> deletedIds = this.chromaApi.deleteEmbeddings(this.collectionId,\n\t\t\t\tnew DeleteEmbeddingsRequest(idList));\n\t\treturn Optional.of(deletedIds.size() == idList.size());",
                "is_abstract": "",
                "class_name": "ChromaVectorStore",
                "annotations": []
            },
            {
                "name": "similaritySearch",
                "parameters": [
                    ""
                ],
                "return_type": "Map",
                "body": "String nativeFilterExpression = (request.getFilterExpression() != null)\n\t\t\t\t? this.filterExpressionConverter.convertExpression(request.getFilterExpression()) : \"\";\n\n\t\tString query = request.getQuery();\n\t\tAssert.notNull(query, \"Query string must not be null\");\n\n\t\tList<Double> embedding = this.embeddingClient.embed(query);\n\t\tMap<String, Object> where = (StringUtils.hasText(nativeFilterExpression))\n\t\t\t\t? JsonUtils.jsonToMap(nativeFilterExpression) : Map.of();\n\t\tvar queryRequest = new ChromaApi.QueryRequest(JsonUtils.toFloatList(embedding), request.getTopK(), where);\n\t\tvar queryResponse = this.chromaApi.queryCollection(this.collectionId, queryRequest);\n\t\tvar embeddings = this.chromaApi.toEmbeddingResponseList(queryResponse);\n\n\t\tList<Document> responseDocuments = new ArrayList<>();\n\n\t\tfor (Embedding chromaEmbedding : embeddings) {\n\t\t\tfloat distance = chromaEmbedding.distances().floatValue();\n\t\t\tif ((1 - distance) >= request.getSimilarityThreshold()) {\n\t\t\t\tString id = chromaEmbedding.id();\n\t\t\t\tString content = chromaEmbedding.document();\n\t\t\t\tMap<String, Object> metadata = chromaEmbedding.metadata();\n\t\t\t\tif (metadata == null) {\n\t\t\t\t\tmetadata = new HashMap<>();\n\t\t\t\t}\n\t\t\t\tmetadata.put(DISTANCE_FIELD_NAME, distance);\n\t\t\t\tDocument document = new Document(id, content, metadata);\n\t\t\t\tdocument.setEmbedding(JsonUtils.toDouble(chromaEmbedding.embedding()));\n\t\t\t\tresponseDocuments.add(document);\n\t\t\t}\n\t\t}\n\n\t\treturn responseDocuments;",
                "is_abstract": "",
                "class_name": "ChromaVectorStore",
                "annotations": []
            },
            {
                "name": "afterPropertiesSet",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var collection = this.chromaApi.getCollection(this.collectionName);\n\t\tif (collection == null) {\n\t\t\tcollection = this.chromaApi.createCollection(new ChromaApi.CreateCollectionRequest(this.collectionName));\n\t\t}\n\t\tthis.collectionId = collection.id();",
                "is_abstract": "",
                "class_name": "ChromaVectorStore",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/vector-stores/spring-ai-pinecone/src/test/java/org/springframework/ai/vectorstore/PineconeVectorStoreIT.java",
        "class_names": [
            "PineconeVectorStoreIT",
            "TestApplication"
        ],
        "imports": "import java.util.List;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport java.io.IOException;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.hamcrest.Matchers.equalTo;\nimport org.junit.jupiter.api.BeforeAll;\nimport java.util.Map;\nimport org.awaitility.Awaitility;\nimport java.nio.charset.StandardCharsets;\nimport org.springframework.ai.vectorstore.PineconeVectorStore.PineconeVectorStoreConfig;\nimport static org.hamcrest.Matchers.hasSize;\nimport org.springframework.ai.transformers.TransformersEmbeddingClient;\nimport org.springframework.context.annotation.Bean;\nimport java.util.Collections;\nimport org.springframework.core.io.DefaultResourceLoader;\nimport org.springframework.ai.embedding.EmbeddingClient;\nimport org.springframework.boot.SpringBootConfiguration;\nimport java.util.concurrent.TimeUnit;\nimport org.springframework.ai.document.Document;\nimport org.junit.jupiter.api.Test;\nimport org.awaitility.Duration;\nimport java.util.UUID;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.PineconeVectorStoreIT": "org.springframework.ai.vectorstore.PineconeVectorStoreIT",
            "org.springframework.ai.vectorstore.TestApplication": "org.springframework.ai.vectorstore.TestApplication",
            "org.springframework.ai.vectorstore.getText": "org.springframework.ai.vectorstore.getText",
            "org.springframework.ai.vectorstore.beforeAll": "org.springframework.ai.vectorstore.beforeAll",
            "org.springframework.ai.vectorstore.addAndSearchTest": "org.springframework.ai.vectorstore.addAndSearchTest",
            "org.springframework.ai.vectorstore.addAndSearchWithFilters": "org.springframework.ai.vectorstore.addAndSearchWithFilters",
            "org.springframework.ai.vectorstore.documentUpdateTest": "org.springframework.ai.vectorstore.documentUpdateTest",
            "org.springframework.ai.vectorstore.searchThresholdTest": "org.springframework.ai.vectorstore.searchThresholdTest",
            "org.springframework.ai.vectorstore.pineconeVectorStoreConfi": "org.springframework.ai.vectorstore.pineconeVectorStoreConfi",
            "org.springframework.ai.vectorstore.vectorStor": "org.springframework.ai.vectorstore.vectorStor",
            "org.springframework.ai.vectorstore.embeddingClient": "org.springframework.ai.vectorstore.embeddingClient",
            "org.springframework.ai.vectorstore.PINECONE_ENVIRONMENT": "org.springframework.ai.vectorstore.PINECONE_ENVIRONMENT",
            "org.springframework.ai.vectorstore.PINECONE_PROJECT_ID": "org.springframework.ai.vectorstore.PINECONE_PROJECT_ID",
            "org.springframework.ai.vectorstore.PINECONE_INDEX_NAME": "org.springframework.ai.vectorstore.PINECONE_INDEX_NAME",
            "org.springframework.ai.vectorstore.PINECONE_NAMESPACE": "org.springframework.ai.vectorstore.PINECONE_NAMESPACE",
            "org.springframework.ai.vectorstore.documents": "org.springframework.ai.vectorstore.documents",
            "org.springframework.ai.vectorstore.contextRunner": "org.springframework.ai.vectorstore.contextRunner"
        },
        "package": "package org.springframework.ai.vectorstore;",
        "property_declarations": [
            "private static final String PINECONE_ENVIRONMENT = \"gcp-starter\";",
            "List<Document> documents = List.of(\n\t\t\tnew Document(\"1\", getText(\"classpath:/test/data/spring.ai.txt\"), Map.of(\"meta1\", \"meta1\")),\n\t\t\tnew Document(\"2\", getText(\"classpath:/test/data/time.shelter.txt\"), Map.of()),\n\t\t\tnew Document(\"3\", getText(\"classpath:/test/data/great.depression.txt\"), Map.of(\"meta2\", \"meta2\")));",
            "private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t.withUserConfiguration(TestApplication.class);",
            "private static final String PINECONE_PROJECT_ID = \"814621f\";",
            "private static final String PINECONE_NAMESPACE = \"\";",
            "private static final String PINECONE_INDEX_NAME = \"spring-ai-test-index\";"
        ],
        "functions": [
            {
                "name": "getText",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var resource = new DefaultResourceLoader().getResource(uri);\n\t\ttry {\n\t\t\treturn resource.getContentAsString(StandardCharsets.UTF_8);\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}",
                "is_abstract": "",
                "class_name": "PineconeVectorStoreIT",
                "annotations": []
            },
            {
                "name": "beforeAll",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Awaitility.setDefaultPollInterval(2, TimeUnit.SECONDS);\n\t\tAwaitility.setDefaultPollDelay(Duration.ZERO);\n\t\tAwaitility.setDefaultTimeout(Duration.ONE_MINUTE);",
                "is_abstract": "",
                "class_name": "PineconeVectorStoreIT",
                "annotations": []
            },
            {
                "name": "addAndSearchTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\n\t\t\tVectorStore vectorStore = context.getBean(VectorStore.class);\n\n\t\t\tvectorStore.add(documents);\n\n\t\t\tAwaitility.await().until(() -> {\n\t\t\t\treturn vectorStore.similaritySearch(SearchRequest.query(\"Great Depression\").withTopK(1));\n\t\t\t}, hasSize(1));\n\n\t\t\tList<Document> results = vectorStore.similaritySearch(SearchRequest.query(\"Great Depression\").withTopK(1));\n\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tDocument resultDoc = results.get(0);\n\t\t\tassertThat(resultDoc.getId()).isEqualTo(documents.get(2).getId());\n\t\t\tassertThat(resultDoc.getContent()).contains(\"The Great Depression (1929\u20131939) was an economic shock\");\n\t\t\tassertThat(resultDoc.getMetadata()).hasSize(2);\n\t\t\tassertThat(resultDoc.getMetadata()).containsKey(\"meta2\");\n\t\t\tassertThat(resultDoc.getMetadata()).containsKey(\"distance\");\n\n\t\t\t// Remove all documents from the store\n\t\t\tvectorStore.delete(documents.stream().map(doc -> doc.getId()).toList());\n\n\t\t\tAwaitility.await().until(() -> {\n\t\t\t\treturn vectorStore.similaritySearch(SearchRequest.query(\"Hello\").withTopK(1));\n\t\t\t}, hasSize(0));\n\t\t});",
                "is_abstract": "",
                "class_name": "PineconeVectorStoreIT",
                "annotations": []
            },
            {
                "name": "addAndSearchWithFilters",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// Pinecone metadata filtering syntax:\n\t\t// https://docs.pinecone.io/docs/metadata-filtering\n\n\t\tcontextRunner.run(context -> {\n\n\t\t\tVectorStore vectorStore = context.getBean(VectorStore.class);\n\n\t\t\tvar bgDocument = new Document(\"The World is Big and Salvation Lurks Around the Corner\",\n\t\t\t\t\tMap.of(\"country\", \"Bulgaria\"));\n\t\t\tvar nlDocument = new Document(\"The World is Big and Salvation Lurks Around the Corner\",\n\t\t\t\t\tMap.of(\"country\", \"Netherlands\"));\n\n\t\t\tvectorStore.add(List.of(bgDocument, nlDocument));\n\n\t\t\tSearchRequest searchRequest = SearchRequest.query(\"The World\");\n\n\t\t\tAwaitility.await().until(() -> {\n\t\t\t\treturn vectorStore.similaritySearch(searchRequest.withTopK(1));\n\t\t\t}, hasSize(1));\n\n\t\t\tList<Document> results = vectorStore.similaritySearch(searchRequest.withTopK(5));\n\t\t\tassertThat(results).hasSize(2);\n\n\t\t\tresults = vectorStore.similaritySearch(searchRequest.withTopK(5)\n\t\t\t\t.withSimilarityThresholdAll()\n\t\t\t\t.withFilterExpression(\"country == 'Bulgaria'\"));\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tassertThat(results.get(0).getId()).isEqualTo(bgDocument.getId());\n\n\t\t\tresults = vectorStore.similaritySearch(searchRequest.withTopK(5)\n\t\t\t\t.withSimilarityThresholdAll()\n\t\t\t\t.withFilterExpression(\"country == 'Netherlands'\"));\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tassertThat(results.get(0).getId()).isEqualTo(nlDocument.getId());\n\n\t\t\tresults = vectorStore.similaritySearch(searchRequest.withTopK(5)\n\t\t\t\t.withSimilarityThresholdAll()\n\t\t\t\t.withFilterExpression(\"NOT(country == 'Netherlands')\"));\n\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tassertThat(results.get(0).getId()).isEqualTo(bgDocument.getId());\n\n\t\t\t// Remove all documents from the store\n\t\t\tvectorStore.delete(List.of(bgDocument, nlDocument).stream().map(doc -> doc.getId()).toList());\n\n\t\t\tAwaitility.await().until(() -> {\n\t\t\t\treturn vectorStore.similaritySearch(searchRequest.withTopK(1));\n\t\t\t}, hasSize(0));\n\t\t});",
                "is_abstract": "",
                "class_name": "PineconeVectorStoreIT",
                "annotations": []
            },
            {
                "name": "documentUpdateTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// Note ,using OpenAI to calculate embeddings\n\t\tcontextRunner.run(context -> {\n\n\t\t\tVectorStore vectorStore = context.getBean(VectorStore.class);\n\n\t\t\tDocument document = new Document(UUID.randomUUID().toString(), \"Spring AI rocks!!\",\n\t\t\t\t\tCollections.singletonMap(\"meta1\", \"meta1\"));\n\n\t\t\tvectorStore.add(List.of(document));\n\n\t\t\tSearchRequest springSearchRequest = SearchRequest.query(\"Spring\").withTopK(5);\n\n\t\t\tAwaitility.await().until(() -> {\n\t\t\t\treturn vectorStore.similaritySearch(springSearchRequest);\n\t\t\t}, hasSize(1));\n\n\t\t\tList<Document> results = vectorStore.similaritySearch(springSearchRequest);\n\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tDocument resultDoc = results.get(0);\n\t\t\tassertThat(resultDoc.getId()).isEqualTo(document.getId());\n\t\t\tassertThat(resultDoc.getContent()).isEqualTo(\"Spring AI rocks!!\");\n\t\t\tassertThat(resultDoc.getMetadata()).containsKey(\"meta1\");\n\t\t\tassertThat(resultDoc.getMetadata()).containsKey(\"distance\");\n\n\t\t\tDocument sameIdDocument = new Document(document.getId(),\n\t\t\t\t\t\"The World is Big and Salvation Lurks Around the Corner\",\n\t\t\t\t\tCollections.singletonMap(\"meta2\", \"meta2\"));\n\n\t\t\tvectorStore.add(List.of(sameIdDocument));\n\n\t\t\tSearchRequest fooBarSearchRequest = SearchRequest.query(\"FooBar\").withTopK(5);\n\n\t\t\tAwaitility.await().until(() -> {\n\t\t\t\treturn vectorStore.similaritySearch(fooBarSearchRequest).get(0).getContent();\n\t\t\t}, equalTo(\"The World is Big and Salvation Lurks Around the Corner\"));\n\n\t\t\tresults = vectorStore.similaritySearch(fooBarSearchRequest);\n\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tresultDoc = results.get(0);\n\t\t\tassertThat(resultDoc.getId()).isEqualTo(document.getId());\n\t\t\tassertThat(resultDoc.getContent()).isEqualTo(\"The World is Big and Salvation Lurks Around the Corner\");\n\t\t\tassertThat(resultDoc.getMetadata()).containsKey(\"meta2\");\n\t\t\tassertThat(resultDoc.getMetadata()).containsKey(\"distance\");\n\n\t\t\t// Remove all documents from the store\n\t\t\tvectorStore.delete(List.of(document.getId()));\n\t\t\tAwaitility.await().until(() -> {\n\t\t\t\treturn vectorStore.similaritySearch(fooBarSearchRequest);\n\t\t\t}, hasSize(0));\n\n\t\t});",
                "is_abstract": "",
                "class_name": "PineconeVectorStoreIT",
                "annotations": []
            },
            {
                "name": "searchThresholdTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\n\t\t\tVectorStore vectorStore = context.getBean(VectorStore.class);\n\n\t\t\tvectorStore.add(documents);\n\n\t\t\tAwaitility.await().until(() -> {\n\t\t\t\treturn vectorStore\n\t\t\t\t\t.similaritySearch(SearchRequest.query(\"Depression\").withTopK(50).withSimilarityThresholdAll());\n\t\t\t}, hasSize(3));\n\n\t\t\tList<Document> fullResult = vectorStore\n\t\t\t\t.similaritySearch(SearchRequest.query(\"Depression\").withTopK(5).withSimilarityThresholdAll());\n\n\t\t\tList<Float> distances = fullResult.stream().map(doc -> (Float) doc.getMetadata().get(\"distance\")).toList();\n\n\t\t\tassertThat(distances).hasSize(3);\n\n\t\t\tfloat threshold = (distances.get(0) + distances.get(1)) / 2;\n\n\t\t\tList<Document> results = vectorStore\n\t\t\t\t.similaritySearch(SearchRequest.query(\"Depression\").withTopK(5).withSimilarityThreshold(1 - threshold));\n\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tDocument resultDoc = results.get(0);\n\t\t\tassertThat(resultDoc.getId()).isEqualTo(documents.get(2).getId());\n\t\t\tassertThat(resultDoc.getContent()).contains(\"The Great Depression (1929\u20131939) was an economic shock\");\n\t\t\tassertThat(resultDoc.getMetadata()).containsKey(\"meta2\");\n\t\t\tassertThat(resultDoc.getMetadata()).containsKey(\"distance\");\n\n\t\t\t// Remove all documents from the store\n\t\t\tvectorStore.delete(documents.stream().map(doc -> doc.getId()).toList());\n\t\t\tAwaitility.await().until(() -> {\n\t\t\t\treturn vectorStore.similaritySearch(SearchRequest.query(\"Hello\").withTopK(1));\n\t\t\t}, hasSize(0));\n\t\t});",
                "is_abstract": "",
                "class_name": "PineconeVectorStoreIT",
                "annotations": []
            },
            {
                "name": "pineconeVectorStoreConfig",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return PineconeVectorStoreConfig.builder()\n\t\t\t\t.withApiKey(System.getenv(\"PINECONE_API_KEY\"))\n\t\t\t\t.withEnvironment(PINECONE_ENVIRONMENT)\n\t\t\t\t.withProjectId(PINECONE_PROJECT_ID)\n\t\t\t\t.withIndexName(PINECONE_INDEX_NAME)\n\t\t\t\t.withNamespace(PINECONE_NAMESPACE)\n\t\t\t\t.build();",
                "is_abstract": "",
                "class_name": "PineconeVectorStoreIT TestApplication",
                "annotations": []
            },
            {
                "name": "vectorStore",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new PineconeVectorStore(config, embeddingClient);",
                "is_abstract": "",
                "class_name": "PineconeVectorStoreIT TestApplication",
                "annotations": []
            },
            {
                "name": "embeddingClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new TransformersEmbeddingClient();",
                "is_abstract": "",
                "class_name": "PineconeVectorStoreIT TestApplication",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/vector-stores/spring-ai-pinecone/src/main/java/org/springframework/ai/vectorstore/PineconeVectorStore.java",
        "class_names": [
            "Builder",
            "PineconeVectorStoreConfig",
            "PineconeVectorStore"
        ],
        "imports": "import org.springframework.ai.vectorstore.filter.converter.PineconeFilterExpressionConverter;\nimport java.util.List;\nimport io.pinecone.proto.UpsertRequest;\nimport org.springframework.ai.vectorstore.filter.FilterExpressionConverter;\nimport io.pinecone.proto.QueryResponse;\nimport org.springframework.util.StringUtils;\nimport io.pinecone.proto.DeleteRequest;\nimport java.util.Map;\nimport com.google.protobuf.Struct;\nimport io.pinecone.PineconeConnectionConfig;\nimport com.google.protobuf.Value;\nimport java.time.Duration;\nimport io.pinecone.PineconeConnection;\nimport org.springframework.ai.embedding.EmbeddingClient;\nimport io.pinecone.PineconeClient;\nimport io.pinecone.PineconeClientConfig;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport io.pinecone.proto.QueryRequest;\nimport io.pinecone.proto.Vector;\nimport org.springframework.util.Assert;\nimport com.google.protobuf.util.JsonFormat;\nimport org.springframework.ai.document.Document;\nimport java.util.Optional;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.PineconeVectorStor": "org.springframework.ai.vectorstore.PineconeVectorStor",
            "org.springframework.ai.vectorstore.PineconeVectorStoreConfi": "org.springframework.ai.vectorstore.PineconeVectorStoreConfi",
            "org.springframework.ai.vectorstore.Builder": "org.springframework.ai.vectorstore.Builder",
            "org.springframework.ai.vectorstore.builder": "org.springframework.ai.vectorstore.builder",
            "org.springframework.ai.vectorstore.defaultConfi": "org.springframework.ai.vectorstore.defaultConfi",
            "org.springframework.ai.vectorstore.withApiKey": "org.springframework.ai.vectorstore.withApiKey",
            "org.springframework.ai.vectorstore.withProjectId": "org.springframework.ai.vectorstore.withProjectId",
            "org.springframework.ai.vectorstore.withEnvironment": "org.springframework.ai.vectorstore.withEnvironment",
            "org.springframework.ai.vectorstore.withIndexNam": "org.springframework.ai.vectorstore.withIndexNam",
            "org.springframework.ai.vectorstore.withNames": "org.springframework.ai.vectorstore.withNames",
            "org.springframework.ai.vectorstore.withServerSideTimeout": "org.springframework.ai.vectorstore.withServerSideTimeout",
            "org.springframework.ai.vectorstore.build": "org.springframework.ai.vectorstore.build",
            "org.springframework.ai.vectorstore.add": "org.springframework.ai.vectorstore.add",
            "org.springframework.ai.vectorstore.metadataToStruct": "org.springframework.ai.vectorstore.metadataToStruct",
            "org.springframework.ai.vectorstore.contentValu": "org.springframework.ai.vectorstore.contentValu",
            "org.springframework.ai.vectorstore.delet": "org.springframework.ai.vectorstore.delet",
            "org.springframework.ai.vectorstore.similaritySearch": "org.springframework.ai.vectorstore.similaritySearch",
            "org.springframework.ai.vectorstore.metadataFiltersToStruct": "org.springframework.ai.vectorstore.metadataFiltersToStruct",
            "org.springframework.ai.vectorstore.extractMetadat": "org.springframework.ai.vectorstore.extractMetadat",
            "org.springframework.ai.vectorstore.toFloatList": "org.springframework.ai.vectorstore.toFloatList",
            "org.springframework.ai.vectorstore.CONTENT_FIELD_NAME": "org.springframework.ai.vectorstore.CONTENT_FIELD_NAME",
            "org.springframework.ai.vectorstore.DISTANCE_METADATA_FIELD_NAME": "org.springframework.ai.vectorstore.DISTANCE_METADATA_FIELD_NAME",
            "org.springframework.ai.vectorstore.filterExpressionConverter": "org.springframework.ai.vectorstore.filterExpressionConverter",
            "org.springframework.ai.vectorstore.embeddingClient": "org.springframework.ai.vectorstore.embeddingClient",
            "org.springframework.ai.vectorstore.pineconeConnection": "org.springframework.ai.vectorstore.pineconeConnection",
            "org.springframework.ai.vectorstore.pineconeNames": "org.springframework.ai.vectorstore.pineconeNames",
            "org.springframework.ai.vectorstore.objectMapper": "org.springframework.ai.vectorstore.objectMapper",
            "org.springframework.ai.vectorstore.names": "org.springframework.ai.vectorstore.names",
            "org.springframework.ai.vectorstore.connectionConfi": "org.springframework.ai.vectorstore.connectionConfi",
            "org.springframework.ai.vectorstore.clientConfi": "org.springframework.ai.vectorstore.clientConfi",
            "org.springframework.ai.vectorstore.apiKey": "org.springframework.ai.vectorstore.apiKey",
            "org.springframework.ai.vectorstore.projectId": "org.springframework.ai.vectorstore.projectId",
            "org.springframework.ai.vectorstore.environment": "org.springframework.ai.vectorstore.environment",
            "org.springframework.ai.vectorstore.indexNam": "org.springframework.ai.vectorstore.indexNam",
            "org.springframework.ai.vectorstore.serverSideTimeout": "org.springframework.ai.vectorstore.serverSideTimeout"
        },
        "package": "package org.springframework.ai.vectorstore;",
        "property_declarations": [
            "private final EmbeddingClient embeddingClient;",
            "private static final String CONTENT_FIELD_NAME = \"document_content\";",
            "private String apiKey;",
            "private String environment;",
            "private final String pineconeNamespace;",
            "private String projectId;",
            "private final PineconeConnectionConfig connectionConfig;",
            "private String indexName;",
            "private String namespace = \"\";",
            "private final String namespace;",
            "private static final String DISTANCE_METADATA_FIELD_NAME = \"distance\";",
            "private Duration serverSideTimeout = Duration.ofSeconds(20);",
            "private final PineconeConnection pineconeConnection;",
            "private final ObjectMapper objectMapper;",
            "public final FilterExpressionConverter filterExpressionConverter = new PineconeFilterExpressionConverter();",
            "private final PineconeClientConfig clientConfig;"
        ],
        "functions": [
            {
                "name": "builder",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Builder();",
                "is_abstract": "",
                "class_name": "PineconeVectorStore PineconeVectorStoreConfig",
                "annotations": []
            },
            {
                "name": "defaultConfig",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return builder().build();",
                "is_abstract": "",
                "class_name": "PineconeVectorStore PineconeVectorStoreConfig",
                "annotations": []
            },
            {
                "name": "withApiKey",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.apiKey = apiKey;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "PineconeVectorStore PineconeVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "withProjectId",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.projectId = projectId;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "PineconeVectorStore PineconeVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "withEnvironment",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.environment = environment;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "PineconeVectorStore PineconeVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "withIndexName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.indexName = indexName;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "PineconeVectorStore PineconeVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "withNamespace",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.namespace = namespace;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "PineconeVectorStore PineconeVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "withServerSideTimeout",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.serverSideTimeout = serverSideTimeout;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "PineconeVectorStore PineconeVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "build",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new PineconeVectorStoreConfig(this);",
                "is_abstract": "",
                "class_name": "PineconeVectorStore PineconeVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "add",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "List<Vector> upsertVectors = documents.stream().map(document -> {\n\t\t\t// Compute and assign an embedding to the document.\n\t\t\tdocument.setEmbedding(this.embeddingClient.embed(document));\n\n\t\t\treturn Vector.newBuilder()\n\t\t\t\t.setId(document.getId())\n\t\t\t\t.addAllValues(toFloatList(document.getEmbedding()))\n\t\t\t\t.setMetadata(metadataToStruct(document))\n\t\t\t\t.build();\n\t\t}).toList();\n\n\t\tUpsertRequest upsertRequest = UpsertRequest.newBuilder()\n\t\t\t.addAllVectors(upsertVectors)\n\t\t\t.setNamespace(namespace)\n\t\t\t.build();\n\n\t\tthis.pineconeConnection.getBlockingStub().upsert(upsertRequest);",
                "is_abstract": "",
                "class_name": "PineconeVectorStore PineconeVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "metadataToStruct",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "try {\n\t\t\tvar structBuilder = Struct.newBuilder();\n\t\t\tJsonFormat.parser()\n\t\t\t\t.ignoringUnknownFields()\n\t\t\t\t.merge(this.objectMapper.writeValueAsString(document.getMetadata()), structBuilder);\n\t\t\tstructBuilder.putFields(CONTENT_FIELD_NAME, contentValue(document));\n\t\t\treturn structBuilder.build();\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}",
                "is_abstract": "",
                "class_name": "PineconeVectorStore PineconeVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "contentValue",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return Value.newBuilder().setStringValue(document.getContent()).build();",
                "is_abstract": "",
                "class_name": "PineconeVectorStore PineconeVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "delete",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "DeleteRequest deleteRequest = DeleteRequest.newBuilder()\n\t\t\t.setNamespace(namespace) // ignored for free tier.\n\t\t\t.addAllIds(documentIds)\n\t\t\t.setDeleteAll(false)\n\t\t\t.build();\n\n\t\tthis.pineconeConnection.getBlockingStub().delete(deleteRequest);\n\n\t\t// The Pinecone delete API does not provide deletion status info.\n\t\treturn Optional.of(true);",
                "is_abstract": "",
                "class_name": "PineconeVectorStore PineconeVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "similaritySearch",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String nativeExpressionFilters = (request.getFilterExpression() != null)\n\t\t\t\t? this.filterExpressionConverter.convertExpression(request.getFilterExpression()) : \"\";\n\n\t\tList<Double> queryEmbedding = this.embeddingClient.embed(request.getQuery());\n\n\t\tvar queryRequestBuilder = QueryRequest.newBuilder()\n\t\t\t.addAllVector(toFloatList(queryEmbedding))\n\t\t\t.setTopK(request.getTopK())\n\t\t\t.setIncludeMetadata(true)\n\t\t\t.setNamespace(namespace);\n\n\t\tif (StringUtils.hasText(nativeExpressionFilters)) {\n\t\t\tqueryRequestBuilder.setFilter(metadataFiltersToStruct(nativeExpressionFilters));\n\t\t}\n\n\t\tQueryResponse queryResponse = this.pineconeConnection.getBlockingStub().query(queryRequestBuilder.build());\n\n\t\treturn queryResponse.getMatchesList()\n\t\t\t.stream()\n\t\t\t.filter(scoredVector -> scoredVector.getScore() >= request.getSimilarityThreshold())\n\t\t\t.map(scoredVector -> {\n\t\t\t\tvar id = scoredVector.getId();\n\t\t\t\tStruct metadataStruct = scoredVector.getMetadata();\n\t\t\t\tvar content = metadataStruct.getFieldsOrThrow(CONTENT_FIELD_NAME).getStringValue();\n\t\t\t\tMap<String, Object> metadata = extractMetadata(metadataStruct);\n\t\t\t\tmetadata.put(DISTANCE_METADATA_FIELD_NAME, 1 - scoredVector.getScore());\n\t\t\t\treturn new Document(id, content, metadata);\n\t\t\t})\n\t\t\t.toList();",
                "is_abstract": "",
                "class_name": "PineconeVectorStore PineconeVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "metadataFiltersToStruct",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "try {\n\t\t\tvar structBuilder = Struct.newBuilder();\n\t\t\tJsonFormat.parser().ignoringUnknownFields().merge(metadataFilters, structBuilder);\n\t\t\tvar filterStruct = structBuilder.build();\n\t\t\treturn filterStruct;\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}",
                "is_abstract": "",
                "class_name": "PineconeVectorStore PineconeVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "extractMetadata",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "try {\n\t\t\tString json = JsonFormat.printer().print(metadataStruct);\n\t\t\tMap<String, Object> metadata = this.objectMapper.readValue(json, Map.class);\n\t\t\tmetadata.remove(CONTENT_FIELD_NAME);\n\t\t\treturn metadata;\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}",
                "is_abstract": "",
                "class_name": "PineconeVectorStore PineconeVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "toFloatList",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return doubleList.stream().map(d -> d.floatValue()).toList();",
                "is_abstract": "",
                "class_name": "PineconeVectorStore PineconeVectorStoreConfig Builder",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/vector-stores/spring-ai-azure/src/test/java/org/springframework/ai/vectorstore/azure/AzureAiSearchFilterExpressionConverterTests.java",
        "class_names": [
            "AzureAiSearchFilterExpressionConverterTests"
        ],
        "imports": "import java.util.List;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.GTE;\nimport org.springframework.ai.vectorstore.filter.FilterExpressionConverter;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.IN;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.AND;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.EQ;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.LTE;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.NIN;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.NE;\nimport org.springframework.ai.vectorstore.azure.AzureVectorStore.MetadataField;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.OR;\nimport org.springframework.ai.vectorstore.filter.Filter.Key;\nimport org.springframework.ai.vectorstore.filter.Filter.Expression;\nimport org.springframework.ai.vectorstore.filter.Filter.Group;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.vectorstore.filter.Filter.Value;\nimport java.util.Date;\nimport static org.assertj.core.api.Assertions.assertThatThrownBy;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.azure.AzureAiSearchFilterExpressionConverterTests": "org.springframework.ai.vectorstore.azure.AzureAiSearchFilterExpressionConverterTests",
            "org.springframework.ai.vectorstore.azure.format": "org.springframework.ai.vectorstore.azure.format",
            "org.springframework.ai.vectorstore.azure.testMissingFilterNam": "org.springframework.ai.vectorstore.azure.testMissingFilterNam",
            "org.springframework.ai.vectorstore.azure.testDat": "org.springframework.ai.vectorstore.azure.testDat",
            "org.springframework.ai.vectorstore.azure.testEQ": "org.springframework.ai.vectorstore.azure.testEQ",
            "org.springframework.ai.vectorstore.azure.tesEqAndGt": "org.springframework.ai.vectorstore.azure.tesEqAndGt",
            "org.springframework.ai.vectorstore.azure.tesIn": "org.springframework.ai.vectorstore.azure.tesIn",
            "org.springframework.ai.vectorstore.azure.tesNin": "org.springframework.ai.vectorstore.azure.tesNin",
            "org.springframework.ai.vectorstore.azure.testN": "org.springframework.ai.vectorstore.azure.testN",
            "org.springframework.ai.vectorstore.azure.testGrou": "org.springframework.ai.vectorstore.azure.testGrou",
            "org.springframework.ai.vectorstore.azure.tesBoolean": "org.springframework.ai.vectorstore.azure.tesBoolean",
            "org.springframework.ai.vectorstore.azure.testDecimal": "org.springframework.ai.vectorstore.azure.testDecimal",
            "org.springframework.ai.vectorstore.azure.testComplexIdentifiers": "org.springframework.ai.vectorstore.azure.testComplexIdentifiers"
        },
        "package": "package org.springframework.ai.vectorstore.azure;",
        "property_declarations": [],
        "functions": [
            {
                "name": "format",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return text.trim().replace(\" \" + System.lineSeparator(), System.lineSeparator()) + System.lineSeparator();",
                "is_abstract": "",
                "class_name": "AzureAiSearchFilterExpressionConverterTests",
                "annotations": []
            },
            {
                "name": "testMissingFilterName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "FilterExpressionConverter converter = new AzureAiSearchFilterExpressionConverter(List.of());\n\n\t\tassertThatThrownBy(() -> {\n\t\t\tconverter.convertExpression(new Expression(EQ, new Key(\"country\"), new Value(\"BG\")));\n\t\t}).isInstanceOf(IllegalArgumentException.class)\n\t\t\t.hasMessageContaining(\"Not allowed filter identifier name: country\");",
                "is_abstract": "",
                "class_name": "AzureAiSearchFilterExpressionConverterTests",
                "annotations": []
            },
            {
                "name": "testDate",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "FilterExpressionConverter converter = new AzureAiSearchFilterExpressionConverter(\n\t\t\t\tList.of(MetadataField.date(\"activationDate\")));\n\n\t\t// country >= 1970-01-01T00:00:02Z\n\t\tString vectorExpr = converter\n\t\t\t.convertExpression(new Expression(EQ, new Key(\"activationDate\"), new Value(new Date(2000))));\n\t\tassertThat(vectorExpr).isEqualTo(\"meta_activationDate eq 1970-01-01T00:00:02Z\");\n\n\t\tvectorExpr = converter\n\t\t\t.convertExpression(new Expression(EQ, new Key(\"activationDate\"), new Value(\"1970-01-01T00:00:02Z\")));\n\t\tassertThat(vectorExpr).isEqualTo(\"meta_activationDate eq 1970-01-01T00:00:02Z\");",
                "is_abstract": "",
                "class_name": "AzureAiSearchFilterExpressionConverterTests",
                "annotations": []
            },
            {
                "name": "testEQ",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "FilterExpressionConverter converter = new AzureAiSearchFilterExpressionConverter(\n\t\t\t\tList.of(MetadataField.text(\"country\")));\n\n\t\t// country == \"BG\"\n\t\tString vectorExpr = converter.convertExpression(new Expression(EQ, new Key(\"country\"), new Value(\"BG\")));\n\t\tassertThat(format(vectorExpr)).isEqualTo(\"\"\"\n\t\t\t\tmeta_country eq 'BG'\n\t\t\t\t\"\"\");",
                "is_abstract": "",
                "class_name": "AzureAiSearchFilterExpressionConverterTests",
                "annotations": []
            },
            {
                "name": "tesEqAndGte",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "FilterExpressionConverter converter = new AzureAiSearchFilterExpressionConverter(\n\t\t\t\tList.of(MetadataField.text(\"genre\"), MetadataField.int32(\"year\")));\n\n\t\t// genre == \"drama\" AND year >= 2020\n\t\tString vectorExpr = converter\n\t\t\t.convertExpression(new Expression(AND, new Expression(EQ, new Key(\"genre\"), new Value(\"drama\")),\n\t\t\t\t\tnew Expression(GTE, new Key(\"year\"), new Value(2020))));\n\t\tassertThat(format(vectorExpr)).isEqualTo(\"\"\"\n\t\t\t\tmeta_genre eq 'drama' and meta_year ge 2020\n\t\t\t\t\"\"\");",
                "is_abstract": "",
                "class_name": "AzureAiSearchFilterExpressionConverterTests",
                "annotations": []
            },
            {
                "name": "tesIn",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "FilterExpressionConverter converter = new AzureAiSearchFilterExpressionConverter(\n\t\t\t\tList.of(MetadataField.text(\"genre\")));\n\n\t\t// genre in [\"comedy\", \"documentary\", \"drama\"]\n\t\tString vectorExpr = converter.convertExpression(\n\t\t\t\tnew Expression(IN, new Key(\"genre\"), new Value(List.of(\"comedy\", \"documentary\", \"drama\"))));\n\t\tassertThat(format(vectorExpr)).isEqualTo(\"\"\"\n\t\t\t\tsearch.in(meta_genre, 'comedy,documentary,drama', ',')\n\t\t\t\t\"\"\");",
                "is_abstract": "",
                "class_name": "AzureAiSearchFilterExpressionConverterTests",
                "annotations": []
            },
            {
                "name": "tesNin",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "FilterExpressionConverter converter = new AzureAiSearchFilterExpressionConverter(\n\t\t\t\tList.of(MetadataField.text(\"genre\")));\n\n\t\t// genre in [\"comedy\", \"documentary\", \"drama\"]\n\t\tString vectorExpr = converter.convertExpression(\n\t\t\t\tnew Expression(NIN, new Key(\"genre\"), new Value(List.of(\"comedy\", \"documentary\", \"drama\"))));\n\t\tassertThat(format(vectorExpr)).isEqualTo(\"\"\"\n\t\t\t\tnot search.in(meta_genre, 'comedy,documentary,drama', ',')\n\t\t\t\t\"\"\");",
                "is_abstract": "",
                "class_name": "AzureAiSearchFilterExpressionConverterTests",
                "annotations": []
            },
            {
                "name": "testNe",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "FilterExpressionConverter converter = new AzureAiSearchFilterExpressionConverter(\n\t\t\t\tList.of(MetadataField.text(\"city\"), MetadataField.int64(\"year\"), MetadataField.text(\"country\")));\n\n\t\t// year >= 2020 OR country == \"BG\" AND city != \"Sofia\"\n\t\tString vectorExpr = converter\n\t\t\t.convertExpression(new Expression(OR, new Expression(GTE, new Key(\"year\"), new Value(2020)),\n\t\t\t\t\tnew Expression(AND, new Expression(EQ, new Key(\"country\"), new Value(\"BG\")),\n\t\t\t\t\t\t\tnew Expression(NE, new Key(\"city\"), new Value(\"Sofia\")))));\n\t\tassertThat(format(vectorExpr)).isEqualTo(\"\"\"\n\t\t\t\tmeta_year ge 2020 or meta_country eq 'BG' and meta_city ne 'Sofia'\n\t\t\t\t\"\"\");",
                "is_abstract": "",
                "class_name": "AzureAiSearchFilterExpressionConverterTests",
                "annotations": []
            },
            {
                "name": "testGroup",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "FilterExpressionConverter converter = new AzureAiSearchFilterExpressionConverter(\n\t\t\t\tList.of(MetadataField.text(\"city\"), MetadataField.int64(\"year\"), MetadataField.text(\"country\")));\n\n\t\t// (year >= 2020 OR country == \"BG\") AND city != \"Sofia\"\n\t\tString vectorExpr = converter.convertExpression(new Expression(AND,\n\t\t\t\tnew Group(new Expression(OR, new Expression(GTE, new Key(\"year\"), new Value(2020)),\n\t\t\t\t\t\tnew Expression(EQ, new Key(\"country\"), new Value(\"BG\")))),\n\t\t\t\tnew Expression(NE, new Key(\"city\"), new Value(\"Sofia\"))));\n\n\t\tassertThat(format(vectorExpr)).isEqualTo(\"\"\"\n\t\t\t\t(meta_year ge 2020 or meta_country eq 'BG') and meta_city ne 'Sofia'\n\t\t\t\t\"\"\");",
                "is_abstract": "",
                "class_name": "AzureAiSearchFilterExpressionConverterTests",
                "annotations": []
            },
            {
                "name": "tesBoolean",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "FilterExpressionConverter converter = new AzureAiSearchFilterExpressionConverter(\n\t\t\t\tList.of(MetadataField.bool(\"isOpen\"), MetadataField.int64(\"year\"), MetadataField.text(\"country\")));\n\n\t\t// isOpen == true AND year >= 2020 AND country IN [\"BG\", \"NL\", \"US\"]\n\t\tString vectorExpr = converter.convertExpression(new Expression(AND,\n\t\t\t\tnew Expression(AND, new Expression(EQ, new Key(\"isOpen\"), new Value(true)),\n\t\t\t\t\t\tnew Expression(GTE, new Key(\"year\"), new Value(2020))),\n\t\t\t\tnew Expression(IN, new Key(\"country\"), new Value(List.of(\"BG\", \"NL\", \"US\")))));\n\n\t\tassertThat(format(vectorExpr)).isEqualTo(\"\"\"\n\t\t\t\tmeta_isOpen eq true and meta_year ge 2020 and  search.in(meta_country, 'BG,NL,US', ',')\n\t\t\t\t\"\"\");",
                "is_abstract": "",
                "class_name": "AzureAiSearchFilterExpressionConverterTests",
                "annotations": []
            },
            {
                "name": "testDecimal",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "FilterExpressionConverter converter = new AzureAiSearchFilterExpressionConverter(\n\t\t\t\tList.of(MetadataField.decimal(\"temperature\")));\n\n\t\t// temperature >= -15.6 && temperature <= +20.13\n\t\tString vectorExpr = converter\n\t\t\t.convertExpression(new Expression(AND, new Expression(GTE, new Key(\"temperature\"), new Value(-15.6)),\n\t\t\t\t\tnew Expression(LTE, new Key(\"temperature\"), new Value(20.13))));\n\n\t\tassertThat(format(vectorExpr)).isEqualTo(\"\"\"\n\t\t\t\tmeta_temperature ge -15.6 and meta_temperature le 20.13\n\t\t\t\t\"\"\");",
                "is_abstract": "",
                "class_name": "AzureAiSearchFilterExpressionConverterTests",
                "annotations": []
            },
            {
                "name": "testComplexIdentifiers",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "FilterExpressionConverter converter = new AzureAiSearchFilterExpressionConverter(\n\t\t\t\tList.of(MetadataField.text(\"country 1 2 3\")));\n\n\t\tString vectorExpr = converter\n\t\t\t.convertExpression(new Expression(EQ, new Key(\"\\\"country 1 2 3\\\"\"), new Value(\"BG\")));\n\t\tassertThat(format(vectorExpr)).isEqualTo(\"\"\"\n\t\t\t\t'meta_country 1 2 3' eq 'BG'\n\t\t\t\t\"\"\");\n\n\t\tvectorExpr = converter.convertExpression(new Expression(EQ, new Key(\"'country 1 2 3'\"), new Value(\"BG\")));\n\t\tassertThat(format(vectorExpr)).isEqualTo(\"\"\"\n\t\t\t\t'meta_country 1 2 3' eq 'BG'\n\t\t\t\t\"\"\");",
                "is_abstract": "",
                "class_name": "AzureAiSearchFilterExpressionConverterTests",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/vector-stores/spring-ai-azure/src/test/java/org/springframework/ai/vectorstore/azure/AzureVectorStoreIT.java",
        "class_names": [
            "AzureVectorStoreIT",
            "Config"
        ],
        "imports": "import java.util.List;\nimport com.azure.search.documents.indexes.SearchIndexClientBuilder;\nimport org.springframework.ai.vectorstore.SearchRequest;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport java.io.IOException;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.hamcrest.Matchers.equalTo;\nimport org.junit.jupiter.api.BeforeAll;\nimport java.util.Map;\nimport org.awaitility.Awaitility;\nimport com.azure.search.documents.indexes.SearchIndexClient;\nimport java.nio.charset.StandardCharsets;\nimport java.time.Duration;\nimport static org.hamcrest.Matchers.hasSize;\nimport org.springframework.ai.transformers.TransformersEmbeddingClient;\nimport org.springframework.context.annotation.Bean;\nimport com.azure.core.credential.AzureKeyCredential;\nimport java.util.Collections;\nimport org.springframework.core.io.DefaultResourceLoader;\nimport org.springframework.ai.embedding.EmbeddingClient;\nimport org.springframework.ai.vectorstore.azure.AzureVectorStore.MetadataField;\nimport org.springframework.boot.SpringBootConfiguration;\nimport java.util.concurrent.TimeUnit;\nimport org.springframework.ai.document.Document;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.vectorstore.VectorStore;\nimport java.util.Date;\nimport java.util.UUID;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.azure.AzureVectorStoreIT": "org.springframework.ai.vectorstore.azure.AzureVectorStoreIT",
            "org.springframework.ai.vectorstore.azure.Confi": "org.springframework.ai.vectorstore.azure.Confi",
            "org.springframework.ai.vectorstore.azure.beforeAll": "org.springframework.ai.vectorstore.azure.beforeAll",
            "org.springframework.ai.vectorstore.azure.addAndSearchTest": "org.springframework.ai.vectorstore.azure.addAndSearchTest",
            "org.springframework.ai.vectorstore.azure.searchWithFilters": "org.springframework.ai.vectorstore.azure.searchWithFilters",
            "org.springframework.ai.vectorstore.azure.documentUpdateTest": "org.springframework.ai.vectorstore.azure.documentUpdateTest",
            "org.springframework.ai.vectorstore.azure.searchThresholdTest": "org.springframework.ai.vectorstore.azure.searchThresholdTest",
            "org.springframework.ai.vectorstore.azure.searchIndexClient": "org.springframework.ai.vectorstore.azure.searchIndexClient",
            "org.springframework.ai.vectorstore.azure.vectorStor": "org.springframework.ai.vectorstore.azure.vectorStor",
            "org.springframework.ai.vectorstore.azure.embeddingClient": "org.springframework.ai.vectorstore.azure.embeddingClient",
            "org.springframework.ai.vectorstore.azure.getText": "org.springframework.ai.vectorstore.azure.getText",
            "org.springframework.ai.vectorstore.azure.documents": "org.springframework.ai.vectorstore.azure.documents",
            "org.springframework.ai.vectorstore.azure.contextRunner": "org.springframework.ai.vectorstore.azure.contextRunner"
        },
        "package": "package org.springframework.ai.vectorstore.azure;",
        "property_declarations": [
            "private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t.withUserConfiguration(Config.class);",
            "List<Document> documents = List.of(\n\t\t\tnew Document(\"1\", getText(\"classpath:/test/data/spring.ai.txt\"), Map.of(\"meta1\", \"meta1\")),\n\t\t\tnew Document(\"2\", getText(\"classpath:/test/data/time.shelter.txt\"), Map.of()),\n\t\t\tnew Document(\"3\", getText(\"classpath:/test/data/great.depression.txt\"), Map.of(\"meta2\", \"meta2\")));"
        ],
        "functions": [
            {
                "name": "beforeAll",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Awaitility.setDefaultPollInterval(2, TimeUnit.SECONDS);\n\t\tAwaitility.setDefaultPollDelay(Duration.ZERO);\n\t\tAwaitility.setDefaultTimeout(Duration.ofMinutes(1));",
                "is_abstract": "",
                "class_name": "AzureVectorStoreIT",
                "annotations": []
            },
            {
                "name": "addAndSearchTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\n\t\t\tVectorStore vectorStore = context.getBean(VectorStore.class);\n\n\t\t\tvectorStore.add(documents);\n\n\t\t\tAwaitility.await().until(() -> {\n\t\t\t\treturn vectorStore.similaritySearch(SearchRequest.query(\"Great Depression\").withTopK(1));\n\t\t\t}, hasSize(1));\n\n\t\t\tList<Document> results = vectorStore.similaritySearch(SearchRequest.query(\"Great Depression\").withTopK(1));\n\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tDocument resultDoc = results.get(0);\n\t\t\tassertThat(resultDoc.getId()).isEqualTo(documents.get(2).getId());\n\t\t\tassertThat(resultDoc.getContent()).contains(\"The Great Depression (1929\u20131939) was an economic shock\");\n\t\t\tassertThat(resultDoc.getMetadata()).hasSize(2);\n\t\t\tassertThat(resultDoc.getMetadata()).containsKey(\"meta2\");\n\t\t\tassertThat(resultDoc.getMetadata()).containsKey(\"distance\");\n\n\t\t\t// Remove all documents from the store\n\t\t\tvectorStore.delete(documents.stream().map(doc -> doc.getId()).toList());\n\n\t\t\tAwaitility.await().until(() -> {\n\t\t\t\treturn vectorStore.similaritySearch(SearchRequest.query(\"Hello\").withTopK(1));\n\t\t\t}, hasSize(0));\n\t\t});",
                "is_abstract": "",
                "class_name": "AzureVectorStoreIT",
                "annotations": []
            },
            {
                "name": "searchWithFilters",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\t\t\tVectorStore vectorStore = context.getBean(VectorStore.class);\n\n\t\t\tvar bgDocument = new Document(\"1\", \"The World is Big and Salvation Lurks Around the Corner\",\n\t\t\t\t\tMap.of(\"country\", \"BG\", \"year\", 2020, \"activationDate\", new Date(1000)));\n\t\t\tvar nlDocument = new Document(\"2\", \"The World is Big and Salvation Lurks Around the Corner\",\n\t\t\t\t\tMap.of(\"country\", \"NL\", \"activationDate\", new Date(2000)));\n\t\t\tvar bgDocument2 = new Document(\"3\", \"The World is Big and Salvation Lurks Around the Corner\",\n\t\t\t\t\tMap.of(\"country\", \"BG\", \"year\", 2023, \"activationDate\", new Date(3000)));\n\n\t\t\tvectorStore.add(List.of(bgDocument, nlDocument, bgDocument2));\n\n\t\t\tAwaitility.await().until(() -> {\n\t\t\t\treturn vectorStore.similaritySearch(SearchRequest.query(\"The World\").withTopK(5));\n\t\t\t}, hasSize(3));\n\n\t\t\tList<Document> results = vectorStore.similaritySearch(SearchRequest.query(\"The World\")\n\t\t\t\t.withTopK(5)\n\t\t\t\t.withSimilarityThresholdAll()\n\t\t\t\t.withFilterExpression(\"country == 'NL'\"));\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tassertThat(results.get(0).getId()).isEqualTo(nlDocument.getId());\n\n\t\t\tresults = vectorStore.similaritySearch(SearchRequest.query(\"The World\")\n\t\t\t\t.withTopK(5)\n\t\t\t\t.withSimilarityThresholdAll()\n\t\t\t\t.withFilterExpression(\"country == 'BG'\"));\n\n\t\t\tassertThat(results).hasSize(2);\n\t\t\tassertThat(results.get(0).getId()).isIn(bgDocument.getId(), bgDocument2.getId());\n\t\t\tassertThat(results.get(1).getId()).isIn(bgDocument.getId(), bgDocument2.getId());\n\n\t\t\tresults = vectorStore.similaritySearch(SearchRequest.query(\"The World\")\n\t\t\t\t.withTopK(5)\n\t\t\t\t.withSimilarityThresholdAll()\n\t\t\t\t.withFilterExpression(\"country == 'BG' && year == 2020\"));\n\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tassertThat(results.get(0).getId()).isEqualTo(bgDocument.getId());\n\n\t\t\tresults = vectorStore.similaritySearch(SearchRequest.query(\"The World\")\n\t\t\t\t.withTopK(5)\n\t\t\t\t.withSimilarityThresholdAll()\n\t\t\t\t.withFilterExpression(\"country in ['BG']\"));\n\n\t\t\tassertThat(results).hasSize(2);\n\t\t\tassertThat(results.get(0).getId()).isIn(bgDocument.getId(), bgDocument2.getId());\n\t\t\tassertThat(results.get(1).getId()).isIn(bgDocument.getId(), bgDocument2.getId());\n\n\t\t\tresults = vectorStore.similaritySearch(SearchRequest.query(\"The World\")\n\t\t\t\t.withTopK(5)\n\t\t\t\t.withSimilarityThresholdAll()\n\t\t\t\t.withFilterExpression(\"country in ['BG','NL']\"));\n\n\t\t\tassertThat(results).hasSize(3);\n\n\t\t\tresults = vectorStore.similaritySearch(SearchRequest.query(\"The World\")\n\t\t\t\t.withTopK(5)\n\t\t\t\t.withSimilarityThresholdAll()\n\t\t\t\t.withFilterExpression(\"country not in ['BG']\"));\n\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tassertThat(results.get(0).getId()).isEqualTo(nlDocument.getId());\n\n\t\t\tresults = vectorStore.similaritySearch(SearchRequest.query(\"The World\")\n\t\t\t\t.withTopK(5)\n\t\t\t\t.withSimilarityThresholdAll()\n\t\t\t\t.withFilterExpression(\"NOT(country not in ['BG'])\"));\n\n\t\t\tassertThat(results).hasSize(2);\n\t\t\tassertThat(results.get(0).getId()).isIn(bgDocument.getId(), bgDocument2.getId());\n\t\t\tassertThat(results.get(1).getId()).isIn(bgDocument.getId(), bgDocument2.getId());\n\n\t\t\t// List<Document> results =\n\t\t\t// vectorStore.similaritySearch(SearchRequest.query(\"The World\")\n\t\t\t// .withTopK(5)\n\t\t\t// .withSimilarityThresholdAll()\n\t\t\t// .withFilterExpression(\"activationDate > '1970-01-01T00:00:02Z'\"));\n\n\t\t\t// assertThat(results).hasSize(1);\n\t\t\t// assertThat(results.get(0).getId()).isEqualTo(nlDocument.getId());\n\n\t\t\tvectorStore.delete(List.of(bgDocument.getId(), nlDocument.getId(), bgDocument2.getId()));\n\t\t});",
                "is_abstract": "",
                "class_name": "AzureVectorStoreIT",
                "annotations": []
            },
            {
                "name": "documentUpdateTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\n\t\t\tVectorStore vectorStore = context.getBean(VectorStore.class);\n\n\t\t\tDocument document = new Document(UUID.randomUUID().toString(), \"Spring AI rocks!!\",\n\t\t\t\t\tCollections.singletonMap(\"meta1\", \"meta1\"));\n\n\t\t\tvectorStore.add(List.of(document));\n\n\t\t\tSearchRequest springSearchRequest = SearchRequest.query(\"Spring\").withTopK(5);\n\n\t\t\tAwaitility.await().until(() -> {\n\t\t\t\treturn vectorStore.similaritySearch(springSearchRequest);\n\t\t\t}, hasSize(1));\n\n\t\t\tList<Document> results = vectorStore.similaritySearch(springSearchRequest);\n\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tDocument resultDoc = results.get(0);\n\t\t\tassertThat(resultDoc.getId()).isEqualTo(document.getId());\n\t\t\tassertThat(resultDoc.getContent()).isEqualTo(\"Spring AI rocks!!\");\n\t\t\tassertThat(resultDoc.getMetadata()).containsKey(\"meta1\");\n\t\t\tassertThat(resultDoc.getMetadata()).containsKey(\"distance\");\n\n\t\t\tDocument sameIdDocument = new Document(document.getId(),\n\t\t\t\t\t\"The World is Big and Salvation Lurks Around the Corner\",\n\t\t\t\t\tCollections.singletonMap(\"meta2\", \"meta2\"));\n\n\t\t\tvectorStore.add(List.of(sameIdDocument));\n\n\t\t\tSearchRequest fooBarSearchRequest = SearchRequest.query(\"FooBar\").withTopK(5);\n\n\t\t\tAwaitility.await().until(() -> {\n\t\t\t\treturn vectorStore.similaritySearch(fooBarSearchRequest).get(0).getContent();\n\t\t\t}, equalTo(\"The World is Big and Salvation Lurks Around the Corner\"));\n\n\t\t\tresults = vectorStore.similaritySearch(fooBarSearchRequest);\n\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tresultDoc = results.get(0);\n\t\t\tassertThat(resultDoc.getId()).isEqualTo(document.getId());\n\t\t\tassertThat(resultDoc.getContent()).isEqualTo(\"The World is Big and Salvation Lurks Around the Corner\");\n\t\t\tassertThat(resultDoc.getMetadata()).containsKey(\"meta2\");\n\t\t\tassertThat(resultDoc.getMetadata()).containsKey(\"distance\");\n\n\t\t\t// Remove all documents from the store\n\t\t\tvectorStore.delete(List.of(document.getId()));\n\t\t\tAwaitility.await().until(() -> {\n\t\t\t\treturn vectorStore.similaritySearch(fooBarSearchRequest);\n\t\t\t}, hasSize(0));\n\n\t\t});",
                "is_abstract": "",
                "class_name": "AzureVectorStoreIT",
                "annotations": []
            },
            {
                "name": "searchThresholdTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\n\t\t\tVectorStore vectorStore = context.getBean(VectorStore.class);\n\n\t\t\tvectorStore.add(documents);\n\n\t\t\tAwaitility.await().until(() -> {\n\t\t\t\treturn vectorStore\n\t\t\t\t\t.similaritySearch(SearchRequest.query(\"Depression\").withTopK(50).withSimilarityThresholdAll());\n\t\t\t}, hasSize(3));\n\n\t\t\tList<Document> fullResult = vectorStore\n\t\t\t\t.similaritySearch(SearchRequest.query(\"Depression\").withTopK(5).withSimilarityThresholdAll());\n\n\t\t\tList<Float> distances = fullResult.stream().map(doc -> (Float) doc.getMetadata().get(\"distance\")).toList();\n\n\t\t\tassertThat(distances).hasSize(3);\n\n\t\t\tfloat threshold = (distances.get(0) + distances.get(1)) / 2;\n\n\t\t\tList<Document> results = vectorStore\n\t\t\t\t.similaritySearch(SearchRequest.query(\"Depression\").withTopK(5).withSimilarityThreshold(1 - threshold));\n\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tDocument resultDoc = results.get(0);\n\t\t\tassertThat(resultDoc.getId()).isEqualTo(documents.get(2).getId());\n\t\t\tassertThat(resultDoc.getContent()).contains(\"The Great Depression (1929\u20131939) was an economic shock\");\n\t\t\tassertThat(resultDoc.getMetadata()).containsKey(\"meta2\");\n\t\t\tassertThat(resultDoc.getMetadata()).containsKey(\"distance\");\n\n\t\t\t// Remove all documents from the store\n\t\t\tvectorStore.delete(documents.stream().map(doc -> doc.getId()).toList());\n\t\t\tAwaitility.await().until(() -> {\n\t\t\t\treturn vectorStore.similaritySearch(SearchRequest.query(\"Hello\").withTopK(1));\n\t\t\t}, hasSize(0));\n\t\t});",
                "is_abstract": "",
                "class_name": "AzureVectorStoreIT",
                "annotations": []
            },
            {
                "name": "searchIndexClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new SearchIndexClientBuilder().endpoint(System.getenv(\"AZURE_AI_SEARCH_ENDPOINT\"))\n\t\t\t\t.credential(new AzureKeyCredential(System.getenv(\"AZURE_AI_SEARCH_API_KEY\")))\n\t\t\t\t.buildClient();",
                "is_abstract": "",
                "class_name": "AzureVectorStoreIT Config",
                "annotations": []
            },
            {
                "name": "vectorStore",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var filterableMetaFields = List.of(MetadataField.text(\"country\"), MetadataField.int64(\"year\"),\n\t\t\t\t\tMetadataField.date(\"activationDate\"));\n\t\t\treturn new AzureVectorStore(searchIndexClient, embeddingClient, filterableMetaFields);",
                "is_abstract": "",
                "class_name": "AzureVectorStoreIT Config",
                "annotations": []
            },
            {
                "name": "embeddingClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new TransformersEmbeddingClient();",
                "is_abstract": "",
                "class_name": "AzureVectorStoreIT Config",
                "annotations": []
            },
            {
                "name": "getText",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var resource = new DefaultResourceLoader().getResource(uri);\n\t\ttry {\n\t\t\treturn resource.getContentAsString(StandardCharsets.UTF_8);\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}",
                "is_abstract": "",
                "class_name": "AzureVectorStoreIT Config",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/vector-stores/spring-ai-azure/src/main/java/org/springframework/ai/vectorstore/azure/AzureAiSearchFilterExpressionConverter.java",
        "class_names": [
            "AzureAiSearchFilterExpressionConverter"
        ],
        "imports": "import org.springframework.ai.vectorstore.filter.Filter;\nimport java.text.SimpleDateFormat;\nimport java.util.List;\nimport org.springframework.ai.vectorstore.filter.Filter.ExpressionType;\nimport org.springframework.util.Assert;\nimport java.text.ParseException;\nimport org.springframework.ai.vectorstore.filter.Filter.Key;\nimport java.util.regex.Pattern;\nimport org.springframework.ai.vectorstore.filter.Filter.Expression;\nimport org.springframework.ai.vectorstore.filter.Filter.Group;\nimport java.util.TimeZone;\nimport java.util.Date;\nimport org.springframework.ai.vectorstore.filter.converter.AbstractFilterExpressionConverter;\nimport org.springframework.ai.vectorstore.azure.AzureVectorStore.MetadataField;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.azure.AzureAiSearchFilterExpressionConverter": "org.springframework.ai.vectorstore.azure.AzureAiSearchFilterExpressionConverter",
            "org.springframework.ai.vectorstore.azure.doExpression": "org.springframework.ai.vectorstore.azure.doExpression",
            "org.springframework.ai.vectorstore.azure.doStartValueRan": "org.springframework.ai.vectorstore.azure.doStartValueRan",
            "org.springframework.ai.vectorstore.azure.doEndValueRan": "org.springframework.ai.vectorstore.azure.doEndValueRan",
            "org.springframework.ai.vectorstore.azure.getOperationSymbol": "org.springframework.ai.vectorstore.azure.getOperationSymbol",
            "org.springframework.ai.vectorstore.azure.doKey": "org.springframework.ai.vectorstore.azure.doKey",
            "org.springframework.ai.vectorstore.azure.withMetaPrefix": "org.springframework.ai.vectorstore.azure.withMetaPrefix",
            "org.springframework.ai.vectorstore.azure.doValu": "org.springframework.ai.vectorstore.azure.doValu",
            "org.springframework.ai.vectorstore.azure.doSingleValu": "org.springframework.ai.vectorstore.azure.doSingleValu",
            "org.springframework.ai.vectorstore.azure.doStartGrou": "org.springframework.ai.vectorstore.azure.doStartGrou",
            "org.springframework.ai.vectorstore.azure.doEndGrou": "org.springframework.ai.vectorstore.azure.doEndGrou",
            "org.springframework.ai.vectorstore.azure.DATE_FORMAT_PATTERN": "org.springframework.ai.vectorstore.azure.DATE_FORMAT_PATTERN",
            "org.springframework.ai.vectorstore.azure.dateFormat": "org.springframework.ai.vectorstore.azure.dateFormat",
            "org.springframework.ai.vectorstore.azure.allowedIdentifierNames": "org.springframework.ai.vectorstore.azure.allowedIdentifierNames"
        },
        "package": "package org.springframework.ai.vectorstore.azure;",
        "property_declarations": [
            "private static Pattern DATE_FORMAT_PATTERN = Pattern.compile(\"\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}Z\");",
            "private final SimpleDateFormat dateFormat;",
            "private List<String> allowedIdentifierNames;"
        ],
        "functions": [
            {
                "name": "doExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (expression.type() == ExpressionType.IN || expression.type() == ExpressionType.NIN) {\n\t\t\tcontext.append(getOperationSymbol(expression));\n\t\t\tcontext.append(\"(\");\n\t\t\tthis.convertOperand(expression.left(), context);\n\t\t\tcontext.append(\", \");\n\t\t\tthis.convertOperand(expression.right(), context);\n\t\t\tcontext.append(\", ',')\");\n\t\t}\n\t\telse {\n\t\t\tthis.convertOperand(expression.left(), context);\n\t\t\tcontext.append(getOperationSymbol(expression));\n\t\t\tthis.convertOperand(expression.right(), context);\n\t\t}",
                "is_abstract": "",
                "class_name": "AzureAiSearchFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "doStartValueRange",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "context.append(\"'\");",
                "is_abstract": "",
                "class_name": "AzureAiSearchFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "doEndValueRange",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "context.append(\"'\");",
                "is_abstract": "",
                "class_name": "AzureAiSearchFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "getOperationSymbol",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "switch (exp.type()) {\n\t\t\tcase AND:\n\t\t\t\treturn \" and \";\n\t\t\tcase OR:\n\t\t\t\treturn \" or \";\n\t\t\tcase EQ:\n\t\t\t\treturn \" eq \";\n\t\t\tcase NE:\n\t\t\t\treturn \" ne \";\n\t\t\tcase LT:\n\t\t\t\treturn \" lt \";\n\t\t\tcase LTE:\n\t\t\t\treturn \" le \";\n\t\t\tcase GT:\n\t\t\t\treturn \" gt \";\n\t\t\tcase GTE:\n\t\t\t\treturn \" ge \";\n\t\t\tcase IN:\n\t\t\t\treturn \" search.in\";\n\t\t\tcase NIN:\n\t\t\t\treturn \" not search.in\";\n\t\t\tdefault:\n\t\t\t\tthrow new RuntimeException(\"Not supported expression type: \" + exp.type());\n\t\t}",
                "is_abstract": "",
                "class_name": "AzureAiSearchFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "doKey",
                "parameters": [
                    ""
                ],
                "return_type": "key",
                "body": "var hasOuterQuotes = hasOuterQuotes(key.key());\n\t\tvar identifier = (hasOuterQuotes) ? removeOuterQuotes(key.key()) : key.key();\n\t\tvar prefixedIdentifier = withMetaPrefix(identifier);\n\t\tif (hasOuterQuotes) {\n\t\t\tprefixedIdentifier = \"'\" + prefixedIdentifier.trim() + \"'\";\n\t\t}\n\t\tcontext.append(prefixedIdentifier);",
                "is_abstract": "",
                "class_name": "AzureAiSearchFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "withMetaPrefix",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (this.allowedIdentifierNames.contains(identifier)) {\n\t\t\treturn \"meta_\" + identifier;\n\t\t}\n\n\t\tthrow new IllegalArgumentException(\"Not allowed filter identifier name: \" + identifier);",
                "is_abstract": "",
                "class_name": "AzureAiSearchFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "doValue",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (filterValue.value() instanceof List list) {\n\t\t\tdoStartValueRange(filterValue, context);\n\t\t\tint c = 0;\n\t\t\tfor (Object v : list) {\n\t\t\t\t// this.doSingleValue(v, context);\n\t\t\t\tcontext.append(v);\n\t\t\t\tif (c++ < list.size() - 1) {\n\t\t\t\t\tthis.doAddValueRangeSpitter(filterValue, context);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.doEndValueRange(filterValue, context);\n\t\t}\n\t\telse {\n\t\t\tthis.doSingleValue(filterValue.value(), context);\n\t\t}",
                "is_abstract": "",
                "class_name": "AzureAiSearchFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "doSingleValue",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (value instanceof Date date) {\n\t\t\tcontext.append(this.dateFormat.format(date));\n\t\t}\n\t\telse if (value instanceof String text) {\n\t\t\tif (DATE_FORMAT_PATTERN.matcher(text).matches()) {\n\t\t\t\ttry {\n\t\t\t\t\tDate date = this.dateFormat.parse(text);\n\t\t\t\t\tcontext.append(this.dateFormat.format(date));\n\t\t\t\t}\n\t\t\t\tcatch (ParseException e) {\n\t\t\t\t\tthrow new IllegalArgumentException(\"Invalid date type:\" + text, e);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcontext.append(String.format(\"'%s'\", text));\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tcontext.append(value);\n\t\t}",
                "is_abstract": "",
                "class_name": "AzureAiSearchFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "doStartGroup",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "context.append(\"(\");",
                "is_abstract": "",
                "class_name": "AzureAiSearchFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "doEndGroup",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "context.append(\")\");",
                "is_abstract": "",
                "class_name": "AzureAiSearchFilterExpressionConverter",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/vector-stores/spring-ai-azure/src/main/java/org/springframework/ai/vectorstore/azure/AzureVectorStore.java",
        "class_names": [
            "AzureVectorStore"
        ],
        "imports": "import java.util.stream.Collectors;\nimport com.azure.search.documents.indexes.models.SearchFieldDataType;\nimport java.util.List;\nimport org.springframework.ai.vectorstore.SearchRequest;\nimport org.springframework.util.CollectionUtils;\nimport com.azure.search.documents.indexes.models.VectorSearchAlgorithmMetric;\nimport com.azure.search.documents.models.IndexDocumentsResult;\nimport org.springframework.ai.vectorstore.filter.FilterExpressionConverter;\nimport com.azure.search.documents.indexes.models.VectorSearch;\nimport org.springframework.util.StringUtils;\nimport com.azure.search.documents.models.IndexingResult;\nimport com.azure.core.util.Context;\nimport org.slf4j.Logger;\nimport java.util.Map;\nimport com.azure.search.documents.indexes.models.SearchField;\nimport com.azure.search.documents.indexes.SearchIndexClient;\nimport com.azure.search.documents.indexes.models.VectorSearchProfile;\nimport com.azure.search.documents.models.VectorSearchOptions;\nimport org.slf4j.LoggerFactory;\nimport com.azure.search.documents.SearchDocument;\nimport com.azure.search.documents.indexes.models.HnswAlgorithmConfiguration;\nimport com.azure.search.documents.models.SearchOptions;\nimport org.springframework.beans.factory.InitializingBean;\nimport com.alibaba.fastjson2.JSONObject;\nimport java.util.Collections;\nimport org.springframework.ai.embedding.EmbeddingClient;\nimport com.azure.search.documents.models.VectorizedQuery;\nimport java.util.ArrayList;\nimport java.util.Optional;\nimport com.alibaba.fastjson2.TypeReference;\nimport com.azure.search.documents.indexes.models.SearchIndex;\nimport org.springframework.util.Assert;\nimport org.springframework.ai.document.Document;\nimport org.springframework.ai.vectorstore.VectorStore;\nimport com.azure.search.documents.indexes.models.HnswParameters;\nimport com.azure.search.documents.SearchClient;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.azure.AzureVectorStor": "org.springframework.ai.vectorstore.azure.AzureVectorStor",
            "org.springframework.ai.vectorstore.azure.text": "org.springframework.ai.vectorstore.azure.text",
            "org.springframework.ai.vectorstore.azure.int32": "org.springframework.ai.vectorstore.azure.int32",
            "org.springframework.ai.vectorstore.azure.int64": "org.springframework.ai.vectorstore.azure.int64",
            "org.springframework.ai.vectorstore.azure.decimal": "org.springframework.ai.vectorstore.azure.decimal",
            "org.springframework.ai.vectorstore.azure.bool": "org.springframework.ai.vectorstore.azure.bool",
            "org.springframework.ai.vectorstore.azure.dat": "org.springframework.ai.vectorstore.azure.dat",
            "org.springframework.ai.vectorstore.azure.setIndexNam": "org.springframework.ai.vectorstore.azure.setIndexNam",
            "org.springframework.ai.vectorstore.azure.setDefaultTopK": "org.springframework.ai.vectorstore.azure.setDefaultTopK",
            "org.springframework.ai.vectorstore.azure.setDefaultSimilarityThreshold": "org.springframework.ai.vectorstore.azure.setDefaultSimilarityThreshold",
            "org.springframework.ai.vectorstore.azure.add": "org.springframework.ai.vectorstore.azure.add",
            "org.springframework.ai.vectorstore.azure.delet": "org.springframework.ai.vectorstore.azure.delet",
            "org.springframework.ai.vectorstore.azure.similaritySearch": "org.springframework.ai.vectorstore.azure.similaritySearch",
            "org.springframework.ai.vectorstore.azure.toFloatList": "org.springframework.ai.vectorstore.azure.toFloatList",
            "org.springframework.ai.vectorstore.azure.afterPropertiesSet": "org.springframework.ai.vectorstore.azure.afterPropertiesSet",
            "org.springframework.ai.vectorstore.azure.logger": "org.springframework.ai.vectorstore.azure.logger",
            "org.springframework.ai.vectorstore.azure.SPRING_AI_VECTOR_CONFIG": "org.springframework.ai.vectorstore.azure.SPRING_AI_VECTOR_CONFIG",
            "org.springframework.ai.vectorstore.azure.SPRING_AI_VECTOR_PROFILE": "org.springframework.ai.vectorstore.azure.SPRING_AI_VECTOR_PROFILE",
            "org.springframework.ai.vectorstore.azure.DEFAULT_INDEX_NAME": "org.springframework.ai.vectorstore.azure.DEFAULT_INDEX_NAME",
            "org.springframework.ai.vectorstore.azure.ID_FIELD_NAME": "org.springframework.ai.vectorstore.azure.ID_FIELD_NAME",
            "org.springframework.ai.vectorstore.azure.CONTENT_FIELD_NAME": "org.springframework.ai.vectorstore.azure.CONTENT_FIELD_NAME",
            "org.springframework.ai.vectorstore.azure.EMBEDDING_FIELD_NAME": "org.springframework.ai.vectorstore.azure.EMBEDDING_FIELD_NAME",
            "org.springframework.ai.vectorstore.azure.METADATA_FIELD_NAME": "org.springframework.ai.vectorstore.azure.METADATA_FIELD_NAME",
            "org.springframework.ai.vectorstore.azure.DISTANCE_METADATA_FIELD_NAME": "org.springframework.ai.vectorstore.azure.DISTANCE_METADATA_FIELD_NAME",
            "org.springframework.ai.vectorstore.azure.DEFAULT_TOP_K": "org.springframework.ai.vectorstore.azure.DEFAULT_TOP_K",
            "org.springframework.ai.vectorstore.azure.DEFAULT_SIMILARITY_THRESHOLD": "org.springframework.ai.vectorstore.azure.DEFAULT_SIMILARITY_THRESHOLD",
            "org.springframework.ai.vectorstore.azure.METADATA_FIELD_PREFIX": "org.springframework.ai.vectorstore.azure.METADATA_FIELD_PREFIX",
            "org.springframework.ai.vectorstore.azure.searchIndexClient": "org.springframework.ai.vectorstore.azure.searchIndexClient",
            "org.springframework.ai.vectorstore.azure.embeddingClient": "org.springframework.ai.vectorstore.azure.embeddingClient",
            "org.springframework.ai.vectorstore.azure.searchClient": "org.springframework.ai.vectorstore.azure.searchClient",
            "org.springframework.ai.vectorstore.azure.filterExpressionConverter": "org.springframework.ai.vectorstore.azure.filterExpressionConverter",
            "org.springframework.ai.vectorstore.azure.defaultTopK": "org.springframework.ai.vectorstore.azure.defaultTopK",
            "org.springframework.ai.vectorstore.azure.defaultSimilarityThreshold": "org.springframework.ai.vectorstore.azure.defaultSimilarityThreshold",
            "org.springframework.ai.vectorstore.azure.indexNam": "org.springframework.ai.vectorstore.azure.indexNam",
            "org.springframework.ai.vectorstore.azure.filterMetadataFields": "org.springframework.ai.vectorstore.azure.filterMetadataFields"
        },
        "package": "package org.springframework.ai.vectorstore.azure;",
        "property_declarations": [
            "private static final Logger logger = LoggerFactory.getLogger(AzureVectorStore.class);",
            "private static final String DISTANCE_METADATA_FIELD_NAME = \"distance\";",
            "private final FilterExpressionConverter filterExpressionConverter;",
            "private static final String SPRING_AI_VECTOR_CONFIG = \"spring-ai-vector-config\";",
            "private String indexName = DEFAULT_INDEX_NAME;",
            "private static final String CONTENT_FIELD_NAME = \"content\";",
            "private static final String METADATA_FIELD_NAME = \"metadata\";",
            "private SearchClient searchClient;",
            "private final EmbeddingClient embeddingClient;",
            "private final List<MetadataField> filterMetadataFields;",
            "private static final String ID_FIELD_NAME = \"id\";",
            "private int defaultTopK = DEFAULT_TOP_K;",
            "private Double defaultSimilarityThreshold = DEFAULT_SIMILARITY_THRESHOLD;",
            "private static final String SPRING_AI_VECTOR_PROFILE = \"spring-ai-vector-profile\";",
            "public static final String DEFAULT_INDEX_NAME = \"spring_ai_azure_vector_store\";",
            "private final SearchIndexClient searchIndexClient;",
            "private static final String EMBEDDING_FIELD_NAME = \"embedding\";",
            "private static final int DEFAULT_TOP_K = 4;",
            "private static final String METADATA_FIELD_PREFIX = \"meta_\";",
            "private static final Double DEFAULT_SIMILARITY_THRESHOLD = 0.0;"
        ],
        "functions": [
            {
                "name": "text",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new MetadataField(name, SearchFieldDataType.STRING);",
                "is_abstract": "",
                "class_name": "AzureVectorStore",
                "annotations": []
            },
            {
                "name": "int32",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new MetadataField(name, SearchFieldDataType.INT32);",
                "is_abstract": "",
                "class_name": "AzureVectorStore",
                "annotations": []
            },
            {
                "name": "int64",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new MetadataField(name, SearchFieldDataType.INT64);",
                "is_abstract": "",
                "class_name": "AzureVectorStore",
                "annotations": []
            },
            {
                "name": "decimal",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new MetadataField(name, SearchFieldDataType.DOUBLE);",
                "is_abstract": "",
                "class_name": "AzureVectorStore",
                "annotations": []
            },
            {
                "name": "bool",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new MetadataField(name, SearchFieldDataType.BOOLEAN);",
                "is_abstract": "",
                "class_name": "AzureVectorStore",
                "annotations": []
            },
            {
                "name": "date",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new MetadataField(name, SearchFieldDataType.DATE_TIME_OFFSET);",
                "is_abstract": "",
                "class_name": "AzureVectorStore",
                "annotations": []
            },
            {
                "name": "setIndexName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.hasText(indexName, \"The index name can not be empty.\");\n\t\tthis.indexName = indexName;",
                "is_abstract": "",
                "class_name": "AzureVectorStore",
                "annotations": []
            },
            {
                "name": "setDefaultTopK",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.isTrue(topK >= 0, \"The topK should be positive value.\");\n\t\tthis.defaultTopK = topK;",
                "is_abstract": "",
                "class_name": "AzureVectorStore",
                "annotations": []
            },
            {
                "name": "setDefaultSimilarityThreshold",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.isTrue(similarityThreshold >= 0.0 && similarityThreshold <= 1.0,\n\t\t\t\t\"The similarity threshold must be in range [0.0:1.00].\");\n\t\tthis.defaultSimilarityThreshold = similarityThreshold;",
                "is_abstract": "",
                "class_name": "AzureVectorStore",
                "annotations": []
            },
            {
                "name": "add",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(documents, \"The document list should not be null.\");\n\t\tif (CollectionUtils.isEmpty(documents)) {\n\t\t\treturn; // nothing to do;\n\t\t}\n\n\t\tfinal var searchDocuments = documents.stream().map(document -> {\n\t\t\tfinal var embeddings = this.embeddingClient.embed(document);\n\t\t\tSearchDocument searchDocument = new SearchDocument();\n\t\t\tsearchDocument.put(ID_FIELD_NAME, document.getId());\n\t\t\tsearchDocument.put(EMBEDDING_FIELD_NAME, embeddings);\n\t\t\tsearchDocument.put(CONTENT_FIELD_NAME, document.getContent());\n\t\t\tsearchDocument.put(METADATA_FIELD_NAME, new JSONObject(document.getMetadata()).toJSONString());\n\n\t\t\t// Add the filterable metadata fields as top level fields, allowing filler\n\t\t\t// expressions on them.\n\t\t\tfor (MetadataField mf : this.filterMetadataFields) {\n\t\t\t\tif (document.getMetadata().containsKey(mf.name())) {\n\t\t\t\t\tsearchDocument.put(METADATA_FIELD_PREFIX + mf.name(), document.getMetadata().get(mf.name()));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn searchDocument;\n\t\t}).toList();\n\n\t\tIndexDocumentsResult result = this.searchClient.uploadDocuments(searchDocuments);\n\n\t\tfor (IndexingResult indexingResult : result.getResults()) {\n\t\t\tAssert.isTrue(indexingResult.isSucceeded(),\n\t\t\t\t\tString.format(\"Document with key %s did not upload successfully\", indexingResult.getKey()));\n\t\t}",
                "is_abstract": "",
                "class_name": "AzureVectorStore",
                "annotations": []
            },
            {
                "name": "delete",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(documentIds, \"The document ID list should not be null.\");\n\t\tif (CollectionUtils.isEmpty(documentIds)) {\n\t\t\treturn Optional.of(true); // nothing to do;\n\t\t}\n\n\t\tfinal var searchDocumentIds = documentIds.stream().map(documentId -> {\n\t\t\tSearchDocument searchDocument = new SearchDocument();\n\t\t\tsearchDocument.put(ID_FIELD_NAME, documentId);\n\t\t\treturn searchDocument;\n\t\t}).toList();\n\n\t\tvar results = this.searchClient.deleteDocuments(searchDocumentIds);\n\n\t\tboolean resSuccess = true;\n\n\t\tfor (IndexingResult result : results.getResults()) {\n\t\t\tif (!result.isSucceeded()) {\n\t\t\t\tresSuccess = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn Optional.of(resSuccess);",
                "is_abstract": "",
                "class_name": "AzureVectorStore",
                "annotations": []
            },
            {
                "name": "similaritySearch",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.similaritySearch(SearchRequest.query(query)\n\t\t\t.withTopK(this.defaultTopK)\n\t\t\t.withSimilarityThreshold(this.defaultSimilarityThreshold));",
                "is_abstract": "",
                "class_name": "AzureVectorStore",
                "annotations": []
            },
            {
                "name": "similaritySearch",
                "parameters": [
                    ""
                ],
                "return_type": "Map",
                "body": "Assert.notNull(request, \"The search request must not be null.\");\n\n\t\tvar searchEmbedding = toFloatList(embeddingClient.embed(request.getQuery()));\n\n\t\tfinal var vectorQuery = new VectorizedQuery(searchEmbedding).setKNearestNeighborsCount(request.getTopK())\n\t\t\t// Set the fields to compare the vector against. This is a comma-delimited\n\t\t\t// list of field names.\n\t\t\t.setFields(EMBEDDING_FIELD_NAME);\n\n\t\tvar searchOptions = new SearchOptions()\n\t\t\t.setVectorSearchOptions(new VectorSearchOptions().setQueries(vectorQuery));\n\n\t\tif (request.hasFilterExpression()) {\n\t\t\tString oDataFilter = this.filterExpressionConverter.convertExpression(request.getFilterExpression());\n\t\t\tsearchOptions.setFilter(oDataFilter);\n\t\t}\n\n\t\tfinal var searchResults = searchClient.search(null, searchOptions, Context.NONE);\n\n\t\treturn searchResults.stream()\n\t\t\t.filter(result -> result.getScore() >= request.getSimilarityThreshold())\n\t\t\t.map(result -> {\n\n\t\t\t\tfinal AzureSearchDocument entry = result.getDocument(AzureSearchDocument.class);\n\n\t\t\t\tMap<String, Object> metadata = (StringUtils.hasText(entry.metadata()))\n\t\t\t\t\t\t? JSONObject.parseObject(entry.metadata(), new TypeReference<Map<String, Object>>() {\n\t\t\t\t\t\t}) : Map.of();\n\n\t\t\t\tmetadata.put(DISTANCE_METADATA_FIELD_NAME, 1 - (float) result.getScore());\n\n\t\t\t\tfinal Document doc = new Document(entry.id(), entry.content(), metadata);\n\t\t\t\tdoc.setEmbedding(entry.embedding());\n\n\t\t\t\treturn doc;\n\n\t\t\t})\n\t\t\t.collect(Collectors.toList());",
                "is_abstract": "",
                "class_name": "AzureVectorStore",
                "annotations": []
            },
            {
                "name": "toFloatList",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return doubleList.stream().map(Double::floatValue).toList();",
                "is_abstract": "",
                "class_name": "AzureVectorStore",
                "annotations": []
            },
            {
                "name": "afterPropertiesSet",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "int dimensions = this.embeddingClient.dimensions();\n\n\t\tList<SearchField> fields = new ArrayList<>();\n\n\t\tfields.add(new SearchField(ID_FIELD_NAME, SearchFieldDataType.STRING).setKey(true)\n\t\t\t.setFilterable(true)\n\t\t\t.setSortable(true));\n\t\tfields.add(new SearchField(EMBEDDING_FIELD_NAME, SearchFieldDataType.collection(SearchFieldDataType.SINGLE))\n\t\t\t.setSearchable(true)\n\t\t\t.setVectorSearchDimensions(dimensions)\n\t\t\t// This must match a vector search configuration name.\n\t\t\t.setVectorSearchProfileName(SPRING_AI_VECTOR_PROFILE));\n\t\tfields.add(new SearchField(CONTENT_FIELD_NAME, SearchFieldDataType.STRING).setSearchable(true)\n\t\t\t.setFilterable(true));\n\t\tfields.add(new SearchField(METADATA_FIELD_NAME, SearchFieldDataType.STRING).setSearchable(true)\n\t\t\t.setFilterable(true));\n\n\t\tfor (MetadataField filterableMetadataField : this.filterMetadataFields) {\n\t\t\tfields.add(new SearchField(METADATA_FIELD_PREFIX + filterableMetadataField.name(),\n\t\t\t\t\tfilterableMetadataField.fieldType())\n\t\t\t\t.setSearchable(false)\n\t\t\t\t.setFacetable(true));\n\t\t}\n\n\t\tSearchIndex searchIndex = new SearchIndex(this.indexName).setFields(fields)\n\t\t\t// VectorSearch configuration is required for a vector field. The name used\n\t\t\t// for the vector search algorithm configuration must match the configuration\n\t\t\t// used by the search field used for vector search.\n\t\t\t.setVectorSearch(new VectorSearch()\n\t\t\t\t.setProfiles(Collections\n\t\t\t\t\t.singletonList(new VectorSearchProfile(SPRING_AI_VECTOR_PROFILE, SPRING_AI_VECTOR_CONFIG)))\n\t\t\t\t.setAlgorithms(Collections.singletonList(new HnswAlgorithmConfiguration(SPRING_AI_VECTOR_CONFIG)\n\t\t\t\t\t.setParameters(new HnswParameters().setM(4)\n\t\t\t\t\t\t.setEfConstruction(400)\n\t\t\t\t\t\t.setEfSearch(1000)\n\t\t\t\t\t\t.setMetric(VectorSearchAlgorithmMetric.COSINE)))));\n\n\t\tSearchIndex index = this.searchIndexClient.createOrUpdateIndex(searchIndex);\n\n\t\tlogger.info(\"Created search index: \" + index.getName());\n\n\t\tthis.searchClient = this.searchIndexClient.getSearchClient(this.indexName);",
                "is_abstract": "",
                "class_name": "AzureVectorStore",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/vector-stores/spring-ai-redis/src/test/java/org/springframework/ai/vectorstore/RedisFilterExpressionConverterTests.java",
        "class_names": [
            "RedisFilterExpressionConverterTests"
        ],
        "imports": "import java.util.List;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.GTE;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.IN;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.AND;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.EQ;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport java.util.Arrays;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.LTE;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.NIN;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.NE;\nimport static org.springframework.ai.vectorstore.RedisVectorStore.MetadataField.numeric;\nimport static org.springframework.ai.vectorstore.RedisVectorStore.MetadataField.tag;\nimport static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.OR;\nimport org.springframework.ai.vectorstore.RedisVectorStore.MetadataField;\nimport org.springframework.ai.vectorstore.filter.Filter.Key;\nimport org.springframework.ai.vectorstore.filter.Filter.Expression;\nimport org.springframework.ai.vectorstore.filter.Filter.Group;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.vectorstore.filter.Filter.Value;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.RedisFilterExpressionConverterTests": "org.springframework.ai.vectorstore.RedisFilterExpressionConverterTests",
            "org.springframework.ai.vectorstore.converter": "org.springframework.ai.vectorstore.converter",
            "org.springframework.ai.vectorstore.testEQ": "org.springframework.ai.vectorstore.testEQ",
            "org.springframework.ai.vectorstore.tesEqAndGt": "org.springframework.ai.vectorstore.tesEqAndGt",
            "org.springframework.ai.vectorstore.tesIn": "org.springframework.ai.vectorstore.tesIn",
            "org.springframework.ai.vectorstore.testN": "org.springframework.ai.vectorstore.testN",
            "org.springframework.ai.vectorstore.testGrou": "org.springframework.ai.vectorstore.testGrou",
            "org.springframework.ai.vectorstore.tesBoolean": "org.springframework.ai.vectorstore.tesBoolean",
            "org.springframework.ai.vectorstore.testDecimal": "org.springframework.ai.vectorstore.testDecimal",
            "org.springframework.ai.vectorstore.testComplexIdentifiers": "org.springframework.ai.vectorstore.testComplexIdentifiers"
        },
        "package": "package org.springframework.ai.vectorstore;",
        "property_declarations": [],
        "functions": [
            {
                "name": "converter",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new RedisFilterExpressionConverter(Arrays.asList(fields));",
                "is_abstract": "",
                "class_name": "RedisFilterExpressionConverterTests",
                "annotations": []
            },
            {
                "name": "testEQ",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// country == \"BG\"\n\t\tString vectorExpr = converter(tag(\"country\"))\n\t\t\t.convertExpression(new Expression(EQ, new Key(\"country\"), new Value(\"BG\")));\n\t\tassertThat(vectorExpr).isEqualTo(\"@country:{BG}\");",
                "is_abstract": "",
                "class_name": "RedisFilterExpressionConverterTests",
                "annotations": []
            },
            {
                "name": "tesEqAndGte",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// genre == \"drama\" AND year >= 2020\n\t\tString vectorExpr = converter(tag(\"genre\"), numeric(\"year\"))\n\t\t\t.convertExpression(new Expression(AND, new Expression(EQ, new Key(\"genre\"), new Value(\"drama\")),\n\t\t\t\t\tnew Expression(GTE, new Key(\"year\"), new Value(2020))));\n\t\tassertThat(vectorExpr).isEqualTo(\"@genre:{drama} @year:[2020 inf]\");",
                "is_abstract": "",
                "class_name": "RedisFilterExpressionConverterTests",
                "annotations": []
            },
            {
                "name": "tesIn",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// genre in [\"comedy\", \"documentary\", \"drama\"]\n\t\tString vectorExpr = converter(tag(\"genre\")).convertExpression(\n\t\t\t\tnew Expression(IN, new Key(\"genre\"), new Value(List.of(\"comedy\", \"documentary\", \"drama\"))));\n\t\tassertThat(vectorExpr).isEqualTo(\"@genre:{comedy | documentary | drama}\");",
                "is_abstract": "",
                "class_name": "RedisFilterExpressionConverterTests",
                "annotations": []
            },
            {
                "name": "testNe",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// year >= 2020 OR country == \"BG\" AND city != \"Sofia\"\n\t\tString vectorExpr = converter(numeric(\"year\"), tag(\"country\"), tag(\"city\"))\n\t\t\t.convertExpression(new Expression(OR, new Expression(GTE, new Key(\"year\"), new Value(2020)),\n\t\t\t\t\tnew Group(new Expression(AND, new Expression(EQ, new Key(\"country\"), new Value(\"BG\")),\n\t\t\t\t\t\t\tnew Expression(NE, new Key(\"city\"), new Value(\"Sofia\"))))));\n\t\tassertThat(vectorExpr).isEqualTo(\"@year:[2020 inf] | (@country:{BG} -@city:{Sofia})\");",
                "is_abstract": "",
                "class_name": "RedisFilterExpressionConverterTests",
                "annotations": []
            },
            {
                "name": "testGroup",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// (year >= 2020 OR country == \"BG\") AND city NIN [\"Sofia\", \"Plovdiv\"]\n\t\tString vectorExpr = converter(numeric(\"year\"), tag(\"country\"), tag(\"city\"))\n\t\t\t.convertExpression(new Expression(AND,\n\t\t\t\t\tnew Group(new Expression(OR, new Expression(GTE, new Key(\"year\"), new Value(2020)),\n\t\t\t\t\t\t\tnew Expression(EQ, new Key(\"country\"), new Value(\"BG\")))),\n\t\t\t\t\tnew Expression(NIN, new Key(\"city\"), new Value(List.of(\"Sofia\", \"Plovdiv\")))));\n\t\tassertThat(vectorExpr).isEqualTo(\"(@year:[2020 inf] | @country:{BG}) -@city:{Sofia | Plovdiv}\");",
                "is_abstract": "",
                "class_name": "RedisFilterExpressionConverterTests",
                "annotations": []
            },
            {
                "name": "tesBoolean",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// isOpen == true AND year >= 2020 AND country IN [\"BG\", \"NL\", \"US\"]\n\t\tString vectorExpr = converter(numeric(\"year\"), tag(\"country\"), tag(\"isOpen\"))\n\t\t\t.convertExpression(new Expression(AND,\n\t\t\t\t\tnew Expression(AND, new Expression(EQ, new Key(\"isOpen\"), new Value(true)),\n\t\t\t\t\t\t\tnew Expression(GTE, new Key(\"year\"), new Value(2020))),\n\t\t\t\t\tnew Expression(IN, new Key(\"country\"), new Value(List.of(\"BG\", \"NL\", \"US\")))));\n\n\t\tassertThat(vectorExpr).isEqualTo(\"@isOpen:{true} @year:[2020 inf] @country:{BG | NL | US}\");",
                "is_abstract": "",
                "class_name": "RedisFilterExpressionConverterTests",
                "annotations": []
            },
            {
                "name": "testDecimal",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// temperature >= -15.6 && temperature <= +20.13\n\t\tString vectorExpr = converter(numeric(\"temperature\"))\n\t\t\t.convertExpression(new Expression(AND, new Expression(GTE, new Key(\"temperature\"), new Value(-15.6)),\n\t\t\t\t\tnew Expression(LTE, new Key(\"temperature\"), new Value(20.13))));\n\n\t\tassertThat(vectorExpr).isEqualTo(\"@temperature:[-15.6 inf] @temperature:[-inf 20.13]\");",
                "is_abstract": "",
                "class_name": "RedisFilterExpressionConverterTests",
                "annotations": []
            },
            {
                "name": "testComplexIdentifiers",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String vectorExpr = converter(tag(\"country 1 2 3\"))\n\t\t\t.convertExpression(new Expression(EQ, new Key(\"\\\"country 1 2 3\\\"\"), new Value(\"BG\")));\n\t\tassertThat(vectorExpr).isEqualTo(\"@\\\"country 1 2 3\\\":{BG}\");\n\n\t\tvectorExpr = converter(tag(\"country 1 2 3\"))\n\t\t\t.convertExpression(new Expression(EQ, new Key(\"'country 1 2 3'\"), new Value(\"BG\")));\n\t\tassertThat(vectorExpr).isEqualTo(\"@'country 1 2 3':{BG}\");",
                "is_abstract": "",
                "class_name": "RedisFilterExpressionConverterTests",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/vector-stores/spring-ai-redis/src/test/java/org/springframework/ai/vectorstore/RedisVectorStoreIT.java",
        "class_names": [
            "TestApplication",
            "RedisVectorStoreIT"
        ],
        "imports": "import java.util.List;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport java.io.IOException;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport java.util.Map;\nimport java.nio.charset.StandardCharsets;\nimport org.springframework.ai.vectorstore.RedisVectorStore.RedisVectorStoreConfig;\nimport org.springframework.ai.transformers.TransformersEmbeddingClient;\nimport org.springframework.context.annotation.Bean;\nimport java.util.Collections;\nimport org.springframework.core.io.DefaultResourceLoader;\nimport org.springframework.ai.embedding.EmbeddingClient;\nimport org.springframework.boot.SpringBootConfiguration;\nimport org.testcontainers.junit.jupiter.Testcontainers;\nimport org.junit.jupiter.api.BeforeEach;\nimport com.redis.testcontainers.RedisStackContainer;\nimport org.springframework.ai.vectorstore.RedisVectorStore.MetadataField;\nimport org.springframework.ai.document.Document;\nimport org.junit.jupiter.api.Test;\nimport org.testcontainers.junit.jupiter.Container;\nimport java.util.UUID;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.RedisVectorStoreIT": "org.springframework.ai.vectorstore.RedisVectorStoreIT",
            "org.springframework.ai.vectorstore.TestApplication": "org.springframework.ai.vectorstore.TestApplication",
            "org.springframework.ai.vectorstore.getText": "org.springframework.ai.vectorstore.getText",
            "org.springframework.ai.vectorstore.cleanDatabas": "org.springframework.ai.vectorstore.cleanDatabas",
            "org.springframework.ai.vectorstore.ensureIndexGetsCreated": "org.springframework.ai.vectorstore.ensureIndexGetsCreated",
            "org.springframework.ai.vectorstore.addAndSearch": "org.springframework.ai.vectorstore.addAndSearch",
            "org.springframework.ai.vectorstore.searchWithFilters": "org.springframework.ai.vectorstore.searchWithFilters",
            "org.springframework.ai.vectorstore.documentUpdat": "org.springframework.ai.vectorstore.documentUpdat",
            "org.springframework.ai.vectorstore.searchWithThreshold": "org.springframework.ai.vectorstore.searchWithThreshold",
            "org.springframework.ai.vectorstore.vectorStor": "org.springframework.ai.vectorstore.vectorStor",
            "org.springframework.ai.vectorstore.embeddingClient": "org.springframework.ai.vectorstore.embeddingClient",
            "org.springframework.ai.vectorstore.stati": "org.springframework.ai.vectorstore.stati",
            "org.springframework.ai.vectorstore.contextRunner": "org.springframework.ai.vectorstore.contextRunner",
            "org.springframework.ai.vectorstore.documents": "org.springframework.ai.vectorstore.documents"
        },
        "package": "package org.springframework.ai.vectorstore;",
        "property_declarations": [
            "private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t.withUserConfiguration(TestApplication.class);",
            "List<Document> documents = List.of(\n\t\t\tnew Document(\"1\", getText(\"classpath:/test/data/spring.ai.txt\"), Map.of(\"meta1\", \"meta1\")),\n\t\t\tnew Document(\"2\", getText(\"classpath:/test/data/time.shelter.txt\"), Map.of()),\n\t\t\tnew Document(\"3\", getText(\"classpath:/test/data/great.depression.txt\"), Map.of(\"meta2\", \"meta2\")));",
            "@Container\n\tstatic RedisStackContainer redisContainer = new RedisStackContainer(\n\t\t\tRedisStackContainer.DEFAULT_IMAGE_NAME.withTag(RedisStackContainer.DEFAULT_TAG));"
        ],
        "functions": [
            {
                "name": "getText",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var resource = new DefaultResourceLoader().getResource(uri);\n\t\ttry {\n\t\t\treturn resource.getContentAsString(StandardCharsets.UTF_8);\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}",
                "is_abstract": "",
                "class_name": "RedisVectorStoreIT",
                "annotations": []
            },
            {
                "name": "cleanDatabase",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.contextRunner.run(context -> context.getBean(RedisVectorStore.class).getJedis().flushAll());",
                "is_abstract": "",
                "class_name": "RedisVectorStoreIT",
                "annotations": []
            },
            {
                "name": "ensureIndexGetsCreated",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.contextRunner.run(context -> {\n\t\t\tassertThat(context.getBean(RedisVectorStore.class)\n\t\t\t\t.getJedis()\n\t\t\t\t.ftList()\n\t\t\t\t.contains(RedisVectorStore.DEFAULT_INDEX_NAME));\n\t\t});",
                "is_abstract": "",
                "class_name": "RedisVectorStoreIT",
                "annotations": []
            },
            {
                "name": "addAndSearch",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\n\t\t\tVectorStore vectorStore = context.getBean(VectorStore.class);\n\n\t\t\tvectorStore.add(documents);\n\n\t\t\tList<Document> results = vectorStore.similaritySearch(SearchRequest.query(\"Spring\").withTopK(1));\n\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tDocument resultDoc = results.get(0);\n\t\t\tassertThat(resultDoc.getId()).isEqualTo(documents.get(0).getId());\n\t\t\tassertThat(resultDoc.getContent()).contains(\n\t\t\t\t\t\"Spring AI provides abstractions that serve as the foundation for developing AI applications.\");\n\t\t\tassertThat(resultDoc.getMetadata()).hasSize(2);\n\t\t\tassertThat(resultDoc.getMetadata()).containsKeys(\"meta1\", RedisVectorStore.DISTANCE_FIELD_NAME);\n\n\t\t\t// Remove all documents from the store\n\t\t\tvectorStore.delete(documents.stream().map(doc -> doc.getId()).toList());\n\n\t\t\tresults = vectorStore.similaritySearch(SearchRequest.query(\"Spring\").withTopK(1));\n\t\t\tassertThat(results).isEmpty();\n\t\t});",
                "is_abstract": "",
                "class_name": "RedisVectorStoreIT",
                "annotations": []
            },
            {
                "name": "searchWithFilters",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\t\t\tVectorStore vectorStore = context.getBean(VectorStore.class);\n\n\t\t\tvar bgDocument = new Document(\"The World is Big and Salvation Lurks Around the Corner\",\n\t\t\t\t\tMap.of(\"country\", \"BG\", \"year\", 2020));\n\t\t\tvar nlDocument = new Document(\"The World is Big and Salvation Lurks Around the Corner\",\n\t\t\t\t\tMap.of(\"country\", \"NL\"));\n\t\t\tvar bgDocument2 = new Document(\"The World is Big and Salvation Lurks Around the Corner\",\n\t\t\t\t\tMap.of(\"country\", \"BG\", \"year\", 2023));\n\n\t\t\tvectorStore.add(List.of(bgDocument, nlDocument, bgDocument2));\n\n\t\t\tList<Document> results = vectorStore.similaritySearch(SearchRequest.query(\"The World\").withTopK(5));\n\t\t\tassertThat(results).hasSize(3);\n\n\t\t\tresults = vectorStore.similaritySearch(SearchRequest.query(\"The World\")\n\t\t\t\t.withTopK(5)\n\t\t\t\t.withSimilarityThresholdAll()\n\t\t\t\t.withFilterExpression(\"country == 'NL'\"));\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tassertThat(results.get(0).getId()).isEqualTo(nlDocument.getId());\n\n\t\t\tresults = vectorStore.similaritySearch(SearchRequest.query(\"The World\")\n\t\t\t\t.withTopK(5)\n\t\t\t\t.withSimilarityThresholdAll()\n\t\t\t\t.withFilterExpression(\"country == 'BG'\"));\n\n\t\t\tassertThat(results).hasSize(2);\n\t\t\tassertThat(results.get(0).getId()).isIn(bgDocument.getId(), bgDocument2.getId());\n\t\t\tassertThat(results.get(1).getId()).isIn(bgDocument.getId(), bgDocument2.getId());\n\n\t\t\tresults = vectorStore.similaritySearch(SearchRequest.query(\"The World\")\n\t\t\t\t.withTopK(5)\n\t\t\t\t.withSimilarityThresholdAll()\n\t\t\t\t.withFilterExpression(\"country == 'BG' && year == 2020\"));\n\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tassertThat(results.get(0).getId()).isEqualTo(bgDocument.getId());\n\n\t\t\tresults = vectorStore.similaritySearch(SearchRequest.query(\"The World\")\n\t\t\t\t.withTopK(5)\n\t\t\t\t.withSimilarityThresholdAll()\n\t\t\t\t.withFilterExpression(\"NOT(country == 'BG' && year == 2020)\"));\n\n\t\t\tassertThat(results).hasSize(2);\n\t\t\tassertThat(results.get(0).getId()).isIn(nlDocument.getId(), bgDocument2.getId());\n\t\t\tassertThat(results.get(1).getId()).isIn(nlDocument.getId(), bgDocument2.getId());\n\n\t\t});",
                "is_abstract": "",
                "class_name": "RedisVectorStoreIT",
                "annotations": []
            },
            {
                "name": "documentUpdate",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\n\t\t\tVectorStore vectorStore = context.getBean(VectorStore.class);\n\n\t\t\tDocument document = new Document(UUID.randomUUID().toString(), \"Spring AI rocks!!\",\n\t\t\t\t\tCollections.singletonMap(\"meta1\", \"meta1\"));\n\n\t\t\tvectorStore.add(List.of(document));\n\n\t\t\tList<Document> results = vectorStore.similaritySearch(SearchRequest.query(\"Spring\").withTopK(5));\n\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tDocument resultDoc = results.get(0);\n\t\t\tassertThat(resultDoc.getId()).isEqualTo(document.getId());\n\t\t\tassertThat(resultDoc.getContent()).isEqualTo(\"Spring AI rocks!!\");\n\t\t\tassertThat(resultDoc.getMetadata()).containsKey(\"meta1\");\n\t\t\tassertThat(resultDoc.getMetadata()).containsKey(RedisVectorStore.DISTANCE_FIELD_NAME);\n\n\t\t\tDocument sameIdDocument = new Document(document.getId(),\n\t\t\t\t\t\"The World is Big and Salvation Lurks Around the Corner\",\n\t\t\t\t\tCollections.singletonMap(\"meta2\", \"meta2\"));\n\n\t\t\tvectorStore.add(List.of(sameIdDocument));\n\n\t\t\tresults = vectorStore.similaritySearch(SearchRequest.query(\"FooBar\").withTopK(5));\n\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tresultDoc = results.get(0);\n\t\t\tassertThat(resultDoc.getId()).isEqualTo(document.getId());\n\t\t\tassertThat(resultDoc.getContent()).isEqualTo(\"The World is Big and Salvation Lurks Around the Corner\");\n\t\t\tassertThat(resultDoc.getMetadata()).containsKey(\"meta2\");\n\t\t\tassertThat(resultDoc.getMetadata()).containsKey(RedisVectorStore.DISTANCE_FIELD_NAME);\n\n\t\t\tvectorStore.delete(List.of(document.getId()));\n\n\t\t});",
                "is_abstract": "",
                "class_name": "RedisVectorStoreIT",
                "annotations": []
            },
            {
                "name": "searchWithThreshold",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\n\t\t\tVectorStore vectorStore = context.getBean(VectorStore.class);\n\n\t\t\tvectorStore.add(documents);\n\n\t\t\tList<Document> fullResult = vectorStore\n\t\t\t\t.similaritySearch(SearchRequest.query(\"Spring\").withTopK(5).withSimilarityThresholdAll());\n\n\t\t\tList<Float> distances = fullResult.stream()\n\t\t\t\t.map(doc -> (Float) doc.getMetadata().get(RedisVectorStore.DISTANCE_FIELD_NAME))\n\t\t\t\t.toList();\n\n\t\t\tassertThat(distances).hasSize(3);\n\n\t\t\tfloat threshold = (distances.get(0) + distances.get(1)) / 2;\n\n\t\t\tList<Document> results = vectorStore\n\t\t\t\t.similaritySearch(SearchRequest.query(\"Spring\").withTopK(5).withSimilarityThreshold(1 - threshold));\n\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tDocument resultDoc = results.get(0);\n\t\t\tassertThat(resultDoc.getId()).isEqualTo(documents.get(0).getId());\n\t\t\tassertThat(resultDoc.getContent()).contains(\n\t\t\t\t\t\"Spring AI provides abstractions that serve as the foundation for developing AI applications.\");\n\t\t\tassertThat(resultDoc.getMetadata()).containsKeys(\"meta1\", RedisVectorStore.DISTANCE_FIELD_NAME);\n\n\t\t});",
                "is_abstract": "",
                "class_name": "RedisVectorStoreIT",
                "annotations": [
                    "@EnableAutoConfiguration(exclude = { DataSourceAutoConfiguration.class })"
                ]
            },
            {
                "name": "vectorStore",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new RedisVectorStore(RedisVectorStoreConfig.builder()\n\t\t\t\t.withURI(redisContainer.getRedisURI())\n\t\t\t\t.withMetadataFields(MetadataField.tag(\"meta1\"), MetadataField.tag(\"meta2\"),\n\t\t\t\t\t\tMetadataField.tag(\"country\"), MetadataField.numeric(\"year\"))\n\t\t\t\t.build(), embeddingClient);",
                "is_abstract": "",
                "class_name": "RedisVectorStoreIT TestApplication",
                "annotations": []
            },
            {
                "name": "embeddingClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new TransformersEmbeddingClient();",
                "is_abstract": "",
                "class_name": "RedisVectorStoreIT TestApplication",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/vector-stores/spring-ai-redis/src/main/java/org/springframework/ai/vectorstore/RedisVectorStore.java",
        "class_names": [
            "RedisVectorStoreConfig",
            "RedisVectorStore",
            "Builder"
        ],
        "imports": "import java.util.stream.Collectors;\nimport java.util.List;\nimport redis.clients.jedis.search.FTCreateParams;\nimport org.springframework.util.CollectionUtils;\nimport org.springframework.ai.vectorstore.filter.FilterExpressionConverter;\nimport java.util.function.Predicate;\nimport redis.clients.jedis.search.Query;\nimport redis.clients.jedis.search.schemafields.VectorField.VectorAlgorithm;\nimport redis.clients.jedis.search.IndexDataType;\nimport redis.clients.jedis.search.RediSearchUtil;\nimport org.slf4j.Logger;\nimport java.util.Map;\nimport java.util.function.Function;\nimport redis.clients.jedis.JedisPooled;\nimport java.util.Arrays;\nimport redis.clients.jedis.search.Schema.FieldType;\nimport redis.clients.jedis.search.SearchResult;\nimport redis.clients.jedis.search.schemafields.TextField;\nimport redis.clients.jedis.search.schemafields.VectorField;\nimport org.slf4j.LoggerFactory;\nimport java.util.HashMap;\nimport redis.clients.jedis.json.Path2;\nimport redis.clients.jedis.search.schemafields.SchemaField;\nimport org.springframework.beans.factory.InitializingBean;\nimport org.springframework.ai.embedding.EmbeddingClient;\nimport redis.clients.jedis.Pipeline;\nimport redis.clients.jedis.search.schemafields.NumericField;\nimport java.util.ArrayList;\nimport org.springframework.util.Assert;\nimport org.springframework.ai.document.Document;\nimport redis.clients.jedis.search.schemafields.TagField;\nimport java.util.Optional;\nimport java.text.MessageFormat;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.RedisVectorStor": "org.springframework.ai.vectorstore.RedisVectorStor",
            "org.springframework.ai.vectorstore.RedisVectorStoreConfi": "org.springframework.ai.vectorstore.RedisVectorStoreConfi",
            "org.springframework.ai.vectorstore.Builder": "org.springframework.ai.vectorstore.Builder",
            "org.springframework.ai.vectorstore.text": "org.springframework.ai.vectorstore.text",
            "org.springframework.ai.vectorstore.numeri": "org.springframework.ai.vectorstore.numeri",
            "org.springframework.ai.vectorstore.t": "org.springframework.ai.vectorstore.t",
            "org.springframework.ai.vectorstore.builder": "org.springframework.ai.vectorstore.builder",
            "org.springframework.ai.vectorstore.defaultConfi": "org.springframework.ai.vectorstore.defaultConfi",
            "org.springframework.ai.vectorstore.withURI": "org.springframework.ai.vectorstore.withURI",
            "org.springframework.ai.vectorstore.withIndexNam": "org.springframework.ai.vectorstore.withIndexNam",
            "org.springframework.ai.vectorstore.withPrefix": "org.springframework.ai.vectorstore.withPrefix",
            "org.springframework.ai.vectorstore.withContentFieldNam": "org.springframework.ai.vectorstore.withContentFieldNam",
            "org.springframework.ai.vectorstore.withEmbeddingFieldNam": "org.springframework.ai.vectorstore.withEmbeddingFieldNam",
            "org.springframework.ai.vectorstore.withVectorAlgorithm": "org.springframework.ai.vectorstore.withVectorAlgorithm",
            "org.springframework.ai.vectorstore.withMetadataFields": "org.springframework.ai.vectorstore.withMetadataFields",
            "org.springframework.ai.vectorstore.build": "org.springframework.ai.vectorstore.build",
            "org.springframework.ai.vectorstore.getJedis": "org.springframework.ai.vectorstore.getJedis",
            "org.springframework.ai.vectorstore.add": "org.springframework.ai.vectorstore.add",
            "org.springframework.ai.vectorstore.key": "org.springframework.ai.vectorstore.key",
            "org.springframework.ai.vectorstore.delet": "org.springframework.ai.vectorstore.delet",
            "org.springframework.ai.vectorstore.similaritySearch": "org.springframework.ai.vectorstore.similaritySearch",
            "org.springframework.ai.vectorstore.toDocument": "org.springframework.ai.vectorstore.toDocument",
            "org.springframework.ai.vectorstore.similarityScor": "org.springframework.ai.vectorstore.similarityScor",
            "org.springframework.ai.vectorstore.nativeExpressionFilter": "org.springframework.ai.vectorstore.nativeExpressionFilter",
            "org.springframework.ai.vectorstore.afterPropertiesSet": "org.springframework.ai.vectorstore.afterPropertiesSet",
            "org.springframework.ai.vectorstore.schemaFields": "org.springframework.ai.vectorstore.schemaFields",
            "org.springframework.ai.vectorstore.schemaField": "org.springframework.ai.vectorstore.schemaField",
            "org.springframework.ai.vectorstore.vectorAlgorithm": "org.springframework.ai.vectorstore.vectorAlgorithm",
            "org.springframework.ai.vectorstore.jsonPath": "org.springframework.ai.vectorstore.jsonPath",
            "org.springframework.ai.vectorstore.toFloatArray": "org.springframework.ai.vectorstore.toFloatArray",
            "org.springframework.ai.vectorstore.uri": "org.springframework.ai.vectorstore.uri",
            "org.springframework.ai.vectorstore.indexNam": "org.springframework.ai.vectorstore.indexNam",
            "org.springframework.ai.vectorstore.prefix": "org.springframework.ai.vectorstore.prefix",
            "org.springframework.ai.vectorstore.contentFieldNam": "org.springframework.ai.vectorstore.contentFieldNam",
            "org.springframework.ai.vectorstore.embeddingFieldNam": "org.springframework.ai.vectorstore.embeddingFieldNam",
            "org.springframework.ai.vectorstore.metadataFields": "org.springframework.ai.vectorstore.metadataFields",
            "org.springframework.ai.vectorstore.DEFAULT_URI": "org.springframework.ai.vectorstore.DEFAULT_URI",
            "org.springframework.ai.vectorstore.DEFAULT_INDEX_NAME": "org.springframework.ai.vectorstore.DEFAULT_INDEX_NAME",
            "org.springframework.ai.vectorstore.DEFAULT_CONTENT_FIELD_NAME": "org.springframework.ai.vectorstore.DEFAULT_CONTENT_FIELD_NAME",
            "org.springframework.ai.vectorstore.DEFAULT_EMBEDDING_FIELD_NAME": "org.springframework.ai.vectorstore.DEFAULT_EMBEDDING_FIELD_NAME",
            "org.springframework.ai.vectorstore.DEFAULT_PREFIX": "org.springframework.ai.vectorstore.DEFAULT_PREFIX",
            "org.springframework.ai.vectorstore.DEFAULT_VECTOR_ALGORITHM": "org.springframework.ai.vectorstore.DEFAULT_VECTOR_ALGORITHM",
            "org.springframework.ai.vectorstore.QUERY_FORMAT": "org.springframework.ai.vectorstore.QUERY_FORMAT",
            "org.springframework.ai.vectorstore.JSON_SET_PATH": "org.springframework.ai.vectorstore.JSON_SET_PATH",
            "org.springframework.ai.vectorstore.JSON_PATH_PREFIX": "org.springframework.ai.vectorstore.JSON_PATH_PREFIX",
            "org.springframework.ai.vectorstore.logger": "org.springframework.ai.vectorstore.logger",
            "org.springframework.ai.vectorstore.RESPONSE_OK": "org.springframework.ai.vectorstore.RESPONSE_OK",
            "org.springframework.ai.vectorstore.RESPONSE_DEL_OK": "org.springframework.ai.vectorstore.RESPONSE_DEL_OK",
            "org.springframework.ai.vectorstore.VECTOR_TYPE_FLOAT32": "org.springframework.ai.vectorstore.VECTOR_TYPE_FLOAT32",
            "org.springframework.ai.vectorstore.EMBEDDING_PARAM_NAME": "org.springframework.ai.vectorstore.EMBEDDING_PARAM_NAME",
            "org.springframework.ai.vectorstore.DISTANCE_FIELD_NAME": "org.springframework.ai.vectorstore.DISTANCE_FIELD_NAME",
            "org.springframework.ai.vectorstore.DEFAULT_DISTANCE_METRIC": "org.springframework.ai.vectorstore.DEFAULT_DISTANCE_METRIC",
            "org.springframework.ai.vectorstore.jedis": "org.springframework.ai.vectorstore.jedis",
            "org.springframework.ai.vectorstore.embeddingClient": "org.springframework.ai.vectorstore.embeddingClient",
            "org.springframework.ai.vectorstore.confi": "org.springframework.ai.vectorstore.confi",
            "org.springframework.ai.vectorstore.filterExpressionConverter": "org.springframework.ai.vectorstore.filterExpressionConverter"
        },
        "package": "package org.springframework.ai.vectorstore;",
        "property_declarations": [
            "private FilterExpressionConverter filterExpressionConverter;",
            "public static final String DEFAULT_INDEX_NAME = \"spring-ai-index\";",
            "private final List<MetadataField> metadataFields;",
            "public static final String DISTANCE_FIELD_NAME = \"vector_score\";",
            "private final String contentFieldName;",
            "private String indexName = DEFAULT_INDEX_NAME;",
            "private static final String VECTOR_TYPE_FLOAT32 = \"FLOAT32\";",
            "private List<MetadataField> metadataFields = new ArrayList<>();",
            "private String embeddingFieldName = DEFAULT_EMBEDDING_FIELD_NAME;",
            "private final String uri;",
            "public static final Algorithm DEFAULT_VECTOR_ALGORITHM = Algorithm.HSNW;",
            "private static final Predicate<Object> RESPONSE_DEL_OK = Predicate.isEqual(1l);",
            "private static final String JSON_PATH_PREFIX = \"$.\";",
            "private final String prefix;",
            "private final String embeddingFieldName;",
            "public static final String DEFAULT_PREFIX = \"embedding:\";",
            "private static final Logger logger = LoggerFactory.getLogger(RedisVectorStore.class);",
            "private static final String QUERY_FORMAT = \"%s=>[KNN %s @%s $%s AS %s]\";",
            "private final String indexName;",
            "private final JedisPooled jedis;",
            "public static final String DEFAULT_CONTENT_FIELD_NAME = \"content\";",
            "private final EmbeddingClient embeddingClient;",
            "public static final String DEFAULT_URI = \"redis://localhost:6379\";",
            "private String contentFieldName = DEFAULT_CONTENT_FIELD_NAME;",
            "private static final String DEFAULT_DISTANCE_METRIC = \"COSINE\";",
            "private static final Path2 JSON_SET_PATH = Path2.of(\"$\");",
            "private String prefix = DEFAULT_PREFIX;",
            "public static final String DEFAULT_EMBEDDING_FIELD_NAME = \"embedding\";",
            "private static final Predicate<Object> RESPONSE_OK = Predicate.isEqual(\"OK\");",
            "private final Algorithm vectorAlgorithm;",
            "private String uri = DEFAULT_URI;",
            "private Algorithm vectorAlgorithm = DEFAULT_VECTOR_ALGORITHM;",
            "private static final String EMBEDDING_PARAM_NAME = \"BLOB\";",
            "private final RedisVectorStoreConfig config;"
        ],
        "functions": [
            {
                "name": "text",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new MetadataField(name, FieldType.TEXT);",
                "is_abstract": "",
                "class_name": "RedisVectorStore",
                "annotations": []
            },
            {
                "name": "numeric",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new MetadataField(name, FieldType.NUMERIC);",
                "is_abstract": "",
                "class_name": "RedisVectorStore",
                "annotations": []
            },
            {
                "name": "tag",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new MetadataField(name, FieldType.TAG);",
                "is_abstract": "",
                "class_name": "RedisVectorStore",
                "annotations": []
            },
            {
                "name": "builder",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Builder();",
                "is_abstract": "",
                "class_name": "RedisVectorStore RedisVectorStoreConfig",
                "annotations": []
            },
            {
                "name": "defaultConfig",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return builder().build();",
                "is_abstract": "",
                "class_name": "RedisVectorStore RedisVectorStoreConfig",
                "annotations": []
            },
            {
                "name": "withURI",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.uri = uri;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "RedisVectorStore RedisVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "withIndexName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.indexName = name;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "RedisVectorStore RedisVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "withPrefix",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.prefix = prefix;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "RedisVectorStore RedisVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "withContentFieldName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.contentFieldName = name;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "RedisVectorStore RedisVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "withEmbeddingFieldName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.embeddingFieldName = name;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "RedisVectorStore RedisVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "withVectorAlgorithm",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.vectorAlgorithm = algorithm;\n\t\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "RedisVectorStore RedisVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "withMetadataFields",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return withMetadataFields(Arrays.asList(fields));",
                "is_abstract": "",
                "class_name": "RedisVectorStore RedisVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "build",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new RedisVectorStoreConfig(this);",
                "is_abstract": "",
                "class_name": "RedisVectorStore RedisVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "getJedis",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.jedis;",
                "is_abstract": "",
                "class_name": "RedisVectorStore RedisVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "add",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "try (Pipeline pipeline = this.jedis.pipelined()) {\n\t\t\tfor (Document document : documents) {\n\t\t\t\tvar embedding = this.embeddingClient.embed(document);\n\t\t\t\tdocument.setEmbedding(embedding);\n\n\t\t\t\tvar fields = new HashMap<String, Object>();\n\t\t\t\tfields.put(this.config.embeddingFieldName, embedding);\n\t\t\t\tfields.put(this.config.contentFieldName, document.getContent());\n\t\t\t\tfields.putAll(document.getMetadata());\n\t\t\t\tpipeline.jsonSetWithEscape(key(document.getId()), JSON_SET_PATH, fields);\n\t\t\t}\n\t\t\tList<Object> responses = pipeline.syncAndReturnAll();\n\t\t\tOptional<Object> errResponse = responses.stream().filter(Predicate.not(RESPONSE_OK)).findAny();\n\t\t\tif (errResponse.isPresent()) {\n\t\t\t\tString message = MessageFormat.format(\"Could not add document: {0}\", errResponse.get());\n\t\t\t\tif (logger.isErrorEnabled()) {\n\t\t\t\t\tlogger.error(message);\n\t\t\t\t}\n\t\t\t\tthrow new RuntimeException(message);\n\t\t\t}\n\t\t}",
                "is_abstract": "",
                "class_name": "RedisVectorStore RedisVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "key",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.config.prefix + id;",
                "is_abstract": "",
                "class_name": "RedisVectorStore RedisVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "delete",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "try (Pipeline pipeline = this.jedis.pipelined()) {\n\t\t\tfor (String id : idList) {\n\t\t\t\tpipeline.jsonDel(key(id));\n\t\t\t}\n\t\t\tList<Object> responses = pipeline.syncAndReturnAll();\n\t\t\tOptional<Object> errResponse = responses.stream().filter(Predicate.not(RESPONSE_DEL_OK)).findAny();\n\t\t\tif (errResponse.isPresent()) {\n\t\t\t\tif (logger.isErrorEnabled()) {\n\t\t\t\t\tlogger.error(\"Could not delete document: {}\", errResponse.get());\n\t\t\t\t}\n\t\t\t\treturn Optional.of(false);\n\t\t\t}\n\t\t\treturn Optional.of(true);\n\t\t}",
                "is_abstract": "",
                "class_name": "RedisVectorStore RedisVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "similaritySearch",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.isTrue(request.getTopK() > 0, \"The number of documents to returned must be greater than zero\");\n\t\tAssert.isTrue(request.getSimilarityThreshold() >= 0 && request.getSimilarityThreshold() <= 1,\n\t\t\t\t\"The similarity score is bounded between 0 and 1; least to most similar respectively.\");\n\n\t\tString filter = nativeExpressionFilter(request);\n\n\t\tString queryString = String.format(QUERY_FORMAT, filter, request.getTopK(), this.config.embeddingFieldName,\n\t\t\t\tEMBEDDING_PARAM_NAME, DISTANCE_FIELD_NAME);\n\n\t\tList<String> returnFields = new ArrayList<>();\n\t\tthis.config.metadataFields.stream().map(MetadataField::name).forEach(returnFields::add);\n\t\treturnFields.add(this.config.embeddingFieldName);\n\t\treturnFields.add(this.config.contentFieldName);\n\t\treturnFields.add(DISTANCE_FIELD_NAME);\n\t\tvar embedding = toFloatArray(this.embeddingClient.embed(request.getQuery()));\n\t\tQuery query = new Query(queryString).addParam(EMBEDDING_PARAM_NAME, RediSearchUtil.toByteArray(embedding))\n\t\t\t.returnFields(returnFields.toArray(new String[0]))\n\t\t\t.setSortBy(DISTANCE_FIELD_NAME, true)\n\t\t\t.dialect(2);\n\n\t\tSearchResult result = this.jedis.ftSearch(this.config.indexName, query);\n\t\treturn result.getDocuments()\n\t\t\t.stream()\n\t\t\t.filter(d -> similarityScore(d) >= request.getSimilarityThreshold())\n\t\t\t.map(this::toDocument)\n\t\t\t.toList();",
                "is_abstract": "",
                "class_name": "RedisVectorStore RedisVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "toDocument",
                "parameters": [
                    ""
                ],
                "return_type": "null",
                "body": "var id = doc.getId().substring(this.config.prefix.length());\n\t\tvar content = doc.hasProperty(this.config.contentFieldName) ? doc.getString(this.config.contentFieldName)\n\t\t\t\t: null;\n\t\tMap<String, Object> metadata = this.config.metadataFields.stream()\n\t\t\t.map(MetadataField::name)\n\t\t\t.filter(doc::hasProperty)\n\t\t\t.collect(Collectors.toMap(Function.identity(), doc::getString));\n\t\tmetadata.put(DISTANCE_FIELD_NAME, 1 - similarityScore(doc));\n\t\treturn new Document(id, content, metadata);",
                "is_abstract": "",
                "class_name": "RedisVectorStore RedisVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "similarityScore",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return (2 - Float.parseFloat(doc.getString(DISTANCE_FIELD_NAME))) / 2;",
                "is_abstract": "",
                "class_name": "RedisVectorStore RedisVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "nativeExpressionFilter",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (request.getFilterExpression() == null) {\n\t\t\treturn \"*\";\n\t\t}\n\t\treturn \"(\" + this.filterExpressionConverter.convertExpression(request.getFilterExpression()) + \")\";",
                "is_abstract": "",
                "class_name": "RedisVectorStore RedisVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "afterPropertiesSet",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// If index already exists don't do anything\n\t\tif (this.jedis.ftList().contains(this.config.indexName)) {\n\t\t\treturn;\n\t\t}\n\n\t\tString response = this.jedis.ftCreate(this.config.indexName,\n\t\t\t\tFTCreateParams.createParams().on(IndexDataType.JSON).addPrefix(this.config.prefix), schemaFields());\n\t\tif (!RESPONSE_OK.test(response)) {\n\t\t\tString message = MessageFormat.format(\"Could not create index: {0}\", response);\n\t\t\tthrow new RuntimeException(message);\n\t\t}",
                "is_abstract": "",
                "class_name": "RedisVectorStore RedisVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "schemaFields",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Map<String, Object> vectorAttrs = new HashMap<>();\n\t\tvectorAttrs.put(\"DIM\", this.embeddingClient.dimensions());\n\t\tvectorAttrs.put(\"DISTANCE_METRIC\", DEFAULT_DISTANCE_METRIC);\n\t\tvectorAttrs.put(\"TYPE\", VECTOR_TYPE_FLOAT32);\n\t\tList<SchemaField> fields = new ArrayList<>();\n\t\tfields.add(TextField.of(jsonPath(this.config.contentFieldName)).as(this.config.contentFieldName).weight(1.0));\n\t\tfields.add(VectorField.builder()\n\t\t\t.fieldName(jsonPath(this.config.embeddingFieldName))\n\t\t\t.algorithm(vectorAlgorithm())\n\t\t\t.attributes(vectorAttrs)\n\t\t\t.as(this.config.embeddingFieldName)\n\t\t\t.build());\n\n\t\tif (!CollectionUtils.isEmpty(this.config.metadataFields)) {\n\t\t\tfor (MetadataField field : this.config.metadataFields) {\n\t\t\t\tfields.add(schemaField(field));\n\t\t\t}\n\t\t}\n\t\treturn fields;",
                "is_abstract": "",
                "class_name": "RedisVectorStore RedisVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "schemaField",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String fieldName = jsonPath(field.name);\n\t\tswitch (field.fieldType) {\n\t\t\tcase NUMERIC:\n\t\t\t\treturn NumericField.of(fieldName).as(field.name);\n\t\t\tcase TAG:\n\t\t\t\treturn TagField.of(fieldName).as(field.name);\n\t\t\tcase TEXT:\n\t\t\t\treturn TextField.of(fieldName).as(field.name);\n\t\t\tdefault:\n\t\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\tMessageFormat.format(\"Field {0} has unsupported type {1}\", field.name, field.fieldType));\n\t\t}",
                "is_abstract": "",
                "class_name": "RedisVectorStore RedisVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "vectorAlgorithm",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (config.vectorAlgorithm == Algorithm.HSNW) {\n\t\t\treturn VectorAlgorithm.HNSW;\n\t\t}\n\t\treturn VectorAlgorithm.FLAT;",
                "is_abstract": "",
                "class_name": "RedisVectorStore RedisVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "jsonPath",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return JSON_PATH_PREFIX + field;",
                "is_abstract": "",
                "class_name": "RedisVectorStore RedisVectorStoreConfig Builder",
                "annotations": []
            },
            {
                "name": "toFloatArray",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "float[] embeddingFloat = new float[embeddingDouble.size()];\n\t\tint i = 0;\n\t\tfor (Double d : embeddingDouble) {\n\t\t\tembeddingFloat[i++] = d.floatValue();\n\t\t}\n\t\treturn embeddingFloat;",
                "is_abstract": "",
                "class_name": "RedisVectorStore RedisVectorStoreConfig Builder",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/vector-stores/spring-ai-redis/src/main/java/org/springframework/ai/vectorstore/RedisFilterExpressionConverter.java",
        "class_names": [
            "RedisFilterExpressionConverter"
        ],
        "imports": "import java.util.stream.Collectors;\nimport java.util.List;\nimport org.springframework.ai.vectorstore.RedisVectorStore.MetadataField;\nimport org.springframework.ai.vectorstore.filter.Filter.ExpressionType;\nimport org.springframework.ai.vectorstore.filter.Filter.Key;\nimport java.util.Map;\nimport org.springframework.ai.vectorstore.filter.Filter.Expression;\nimport org.springframework.ai.vectorstore.filter.Filter.Group;\nimport org.springframework.ai.vectorstore.filter.Filter.Value;\nimport java.util.function.Function;\nimport org.springframework.ai.vectorstore.filter.converter.AbstractFilterExpressionConverter;\nimport java.text.MessageFormat;",
        "package_import_paths": {
            "org.springframework.ai.vectorstore.RedisFilterExpressionConverter": "org.springframework.ai.vectorstore.RedisFilterExpressionConverter",
            "org.springframework.ai.vectorstore.doStartGrou": "org.springframework.ai.vectorstore.doStartGrou",
            "org.springframework.ai.vectorstore.doEndGrou": "org.springframework.ai.vectorstore.doEndGrou",
            "org.springframework.ai.vectorstore.doKey": "org.springframework.ai.vectorstore.doKey",
            "org.springframework.ai.vectorstore.doExpression": "org.springframework.ai.vectorstore.doExpression",
            "org.springframework.ai.vectorstore.negat": "org.springframework.ai.vectorstore.negat",
            "org.springframework.ai.vectorstore.doBinaryOperation": "org.springframework.ai.vectorstore.doBinaryOperation",
            "org.springframework.ai.vectorstore.doField": "org.springframework.ai.vectorstore.doField",
            "org.springframework.ai.vectorstore.stringValu": "org.springframework.ai.vectorstore.stringValu",
            "org.springframework.ai.vectorstore.tagValueDelimiter": "org.springframework.ai.vectorstore.tagValueDelimiter",
            "org.springframework.ai.vectorstore.numeri": "org.springframework.ai.vectorstore.numeri",
            "org.springframework.ai.vectorstore.inclusiv": "org.springframework.ai.vectorstore.inclusiv",
            "org.springframework.ai.vectorstore.exclusiv": "org.springframework.ai.vectorstore.exclusiv",
            "org.springframework.ai.vectorstore.toStrin": "org.springframework.ai.vectorstore.toStrin",
            "org.springframework.ai.vectorstore.formatStrin": "org.springframework.ai.vectorstore.formatStrin",
            "org.springframework.ai.vectorstore.POSITIVE_INFINITY": "org.springframework.ai.vectorstore.POSITIVE_INFINITY",
            "org.springframework.ai.vectorstore.NEGATIVE_INFINITY": "org.springframework.ai.vectorstore.NEGATIVE_INFINITY",
            "org.springframework.ai.vectorstore.metadataFields": "org.springframework.ai.vectorstore.metadataFields",
            "org.springframework.ai.vectorstore.INFINITY": "org.springframework.ai.vectorstore.INFINITY",
            "org.springframework.ai.vectorstore.MINUS_INFINITY": "org.springframework.ai.vectorstore.MINUS_INFINITY",
            "org.springframework.ai.vectorstore.INCLUSIVE_FORMAT": "org.springframework.ai.vectorstore.INCLUSIVE_FORMAT",
            "org.springframework.ai.vectorstore.EXCLUSIVE_FORMAT": "org.springframework.ai.vectorstore.EXCLUSIVE_FORMAT"
        },
        "package": "package org.springframework.ai.vectorstore;",
        "property_declarations": [
            "private static final String INCLUSIVE_FORMAT = \"%s\";",
            "private Map<String, MetadataField> metadataFields;",
            "public static final NumericBoundary POSITIVE_INFINITY = new NumericBoundary(Double.POSITIVE_INFINITY, true);",
            "private static final String EXCLUSIVE_FORMAT = \"(%s\";",
            "private static final String MINUS_INFINITY = \"-inf\";",
            "public static final NumericBoundary NEGATIVE_INFINITY = new NumericBoundary(Double.NEGATIVE_INFINITY, true);",
            "private static final String INFINITY = \"inf\";"
        ],
        "functions": [
            {
                "name": "doStartGroup",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "context.append(\"(\");",
                "is_abstract": "",
                "class_name": "RedisFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "doEndGroup",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "context.append(\")\");",
                "is_abstract": "",
                "class_name": "RedisFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "doKey",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "context.append(\"@\").append(key.key()).append(\":\");",
                "is_abstract": "",
                "class_name": "RedisFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "doExpression",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "switch (expression.type()) {\n\t\t\tcase NIN:\n\t\t\t\tdoExpression(negate(ExpressionType.IN, expression), context);\n\t\t\t\tbreak;\n\t\t\tcase NE:\n\t\t\t\tdoExpression(negate(ExpressionType.EQ, expression), context);\n\t\t\t\tbreak;\n\t\t\tcase AND:\n\t\t\t\tdoBinaryOperation(\" \", expression, context);\n\t\t\t\tbreak;\n\t\t\tcase OR:\n\t\t\t\tdoBinaryOperation(\" | \", expression, context);\n\t\t\t\tbreak;\n\t\t\tcase NOT:\n\t\t\t\tcontext.append(\"-\");\n\t\t\t\tconvertOperand(expression.left(), context);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tdoField(expression, context);\n\t\t\t\tbreak;\n\t\t}",
                "is_abstract": "",
                "class_name": "RedisFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "negate",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Expression(ExpressionType.NOT, new Expression(expressionType, expression.left(), expression.right()),\n\t\t\t\tnull);",
                "is_abstract": "",
                "class_name": "RedisFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "doBinaryOperation",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.convertOperand(expression.left(), context);\n\t\tcontext.append(delimiter);\n\t\tthis.convertOperand(expression.right(), context);",
                "is_abstract": "",
                "class_name": "RedisFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "doField",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Key key = (Key) expression.left();\n\t\tdoKey(key, context);\n\t\tMetadataField field = this.metadataFields.getOrDefault(key.key(), MetadataField.tag(key.key()));\n\t\tValue value = (Value) expression.right();\n\t\tswitch (field.fieldType()) {\n\t\t\tcase NUMERIC:\n\t\t\t\tNumeric numeric = numeric(expression, value);\n\t\t\t\tcontext.append(\"[\");\n\t\t\t\tcontext.append(numeric.lower());\n\t\t\t\tcontext.append(\" \");\n\t\t\t\tcontext.append(numeric.upper());\n\t\t\t\tcontext.append(\"]\");\n\t\t\t\tbreak;\n\t\t\tcase TAG:\n\t\t\t\tcontext.append(\"{\");\n\t\t\t\tcontext.append(stringValue(expression, value));\n\t\t\t\tcontext.append(\"}\");\n\t\t\t\tbreak;\n\t\t\tcase TEXT:\n\t\t\t\tcontext.append(\"(\");\n\t\t\t\tcontext.append(stringValue(expression, value));\n\t\t\t\tcontext.append(\")\");\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new UnsupportedOperationException(\n\t\t\t\t\t\tMessageFormat.format(\"Field type {0} not supported\", field.fieldType()));\n\t\t}",
                "is_abstract": "",
                "class_name": "RedisFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "stringValue",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String delimiter = tagValueDelimiter(expression);\n\t\tif (value.value() instanceof List<?> list) {\n\t\t\treturn String.join(delimiter, list.stream().map(String::valueOf).toList());\n\t\t}\n\t\treturn value.value();",
                "is_abstract": "",
                "class_name": "RedisFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "tagValueDelimiter",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "switch (expression.type()) {\n\t\t\tcase IN:\n\t\t\t\treturn \" | \";\n\t\t\tcase EQ:\n\t\t\t\treturn \" \";\n\t\t\tdefault:\n\t\t\t\tthrow new UnsupportedOperationException(\n\t\t\t\t\t\tMessageFormat.format(\"Tag operand {0} not supported\", expression.type()));\n\t\t}",
                "is_abstract": "",
                "class_name": "RedisFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "numeric",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "switch (expression.type()) {\n\t\t\tcase EQ:\n\t\t\t\treturn new Numeric(inclusive(value), inclusive(value));\n\t\t\tcase GT:\n\t\t\t\treturn new Numeric(exclusive(value), POSITIVE_INFINITY);\n\t\t\tcase GTE:\n\t\t\t\treturn new Numeric(inclusive(value), POSITIVE_INFINITY);\n\t\t\tcase LT:\n\t\t\t\treturn new Numeric(NEGATIVE_INFINITY, exclusive(value));\n\t\t\tcase LTE:\n\t\t\t\treturn new Numeric(NEGATIVE_INFINITY, inclusive(value));\n\t\t\tdefault:\n\t\t\t\tthrow new UnsupportedOperationException(MessageFormat\n\t\t\t\t\t.format(\"Expression type {0} not supported for numeric fields\", expression.type()));\n\t\t}",
                "is_abstract": "",
                "class_name": "RedisFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "inclusive",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new NumericBoundary(value.value(), false);",
                "is_abstract": "",
                "class_name": "RedisFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "exclusive",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new NumericBoundary(value.value(), true);",
                "is_abstract": "",
                "class_name": "RedisFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "toString",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (this == NEGATIVE_INFINITY) {\n\t\t\t\treturn MINUS_INFINITY;\n\t\t\t}\n\t\t\tif (this == POSITIVE_INFINITY) {\n\t\t\t\treturn INFINITY;\n\t\t\t}\n\t\t\treturn String.format(formatString(), value);",
                "is_abstract": "",
                "class_name": "RedisFilterExpressionConverter",
                "annotations": []
            },
            {
                "name": "formatString",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (exclusive) {\n\t\t\t\treturn EXCLUSIVE_FORMAT;\n\t\t\t}\n\t\t\treturn INCLUSIVE_FORMAT;",
                "is_abstract": "",
                "class_name": "RedisFilterExpressionConverter",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/mistralai/MistralAiPropertiesTests.java",
        "class_names": [
            "MistralAiPropertiesTests"
        ],
        "imports": "import static org.assertj.core.api.Assertions.assertThat;\nimport org.springframework.boot.autoconfigure.web.client.RestClientAutoConfiguration;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.autoconfigure.AutoConfigurations;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport org.springframework.ai.autoconfigure.retry.SpringAiRetryAutoConfiguration;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.mistralai.MistralAiPropertiesTests": "org.springframework.ai.autoconfigure.mistralai.MistralAiPropertiesTests",
            "org.springframework.ai.autoconfigure.mistralai.embeddingProperties": "org.springframework.ai.autoconfigure.mistralai.embeddingProperties",
            "org.springframework.ai.autoconfigure.mistralai.embeddingOverrideConnectionProperties": "org.springframework.ai.autoconfigure.mistralai.embeddingOverrideConnectionProperties",
            "org.springframework.ai.autoconfigure.mistralai.embeddingOptionsTest": "org.springframework.ai.autoconfigure.mistralai.embeddingOptionsTest"
        },
        "package": "package org.springframework.ai.autoconfigure.mistralai;",
        "property_declarations": [],
        "functions": [
            {
                "name": "embeddingProperties",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "new ApplicationContextRunner()\n\t\t\t.withPropertyValues(\"spring.ai.mistralai.base-url=TEST_BASE_URL\", \"spring.ai.mistralai.api-key=abc123\",\n\t\t\t\t\t\"spring.ai.mistralai.embedding.options.model=MODEL_XYZ\")\n\t\t\t.withConfiguration(AutoConfigurations.of(SpringAiRetryAutoConfiguration.class,\n\t\t\t\t\tRestClientAutoConfiguration.class, MistralAiAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tvar embeddingProperties = context.getBean(MistralAiEmbeddingProperties.class);\n\t\t\t\tvar connectionProperties = context.getBean(MistralAiCommonProperties.class);\n\n\t\t\t\tassertThat(connectionProperties.getApiKey()).isEqualTo(\"abc123\");\n\t\t\t\tassertThat(connectionProperties.getBaseUrl()).isEqualTo(\"TEST_BASE_URL\");\n\n\t\t\t\tassertThat(embeddingProperties.getApiKey()).isNull();\n\t\t\t\tassertThat(embeddingProperties.getBaseUrl()).isEqualTo(MistralAiCommonProperties.DEFAULT_BASE_URL);\n\n\t\t\t\tassertThat(embeddingProperties.getOptions().getModel()).isEqualTo(\"MODEL_XYZ\");\n\t\t\t});",
                "is_abstract": "",
                "class_name": "MistralAiPropertiesTests",
                "annotations": []
            },
            {
                "name": "embeddingOverrideConnectionProperties",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "new ApplicationContextRunner().withPropertyValues(\"spring.ai.mistralai.base-url=TEST_BASE_URL\",\n\t\t\t\t\"spring.ai.mistralai.api-key=abc123\", \"spring.ai.mistralai.embedding.base-url=TEST_BASE_URL2\",\n\t\t\t\t\"spring.ai.mistralai.embedding.api-key=456\", \"spring.ai.mistralai.embedding.options.model=MODEL_XYZ\")\n\t\t\t.withConfiguration(AutoConfigurations.of(SpringAiRetryAutoConfiguration.class,\n\t\t\t\t\tRestClientAutoConfiguration.class, MistralAiAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tvar embeddingProperties = context.getBean(MistralAiEmbeddingProperties.class);\n\t\t\t\tvar connectionProperties = context.getBean(MistralAiCommonProperties.class);\n\n\t\t\t\tassertThat(connectionProperties.getApiKey()).isEqualTo(\"abc123\");\n\t\t\t\tassertThat(connectionProperties.getBaseUrl()).isEqualTo(\"TEST_BASE_URL\");\n\n\t\t\t\tassertThat(embeddingProperties.getApiKey()).isEqualTo(\"456\");\n\t\t\t\tassertThat(embeddingProperties.getBaseUrl()).isEqualTo(\"TEST_BASE_URL2\");\n\n\t\t\t\tassertThat(embeddingProperties.getOptions().getModel()).isEqualTo(\"MODEL_XYZ\");\n\t\t\t});",
                "is_abstract": "",
                "class_name": "MistralAiPropertiesTests",
                "annotations": []
            },
            {
                "name": "embeddingOptionsTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "new ApplicationContextRunner()\n\t\t\t.withPropertyValues(\"spring.ai.mistralai.api-key=API_KEY\", \"spring.ai.mistralai.base-url=TEST_BASE_URL\",\n\n\t\t\t\t\t\"spring.ai.mistralai.embedding.options.model=MODEL_XYZ\",\n\t\t\t\t\t\"spring.ai.mistralai.embedding.options.encodingFormat=MyEncodingFormat\")\n\t\t\t.withConfiguration(AutoConfigurations.of(SpringAiRetryAutoConfiguration.class,\n\t\t\t\t\tRestClientAutoConfiguration.class, MistralAiAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tvar connectionProperties = context.getBean(MistralAiCommonProperties.class);\n\t\t\t\tvar embeddingProperties = context.getBean(MistralAiEmbeddingProperties.class);\n\n\t\t\t\tassertThat(connectionProperties.getBaseUrl()).isEqualTo(\"TEST_BASE_URL\");\n\t\t\t\tassertThat(connectionProperties.getApiKey()).isEqualTo(\"API_KEY\");\n\n\t\t\t\tassertThat(embeddingProperties.getOptions().getModel()).isEqualTo(\"MODEL_XYZ\");\n\t\t\t\tassertThat(embeddingProperties.getOptions().getEncodingFormat()).isEqualTo(\"MyEncodingFormat\");\n\t\t\t});",
                "is_abstract": "",
                "class_name": "MistralAiPropertiesTests",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/mistralai/MistralAiAutoConfigurationIT.java",
        "class_names": [
            "MistralAiAutoConfigurationIT"
        ],
        "imports": "import java.util.stream.Collectors;\nimport org.springframework.ai.chat.prompt.Prompt;\nimport java.util.List;\nimport org.springframework.ai.chat.messages.UserMessage;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport reactor.core.publisher.Flux;\nimport org.springframework.boot.autoconfigure.web.client.RestClientAutoConfiguration;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.chat.ChatResponse;\nimport org.springframework.ai.mistralai.MistralAiEmbeddingClient;\nimport org.springframework.boot.autoconfigure.AutoConfigurations;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport org.springframework.ai.autoconfigure.retry.SpringAiRetryAutoConfiguration;\nimport org.springframework.ai.mistralai.MistralAiChatClient;\nimport org.springframework.ai.embedding.EmbeddingResponse;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.mistralai.MistralAiAutoConfigurationIT": "org.springframework.ai.autoconfigure.mistralai.MistralAiAutoConfigurationIT",
            "org.springframework.ai.autoconfigure.mistralai.generat": "org.springframework.ai.autoconfigure.mistralai.generat",
            "org.springframework.ai.autoconfigure.mistralai.generateStreamin": "org.springframework.ai.autoconfigure.mistralai.generateStreamin",
            "org.springframework.ai.autoconfigure.mistralai.embeddin": "org.springframework.ai.autoconfigure.mistralai.embeddin",
            "org.springframework.ai.autoconfigure.mistralai.logger": "org.springframework.ai.autoconfigure.mistralai.logger",
            "org.springframework.ai.autoconfigure.mistralai.contextRunner": "org.springframework.ai.autoconfigure.mistralai.contextRunner"
        },
        "package": "package org.springframework.ai.autoconfigure.mistralai;",
        "property_declarations": [
            "private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t.withPropertyValues(\"spring.ai.mistralai.apiKey=\" + System.getenv(\"MISTRAL_AI_API_KEY\"))\n\t\t.withConfiguration(AutoConfigurations.of(SpringAiRetryAutoConfiguration.class,\n\t\t\t\tRestClientAutoConfiguration.class, MistralAiAutoConfiguration.class));",
            "private static final Log logger = LogFactory.getLog(MistralAiAutoConfigurationIT.class);"
        ],
        "functions": [
            {
                "name": "generate",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\t\t\tMistralAiChatClient client = context.getBean(MistralAiChatClient.class);\n\t\t\tString response = client.call(\"Hello\");\n\t\t\tassertThat(response).isNotEmpty();\n\t\t\tlogger.info(\"Response: \" + response);\n\t\t});",
                "is_abstract": "",
                "class_name": "MistralAiAutoConfigurationIT",
                "annotations": []
            },
            {
                "name": "generateStreaming",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\t\t\tMistralAiChatClient client = context.getBean(MistralAiChatClient.class);\n\t\t\tFlux<ChatResponse> responseFlux = client.stream(new Prompt(new UserMessage(\"Hello\")));\n\t\t\tString response = responseFlux.collectList().block().stream().map(chatResponse -> {\n\t\t\t\treturn chatResponse.getResults().get(0).getOutput().getContent();\n\t\t\t}).collect(Collectors.joining());\n\n\t\t\tassertThat(response).isNotEmpty();\n\t\t\tlogger.info(\"Response: \" + response);\n\t\t});",
                "is_abstract": "",
                "class_name": "MistralAiAutoConfigurationIT",
                "annotations": []
            },
            {
                "name": "embedding",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\t\t\tMistralAiEmbeddingClient embeddingClient = context.getBean(MistralAiEmbeddingClient.class);\n\n\t\t\tEmbeddingResponse embeddingResponse = embeddingClient\n\t\t\t\t.embedForResponse(List.of(\"Hello World\", \"World is big and salvation is near\"));\n\t\t\tassertThat(embeddingResponse.getResults()).hasSize(2);\n\t\t\tassertThat(embeddingResponse.getResults().get(0).getOutput()).isNotEmpty();\n\t\t\tassertThat(embeddingResponse.getResults().get(0).getIndex()).isEqualTo(0);\n\t\t\tassertThat(embeddingResponse.getResults().get(1).getOutput()).isNotEmpty();\n\t\t\tassertThat(embeddingResponse.getResults().get(1).getIndex()).isEqualTo(1);\n\n\t\t\tassertThat(embeddingClient.dimensions()).isEqualTo(1024);\n\t\t});",
                "is_abstract": "",
                "class_name": "MistralAiAutoConfigurationIT",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/mistralai/tool/WeatherServicePromptIT.java",
        "class_names": [
            "WeatherServicePromptIT",
            "MyWeatherService"
        ],
        "imports": "import java.util.List;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.ai.autoconfigure.mistralai.tool.WeatherServicePromptIT.MyWeatherService.Response;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.slf4j.Logger;\nimport org.springframework.ai.mistralai.api.MistralAiApi;\nimport java.util.function.Function;\nimport org.springframework.ai.autoconfigure.mistralai.tool.WeatherServicePromptIT.MyWeatherService.Request;\nimport org.springframework.ai.chat.ChatResponse;\nimport org.springframework.ai.chat.messages.UserMessage;\nimport com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport org.slf4j.LoggerFactory;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport org.springframework.boot.autoconfigure.web.client.RestClientAutoConfiguration;\nimport org.springframework.ai.mistralai.api.MistralAiApi.ChatCompletionRequest.ToolChoice;\nimport org.springframework.ai.autoconfigure.retry.SpringAiRetryAutoConfiguration;\nimport org.springframework.ai.model.function.FunctionCallbackWrapper;\nimport org.springframework.ai.chat.prompt.Prompt;\nimport org.springframework.ai.mistralai.MistralAiChatOptions;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.autoconfigure.AutoConfigurations;\nimport org.springframework.ai.autoconfigure.mistralai.MistralAiAutoConfiguration;\nimport org.springframework.ai.mistralai.MistralAiChatClient;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.mistralai.tool.WeatherServicePromptIT": "org.springframework.ai.autoconfigure.mistralai.tool.WeatherServicePromptIT",
            "org.springframework.ai.autoconfigure.mistralai.tool.MyWeatherServi": "org.springframework.ai.autoconfigure.mistralai.tool.MyWeatherServi",
            "org.springframework.ai.autoconfigure.mistralai.tool.promptFunctionCall": "org.springframework.ai.autoconfigure.mistralai.tool.promptFunctionCall",
            "org.springframework.ai.autoconfigure.mistralai.tool.apply": "org.springframework.ai.autoconfigure.mistralai.tool.apply",
            "org.springframework.ai.autoconfigure.mistralai.tool.logger": "org.springframework.ai.autoconfigure.mistralai.tool.logger",
            "org.springframework.ai.autoconfigure.mistralai.tool.contextRunner": "org.springframework.ai.autoconfigure.mistralai.tool.contextRunner"
        },
        "package": "package org.springframework.ai.autoconfigure.mistralai.tool;",
        "property_declarations": [
            "private final Logger logger = LoggerFactory.getLogger(WeatherServicePromptIT.class);",
            "private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t.withPropertyValues(\"spring.ai.mistralai.api-key=\" + System.getenv(\"MISTRAL_AI_API_KEY\"))\n\t\t.withConfiguration(AutoConfigurations.of(SpringAiRetryAutoConfiguration.class,\n\t\t\t\tRestClientAutoConfiguration.class, MistralAiAutoConfiguration.class));"
        ],
        "functions": [
            {
                "name": "promptFunctionCall",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner\n\t\t\t.withPropertyValues(\"spring.ai.mistralai.chat.options.model=\" + MistralAiApi.ChatModel.LARGE.getValue())\n\t\t\t.run(context -> {\n\n\t\t\t\tMistralAiChatClient chatClient = context.getBean(MistralAiChatClient.class);\n\n\t\t\t\tUserMessage userMessage = new UserMessage(\"What's the weather like in Paris?\");\n\t\t\t\t// UserMessage userMessage = new UserMessage(\"What's the weather like in\n\t\t\t\t// San Francisco, Tokyo, and\n\t\t\t\t// Paris?\");\n\n\t\t\t\tvar promptOptions = MistralAiChatOptions.builder()\n\t\t\t\t\t.withToolChoice(ToolChoice.AUTO)\n\t\t\t\t\t.withFunctionCallbacks(List.of(FunctionCallbackWrapper.builder(new MyWeatherService())\n\t\t\t\t\t\t.withName(\"CurrentWeatherService\")\n\t\t\t\t\t\t.withDescription(\"Get the current weather in requested location\")\n\t\t\t\t\t\t.build()))\n\t\t\t\t\t.build();\n\n\t\t\t\tChatResponse response = chatClient.call(new Prompt(List.of(userMessage), promptOptions));\n\n\t\t\t\tlogger.info(\"Response: {}\", response);\n\n\t\t\t\tassertThat(response.getResult().getOutput().getContent()).containsAnyOf(\"15\", \"15.0\");\n\t\t\t\t// assertThat(response.getResult().getOutput().getContent()).contains(\"30.0\",\n\t\t\t\t// \"10.0\", \"15.0\");\n\t\t\t});",
                "is_abstract": "",
                "class_name": "WeatherServicePromptIT",
                "annotations": [
                    "@JsonInclude(Include.NON_NULL)",
                    "@JsonProperty(required = true, value = \"location\")",
                    "@JsonProperty(required = true, value = \"unit\")"
                ]
            },
            {
                "name": "apply",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (request.location().contains(\"Paris\")) {\n\t\t\t\treturn new Response(15, request.unit());\n\t\t\t}\n\t\t\telse if (request.location().contains(\"Tokyo\")) {\n\t\t\t\treturn new Response(10, request.unit());\n\t\t\t}\n\t\t\telse if (request.location().contains(\"San Francisco\")) {\n\t\t\t\treturn new Response(30, request.unit());\n\t\t\t}\n\t\t\tthrow new IllegalArgumentException(\"Invalid request: \" + request);",
                "is_abstract": "",
                "class_name": "WeatherServicePromptIT MyWeatherService",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/mistralai/tool/PaymentStatusBeanOpenAiIT.java",
        "class_names": [
            "Config",
            "PaymentStatusBeanOpenAiIT"
        ],
        "imports": "import java.util.List;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport org.springframework.ai.openai.OpenAiChatClient;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.slf4j.Logger;\nimport org.springframework.ai.mistralai.api.MistralAiApi;\nimport java.util.Map;\nimport org.springframework.ai.autoconfigure.openai.OpenAiAutoConfiguration;\nimport java.util.function.Function;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.ai.chat.ChatResponse;\nimport org.springframework.ai.chat.messages.UserMessage;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.boot.autoconfigure.web.client.RestClientAutoConfiguration;\nimport org.springframework.ai.autoconfigure.retry.SpringAiRetryAutoConfiguration;\nimport org.springframework.ai.openai.OpenAiChatOptions;\nimport org.springframework.ai.chat.prompt.Prompt;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.autoconfigure.AutoConfigurations;\nimport org.springframework.context.annotation.Description;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.mistralai.tool.PaymentStatusBeanOpenAiIT": "org.springframework.ai.autoconfigure.mistralai.tool.PaymentStatusBeanOpenAiIT",
            "org.springframework.ai.autoconfigure.mistralai.tool.Confi": "org.springframework.ai.autoconfigure.mistralai.tool.Confi",
            "org.springframework.ai.autoconfigure.mistralai.tool.functionCallTest": "org.springframework.ai.autoconfigure.mistralai.tool.functionCallTest",
            "org.springframework.ai.autoconfigure.mistralai.tool.Description": "org.springframework.ai.autoconfigure.mistralai.tool.Description",
            "org.springframework.ai.autoconfigure.mistralai.tool.logger": "org.springframework.ai.autoconfigure.mistralai.tool.logger",
            "org.springframework.ai.autoconfigure.mistralai.tool.contextRunner": "org.springframework.ai.autoconfigure.mistralai.tool.contextRunner",
            "org.springframework.ai.autoconfigure.mistralai.tool.DATA": "org.springframework.ai.autoconfigure.mistralai.tool.DATA"
        },
        "package": "package org.springframework.ai.autoconfigure.mistralai.tool;",
        "property_declarations": [
            "private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t.withPropertyValues(\"spring.ai.openai.apiKey=\" + System.getenv(\"MISTRAL_AI_API_KEY\"),\n\t\t\t\t\"spring.ai.openai.chat.base-url=https://api.mistral.ai\")\n\t\t.withConfiguration(AutoConfigurations.of(SpringAiRetryAutoConfiguration.class,\n\t\t\t\tRestClientAutoConfiguration.class, OpenAiAutoConfiguration.class))\n\t\t.withUserConfiguration(Config.class);",
            "public static final Map<String, StatusDate> DATA = Map.of(\"T1001\", new StatusDate(\"Paid\", \"2021-10-05\"), \"T1002\",\n\t\t\tnew StatusDate(\"Unpaid\", \"2021-10-06\"), \"T1003\", new StatusDate(\"Paid\", \"2021-10-07\"), \"T1004\",\n\t\t\tnew StatusDate(\"Paid\", \"2021-10-05\"), \"T1005\", new StatusDate(\"Pending\", \"2021-10-08\"));",
            "private final Logger logger = LoggerFactory.getLogger(PaymentStatusBeanIT.class);"
        ],
        "functions": [
            {
                "name": "functionCallTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner\n\t\t\t.withPropertyValues(\"spring.ai.openai.chat.options.model=\" + MistralAiApi.ChatModel.SMALL.getValue())\n\t\t\t.run(context -> {\n\n\t\t\t\tOpenAiChatClient chatClient = context.getBean(OpenAiChatClient.class);\n\n\t\t\t\tChatResponse response = chatClient\n\t\t\t\t\t.call(new Prompt(List.of(new UserMessage(\"What's the status of my transaction with id T1001?\")),\n\t\t\t\t\t\t\tOpenAiChatOptions.builder()\n\t\t\t\t\t\t\t\t.withFunction(\"retrievePaymentStatus\")\n\t\t\t\t\t\t\t\t.withFunction(\"retrievePaymentDate\")\n\t\t\t\t\t\t\t\t.build()));\n\n\t\t\t\tlogger.info(\"Response: {}\", response);\n\n\t\t\t\tassertThat(response.getResult().getOutput().getContent()).containsIgnoringCase(\"T1001\");\n\t\t\t\tassertThat(response.getResult().getOutput().getContent()).containsIgnoringCase(\"paid\");\n\t\t\t});",
                "is_abstract": "",
                "class_name": "PaymentStatusBeanOpenAiIT",
                "annotations": [
                    "@JsonProperty(required = true, value = \"transaction_id\")",
                    "@JsonProperty(required = true, value = \"status\")",
                    "@JsonProperty(required = true, value = \"date\")"
                ]
            },
            {
                "name": "Description",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return (transaction) -> new Status(DATA.get(transaction.transactionId).status());",
                "is_abstract": "",
                "class_name": "PaymentStatusBeanOpenAiIT Config",
                "annotations": [
                    "@Description(\"Get payment status of a transaction\")"
                ]
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/mistralai/tool/PaymentStatusBeanIT.java",
        "class_names": [
            "Config",
            "PaymentStatusBeanIT"
        ],
        "imports": "import java.util.List;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.slf4j.Logger;\nimport org.springframework.ai.mistralai.api.MistralAiApi;\nimport java.util.Map;\nimport java.util.function.Function;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.ai.chat.ChatResponse;\nimport org.springframework.ai.chat.messages.UserMessage;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.boot.autoconfigure.web.client.RestClientAutoConfiguration;\nimport org.springframework.ai.autoconfigure.retry.SpringAiRetryAutoConfiguration;\nimport org.springframework.ai.chat.prompt.Prompt;\nimport org.springframework.ai.mistralai.MistralAiChatOptions;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.autoconfigure.AutoConfigurations;\nimport org.springframework.context.annotation.Description;\nimport org.springframework.ai.autoconfigure.mistralai.MistralAiAutoConfiguration;\nimport org.springframework.ai.mistralai.MistralAiChatClient;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.mistralai.tool.PaymentStatusBeanIT": "org.springframework.ai.autoconfigure.mistralai.tool.PaymentStatusBeanIT",
            "org.springframework.ai.autoconfigure.mistralai.tool.Confi": "org.springframework.ai.autoconfigure.mistralai.tool.Confi",
            "org.springframework.ai.autoconfigure.mistralai.tool.functionCallTest": "org.springframework.ai.autoconfigure.mistralai.tool.functionCallTest",
            "org.springframework.ai.autoconfigure.mistralai.tool.Description": "org.springframework.ai.autoconfigure.mistralai.tool.Description",
            "org.springframework.ai.autoconfigure.mistralai.tool.logger": "org.springframework.ai.autoconfigure.mistralai.tool.logger",
            "org.springframework.ai.autoconfigure.mistralai.tool.contextRunner": "org.springframework.ai.autoconfigure.mistralai.tool.contextRunner",
            "org.springframework.ai.autoconfigure.mistralai.tool.DATA": "org.springframework.ai.autoconfigure.mistralai.tool.DATA"
        },
        "package": "package org.springframework.ai.autoconfigure.mistralai.tool;",
        "property_declarations": [
            "private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t.withPropertyValues(\"spring.ai.mistralai.apiKey=\" + System.getenv(\"MISTRAL_AI_API_KEY\"))\n\t\t.withConfiguration(AutoConfigurations.of(SpringAiRetryAutoConfiguration.class,\n\t\t\t\tRestClientAutoConfiguration.class, MistralAiAutoConfiguration.class))\n\t\t.withUserConfiguration(Config.class);",
            "public static final Map<String, StatusDate> DATA = Map.of(\"T1001\", new StatusDate(\"Paid\", \"2021-10-05\"), \"T1002\",\n\t\t\tnew StatusDate(\"Unpaid\", \"2021-10-06\"), \"T1003\", new StatusDate(\"Paid\", \"2021-10-07\"), \"T1004\",\n\t\t\tnew StatusDate(\"Paid\", \"2021-10-05\"), \"T1005\", new StatusDate(\"Pending\", \"2021-10-08\"));",
            "private final Logger logger = LoggerFactory.getLogger(PaymentStatusBeanIT.class);"
        ],
        "functions": [
            {
                "name": "functionCallTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner\n\t\t\t.withPropertyValues(\"spring.ai.mistralai.chat.options.model=\" + MistralAiApi.ChatModel.LARGE.getValue())\n\t\t\t.run(context -> {\n\n\t\t\t\tMistralAiChatClient chatClient = context.getBean(MistralAiChatClient.class);\n\n\t\t\t\tChatResponse response = chatClient\n\t\t\t\t\t.call(new Prompt(List.of(new UserMessage(\"What's the status of my transaction with id T1001?\")),\n\t\t\t\t\t\t\tMistralAiChatOptions.builder()\n\t\t\t\t\t\t\t\t.withFunction(\"retrievePaymentStatus\")\n\t\t\t\t\t\t\t\t.withFunction(\"retrievePaymentDate\")\n\t\t\t\t\t\t\t\t.build()));\n\n\t\t\t\tlogger.info(\"Response: {}\", response);\n\n\t\t\t\tassertThat(response.getResult().getOutput().getContent()).containsIgnoringCase(\"T1001\");\n\t\t\t\tassertThat(response.getResult().getOutput().getContent()).containsIgnoringCase(\"paid\");\n\t\t\t});",
                "is_abstract": "",
                "class_name": "PaymentStatusBeanIT",
                "annotations": [
                    "@JsonProperty(required = true, value = \"transaction_id\")",
                    "@JsonProperty(required = true, value = \"status\")",
                    "@JsonProperty(required = true, value = \"date\")"
                ]
            },
            {
                "name": "Description",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return (transaction) -> new Status(DATA.get(transaction.transactionId).status());",
                "is_abstract": "",
                "class_name": "PaymentStatusBeanIT Config",
                "annotations": [
                    "@Description(\"Get payment status of a transaction\")"
                ]
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/mistralai/tool/PaymentStatusPromptIT.java",
        "class_names": [
            "PaymentStatusPromptIT"
        ],
        "imports": "import java.util.List;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.slf4j.Logger;\nimport org.springframework.ai.mistralai.api.MistralAiApi;\nimport java.util.Map;\nimport java.util.function.Function;\nimport org.springframework.ai.chat.ChatResponse;\nimport org.springframework.ai.chat.messages.UserMessage;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.boot.autoconfigure.web.client.RestClientAutoConfiguration;\nimport org.springframework.ai.autoconfigure.retry.SpringAiRetryAutoConfiguration;\nimport org.springframework.ai.model.function.FunctionCallbackWrapper;\nimport org.springframework.ai.chat.prompt.Prompt;\nimport org.springframework.ai.mistralai.MistralAiChatOptions;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.autoconfigure.AutoConfigurations;\nimport org.springframework.ai.autoconfigure.mistralai.MistralAiAutoConfiguration;\nimport org.springframework.ai.mistralai.MistralAiChatClient;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.mistralai.tool.PaymentStatusPromptIT": "org.springframework.ai.autoconfigure.mistralai.tool.PaymentStatusPromptIT",
            "org.springframework.ai.autoconfigure.mistralai.tool.functionCallTest": "org.springframework.ai.autoconfigure.mistralai.tool.functionCallTest",
            "org.springframework.ai.autoconfigure.mistralai.tool.apply": "org.springframework.ai.autoconfigure.mistralai.tool.apply",
            "org.springframework.ai.autoconfigure.mistralai.tool.logger": "org.springframework.ai.autoconfigure.mistralai.tool.logger",
            "org.springframework.ai.autoconfigure.mistralai.tool.contextRunner": "org.springframework.ai.autoconfigure.mistralai.tool.contextRunner",
            "org.springframework.ai.autoconfigure.mistralai.tool.DATA": "org.springframework.ai.autoconfigure.mistralai.tool.DATA"
        },
        "package": "package org.springframework.ai.autoconfigure.mistralai.tool;",
        "property_declarations": [
            "private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t.withPropertyValues(\"spring.ai.mistralai.apiKey=\" + System.getenv(\"MISTRAL_AI_API_KEY\"))\n\t\t.withConfiguration(AutoConfigurations.of(SpringAiRetryAutoConfiguration.class,\n\t\t\t\tRestClientAutoConfiguration.class, MistralAiAutoConfiguration.class));",
            "private final Logger logger = LoggerFactory.getLogger(WeatherServicePromptIT.class);",
            "public static final Map<Transaction, StatusDate> DATA = Map.of(new Transaction(\"T1001\"),\n\t\t\tnew StatusDate(\"Paid\", \"2021-10-05\"), new Transaction(\"T1002\"), new StatusDate(\"Unpaid\", \"2021-10-06\"),\n\t\t\tnew Transaction(\"T1003\"), new StatusDate(\"Paid\", \"2021-10-07\"), new Transaction(\"T1004\"),\n\t\t\tnew StatusDate(\"Paid\", \"2021-10-05\"), new Transaction(\"T1005\"), new StatusDate(\"Pending\", \"2021-10-08\"));"
        ],
        "functions": [
            {
                "name": "functionCallTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner\n\t\t\t.withPropertyValues(\"spring.ai.mistralai.chat.options.model=\" + MistralAiApi.ChatModel.SMALL.getValue())\n\t\t\t.run(context -> {\n\n\t\t\t\tMistralAiChatClient chatClient = context.getBean(MistralAiChatClient.class);\n\n\t\t\t\tUserMessage userMessage = new UserMessage(\"What's the status of my transaction with id T1001?\");\n\n\t\t\t\tvar promptOptions = MistralAiChatOptions.builder()\n\t\t\t\t\t.withFunctionCallbacks(List.of(FunctionCallbackWrapper.builder(new Function<Transaction, Status>() {\n\t\t\t\t\t\tpublic Status apply(Transaction transaction) {\n\t\t\t\t\t\t\treturn new Status(DATA.get(transaction).status());\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t\t.withName(\"retrievePaymentStatus\")\n\t\t\t\t\t\t.withDescription(\"Get payment status of a transaction\")\n\t\t\t\t\t\t.build()))\n\t\t\t\t\t.build();\n\n\t\t\t\tChatResponse response = chatClient.call(new Prompt(List.of(userMessage), promptOptions));\n\n\t\t\t\tlogger.info(\"Response: {}\", response);\n\n\t\t\t\tassertThat(response.getResult().getOutput().getContent()).containsIgnoringCase(\"T1001\");\n\t\t\t\tassertThat(response.getResult().getOutput().getContent()).containsIgnoringCase(\"paid\");\n\t\t\t});",
                "is_abstract": "",
                "class_name": "PaymentStatusPromptIT",
                "annotations": []
            },
            {
                "name": "apply",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Status(DATA.get(transaction).status());",
                "is_abstract": "",
                "class_name": "PaymentStatusPromptIT",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/retry/SpringAiRetryPropertiesTests.java",
        "class_names": [
            "SpringAiRetryPropertiesTests"
        ],
        "imports": "import org.junit.jupiter.api.Test;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport org.springframework.boot.autoconfigure.AutoConfigurations;\nimport static org.assertj.core.api.Assertions.assertThat;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.retry.SpringAiRetryPropertiesTests": "org.springframework.ai.autoconfigure.retry.SpringAiRetryPropertiesTests",
            "org.springframework.ai.autoconfigure.retry.retryDefaultProperties": "org.springframework.ai.autoconfigure.retry.retryDefaultProperties",
            "org.springframework.ai.autoconfigure.retry.retryCustomProperties": "org.springframework.ai.autoconfigure.retry.retryCustomProperties"
        },
        "package": "package org.springframework.ai.autoconfigure.retry;",
        "property_declarations": [],
        "functions": [
            {
                "name": "retryDefaultProperties",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "new ApplicationContextRunner().withConfiguration(AutoConfigurations.of(SpringAiRetryAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tvar retryProperties = context.getBean(SpringAiRetryProperties.class);\n\n\t\t\t\tassertThat(retryProperties.getMaxAttempts()).isEqualTo(10);\n\t\t\t\t// do not retry on 4xx errors\n\t\t\t\tassertThat(retryProperties.isOnClientErrors()).isFalse();\n\t\t\t\tassertThat(retryProperties.getExcludeOnHttpCodes()).isEmpty();\n\t\t\t\tassertThat(retryProperties.getOnHttpCodes()).isEmpty();\n\t\t\t\tassertThat(retryProperties.getBackoff().getInitialInterval().toMillis()).isEqualTo(2000);\n\t\t\t\tassertThat(retryProperties.getBackoff().getMultiplier()).isEqualTo(5);\n\t\t\t\tassertThat(retryProperties.getBackoff().getMaxInterval().toMillis()).isEqualTo(3 * 60000);\n\t\t\t});",
                "is_abstract": "",
                "class_name": "SpringAiRetryPropertiesTests",
                "annotations": []
            },
            {
                "name": "retryCustomProperties",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "new ApplicationContextRunner().withPropertyValues(\n\t\t// @formatter:off\n\t\t\t\t\"spring.ai.retry.max-attempts=100\",\n\t\t\t\t\"spring.ai.retry.on-client-errors=false\",\n\t\t\t\t\"spring.ai.retry.exclude-on-http-codes=404,500\",\n\t\t\t\t\"spring.ai.retry.on-http-codes=429\",\n\t\t\t\t\"spring.ai.retry.backoff.initial-interval=1000\",\n\t\t\t\t\"spring.ai.retry.backoff.multiplier=2\",\n\t\t\t\t\"spring.ai.retry.backoff.max-interval=60000\" )\n\t\t\t\t// @formatter:on\n\t\t\t.withConfiguration(AutoConfigurations.of(SpringAiRetryAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tvar retryProperties = context.getBean(SpringAiRetryProperties.class);\n\n\t\t\t\tassertThat(retryProperties.getMaxAttempts()).isEqualTo(100);\n\t\t\t\tassertThat(retryProperties.isOnClientErrors()).isFalse();\n\t\t\t\tassertThat(retryProperties.getExcludeOnHttpCodes()).containsExactly(404, 500);\n\t\t\t\tassertThat(retryProperties.getOnHttpCodes()).containsExactly(429);\n\t\t\t\tassertThat(retryProperties.getBackoff().getInitialInterval().toMillis()).isEqualTo(1000);\n\t\t\t\tassertThat(retryProperties.getBackoff().getMultiplier()).isEqualTo(2);\n\t\t\t\tassertThat(retryProperties.getBackoff().getMaxInterval().toMillis()).isEqualTo(60000);\n\t\t\t});",
                "is_abstract": "",
                "class_name": "SpringAiRetryPropertiesTests",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/retry/SpringAiRetryAutoConfigurationIT.java",
        "class_names": [
            "SpringAiRetryAutoConfigurationIT"
        ],
        "imports": "import org.springframework.retry.support.RetryTemplate;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.springframework.boot.autoconfigure.web.client.RestClientAutoConfiguration;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.autoconfigure.AutoConfigurations;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport org.springframework.web.client.ResponseErrorHandler;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.retry.SpringAiRetryAutoConfigurationIT": "org.springframework.ai.autoconfigure.retry.SpringAiRetryAutoConfigurationIT",
            "org.springframework.ai.autoconfigure.retry.testRetryAutoConfiguration": "org.springframework.ai.autoconfigure.retry.testRetryAutoConfiguration",
            "org.springframework.ai.autoconfigure.retry.contextRunner": "org.springframework.ai.autoconfigure.retry.contextRunner"
        },
        "package": "package org.springframework.ai.autoconfigure.retry;",
        "property_declarations": [
            "private final ApplicationContextRunner contextRunner = new ApplicationContextRunner().withConfiguration(\n\t\t\tAutoConfigurations.of(SpringAiRetryAutoConfiguration.class, RestClientAutoConfiguration.class));"
        ],
        "functions": [
            {
                "name": "testRetryAutoConfiguration",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.contextRunner.run((context) -> {\n\t\t\tassertThat(context).hasSingleBean(RetryTemplate.class);\n\t\t\tassertThat(context).hasSingleBean(ResponseErrorHandler.class);\n\t\t});",
                "is_abstract": "",
                "class_name": "SpringAiRetryAutoConfigurationIT",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/azure/AzureOpenAiAutoConfigurationIT.java",
        "class_names": [
            "AzureOpenAiAutoConfigurationIT"
        ],
        "imports": "import java.util.stream.Collectors;\nimport java.util.List;\nimport org.springframework.ai.chat.Generation;\nimport reactor.core.publisher.Flux;\nimport org.springframework.ai.chat.prompt.SystemPromptTemplate;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport org.springframework.ai.chat.messages.Message;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport java.util.Map;\nimport org.springframework.ai.autoconfigure.azure.openai.AzureOpenAiAutoConfiguration;\nimport org.springframework.ai.chat.ChatResponse;\nimport org.springframework.ai.embedding.EmbeddingResponse;\nimport org.springframework.ai.chat.messages.UserMessage;\nimport org.springframework.ai.azure.openai.AzureOpenAiChatClient;\nimport org.springframework.ai.chat.messages.AssistantMessage;\nimport org.springframework.ai.chat.prompt.Prompt;\nimport org.springframework.ai.azure.openai.AzureOpenAiEmbeddingClient;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.autoconfigure.AutoConfigurations;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.azure.AzureOpenAiAutoConfigurationIT": "org.springframework.ai.autoconfigure.azure.AzureOpenAiAutoConfigurationIT",
            "org.springframework.ai.autoconfigure.azure.chatCompletion": "org.springframework.ai.autoconfigure.azure.chatCompletion",
            "org.springframework.ai.autoconfigure.azure.chatCompletionStreamin": "org.springframework.ai.autoconfigure.azure.chatCompletionStreamin",
            "org.springframework.ai.autoconfigure.azure.embeddin": "org.springframework.ai.autoconfigure.azure.embeddin",
            "org.springframework.ai.autoconfigure.azure.chatActivation": "org.springframework.ai.autoconfigure.azure.chatActivation",
            "org.springframework.ai.autoconfigure.azure.embeddingActivation": "org.springframework.ai.autoconfigure.azure.embeddingActivation",
            "org.springframework.ai.autoconfigure.azure.CHAT_MODEL_NAME": "org.springframework.ai.autoconfigure.azure.CHAT_MODEL_NAME",
            "org.springframework.ai.autoconfigure.azure.EMBEDDING_MODEL_NAME": "org.springframework.ai.autoconfigure.azure.EMBEDDING_MODEL_NAME",
            "org.springframework.ai.autoconfigure.azure.contextRunner": "org.springframework.ai.autoconfigure.azure.contextRunner",
            "org.springframework.ai.autoconfigure.azure.systemMess": "org.springframework.ai.autoconfigure.azure.systemMess",
            "org.springframework.ai.autoconfigure.azure.userMess": "org.springframework.ai.autoconfigure.azure.userMess"
        },
        "package": "package org.springframework.ai.autoconfigure.azure;",
        "property_declarations": [
            "private static String CHAT_MODEL_NAME = \"gpt-35-turbo\";",
            "private static String EMBEDDING_MODEL_NAME = \"text-embedding-ada-002\";",
            "private final UserMessage userMessage = new UserMessage(\n\t\t\t\"Tell me about 3 famous pirates from the Golden Age of Piracy and why they did.\");",
            "private final Message systemMessage = new SystemPromptTemplate(\"\"\"\n\t\t\tYou are a helpful AI assistant. Your name is {name}.\n\t\t\tYou are an AI assistant that helps people find information.\n\t\t\tYour name is {name}\n\t\t\tYou should reply to the user's request with your name and also in the style of a {voice}.\n\t\t\t\"\"\").createMessage(Map.of(\"name\", \"Bob\", \"voice\", \"pirate\"));",
            "private final ApplicationContextRunner contextRunner = new ApplicationContextRunner().withPropertyValues(\n\t// @formatter:off\n\t\t\t\"spring.ai.azure.openai.api-key=\" + System.getenv(\"AZURE_OPENAI_API_KEY\"),\n\t\t\t\"spring.ai.azure.openai.endpoint=\" + System.getenv(\"AZURE_OPENAI_ENDPOINT\"),\n\n\t\t\t\"spring.ai.azure.openai.chat.options.deployment-name=\" + CHAT_MODEL_NAME,\n\t\t\t\"spring.ai.azure.openai.chat.options.temperature=0.8\",\n\t\t\t\"spring.ai.azure.openai.chat.options.maxTokens=123\",\n\n\t\t\t\"spring.ai.azure.openai.embedding.options.deployment-name=\" + EMBEDDING_MODEL_NAME\n\t\t\t// @formatter:on\n\t).withConfiguration(AutoConfigurations.of(AzureOpenAiAutoConfiguration.class));"
        ],
        "functions": [
            {
                "name": "chatCompletion",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\t\t\tAzureOpenAiChatClient chatClient = context.getBean(AzureOpenAiChatClient.class);\n\t\t\tChatResponse response = chatClient.call(new Prompt(List.of(userMessage, systemMessage)));\n\t\t\tassertThat(response.getResult().getOutput().getContent()).contains(\"Blackbeard\");\n\t\t});",
                "is_abstract": "",
                "class_name": "AzureOpenAiAutoConfigurationIT",
                "annotations": []
            },
            {
                "name": "chatCompletionStreaming",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\n\t\t\tAzureOpenAiChatClient chatClient = context.getBean(AzureOpenAiChatClient.class);\n\n\t\t\tFlux<ChatResponse> response = chatClient.stream(new Prompt(List.of(userMessage, systemMessage)));\n\n\t\t\tList<ChatResponse> responses = response.collectList().block();\n\t\t\tassertThat(responses.size()).isGreaterThan(1);\n\n\t\t\tString stitchedResponseContent = responses.stream()\n\t\t\t\t.map(ChatResponse::getResults)\n\t\t\t\t.flatMap(List::stream)\n\t\t\t\t.map(Generation::getOutput)\n\t\t\t\t.map(AssistantMessage::getContent)\n\t\t\t\t.collect(Collectors.joining());\n\n\t\t\tassertThat(stitchedResponseContent).contains(\"Blackbeard\");\n\t\t});",
                "is_abstract": "",
                "class_name": "AzureOpenAiAutoConfigurationIT",
                "annotations": []
            },
            {
                "name": "embedding",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\t\t\tAzureOpenAiEmbeddingClient embeddingClient = context.getBean(AzureOpenAiEmbeddingClient.class);\n\n\t\t\tEmbeddingResponse embeddingResponse = embeddingClient\n\t\t\t\t.embedForResponse(List.of(\"Hello World\", \"World is big and salvation is near\"));\n\t\t\tassertThat(embeddingResponse.getResults()).hasSize(2);\n\t\t\tassertThat(embeddingResponse.getResults().get(0).getOutput()).isNotEmpty();\n\t\t\tassertThat(embeddingResponse.getResults().get(0).getIndex()).isEqualTo(0);\n\t\t\tassertThat(embeddingResponse.getResults().get(1).getOutput()).isNotEmpty();\n\t\t\tassertThat(embeddingResponse.getResults().get(1).getIndex()).isEqualTo(1);\n\n\t\t\tassertThat(embeddingClient.dimensions()).isEqualTo(1536);\n\t\t});",
                "is_abstract": "",
                "class_name": "AzureOpenAiAutoConfigurationIT",
                "annotations": []
            },
            {
                "name": "chatActivation",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// Disable the chat auto-configuration.\n\t\tcontextRunner.withPropertyValues(\"spring.ai.azure.openai.chat.enabled=false\").run(context -> {\n\t\t\tassertThat(context.getBeansOfType(AzureOpenAiChatClient.class)).isEmpty();\n\t\t});\n\n\t\t// The chat auto-configuration is enabled by default.\n\t\tcontextRunner.run(context -> {\n\t\t\tassertThat(context.getBeansOfType(AzureOpenAiChatClient.class)).isNotEmpty();\n\t\t});\n\n\t\t// Explicitly enable the chat auto-configuration.\n\t\tcontextRunner.withPropertyValues(\"spring.ai.azure.openai.chat.enabled=true\").run(context -> {\n\t\t\tassertThat(context.getBeansOfType(AzureOpenAiChatClient.class)).isNotEmpty();\n\t\t});",
                "is_abstract": "",
                "class_name": "AzureOpenAiAutoConfigurationIT",
                "annotations": []
            },
            {
                "name": "embeddingActivation",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// Disable the embedding auto-configuration.\n\t\tcontextRunner.withPropertyValues(\"spring.ai.azure.openai.embedding.enabled=false\").run(context -> {\n\t\t\tassertThat(context.getBeansOfType(AzureOpenAiEmbeddingClient.class)).isEmpty();\n\t\t});\n\n\t\t// The embedding auto-configuration is enabled by default.\n\t\tcontextRunner.run(context -> {\n\t\t\tassertThat(context.getBeansOfType(AzureOpenAiEmbeddingClient.class)).isNotEmpty();\n\t\t});\n\n\t\t// Explicitly enable the embedding auto-configuration.\n\t\tcontextRunner.withPropertyValues(\"spring.ai.azure.openai.embedding.enabled=true\").run(context -> {\n\t\t\tassertThat(context.getBeansOfType(AzureOpenAiEmbeddingClient.class)).isNotEmpty();\n\t\t});",
                "is_abstract": "",
                "class_name": "AzureOpenAiAutoConfigurationIT",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/azure/AzureOpenAiAutoConfigurationPropertyTests.java",
        "class_names": [
            "AzureOpenAiAutoConfigurationPropertyTests"
        ],
        "imports": "import static org.assertj.core.api.Assertions.assertThat;\nimport org.springframework.ai.autoconfigure.azure.openai.AzureOpenAiChatProperties;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.autoconfigure.azure.openai.AzureOpenAiAutoConfiguration;\nimport org.springframework.boot.autoconfigure.AutoConfigurations;\nimport org.springframework.ai.autoconfigure.azure.openai.AzureOpenAiEmbeddingProperties;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport org.springframework.ai.autoconfigure.azure.openai.AzureOpenAiConnectionProperties;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.azure.AzureOpenAiAutoConfigurationPropertyTests": "org.springframework.ai.autoconfigure.azure.AzureOpenAiAutoConfigurationPropertyTests",
            "org.springframework.ai.autoconfigure.azure.embeddingPropertiesTest": "org.springframework.ai.autoconfigure.azure.embeddingPropertiesTest",
            "org.springframework.ai.autoconfigure.azure.chatPropertiesTest": "org.springframework.ai.autoconfigure.azure.chatPropertiesTest"
        },
        "package": "package org.springframework.ai.autoconfigure.azure;",
        "property_declarations": [],
        "functions": [
            {
                "name": "embeddingPropertiesTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "new ApplicationContextRunner()\n\t\t\t.withPropertyValues(\"spring.ai.azure.openai.api-key=TEST_API_KEY\",\n\t\t\t\t\t\"spring.ai.azure.openai.endpoint=TEST_ENDPOINT\",\n\t\t\t\t\t\"spring.ai.azure.openai.embedding.options.deployment-name=MODEL_XYZ\")\n\t\t\t.withConfiguration(AutoConfigurations.of(AzureOpenAiAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tvar chatProperties = context.getBean(AzureOpenAiEmbeddingProperties.class);\n\t\t\t\tvar connectionProperties = context.getBean(AzureOpenAiConnectionProperties.class);\n\n\t\t\t\tassertThat(connectionProperties.getApiKey()).isEqualTo(\"TEST_API_KEY\");\n\t\t\t\tassertThat(connectionProperties.getEndpoint()).isEqualTo(\"TEST_ENDPOINT\");\n\n\t\t\t\tassertThat(chatProperties.getOptions().getDeploymentName()).isEqualTo(\"MODEL_XYZ\");\n\t\t\t});",
                "is_abstract": "",
                "class_name": "AzureOpenAiAutoConfigurationPropertyTests",
                "annotations": []
            },
            {
                "name": "chatPropertiesTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "new ApplicationContextRunner().withPropertyValues(\n\t\t// @formatter:off\n\t\t\t\t\"spring.ai.azure.openai.api-key=API_KEY\",\n\t\t\t\t\"spring.ai.azure.openai.endpoint=ENDPOINT\",\n\n\t\t\t\t\"spring.ai.azure.openai.chat.options.deployment-name=MODEL_XYZ\",\n\t\t\t\t\"spring.ai.azure.openai.chat.options.frequencyPenalty=-1.5\",\n\t\t\t\t\"spring.ai.azure.openai.chat.options.logitBias.myTokenId=-5\",\n\t\t\t\t\"spring.ai.azure.openai.chat.options.maxTokens=123\",\n\t\t\t\t\"spring.ai.azure.openai.chat.options.n=10\",\n\t\t\t\t\"spring.ai.azure.openai.chat.options.presencePenalty=0\",\n\t\t\t\t\"spring.ai.azure.openai.chat.options.stop=boza,koza\",\n\t\t\t\t\"spring.ai.azure.openai.chat.options.temperature=0.55\",\n\t\t\t\t\"spring.ai.azure.openai.chat.options.topP=0.56\",\n\t\t\t\t\"spring.ai.azure.openai.chat.options.user=userXYZ\"\n\t\t\t\t)\n\t\t\t// @formatter:on\n\t\t\t.withConfiguration(AutoConfigurations.of(AzureOpenAiAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tvar chatProperties = context.getBean(AzureOpenAiChatProperties.class);\n\t\t\t\tvar connectionProperties = context.getBean(AzureOpenAiConnectionProperties.class);\n\t\t\t\tvar embeddingProperties = context.getBean(AzureOpenAiEmbeddingProperties.class);\n\n\t\t\t\tassertThat(connectionProperties.getEndpoint()).isEqualTo(\"ENDPOINT\");\n\t\t\t\tassertThat(connectionProperties.getApiKey()).isEqualTo(\"API_KEY\");\n\n\t\t\t\tassertThat(embeddingProperties.getOptions().getDeploymentName()).isEqualTo(\"text-embedding-ada-002\");\n\n\t\t\t\tassertThat(chatProperties.getOptions().getDeploymentName()).isEqualTo(\"MODEL_XYZ\");\n\t\t\t\tassertThat(chatProperties.getOptions().getFrequencyPenalty()).isEqualTo(-1.5f);\n\t\t\t\tassertThat(chatProperties.getOptions().getLogitBias().get(\"myTokenId\")).isEqualTo(-5);\n\t\t\t\tassertThat(chatProperties.getOptions().getMaxTokens()).isEqualTo(123);\n\t\t\t\tassertThat(chatProperties.getOptions().getN()).isEqualTo(10);\n\t\t\t\tassertThat(chatProperties.getOptions().getPresencePenalty()).isEqualTo(0);\n\t\t\t\tassertThat(chatProperties.getOptions().getStop()).contains(\"boza\", \"koza\");\n\t\t\t\tassertThat(chatProperties.getOptions().getTemperature()).isEqualTo(0.55f);\n\t\t\t\tassertThat(chatProperties.getOptions().getTopP()).isEqualTo(0.56f);\n\n\t\t\t\tassertThat(chatProperties.getOptions().getUser()).isEqualTo(\"userXYZ\");\n\t\t\t});",
                "is_abstract": "",
                "class_name": "AzureOpenAiAutoConfigurationPropertyTests",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/azure/tool/MockWeatherService.java",
        "class_names": [
            "MockWeatherService"
        ],
        "imports": "import com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport com.fasterxml.jackson.annotation.JsonPropertyDescription;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport java.util.function.Function;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport com.fasterxml.jackson.annotation.JsonClassDescription;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.azure.tool.MockWeatherServi": "org.springframework.ai.autoconfigure.azure.tool.MockWeatherServi",
            "org.springframework.ai.autoconfigure.azure.tool.apply": "org.springframework.ai.autoconfigure.azure.tool.apply",
            "org.springframework.ai.autoconfigure.azure.tool.unitNam": "org.springframework.ai.autoconfigure.azure.tool.unitNam"
        },
        "package": "package org.springframework.ai.autoconfigure.azure.tool;",
        "property_declarations": [
            "public final String unitName;"
        ],
        "functions": [
            {
                "name": "apply",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "double temperature = 0;\n\t\tif (request.location().contains(\"Paris\")) {\n\t\t\ttemperature = 15;\n\t\t}\n\t\telse if (request.location().contains(\"Tokyo\")) {\n\t\t\ttemperature = 10;\n\t\t}\n\t\telse if (request.location().contains(\"San Francisco\")) {\n\t\t\ttemperature = 30;\n\t\t}\n\n\t\treturn new Response(temperature, 15, 20, 2, 53, 45, Unit.C);",
                "is_abstract": "",
                "class_name": "MockWeatherService",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/azure/tool/FunctionCallWithFunctionWrapperIT.java",
        "class_names": [
            "Config",
            "FunctionCallWithFunctionWrapperIT"
        ],
        "imports": "import org.springframework.ai.chat.prompt.Prompt;\nimport java.util.List;\nimport org.springframework.ai.chat.messages.UserMessage;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.ai.azure.openai.AzureOpenAiChatClient;\nimport org.springframework.context.annotation.Bean;\nimport org.slf4j.Logger;\nimport org.springframework.ai.model.function.FunctionCallback;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.autoconfigure.azure.openai.AzureOpenAiAutoConfiguration;\nimport org.springframework.ai.azure.openai.AzureOpenAiChatOptions;\nimport org.springframework.boot.autoconfigure.AutoConfigurations;\nimport org.springframework.context.annotation.Configuration;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport org.springframework.ai.chat.ChatResponse;\nimport org.springframework.ai.model.function.FunctionCallbackWrapper;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.azure.tool.FunctionCallWithFunctionWrapperIT": "org.springframework.ai.autoconfigure.azure.tool.FunctionCallWithFunctionWrapperIT",
            "org.springframework.ai.autoconfigure.azure.tool.Confi": "org.springframework.ai.autoconfigure.azure.tool.Confi",
            "org.springframework.ai.autoconfigure.azure.tool.functionCallTest": "org.springframework.ai.autoconfigure.azure.tool.functionCallTest",
            "org.springframework.ai.autoconfigure.azure.tool.weatherFunctionInfo": "org.springframework.ai.autoconfigure.azure.tool.weatherFunctionInfo",
            "org.springframework.ai.autoconfigure.azure.tool.logger": "org.springframework.ai.autoconfigure.azure.tool.logger",
            "org.springframework.ai.autoconfigure.azure.tool.contextRunner": "org.springframework.ai.autoconfigure.azure.tool.contextRunner"
        },
        "package": "package org.springframework.ai.autoconfigure.azure.tool;",
        "property_declarations": [
            "private final Logger logger = LoggerFactory.getLogger(FunctionCallWithFunctionWrapperIT.class);",
            "private final ApplicationContextRunner contextRunner = new ApplicationContextRunner().withPropertyValues(\n\t// @formatter:off\n\t\t\t\"spring.ai.azure.openai.api-key=\" + System.getenv(\"AZURE_OPENAI_API_KEY\"),\n\t\t\t\"spring.ai.azure.openai.endpoint=\" + System.getenv(\"AZURE_OPENAI_ENDPOINT\"))\n\t\t\t// @formatter:onn\n\t\t.withConfiguration(AutoConfigurations.of(AzureOpenAiAutoConfiguration.class))\n\t\t.withUserConfiguration(Config.class);"
        ],
        "functions": [
            {
                "name": "functionCallTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.withPropertyValues(\"spring.ai.azure.openai.chat.options.model=gpt-4-0125-preview\")\n\t\t\t.run(context -> {\n\n\t\t\t\tAzureOpenAiChatClient chatClient = context.getBean(AzureOpenAiChatClient.class);\n\n\t\t\t\tUserMessage userMessage = new UserMessage(\n\t\t\t\t\t\t\"What's the weather like in San Francisco, Paris and in Tokyo?\");\n\n\t\t\t\tChatResponse response = chatClient.call(new Prompt(List.of(userMessage),\n\t\t\t\t\t\tAzureOpenAiChatOptions.builder().withFunction(\"WeatherInfo\").build()));\n\n\t\t\t\tlogger.info(\"Response: {}\", response);\n\n\t\t\t\tassertThat(response.getResult().getOutput().getContent()).containsAnyOf(\"30.0\", \"30\");\n\t\t\t\tassertThat(response.getResult().getOutput().getContent()).containsAnyOf(\"10.0\", \"10\");\n\t\t\t\tassertThat(response.getResult().getOutput().getContent()).containsAnyOf(\"15\", \"15.0\");\n\n\t\t\t});",
                "is_abstract": "",
                "class_name": "FunctionCallWithFunctionWrapperIT",
                "annotations": []
            },
            {
                "name": "weatherFunctionInfo",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return FunctionCallbackWrapper.builder(new MockWeatherService())\n\t\t\t\t.withName(\"WeatherInfo\")\n\t\t\t\t.withDescription(\"Get the current weather in a given location\")\n\t\t\t\t.build();",
                "is_abstract": "",
                "class_name": "FunctionCallWithFunctionWrapperIT Config",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/azure/tool/FunctionCallWithFunctionBeanIT.java",
        "class_names": [
            "Config",
            "FunctionCallWithFunctionBeanIT"
        ],
        "imports": "import java.util.List;\nimport org.springframework.ai.chat.ChatClient;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.slf4j.Logger;\nimport org.springframework.ai.autoconfigure.azure.openai.AzureOpenAiAutoConfiguration;\nimport java.util.function.Function;\nimport org.springframework.ai.azure.openai.AzureOpenAiChatOptions;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.ai.chat.ChatResponse;\nimport org.springframework.ai.chat.messages.UserMessage;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.ai.azure.openai.AzureOpenAiChatClient;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.ai.chat.prompt.Prompt;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.autoconfigure.AutoConfigurations;\nimport org.springframework.context.annotation.Description;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.azure.tool.FunctionCallWithFunctionBeanIT": "org.springframework.ai.autoconfigure.azure.tool.FunctionCallWithFunctionBeanIT",
            "org.springframework.ai.autoconfigure.azure.tool.Confi": "org.springframework.ai.autoconfigure.azure.tool.Confi",
            "org.springframework.ai.autoconfigure.azure.tool.functionCallTest": "org.springframework.ai.autoconfigure.azure.tool.functionCallTest",
            "org.springframework.ai.autoconfigure.azure.tool.Description": "org.springframework.ai.autoconfigure.azure.tool.Description",
            "org.springframework.ai.autoconfigure.azure.tool.weatherFunction3": "org.springframework.ai.autoconfigure.azure.tool.weatherFunction3",
            "org.springframework.ai.autoconfigure.azure.tool.logger": "org.springframework.ai.autoconfigure.azure.tool.logger",
            "org.springframework.ai.autoconfigure.azure.tool.contextRunner": "org.springframework.ai.autoconfigure.azure.tool.contextRunner"
        },
        "package": "package org.springframework.ai.autoconfigure.azure.tool;",
        "property_declarations": [
            "private final ApplicationContextRunner contextRunner = new ApplicationContextRunner().withPropertyValues(\n\t// @formatter:off\n\t\t\t\"spring.ai.azure.openai.api-key=\" + System.getenv(\"AZURE_OPENAI_API_KEY\"),\n\t\t\t\"spring.ai.azure.openai.endpoint=\" + System.getenv(\"AZURE_OPENAI_ENDPOINT\"))\n\t\t\t// @formatter:onn\n\t\t.withConfiguration(AutoConfigurations.of(AzureOpenAiAutoConfiguration.class))\n\t\t.withUserConfiguration(Config.class);",
            "private final Logger logger = LoggerFactory.getLogger(FunctionCallWithFunctionBeanIT.class);"
        ],
        "functions": [
            {
                "name": "functionCallTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.withPropertyValues(\"spring.ai.azure.openai.chat.options.model=gpt-4-0125-preview\")\n\t\t\t.run(context -> {\n\n\t\t\t\tChatClient chatClient = context.getBean(AzureOpenAiChatClient.class);\n\n\t\t\t\tUserMessage userMessage = new UserMessage(\n\t\t\t\t\t\t\"What's the weather like in San Francisco, Paris and in Tokyo? Use Multi-turn function calling.\");\n\n\t\t\t\tChatResponse response = chatClient.call(new Prompt(List.of(userMessage),\n\t\t\t\t\t\tAzureOpenAiChatOptions.builder().withFunction(\"weatherFunction\").build()));\n\n\t\t\t\tlogger.info(\"Response: {}\", response);\n\n\t\t\t\tassertThat(response.getResult().getOutput().getContent()).contains(\"30\", \"10\", \"15\");\n\n\t\t\t\tresponse = chatClient.call(new Prompt(List.of(userMessage),\n\t\t\t\t\t\tAzureOpenAiChatOptions.builder().withFunction(\"weatherFunction3\").build()));\n\n\t\t\t\tlogger.info(\"Response: {}\", response);\n\n\t\t\t\tassertThat(response.getResult().getOutput().getContent()).contains(\"30\", \"10\", \"15\");\n\n\t\t\t});",
                "is_abstract": "",
                "class_name": "FunctionCallWithFunctionBeanIT",
                "annotations": []
            },
            {
                "name": "Description",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new MockWeatherService();",
                "is_abstract": "",
                "class_name": "FunctionCallWithFunctionBeanIT Config",
                "annotations": [
                    "@Description(\"Get the weather in location\")"
                ]
            },
            {
                "name": "weatherFunction3",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "MockWeatherService weatherService = new MockWeatherService();\n\t\t\treturn (weatherService::apply);",
                "is_abstract": "",
                "class_name": "FunctionCallWithFunctionBeanIT Config",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/azure/tool/FunctionCallWithPromptFunctionIT.java",
        "class_names": [
            "FunctionCallWithPromptFunctionIT"
        ],
        "imports": "import org.springframework.ai.chat.prompt.Prompt;\nimport java.util.List;\nimport org.springframework.ai.chat.messages.UserMessage;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.ai.azure.openai.AzureOpenAiChatClient;\nimport org.slf4j.Logger;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.autoconfigure.azure.openai.AzureOpenAiAutoConfiguration;\nimport org.springframework.ai.azure.openai.AzureOpenAiChatOptions;\nimport org.springframework.boot.autoconfigure.AutoConfigurations;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport org.springframework.ai.chat.ChatResponse;\nimport org.springframework.ai.model.function.FunctionCallbackWrapper;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.azure.tool.FunctionCallWithPromptFunctionIT": "org.springframework.ai.autoconfigure.azure.tool.FunctionCallWithPromptFunctionIT",
            "org.springframework.ai.autoconfigure.azure.tool.functionCallTest": "org.springframework.ai.autoconfigure.azure.tool.functionCallTest",
            "org.springframework.ai.autoconfigure.azure.tool.logger": "org.springframework.ai.autoconfigure.azure.tool.logger",
            "org.springframework.ai.autoconfigure.azure.tool.contextRunner": "org.springframework.ai.autoconfigure.azure.tool.contextRunner"
        },
        "package": "package org.springframework.ai.autoconfigure.azure.tool;",
        "property_declarations": [
            "private final ApplicationContextRunner contextRunner = new ApplicationContextRunner().withPropertyValues(\n\t// @formatter:off\n\t\t\t\t\"spring.ai.azure.openai.api-key=\" + System.getenv(\"AZURE_OPENAI_API_KEY\"),\n\t\t\t\t\"spring.ai.azure.openai.endpoint=\" + System.getenv(\"AZURE_OPENAI_ENDPOINT\"))\n\t\t\t\t// @formatter:onn\n\t\t.withConfiguration(AutoConfigurations.of(AzureOpenAiAutoConfiguration.class));",
            "private final Logger logger = LoggerFactory.getLogger(FunctionCallWithPromptFunctionIT.class);"
        ],
        "functions": [
            {
                "name": "functionCallTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.withPropertyValues(\"spring.ai.azure.openai.chat.options.model=gpt-4-0125-preview\")\n\t\t\t.run(context -> {\n\n\t\t\t\tAzureOpenAiChatClient chatClient = context.getBean(AzureOpenAiChatClient.class);\n\n\t\t\t\tUserMessage userMessage = new UserMessage(\n\t\t\t\t\t\t\"What's the weather like in San Francisco, in Paris and in Tokyo? Use Multi-turn function calling.\");\n\n\t\t\t\tvar promptOptions = AzureOpenAiChatOptions.builder()\n\t\t\t\t\t.withFunctionCallbacks(List.of(FunctionCallbackWrapper.builder(new MockWeatherService())\n\t\t\t\t\t\t.withName(\"CurrentWeatherService\")\n\t\t\t\t\t\t.withDescription(\"Get the weather in location\")\n\t\t\t\t\t\t.build()))\n\t\t\t\t\t.build();\n\n\t\t\t\tChatResponse response = chatClient.call(new Prompt(List.of(userMessage), promptOptions));\n\n\t\t\t\tlogger.info(\"Response: {}\", response);\n\n\t\t\t\tassertThat(response.getResult().getOutput().getContent()).contains(\"30\", \"10\", \"15\");\n\t\t\t});",
                "is_abstract": "",
                "class_name": "FunctionCallWithPromptFunctionIT",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/postgresml/PostgresMlEmbeddingPropertiesTests.java",
        "class_names": [
            "TestConfiguration",
            "PostgresMlEmbeddingPropertiesTests"
        ],
        "imports": "import org.springframework.ai.document.MetadataMode;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport java.util.Map;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.postgresml.PostgresMlEmbeddingClient;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.boot.SpringBootConfiguration;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.postgresml.PostgresMlEmbeddingPropertiesTests": "org.springframework.ai.autoconfigure.postgresml.PostgresMlEmbeddingPropertiesTests",
            "org.springframework.ai.autoconfigure.postgresml.TestConfiguration": "org.springframework.ai.autoconfigure.postgresml.TestConfiguration",
            "org.springframework.ai.autoconfigure.postgresml.postgresMlPropertiesAreCorrect": "org.springframework.ai.autoconfigure.postgresml.postgresMlPropertiesAreCorrect",
            "org.springframework.ai.autoconfigure.postgresml.privat": "org.springframework.ai.autoconfigure.postgresml.privat"
        },
        "package": "package org.springframework.ai.autoconfigure.postgresml;",
        "property_declarations": [
            "@Autowired\n\tprivate PostgresMlEmbeddingProperties postgresMlProperties;"
        ],
        "functions": [
            {
                "name": "postgresMlPropertiesAreCorrect",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "assertThat(this.postgresMlProperties).isNotNull();\n\t\tassertThat(this.postgresMlProperties.getOptions().getTransformer()).isEqualTo(\"abc123\");\n\t\tassertThat(this.postgresMlProperties.getOptions().getVectorType())\n\t\t\t.isEqualTo(PostgresMlEmbeddingClient.VectorType.PG_ARRAY);\n\t\tassertThat(this.postgresMlProperties.getOptions().getKwargs())\n\t\t\t.isEqualTo(Map.of(\"key1\", \"value1\", \"key2\", \"value2\"));\n\t\tassertThat(this.postgresMlProperties.getOptions().getMetadataMode()).isEqualTo(MetadataMode.ALL);",
                "is_abstract": "",
                "class_name": "PostgresMlEmbeddingPropertiesTests",
                "annotations": [
                    "@EnableConfigurationProperties(PostgresMlEmbeddingProperties.class)"
                ]
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/postgresml/PostgresMlAutoConfigurationIT.java",
        "class_names": [
            "PostgresMlAutoConfigurationIT"
        ],
        "imports": "import org.springframework.jdbc.core.JdbcTemplate;\nimport java.util.List;\nimport org.junit.jupiter.api.Disabled;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.testcontainers.service.connection.ServiceConnection;\nimport org.testcontainers.containers.wait.strategy.LogMessageWaitStrategy;\nimport org.springframework.ai.embedding.EmbeddingResponse;\nimport java.time.Duration;\nimport org.springframework.boot.test.autoconfigure.jdbc.JdbcTest;\nimport org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;\nimport java.time.temporal.ChronoUnit;\nimport org.testcontainers.junit.jupiter.Testcontainers;\nimport org.testcontainers.utility.DockerImageName;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.postgresml.PostgresMlEmbeddingClient;\nimport org.testcontainers.junit.jupiter.Container;\nimport org.springframework.boot.autoconfigure.AutoConfigurations;\nimport org.testcontainers.containers.PostgreSQLContainer;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.postgresml.PostgresMlAutoConfigurationIT": "org.springframework.ai.autoconfigure.postgresml.PostgresMlAutoConfigurationIT",
            "org.springframework.ai.autoconfigure.postgresml.embeddin": "org.springframework.ai.autoconfigure.postgresml.embeddin",
            "org.springframework.ai.autoconfigure.postgresml.embeddingActivation": "org.springframework.ai.autoconfigure.postgresml.embeddingActivation",
            "org.springframework.ai.autoconfigure.postgresml.stati": "org.springframework.ai.autoconfigure.postgresml.stati",
            "org.springframework.ai.autoconfigure.postgresml.JdbcTemplat": "org.springframework.ai.autoconfigure.postgresml.JdbcTemplat"
        },
        "package": "package org.springframework.ai.autoconfigure.postgresml;",
        "property_declarations": [
            "@Autowired\n\tJdbcTemplate jdbcTemplate;",
            "@Container\n\t@ServiceConnection\n\tstatic PostgreSQLContainer<?> postgres = new PostgreSQLContainer<>(\n\t\t\tDockerImageName.parse(\"ghcr.io/postgresml/postgresml:2.8.1\").asCompatibleSubstituteFor(\"postgres\"))\n\t\t.withCommand(\"sleep\", \"infinity\")\n\t\t.withLabel(\"org.springframework.boot.service-connection\", \"postgres\")\n\t\t.withUsername(\"postgresml\")\n\t\t.withPassword(\"postgresml\")\n\t\t.withDatabaseName(\"postgresml\")\n\t\t.waitingFor(new LogMessageWaitStrategy().withRegEx(\".*Starting dashboard.*\\\\s\")\n\t\t\t.withStartupTimeout(Duration.of(60, ChronoUnit.SECONDS)));"
        ],
        "functions": [
            {
                "name": "embedding",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t\t.withBean(JdbcTemplate.class, () -> jdbcTemplate)\n\t\t\t.withConfiguration(AutoConfigurations.of(PostgresMlAutoConfiguration.class));\n\t\tcontextRunner.run(context -> {\n\t\t\tPostgresMlEmbeddingClient embeddingClient = context.getBean(PostgresMlEmbeddingClient.class);\n\n\t\t\tEmbeddingResponse embeddingResponse = embeddingClient\n\t\t\t\t.embedForResponse(List.of(\"Hello World\", \"World is big and salvation is near\"));\n\t\t\tassertThat(embeddingResponse.getResults()).hasSize(2);\n\t\t\tassertThat(embeddingResponse.getResults().get(0).getOutput()).isNotEmpty();\n\t\t\tassertThat(embeddingResponse.getResults().get(0).getIndex()).isZero();\n\t\t\tassertThat(embeddingResponse.getResults().get(1).getOutput()).isNotEmpty();\n\t\t\tassertThat(embeddingResponse.getResults().get(1).getIndex()).isEqualTo(1);\n\n\t\t\tassertThat(embeddingClient.dimensions()).isEqualTo(768);\n\t\t});",
                "is_abstract": "",
                "class_name": "PostgresMlAutoConfigurationIT",
                "annotations": []
            },
            {
                "name": "embeddingActivation",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "new ApplicationContextRunner().withBean(JdbcTemplate.class, () -> jdbcTemplate)\n\t\t\t.withConfiguration(AutoConfigurations.of(PostgresMlAutoConfiguration.class))\n\t\t\t.withPropertyValues(\"spring.ai.postgresml.embedding.enabled=false\")\n\t\t\t.run(context -> {\n\t\t\t\tassertThat(context.getBeansOfType(PostgresMlEmbeddingProperties.class)).isNotEmpty();\n\t\t\t\tassertThat(context.getBeansOfType(PostgresMlEmbeddingClient.class)).isEmpty();\n\t\t\t});\n\n\t\tnew ApplicationContextRunner().withBean(JdbcTemplate.class, () -> jdbcTemplate)\n\t\t\t.withConfiguration(AutoConfigurations.of(PostgresMlAutoConfiguration.class))\n\t\t\t.withPropertyValues(\"spring.ai.postgresml.embedding.enabled=true\")\n\t\t\t.run(context -> {\n\t\t\t\tassertThat(context.getBeansOfType(PostgresMlEmbeddingProperties.class)).isNotEmpty();\n\t\t\t\tassertThat(context.getBeansOfType(PostgresMlEmbeddingClient.class)).isNotEmpty();\n\t\t\t});\n\n\t\tnew ApplicationContextRunner().withBean(JdbcTemplate.class, () -> jdbcTemplate)\n\t\t\t.withConfiguration(AutoConfigurations.of(PostgresMlAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tassertThat(context.getBeansOfType(PostgresMlEmbeddingProperties.class)).isNotEmpty();\n\t\t\t\tassertThat(context.getBeansOfType(PostgresMlEmbeddingClient.class)).isNotEmpty();\n\t\t\t});",
                "is_abstract": "",
                "class_name": "PostgresMlAutoConfigurationIT",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/stabilityai/StabilityAiAutoConfigurationIT.java",
        "class_names": [
            "StabilityAiAutoConfigurationIT"
        ],
        "imports": "import static org.assertj.core.api.Assertions.assertThat;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.autoconfigure.AutoConfigurations;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport org.springframework.ai.stabilityai.StyleEnum;\nimport org.springframework.ai.image.*;\nimport org.springframework.ai.stabilityai.api.StabilityAiImageOptions;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.stabilityai.StabilityAiAutoConfigurationIT": "org.springframework.ai.autoconfigure.stabilityai.StabilityAiAutoConfigurationIT",
            "org.springframework.ai.autoconfigure.stabilityai.generat": "org.springframework.ai.autoconfigure.stabilityai.generat",
            "org.springframework.ai.autoconfigure.stabilityai.contextRunner": "org.springframework.ai.autoconfigure.stabilityai.contextRunner"
        },
        "package": "package org.springframework.ai.autoconfigure.stabilityai;",
        "property_declarations": [
            "private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t.withPropertyValues(\"spring.ai.stabilityai.image.api-key=\" + System.getenv(\"STABILITYAI_API_KEY\"))\n\t\t.withConfiguration(AutoConfigurations.of(StabilityAiImageAutoConfiguration.class));"
        ],
        "functions": [
            {
                "name": "generate",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\t\t\tImageClient imageClient = context.getBean(ImageClient.class);\n\t\t\tStabilityAiImageOptions imageOptions = StabilityAiImageOptions.builder()\n\t\t\t\t.withStylePreset(StyleEnum.PHOTOGRAPHIC)\n\t\t\t\t.build();\n\n\t\t\tvar instructions = \"\"\"\n\t\t\t\t\tA light cream colored mini golden doodle.\n\t\t\t\t\t\"\"\";\n\n\t\t\tImagePrompt imagePrompt = new ImagePrompt(instructions, imageOptions);\n\t\t\tImageResponse imageResponse = imageClient.call(imagePrompt);\n\n\t\t\tImageGeneration imageGeneration = imageResponse.getResult();\n\t\t\tImage image = imageGeneration.getOutput();\n\n\t\t\tassertThat(image.getB64Json()).isNotEmpty();\n\t\t});",
                "is_abstract": "",
                "class_name": "StabilityAiAutoConfigurationIT",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/stabilityai/StabilityAiImagePropertiesTests.java",
        "class_names": [
            "StabilityAiImagePropertiesTests"
        ],
        "imports": "import static org.assertj.core.api.Assertions.assertThat;\nimport org.springframework.ai.stabilityai.StabilityAiImageClient;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.autoconfigure.AutoConfigurations;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.stabilityai.StabilityAiImagePropertiesTests": "org.springframework.ai.autoconfigure.stabilityai.StabilityAiImagePropertiesTests",
            "org.springframework.ai.autoconfigure.stabilityai.chatPropertiesTest": "org.springframework.ai.autoconfigure.stabilityai.chatPropertiesTest",
            "org.springframework.ai.autoconfigure.stabilityai.stabilityImageActivation": "org.springframework.ai.autoconfigure.stabilityai.stabilityImageActivation"
        },
        "package": "package org.springframework.ai.autoconfigure.stabilityai;",
        "property_declarations": [],
        "functions": [
            {
                "name": "chatPropertiesTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "new ApplicationContextRunner().withPropertyValues(\n\t\t// @formatter:off\n\t  \"spring.ai.stabilityai.image.api-key=API_KEY\",\n\t\t\t\t\"spring.ai.stabilityai.image.base-url=ENDPOINT\",\n\t\t\t\t\"spring.ai.stabilityai.image.options.n=10\",\n\t\t\t\t\"spring.ai.stabilityai.image.options.model=MODEL_XYZ\",\n\t\t\t\t\"spring.ai.stabilityai.image.options.width=512\",\n\t\t\t\t\"spring.ai.stabilityai.image.options.height=256\",\n\t\t\t\t\"spring.ai.stabilityai.image.options.response-format=application/json\",\n\t\t\t\t\"spring.ai.stabilityai.image.options.n=4\",\n\t\t\t\t\"spring.ai.stabilityai.image.options.cfg-scale=7\",\n\t\t\t\t\"spring.ai.stabilityai.image.options.clip-guidance-preset=SIMPLE\",\n\t\t\t\t\"spring.ai.stabilityai.image.options.sampler=K_EULER\",\n\t\t\t\t\"spring.ai.stabilityai.image.options.seed=0\",\n\t\t\t\t\"spring.ai.stabilityai.image.options.steps=30\",\n\t\t\t\t\"spring.ai.stabilityai.image.options.style-preset=neon-punk\"\n\t\t\t\t)\n\t\t\t// @formatter:on\n\t\t\t.withConfiguration(AutoConfigurations.of(StabilityAiImageAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tvar chatProperties = context.getBean(StabilityAiImageProperties.class);\n\n\t\t\t\tassertThat(chatProperties.getBaseUrl()).isEqualTo(\"ENDPOINT\");\n\t\t\t\tassertThat(chatProperties.getApiKey()).isEqualTo(\"API_KEY\");\n\t\t\t\tassertThat(chatProperties.getOptions().getModel()).isEqualTo(\"MODEL_XYZ\");\n\n\t\t\t\tassertThat(chatProperties.getOptions().getWidth()).isEqualTo(512);\n\t\t\t\tassertThat(chatProperties.getOptions().getHeight()).isEqualTo(256);\n\t\t\t\tassertThat(chatProperties.getOptions().getResponseFormat()).isEqualTo(\"application/json\");\n\t\t\t\tassertThat(chatProperties.getOptions().getN()).isEqualTo(4);\n\t\t\t\tassertThat(chatProperties.getOptions().getCfgScale()).isEqualTo(7);\n\t\t\t\tassertThat(chatProperties.getOptions().getClipGuidancePreset()).isEqualTo(\"SIMPLE\");\n\t\t\t\tassertThat(chatProperties.getOptions().getSampler()).isEqualTo(\"K_EULER\");\n\t\t\t\tassertThat(chatProperties.getOptions().getSeed()).isEqualTo(0);\n\t\t\t\tassertThat(chatProperties.getOptions().getSteps()).isEqualTo(30);\n\t\t\t\tassertThat(chatProperties.getOptions().getStylePreset()).isEqualTo(\"neon-punk\");\n\t\t\t});",
                "is_abstract": "",
                "class_name": "StabilityAiImagePropertiesTests",
                "annotations": []
            },
            {
                "name": "stabilityImageActivation",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "new ApplicationContextRunner()\n\t\t\t.withPropertyValues(\"spring.ai.stabilityai.image.api-key=API_KEY\",\n\t\t\t\t\t\"spring.ai.stabilityai.image.base-url=ENDPOINT\", \"spring.ai.stabilityai.image.enabled=false\")\n\t\t\t.withConfiguration(AutoConfigurations.of(StabilityAiImageAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tassertThat(context.getBeansOfType(StabilityAiImageProperties.class)).isNotEmpty();\n\t\t\t\tassertThat(context.getBeansOfType(StabilityAiImageClient.class)).isEmpty();\n\n\t\t\t});\n\n\t\tnew ApplicationContextRunner()\n\t\t\t.withPropertyValues(\"spring.ai.stabilityai.image.api-key=API_KEY\",\n\t\t\t\t\t\"spring.ai.stabilityai.image.base-url=ENDPOINT\")\n\t\t\t.withConfiguration(AutoConfigurations.of(StabilityAiImageAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tassertThat(context.getBeansOfType(StabilityAiImageProperties.class)).isNotEmpty();\n\t\t\t\tassertThat(context.getBeansOfType(StabilityAiImageClient.class)).isNotEmpty();\n\n\t\t\t});\n\n\t\tnew ApplicationContextRunner()\n\t\t\t.withPropertyValues(\"spring.ai.stabilityai.image.api-key=API_KEY\",\n\t\t\t\t\t\"spring.ai.stabilityai.image.base-url=ENDPOINT\", \"spring.ai.stabilityai.image.enabled=true\")\n\t\t\t.withConfiguration(AutoConfigurations.of(StabilityAiImageAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tassertThat(context.getBeansOfType(StabilityAiImageProperties.class)).isNotEmpty();\n\t\t\t\tassertThat(context.getBeansOfType(StabilityAiImageClient.class)).isNotEmpty();\n\n\t\t\t});",
                "is_abstract": "",
                "class_name": "StabilityAiImagePropertiesTests",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/bedrock/cohere/BedrockCohereChatAutoConfigurationIT.java",
        "class_names": [
            "BedrockCohereChatAutoConfigurationIT"
        ],
        "imports": "import java.util.stream.Collectors;\nimport java.util.List;\nimport org.springframework.ai.chat.Generation;\nimport reactor.core.publisher.Flux;\nimport org.springframework.ai.chat.prompt.SystemPromptTemplate;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport org.springframework.ai.chat.messages.Message;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport software.amazon.awssdk.regions.Region;\nimport java.util.Map;\nimport org.springframework.ai.autoconfigure.bedrock.BedrockAwsConnectionProperties;\nimport org.springframework.ai.chat.ChatResponse;\nimport org.springframework.ai.bedrock.cohere.api.CohereChatBedrockApi.CohereChatRequest.ReturnLikelihoods;\nimport org.springframework.ai.chat.messages.UserMessage;\nimport org.springframework.ai.chat.messages.AssistantMessage;\nimport org.springframework.ai.bedrock.cohere.api.CohereChatBedrockApi.CohereChatRequest.Truncate;\nimport org.springframework.ai.chat.prompt.Prompt;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.autoconfigure.AutoConfigurations;\nimport org.springframework.ai.bedrock.cohere.BedrockCohereChatClient;\nimport org.springframework.ai.bedrock.cohere.api.CohereChatBedrockApi.CohereChatModel;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.bedrock.cohere.BedrockCohereChatAutoConfigurationIT": "org.springframework.ai.autoconfigure.bedrock.cohere.BedrockCohereChatAutoConfigurationIT",
            "org.springframework.ai.autoconfigure.bedrock.cohere.chatCompletion": "org.springframework.ai.autoconfigure.bedrock.cohere.chatCompletion",
            "org.springframework.ai.autoconfigure.bedrock.cohere.chatCompletionStreamin": "org.springframework.ai.autoconfigure.bedrock.cohere.chatCompletionStreamin",
            "org.springframework.ai.autoconfigure.bedrock.cohere.propertiesTest": "org.springframework.ai.autoconfigure.bedrock.cohere.propertiesTest",
            "org.springframework.ai.autoconfigure.bedrock.cohere.chatCompletionDisabled": "org.springframework.ai.autoconfigure.bedrock.cohere.chatCompletionDisabled",
            "org.springframework.ai.autoconfigure.bedrock.cohere.contextRunner": "org.springframework.ai.autoconfigure.bedrock.cohere.contextRunner",
            "org.springframework.ai.autoconfigure.bedrock.cohere.systemMess": "org.springframework.ai.autoconfigure.bedrock.cohere.systemMess",
            "org.springframework.ai.autoconfigure.bedrock.cohere.userMess": "org.springframework.ai.autoconfigure.bedrock.cohere.userMess"
        },
        "package": "package org.springframework.ai.autoconfigure.bedrock.cohere;",
        "property_declarations": [
            "private final Message systemMessage = new SystemPromptTemplate(\"\"\"\n\t\t\tYou are a helpful AI assistant. Your name is {name}.\n\t\t\tYou are an AI assistant that helps people find information.\n\t\t\tYour name is {name}\n\t\t\tYou should reply to the user's request with your name and also in the style of a {voice}.\n\t\t\t\"\"\").createMessage(Map.of(\"name\", \"Bob\", \"voice\", \"pirate\"));",
            "private final UserMessage userMessage = new UserMessage(\n\t\t\t\"Tell me about 3 famous pirates from the Golden Age of Piracy and why they did.\");",
            "private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t.withPropertyValues(\"spring.ai.bedrock.cohere.chat.enabled=true\",\n\t\t\t\t\"spring.ai.bedrock.aws.access-key=\" + System.getenv(\"AWS_ACCESS_KEY_ID\"),\n\t\t\t\t\"spring.ai.bedrock.aws.secret-key=\" + System.getenv(\"AWS_SECRET_ACCESS_KEY\"),\n\t\t\t\t\"spring.ai.bedrock.aws.region=\" + Region.US_EAST_1.id(),\n\t\t\t\t\"spring.ai.bedrock.cohere.chat.model=\" + CohereChatModel.COHERE_COMMAND_V14.id(),\n\t\t\t\t\"spring.ai.bedrock.cohere.chat.options.temperature=0.5\",\n\t\t\t\t\"spring.ai.bedrock.cohere.chat.options.maxTokens=500\")\n\t\t.withConfiguration(AutoConfigurations.of(BedrockCohereChatAutoConfiguration.class));"
        ],
        "functions": [
            {
                "name": "chatCompletion",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\t\t\tBedrockCohereChatClient cohereChatClient = context.getBean(BedrockCohereChatClient.class);\n\t\t\tChatResponse response = cohereChatClient.call(new Prompt(List.of(userMessage, systemMessage)));\n\t\t\tassertThat(response.getResult().getOutput().getContent()).contains(\"Blackbeard\");\n\t\t});",
                "is_abstract": "",
                "class_name": "BedrockCohereChatAutoConfigurationIT",
                "annotations": []
            },
            {
                "name": "chatCompletionStreaming",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\n\t\t\tBedrockCohereChatClient cohereChatClient = context.getBean(BedrockCohereChatClient.class);\n\n\t\t\tFlux<ChatResponse> response = cohereChatClient.stream(new Prompt(List.of(userMessage, systemMessage)));\n\n\t\t\tList<ChatResponse> responses = response.collectList().block();\n\t\t\tassertThat(responses.size()).isGreaterThan(2);\n\n\t\t\tString stitchedResponseContent = responses.stream()\n\t\t\t\t.map(ChatResponse::getResults)\n\t\t\t\t.flatMap(List::stream)\n\t\t\t\t.map(Generation::getOutput)\n\t\t\t\t.map(AssistantMessage::getContent)\n\t\t\t\t.collect(Collectors.joining());\n\n\t\t\tassertThat(stitchedResponseContent).contains(\"Blackbeard\");\n\t\t});",
                "is_abstract": "",
                "class_name": "BedrockCohereChatAutoConfigurationIT",
                "annotations": []
            },
            {
                "name": "propertiesTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "new ApplicationContextRunner()\n\t\t\t.withPropertyValues(\"spring.ai.bedrock.cohere.chat.enabled=true\",\n\t\t\t\t\t\"spring.ai.bedrock.aws.access-key=ACCESS_KEY\", \"spring.ai.bedrock.aws.secret-key=SECRET_KEY\",\n\t\t\t\t\t\"spring.ai.bedrock.cohere.chat.model=MODEL_XYZ\",\n\t\t\t\t\t\"spring.ai.bedrock.aws.region=\" + Region.EU_CENTRAL_1.id(),\n\t\t\t\t\t\"spring.ai.bedrock.cohere.chat.options.temperature=0.55\",\n\t\t\t\t\t\"spring.ai.bedrock.cohere.chat.options.topP=0.55\", \"spring.ai.bedrock.cohere.chat.options.topK=10\",\n\t\t\t\t\t\"spring.ai.bedrock.cohere.chat.options.stopSequences=END1,END2\",\n\t\t\t\t\t\"spring.ai.bedrock.cohere.chat.options.returnLikelihoods=ALL\",\n\t\t\t\t\t\"spring.ai.bedrock.cohere.chat.options.numGenerations=3\",\n\t\t\t\t\t\"spring.ai.bedrock.cohere.chat.options.truncate=START\",\n\t\t\t\t\t\"spring.ai.bedrock.cohere.chat.options.maxTokens=123\")\n\t\t\t.withConfiguration(AutoConfigurations.of(BedrockCohereChatAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tvar chatProperties = context.getBean(BedrockCohereChatProperties.class);\n\t\t\t\tvar aswProperties = context.getBean(BedrockAwsConnectionProperties.class);\n\n\t\t\t\tassertThat(chatProperties.isEnabled()).isTrue();\n\t\t\t\tassertThat(aswProperties.getRegion()).isEqualTo(Region.EU_CENTRAL_1.id());\n\t\t\t\tassertThat(chatProperties.getModel()).isEqualTo(\"MODEL_XYZ\");\n\n\t\t\t\tassertThat(chatProperties.getOptions().getTemperature()).isEqualTo(0.55f);\n\t\t\t\tassertThat(chatProperties.getOptions().getTopP()).isEqualTo(0.55f);\n\t\t\t\tassertThat(chatProperties.getOptions().getTopK()).isEqualTo(10);\n\t\t\t\tassertThat(chatProperties.getOptions().getStopSequences()).isEqualTo(List.of(\"END1\", \"END2\"));\n\t\t\t\tassertThat(chatProperties.getOptions().getReturnLikelihoods()).isEqualTo(ReturnLikelihoods.ALL);\n\t\t\t\tassertThat(chatProperties.getOptions().getNumGenerations()).isEqualTo(3);\n\t\t\t\tassertThat(chatProperties.getOptions().getTruncate()).isEqualTo(Truncate.START);\n\t\t\t\tassertThat(chatProperties.getOptions().getMaxTokens()).isEqualTo(123);\n\n\t\t\t\tassertThat(aswProperties.getAccessKey()).isEqualTo(\"ACCESS_KEY\");\n\t\t\t\tassertThat(aswProperties.getSecretKey()).isEqualTo(\"SECRET_KEY\");\n\t\t\t});",
                "is_abstract": "",
                "class_name": "BedrockCohereChatAutoConfigurationIT",
                "annotations": []
            },
            {
                "name": "chatCompletionDisabled",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// It is disabled by default\n\t\tnew ApplicationContextRunner()\n\t\t\t.withConfiguration(AutoConfigurations.of(BedrockCohereChatAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tassertThat(context.getBeansOfType(BedrockCohereChatProperties.class)).isEmpty();\n\t\t\t\tassertThat(context.getBeansOfType(BedrockCohereChatClient.class)).isEmpty();\n\t\t\t});\n\n\t\t// Explicitly enable the chat auto-configuration.\n\t\tnew ApplicationContextRunner().withPropertyValues(\"spring.ai.bedrock.cohere.chat.enabled=true\")\n\t\t\t.withConfiguration(AutoConfigurations.of(BedrockCohereChatAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tassertThat(context.getBeansOfType(BedrockCohereChatProperties.class)).isNotEmpty();\n\t\t\t\tassertThat(context.getBeansOfType(BedrockCohereChatClient.class)).isNotEmpty();\n\t\t\t});\n\n\t\t// Explicitly disable the chat auto-configuration.\n\t\tnew ApplicationContextRunner().withPropertyValues(\"spring.ai.bedrock.cohere.chat.enabled=false\")\n\t\t\t.withConfiguration(AutoConfigurations.of(BedrockCohereChatAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tassertThat(context.getBeansOfType(BedrockCohereChatProperties.class)).isEmpty();\n\t\t\t\tassertThat(context.getBeansOfType(BedrockCohereChatClient.class)).isEmpty();\n\t\t\t});",
                "is_abstract": "",
                "class_name": "BedrockCohereChatAutoConfigurationIT",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/bedrock/cohere/BedrockCohereEmbeddingAutoConfigurationIT.java",
        "class_names": [
            "BedrockCohereEmbeddingAutoConfigurationIT"
        ],
        "imports": "import java.util.List;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport software.amazon.awssdk.regions.Region;\nimport org.springframework.ai.bedrock.cohere.api.CohereEmbeddingBedrockApi.CohereEmbeddingRequest;\nimport org.springframework.ai.bedrock.cohere.api.CohereEmbeddingBedrockApi.CohereEmbeddingRequest.InputType;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.bedrock.cohere.BedrockCohereEmbeddingClient;\nimport org.springframework.ai.autoconfigure.bedrock.BedrockAwsConnectionProperties;\nimport org.springframework.boot.autoconfigure.AutoConfigurations;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport org.springframework.ai.bedrock.cohere.api.CohereEmbeddingBedrockApi.CohereEmbeddingModel;\nimport org.springframework.ai.embedding.EmbeddingResponse;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.bedrock.cohere.BedrockCohereEmbeddingAutoConfigurationIT": "org.springframework.ai.autoconfigure.bedrock.cohere.BedrockCohereEmbeddingAutoConfigurationIT",
            "org.springframework.ai.autoconfigure.bedrock.cohere.singleEmbeddin": "org.springframework.ai.autoconfigure.bedrock.cohere.singleEmbeddin",
            "org.springframework.ai.autoconfigure.bedrock.cohere.batchEmbeddin": "org.springframework.ai.autoconfigure.bedrock.cohere.batchEmbeddin",
            "org.springframework.ai.autoconfigure.bedrock.cohere.propertiesTest": "org.springframework.ai.autoconfigure.bedrock.cohere.propertiesTest",
            "org.springframework.ai.autoconfigure.bedrock.cohere.embeddingDisabled": "org.springframework.ai.autoconfigure.bedrock.cohere.embeddingDisabled",
            "org.springframework.ai.autoconfigure.bedrock.cohere.contextRunner": "org.springframework.ai.autoconfigure.bedrock.cohere.contextRunner"
        },
        "package": "package org.springframework.ai.autoconfigure.bedrock.cohere;",
        "property_declarations": [
            "private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t.withPropertyValues(\"spring.ai.bedrock.cohere.embedding.enabled=true\",\n\t\t\t\t\"spring.ai.bedrock.aws.access-key=\" + System.getenv(\"AWS_ACCESS_KEY_ID\"),\n\t\t\t\t\"spring.ai.bedrock.aws.secret-key=\" + System.getenv(\"AWS_SECRET_ACCESS_KEY\"),\n\t\t\t\t\"spring.ai.bedrock.aws.region=\" + Region.US_EAST_1.id(),\n\t\t\t\t\"spring.ai.bedrock.cohere.embedding.model=\" + CohereEmbeddingModel.COHERE_EMBED_MULTILINGUAL_V1.id(),\n\t\t\t\t\"spring.ai.bedrock.cohere.embedding.options.inputType=SEARCH_DOCUMENT\",\n\t\t\t\t\"spring.ai.bedrock.cohere.embedding.options.truncate=NONE\")\n\t\t.withConfiguration(AutoConfigurations.of(BedrockCohereEmbeddingAutoConfiguration.class));"
        ],
        "functions": [
            {
                "name": "singleEmbedding",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\t\t\tBedrockCohereEmbeddingClient embeddingClient = context.getBean(BedrockCohereEmbeddingClient.class);\n\t\t\tassertThat(embeddingClient).isNotNull();\n\t\t\tEmbeddingResponse embeddingResponse = embeddingClient.embedForResponse(List.of(\"Hello World\"));\n\t\t\tassertThat(embeddingResponse.getResults()).hasSize(1);\n\t\t\tassertThat(embeddingResponse.getResults().get(0).getOutput()).isNotEmpty();\n\t\t\tassertThat(embeddingClient.dimensions()).isEqualTo(1024);\n\t\t});",
                "is_abstract": "",
                "class_name": "BedrockCohereEmbeddingAutoConfigurationIT",
                "annotations": []
            },
            {
                "name": "batchEmbedding",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\n\t\t\tBedrockCohereEmbeddingClient embeddingClient = context.getBean(BedrockCohereEmbeddingClient.class);\n\n\t\t\tassertThat(embeddingClient).isNotNull();\n\t\t\tEmbeddingResponse embeddingResponse = embeddingClient\n\t\t\t\t.embedForResponse(List.of(\"Hello World\", \"World is big and salvation is near\"));\n\t\t\tassertThat(embeddingResponse.getResults()).hasSize(2);\n\t\t\tassertThat(embeddingResponse.getResults().get(0).getOutput()).isNotEmpty();\n\t\t\tassertThat(embeddingResponse.getResults().get(0).getIndex()).isEqualTo(0);\n\t\t\tassertThat(embeddingResponse.getResults().get(1).getOutput()).isNotEmpty();\n\t\t\tassertThat(embeddingResponse.getResults().get(1).getIndex()).isEqualTo(1);\n\n\t\t\tassertThat(embeddingClient.dimensions()).isEqualTo(1024);\n\n\t\t});",
                "is_abstract": "",
                "class_name": "BedrockCohereEmbeddingAutoConfigurationIT",
                "annotations": []
            },
            {
                "name": "propertiesTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "new ApplicationContextRunner()\n\t\t\t.withPropertyValues(\"spring.ai.bedrock.cohere.embedding.enabled=true\",\n\t\t\t\t\t\"spring.ai.bedrock.aws.access-key=ACCESS_KEY\", \"spring.ai.bedrock.aws.secret-key=SECRET_KEY\",\n\t\t\t\t\t\"spring.ai.bedrock.aws.region=\" + Region.EU_CENTRAL_1.id(),\n\t\t\t\t\t\"spring.ai.bedrock.cohere.embedding.model=MODEL_XYZ\",\n\t\t\t\t\t\"spring.ai.bedrock.cohere.embedding.options.inputType=CLASSIFICATION\",\n\t\t\t\t\t\"spring.ai.bedrock.cohere.embedding.options.truncate=RIGHT\")\n\t\t\t.withConfiguration(AutoConfigurations.of(BedrockCohereEmbeddingAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tvar properties = context.getBean(BedrockCohereEmbeddingProperties.class);\n\t\t\t\tvar awsProperties = context.getBean(BedrockAwsConnectionProperties.class);\n\n\t\t\t\tassertThat(properties.isEnabled()).isTrue();\n\t\t\t\tassertThat(awsProperties.getRegion()).isEqualTo(Region.EU_CENTRAL_1.id());\n\t\t\t\tassertThat(properties.getModel()).isEqualTo(\"MODEL_XYZ\");\n\n\t\t\t\tassertThat(properties.getOptions().getInputType()).isEqualTo(InputType.CLASSIFICATION);\n\t\t\t\tassertThat(properties.getOptions().getTruncate()).isEqualTo(CohereEmbeddingRequest.Truncate.RIGHT);\n\n\t\t\t\tassertThat(awsProperties.getAccessKey()).isEqualTo(\"ACCESS_KEY\");\n\t\t\t\tassertThat(awsProperties.getSecretKey()).isEqualTo(\"SECRET_KEY\");\n\t\t\t});",
                "is_abstract": "",
                "class_name": "BedrockCohereEmbeddingAutoConfigurationIT",
                "annotations": []
            },
            {
                "name": "embeddingDisabled",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// It is disabled by default\n\t\tnew ApplicationContextRunner()\n\t\t\t.withConfiguration(AutoConfigurations.of(BedrockCohereEmbeddingAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tassertThat(context.getBeansOfType(BedrockCohereEmbeddingProperties.class)).isEmpty();\n\t\t\t\tassertThat(context.getBeansOfType(BedrockCohereEmbeddingClient.class)).isEmpty();\n\t\t\t});\n\n\t\t// Explicitly enable the embedding auto-configuration.\n\t\tnew ApplicationContextRunner().withPropertyValues(\"spring.ai.bedrock.cohere.embedding.enabled=true\")\n\t\t\t.withConfiguration(AutoConfigurations.of(BedrockCohereEmbeddingAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tassertThat(context.getBeansOfType(BedrockCohereEmbeddingProperties.class)).isNotEmpty();\n\t\t\t\tassertThat(context.getBeansOfType(BedrockCohereEmbeddingClient.class)).isNotEmpty();\n\t\t\t});\n\n\t\t// Explicitly disable the embedding auto-configuration.\n\t\tnew ApplicationContextRunner().withPropertyValues(\"spring.ai.bedrock.cohere.embedding.enabled=false\")\n\t\t\t.withConfiguration(AutoConfigurations.of(BedrockCohereEmbeddingAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tassertThat(context.getBeansOfType(BedrockCohereEmbeddingProperties.class)).isEmpty();\n\t\t\t\tassertThat(context.getBeansOfType(BedrockCohereEmbeddingClient.class)).isEmpty();\n\t\t\t});",
                "is_abstract": "",
                "class_name": "BedrockCohereEmbeddingAutoConfigurationIT",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/bedrock/llama2/BedrockLlama2ChatAutoConfigurationIT.java",
        "class_names": [
            "BedrockLlama2ChatAutoConfigurationIT"
        ],
        "imports": "import java.util.stream.Collectors;\nimport java.util.List;\nimport org.springframework.ai.chat.Generation;\nimport reactor.core.publisher.Flux;\nimport org.springframework.ai.chat.prompt.SystemPromptTemplate;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport org.springframework.ai.bedrock.llama2.api.Llama2ChatBedrockApi.Llama2ChatModel;\nimport org.springframework.ai.chat.messages.Message;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport software.amazon.awssdk.regions.Region;\nimport java.util.Map;\nimport org.springframework.ai.autoconfigure.bedrock.BedrockAwsConnectionProperties;\nimport org.springframework.ai.chat.ChatResponse;\nimport org.springframework.ai.bedrock.llama2.BedrockLlama2ChatClient;\nimport org.springframework.ai.chat.messages.UserMessage;\nimport org.springframework.ai.chat.messages.AssistantMessage;\nimport org.springframework.ai.chat.prompt.Prompt;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.autoconfigure.AutoConfigurations;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.bedrock.llama2.BedrockLlama2ChatAutoConfigurationIT": "org.springframework.ai.autoconfigure.bedrock.llama2.BedrockLlama2ChatAutoConfigurationIT",
            "org.springframework.ai.autoconfigure.bedrock.llama2.chatCompletion": "org.springframework.ai.autoconfigure.bedrock.llama2.chatCompletion",
            "org.springframework.ai.autoconfigure.bedrock.llama2.chatCompletionStreamin": "org.springframework.ai.autoconfigure.bedrock.llama2.chatCompletionStreamin",
            "org.springframework.ai.autoconfigure.bedrock.llama2.propertiesTest": "org.springframework.ai.autoconfigure.bedrock.llama2.propertiesTest",
            "org.springframework.ai.autoconfigure.bedrock.llama2.chatCompletionDisabled": "org.springframework.ai.autoconfigure.bedrock.llama2.chatCompletionDisabled",
            "org.springframework.ai.autoconfigure.bedrock.llama2.contextRunner": "org.springframework.ai.autoconfigure.bedrock.llama2.contextRunner",
            "org.springframework.ai.autoconfigure.bedrock.llama2.systemMess": "org.springframework.ai.autoconfigure.bedrock.llama2.systemMess",
            "org.springframework.ai.autoconfigure.bedrock.llama2.userMess": "org.springframework.ai.autoconfigure.bedrock.llama2.userMess"
        },
        "package": "package org.springframework.ai.autoconfigure.bedrock.llama2;",
        "property_declarations": [
            "private final UserMessage userMessage = new UserMessage(\n\t\t\t\"Tell me about 3 famous pirates from the Golden Age of Piracy and why they did.\");",
            "private final Message systemMessage = new SystemPromptTemplate(\"\"\"\n\t\t\tYou are a helpful AI assistant. Your name is {name}.\n\t\t\tYou are an AI assistant that helps people find information.\n\t\t\tYour name is {name}\n\t\t\tYou should reply to the user's request with your name and also in the style of a {voice}.\n\t\t\t\"\"\").createMessage(Map.of(\"name\", \"Bob\", \"voice\", \"pirate\"));",
            "private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t.withPropertyValues(\"spring.ai.bedrock.llama2.chat.enabled=true\",\n\t\t\t\t\"spring.ai.bedrock.aws.access-key=\" + System.getenv(\"AWS_ACCESS_KEY_ID\"),\n\t\t\t\t\"spring.ai.bedrock.aws.secret-key=\" + System.getenv(\"AWS_SECRET_ACCESS_KEY\"),\n\t\t\t\t\"spring.ai.bedrock.aws.region=\" + Region.US_EAST_1.id(),\n\t\t\t\t\"spring.ai.bedrock.llama2.chat.model=\" + Llama2ChatModel.LLAMA2_70B_CHAT_V1.id(),\n\t\t\t\t\"spring.ai.bedrock.llama2.chat.options.temperature=0.5\",\n\t\t\t\t\"spring.ai.bedrock.llama2.chat.options.maxGenLen=500\")\n\t\t.withConfiguration(AutoConfigurations.of(BedrockLlama2ChatAutoConfiguration.class));"
        ],
        "functions": [
            {
                "name": "chatCompletion",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\t\t\tBedrockLlama2ChatClient llama2ChatClient = context.getBean(BedrockLlama2ChatClient.class);\n\t\t\tChatResponse response = llama2ChatClient.call(new Prompt(List.of(userMessage, systemMessage)));\n\t\t\tassertThat(response.getResult().getOutput().getContent()).contains(\"Blackbeard\");\n\t\t});",
                "is_abstract": "",
                "class_name": "BedrockLlama2ChatAutoConfigurationIT",
                "annotations": []
            },
            {
                "name": "chatCompletionStreaming",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\n\t\t\tBedrockLlama2ChatClient llama2ChatClient = context.getBean(BedrockLlama2ChatClient.class);\n\n\t\t\tFlux<ChatResponse> response = llama2ChatClient.stream(new Prompt(List.of(userMessage, systemMessage)));\n\n\t\t\tList<ChatResponse> responses = response.collectList().block();\n\t\t\tassertThat(responses.size()).isGreaterThan(2);\n\n\t\t\tString stitchedResponseContent = responses.stream()\n\t\t\t\t.map(ChatResponse::getResults)\n\t\t\t\t.flatMap(List::stream)\n\t\t\t\t.map(Generation::getOutput)\n\t\t\t\t.map(AssistantMessage::getContent)\n\t\t\t\t.collect(Collectors.joining());\n\n\t\t\tassertThat(stitchedResponseContent).contains(\"Blackbeard\");\n\t\t});",
                "is_abstract": "",
                "class_name": "BedrockLlama2ChatAutoConfigurationIT",
                "annotations": []
            },
            {
                "name": "propertiesTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "new ApplicationContextRunner()\n\t\t\t.withPropertyValues(\"spring.ai.bedrock.llama2.chat.enabled=true\",\n\t\t\t\t\t\"spring.ai.bedrock.aws.access-key=ACCESS_KEY\", \"spring.ai.bedrock.aws.secret-key=SECRET_KEY\",\n\t\t\t\t\t\"spring.ai.bedrock.llama2.chat.model=MODEL_XYZ\",\n\t\t\t\t\t\"spring.ai.bedrock.aws.region=\" + Region.EU_CENTRAL_1.id(),\n\t\t\t\t\t\"spring.ai.bedrock.llama2.chat.options.temperature=0.55\",\n\t\t\t\t\t\"spring.ai.bedrock.llama2.chat.options.maxGenLen=123\")\n\t\t\t.withConfiguration(AutoConfigurations.of(BedrockLlama2ChatAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tvar llama2ChatProperties = context.getBean(BedrockLlama2ChatProperties.class);\n\t\t\t\tvar awsProperties = context.getBean(BedrockAwsConnectionProperties.class);\n\n\t\t\t\tassertThat(llama2ChatProperties.isEnabled()).isTrue();\n\t\t\t\tassertThat(awsProperties.getRegion()).isEqualTo(Region.EU_CENTRAL_1.id());\n\n\t\t\t\tassertThat(llama2ChatProperties.getOptions().getTemperature()).isEqualTo(0.55f);\n\t\t\t\tassertThat(llama2ChatProperties.getOptions().getMaxGenLen()).isEqualTo(123);\n\t\t\t\tassertThat(llama2ChatProperties.getModel()).isEqualTo(\"MODEL_XYZ\");\n\n\t\t\t\tassertThat(awsProperties.getAccessKey()).isEqualTo(\"ACCESS_KEY\");\n\t\t\t\tassertThat(awsProperties.getSecretKey()).isEqualTo(\"SECRET_KEY\");\n\t\t\t});",
                "is_abstract": "",
                "class_name": "BedrockLlama2ChatAutoConfigurationIT",
                "annotations": []
            },
            {
                "name": "chatCompletionDisabled",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// It is disabled by default\n\t\tnew ApplicationContextRunner()\n\t\t\t.withConfiguration(AutoConfigurations.of(BedrockLlama2ChatAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tassertThat(context.getBeansOfType(BedrockLlama2ChatProperties.class)).isEmpty();\n\t\t\t\tassertThat(context.getBeansOfType(BedrockLlama2ChatClient.class)).isEmpty();\n\t\t\t});\n\n\t\t// Explicitly enable the chat auto-configuration.\n\t\tnew ApplicationContextRunner().withPropertyValues(\"spring.ai.bedrock.llama2.chat.enabled=true\")\n\t\t\t.withConfiguration(AutoConfigurations.of(BedrockLlama2ChatAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tassertThat(context.getBeansOfType(BedrockLlama2ChatProperties.class)).isNotEmpty();\n\t\t\t\tassertThat(context.getBeansOfType(BedrockLlama2ChatClient.class)).isNotEmpty();\n\t\t\t});\n\n\t\t// Explicitly disable the chat auto-configuration.\n\t\tnew ApplicationContextRunner().withPropertyValues(\"spring.ai.bedrock.llama2.chat.enabled=false\")\n\t\t\t.withConfiguration(AutoConfigurations.of(BedrockLlama2ChatAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tassertThat(context.getBeansOfType(BedrockLlama2ChatProperties.class)).isEmpty();\n\t\t\t\tassertThat(context.getBeansOfType(BedrockLlama2ChatClient.class)).isEmpty();\n\t\t\t});",
                "is_abstract": "",
                "class_name": "BedrockLlama2ChatAutoConfigurationIT",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/bedrock/jurassic2/BedrockAi21Jurassic2ChatAutoConfigurationIT.java",
        "class_names": [
            "BedrockAi21Jurassic2ChatAutoConfigurationIT"
        ],
        "imports": "import org.springframework.ai.chat.prompt.Prompt;\nimport org.springframework.ai.chat.messages.Message;\nimport org.springframework.ai.chat.messages.UserMessage;\nimport java.util.List;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport software.amazon.awssdk.regions.Region;\nimport org.springframework.ai.autoconfigure.bedrock.jurrasic2.BedrockAi21Jurassic2ChatProperties;\nimport java.util.Map;\nimport org.springframework.ai.chat.prompt.SystemPromptTemplate;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.bedrock.jurassic2.api.Ai21Jurassic2ChatBedrockApi;\nimport org.springframework.boot.autoconfigure.AutoConfigurations;\nimport org.springframework.ai.autoconfigure.bedrock.BedrockAwsConnectionProperties;\nimport org.springframework.ai.bedrock.jurassic2.BedrockAi21Jurassic2ChatClient;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport org.springframework.ai.chat.ChatResponse;\nimport org.springframework.ai.autoconfigure.bedrock.jurrasic2.BedrockAi21Jurassic2ChatAutoConfiguration;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.bedrock.jurassic2.BedrockAi21Jurassic2ChatAutoConfigurationIT": "org.springframework.ai.autoconfigure.bedrock.jurassic2.BedrockAi21Jurassic2ChatAutoConfigurationIT",
            "org.springframework.ai.autoconfigure.bedrock.jurassic2.chatCompletion": "org.springframework.ai.autoconfigure.bedrock.jurassic2.chatCompletion",
            "org.springframework.ai.autoconfigure.bedrock.jurassic2.propertiesTest": "org.springframework.ai.autoconfigure.bedrock.jurassic2.propertiesTest",
            "org.springframework.ai.autoconfigure.bedrock.jurassic2.chatCompletionDisabled": "org.springframework.ai.autoconfigure.bedrock.jurassic2.chatCompletionDisabled",
            "org.springframework.ai.autoconfigure.bedrock.jurassic2.contextRunner": "org.springframework.ai.autoconfigure.bedrock.jurassic2.contextRunner",
            "org.springframework.ai.autoconfigure.bedrock.jurassic2.systemMess": "org.springframework.ai.autoconfigure.bedrock.jurassic2.systemMess",
            "org.springframework.ai.autoconfigure.bedrock.jurassic2.userMess": "org.springframework.ai.autoconfigure.bedrock.jurassic2.userMess"
        },
        "package": "package org.springframework.ai.autoconfigure.bedrock.jurassic2;",
        "property_declarations": [
            "private final UserMessage userMessage = new UserMessage(\n\t\t\t\"Tell me about 3 famous pirates from the Golden Age of Piracy and why they did.\");",
            "private final Message systemMessage = new SystemPromptTemplate(\"\"\"\n\t\t\tYou are a helpful AI assistant. Your name is {name}.\n\t\t\tYou are an AI assistant that helps people find information.\n\t\t\tYour name is {name}\n\t\t\tYou should reply to the user's request with your name and also in the style of a {voice}.\n\t\t\t\"\"\").createMessage(Map.of(\"name\", \"Bob\", \"voice\", \"pirate\"));",
            "private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t.withPropertyValues(\"spring.ai.bedrock.jurassic2.chat.enabled=true\",\n\t\t\t\t\"spring.ai.bedrock.aws.access-key=\" + System.getenv(\"AWS_ACCESS_KEY_ID\"),\n\t\t\t\t\"spring.ai.bedrock.aws.secret-key=\" + System.getenv(\"AWS_SECRET_ACCESS_KEY\"),\n\t\t\t\t\"spring.ai.bedrock.aws.region=\" + Region.US_EAST_1.id(),\n\t\t\t\t\"spring.ai.bedrock.jurassic2.chat.model=\"\n\t\t\t\t\t\t+ Ai21Jurassic2ChatBedrockApi.Ai21Jurassic2ChatModel.AI21_J2_ULTRA_V1.id(),\n\t\t\t\t\"spring.ai.bedrock.jurassic2.chat.options.temperature=0.5\",\n\t\t\t\t\"spring.ai.bedrock.jurassic2.chat.options.maxGenLen=500\")\n\t\t.withConfiguration(AutoConfigurations.of(BedrockAi21Jurassic2ChatAutoConfiguration.class));"
        ],
        "functions": [
            {
                "name": "chatCompletion",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\t\t\tBedrockAi21Jurassic2ChatClient ai21Jurassic2ChatClient = context\n\t\t\t\t.getBean(BedrockAi21Jurassic2ChatClient.class);\n\t\t\tChatResponse response = ai21Jurassic2ChatClient.call(new Prompt(List.of(userMessage, systemMessage)));\n\t\t\tassertThat(response.getResult().getOutput().getContent()).contains(\"Blackbeard\");\n\t\t});",
                "is_abstract": "",
                "class_name": "BedrockAi21Jurassic2ChatAutoConfigurationIT",
                "annotations": []
            },
            {
                "name": "propertiesTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "new ApplicationContextRunner()\n\t\t\t.withPropertyValues(\"spring.ai.bedrock.jurassic2.chat.enabled=true\",\n\t\t\t\t\t\"spring.ai.bedrock.aws.access-key=ACCESS_KEY\", \"spring.ai.bedrock.aws.secret-key=SECRET_KEY\",\n\t\t\t\t\t\"spring.ai.bedrock.jurassic2.chat.model=MODEL_XYZ\",\n\t\t\t\t\t\"spring.ai.bedrock.aws.region=\" + Region.US_EAST_1.id(),\n\t\t\t\t\t\"spring.ai.bedrock.jurassic2.chat.options.temperature=0.55\",\n\t\t\t\t\t\"spring.ai.bedrock.jurassic2.chat.options.maxTokens=123\")\n\t\t\t.withConfiguration(AutoConfigurations.of(BedrockAi21Jurassic2ChatAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tvar chatProperties = context.getBean(BedrockAi21Jurassic2ChatProperties.class);\n\t\t\t\tvar awsProperties = context.getBean(BedrockAwsConnectionProperties.class);\n\n\t\t\t\tassertThat(chatProperties.isEnabled()).isTrue();\n\t\t\t\tassertThat(awsProperties.getRegion()).isEqualTo(Region.US_EAST_1.id());\n\n\t\t\t\tassertThat(chatProperties.getOptions().getTemperature()).isEqualTo(0.55f);\n\t\t\t\tassertThat(chatProperties.getOptions().getMaxTokens()).isEqualTo(123);\n\t\t\t\tassertThat(chatProperties.getModel()).isEqualTo(\"MODEL_XYZ\");\n\n\t\t\t\tassertThat(awsProperties.getAccessKey()).isEqualTo(\"ACCESS_KEY\");\n\t\t\t\tassertThat(awsProperties.getSecretKey()).isEqualTo(\"SECRET_KEY\");\n\t\t\t});",
                "is_abstract": "",
                "class_name": "BedrockAi21Jurassic2ChatAutoConfigurationIT",
                "annotations": []
            },
            {
                "name": "chatCompletionDisabled",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// It is disabled by default\n\t\tnew ApplicationContextRunner()\n\t\t\t.withConfiguration(AutoConfigurations.of(BedrockAi21Jurassic2ChatAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tassertThat(context.getBeansOfType(BedrockAi21Jurassic2ChatProperties.class)).isEmpty();\n\t\t\t\tassertThat(context.getBeansOfType(BedrockAi21Jurassic2ChatClient.class)).isEmpty();\n\t\t\t});\n\n\t\t// Explicitly enable the chat auto-configuration.\n\t\tnew ApplicationContextRunner().withPropertyValues(\"spring.ai.bedrock.jurassic2.chat.enabled=true\")\n\t\t\t.withConfiguration(AutoConfigurations.of(BedrockAi21Jurassic2ChatAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tassertThat(context.getBeansOfType(BedrockAi21Jurassic2ChatProperties.class)).isNotEmpty();\n\t\t\t\tassertThat(context.getBeansOfType(BedrockAi21Jurassic2ChatClient.class)).isNotEmpty();\n\t\t\t});\n\n\t\t// Explicitly disable the chat auto-configuration.\n\t\tnew ApplicationContextRunner().withPropertyValues(\"spring.ai.bedrock.jurassic2.chat.enabled=false\")\n\t\t\t.withConfiguration(AutoConfigurations.of(BedrockAi21Jurassic2ChatAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tassertThat(context.getBeansOfType(BedrockAi21Jurassic2ChatProperties.class)).isEmpty();\n\t\t\t\tassertThat(context.getBeansOfType(BedrockAi21Jurassic2ChatClient.class)).isEmpty();\n\t\t\t});",
                "is_abstract": "",
                "class_name": "BedrockAi21Jurassic2ChatAutoConfigurationIT",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/bedrock/anthropic3/BedrockAnthropic3ChatAutoConfigurationIT.java",
        "class_names": [
            "BedrockAnthropic3ChatAutoConfigurationIT"
        ],
        "imports": "import java.util.stream.Collectors;\nimport java.util.List;\nimport org.springframework.ai.chat.Generation;\nimport reactor.core.publisher.Flux;\nimport org.springframework.ai.chat.prompt.SystemPromptTemplate;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport org.springframework.ai.chat.messages.Message;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport software.amazon.awssdk.regions.Region;\nimport org.springframework.ai.bedrock.anthropic3.api.Anthropic3ChatBedrockApi.AnthropicChatModel;\nimport java.util.Map;\nimport org.springframework.ai.autoconfigure.bedrock.BedrockAwsConnectionProperties;\nimport org.springframework.ai.bedrock.anthropic3.BedrockAnthropic3ChatClient;\nimport org.springframework.ai.chat.ChatResponse;\nimport org.springframework.ai.chat.messages.UserMessage;\nimport org.springframework.ai.chat.messages.AssistantMessage;\nimport org.springframework.ai.chat.prompt.Prompt;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.autoconfigure.AutoConfigurations;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.bedrock.anthropic3.BedrockAnthropic3ChatAutoConfigurationIT": "org.springframework.ai.autoconfigure.bedrock.anthropic3.BedrockAnthropic3ChatAutoConfigurationIT",
            "org.springframework.ai.autoconfigure.bedrock.anthropic3.chatCompletion": "org.springframework.ai.autoconfigure.bedrock.anthropic3.chatCompletion",
            "org.springframework.ai.autoconfigure.bedrock.anthropic3.chatCompletionStreamin": "org.springframework.ai.autoconfigure.bedrock.anthropic3.chatCompletionStreamin",
            "org.springframework.ai.autoconfigure.bedrock.anthropic3.propertiesTest": "org.springframework.ai.autoconfigure.bedrock.anthropic3.propertiesTest",
            "org.springframework.ai.autoconfigure.bedrock.anthropic3.chatCompletionDisabled": "org.springframework.ai.autoconfigure.bedrock.anthropic3.chatCompletionDisabled",
            "org.springframework.ai.autoconfigure.bedrock.anthropic3.contextRunner": "org.springframework.ai.autoconfigure.bedrock.anthropic3.contextRunner",
            "org.springframework.ai.autoconfigure.bedrock.anthropic3.systemMess": "org.springframework.ai.autoconfigure.bedrock.anthropic3.systemMess",
            "org.springframework.ai.autoconfigure.bedrock.anthropic3.userMess": "org.springframework.ai.autoconfigure.bedrock.anthropic3.userMess"
        },
        "package": "package org.springframework.ai.autoconfigure.bedrock.anthropic3;",
        "property_declarations": [
            "private final UserMessage userMessage = new UserMessage(\n\t\t\t\"Tell me about 3 famous pirates from the Golden Age of Piracy and why they did.\");",
            "private final Message systemMessage = new SystemPromptTemplate(\"\"\"\n\t\t\tYou are a helpful AI assistant. Your name is {name}.\n\t\t\tYou are an AI assistant that helps people find information.\n\t\t\tYour name is {name}\n\t\t\tYou should reply to the user's request with your name and also in the style of a {voice}.\n\t\t\t\"\"\").createMessage(Map.of(\"name\", \"Bob\", \"voice\", \"pirate\"));",
            "private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t.withPropertyValues(\"spring.ai.bedrock.anthropic3.chat.enabled=true\",\n\t\t\t\t\"spring.ai.bedrock.aws.access-key=\" + System.getenv(\"AWS_ACCESS_KEY_ID\"),\n\t\t\t\t\"spring.ai.bedrock.aws.secret-key=\" + System.getenv(\"AWS_SECRET_ACCESS_KEY\"),\n\t\t\t\t\"spring.ai.bedrock.aws.region=\" + Region.US_EAST_1.id(),\n\t\t\t\t\"spring.ai.bedrock.anthropic3.chat.model=\" + AnthropicChatModel.CLAUDE_V3_SONNET.id(),\n\t\t\t\t\"spring.ai.bedrock.anthropic3.chat.options.temperature=0.5\")\n\t\t.withConfiguration(AutoConfigurations.of(BedrockAnthropic3ChatAutoConfiguration.class));"
        ],
        "functions": [
            {
                "name": "chatCompletion",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\t\t\tBedrockAnthropic3ChatClient anthropicChatClient = context.getBean(BedrockAnthropic3ChatClient.class);\n\t\t\tChatResponse response = anthropicChatClient.call(new Prompt(List.of(userMessage, systemMessage)));\n\t\t\tassertThat(response.getResult().getOutput().getContent()).contains(\"Blackbeard\");\n\t\t});",
                "is_abstract": "",
                "class_name": "BedrockAnthropic3ChatAutoConfigurationIT",
                "annotations": []
            },
            {
                "name": "chatCompletionStreaming",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\n\t\t\tBedrockAnthropic3ChatClient anthropicChatClient = context.getBean(BedrockAnthropic3ChatClient.class);\n\n\t\t\tFlux<ChatResponse> response = anthropicChatClient.stream(new Prompt(List.of(userMessage, systemMessage)));\n\n\t\t\tList<ChatResponse> responses = response.collectList().block();\n\t\t\tassertThat(responses.size()).isGreaterThan(2);\n\n\t\t\tString stitchedResponseContent = responses.stream()\n\t\t\t\t.map(ChatResponse::getResults)\n\t\t\t\t.flatMap(List::stream)\n\t\t\t\t.map(Generation::getOutput)\n\t\t\t\t.map(AssistantMessage::getContent)\n\t\t\t\t.collect(Collectors.joining());\n\n\t\t\tassertThat(stitchedResponseContent).contains(\"Blackbeard\");\n\t\t});",
                "is_abstract": "",
                "class_name": "BedrockAnthropic3ChatAutoConfigurationIT",
                "annotations": []
            },
            {
                "name": "propertiesTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "new ApplicationContextRunner()\n\t\t\t.withPropertyValues(\"spring.ai.bedrock.anthropic3.chat.enabled=true\",\n\t\t\t\t\t\"spring.ai.bedrock.aws.access-key=ACCESS_KEY\", \"spring.ai.bedrock.aws.secret-key=SECRET_KEY\",\n\t\t\t\t\t\"spring.ai.bedrock.anthropic3.chat.model=MODEL_XYZ\",\n\t\t\t\t\t\"spring.ai.bedrock.aws.region=\" + Region.EU_CENTRAL_1.id(),\n\t\t\t\t\t\"spring.ai.bedrock.anthropic3.chat.options.temperature=0.55\")\n\t\t\t.withConfiguration(AutoConfigurations.of(BedrockAnthropic3ChatAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tvar anthropicChatProperties = context.getBean(BedrockAnthropic3ChatProperties.class);\n\t\t\t\tvar awsProperties = context.getBean(BedrockAwsConnectionProperties.class);\n\n\t\t\t\tassertThat(anthropicChatProperties.isEnabled()).isTrue();\n\t\t\t\tassertThat(awsProperties.getRegion()).isEqualTo(Region.EU_CENTRAL_1.id());\n\n\t\t\t\tassertThat(anthropicChatProperties.getOptions().getTemperature()).isEqualTo(0.55f);\n\t\t\t\tassertThat(anthropicChatProperties.getModel()).isEqualTo(\"MODEL_XYZ\");\n\n\t\t\t\tassertThat(awsProperties.getAccessKey()).isEqualTo(\"ACCESS_KEY\");\n\t\t\t\tassertThat(awsProperties.getSecretKey()).isEqualTo(\"SECRET_KEY\");\n\t\t\t});",
                "is_abstract": "",
                "class_name": "BedrockAnthropic3ChatAutoConfigurationIT",
                "annotations": []
            },
            {
                "name": "chatCompletionDisabled",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// It is disabled by default\n\t\tnew ApplicationContextRunner()\n\t\t\t.withConfiguration(AutoConfigurations.of(BedrockAnthropic3ChatAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tassertThat(context.getBeansOfType(BedrockAnthropic3ChatProperties.class)).isEmpty();\n\t\t\t\tassertThat(context.getBeansOfType(BedrockAnthropic3ChatClient.class)).isEmpty();\n\t\t\t});\n\n\t\t// Explicitly enable the chat auto-configuration.\n\t\tnew ApplicationContextRunner().withPropertyValues(\"spring.ai.bedrock.anthropic3.chat.enabled=true\")\n\t\t\t.withConfiguration(AutoConfigurations.of(BedrockAnthropic3ChatAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tassertThat(context.getBeansOfType(BedrockAnthropic3ChatProperties.class)).isNotEmpty();\n\t\t\t\tassertThat(context.getBeansOfType(BedrockAnthropic3ChatClient.class)).isNotEmpty();\n\t\t\t});\n\n\t\t// Explicitly disable the chat auto-configuration.\n\t\tnew ApplicationContextRunner().withPropertyValues(\"spring.ai.bedrock.anthropic3.chat.enabled=false\")\n\t\t\t.withConfiguration(AutoConfigurations.of(BedrockAnthropic3ChatAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tassertThat(context.getBeansOfType(BedrockAnthropic3ChatProperties.class)).isEmpty();\n\t\t\t\tassertThat(context.getBeansOfType(BedrockAnthropic3ChatClient.class)).isEmpty();\n\t\t\t});",
                "is_abstract": "",
                "class_name": "BedrockAnthropic3ChatAutoConfigurationIT",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/bedrock/anthropic/BedrockAnthropicChatAutoConfigurationIT.java",
        "class_names": [
            "BedrockAnthropicChatAutoConfigurationIT"
        ],
        "imports": "import java.util.stream.Collectors;\nimport java.util.List;\nimport org.springframework.ai.chat.Generation;\nimport reactor.core.publisher.Flux;\nimport org.springframework.ai.chat.prompt.SystemPromptTemplate;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport org.springframework.ai.bedrock.anthropic.api.AnthropicChatBedrockApi.AnthropicChatModel;\nimport org.springframework.ai.chat.messages.Message;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport software.amazon.awssdk.regions.Region;\nimport java.util.Map;\nimport org.springframework.ai.autoconfigure.bedrock.BedrockAwsConnectionProperties;\nimport org.springframework.ai.chat.ChatResponse;\nimport org.springframework.ai.chat.messages.UserMessage;\nimport org.springframework.ai.bedrock.anthropic.BedrockAnthropicChatClient;\nimport org.springframework.ai.chat.messages.AssistantMessage;\nimport org.springframework.ai.chat.prompt.Prompt;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.autoconfigure.AutoConfigurations;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.bedrock.anthropic.BedrockAnthropicChatAutoConfigurationIT": "org.springframework.ai.autoconfigure.bedrock.anthropic.BedrockAnthropicChatAutoConfigurationIT",
            "org.springframework.ai.autoconfigure.bedrock.anthropic.chatCompletion": "org.springframework.ai.autoconfigure.bedrock.anthropic.chatCompletion",
            "org.springframework.ai.autoconfigure.bedrock.anthropic.chatCompletionStreamin": "org.springframework.ai.autoconfigure.bedrock.anthropic.chatCompletionStreamin",
            "org.springframework.ai.autoconfigure.bedrock.anthropic.propertiesTest": "org.springframework.ai.autoconfigure.bedrock.anthropic.propertiesTest",
            "org.springframework.ai.autoconfigure.bedrock.anthropic.chatCompletionDisabled": "org.springframework.ai.autoconfigure.bedrock.anthropic.chatCompletionDisabled",
            "org.springframework.ai.autoconfigure.bedrock.anthropic.contextRunner": "org.springframework.ai.autoconfigure.bedrock.anthropic.contextRunner",
            "org.springframework.ai.autoconfigure.bedrock.anthropic.systemMess": "org.springframework.ai.autoconfigure.bedrock.anthropic.systemMess",
            "org.springframework.ai.autoconfigure.bedrock.anthropic.userMess": "org.springframework.ai.autoconfigure.bedrock.anthropic.userMess"
        },
        "package": "package org.springframework.ai.autoconfigure.bedrock.anthropic;",
        "property_declarations": [
            "private final UserMessage userMessage = new UserMessage(\n\t\t\t\"Tell me about 3 famous pirates from the Golden Age of Piracy and why they did.\");",
            "private final Message systemMessage = new SystemPromptTemplate(\"\"\"\n\t\t\tYou are a helpful AI assistant. Your name is {name}.\n\t\t\tYou are an AI assistant that helps people find information.\n\t\t\tYour name is {name}\n\t\t\tYou should reply to the user's request with your name and also in the style of a {voice}.\n\t\t\t\"\"\").createMessage(Map.of(\"name\", \"Bob\", \"voice\", \"pirate\"));",
            "private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t.withPropertyValues(\"spring.ai.bedrock.anthropic.chat.enabled=true\",\n\t\t\t\t\"spring.ai.bedrock.aws.access-key=\" + System.getenv(\"AWS_ACCESS_KEY_ID\"),\n\t\t\t\t\"spring.ai.bedrock.aws.secret-key=\" + System.getenv(\"AWS_SECRET_ACCESS_KEY\"),\n\t\t\t\t\"spring.ai.bedrock.aws.region=\" + Region.EU_CENTRAL_1.id(),\n\t\t\t\t\"spring.ai.bedrock.anthropic.chat.model=\" + AnthropicChatModel.CLAUDE_V2.id(),\n\t\t\t\t\"spring.ai.bedrock.anthropic.chat.options.temperature=0.5\")\n\t\t.withConfiguration(AutoConfigurations.of(BedrockAnthropicChatAutoConfiguration.class));"
        ],
        "functions": [
            {
                "name": "chatCompletion",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\t\t\tBedrockAnthropicChatClient anthropicChatClient = context.getBean(BedrockAnthropicChatClient.class);\n\t\t\tChatResponse response = anthropicChatClient.call(new Prompt(List.of(userMessage, systemMessage)));\n\t\t\tassertThat(response.getResult().getOutput().getContent()).contains(\"Blackbeard\");\n\t\t});",
                "is_abstract": "",
                "class_name": "BedrockAnthropicChatAutoConfigurationIT",
                "annotations": []
            },
            {
                "name": "chatCompletionStreaming",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\n\t\t\tBedrockAnthropicChatClient anthropicChatClient = context.getBean(BedrockAnthropicChatClient.class);\n\n\t\t\tFlux<ChatResponse> response = anthropicChatClient.stream(new Prompt(List.of(userMessage, systemMessage)));\n\n\t\t\tList<ChatResponse> responses = response.collectList().block();\n\t\t\tassertThat(responses.size()).isGreaterThan(2);\n\n\t\t\tString stitchedResponseContent = responses.stream()\n\t\t\t\t.map(ChatResponse::getResults)\n\t\t\t\t.flatMap(List::stream)\n\t\t\t\t.map(Generation::getOutput)\n\t\t\t\t.map(AssistantMessage::getContent)\n\t\t\t\t.collect(Collectors.joining());\n\n\t\t\tassertThat(stitchedResponseContent).contains(\"Blackbeard\");\n\t\t});",
                "is_abstract": "",
                "class_name": "BedrockAnthropicChatAutoConfigurationIT",
                "annotations": []
            },
            {
                "name": "propertiesTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "new ApplicationContextRunner()\n\t\t\t.withPropertyValues(\"spring.ai.bedrock.anthropic.chat.enabled=true\",\n\t\t\t\t\t\"spring.ai.bedrock.aws.access-key=ACCESS_KEY\", \"spring.ai.bedrock.aws.secret-key=SECRET_KEY\",\n\t\t\t\t\t\"spring.ai.bedrock.anthropic.chat.model=MODEL_XYZ\",\n\t\t\t\t\t\"spring.ai.bedrock.aws.region=\" + Region.EU_CENTRAL_1.id(),\n\t\t\t\t\t\"spring.ai.bedrock.anthropic.chat.options.temperature=0.55\")\n\t\t\t.withConfiguration(AutoConfigurations.of(BedrockAnthropicChatAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tvar anthropicChatProperties = context.getBean(BedrockAnthropicChatProperties.class);\n\t\t\t\tvar awsProperties = context.getBean(BedrockAwsConnectionProperties.class);\n\n\t\t\t\tassertThat(anthropicChatProperties.isEnabled()).isTrue();\n\t\t\t\tassertThat(awsProperties.getRegion()).isEqualTo(Region.EU_CENTRAL_1.id());\n\n\t\t\t\tassertThat(anthropicChatProperties.getOptions().getTemperature()).isEqualTo(0.55f);\n\t\t\t\tassertThat(anthropicChatProperties.getModel()).isEqualTo(\"MODEL_XYZ\");\n\n\t\t\t\tassertThat(awsProperties.getAccessKey()).isEqualTo(\"ACCESS_KEY\");\n\t\t\t\tassertThat(awsProperties.getSecretKey()).isEqualTo(\"SECRET_KEY\");\n\t\t\t});",
                "is_abstract": "",
                "class_name": "BedrockAnthropicChatAutoConfigurationIT",
                "annotations": []
            },
            {
                "name": "chatCompletionDisabled",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// It is disabled by default\n\t\tnew ApplicationContextRunner()\n\t\t\t.withConfiguration(AutoConfigurations.of(BedrockAnthropicChatAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tassertThat(context.getBeansOfType(BedrockAnthropicChatProperties.class)).isEmpty();\n\t\t\t\tassertThat(context.getBeansOfType(BedrockAnthropicChatClient.class)).isEmpty();\n\t\t\t});\n\n\t\t// Explicitly enable the chat auto-configuration.\n\t\tnew ApplicationContextRunner().withPropertyValues(\"spring.ai.bedrock.anthropic.chat.enabled=true\")\n\t\t\t.withConfiguration(AutoConfigurations.of(BedrockAnthropicChatAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tassertThat(context.getBeansOfType(BedrockAnthropicChatProperties.class)).isNotEmpty();\n\t\t\t\tassertThat(context.getBeansOfType(BedrockAnthropicChatClient.class)).isNotEmpty();\n\t\t\t});\n\n\t\t// Explicitly disable the chat auto-configuration.\n\t\tnew ApplicationContextRunner().withPropertyValues(\"spring.ai.bedrock.anthropic.chat.enabled=false\")\n\t\t\t.withConfiguration(AutoConfigurations.of(BedrockAnthropicChatAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tassertThat(context.getBeansOfType(BedrockAnthropicChatProperties.class)).isEmpty();\n\t\t\t\tassertThat(context.getBeansOfType(BedrockAnthropicChatClient.class)).isEmpty();\n\t\t\t});",
                "is_abstract": "",
                "class_name": "BedrockAnthropicChatAutoConfigurationIT",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/bedrock/titan/BedrockTitanChatAutoConfigurationIT.java",
        "class_names": [
            "BedrockTitanChatAutoConfigurationIT"
        ],
        "imports": "import java.util.stream.Collectors;\nimport java.util.List;\nimport org.springframework.ai.chat.Generation;\nimport reactor.core.publisher.Flux;\nimport org.springframework.ai.chat.prompt.SystemPromptTemplate;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport org.springframework.ai.chat.messages.Message;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport software.amazon.awssdk.regions.Region;\nimport java.util.Map;\nimport org.springframework.ai.bedrock.titan.api.TitanChatBedrockApi.TitanChatModel;\nimport org.springframework.ai.autoconfigure.bedrock.BedrockAwsConnectionProperties;\nimport org.springframework.ai.chat.ChatResponse;\nimport org.springframework.ai.chat.messages.UserMessage;\nimport org.springframework.ai.chat.messages.AssistantMessage;\nimport org.springframework.ai.chat.prompt.Prompt;\nimport org.springframework.ai.bedrock.titan.BedrockTitanChatClient;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.autoconfigure.AutoConfigurations;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.bedrock.titan.BedrockTitanChatAutoConfigurationIT": "org.springframework.ai.autoconfigure.bedrock.titan.BedrockTitanChatAutoConfigurationIT",
            "org.springframework.ai.autoconfigure.bedrock.titan.chatCompletion": "org.springframework.ai.autoconfigure.bedrock.titan.chatCompletion",
            "org.springframework.ai.autoconfigure.bedrock.titan.chatCompletionStreamin": "org.springframework.ai.autoconfigure.bedrock.titan.chatCompletionStreamin",
            "org.springframework.ai.autoconfigure.bedrock.titan.propertiesTest": "org.springframework.ai.autoconfigure.bedrock.titan.propertiesTest",
            "org.springframework.ai.autoconfigure.bedrock.titan.chatCompletionDisabled": "org.springframework.ai.autoconfigure.bedrock.titan.chatCompletionDisabled",
            "org.springframework.ai.autoconfigure.bedrock.titan.contextRunner": "org.springframework.ai.autoconfigure.bedrock.titan.contextRunner",
            "org.springframework.ai.autoconfigure.bedrock.titan.systemMess": "org.springframework.ai.autoconfigure.bedrock.titan.systemMess",
            "org.springframework.ai.autoconfigure.bedrock.titan.userMess": "org.springframework.ai.autoconfigure.bedrock.titan.userMess"
        },
        "package": "package org.springframework.ai.autoconfigure.bedrock.titan;",
        "property_declarations": [
            "private final UserMessage userMessage = new UserMessage(\n\t\t\t\"Tell me about 3 famous pirates from the Golden Age of Piracy and why they did.\");",
            "private final Message systemMessage = new SystemPromptTemplate(\"\"\"\n\t\t\tYou are a helpful AI assistant. Your name is {name}.\n\t\t\tYou are an AI assistant that helps people find information.\n\t\t\tYour name is {name}\n\t\t\tYou should reply to the user's request with your name and also in the style of a {voice}.\n\t\t\t\"\"\").createMessage(Map.of(\"name\", \"Bob\", \"voice\", \"pirate\"));",
            "private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t.withPropertyValues(\"spring.ai.bedrock.titan.chat.enabled=true\",\n\t\t\t\t\"spring.ai.bedrock.aws.access-key=\" + System.getenv(\"AWS_ACCESS_KEY_ID\"),\n\t\t\t\t\"spring.ai.bedrock.aws.secret-key=\" + System.getenv(\"AWS_SECRET_ACCESS_KEY\"),\n\t\t\t\t\"spring.ai.bedrock.aws.region=\" + Region.US_EAST_1.id(),\n\t\t\t\t\"spring.ai.bedrock.titan.chat.model=\" + TitanChatModel.TITAN_TEXT_EXPRESS_V1.id(),\n\t\t\t\t\"spring.ai.bedrock.titan.chat.options.temperature=0.5\",\n\t\t\t\t\"spring.ai.bedrock.titan.chat.options.maxTokenCount=500\")\n\t\t.withConfiguration(AutoConfigurations.of(BedrockTitanChatAutoConfiguration.class));"
        ],
        "functions": [
            {
                "name": "chatCompletion",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\t\t\tBedrockTitanChatClient chatClient = context.getBean(BedrockTitanChatClient.class);\n\t\t\tChatResponse response = chatClient.call(new Prompt(List.of(userMessage, systemMessage)));\n\t\t\tassertThat(response.getResult().getOutput().getContent()).contains(\"Blackbeard\");\n\t\t});",
                "is_abstract": "",
                "class_name": "BedrockTitanChatAutoConfigurationIT",
                "annotations": []
            },
            {
                "name": "chatCompletionStreaming",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\n\t\t\tBedrockTitanChatClient chatClient = context.getBean(BedrockTitanChatClient.class);\n\n\t\t\tFlux<ChatResponse> response = chatClient.stream(new Prompt(List.of(userMessage, systemMessage)));\n\n\t\t\tList<ChatResponse> responses = response.collectList().block();\n\t\t\tassertThat(responses.size()).isGreaterThan(1);\n\n\t\t\tString stitchedResponseContent = responses.stream()\n\t\t\t\t.map(ChatResponse::getResults)\n\t\t\t\t.flatMap(List::stream)\n\t\t\t\t.map(Generation::getOutput)\n\t\t\t\t.map(AssistantMessage::getContent)\n\t\t\t\t.collect(Collectors.joining());\n\n\t\t\tassertThat(stitchedResponseContent).contains(\"Blackbeard\");\n\t\t});",
                "is_abstract": "",
                "class_name": "BedrockTitanChatAutoConfigurationIT",
                "annotations": []
            },
            {
                "name": "propertiesTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "new ApplicationContextRunner()\n\t\t\t.withPropertyValues(\"spring.ai.bedrock.titan.chat.enabled=true\",\n\t\t\t\t\t\"spring.ai.bedrock.aws.access-key=ACCESS_KEY\", \"spring.ai.bedrock.aws.secret-key=SECRET_KEY\",\n\t\t\t\t\t\"spring.ai.bedrock.titan.chat.model=MODEL_XYZ\",\n\t\t\t\t\t\"spring.ai.bedrock.aws.region=\" + Region.EU_CENTRAL_1.id(),\n\t\t\t\t\t\"spring.ai.bedrock.titan.chat.options.temperature=0.55\",\n\t\t\t\t\t\"spring.ai.bedrock.titan.chat.options.topP=0.55\",\n\t\t\t\t\t\"spring.ai.bedrock.titan.chat.options.stopSequences=END1,END2\",\n\t\t\t\t\t\"spring.ai.bedrock.titan.chat.options.maxTokenCount=123\")\n\t\t\t.withConfiguration(AutoConfigurations.of(BedrockTitanChatAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tvar chatProperties = context.getBean(BedrockTitanChatProperties.class);\n\t\t\t\tvar aswProperties = context.getBean(BedrockAwsConnectionProperties.class);\n\n\t\t\t\tassertThat(chatProperties.isEnabled()).isTrue();\n\t\t\t\tassertThat(aswProperties.getRegion()).isEqualTo(Region.EU_CENTRAL_1.id());\n\t\t\t\tassertThat(chatProperties.getModel()).isEqualTo(\"MODEL_XYZ\");\n\n\t\t\t\tassertThat(chatProperties.getOptions().getTemperature()).isEqualTo(0.55f);\n\t\t\t\tassertThat(chatProperties.getOptions().getTopP()).isEqualTo(0.55f);\n\n\t\t\t\tassertThat(chatProperties.getOptions().getStopSequences()).isEqualTo(List.of(\"END1\", \"END2\"));\n\t\t\t\tassertThat(chatProperties.getOptions().getMaxTokenCount()).isEqualTo(123);\n\n\t\t\t\tassertThat(aswProperties.getAccessKey()).isEqualTo(\"ACCESS_KEY\");\n\t\t\t\tassertThat(aswProperties.getSecretKey()).isEqualTo(\"SECRET_KEY\");\n\t\t\t});",
                "is_abstract": "",
                "class_name": "BedrockTitanChatAutoConfigurationIT",
                "annotations": []
            },
            {
                "name": "chatCompletionDisabled",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// It is disabled by default\n\t\tnew ApplicationContextRunner().withConfiguration(AutoConfigurations.of(BedrockTitanChatAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tassertThat(context.getBeansOfType(BedrockTitanChatProperties.class)).isEmpty();\n\t\t\t\tassertThat(context.getBeansOfType(BedrockTitanChatClient.class)).isEmpty();\n\t\t\t});\n\n\t\t// Explicitly enable the chat auto-configuration.\n\t\tnew ApplicationContextRunner().withPropertyValues(\"spring.ai.bedrock.titan.chat.enabled=true\")\n\t\t\t.withConfiguration(AutoConfigurations.of(BedrockTitanChatAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tassertThat(context.getBeansOfType(BedrockTitanChatProperties.class)).isNotEmpty();\n\t\t\t\tassertThat(context.getBeansOfType(BedrockTitanChatClient.class)).isNotEmpty();\n\t\t\t});\n\n\t\t// Explicitly disable the chat auto-configuration.\n\t\tnew ApplicationContextRunner().withPropertyValues(\"spring.ai.bedrock.titan.chat.enabled=false\")\n\t\t\t.withConfiguration(AutoConfigurations.of(BedrockTitanChatAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tassertThat(context.getBeansOfType(BedrockTitanChatProperties.class)).isEmpty();\n\t\t\t\tassertThat(context.getBeansOfType(BedrockTitanChatClient.class)).isEmpty();\n\t\t\t});",
                "is_abstract": "",
                "class_name": "BedrockTitanChatAutoConfigurationIT",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/bedrock/titan/BedrockTitanEmbeddingAutoConfigurationIT.java",
        "class_names": [
            "BedrockTitanEmbeddingAutoConfigurationIT"
        ],
        "imports": "import org.springframework.ai.embedding.EmbeddingResponse;\nimport java.util.List;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport software.amazon.awssdk.regions.Region;\nimport java.util.Base64;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.autoconfigure.AutoConfigurations;\nimport org.springframework.ai.autoconfigure.bedrock.BedrockAwsConnectionProperties;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.ai.bedrock.titan.api.TitanEmbeddingBedrockApi.TitanEmbeddingModel;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport org.springframework.ai.bedrock.titan.BedrockTitanEmbeddingClient;\nimport org.springframework.core.io.DefaultResourceLoader;\nimport org.springframework.ai.bedrock.titan.BedrockTitanEmbeddingClient.InputType;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.bedrock.titan.BedrockTitanEmbeddingAutoConfigurationIT": "org.springframework.ai.autoconfigure.bedrock.titan.BedrockTitanEmbeddingAutoConfigurationIT",
            "org.springframework.ai.autoconfigure.bedrock.titan.singleTextEmbeddin": "org.springframework.ai.autoconfigure.bedrock.titan.singleTextEmbeddin",
            "org.springframework.ai.autoconfigure.bedrock.titan.singleImageEmbeddin": "org.springframework.ai.autoconfigure.bedrock.titan.singleImageEmbeddin",
            "org.springframework.ai.autoconfigure.bedrock.titan.propertiesTest": "org.springframework.ai.autoconfigure.bedrock.titan.propertiesTest",
            "org.springframework.ai.autoconfigure.bedrock.titan.embeddingDisabled": "org.springframework.ai.autoconfigure.bedrock.titan.embeddingDisabled",
            "org.springframework.ai.autoconfigure.bedrock.titan.contextRunner": "org.springframework.ai.autoconfigure.bedrock.titan.contextRunner"
        },
        "package": "package org.springframework.ai.autoconfigure.bedrock.titan;",
        "property_declarations": [
            "private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t.withPropertyValues(\"spring.ai.bedrock.titan.embedding.enabled=true\",\n\t\t\t\t\"spring.ai.bedrock.aws.access-key=\" + System.getenv(\"AWS_ACCESS_KEY_ID\"),\n\t\t\t\t\"spring.ai.bedrock.aws.secret-key=\" + System.getenv(\"AWS_SECRET_ACCESS_KEY\"),\n\t\t\t\t\"spring.ai.bedrock.aws.region=\" + Region.US_EAST_1.id(),\n\t\t\t\t\"spring.ai.bedrock.titan.embedding.model=\" + TitanEmbeddingModel.TITAN_EMBED_IMAGE_V1.id())\n\t\t.withConfiguration(AutoConfigurations.of(BedrockTitanEmbeddingAutoConfiguration.class));"
        ],
        "functions": [
            {
                "name": "singleTextEmbedding",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.withPropertyValues(\"spring.ai.bedrock.titan.embedding.inputType=TEXT\").run(context -> {\n\t\t\tBedrockTitanEmbeddingClient embeddingClient = context.getBean(BedrockTitanEmbeddingClient.class);\n\t\t\tassertThat(embeddingClient).isNotNull();\n\t\t\tEmbeddingResponse embeddingResponse = embeddingClient.embedForResponse(List.of(\"Hello World\"));\n\t\t\tassertThat(embeddingResponse.getResults()).hasSize(1);\n\t\t\tassertThat(embeddingResponse.getResults().get(0).getOutput()).isNotEmpty();\n\t\t\tassertThat(embeddingClient.dimensions()).isEqualTo(1024);\n\t\t});",
                "is_abstract": "",
                "class_name": "BedrockTitanEmbeddingAutoConfigurationIT",
                "annotations": []
            },
            {
                "name": "singleImageEmbedding",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.withPropertyValues(\"spring.ai.bedrock.titan.embedding.inputType=IMAGE\").run(context -> {\n\t\t\tBedrockTitanEmbeddingClient embeddingClient = context.getBean(BedrockTitanEmbeddingClient.class);\n\t\t\tassertThat(embeddingClient).isNotNull();\n\n\t\t\tbyte[] image = new DefaultResourceLoader().getResource(\"classpath:/spring_framework.png\")\n\t\t\t\t.getContentAsByteArray();\n\n\t\t\tvar base64Image = Base64.getEncoder().encodeToString(image);\n\n\t\t\tEmbeddingResponse embeddingResponse = embeddingClient.embedForResponse(List.of(base64Image));\n\n\t\t\tassertThat(embeddingResponse.getResults()).hasSize(1);\n\t\t\tassertThat(embeddingResponse.getResults().get(0).getOutput()).isNotEmpty();\n\t\t\tassertThat(embeddingClient.dimensions()).isEqualTo(1024);\n\t\t});",
                "is_abstract": "",
                "class_name": "BedrockTitanEmbeddingAutoConfigurationIT",
                "annotations": []
            },
            {
                "name": "propertiesTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "new ApplicationContextRunner().withPropertyValues(\"spring.ai.bedrock.titan.embedding.enabled=true\",\n\t\t\t\t\"spring.ai.bedrock.aws.access-key=ACCESS_KEY\", \"spring.ai.bedrock.aws.secret-key=SECRET_KEY\",\n\t\t\t\t\"spring.ai.bedrock.aws.region=\" + Region.EU_CENTRAL_1.id(),\n\t\t\t\t\"spring.ai.bedrock.titan.embedding.model=MODEL_XYZ\", \"spring.ai.bedrock.titan.embedding.inputType=TEXT\")\n\t\t\t.withConfiguration(AutoConfigurations.of(BedrockTitanEmbeddingAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tvar properties = context.getBean(BedrockTitanEmbeddingProperties.class);\n\t\t\t\tvar awsProperties = context.getBean(BedrockAwsConnectionProperties.class);\n\n\t\t\t\tassertThat(properties.isEnabled()).isTrue();\n\t\t\t\tassertThat(awsProperties.getRegion()).isEqualTo(Region.EU_CENTRAL_1.id());\n\t\t\t\tassertThat(properties.getModel()).isEqualTo(\"MODEL_XYZ\");\n\n\t\t\t\tassertThat(properties.getInputType()).isEqualTo(InputType.TEXT);\n\n\t\t\t\tassertThat(awsProperties.getAccessKey()).isEqualTo(\"ACCESS_KEY\");\n\t\t\t\tassertThat(awsProperties.getSecretKey()).isEqualTo(\"SECRET_KEY\");\n\t\t\t});",
                "is_abstract": "",
                "class_name": "BedrockTitanEmbeddingAutoConfigurationIT",
                "annotations": []
            },
            {
                "name": "embeddingDisabled",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// It is disabled by default\n\t\tnew ApplicationContextRunner()\n\t\t\t.withConfiguration(AutoConfigurations.of(BedrockTitanEmbeddingAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tassertThat(context.getBeansOfType(BedrockTitanEmbeddingProperties.class)).isEmpty();\n\t\t\t\tassertThat(context.getBeansOfType(BedrockTitanEmbeddingClient.class)).isEmpty();\n\t\t\t});\n\n\t\t// Explicitly enable the embedding auto-configuration.\n\t\tnew ApplicationContextRunner().withPropertyValues(\"spring.ai.bedrock.titan.embedding.enabled=true\")\n\t\t\t.withConfiguration(AutoConfigurations.of(BedrockTitanEmbeddingAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tassertThat(context.getBeansOfType(BedrockTitanEmbeddingProperties.class)).isNotEmpty();\n\t\t\t\tassertThat(context.getBeansOfType(BedrockTitanEmbeddingClient.class)).isNotEmpty();\n\t\t\t});\n\n\t\t// Explicitly disable the embedding auto-configuration.\n\t\tnew ApplicationContextRunner().withPropertyValues(\"spring.ai.bedrock.titan.embedding.enabled=false\")\n\t\t\t.withConfiguration(AutoConfigurations.of(BedrockTitanEmbeddingAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tassertThat(context.getBeansOfType(BedrockTitanEmbeddingProperties.class)).isEmpty();\n\t\t\t\tassertThat(context.getBeansOfType(BedrockTitanEmbeddingClient.class)).isEmpty();\n\t\t\t});",
                "is_abstract": "",
                "class_name": "BedrockTitanEmbeddingAutoConfigurationIT",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vertexai/gemini/VertexAiGeminiAutoConfigurationIT.java",
        "class_names": [
            "VertexAiGeminiAutoConfigurationIT"
        ],
        "imports": "import java.util.stream.Collectors;\nimport org.springframework.ai.chat.prompt.Prompt;\nimport org.springframework.ai.chat.messages.UserMessage;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport reactor.core.publisher.Flux;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.autoconfigure.AutoConfigurations;\nimport org.springframework.ai.vertexai.gemini.VertexAiGeminiChatClient;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport org.springframework.ai.chat.ChatResponse;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.vertexai.gemini.VertexAiGeminiAutoConfigurationIT": "org.springframework.ai.autoconfigure.vertexai.gemini.VertexAiGeminiAutoConfigurationIT",
            "org.springframework.ai.autoconfigure.vertexai.gemini.generat": "org.springframework.ai.autoconfigure.vertexai.gemini.generat",
            "org.springframework.ai.autoconfigure.vertexai.gemini.generateStreamin": "org.springframework.ai.autoconfigure.vertexai.gemini.generateStreamin",
            "org.springframework.ai.autoconfigure.vertexai.gemini.logger": "org.springframework.ai.autoconfigure.vertexai.gemini.logger",
            "org.springframework.ai.autoconfigure.vertexai.gemini.contextRunner": "org.springframework.ai.autoconfigure.vertexai.gemini.contextRunner"
        },
        "package": "package org.springframework.ai.autoconfigure.vertexai.gemini;",
        "property_declarations": [
            "private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t.withPropertyValues(\"spring.ai.vertex.ai.gemini.project-id=\" + System.getenv(\"VERTEX_AI_GEMINI_PROJECT_ID\"),\n\t\t\t\t\"spring.ai.vertex.ai.gemini.location=\" + System.getenv(\"VERTEX_AI_GEMINI_LOCATION\"))\n\t\t.withConfiguration(AutoConfigurations.of(VertexAiGeminiAutoConfiguration.class));",
            "private static final Log logger = LogFactory.getLog(VertexAiGeminiAutoConfigurationIT.class);"
        ],
        "functions": [
            {
                "name": "generate",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\t\t\tVertexAiGeminiChatClient client = context.getBean(VertexAiGeminiChatClient.class);\n\t\t\tString response = client.call(\"Hello\");\n\t\t\tassertThat(response).isNotEmpty();\n\t\t\tlogger.info(\"Response: \" + response);\n\t\t});",
                "is_abstract": "",
                "class_name": "VertexAiGeminiAutoConfigurationIT",
                "annotations": []
            },
            {
                "name": "generateStreaming",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\t\t\tVertexAiGeminiChatClient client = context.getBean(VertexAiGeminiChatClient.class);\n\t\t\tFlux<ChatResponse> responseFlux = client.stream(new Prompt(new UserMessage(\"Hello\")));\n\t\t\tString response = responseFlux.collectList().block().stream().map(chatResponse -> {\n\t\t\t\treturn chatResponse.getResults().get(0).getOutput().getContent();\n\t\t\t}).collect(Collectors.joining());\n\n\t\t\tassertThat(response).isNotEmpty();\n\t\t\tlogger.info(\"Response: \" + response);\n\t\t});",
                "is_abstract": "",
                "class_name": "VertexAiGeminiAutoConfigurationIT",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vertexai/gemini/tool/MockWeatherService.java",
        "class_names": [
            "MockWeatherService"
        ],
        "imports": "import com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport com.fasterxml.jackson.annotation.JsonPropertyDescription;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport java.util.function.Function;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport com.fasterxml.jackson.annotation.JsonClassDescription;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.vertexai.gemini.tool.MockWeatherServi": "org.springframework.ai.autoconfigure.vertexai.gemini.tool.MockWeatherServi",
            "org.springframework.ai.autoconfigure.vertexai.gemini.tool.apply": "org.springframework.ai.autoconfigure.vertexai.gemini.tool.apply",
            "org.springframework.ai.autoconfigure.vertexai.gemini.tool.unitNam": "org.springframework.ai.autoconfigure.vertexai.gemini.tool.unitNam"
        },
        "package": "package org.springframework.ai.autoconfigure.vertexai.gemini.tool;",
        "property_declarations": [
            "public final String unitName;"
        ],
        "functions": [
            {
                "name": "apply",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "double temperature = 0;\n\t\tif (request.location().contains(\"Paris\")) {\n\t\t\ttemperature = 15;\n\t\t}\n\t\telse if (request.location().contains(\"Tokyo\")) {\n\t\t\ttemperature = 10;\n\t\t}\n\t\telse if (request.location().contains(\"San Francisco\")) {\n\t\t\ttemperature = 30;\n\t\t}\n\n\t\treturn new Response(temperature, 15, 20, 2, 53, 45, Unit.C);",
                "is_abstract": "",
                "class_name": "MockWeatherService",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vertexai/gemini/tool/FunctionCallWithFunctionWrapperIT.java",
        "class_names": [
            "Config",
            "FunctionCallWithFunctionWrapperIT"
        ],
        "imports": "import java.util.List;\nimport org.springframework.ai.vertexai.gemini.VertexAiGeminiChatOptions;\nimport org.springframework.ai.chat.messages.SystemMessage;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.slf4j.Logger;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.ai.vertexai.gemini.VertexAiGeminiChatClient;\nimport org.springframework.ai.chat.ChatResponse;\nimport org.springframework.ai.chat.messages.UserMessage;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.ai.autoconfigure.vertexai.gemini.VertexAiGeminiAutoConfiguration;\nimport org.springframework.ai.model.function.FunctionCallbackWrapper;\nimport org.springframework.ai.chat.prompt.Prompt;\nimport org.springframework.ai.model.function.FunctionCallbackWrapper.Builder.SchemaType;\nimport org.springframework.ai.model.function.FunctionCallback;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.autoconfigure.AutoConfigurations;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.vertexai.gemini.tool.FunctionCallWithFunctionWrapperIT": "org.springframework.ai.autoconfigure.vertexai.gemini.tool.FunctionCallWithFunctionWrapperIT",
            "org.springframework.ai.autoconfigure.vertexai.gemini.tool.Confi": "org.springframework.ai.autoconfigure.vertexai.gemini.tool.Confi",
            "org.springframework.ai.autoconfigure.vertexai.gemini.tool.functionCallTest": "org.springframework.ai.autoconfigure.vertexai.gemini.tool.functionCallTest",
            "org.springframework.ai.autoconfigure.vertexai.gemini.tool.weatherFunctionInfo": "org.springframework.ai.autoconfigure.vertexai.gemini.tool.weatherFunctionInfo",
            "org.springframework.ai.autoconfigure.vertexai.gemini.tool.logger": "org.springframework.ai.autoconfigure.vertexai.gemini.tool.logger",
            "org.springframework.ai.autoconfigure.vertexai.gemini.tool.contextRunner": "org.springframework.ai.autoconfigure.vertexai.gemini.tool.contextRunner"
        },
        "package": "package org.springframework.ai.autoconfigure.vertexai.gemini.tool;",
        "property_declarations": [
            "private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t.withPropertyValues(\"spring.ai.vertex.ai.gemini.project-id=\" + System.getenv(\"VERTEX_AI_GEMINI_PROJECT_ID\"),\n\t\t\t\t\"spring.ai.vertex.ai.gemini.location=\" + System.getenv(\"VERTEX_AI_GEMINI_LOCATION\"))\n\t\t.withConfiguration(AutoConfigurations.of(VertexAiGeminiAutoConfiguration.class))\n\t\t.withUserConfiguration(Config.class);",
            "private final Logger logger = LoggerFactory.getLogger(FunctionCallWithFunctionWrapperIT.class);"
        ],
        "functions": [
            {
                "name": "functionCallTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner\n\t\t\t.withPropertyValues(\"spring.ai.vertex.ai.gemini.chat.options.model=\"\n\t\t\t\t\t+ VertexAiGeminiChatClient.ChatModel.GEMINI_PRO.getValue())\n\t\t\t.run(context -> {\n\n\t\t\t\tVertexAiGeminiChatClient chatClient = context.getBean(VertexAiGeminiChatClient.class);\n\n\t\t\t\tvar systemMessage = new SystemMessage(\"\"\"\n\t\t\t\t\t\tUse Multi-turn function calling.\n\t\t\t\t\t\tAnswer for all listed locations.\n\t\t\t\t\t\tIf the information was not fetched call the function again. Repeat at most 3 times.\n\t\t\t\t\t\t\"\"\");\n\t\t\t\tvar userMessage = new UserMessage(\"What's the weather like in San Francisco, Paris and in Tokyo?\");\n\n\t\t\t\tChatResponse response = chatClient.call(new Prompt(List.of(systemMessage, userMessage),\n\t\t\t\t\t\tVertexAiGeminiChatOptions.builder().withFunction(\"WeatherInfo\").build()));\n\n\t\t\t\tlogger.info(\"Response: {}\", response);\n\n\t\t\t\tassertThat(response.getResult().getOutput().getContent()).containsAnyOf(\"30.0\", \"30\");\n\t\t\t\tassertThat(response.getResult().getOutput().getContent()).containsAnyOf(\"10.0\", \"10\");\n\t\t\t\tassertThat(response.getResult().getOutput().getContent()).containsAnyOf(\"15\", \"15.0\");\n\n\t\t\t});",
                "is_abstract": "",
                "class_name": "FunctionCallWithFunctionWrapperIT",
                "annotations": []
            },
            {
                "name": "weatherFunctionInfo",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return FunctionCallbackWrapper.builder(new MockWeatherService())\n\t\t\t\t.withName(\"WeatherInfo\")\n\t\t\t\t.withSchemaType(SchemaType.OPEN_API_SCHEMA)\n\t\t\t\t.withDescription(\"Get the current weather in a given location\")\n\t\t\t\t.build();",
                "is_abstract": "",
                "class_name": "FunctionCallWithFunctionWrapperIT Config",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vertexai/gemini/tool/FunctionCallWithFunctionBeanIT.java",
        "class_names": [
            "Config",
            "FunctionCallWithFunctionBeanIT"
        ],
        "imports": "import java.util.List;\nimport org.springframework.ai.vertexai.gemini.VertexAiGeminiChatOptions;\nimport org.springframework.ai.chat.messages.SystemMessage;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.slf4j.Logger;\nimport java.util.function.Function;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.ai.vertexai.gemini.VertexAiGeminiChatClient;\nimport org.springframework.ai.chat.ChatResponse;\nimport org.springframework.ai.chat.messages.UserMessage;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.ai.autoconfigure.vertexai.gemini.VertexAiGeminiAutoConfiguration;\nimport org.springframework.ai.chat.prompt.Prompt;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.autoconfigure.AutoConfigurations;\nimport org.springframework.context.annotation.Description;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.vertexai.gemini.tool.FunctionCallWithFunctionBeanIT": "org.springframework.ai.autoconfigure.vertexai.gemini.tool.FunctionCallWithFunctionBeanIT",
            "org.springframework.ai.autoconfigure.vertexai.gemini.tool.Confi": "org.springframework.ai.autoconfigure.vertexai.gemini.tool.Confi",
            "org.springframework.ai.autoconfigure.vertexai.gemini.tool.functionCallTest": "org.springframework.ai.autoconfigure.vertexai.gemini.tool.functionCallTest",
            "org.springframework.ai.autoconfigure.vertexai.gemini.tool.Description": "org.springframework.ai.autoconfigure.vertexai.gemini.tool.Description",
            "org.springframework.ai.autoconfigure.vertexai.gemini.tool.weatherFunction3": "org.springframework.ai.autoconfigure.vertexai.gemini.tool.weatherFunction3",
            "org.springframework.ai.autoconfigure.vertexai.gemini.tool.logger": "org.springframework.ai.autoconfigure.vertexai.gemini.tool.logger",
            "org.springframework.ai.autoconfigure.vertexai.gemini.tool.contextRunner": "org.springframework.ai.autoconfigure.vertexai.gemini.tool.contextRunner"
        },
        "package": "package org.springframework.ai.autoconfigure.vertexai.gemini.tool;",
        "property_declarations": [
            "private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t.withPropertyValues(\"spring.ai.vertex.ai.gemini.project-id=\" + System.getenv(\"VERTEX_AI_GEMINI_PROJECT_ID\"),\n\t\t\t\t\"spring.ai.vertex.ai.gemini.location=\" + System.getenv(\"VERTEX_AI_GEMINI_LOCATION\"))\n\n\t\t.withConfiguration(AutoConfigurations.of(VertexAiGeminiAutoConfiguration.class))\n\t\t.withUserConfiguration(Config.class);",
            "private final Logger logger = LoggerFactory.getLogger(FunctionCallWithFunctionBeanIT.class);"
        ],
        "functions": [
            {
                "name": "functionCallTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner\n\t\t\t.withPropertyValues(\"spring.ai.vertex.ai.gemini.chat.options.model=\"\n\t\t\t\t\t+ VertexAiGeminiChatClient.ChatModel.GEMINI_PRO.getValue())\n\t\t\t.run(context -> {\n\n\t\t\t\tVertexAiGeminiChatClient chatClient = context.getBean(VertexAiGeminiChatClient.class);\n\n\t\t\t\tvar systemMessage = new SystemMessage(\"\"\"\n\t\t\t\t\t\tUse Multi-turn function calling.\n\t\t\t\t\t\tAnswer for all listed locations.\n\t\t\t\t\t\tIf the information was not fetched call the function again. Repeat at most 3 times.\n\t\t\t\t\t\t\"\"\");\n\t\t\t\tvar userMessage = new UserMessage(\n\t\t\t\t\t\t\"What's the weather like in San Francisco, Paris and in Tokyo (Japan)?\");\n\n\t\t\t\tChatResponse response = chatClient.call(new Prompt(List.of(systemMessage, userMessage),\n\t\t\t\t\t\tVertexAiGeminiChatOptions.builder().withFunction(\"weatherFunction\").build()));\n\n\t\t\t\tlogger.info(\"Response: {}\", response);\n\n\t\t\t\tassertThat(response.getResult().getOutput().getContent()).contains(\"30\", \"10\", \"15\");\n\n\t\t\t\tresponse = chatClient.call(new Prompt(List.of(systemMessage, userMessage),\n\t\t\t\t\t\tVertexAiGeminiChatOptions.builder().withFunction(\"weatherFunction3\").build()));\n\n\t\t\t\tlogger.info(\"Response: {}\", response);\n\n\t\t\t\tassertThat(response.getResult().getOutput().getContent()).contains(\"30\", \"10\", \"15\");\n\n\t\t\t\tresponse = chatClient\n\t\t\t\t\t.call(new Prompt(List.of(systemMessage, userMessage), VertexAiGeminiChatOptions.builder().build()));\n\n\t\t\t\tlogger.info(\"Response: {}\", response);\n\n\t\t\t\tassertThat(response.getResult().getOutput().getContent()).doesNotContain(\"30\", \"10\", \"15\");\n\n\t\t\t});",
                "is_abstract": "",
                "class_name": "FunctionCallWithFunctionBeanIT",
                "annotations": []
            },
            {
                "name": "Description",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new MockWeatherService();",
                "is_abstract": "",
                "class_name": "FunctionCallWithFunctionBeanIT Config",
                "annotations": [
                    "@Description(\"Get the weather in location\")"
                ]
            },
            {
                "name": "weatherFunction3",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "MockWeatherService weatherService = new MockWeatherService();\n\t\t\treturn (weatherService::apply);",
                "is_abstract": "",
                "class_name": "FunctionCallWithFunctionBeanIT Config",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vertexai/gemini/tool/FunctionCallWithPromptFunctionIT.java",
        "class_names": [
            "FunctionCallWithPromptFunctionIT"
        ],
        "imports": "import org.springframework.ai.chat.prompt.Prompt;\nimport java.util.List;\nimport org.springframework.ai.chat.messages.UserMessage;\nimport org.springframework.ai.vertexai.gemini.VertexAiGeminiChatOptions;\nimport org.slf4j.LoggerFactory;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.slf4j.Logger;\nimport org.springframework.ai.model.function.FunctionCallbackWrapper.Builder.SchemaType;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.chat.messages.SystemMessage;\nimport org.springframework.boot.autoconfigure.AutoConfigurations;\nimport org.springframework.ai.vertexai.gemini.VertexAiGeminiChatClient;\nimport org.springframework.ai.autoconfigure.vertexai.gemini.VertexAiGeminiAutoConfiguration;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport org.springframework.ai.chat.ChatResponse;\nimport org.springframework.ai.model.function.FunctionCallbackWrapper;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.vertexai.gemini.tool.FunctionCallWithPromptFunctionIT": "org.springframework.ai.autoconfigure.vertexai.gemini.tool.FunctionCallWithPromptFunctionIT",
            "org.springframework.ai.autoconfigure.vertexai.gemini.tool.functionCallTest": "org.springframework.ai.autoconfigure.vertexai.gemini.tool.functionCallTest",
            "org.springframework.ai.autoconfigure.vertexai.gemini.tool.logger": "org.springframework.ai.autoconfigure.vertexai.gemini.tool.logger",
            "org.springframework.ai.autoconfigure.vertexai.gemini.tool.contextRunner": "org.springframework.ai.autoconfigure.vertexai.gemini.tool.contextRunner"
        },
        "package": "package org.springframework.ai.autoconfigure.vertexai.gemini.tool;",
        "property_declarations": [
            "private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t.withPropertyValues(\"spring.ai.vertex.ai.gemini.project-id=\" + System.getenv(\"VERTEX_AI_GEMINI_PROJECT_ID\"),\n\t\t\t\t\"spring.ai.vertex.ai.gemini.location=\" + System.getenv(\"VERTEX_AI_GEMINI_LOCATION\"))\n\t\t.withConfiguration(AutoConfigurations.of(VertexAiGeminiAutoConfiguration.class));",
            "private final Logger logger = LoggerFactory.getLogger(FunctionCallWithPromptFunctionIT.class);"
        ],
        "functions": [
            {
                "name": "functionCallTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner\n\t\t\t.withPropertyValues(\"spring.ai.vertex.ai.gemini.chat.options.model=\"\n\t\t\t\t\t+ VertexAiGeminiChatClient.ChatModel.GEMINI_PRO.getValue())\n\t\t\t.run(context -> {\n\n\t\t\t\tVertexAiGeminiChatClient chatClient = context.getBean(VertexAiGeminiChatClient.class);\n\n\t\t\t\tvar systemMessage = new SystemMessage(\"\"\"\n\t\t\t\t\t\tUse Multi-turn function calling.\n\t\t\t\t\t\tAnswer for all listed locations.\n\t\t\t\t\t\tIf the information was not fetched call the function again. Repeat at most 3 times.\n\t\t\t\t\t\t\"\"\");\n\t\t\t\tUserMessage userMessage = new UserMessage(\n\t\t\t\t\t\t\"What's the weather like in San Francisco, in Paris and in Tokyo?\");\n\n\t\t\t\tvar promptOptions = VertexAiGeminiChatOptions.builder()\n\t\t\t\t\t.withFunctionCallbacks(List.of(FunctionCallbackWrapper.builder(new MockWeatherService())\n\t\t\t\t\t\t.withName(\"CurrentWeatherService\")\n\t\t\t\t\t\t.withSchemaType(SchemaType.OPEN_API_SCHEMA) // IMPORTANT!!\n\t\t\t\t\t\t.withDescription(\"Get the weather in location\")\n\t\t\t\t\t\t.build()))\n\t\t\t\t\t.build();\n\n\t\t\t\tChatResponse response = chatClient.call(new Prompt(List.of(systemMessage, userMessage), promptOptions));\n\n\t\t\t\tlogger.info(\"Response: {}\", response);\n\n\t\t\t\tassertThat(response.getResult().getOutput().getContent()).contains(\"30\", \"10\", \"15\");\n\n\t\t\t\t// Verify that no function call is made.\n\t\t\t\tresponse = chatClient\n\t\t\t\t\t.call(new Prompt(List.of(systemMessage, userMessage), VertexAiGeminiChatOptions.builder().build()));\n\n\t\t\t\tlogger.info(\"Response: {}\", response);\n\n\t\t\t\tassertThat(response.getResult().getOutput().getContent()).doesNotContain(\"30\", \"10\", \"15\");\n\n\t\t\t});",
                "is_abstract": "",
                "class_name": "FunctionCallWithPromptFunctionIT",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vertexai/palm2/VertexAiPaLm2AutoConfigurationIT.java",
        "class_names": [
            "VertexAiPaLm2AutoConfigurationIT"
        ],
        "imports": "import java.util.List;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.springframework.boot.autoconfigure.web.client.RestClientAutoConfiguration;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.springframework.ai.vertexai.palm2.VertexAiPaLm2ChatClient;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.autoconfigure.AutoConfigurations;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport org.springframework.ai.vertexai.palm2.VertexAiPaLm2EmbeddingClient;\nimport org.springframework.ai.embedding.EmbeddingResponse;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.vertexai.palm2.VertexAiPaLm2AutoConfigurationIT": "org.springframework.ai.autoconfigure.vertexai.palm2.VertexAiPaLm2AutoConfigurationIT",
            "org.springframework.ai.autoconfigure.vertexai.palm2.generat": "org.springframework.ai.autoconfigure.vertexai.palm2.generat",
            "org.springframework.ai.autoconfigure.vertexai.palm2.embeddin": "org.springframework.ai.autoconfigure.vertexai.palm2.embeddin",
            "org.springframework.ai.autoconfigure.vertexai.palm2.embeddingActivation": "org.springframework.ai.autoconfigure.vertexai.palm2.embeddingActivation",
            "org.springframework.ai.autoconfigure.vertexai.palm2.chatActivation": "org.springframework.ai.autoconfigure.vertexai.palm2.chatActivation",
            "org.springframework.ai.autoconfigure.vertexai.palm2.logger": "org.springframework.ai.autoconfigure.vertexai.palm2.logger",
            "org.springframework.ai.autoconfigure.vertexai.palm2.contextRunner": "org.springframework.ai.autoconfigure.vertexai.palm2.contextRunner"
        },
        "package": "package org.springframework.ai.autoconfigure.vertexai.palm2;",
        "property_declarations": [
            "private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t.withPropertyValues(\"spring.ai.vertex.ai.baseUrl=https://generativelanguage.googleapis.com/v1beta3\",\n\t\t\t\t\"spring.ai.vertex.ai.apiKey=\" + System.getenv(\"PALM_API_KEY\"),\n\t\t\t\t\"spring.ai.vertex.ai.chat.model=chat-bison-001\", \"spring.ai.vertex.ai.chat.options.temperature=0.8\",\n\t\t\t\t\"spring.ai.vertex.ai.embedding.model=embedding-gecko-001\")\n\t\t.withConfiguration(\n\t\t\t\tAutoConfigurations.of(RestClientAutoConfiguration.class, VertexAiPalm2AutoConfiguration.class));",
            "private static final Log logger = LogFactory.getLog(VertexAiPaLm2AutoConfigurationIT.class);"
        ],
        "functions": [
            {
                "name": "generate",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\t\t\tVertexAiPaLm2ChatClient client = context.getBean(VertexAiPaLm2ChatClient.class);\n\n\t\t\tString response = client.call(\"Hello\");\n\n\t\t\tassertThat(response).isNotEmpty();\n\t\t\tlogger.info(\"Response: \" + response);\n\t\t});",
                "is_abstract": "",
                "class_name": "VertexAiPaLm2AutoConfigurationIT",
                "annotations": []
            },
            {
                "name": "embedding",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\t\t\tVertexAiPaLm2EmbeddingClient embeddingClient = context.getBean(VertexAiPaLm2EmbeddingClient.class);\n\n\t\t\tEmbeddingResponse embeddingResponse = embeddingClient\n\t\t\t\t.embedForResponse(List.of(\"Hello World\", \"World is big and salvation is near\"));\n\t\t\tassertThat(embeddingResponse.getResults()).hasSize(2);\n\t\t\tassertThat(embeddingResponse.getResults().get(0).getOutput()).isNotEmpty();\n\t\t\tassertThat(embeddingResponse.getResults().get(0).getIndex()).isEqualTo(0);\n\t\t\tassertThat(embeddingResponse.getResults().get(1).getOutput()).isNotEmpty();\n\t\t\tassertThat(embeddingResponse.getResults().get(1).getIndex()).isEqualTo(1);\n\n\t\t\tassertThat(embeddingClient.dimensions()).isEqualTo(768);\n\t\t});",
                "is_abstract": "",
                "class_name": "VertexAiPaLm2AutoConfigurationIT",
                "annotations": []
            },
            {
                "name": "embeddingActivation",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// Disable the embedding auto-configuration.\n\t\tcontextRunner.withPropertyValues(\"spring.ai.vertex.ai.embedding.enabled=false\").run(context -> {\n\t\t\tassertThat(context.getBeansOfType(VertexAiPalm2EmbeddingProperties.class)).isNotEmpty();\n\t\t\tassertThat(context.getBeansOfType(VertexAiPaLm2EmbeddingClient.class)).isEmpty();\n\t\t});\n\n\t\t// The embedding auto-configuration is enabled by default.\n\t\tcontextRunner.run(context -> {\n\t\t\tassertThat(context.getBeansOfType(VertexAiPalm2EmbeddingProperties.class)).isNotEmpty();\n\t\t\tassertThat(context.getBeansOfType(VertexAiPaLm2EmbeddingClient.class)).isNotEmpty();\n\t\t});\n\n\t\t// Explicitly enable the embedding auto-configuration.\n\t\tcontextRunner.withPropertyValues(\"spring.ai.vertex.ai.embedding.enabled=true\").run(context -> {\n\t\t\tassertThat(context.getBeansOfType(VertexAiPalm2EmbeddingProperties.class)).isNotEmpty();\n\t\t\tassertThat(context.getBeansOfType(VertexAiPaLm2EmbeddingClient.class)).isNotEmpty();\n\t\t});",
                "is_abstract": "",
                "class_name": "VertexAiPaLm2AutoConfigurationIT",
                "annotations": []
            },
            {
                "name": "chatActivation",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// Disable the chat auto-configuration.\n\t\tcontextRunner.withPropertyValues(\"spring.ai.vertex.ai.chat.enabled=false\").run(context -> {\n\t\t\tassertThat(context.getBeansOfType(VertexAiPlam2ChatProperties.class)).isNotEmpty();\n\t\t\tassertThat(context.getBeansOfType(VertexAiPaLm2ChatClient.class)).isEmpty();\n\t\t});\n\n\t\t// The chat auto-configuration is enabled by default.\n\t\tcontextRunner.run(context -> {\n\t\t\tassertThat(context.getBeansOfType(VertexAiPlam2ChatProperties.class)).isNotEmpty();\n\t\t\tassertThat(context.getBeansOfType(VertexAiPaLm2ChatClient.class)).isNotEmpty();\n\t\t});\n\n\t\t// Explicitly enable the chat auto-configuration.\n\t\tcontextRunner.withPropertyValues(\"spring.ai.vertex.ai.chat.enabled=true\").run(context -> {\n\t\t\tassertThat(context.getBeansOfType(VertexAiPlam2ChatProperties.class)).isNotEmpty();\n\t\t\tassertThat(context.getBeansOfType(VertexAiPaLm2ChatClient.class)).isNotEmpty();\n\t\t});",
                "is_abstract": "",
                "class_name": "VertexAiPaLm2AutoConfigurationIT",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/transformers/TransformersEmbeddingClientAutoConfigurationIT.java",
        "class_names": [
            "TransformersEmbeddingClientAutoConfigurationIT"
        ],
        "imports": "import java.io.File;\nimport java.util.List;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.springframework.ai.transformers.TransformersEmbeddingClient;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.autoconfigure.AutoConfigurations;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport org.springframework.ai.embedding.EmbeddingClient;\nimport org.junit.jupiter.api.io.TempDir;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.transformers.TransformersEmbeddingClientAutoConfigurationIT": "org.springframework.ai.autoconfigure.transformers.TransformersEmbeddingClientAutoConfigurationIT",
            "org.springframework.ai.autoconfigure.transformers.embeddin": "org.springframework.ai.autoconfigure.transformers.embeddin",
            "org.springframework.ai.autoconfigure.transformers.remoteOnnxModel": "org.springframework.ai.autoconfigure.transformers.remoteOnnxModel",
            "org.springframework.ai.autoconfigure.transformers.embeddingActivation": "org.springframework.ai.autoconfigure.transformers.embeddingActivation",
            "org.springframework.ai.autoconfigure.transformers.Fil": "org.springframework.ai.autoconfigure.transformers.Fil",
            "org.springframework.ai.autoconfigure.transformers.contextRunner": "org.springframework.ai.autoconfigure.transformers.contextRunner"
        },
        "package": "package org.springframework.ai.autoconfigure.transformers;",
        "property_declarations": [
            "private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t.withConfiguration(AutoConfigurations.of(TransformersEmbeddingClientAutoConfiguration.class));",
            "@TempDir\n\tFile tempDir;"
        ],
        "functions": [
            {
                "name": "embedding",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\t\t\tvar properties = context.getBean(TransformersEmbeddingClientProperties.class);\n\t\t\tassertThat(properties.getCache().isEnabled()).isTrue();\n\t\t\tassertThat(properties.getCache().getDirectory()).isEqualTo(\n\t\t\t\t\tnew File(System.getProperty(\"java.io.tmpdir\"), \"spring-ai-onnx-generative\").getAbsolutePath());\n\n\t\t\tEmbeddingClient embeddingClient = context.getBean(EmbeddingClient.class);\n\t\t\tassertThat(embeddingClient).isInstanceOf(TransformersEmbeddingClient.class);\n\n\t\t\tList<List<Double>> embeddings = embeddingClient.embed(List.of(\"Spring Framework\", \"Spring AI\"));\n\n\t\t\tassertThat(embeddings.size()).isEqualTo(2); // batch size\n\t\t\tassertThat(embeddings.get(0).size()).isEqualTo(embeddingClient.dimensions()); // dimensions\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// size\n\t\t});",
                "is_abstract": "",
                "class_name": "TransformersEmbeddingClientAutoConfigurationIT",
                "annotations": []
            },
            {
                "name": "remoteOnnxModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// https://huggingface.co/intfloat/e5-small-v2\n\t\tcontextRunner.withPropertyValues(\"spring.ai.embedding.transformer.cache.directory=\" + tempDir.getAbsolutePath(),\n\t\t\t\t\"spring.ai.embedding.transformer.onnx.modelUri=https://huggingface.co/intfloat/e5-small-v2/resolve/main/model.onnx\",\n\t\t\t\t\"spring.ai.embedding.transformer.tokenizer.uri=https://huggingface.co/intfloat/e5-small-v2/raw/main/tokenizer.json\")\n\t\t\t.run(context -> {\n\t\t\t\tvar properties = context.getBean(TransformersEmbeddingClientProperties.class);\n\t\t\t\tassertThat(properties.getOnnx().getModelUri())\n\t\t\t\t\t.isEqualTo(\"https://huggingface.co/intfloat/e5-small-v2/resolve/main/model.onnx\");\n\t\t\t\tassertThat(properties.getTokenizer().getUri())\n\t\t\t\t\t.isEqualTo(\"https://huggingface.co/intfloat/e5-small-v2/raw/main/tokenizer.json\");\n\n\t\t\t\tassertThat(properties.getCache().isEnabled()).isTrue();\n\t\t\t\tassertThat(properties.getCache().getDirectory()).isEqualTo(tempDir.getAbsolutePath());\n\t\t\t\tassertThat(tempDir.listFiles()).hasSize(2);\n\n\t\t\t\tEmbeddingClient embeddingClient = context.getBean(EmbeddingClient.class);\n\t\t\t\tassertThat(embeddingClient).isInstanceOf(TransformersEmbeddingClient.class);\n\n\t\t\t\tassertThat(embeddingClient.dimensions()).isEqualTo(384);\n\n\t\t\t\tList<List<Double>> embeddings = embeddingClient.embed(List.of(\"Spring Framework\", \"Spring AI\"));\n\n\t\t\t\tassertThat(embeddings.size()).isEqualTo(2); // batch size\n\t\t\t\tassertThat(embeddings.get(0).size()).isEqualTo(embeddingClient.dimensions()); // dimensions\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// size\n\t\t\t});",
                "is_abstract": "",
                "class_name": "TransformersEmbeddingClientAutoConfigurationIT",
                "annotations": []
            },
            {
                "name": "embeddingActivation",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.withPropertyValues(\"spring.ai.embedding.transformer.enabled=false\").run(context -> {\n\t\t\tassertThat(context.getBeansOfType(TransformersEmbeddingClientProperties.class)).isNotEmpty();\n\t\t\tassertThat(context.getBeansOfType(TransformersEmbeddingClient.class)).isEmpty();\n\t\t});\n\n\t\tcontextRunner.withPropertyValues(\"spring.ai.embedding.transformer.enabled=true\").run(context -> {\n\t\t\tassertThat(context.getBeansOfType(TransformersEmbeddingClientProperties.class)).isNotEmpty();\n\t\t\tassertThat(context.getBeansOfType(TransformersEmbeddingClient.class)).isNotEmpty();\n\t\t});\n\n\t\tcontextRunner.run(context -> {\n\t\t\tassertThat(context.getBeansOfType(TransformersEmbeddingClientProperties.class)).isNotEmpty();\n\t\t\tassertThat(context.getBeansOfType(TransformersEmbeddingClient.class)).isNotEmpty();\n\t\t});",
                "is_abstract": "",
                "class_name": "TransformersEmbeddingClientAutoConfigurationIT",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/anthropic/AnthropicAutoConfigurationIT.java",
        "class_names": [
            "AnthropicAutoConfigurationIT"
        ],
        "imports": "import java.util.stream.Collectors;\nimport org.springframework.ai.chat.prompt.Prompt;\nimport java.util.List;\nimport org.springframework.ai.chat.messages.UserMessage;\nimport org.springframework.ai.chat.Generation;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport reactor.core.publisher.Flux;\nimport org.springframework.boot.autoconfigure.web.client.RestClientAutoConfiguration;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.anthropic.AnthropicChatClient;\nimport org.springframework.ai.chat.ChatResponse;\nimport org.springframework.boot.autoconfigure.AutoConfigurations;\nimport org.springframework.ai.chat.messages.AssistantMessage;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport org.springframework.ai.autoconfigure.retry.SpringAiRetryAutoConfiguration;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.anthropic.AnthropicAutoConfigurationIT": "org.springframework.ai.autoconfigure.anthropic.AnthropicAutoConfigurationIT",
            "org.springframework.ai.autoconfigure.anthropic.generat": "org.springframework.ai.autoconfigure.anthropic.generat",
            "org.springframework.ai.autoconfigure.anthropic.generateStreamin": "org.springframework.ai.autoconfigure.anthropic.generateStreamin",
            "org.springframework.ai.autoconfigure.anthropic.logger": "org.springframework.ai.autoconfigure.anthropic.logger",
            "org.springframework.ai.autoconfigure.anthropic.contextRunner": "org.springframework.ai.autoconfigure.anthropic.contextRunner"
        },
        "package": "package org.springframework.ai.autoconfigure.anthropic;",
        "property_declarations": [
            "private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t.withPropertyValues(\"spring.ai.anthropic.apiKey=\" + System.getenv(\"ANTHROPIC_API_KEY\"))\n\t\t.withConfiguration(AutoConfigurations.of(SpringAiRetryAutoConfiguration.class,\n\t\t\t\tRestClientAutoConfiguration.class, AnthropicAutoConfiguration.class));",
            "private static final Log logger = LogFactory.getLog(AnthropicAutoConfigurationIT.class);"
        ],
        "functions": [
            {
                "name": "generate",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\t\t\tAnthropicChatClient chatClient = context.getBean(AnthropicChatClient.class);\n\t\t\tString response = chatClient.call(\"Hello\");\n\t\t\tassertThat(response).isNotEmpty();\n\t\t\tlogger.info(\"Response: \" + response);\n\t\t});",
                "is_abstract": "",
                "class_name": "AnthropicAutoConfigurationIT",
                "annotations": []
            },
            {
                "name": "generateStreaming",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\t\t\tAnthropicChatClient chatClient = context.getBean(AnthropicChatClient.class);\n\t\t\tFlux<ChatResponse> responseFlux = chatClient.stream(new Prompt(new UserMessage(\"Hello\")));\n\n\t\t\tString response = responseFlux.collectList()\n\t\t\t\t.block()\n\t\t\t\t.stream()\n\t\t\t\t.map(ChatResponse::getResults)\n\t\t\t\t.flatMap(List::stream)\n\t\t\t\t.map(Generation::getOutput)\n\t\t\t\t.map(AssistantMessage::getContent)\n\t\t\t\t.collect(Collectors.joining());\n\n\t\t\tassertThat(response).isNotEmpty();\n\t\t\tlogger.info(\"Response: \" + response);\n\t\t});",
                "is_abstract": "",
                "class_name": "AnthropicAutoConfigurationIT",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/anthropic/AnthropicPropertiesTests.java",
        "class_names": [
            "AnthropicPropertiesTests"
        ],
        "imports": "import static org.assertj.core.api.Assertions.assertThat;\nimport org.springframework.boot.autoconfigure.web.client.RestClientAutoConfiguration;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.anthropic.AnthropicChatClient;\nimport org.springframework.boot.autoconfigure.AutoConfigurations;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport org.springframework.ai.autoconfigure.retry.SpringAiRetryAutoConfiguration;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.anthropic.AnthropicPropertiesTests": "org.springframework.ai.autoconfigure.anthropic.AnthropicPropertiesTests",
            "org.springframework.ai.autoconfigure.anthropic.connectionProperties": "org.springframework.ai.autoconfigure.anthropic.connectionProperties",
            "org.springframework.ai.autoconfigure.anthropic.chatOptionsTest": "org.springframework.ai.autoconfigure.anthropic.chatOptionsTest",
            "org.springframework.ai.autoconfigure.anthropic.chatCompletionDisabled": "org.springframework.ai.autoconfigure.anthropic.chatCompletionDisabled"
        },
        "package": "package org.springframework.ai.autoconfigure.anthropic;",
        "property_declarations": [],
        "functions": [
            {
                "name": "connectionProperties",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "new ApplicationContextRunner().withPropertyValues(\n\t\t// @formatter:off\n\t\t\t\t\t\"spring.ai.anthropic.base-url=TEST_BASE_URL\",\n\t\t\t\t\t\"spring.ai.anthropic.api-key=abc123\",\n\t\t\t\t\t\"spring.ai.anthropic.chat.options.model=MODEL_XYZ\",\n\t\t\t\t\t\"spring.ai.anthropic.chat.options.temperature=0.55\")\n\t\t\t\t// @formatter:on\n\t\t\t.withConfiguration(AutoConfigurations.of(SpringAiRetryAutoConfiguration.class,\n\t\t\t\t\tRestClientAutoConfiguration.class, AnthropicAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tvar chatProperties = context.getBean(AnthropicChatProperties.class);\n\t\t\t\tvar connectionProperties = context.getBean(AnthropicConnectionProperties.class);\n\n\t\t\t\tassertThat(connectionProperties.getApiKey()).isEqualTo(\"abc123\");\n\t\t\t\tassertThat(connectionProperties.getBaseUrl()).isEqualTo(\"TEST_BASE_URL\");\n\n\t\t\t\tassertThat(chatProperties.getOptions().getModel()).isEqualTo(\"MODEL_XYZ\");\n\t\t\t\tassertThat(chatProperties.getOptions().getTemperature()).isEqualTo(0.55f);\n\t\t\t\t// enabled is true by default\n\t\t\t\tassertThat(chatProperties.isEnabled()).isTrue();\n\t\t\t});",
                "is_abstract": "",
                "class_name": "AnthropicPropertiesTests",
                "annotations": []
            },
            {
                "name": "chatOptionsTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "new ApplicationContextRunner().withPropertyValues(\n\t\t// @formatter:off\n\t\t\t\t\"spring.ai.anthropic.api-key=API_KEY\",\n\t\t\t\t\"spring.ai.anthropic.base-url=TEST_BASE_URL\",\n\n\t\t\t\t\"spring.ai.anthropic.chat.options.model=MODEL_XYZ\",\n\t\t\t\t\"spring.ai.anthropic.chat.options.max-tokens=123\",\n\t\t\t\t\"spring.ai.anthropic.chat.options.metadata.user-id=MyUserId\",\n\t\t\t\t\"spring.ai.anthropic.chat.options.stop_sequences=boza,koza\",\n\n\t\t\t\t\"spring.ai.anthropic.chat.options.temperature=0.55\",\n\t\t\t\t\"spring.ai.anthropic.chat.options.top-p=0.56\",\n\t\t\t\t\"spring.ai.anthropic.chat.options.top-k=100\"\n\t\t\t\t)\n\t\t\t// @formatter:on\n\t\t\t.withConfiguration(AutoConfigurations.of(SpringAiRetryAutoConfiguration.class,\n\t\t\t\t\tRestClientAutoConfiguration.class, AnthropicAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tvar chatProperties = context.getBean(AnthropicChatProperties.class);\n\t\t\t\tvar connectionProperties = context.getBean(AnthropicConnectionProperties.class);\n\n\t\t\t\tassertThat(connectionProperties.getBaseUrl()).isEqualTo(\"TEST_BASE_URL\");\n\t\t\t\tassertThat(connectionProperties.getApiKey()).isEqualTo(\"API_KEY\");\n\t\t\t\tassertThat(chatProperties.getOptions().getModel()).isEqualTo(\"MODEL_XYZ\");\n\t\t\t\tassertThat(chatProperties.getOptions().getMaxTokens()).isEqualTo(123);\n\t\t\t\tassertThat(chatProperties.getOptions().getStopSequences()).contains(\"boza\", \"koza\");\n\t\t\t\tassertThat(chatProperties.getOptions().getTemperature()).isEqualTo(0.55f);\n\t\t\t\tassertThat(chatProperties.getOptions().getTopP()).isEqualTo(0.56f);\n\t\t\t\tassertThat(chatProperties.getOptions().getTopK()).isEqualTo(100);\n\n\t\t\t\tassertThat(chatProperties.getOptions().getMetadata().userId()).isEqualTo(\"MyUserId\");\n\t\t\t});",
                "is_abstract": "",
                "class_name": "AnthropicPropertiesTests",
                "annotations": []
            },
            {
                "name": "chatCompletionDisabled",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// It is enabled by default\n\t\tnew ApplicationContextRunner()\n\t\t\t.withConfiguration(AutoConfigurations.of(SpringAiRetryAutoConfiguration.class,\n\t\t\t\t\tRestClientAutoConfiguration.class, AnthropicAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tassertThat(context.getBeansOfType(AnthropicChatProperties.class)).isNotEmpty();\n\t\t\t\tassertThat(context.getBeansOfType(AnthropicChatClient.class)).isNotEmpty();\n\t\t\t});\n\n\t\t// Explicitly enable the chat auto-configuration.\n\t\tnew ApplicationContextRunner().withPropertyValues(\"spring.ai.anthropic.chat.enabled=true\")\n\t\t\t.withConfiguration(AutoConfigurations.of(SpringAiRetryAutoConfiguration.class,\n\t\t\t\t\tRestClientAutoConfiguration.class, AnthropicAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tassertThat(context.getBeansOfType(AnthropicChatProperties.class)).isNotEmpty();\n\t\t\t\tassertThat(context.getBeansOfType(AnthropicChatClient.class)).isNotEmpty();\n\t\t\t});\n\n\t\t// Explicitly disable the chat auto-configuration.\n\t\tnew ApplicationContextRunner().withPropertyValues(\"spring.ai.anthropic.chat.enabled=false\")\n\t\t\t.withConfiguration(AutoConfigurations.of(SpringAiRetryAutoConfiguration.class,\n\t\t\t\t\tRestClientAutoConfiguration.class, AnthropicAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tassertThat(context.getBeansOfType(AnthropicChatProperties.class)).isEmpty();\n\t\t\t\tassertThat(context.getBeansOfType(AnthropicChatClient.class)).isEmpty();\n\t\t\t});",
                "is_abstract": "",
                "class_name": "AnthropicPropertiesTests",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/anthropic/tool/MockWeatherService.java",
        "class_names": [
            "MockWeatherService"
        ],
        "imports": "import com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport com.fasterxml.jackson.annotation.JsonPropertyDescription;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport java.util.function.Function;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport com.fasterxml.jackson.annotation.JsonClassDescription;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.anthropic.tool.MockWeatherServi": "org.springframework.ai.autoconfigure.anthropic.tool.MockWeatherServi",
            "org.springframework.ai.autoconfigure.anthropic.tool.apply": "org.springframework.ai.autoconfigure.anthropic.tool.apply",
            "org.springframework.ai.autoconfigure.anthropic.tool.unitNam": "org.springframework.ai.autoconfigure.anthropic.tool.unitNam"
        },
        "package": "package org.springframework.ai.autoconfigure.anthropic.tool;",
        "property_declarations": [
            "public final String unitName;"
        ],
        "functions": [
            {
                "name": "apply",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "double temperature = 0;\n\t\tif (request.location().contains(\"Paris\")) {\n\t\t\ttemperature = 15;\n\t\t}\n\t\telse if (request.location().contains(\"Tokyo\")) {\n\t\t\ttemperature = 10;\n\t\t}\n\t\telse if (request.location().contains(\"San Francisco\")) {\n\t\t\ttemperature = 30;\n\t\t}\n\n\t\treturn new Response(temperature, 15, 20, 2, 53, 45, Unit.C);",
                "is_abstract": "",
                "class_name": "MockWeatherService",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/anthropic/tool/FunctionCallWithFunctionBeanIT.java",
        "class_names": [
            "Config",
            "FunctionCallWithFunctionBeanIT"
        ],
        "imports": "import java.util.List;\nimport org.springframework.ai.autoconfigure.anthropic.tool.MockWeatherService.Response;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport org.springframework.ai.autoconfigure.anthropic.tool.MockWeatherService.Request;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.springframework.ai.anthropic.AnthropicChatOptions;\nimport org.slf4j.Logger;\nimport java.util.function.Function;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.ai.chat.ChatResponse;\nimport org.springframework.ai.chat.messages.UserMessage;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.boot.autoconfigure.web.client.RestClientAutoConfiguration;\nimport org.springframework.ai.anthropic.AnthropicChatClient;\nimport org.springframework.ai.autoconfigure.retry.SpringAiRetryAutoConfiguration;\nimport org.springframework.ai.chat.prompt.Prompt;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.autoconfigure.anthropic.AnthropicAutoConfiguration;\nimport org.springframework.boot.autoconfigure.AutoConfigurations;\nimport org.springframework.context.annotation.Description;\nimport org.springframework.ai.anthropic.api.AnthropicApi;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.anthropic.tool.FunctionCallWithFunctionBeanIT": "org.springframework.ai.autoconfigure.anthropic.tool.FunctionCallWithFunctionBeanIT",
            "org.springframework.ai.autoconfigure.anthropic.tool.Confi": "org.springframework.ai.autoconfigure.anthropic.tool.Confi",
            "org.springframework.ai.autoconfigure.anthropic.tool.functionCallTest": "org.springframework.ai.autoconfigure.anthropic.tool.functionCallTest",
            "org.springframework.ai.autoconfigure.anthropic.tool.Description": "org.springframework.ai.autoconfigure.anthropic.tool.Description",
            "org.springframework.ai.autoconfigure.anthropic.tool.weatherFunction3": "org.springframework.ai.autoconfigure.anthropic.tool.weatherFunction3",
            "org.springframework.ai.autoconfigure.anthropic.tool.logger": "org.springframework.ai.autoconfigure.anthropic.tool.logger",
            "org.springframework.ai.autoconfigure.anthropic.tool.contextRunner": "org.springframework.ai.autoconfigure.anthropic.tool.contextRunner"
        },
        "package": "package org.springframework.ai.autoconfigure.anthropic.tool;",
        "property_declarations": [
            "private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t.withPropertyValues(\"spring.ai.anthropic.apiKey=\" + System.getenv(\"ANTHROPIC_API_KEY\"))\n\t\t.withConfiguration(AutoConfigurations.of(SpringAiRetryAutoConfiguration.class,\n\t\t\t\tRestClientAutoConfiguration.class, AnthropicAutoConfiguration.class))\n\t\t.withUserConfiguration(Config.class);",
            "private final Logger logger = LoggerFactory.getLogger(FunctionCallWithFunctionBeanIT.class);"
        ],
        "functions": [
            {
                "name": "functionCallTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner\n\t\t\t.withPropertyValues(\n\t\t\t\t\t\"spring.ai.anthropic.chat.options.model=\" + AnthropicApi.ChatModel.CLAUDE_3_OPUS.getValue())\n\t\t\t.run(context -> {\n\n\t\t\t\tAnthropicChatClient chatClient = context.getBean(AnthropicChatClient.class);\n\n\t\t\t\tvar userMessage = new UserMessage(\n\t\t\t\t\t\t\"What's the weather like in San Francisco, in Paris, France and in Tokyo, Japan? Return the temperature in Celsius.\");\n\n\t\t\t\tChatResponse response = chatClient.call(new Prompt(List.of(userMessage),\n\t\t\t\t\t\tAnthropicChatOptions.builder().withFunction(\"weatherFunction\").build()));\n\n\t\t\t\tlogger.info(\"Response: {}\", response);\n\n\t\t\t\tassertThat(response.getResult().getOutput().getContent()).contains(\"30\", \"10\", \"15\");\n\n\t\t\t\tresponse = chatClient.call(new Prompt(List.of(userMessage),\n\t\t\t\t\t\tAnthropicChatOptions.builder().withFunction(\"weatherFunction3\").build()));\n\n\t\t\t\tlogger.info(\"Response: {}\", response);\n\n\t\t\t\tassertThat(response.getResult().getOutput().getContent()).contains(\"30\", \"10\", \"15\");\n\n\t\t\t});",
                "is_abstract": "",
                "class_name": "FunctionCallWithFunctionBeanIT",
                "annotations": []
            },
            {
                "name": "Description",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new MockWeatherService();",
                "is_abstract": "",
                "class_name": "FunctionCallWithFunctionBeanIT Config",
                "annotations": [
                    "@Description(\"Get the weather in location. Return temperature in 36\u00b0F or 36\u00b0C format.\")"
                ]
            },
            {
                "name": "weatherFunction3",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "MockWeatherService weatherService = new MockWeatherService();\n\t\t\treturn (weatherService::apply);",
                "is_abstract": "",
                "class_name": "FunctionCallWithFunctionBeanIT Config",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/anthropic/tool/FunctionCallWithPromptFunctionIT.java",
        "class_names": [
            "FunctionCallWithPromptFunctionIT"
        ],
        "imports": "import org.springframework.ai.chat.prompt.Prompt;\nimport java.util.List;\nimport org.springframework.ai.chat.messages.UserMessage;\nimport org.springframework.ai.anthropic.AnthropicChatOptions;\nimport org.slf4j.LoggerFactory;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.springframework.boot.autoconfigure.web.client.RestClientAutoConfiguration;\nimport org.slf4j.Logger;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.anthropic.AnthropicChatClient;\nimport org.springframework.ai.autoconfigure.anthropic.AnthropicAutoConfiguration;\nimport org.springframework.ai.chat.ChatResponse;\nimport org.springframework.boot.autoconfigure.AutoConfigurations;\nimport org.springframework.ai.anthropic.api.AnthropicApi;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport org.springframework.ai.autoconfigure.retry.SpringAiRetryAutoConfiguration;\nimport org.springframework.ai.model.function.FunctionCallbackWrapper;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.anthropic.tool.FunctionCallWithPromptFunctionIT": "org.springframework.ai.autoconfigure.anthropic.tool.FunctionCallWithPromptFunctionIT",
            "org.springframework.ai.autoconfigure.anthropic.tool.functionCallTest": "org.springframework.ai.autoconfigure.anthropic.tool.functionCallTest",
            "org.springframework.ai.autoconfigure.anthropic.tool.logger": "org.springframework.ai.autoconfigure.anthropic.tool.logger",
            "org.springframework.ai.autoconfigure.anthropic.tool.contextRunner": "org.springframework.ai.autoconfigure.anthropic.tool.contextRunner"
        },
        "package": "package org.springframework.ai.autoconfigure.anthropic.tool;",
        "property_declarations": [
            "private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t.withPropertyValues(\"spring.ai.anthropic.apiKey=\" + System.getenv(\"ANTHROPIC_API_KEY\"))\n\t\t.withConfiguration(AutoConfigurations.of(SpringAiRetryAutoConfiguration.class,\n\t\t\t\tRestClientAutoConfiguration.class, AnthropicAutoConfiguration.class));",
            "private final Logger logger = LoggerFactory.getLogger(FunctionCallWithPromptFunctionIT.class);"
        ],
        "functions": [
            {
                "name": "functionCallTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner\n\t\t\t.withPropertyValues(\n\t\t\t\t\t\"spring.ai.anthropic.chat.options.model=\" + AnthropicApi.ChatModel.CLAUDE_3_OPUS.getValue())\n\t\t\t.run(context -> {\n\n\t\t\t\tAnthropicChatClient chatClient = context.getBean(AnthropicChatClient.class);\n\n\t\t\t\tUserMessage userMessage = new UserMessage(\n\t\t\t\t\t\t\"What's the weather like in San Francisco, in Paris and in Tokyo? Return the temperature in Celsius.\");\n\n\t\t\t\tvar promptOptions = AnthropicChatOptions.builder()\n\t\t\t\t\t.withFunctionCallbacks(List.of(FunctionCallbackWrapper.builder(new MockWeatherService())\n\t\t\t\t\t\t.withName(\"CurrentWeatherService\")\n\t\t\t\t\t\t.withDescription(\"Get the weather in location. Return temperature in 36\u00b0F or 36\u00b0C format.\")\n\t\t\t\t\t\t.build()))\n\t\t\t\t\t.build();\n\n\t\t\t\tChatResponse response = chatClient.call(new Prompt(List.of(userMessage), promptOptions));\n\n\t\t\t\tlogger.info(\"Response: {}\", response);\n\n\t\t\t\tassertThat(response.getResult().getOutput().getContent()).contains(\"30\", \"10\", \"15\");\n\t\t\t});",
                "is_abstract": "",
                "class_name": "FunctionCallWithPromptFunctionIT",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/ollama/OllamaEmbeddingAutoConfigurationIT.java",
        "class_names": [
            "OllamaEmbeddingAutoConfigurationIT"
        ],
        "imports": "import org.springframework.ai.embedding.EmbeddingResponse;\nimport java.util.List;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.springframework.boot.autoconfigure.web.client.RestClientAutoConfiguration;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.springframework.ai.ollama.OllamaEmbeddingClient;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.Disabled;\nimport org.testcontainers.junit.jupiter.Container;\nimport org.springframework.boot.autoconfigure.AutoConfigurations;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport org.testcontainers.containers.GenericContainer;\nimport org.testcontainers.junit.jupiter.Testcontainers;\nimport java.io.IOException;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.ollama.OllamaEmbeddingAutoConfigurationIT": "org.springframework.ai.autoconfigure.ollama.OllamaEmbeddingAutoConfigurationIT",
            "org.springframework.ai.autoconfigure.ollama.beforeAll": "org.springframework.ai.autoconfigure.ollama.beforeAll",
            "org.springframework.ai.autoconfigure.ollama.singleTextEmbeddin": "org.springframework.ai.autoconfigure.ollama.singleTextEmbeddin",
            "org.springframework.ai.autoconfigure.ollama.embeddingActivation": "org.springframework.ai.autoconfigure.ollama.embeddingActivation",
            "org.springframework.ai.autoconfigure.ollama.logger": "org.springframework.ai.autoconfigure.ollama.logger",
            "org.springframework.ai.autoconfigure.ollama.MODEL_NAME": "org.springframework.ai.autoconfigure.ollama.MODEL_NAME",
            "org.springframework.ai.autoconfigure.ollama.stati": "org.springframework.ai.autoconfigure.ollama.stati",
            "org.springframework.ai.autoconfigure.ollama.baseUrl": "org.springframework.ai.autoconfigure.ollama.baseUrl",
            "org.springframework.ai.autoconfigure.ollama.contextRunner": "org.springframework.ai.autoconfigure.ollama.contextRunner"
        },
        "package": "package org.springframework.ai.autoconfigure.ollama;",
        "property_declarations": [
            "private static final Log logger = LogFactory.getLog(OllamaEmbeddingAutoConfigurationIT.class);",
            "@Container\n\tstatic GenericContainer<?> ollamaContainer = new GenericContainer<>(\"ollama/ollama:0.1.29\").withExposedPorts(11434);",
            "static String baseUrl;",
            "private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t.withPropertyValues(\"spring.ai.ollama.embedding.options.model=\" + MODEL_NAME,\n\t\t\t\t\"spring.ai.ollama.base-url=\" + baseUrl)\n\t\t.withConfiguration(AutoConfigurations.of(RestClientAutoConfiguration.class, OllamaAutoConfiguration.class));",
            "private static String MODEL_NAME = \"orca-mini\";"
        ],
        "functions": [
            {
                "name": "beforeAll",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "logger.info(\"Start pulling the '\" + MODEL_NAME + \" ' generative ... would take several minutes ...\");\n\t\tollamaContainer.execInContainer(\"ollama\", \"pull\", MODEL_NAME);\n\t\tlogger.info(MODEL_NAME + \" pulling competed!\");\n\n\t\tbaseUrl = \"http://\" + ollamaContainer.getHost() + \":\" + ollamaContainer.getMappedPort(11434);",
                "is_abstract": "",
                "class_name": "OllamaEmbeddingAutoConfigurationIT",
                "annotations": []
            },
            {
                "name": "singleTextEmbedding",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\t\t\tOllamaEmbeddingClient embeddingClient = context.getBean(OllamaEmbeddingClient.class);\n\t\t\tassertThat(embeddingClient).isNotNull();\n\t\t\tEmbeddingResponse embeddingResponse = embeddingClient.embedForResponse(List.of(\"Hello World\"));\n\t\t\tassertThat(embeddingResponse.getResults()).hasSize(1);\n\t\t\tassertThat(embeddingResponse.getResults().get(0).getOutput()).isNotEmpty();\n\t\t\tassertThat(embeddingClient.dimensions()).isEqualTo(3200);\n\t\t});",
                "is_abstract": "",
                "class_name": "OllamaEmbeddingAutoConfigurationIT",
                "annotations": []
            },
            {
                "name": "embeddingActivation",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.withPropertyValues(\"spring.ai.ollama.embedding.enabled=false\").run(context -> {\n\t\t\tassertThat(context.getBeansOfType(OllamaEmbeddingProperties.class)).isNotEmpty();\n\t\t\tassertThat(context.getBeansOfType(OllamaEmbeddingClient.class)).isEmpty();\n\t\t});\n\n\t\tcontextRunner.run(context -> {\n\t\t\tassertThat(context.getBeansOfType(OllamaEmbeddingProperties.class)).isNotEmpty();\n\t\t\tassertThat(context.getBeansOfType(OllamaEmbeddingClient.class)).isNotEmpty();\n\t\t});\n\n\t\tcontextRunner.withPropertyValues(\"spring.ai.ollama.embedding.enabled=true\").run(context -> {\n\t\t\tassertThat(context.getBeansOfType(OllamaEmbeddingProperties.class)).isNotEmpty();\n\t\t\tassertThat(context.getBeansOfType(OllamaEmbeddingClient.class)).isNotEmpty();\n\t\t});",
                "is_abstract": "",
                "class_name": "OllamaEmbeddingAutoConfigurationIT",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/ollama/OllamaChatAutoConfigurationTests.java",
        "class_names": [
            "OllamaChatAutoConfigurationTests"
        ],
        "imports": "import static org.assertj.core.api.Assertions.assertThat;\nimport org.springframework.boot.autoconfigure.web.client.RestClientAutoConfiguration;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.autoconfigure.AutoConfigurations;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.ollama.OllamaChatAutoConfigurationTests": "org.springframework.ai.autoconfigure.ollama.OllamaChatAutoConfigurationTests",
            "org.springframework.ai.autoconfigure.ollama.propertiesTest": "org.springframework.ai.autoconfigure.ollama.propertiesTest"
        },
        "package": "package org.springframework.ai.autoconfigure.ollama;",
        "property_declarations": [],
        "functions": [
            {
                "name": "propertiesTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "new ApplicationContextRunner().withPropertyValues(\n\t\t// @formatter:off\n\t\t\t\t\"spring.ai.ollama.base-url=TEST_BASE_URL\",\n\t\t\t\t\"spring.ai.ollama.chat.options.model=MODEL_XYZ\",\n\t\t\t\t\"spring.ai.ollama.chat.options.temperature=0.55\",\n\t\t\t\t\"spring.ai.ollama.chat.options.topP=0.56\",\n\t\t\t\t\"spring.ai.ollama.chat.options.topK=123\")\n\t\t\t// @formatter:on\n\t\t\t.withConfiguration(AutoConfigurations.of(RestClientAutoConfiguration.class, OllamaAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tvar chatProperties = context.getBean(OllamaChatProperties.class);\n\t\t\t\tvar connectionProperties = context.getBean(OllamaConnectionProperties.class);\n\n\t\t\t\tassertThat(connectionProperties.getBaseUrl()).isEqualTo(\"TEST_BASE_URL\");\n\n\t\t\t\tassertThat(chatProperties.getModel()).isEqualTo(\"MODEL_XYZ\");\n\n\t\t\t\tassertThat(chatProperties.getOptions().getTemperature()).isEqualTo(0.55f);\n\t\t\t\tassertThat(chatProperties.getOptions().getTopP()).isEqualTo(0.56f);\n\n\t\t\t\tassertThat(chatProperties.getOptions().getTopK()).isEqualTo(123);\n\t\t\t});",
                "is_abstract": "",
                "class_name": "OllamaChatAutoConfigurationTests",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/ollama/OllamaChatAutoConfigurationIT.java",
        "class_names": [
            "OllamaChatAutoConfigurationIT",
            "OllamaDockerImageName",
            "OllamaContainer"
        ],
        "imports": "import java.util.stream.Collectors;\nimport java.util.List;\nimport org.springframework.ai.chat.Generation;\nimport reactor.core.publisher.Flux;\nimport org.springframework.ai.chat.prompt.SystemPromptTemplate;\nimport org.junit.jupiter.api.Disabled;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport org.testcontainers.containers.GenericContainer;\nimport java.io.IOException;\nimport org.springframework.ai.chat.messages.Message;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.apache.commons.logging.LogFactory;\nimport java.util.Map;\nimport org.testcontainers.DockerClientFactory;\nimport org.springframework.ai.chat.ChatResponse;\nimport com.github.dockerjava.api.DockerClient;\nimport org.springframework.ai.chat.messages.UserMessage;\nimport org.springframework.boot.autoconfigure.web.client.RestClientAutoConfiguration;\nimport org.apache.commons.logging.Log;\nimport org.springframework.ai.chat.messages.AssistantMessage;\nimport com.github.dockerjava.api.model.Image;\nimport java.util.Collections;\nimport org.testcontainers.junit.jupiter.Testcontainers;\nimport org.testcontainers.utility.DockerImageName;\nimport org.springframework.ai.chat.prompt.Prompt;\nimport com.github.dockerjava.api.command.InspectContainerResponse;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.ollama.OllamaChatClient;\nimport org.springframework.boot.autoconfigure.AutoConfigurations;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.ollama.OllamaChatAutoConfigurationIT": "org.springframework.ai.autoconfigure.ollama.OllamaChatAutoConfigurationIT",
            "org.springframework.ai.autoconfigure.ollama.OllamaContainer": "org.springframework.ai.autoconfigure.ollama.OllamaContainer",
            "org.springframework.ai.autoconfigure.ollama.OllamaDockerImageNam": "org.springframework.ai.autoconfigure.ollama.OllamaDockerImageNam",
            "org.springframework.ai.autoconfigure.ollama.beforeAll": "org.springframework.ai.autoconfigure.ollama.beforeAll",
            "org.springframework.ai.autoconfigure.ollama.chatCompletion": "org.springframework.ai.autoconfigure.ollama.chatCompletion",
            "org.springframework.ai.autoconfigure.ollama.chatCompletionStreamin": "org.springframework.ai.autoconfigure.ollama.chatCompletionStreamin",
            "org.springframework.ai.autoconfigure.ollama.chatActivation": "org.springframework.ai.autoconfigure.ollama.chatActivation",
            "org.springframework.ai.autoconfigure.ollama.containerIsStarted": "org.springframework.ai.autoconfigure.ollama.containerIsStarted",
            "org.springframework.ai.autoconfigure.ollama.createIm": "org.springframework.ai.autoconfigure.ollama.createIm",
            "org.springframework.ai.autoconfigure.ollama.im": "org.springframework.ai.autoconfigure.ollama.im",
            "org.springframework.ai.autoconfigure.ollama.resolv": "org.springframework.ai.autoconfigure.ollama.resolv",
            "org.springframework.ai.autoconfigure.ollama.logger": "org.springframework.ai.autoconfigure.ollama.logger",
            "org.springframework.ai.autoconfigure.ollama.MODEL_NAME": "org.springframework.ai.autoconfigure.ollama.MODEL_NAME",
            "org.springframework.ai.autoconfigure.ollama.OLLAMA_WITH_MODEL": "org.springframework.ai.autoconfigure.ollama.OLLAMA_WITH_MODEL",
            "org.springframework.ai.autoconfigure.ollama.ollamaContainer": "org.springframework.ai.autoconfigure.ollama.ollamaContainer",
            "org.springframework.ai.autoconfigure.ollama.baseUrl": "org.springframework.ai.autoconfigure.ollama.baseUrl",
            "org.springframework.ai.autoconfigure.ollama.contextRunner": "org.springframework.ai.autoconfigure.ollama.contextRunner",
            "org.springframework.ai.autoconfigure.ollama.systemMess": "org.springframework.ai.autoconfigure.ollama.systemMess",
            "org.springframework.ai.autoconfigure.ollama.userMess": "org.springframework.ai.autoconfigure.ollama.userMess",
            "org.springframework.ai.autoconfigure.ollama.dockerImageNam": "org.springframework.ai.autoconfigure.ollama.dockerImageNam",
            "org.springframework.ai.autoconfigure.ollama.baseIm": "org.springframework.ai.autoconfigure.ollama.baseIm",
            "org.springframework.ai.autoconfigure.ollama.localImageNam": "org.springframework.ai.autoconfigure.ollama.localImageNam"
        },
        "package": "package org.springframework.ai.autoconfigure.ollama;",
        "property_declarations": [
            "private final ApplicationContextRunner contextRunner = new ApplicationContextRunner().withPropertyValues(\n\t// @formatter:off\n\t\t\t\t\"spring.ai.ollama.baseUrl=\" + baseUrl,\n\t\t\t\t\"spring.ai.ollama.chat.options.model=\" + MODEL_NAME,\n\t\t\t\t\"spring.ai.ollama.chat.options.temperature=0.5\",\n\t\t\t\t\"spring.ai.ollama.chat.options.topK=10\")\n\t\t\t\t// @formatter:on\n\t\t.withConfiguration(AutoConfigurations.of(RestClientAutoConfiguration.class, OllamaAutoConfiguration.class));",
            "private final String baseImage;",
            "private static String MODEL_NAME = \"mistral\";",
            "private static final OllamaContainer ollamaContainer;",
            "private final UserMessage userMessage = new UserMessage(\n\t\t\t\"Tell me about 3 famous pirates from the Golden Age of Piracy and why they did.\");",
            "private final Message systemMessage = new SystemPromptTemplate(\"\"\"\n\t\t\tYou are a helpful AI assistant. Your name is {name}.\n\t\t\tYou are an AI assistant that helps people find information.\n\t\t\tYour name is {name}\n\t\t\tYou should reply to the user's request with your name and also in the style of a {voice}.\n\t\t\t\"\"\").createMessage(Map.of(\"name\", \"Bob\", \"voice\", \"pirate\"));",
            "static String baseUrl;",
            "private final String localImageName;",
            "private final DockerImageName dockerImageName;",
            "private static final String OLLAMA_WITH_MODEL = \"%s-%s\".formatted(MODEL_NAME, OllamaImage.IMAGE);",
            "private static final Log logger = LogFactory.getLog(OllamaChatAutoConfigurationIT.class);"
        ],
        "functions": [
            {
                "name": "beforeAll",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "logger.info(\"Start pulling the '\" + MODEL_NAME + \" ' generative ... would take several minutes ...\");\n\t\tollamaContainer.execInContainer(\"ollama\", \"pull\", MODEL_NAME);\n\t\tlogger.info(MODEL_NAME + \" pulling competed!\");\n\n\t\tbaseUrl = \"http://\" + ollamaContainer.getHost() + \":\" + ollamaContainer.getMappedPort(11434);",
                "is_abstract": "",
                "class_name": "OllamaChatAutoConfigurationIT",
                "annotations": []
            },
            {
                "name": "chatCompletion",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\t\t\tOllamaChatClient chatClient = context.getBean(OllamaChatClient.class);\n\t\t\tChatResponse response = chatClient.call(new Prompt(List.of(userMessage, systemMessage)));\n\t\t\tassertThat(response.getResult().getOutput().getContent()).contains(\"Blackbeard\");\n\t\t});",
                "is_abstract": "",
                "class_name": "OllamaChatAutoConfigurationIT",
                "annotations": []
            },
            {
                "name": "chatCompletionStreaming",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\n\t\t\tOllamaChatClient chatClient = context.getBean(OllamaChatClient.class);\n\n\t\t\tFlux<ChatResponse> response = chatClient.stream(new Prompt(List.of(userMessage, systemMessage)));\n\n\t\t\tList<ChatResponse> responses = response.collectList().block();\n\t\t\tassertThat(responses.size()).isGreaterThan(1);\n\n\t\t\tString stitchedResponseContent = responses.stream()\n\t\t\t\t.map(ChatResponse::getResults)\n\t\t\t\t.flatMap(List::stream)\n\t\t\t\t.map(Generation::getOutput)\n\t\t\t\t.map(AssistantMessage::getContent)\n\t\t\t\t.collect(Collectors.joining());\n\n\t\t\tassertThat(stitchedResponseContent).contains(\"Blackbeard\");\n\t\t});",
                "is_abstract": "",
                "class_name": "OllamaChatAutoConfigurationIT",
                "annotations": []
            },
            {
                "name": "chatActivation",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.withPropertyValues(\"spring.ai.ollama.chat.enabled=false\").run(context -> {\n\t\t\tassertThat(context.getBeansOfType(OllamaChatProperties.class)).isNotEmpty();\n\t\t\tassertThat(context.getBeansOfType(OllamaChatClient.class)).isEmpty();\n\t\t});\n\n\t\tcontextRunner.run(context -> {\n\t\t\tassertThat(context.getBeansOfType(OllamaChatProperties.class)).isNotEmpty();\n\t\t\tassertThat(context.getBeansOfType(OllamaChatClient.class)).isNotEmpty();\n\t\t});\n\n\t\tcontextRunner.withPropertyValues(\"spring.ai.ollama.chat.enabled=true\").run(context -> {\n\t\t\tassertThat(context.getBeansOfType(OllamaChatProperties.class)).isNotEmpty();\n\t\t\tassertThat(context.getBeansOfType(OllamaChatClient.class)).isNotEmpty();\n\t\t});",
                "is_abstract": "",
                "class_name": "OllamaChatAutoConfigurationIT",
                "annotations": []
            },
            {
                "name": "containerIsStarted",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (!this.dockerImageName.getVersionPart().endsWith(MODEL_NAME)) {\n\t\t\t\ttry {\n\t\t\t\t\texecInContainer(\"ollama\", \"pull\", MODEL_NAME);\n\t\t\t\t}\n\t\t\t\tcatch (IOException | InterruptedException e) {\n\t\t\t\t\tthrow new RuntimeException(\"Error pulling orca-mini model\", e);\n\t\t\t\t}\n\t\t\t}",
                "is_abstract": "",
                "class_name": "OllamaChatAutoConfigurationIT OllamaContainer",
                "annotations": []
            },
            {
                "name": "createImage",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "DockerImageName dockerImageName = DockerImageName.parse(container.getDockerImageName());\n\t\tif (!dockerImageName.equals(DockerImageName.parse(localImageName))) {\n\t\t\tDockerClient dockerClient = DockerClientFactory.instance().client();\n\t\t\tList<Image> images = dockerClient.listImagesCmd().withReferenceFilter(localImageName).exec();\n\t\t\tif (images.isEmpty()) {\n\t\t\t\tDockerImageName imageModel = DockerImageName.parse(localImageName);\n\t\t\t\tdockerClient.commitCmd(container.getContainerId())\n\t\t\t\t\t.withRepository(imageModel.getUnversionedPart())\n\t\t\t\t\t.withLabels(Collections.singletonMap(\"org.testcontainers.sessionId\", \"\"))\n\t\t\t\t\t.withTag(imageModel.getVersionPart())\n\t\t\t\t\t.exec();\n\t\t\t}\n\t\t}",
                "is_abstract": "",
                "class_name": "OllamaChatAutoConfigurationIT OllamaContainer",
                "annotations": []
            },
            {
                "name": "image",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new OllamaDockerImageName(OllamaImage.IMAGE, OLLAMA_WITH_MODEL).resolve();",
                "is_abstract": "",
                "class_name": "OllamaChatAutoConfigurationIT OllamaContainer OllamaDockerImageName",
                "annotations": []
            },
            {
                "name": "resolve",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var dockerImageName = DockerImageName.parse(this.baseImage);\n\t\t\tvar dockerClient = DockerClientFactory.instance().client();\n\t\t\tvar images = dockerClient.listImagesCmd().withReferenceFilter(this.localImageName).exec();\n\t\t\tif (images.isEmpty()) {\n\t\t\t\treturn dockerImageName;\n\t\t\t}\n\t\t\treturn DockerImageName.parse(this.localImageName);",
                "is_abstract": "",
                "class_name": "OllamaChatAutoConfigurationIT OllamaContainer OllamaDockerImageName",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/ollama/OllamaImage.java",
        "class_names": [
            "OllamaImage"
        ],
        "imports": "",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.ollama.OllamaIm": "org.springframework.ai.autoconfigure.ollama.OllamaIm",
            "org.springframework.ai.autoconfigure.ollama.IMAGE": "org.springframework.ai.autoconfigure.ollama.IMAGE"
        },
        "package": "package org.springframework.ai.autoconfigure.ollama;",
        "property_declarations": [
            "static final String IMAGE = \"ollama/ollama:0.1.29\";"
        ],
        "functions": []
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/ollama/OllamaEmbeddingAutoConfigurationTests.java",
        "class_names": [
            "OllamaEmbeddingAutoConfigurationTests"
        ],
        "imports": "import static org.assertj.core.api.Assertions.assertThat;\nimport org.springframework.boot.autoconfigure.web.client.RestClientAutoConfiguration;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.autoconfigure.AutoConfigurations;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.ollama.OllamaEmbeddingAutoConfigurationTests": "org.springframework.ai.autoconfigure.ollama.OllamaEmbeddingAutoConfigurationTests",
            "org.springframework.ai.autoconfigure.ollama.propertiesTest": "org.springframework.ai.autoconfigure.ollama.propertiesTest"
        },
        "package": "package org.springframework.ai.autoconfigure.ollama;",
        "property_declarations": [],
        "functions": [
            {
                "name": "propertiesTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "new ApplicationContextRunner().withPropertyValues(\n\t\t// @formatter:off\n\t\t\t\"spring.ai.ollama.base-url=TEST_BASE_URL\",\n\t\t\t\t\"spring.ai.ollama.embedding.options.model=MODEL_XYZ\",\n\t\t\t\t\"spring.ai.ollama.embedding.options.temperature=0.13\",\n\t\t\t\t\"spring.ai.ollama.embedding.options.topK=13\"\n\t\t\t\t// @formatter:on\n\t\t)\n\t\t\t.withConfiguration(AutoConfigurations.of(RestClientAutoConfiguration.class, OllamaAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tvar embeddingProperties = context.getBean(OllamaEmbeddingProperties.class);\n\t\t\t\tvar connectionProperties = context.getBean(OllamaConnectionProperties.class);\n\n\t\t\t\tassertThat(embeddingProperties.getModel()).isEqualTo(\"MODEL_XYZ\");\n\t\t\t\tassertThat(connectionProperties.getBaseUrl()).isEqualTo(\"TEST_BASE_URL\");\n\t\t\t\tassertThat(embeddingProperties.getOptions().toMap()).containsKeys(\"temperature\");\n\t\t\t\tassertThat(embeddingProperties.getOptions().toMap().get(\"temperature\")).isEqualTo(0.13);\n\t\t\t\tassertThat(embeddingProperties.getOptions().getTopK()).isEqualTo(13);\n\t\t\t});",
                "is_abstract": "",
                "class_name": "OllamaEmbeddingAutoConfigurationTests",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/watsonxai/WatsonxAiAutoConfigurationTests.java",
        "class_names": [
            "WatsonxAiAutoConfigurationTests"
        ],
        "imports": "import static org.assertj.core.api.Assertions.assertThat;\nimport org.springframework.boot.autoconfigure.web.client.RestClientAutoConfiguration;\nimport org.springframework.boot.autoconfigure.AutoConfigurations;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport org.junit.Test;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.watsonxai.WatsonxAiAutoConfigurationTests": "org.springframework.ai.autoconfigure.watsonxai.WatsonxAiAutoConfigurationTests",
            "org.springframework.ai.autoconfigure.watsonxai.propertiesTest": "org.springframework.ai.autoconfigure.watsonxai.propertiesTest"
        },
        "package": "package org.springframework.ai.autoconfigure.watsonxai;",
        "property_declarations": [],
        "functions": [
            {
                "name": "propertiesTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "new ApplicationContextRunner().withPropertyValues(\n\t\t// @formatter:off\n                        \"spring.ai.watsonx.ai.base-url=TEST_BASE_URL\",\n                        \"spring.ai.watsonx.ai.stream-endpoint=generation/stream?version=2023-05-29\",\n                        \"spring.ai.watsonx.ai.text-endpoint=generation/text?version=2023-05-29\",\n                        \"spring.ai.watsonx.ai.projectId=1\",\n                        \"spring.ai.watsonx.ai.IAMToken=123456\")\n                // @formatter:on\n\t\t\t.withConfiguration(\n\t\t\t\t\tAutoConfigurations.of(RestClientAutoConfiguration.class, WatsonxAiAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tvar connectionProperties = context.getBean(WatsonxAiConnectionProperties.class);\n\t\t\t\tassertThat(connectionProperties.getBaseUrl()).isEqualTo(\"TEST_BASE_URL\");\n\t\t\t\tassertThat(connectionProperties.getStreamEndpoint()).isEqualTo(\"generation/stream?version=2023-05-29\");\n\t\t\t\tassertThat(connectionProperties.getTextEndpoint()).isEqualTo(\"generation/text?version=2023-05-29\");\n\t\t\t\tassertThat(connectionProperties.getProjectId()).isEqualTo(\"1\");\n\t\t\t\tassertThat(connectionProperties.getIAMToken()).isEqualTo(\"123456\");\n\t\t\t});",
                "is_abstract": "",
                "class_name": "WatsonxAiAutoConfigurationTests",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/openai/OpenAiPropertiesTests.java",
        "class_names": [
            "OpenAiPropertiesTests"
        ],
        "imports": "import org.skyscreamer.jsonassert.JSONAssert;\nimport org.springframework.ai.openai.api.OpenAiApi.ChatCompletionRequest.ToolChoiceBuilder;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.springframework.boot.autoconfigure.web.client.RestClientAutoConfiguration;\nimport org.junit.jupiter.api.Test;\nimport org.skyscreamer.jsonassert.JSONCompareMode;\nimport org.springframework.ai.model.ModelOptionsUtils;\nimport org.springframework.boot.autoconfigure.AutoConfigurations;\nimport org.springframework.ai.openai.api.OpenAiApi.FunctionTool.Type;\nimport org.springframework.ai.openai.api.OpenAiApi.ChatCompletionRequest.ResponseFormat;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport org.springframework.ai.openai.OpenAiImageClient;\nimport org.springframework.ai.autoconfigure.retry.SpringAiRetryAutoConfiguration;\nimport org.springframework.ai.openai.api.OpenAiAudioApi;\nimport org.springframework.ai.openai.OpenAiChatClient;\nimport org.springframework.ai.openai.OpenAiEmbeddingClient;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.openai.OpenAiPropertiesTests": "org.springframework.ai.autoconfigure.openai.OpenAiPropertiesTests",
            "org.springframework.ai.autoconfigure.openai.chatProperties": "org.springframework.ai.autoconfigure.openai.chatProperties",
            "org.springframework.ai.autoconfigure.openai.transcriptionProperties": "org.springframework.ai.autoconfigure.openai.transcriptionProperties",
            "org.springframework.ai.autoconfigure.openai.chatOverrideConnectionProperties": "org.springframework.ai.autoconfigure.openai.chatOverrideConnectionProperties",
            "org.springframework.ai.autoconfigure.openai.transcriptionOverrideConnectionProperties": "org.springframework.ai.autoconfigure.openai.transcriptionOverrideConnectionProperties",
            "org.springframework.ai.autoconfigure.openai.speechProperties": "org.springframework.ai.autoconfigure.openai.speechProperties",
            "org.springframework.ai.autoconfigure.openai.speechPropertiesTest": "org.springframework.ai.autoconfigure.openai.speechPropertiesTest",
            "org.springframework.ai.autoconfigure.openai.speechOverrideConnectionPropertiesTest": "org.springframework.ai.autoconfigure.openai.speechOverrideConnectionPropertiesTest",
            "org.springframework.ai.autoconfigure.openai.embeddingProperties": "org.springframework.ai.autoconfigure.openai.embeddingProperties",
            "org.springframework.ai.autoconfigure.openai.embeddingOverrideConnectionProperties": "org.springframework.ai.autoconfigure.openai.embeddingOverrideConnectionProperties",
            "org.springframework.ai.autoconfigure.openai.imageProperties": "org.springframework.ai.autoconfigure.openai.imageProperties",
            "org.springframework.ai.autoconfigure.openai.imageOverrideConnectionProperties": "org.springframework.ai.autoconfigure.openai.imageOverrideConnectionProperties",
            "org.springframework.ai.autoconfigure.openai.chatOptionsTest": "org.springframework.ai.autoconfigure.openai.chatOptionsTest",
            "org.springframework.ai.autoconfigure.openai.transcriptionOptionsTest": "org.springframework.ai.autoconfigure.openai.transcriptionOptionsTest",
            "org.springframework.ai.autoconfigure.openai.embeddingOptionsTest": "org.springframework.ai.autoconfigure.openai.embeddingOptionsTest",
            "org.springframework.ai.autoconfigure.openai.imageOptionsTest": "org.springframework.ai.autoconfigure.openai.imageOptionsTest",
            "org.springframework.ai.autoconfigure.openai.embeddingActivation": "org.springframework.ai.autoconfigure.openai.embeddingActivation",
            "org.springframework.ai.autoconfigure.openai.chatActivation": "org.springframework.ai.autoconfigure.openai.chatActivation",
            "org.springframework.ai.autoconfigure.openai.imageActivation": "org.springframework.ai.autoconfigure.openai.imageActivation"
        },
        "package": "package org.springframework.ai.autoconfigure.openai;",
        "property_declarations": [],
        "functions": [
            {
                "name": "chatProperties",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "new ApplicationContextRunner().withPropertyValues(\n\t\t// @formatter:off\n\t\t\t\t\"spring.ai.openai.base-url=TEST_BASE_URL\",\n\t\t\t\t\"spring.ai.openai.api-key=abc123\",\n\t\t\t\t\"spring.ai.openai.chat.options.model=MODEL_XYZ\",\n\t\t\t\t\"spring.ai.openai.chat.options.temperature=0.55\")\n\t\t\t\t// @formatter:on\n\t\t\t.withConfiguration(AutoConfigurations.of(SpringAiRetryAutoConfiguration.class,\n\t\t\t\t\tRestClientAutoConfiguration.class, OpenAiAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tvar chatProperties = context.getBean(OpenAiChatProperties.class);\n\t\t\t\tvar connectionProperties = context.getBean(OpenAiConnectionProperties.class);\n\n\t\t\t\tassertThat(connectionProperties.getApiKey()).isEqualTo(\"abc123\");\n\t\t\t\tassertThat(connectionProperties.getBaseUrl()).isEqualTo(\"TEST_BASE_URL\");\n\n\t\t\t\tassertThat(chatProperties.getApiKey()).isNull();\n\t\t\t\tassertThat(chatProperties.getBaseUrl()).isNull();\n\n\t\t\t\tassertThat(chatProperties.getOptions().getModel()).isEqualTo(\"MODEL_XYZ\");\n\t\t\t\tassertThat(chatProperties.getOptions().getTemperature()).isEqualTo(0.55f);\n\t\t\t});",
                "is_abstract": "",
                "class_name": "OpenAiPropertiesTests",
                "annotations": []
            },
            {
                "name": "transcriptionProperties",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "new ApplicationContextRunner().withPropertyValues(\n\t\t// @formatter:off\n\t\t\t\"spring.ai.openai.base-url=TEST_BASE_URL\",\n\t\t\t\"spring.ai.openai.api-key=abc123\",\n\t\t\t\"spring.ai.openai.audio.transcription.options.model=MODEL_XYZ\",\n\t\t\t\"spring.ai.openai.audio.transcription.options.temperature=0.55\")\n\t\t\t\t// @formatter:on\n\t\t\t.withConfiguration(AutoConfigurations.of(SpringAiRetryAutoConfiguration.class,\n\t\t\t\t\tRestClientAutoConfiguration.class, OpenAiAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tvar transcriptionProperties = context.getBean(OpenAiAudioTranscriptionProperties.class);\n\t\t\t\tvar connectionProperties = context.getBean(OpenAiConnectionProperties.class);\n\n\t\t\t\tassertThat(connectionProperties.getApiKey()).isEqualTo(\"abc123\");\n\t\t\t\tassertThat(connectionProperties.getBaseUrl()).isEqualTo(\"TEST_BASE_URL\");\n\n\t\t\t\tassertThat(transcriptionProperties.getApiKey()).isNull();\n\t\t\t\tassertThat(transcriptionProperties.getBaseUrl()).isNull();\n\n\t\t\t\tassertThat(transcriptionProperties.getOptions().getModel()).isEqualTo(\"MODEL_XYZ\");\n\t\t\t\tassertThat(transcriptionProperties.getOptions().getTemperature()).isEqualTo(0.55f);\n\t\t\t});",
                "is_abstract": "",
                "class_name": "OpenAiPropertiesTests",
                "annotations": []
            },
            {
                "name": "chatOverrideConnectionProperties",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "new ApplicationContextRunner().withPropertyValues(\n\t\t// @formatter:off\n\t\t\t\t\"spring.ai.openai.base-url=TEST_BASE_URL\",\n\t\t\t\t\"spring.ai.openai.api-key=abc123\",\n\t\t\t\t\"spring.ai.openai.chat.base-url=TEST_BASE_URL2\",\n\t\t\t\t\"spring.ai.openai.chat.api-key=456\",\n\t\t\t\t\"spring.ai.openai.chat.options.model=MODEL_XYZ\",\n\t\t\t\t\"spring.ai.openai.chat.options.temperature=0.55\")\n\t\t\t\t// @formatter:on\n\t\t\t.withConfiguration(AutoConfigurations.of(SpringAiRetryAutoConfiguration.class,\n\t\t\t\t\tRestClientAutoConfiguration.class, OpenAiAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tvar chatProperties = context.getBean(OpenAiChatProperties.class);\n\t\t\t\tvar connectionProperties = context.getBean(OpenAiConnectionProperties.class);\n\n\t\t\t\tassertThat(connectionProperties.getApiKey()).isEqualTo(\"abc123\");\n\t\t\t\tassertThat(connectionProperties.getBaseUrl()).isEqualTo(\"TEST_BASE_URL\");\n\n\t\t\t\tassertThat(chatProperties.getApiKey()).isEqualTo(\"456\");\n\t\t\t\tassertThat(chatProperties.getBaseUrl()).isEqualTo(\"TEST_BASE_URL2\");\n\n\t\t\t\tassertThat(chatProperties.getOptions().getModel()).isEqualTo(\"MODEL_XYZ\");\n\t\t\t\tassertThat(chatProperties.getOptions().getTemperature()).isEqualTo(0.55f);\n\t\t\t});",
                "is_abstract": "",
                "class_name": "OpenAiPropertiesTests",
                "annotations": []
            },
            {
                "name": "transcriptionOverrideConnectionProperties",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "new ApplicationContextRunner().withPropertyValues(\n\t\t// @formatter:off\n\t\t\t\t\t\t\"spring.ai.openai.base-url=TEST_BASE_URL\",\n\t\t\t\t\t\t\"spring.ai.openai.api-key=abc123\",\n\t\t\t\t\t\t\"spring.ai.openai.audio.transcription.base-url=TEST_BASE_URL2\",\n\t\t\t\t\t\t\"spring.ai.openai.audio.transcription.api-key=456\",\n\t\t\t\t\t\t\"spring.ai.openai.audio.transcription.options.model=MODEL_XYZ\",\n\t\t\t\t\t\t\"spring.ai.openai.audio.transcription.options.temperature=0.55\")\n\t\t\t\t// @formatter:on\n\t\t\t.withConfiguration(AutoConfigurations.of(SpringAiRetryAutoConfiguration.class,\n\t\t\t\t\tRestClientAutoConfiguration.class, OpenAiAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tvar transcriptionProperties = context.getBean(OpenAiAudioTranscriptionProperties.class);\n\t\t\t\tvar connectionProperties = context.getBean(OpenAiConnectionProperties.class);\n\n\t\t\t\tassertThat(connectionProperties.getApiKey()).isEqualTo(\"abc123\");\n\t\t\t\tassertThat(connectionProperties.getBaseUrl()).isEqualTo(\"TEST_BASE_URL\");\n\n\t\t\t\tassertThat(transcriptionProperties.getApiKey()).isEqualTo(\"456\");\n\t\t\t\tassertThat(transcriptionProperties.getBaseUrl()).isEqualTo(\"TEST_BASE_URL2\");\n\n\t\t\t\tassertThat(transcriptionProperties.getOptions().getModel()).isEqualTo(\"MODEL_XYZ\");\n\t\t\t\tassertThat(transcriptionProperties.getOptions().getTemperature()).isEqualTo(0.55f);\n\t\t\t});",
                "is_abstract": "",
                "class_name": "OpenAiPropertiesTests",
                "annotations": []
            },
            {
                "name": "speechProperties",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "new ApplicationContextRunner().withPropertyValues(\n\t\t// @formatter:off\n\t\t\t\t\t\t\"spring.ai.openai.base-url=TEST_BASE_URL\",\n\t\t\t\t\t\t\"spring.ai.openai.api-key=abc123\",\n\t\t\t\t\t\t\"spring.ai.openai.audio.speech.options.model=TTS_1\",\n\t\t\t\t\t\t\"spring.ai.openai.audio.speech.options.voice=alloy\",\n\t\t\t\t\t\t\"spring.ai.openai.audio.speech.options.response-format=mp3\",\n\t\t\t\t\t\t\"spring.ai.openai.audio.speech.options.speed=0.75\")\n\t\t\t\t// @formatter:on\n\t\t\t.withConfiguration(AutoConfigurations.of(SpringAiRetryAutoConfiguration.class,\n\t\t\t\t\tRestClientAutoConfiguration.class, OpenAiAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tvar speechProperties = context.getBean(OpenAiAudioSpeechProperties.class);\n\t\t\t\tvar connectionProperties = context.getBean(OpenAiConnectionProperties.class);\n\n\t\t\t\tassertThat(connectionProperties.getApiKey()).isEqualTo(\"abc123\");\n\t\t\t\tassertThat(connectionProperties.getBaseUrl()).isEqualTo(\"TEST_BASE_URL\");\n\n\t\t\t\tassertThat(speechProperties.getApiKey()).isNull();\n\t\t\t\tassertThat(speechProperties.getBaseUrl()).isNull();\n\n\t\t\t\tassertThat(speechProperties.getOptions().getModel()).isEqualTo(\"TTS_1\");\n\t\t\t\tassertThat(speechProperties.getOptions().getVoice())\n\t\t\t\t\t.isEqualTo(OpenAiAudioApi.SpeechRequest.Voice.ALLOY);\n\t\t\t\tassertThat(speechProperties.getOptions().getResponseFormat())\n\t\t\t\t\t.isEqualTo(OpenAiAudioApi.SpeechRequest.AudioResponseFormat.MP3);\n\t\t\t\tassertThat(speechProperties.getOptions().getSpeed()).isEqualTo(0.75f);\n\t\t\t});",
                "is_abstract": "",
                "class_name": "OpenAiPropertiesTests",
                "annotations": []
            },
            {
                "name": "speechPropertiesTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "new ApplicationContextRunner().withPropertyValues(\n\t\t// @formatter:off\n\t\t\t\t\t\t\"spring.ai.openai.base-url=TEST_BASE_URL\",\n\t\t\t\t\t\t\"spring.ai.openai.api-key=abc123\",\n\t\t\t\t\t\t\"spring.ai.openai.audio.speech.options.model=TTS_1\",\n\t\t\t\t\t\t\"spring.ai.openai.audio.speech.options.voice=alloy\",\n\t\t\t\t\t\t\"spring.ai.openai.audio.speech.options.response-format=mp3\",\n\t\t\t\t\t\t\"spring.ai.openai.audio.speech.options.speed=0.75\")\n\t\t\t\t// @formatter:on\n\t\t\t.withConfiguration(AutoConfigurations.of(SpringAiRetryAutoConfiguration.class,\n\t\t\t\t\tRestClientAutoConfiguration.class, OpenAiAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tvar speechProperties = context.getBean(OpenAiAudioSpeechProperties.class);\n\t\t\t\tvar connectionProperties = context.getBean(OpenAiConnectionProperties.class);\n\n\t\t\t\tassertThat(connectionProperties.getApiKey()).isEqualTo(\"abc123\");\n\t\t\t\tassertThat(connectionProperties.getBaseUrl()).isEqualTo(\"TEST_BASE_URL\");\n\n\t\t\t\tassertThat(speechProperties.getOptions().getModel()).isEqualTo(\"TTS_1\");\n\t\t\t\tassertThat(speechProperties.getOptions().getVoice())\n\t\t\t\t\t.isEqualTo(OpenAiAudioApi.SpeechRequest.Voice.ALLOY);\n\t\t\t\tassertThat(speechProperties.getOptions().getResponseFormat())\n\t\t\t\t\t.isEqualTo(OpenAiAudioApi.SpeechRequest.AudioResponseFormat.MP3);\n\t\t\t\tassertThat(speechProperties.getOptions().getSpeed()).isEqualTo(0.75f);\n\t\t\t});",
                "is_abstract": "",
                "class_name": "OpenAiPropertiesTests",
                "annotations": []
            },
            {
                "name": "speechOverrideConnectionPropertiesTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "new ApplicationContextRunner().withPropertyValues(\n\t\t// @formatter:off\n\t\t\t\t\t\t\"spring.ai.openai.base-url=TEST_BASE_URL\",\n\t\t\t\t\t\t\"spring.ai.openai.api-key=abc123\",\n\t\t\t\t\t\t\"spring.ai.openai.audio.speech.base-url=TEST_BASE_URL2\",\n\t\t\t\t\t\t\"spring.ai.openai.audio.speech.api-key=456\",\n\t\t\t\t\t\t\"spring.ai.openai.audio.speech.options.model=TTS_2\",\n\t\t\t\t\t\t\"spring.ai.openai.audio.speech.options.voice=echo\",\n\t\t\t\t\t\t\"spring.ai.openai.audio.speech.options.response-format=opus\",\n\t\t\t\t\t\t\"spring.ai.openai.audio.speech.options.speed=0.5\")\n\t\t\t\t// @formatter:on\n\t\t\t.withConfiguration(AutoConfigurations.of(SpringAiRetryAutoConfiguration.class,\n\t\t\t\t\tRestClientAutoConfiguration.class, OpenAiAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tvar speechProperties = context.getBean(OpenAiAudioSpeechProperties.class);\n\t\t\t\tvar connectionProperties = context.getBean(OpenAiConnectionProperties.class);\n\n\t\t\t\tassertThat(connectionProperties.getApiKey()).isEqualTo(\"abc123\");\n\t\t\t\tassertThat(connectionProperties.getBaseUrl()).isEqualTo(\"TEST_BASE_URL\");\n\n\t\t\t\tassertThat(speechProperties.getApiKey()).isEqualTo(\"456\");\n\t\t\t\tassertThat(speechProperties.getBaseUrl()).isEqualTo(\"TEST_BASE_URL2\");\n\n\t\t\t\tassertThat(speechProperties.getOptions().getModel()).isEqualTo(\"TTS_2\");\n\t\t\t\tassertThat(speechProperties.getOptions().getVoice()).isEqualTo(OpenAiAudioApi.SpeechRequest.Voice.ECHO);\n\t\t\t\tassertThat(speechProperties.getOptions().getResponseFormat())\n\t\t\t\t\t.isEqualTo(OpenAiAudioApi.SpeechRequest.AudioResponseFormat.OPUS);\n\t\t\t\tassertThat(speechProperties.getOptions().getSpeed()).isEqualTo(0.5f);\n\t\t\t});",
                "is_abstract": "",
                "class_name": "OpenAiPropertiesTests",
                "annotations": []
            },
            {
                "name": "embeddingProperties",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "new ApplicationContextRunner().withPropertyValues(\n\t\t// @formatter:off\n\t\t\t\t\"spring.ai.openai.base-url=TEST_BASE_URL\",\n\t\t\t\t\"spring.ai.openai.api-key=abc123\",\n\t\t\t\t\"spring.ai.openai.embedding.options.model=MODEL_XYZ\")\n\t\t\t\t// @formatter:on\n\t\t\t.withConfiguration(AutoConfigurations.of(SpringAiRetryAutoConfiguration.class,\n\t\t\t\t\tRestClientAutoConfiguration.class, OpenAiAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tvar embeddingProperties = context.getBean(OpenAiEmbeddingProperties.class);\n\t\t\t\tvar connectionProperties = context.getBean(OpenAiConnectionProperties.class);\n\n\t\t\t\tassertThat(connectionProperties.getApiKey()).isEqualTo(\"abc123\");\n\t\t\t\tassertThat(connectionProperties.getBaseUrl()).isEqualTo(\"TEST_BASE_URL\");\n\n\t\t\t\tassertThat(embeddingProperties.getApiKey()).isNull();\n\t\t\t\tassertThat(embeddingProperties.getBaseUrl()).isNull();\n\n\t\t\t\tassertThat(embeddingProperties.getOptions().getModel()).isEqualTo(\"MODEL_XYZ\");\n\t\t\t});",
                "is_abstract": "",
                "class_name": "OpenAiPropertiesTests",
                "annotations": []
            },
            {
                "name": "embeddingOverrideConnectionProperties",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "new ApplicationContextRunner().withPropertyValues(\n\t\t// @formatter:off\n\t\t\t\t\"spring.ai.openai.base-url=TEST_BASE_URL\",\n\t\t\t\t\"spring.ai.openai.api-key=abc123\",\n\t\t\t\t\"spring.ai.openai.embedding.base-url=TEST_BASE_URL2\",\n\t\t\t\t\"spring.ai.openai.embedding.api-key=456\",\n\t\t\t\t\"spring.ai.openai.embedding.options.model=MODEL_XYZ\")\n\t\t\t\t// @formatter:on\n\t\t\t.withConfiguration(AutoConfigurations.of(SpringAiRetryAutoConfiguration.class,\n\t\t\t\t\tRestClientAutoConfiguration.class, OpenAiAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tvar embeddingProperties = context.getBean(OpenAiEmbeddingProperties.class);\n\t\t\t\tvar connectionProperties = context.getBean(OpenAiConnectionProperties.class);\n\n\t\t\t\tassertThat(connectionProperties.getApiKey()).isEqualTo(\"abc123\");\n\t\t\t\tassertThat(connectionProperties.getBaseUrl()).isEqualTo(\"TEST_BASE_URL\");\n\n\t\t\t\tassertThat(embeddingProperties.getApiKey()).isEqualTo(\"456\");\n\t\t\t\tassertThat(embeddingProperties.getBaseUrl()).isEqualTo(\"TEST_BASE_URL2\");\n\n\t\t\t\tassertThat(embeddingProperties.getOptions().getModel()).isEqualTo(\"MODEL_XYZ\");\n\t\t\t});",
                "is_abstract": "",
                "class_name": "OpenAiPropertiesTests",
                "annotations": []
            },
            {
                "name": "imageProperties",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "new ApplicationContextRunner().withPropertyValues(\n\t\t// @formatter:off\n\t\t\t\t\t\t\"spring.ai.openai.base-url=TEST_BASE_URL\",\n\t\t\t\t\t\t\"spring.ai.openai.api-key=abc123\",\n\t\t\t\t\t\t\"spring.ai.openai.image.options.model=MODEL_XYZ\",\n\t\t\t\t\t\t\"spring.ai.openai.image.options.n=3\")\n\t\t\t\t// @formatter:on\n\t\t\t.withConfiguration(AutoConfigurations.of(SpringAiRetryAutoConfiguration.class,\n\t\t\t\t\tRestClientAutoConfiguration.class, OpenAiAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tvar imageProperties = context.getBean(OpenAiImageProperties.class);\n\t\t\t\tvar connectionProperties = context.getBean(OpenAiConnectionProperties.class);\n\n\t\t\t\tassertThat(connectionProperties.getApiKey()).isEqualTo(\"abc123\");\n\t\t\t\tassertThat(connectionProperties.getBaseUrl()).isEqualTo(\"TEST_BASE_URL\");\n\n\t\t\t\tassertThat(imageProperties.getApiKey()).isNull();\n\t\t\t\tassertThat(imageProperties.getBaseUrl()).isNull();\n\n\t\t\t\tassertThat(imageProperties.getOptions().getModel()).isEqualTo(\"MODEL_XYZ\");\n\t\t\t\tassertThat(imageProperties.getOptions().getN()).isEqualTo(3);\n\t\t\t});",
                "is_abstract": "",
                "class_name": "OpenAiPropertiesTests",
                "annotations": []
            },
            {
                "name": "imageOverrideConnectionProperties",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "new ApplicationContextRunner().withPropertyValues(\n\t\t// @formatter:off\n\t\t\t\t\t\t\"spring.ai.openai.base-url=TEST_BASE_URL\",\n\t\t\t\t\t\t\"spring.ai.openai.api-key=abc123\",\n\t\t\t\t\t\t\"spring.ai.openai.image.base-url=TEST_BASE_URL2\",\n\t\t\t\t\t\t\"spring.ai.openai.image.api-key=456\",\n\t\t\t\t\t\t\"spring.ai.openai.image.options.model=MODEL_XYZ\",\n\t\t\t\t\t\t\"spring.ai.openai.image.options.n=3\")\n\t\t\t\t// @formatter:on\n\t\t\t.withConfiguration(AutoConfigurations.of(SpringAiRetryAutoConfiguration.class,\n\t\t\t\t\tRestClientAutoConfiguration.class, OpenAiAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tvar imageProperties = context.getBean(OpenAiImageProperties.class);\n\t\t\t\tvar connectionProperties = context.getBean(OpenAiConnectionProperties.class);\n\n\t\t\t\tassertThat(connectionProperties.getApiKey()).isEqualTo(\"abc123\");\n\t\t\t\tassertThat(connectionProperties.getBaseUrl()).isEqualTo(\"TEST_BASE_URL\");\n\n\t\t\t\tassertThat(imageProperties.getApiKey()).isEqualTo(\"456\");\n\t\t\t\tassertThat(imageProperties.getBaseUrl()).isEqualTo(\"TEST_BASE_URL2\");\n\n\t\t\t\tassertThat(imageProperties.getOptions().getModel()).isEqualTo(\"MODEL_XYZ\");\n\t\t\t\tassertThat(imageProperties.getOptions().getN()).isEqualTo(3);\n\t\t\t});",
                "is_abstract": "",
                "class_name": "OpenAiPropertiesTests",
                "annotations": []
            },
            {
                "name": "chatOptionsTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "new ApplicationContextRunner().withPropertyValues(\n\t\t// @formatter:off\n\t\t\t\t\"spring.ai.openai.api-key=API_KEY\",\n\t\t\t\t\"spring.ai.openai.base-url=TEST_BASE_URL\",\n\n\t\t\t\t\"spring.ai.openai.chat.options.model=MODEL_XYZ\",\n\t\t\t\t\"spring.ai.openai.chat.options.frequencyPenalty=-1.5\",\n\t\t\t\t\"spring.ai.openai.chat.options.logitBias.myTokenId=-5\",\n\t\t\t\t\"spring.ai.openai.chat.options.maxTokens=123\",\n\t\t\t\t\"spring.ai.openai.chat.options.n=10\",\n\t\t\t\t\"spring.ai.openai.chat.options.presencePenalty=0\",\n\t\t\t\t\"spring.ai.openai.chat.options.responseFormat.type=json\",\n\t\t\t\t\"spring.ai.openai.chat.options.seed=66\",\n\t\t\t\t\"spring.ai.openai.chat.options.stop=boza,koza\",\n\t\t\t\t\"spring.ai.openai.chat.options.temperature=0.55\",\n\t\t\t\t\"spring.ai.openai.chat.options.topP=0.56\",\n\n\t\t\t\t// \"spring.ai.openai.chat.options.toolChoice.functionName=toolChoiceFunctionName\",\n\t\t\t\t\"spring.ai.openai.chat.options.toolChoice=\" + ModelOptionsUtils.toJsonString(ToolChoiceBuilder.FUNCTION(\"toolChoiceFunctionName\")),\n\n\t\t\t\t\"spring.ai.openai.chat.options.tools[0].function.name=myFunction1\",\n\t\t\t\t\"spring.ai.openai.chat.options.tools[0].function.description=function description\",\n\t\t\t\t\"spring.ai.openai.chat.options.tools[0].function.jsonSchema=\" + \"\"\"\n\t\t\t\t\t{\n\t\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\t\"properties\": {\n\t\t\t\t\t\t\t\"location\": {\n\t\t\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\t\t\"description\": \"The city and state e.g. San Francisco, CA\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"lat\": {\n\t\t\t\t\t\t\t\t\"type\": \"number\",\n\t\t\t\t\t\t\t\t\"description\": \"The city latitude\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"lon\": {\n\t\t\t\t\t\t\t\t\"type\": \"number\",\n\t\t\t\t\t\t\t\t\"description\": \"The city longitude\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"unit\": {\n\t\t\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\t\t\"enum\": [\"c\", \"f\"]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"required\": [\"location\", \"lat\", \"lon\", \"unit\"]\n\t\t\t\t\t}\n\t\t\t\t\t\"\"\",\n\t\t\t\t\t\"spring.ai.openai.chat.options.user=userXYZ\"\n\t\t\t\t)\n\t\t\t// @formatter:on\n\t\t\t.withConfiguration(AutoConfigurations.of(SpringAiRetryAutoConfiguration.class,\n\t\t\t\t\tRestClientAutoConfiguration.class, OpenAiAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tvar chatProperties = context.getBean(OpenAiChatProperties.class);\n\t\t\t\tvar connectionProperties = context.getBean(OpenAiConnectionProperties.class);\n\t\t\t\tvar embeddingProperties = context.getBean(OpenAiEmbeddingProperties.class);\n\n\t\t\t\tassertThat(connectionProperties.getBaseUrl()).isEqualTo(\"TEST_BASE_URL\");\n\t\t\t\tassertThat(connectionProperties.getApiKey()).isEqualTo(\"API_KEY\");\n\n\t\t\t\tassertThat(embeddingProperties.getOptions().getModel()).isEqualTo(\"text-embedding-ada-002\");\n\n\t\t\t\tassertThat(chatProperties.getOptions().getModel()).isEqualTo(\"MODEL_XYZ\");\n\t\t\t\tassertThat(chatProperties.getOptions().getFrequencyPenalty()).isEqualTo(-1.5f);\n\t\t\t\tassertThat(chatProperties.getOptions().getLogitBias().get(\"myTokenId\")).isEqualTo(-5);\n\t\t\t\tassertThat(chatProperties.getOptions().getMaxTokens()).isEqualTo(123);\n\t\t\t\tassertThat(chatProperties.getOptions().getN()).isEqualTo(10);\n\t\t\t\tassertThat(chatProperties.getOptions().getPresencePenalty()).isEqualTo(0);\n\t\t\t\tassertThat(chatProperties.getOptions().getResponseFormat()).isEqualTo(new ResponseFormat(\"json\"));\n\t\t\t\tassertThat(chatProperties.getOptions().getSeed()).isEqualTo(66);\n\t\t\t\tassertThat(chatProperties.getOptions().getStop()).contains(\"boza\", \"koza\");\n\t\t\t\tassertThat(chatProperties.getOptions().getTemperature()).isEqualTo(0.55f);\n\t\t\t\tassertThat(chatProperties.getOptions().getTopP()).isEqualTo(0.56f);\n\n\t\t\t\tJSONAssert.assertEquals(\"{\\\"type\\\":\\\"function\\\",\\\"function\\\":{\\\"name\\\":\\\"toolChoiceFunctionName\\\"}}\",\n\t\t\t\t\t\tchatProperties.getOptions().getToolChoice(), JSONCompareMode.LENIENT);\n\n\t\t\t\tassertThat(chatProperties.getOptions().getUser()).isEqualTo(\"userXYZ\");\n\n\t\t\t\tassertThat(chatProperties.getOptions().getTools()).hasSize(1);\n\t\t\t\tvar tool = chatProperties.getOptions().getTools().get(0);\n\t\t\t\tassertThat(tool.type()).isEqualTo(Type.FUNCTION);\n\t\t\t\tvar function = tool.function();\n\t\t\t\tassertThat(function.name()).isEqualTo(\"myFunction1\");\n\t\t\t\tassertThat(function.description()).isEqualTo(\"function description\");\n\t\t\t\tassertThat(function.parameters()).isNotEmpty();\n\t\t\t});",
                "is_abstract": "",
                "class_name": "OpenAiPropertiesTests",
                "annotations": []
            },
            {
                "name": "transcriptionOptionsTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "new ApplicationContextRunner().withPropertyValues(\n\t\t// @formatter:off\n\t\t\t\t\t\t\"spring.ai.openai.api-key=API_KEY\",\n\t\t\t\t\t\t\"spring.ai.openai.base-url=TEST_BASE_URL\",\n\n\t\t\t\t\t\t\"spring.ai.openai.audio.transcription.options.model=MODEL_XYZ\",\n\t\t\t\t\t\t\"spring.ai.openai.audio.transcription.options.language=en\",\n\t\t\t\t\t\t\"spring.ai.openai.audio.transcription.options.prompt=Er, yes, I think so\",\n\t\t\t\t\t\t\"spring.ai.openai.audio.transcription.options.responseFormat=JSON\",\n\t\t\t\t\t\t\"spring.ai.openai.audio.transcription.options.temperature=0.55\"\n\t\t\t\t)\n\t\t\t\t// @formatter:on\n\t\t\t.withConfiguration(AutoConfigurations.of(SpringAiRetryAutoConfiguration.class,\n\t\t\t\t\tRestClientAutoConfiguration.class, OpenAiAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tvar transcriptionProperties = context.getBean(OpenAiAudioTranscriptionProperties.class);\n\t\t\t\tvar connectionProperties = context.getBean(OpenAiConnectionProperties.class);\n\t\t\t\tvar embeddingProperties = context.getBean(OpenAiEmbeddingProperties.class);\n\n\t\t\t\tassertThat(connectionProperties.getBaseUrl()).isEqualTo(\"TEST_BASE_URL\");\n\t\t\t\tassertThat(connectionProperties.getApiKey()).isEqualTo(\"API_KEY\");\n\n\t\t\t\tassertThat(embeddingProperties.getOptions().getModel()).isEqualTo(\"text-embedding-ada-002\");\n\n\t\t\t\tassertThat(transcriptionProperties.getOptions().getModel()).isEqualTo(\"MODEL_XYZ\");\n\t\t\t\tassertThat(transcriptionProperties.getOptions().getLanguage()).isEqualTo(\"en\");\n\t\t\t\tassertThat(transcriptionProperties.getOptions().getPrompt()).isEqualTo(\"Er, yes, I think so\");\n\t\t\t\tassertThat(transcriptionProperties.getOptions().getResponseFormat())\n\t\t\t\t\t.isEqualTo(OpenAiAudioApi.TranscriptResponseFormat.JSON);\n\t\t\t\tassertThat(transcriptionProperties.getOptions().getTemperature()).isEqualTo(0.55f);\n\t\t\t});",
                "is_abstract": "",
                "class_name": "OpenAiPropertiesTests",
                "annotations": []
            },
            {
                "name": "embeddingOptionsTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "new ApplicationContextRunner().withPropertyValues(\n\t\t// @formatter:off\n\t\t\t\t\"spring.ai.openai.api-key=API_KEY\",\n\t\t\t\t\"spring.ai.openai.base-url=TEST_BASE_URL\",\n\n\t\t\t\t\"spring.ai.openai.embedding.options.model=MODEL_XYZ\",\n\t\t\t\t\"spring.ai.openai.embedding.options.encodingFormat=MyEncodingFormat\",\n\t\t\t\t\"spring.ai.openai.embedding.options.user=userXYZ\"\n\t\t\t\t)\n\t\t\t// @formatter:on\n\t\t\t.withConfiguration(AutoConfigurations.of(SpringAiRetryAutoConfiguration.class,\n\t\t\t\t\tRestClientAutoConfiguration.class, OpenAiAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tvar connectionProperties = context.getBean(OpenAiConnectionProperties.class);\n\t\t\t\tvar embeddingProperties = context.getBean(OpenAiEmbeddingProperties.class);\n\n\t\t\t\tassertThat(connectionProperties.getBaseUrl()).isEqualTo(\"TEST_BASE_URL\");\n\t\t\t\tassertThat(connectionProperties.getApiKey()).isEqualTo(\"API_KEY\");\n\n\t\t\t\tassertThat(embeddingProperties.getOptions().getModel()).isEqualTo(\"MODEL_XYZ\");\n\t\t\t\tassertThat(embeddingProperties.getOptions().getEncodingFormat()).isEqualTo(\"MyEncodingFormat\");\n\t\t\t\tassertThat(embeddingProperties.getOptions().getUser()).isEqualTo(\"userXYZ\");\n\t\t\t});",
                "is_abstract": "",
                "class_name": "OpenAiPropertiesTests",
                "annotations": []
            },
            {
                "name": "imageOptionsTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "new ApplicationContextRunner().withPropertyValues(\n\t\t// @formatter:off\n\t\t\t\t\t\t\"spring.ai.openai.api-key=API_KEY\",\n\t\t\t\t\t\t\"spring.ai.openai.base-url=TEST_BASE_URL\",\n\n\t\t\t\t\t\t\"spring.ai.openai.image.options.n=3\",\n\t\t\t\t\t\t\"spring.ai.openai.image.options.model=MODEL_XYZ\",\n\t\t\t\t\t\t\"spring.ai.openai.image.options.quality=hd\",\n\t\t\t\t\t\t\"spring.ai.openai.image.options.response_format=url\",\n\t\t\t\t\t\t\"spring.ai.openai.image.options.size=1024x1024\",\n\t\t\t\t\t\t\"spring.ai.openai.image.options.width=1024\",\n\t\t\t\t\t\t\"spring.ai.openai.image.options.height=1024\",\n\t\t\t\t\t\t\"spring.ai.openai.image.options.style=vivid\",\n\t\t\t\t\t\t\"spring.ai.openai.image.options.user=userXYZ\"\n\t\t\t\t)\n\t\t\t\t// @formatter:on\n\t\t\t.withConfiguration(AutoConfigurations.of(SpringAiRetryAutoConfiguration.class,\n\t\t\t\t\tRestClientAutoConfiguration.class, OpenAiAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tvar imageProperties = context.getBean(OpenAiImageProperties.class);\n\t\t\t\tvar connectionProperties = context.getBean(OpenAiConnectionProperties.class);\n\n\t\t\t\tassertThat(connectionProperties.getBaseUrl()).isEqualTo(\"TEST_BASE_URL\");\n\t\t\t\tassertThat(connectionProperties.getApiKey()).isEqualTo(\"API_KEY\");\n\n\t\t\t\tassertThat(imageProperties.getOptions().getN()).isEqualTo(3);\n\t\t\t\tassertThat(imageProperties.getOptions().getModel()).isEqualTo(\"MODEL_XYZ\");\n\t\t\t\tassertThat(imageProperties.getOptions().getQuality()).isEqualTo(\"hd\");\n\t\t\t\tassertThat(imageProperties.getOptions().getResponseFormat()).isEqualTo(\"url\");\n\t\t\t\tassertThat(imageProperties.getOptions().getSize()).isEqualTo(\"1024x1024\");\n\t\t\t\tassertThat(imageProperties.getOptions().getWidth()).isEqualTo(1024);\n\t\t\t\tassertThat(imageProperties.getOptions().getHeight()).isEqualTo(1024);\n\t\t\t\tassertThat(imageProperties.getOptions().getStyle()).isEqualTo(\"vivid\");\n\t\t\t\tassertThat(imageProperties.getOptions().getUser()).isEqualTo(\"userXYZ\");\n\t\t\t});",
                "is_abstract": "",
                "class_name": "OpenAiPropertiesTests",
                "annotations": []
            },
            {
                "name": "embeddingActivation",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "new ApplicationContextRunner()\n\t\t\t.withPropertyValues(\"spring.ai.openai.api-key=API_KEY\", \"spring.ai.openai.base-url=TEST_BASE_URL\",\n\t\t\t\t\t\"spring.ai.openai.embedding.enabled=false\")\n\t\t\t.withConfiguration(AutoConfigurations.of(SpringAiRetryAutoConfiguration.class,\n\t\t\t\t\tRestClientAutoConfiguration.class, OpenAiAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tassertThat(context.getBeansOfType(OpenAiEmbeddingProperties.class)).isNotEmpty();\n\t\t\t\tassertThat(context.getBeansOfType(OpenAiEmbeddingClient.class)).isEmpty();\n\t\t\t});\n\n\t\tnew ApplicationContextRunner()\n\t\t\t.withPropertyValues(\"spring.ai.openai.api-key=API_KEY\", \"spring.ai.openai.base-url=TEST_BASE_URL\")\n\t\t\t.withConfiguration(AutoConfigurations.of(SpringAiRetryAutoConfiguration.class,\n\t\t\t\t\tRestClientAutoConfiguration.class, OpenAiAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tassertThat(context.getBeansOfType(OpenAiEmbeddingProperties.class)).isNotEmpty();\n\t\t\t\tassertThat(context.getBeansOfType(OpenAiEmbeddingClient.class)).isNotEmpty();\n\t\t\t});\n\n\t\tnew ApplicationContextRunner()\n\t\t\t.withPropertyValues(\"spring.ai.openai.api-key=API_KEY\", \"spring.ai.openai.base-url=TEST_BASE_URL\",\n\t\t\t\t\t\"spring.ai.openai.embedding.enabled=true\")\n\t\t\t.withConfiguration(AutoConfigurations.of(SpringAiRetryAutoConfiguration.class,\n\t\t\t\t\tRestClientAutoConfiguration.class, OpenAiAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tassertThat(context.getBeansOfType(OpenAiEmbeddingProperties.class)).isNotEmpty();\n\t\t\t\tassertThat(context.getBeansOfType(OpenAiEmbeddingClient.class)).isNotEmpty();\n\t\t\t});",
                "is_abstract": "",
                "class_name": "OpenAiPropertiesTests",
                "annotations": []
            },
            {
                "name": "chatActivation",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "new ApplicationContextRunner()\n\t\t\t.withPropertyValues(\"spring.ai.openai.api-key=API_KEY\", \"spring.ai.openai.base-url=TEST_BASE_URL\",\n\t\t\t\t\t\"spring.ai.openai.chat.enabled=false\")\n\t\t\t.withConfiguration(AutoConfigurations.of(SpringAiRetryAutoConfiguration.class,\n\t\t\t\t\tRestClientAutoConfiguration.class, OpenAiAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tassertThat(context.getBeansOfType(OpenAiChatProperties.class)).isNotEmpty();\n\t\t\t\tassertThat(context.getBeansOfType(OpenAiChatClient.class)).isEmpty();\n\t\t\t});\n\n\t\tnew ApplicationContextRunner()\n\t\t\t.withPropertyValues(\"spring.ai.openai.api-key=API_KEY\", \"spring.ai.openai.base-url=TEST_BASE_URL\")\n\t\t\t.withConfiguration(AutoConfigurations.of(SpringAiRetryAutoConfiguration.class,\n\t\t\t\t\tRestClientAutoConfiguration.class, OpenAiAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tassertThat(context.getBeansOfType(OpenAiChatProperties.class)).isNotEmpty();\n\t\t\t\tassertThat(context.getBeansOfType(OpenAiChatClient.class)).isNotEmpty();\n\t\t\t});\n\n\t\tnew ApplicationContextRunner()\n\t\t\t.withPropertyValues(\"spring.ai.openai.api-key=API_KEY\", \"spring.ai.openai.base-url=TEST_BASE_URL\",\n\t\t\t\t\t\"spring.ai.openai.chat.enabled=true\")\n\t\t\t.withConfiguration(AutoConfigurations.of(SpringAiRetryAutoConfiguration.class,\n\t\t\t\t\tRestClientAutoConfiguration.class, OpenAiAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tassertThat(context.getBeansOfType(OpenAiChatProperties.class)).isNotEmpty();\n\t\t\t\tassertThat(context.getBeansOfType(OpenAiChatClient.class)).isNotEmpty();\n\t\t\t});",
                "is_abstract": "",
                "class_name": "OpenAiPropertiesTests",
                "annotations": []
            },
            {
                "name": "imageActivation",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "new ApplicationContextRunner()\n\t\t\t.withPropertyValues(\"spring.ai.openai.api-key=API_KEY\", \"spring.ai.openai.base-url=TEST_BASE_URL\",\n\t\t\t\t\t\"spring.ai.openai.image.enabled=false\")\n\t\t\t.withConfiguration(AutoConfigurations.of(SpringAiRetryAutoConfiguration.class,\n\t\t\t\t\tRestClientAutoConfiguration.class, OpenAiAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tassertThat(context.getBeansOfType(OpenAiImageProperties.class)).isNotEmpty();\n\t\t\t\tassertThat(context.getBeansOfType(OpenAiImageClient.class)).isEmpty();\n\t\t\t});\n\n\t\tnew ApplicationContextRunner()\n\t\t\t.withPropertyValues(\"spring.ai.openai.api-key=API_KEY\", \"spring.ai.openai.base-url=TEST_BASE_URL\")\n\t\t\t.withConfiguration(AutoConfigurations.of(SpringAiRetryAutoConfiguration.class,\n\t\t\t\t\tRestClientAutoConfiguration.class, OpenAiAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tassertThat(context.getBeansOfType(OpenAiImageProperties.class)).isNotEmpty();\n\t\t\t\tassertThat(context.getBeansOfType(OpenAiImageClient.class)).isNotEmpty();\n\t\t\t});\n\n\t\tnew ApplicationContextRunner()\n\t\t\t.withPropertyValues(\"spring.ai.openai.api-key=API_KEY\", \"spring.ai.openai.base-url=TEST_BASE_URL\",\n\t\t\t\t\t\"spring.ai.openai.image.enabled=true\")\n\t\t\t.withConfiguration(AutoConfigurations.of(SpringAiRetryAutoConfiguration.class,\n\t\t\t\t\tRestClientAutoConfiguration.class, OpenAiAutoConfiguration.class))\n\t\t\t.run(context -> {\n\t\t\t\tassertThat(context.getBeansOfType(OpenAiImageProperties.class)).isNotEmpty();\n\t\t\t\tassertThat(context.getBeansOfType(OpenAiImageClient.class)).isNotEmpty();\n\t\t\t});",
                "is_abstract": "",
                "class_name": "OpenAiPropertiesTests",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/openai/OpenAiAutoConfigurationIT.java",
        "class_names": [
            "OpenAiAutoConfigurationIT"
        ],
        "imports": "import java.util.stream.Collectors;\nimport java.util.List;\nimport reactor.core.publisher.Flux;\nimport org.springframework.core.io.Resource;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport org.springframework.ai.openai.OpenAiChatClient;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.apache.commons.logging.LogFactory;\nimport java.util.Arrays;\nimport org.springframework.ai.chat.ChatResponse;\nimport org.springframework.ai.embedding.EmbeddingResponse;\nimport org.springframework.ai.chat.messages.UserMessage;\nimport org.springframework.boot.autoconfigure.web.client.RestClientAutoConfiguration;\nimport org.springframework.ai.openai.OpenAiAudioTranscriptionClient;\nimport org.apache.commons.logging.Log;\nimport org.springframework.ai.image.ImagePrompt;\nimport org.springframework.ai.autoconfigure.retry.SpringAiRetryAutoConfiguration;\nimport org.springframework.ai.chat.prompt.Prompt;\nimport org.springframework.core.io.ClassPathResource;\nimport org.springframework.ai.openai.OpenAiAudioSpeechClient;\nimport org.springframework.ai.image.ImageResponse;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.autoconfigure.AutoConfigurations;\nimport org.springframework.ai.openai.OpenAiImageClient;\nimport org.springframework.ai.openai.OpenAiEmbeddingClient;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.openai.OpenAiAutoConfigurationIT": "org.springframework.ai.autoconfigure.openai.OpenAiAutoConfigurationIT",
            "org.springframework.ai.autoconfigure.openai.generat": "org.springframework.ai.autoconfigure.openai.generat",
            "org.springframework.ai.autoconfigure.openai.transcrib": "org.springframework.ai.autoconfigure.openai.transcrib",
            "org.springframework.ai.autoconfigure.openai.speech": "org.springframework.ai.autoconfigure.openai.speech",
            "org.springframework.ai.autoconfigure.openai.verifyMp3FrameHeader": "org.springframework.ai.autoconfigure.openai.verifyMp3FrameHeader",
            "org.springframework.ai.autoconfigure.openai.generateStreamin": "org.springframework.ai.autoconfigure.openai.generateStreamin",
            "org.springframework.ai.autoconfigure.openai.embeddin": "org.springframework.ai.autoconfigure.openai.embeddin",
            "org.springframework.ai.autoconfigure.openai.generateIm": "org.springframework.ai.autoconfigure.openai.generateIm",
            "org.springframework.ai.autoconfigure.openai.logger": "org.springframework.ai.autoconfigure.openai.logger",
            "org.springframework.ai.autoconfigure.openai.contextRunner": "org.springframework.ai.autoconfigure.openai.contextRunner"
        },
        "package": "package org.springframework.ai.autoconfigure.openai;",
        "property_declarations": [
            "private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t.withPropertyValues(\"spring.ai.openai.apiKey=\" + System.getenv(\"OPENAI_API_KEY\"))\n\t\t.withConfiguration(AutoConfigurations.of(SpringAiRetryAutoConfiguration.class,\n\t\t\t\tRestClientAutoConfiguration.class, OpenAiAutoConfiguration.class));",
            "private static final Log logger = LogFactory.getLog(OpenAiAutoConfigurationIT.class);"
        ],
        "functions": [
            {
                "name": "generate",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\t\t\tOpenAiChatClient client = context.getBean(OpenAiChatClient.class);\n\t\t\tString response = client.call(\"Hello\");\n\t\t\tassertThat(response).isNotEmpty();\n\t\t\tlogger.info(\"Response: \" + response);\n\t\t});",
                "is_abstract": "",
                "class_name": "OpenAiAutoConfigurationIT",
                "annotations": []
            },
            {
                "name": "transcribe",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\t\t\tOpenAiAudioTranscriptionClient client = context.getBean(OpenAiAudioTranscriptionClient.class);\n\t\t\tResource audioFile = new ClassPathResource(\"/speech/jfk.flac\");\n\t\t\tString response = client.call(audioFile);\n\t\t\tassertThat(response).isNotEmpty();\n\t\t\tlogger.info(\"Response: \" + response);\n\t\t});",
                "is_abstract": "",
                "class_name": "OpenAiAutoConfigurationIT",
                "annotations": []
            },
            {
                "name": "speech",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\t\t\tOpenAiAudioSpeechClient client = context.getBean(OpenAiAudioSpeechClient.class);\n\t\t\tbyte[] response = client.call(\"H\");\n\t\t\tassertThat(response).isNotNull();\n\t\t\tassertThat(verifyMp3FrameHeader(response))\n\t\t\t\t.withFailMessage(\"Expected MP3 frame header to be present in the response, but it was not found.\")\n\t\t\t\t.isTrue();\n\t\t\tassertThat(response.length).isNotEqualTo(0);\n\n\t\t\tlogger.info(\"Response: \" + Arrays.toString(response));\n\t\t});",
                "is_abstract": "",
                "class_name": "OpenAiAutoConfigurationIT",
                "annotations": []
            },
            {
                "name": "verifyMp3FrameHeader",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// Check if the response is null or too short to contain a frame header\n\t\tif (audioResponse == null || audioResponse.length < 2) {\n\t\t\treturn false;\n\t\t}\n\t\t// Check for the MP3 frame header\n\t\t// 0xFFE0 is the sync word for an MP3 frame (11 bits set to 1 followed by 3 bits\n\t\t// set to 0)\n\t\treturn (audioResponse[0] & 0xFF) == 0xFF && (audioResponse[1] & 0xE0) == 0xE0;",
                "is_abstract": "",
                "class_name": "OpenAiAutoConfigurationIT",
                "annotations": []
            },
            {
                "name": "generateStreaming",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\t\t\tOpenAiChatClient client = context.getBean(OpenAiChatClient.class);\n\t\t\tFlux<ChatResponse> responseFlux = client.stream(new Prompt(new UserMessage(\"Hello\")));\n\t\t\tString response = responseFlux.collectList().block().stream().map(chatResponse -> {\n\t\t\t\treturn chatResponse.getResults().get(0).getOutput().getContent();\n\t\t\t}).collect(Collectors.joining());\n\n\t\t\tassertThat(response).isNotEmpty();\n\t\t\tlogger.info(\"Response: \" + response);\n\t\t});",
                "is_abstract": "",
                "class_name": "OpenAiAutoConfigurationIT",
                "annotations": []
            },
            {
                "name": "embedding",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\t\t\tOpenAiEmbeddingClient embeddingClient = context.getBean(OpenAiEmbeddingClient.class);\n\n\t\t\tEmbeddingResponse embeddingResponse = embeddingClient\n\t\t\t\t.embedForResponse(List.of(\"Hello World\", \"World is big and salvation is near\"));\n\t\t\tassertThat(embeddingResponse.getResults()).hasSize(2);\n\t\t\tassertThat(embeddingResponse.getResults().get(0).getOutput()).isNotEmpty();\n\t\t\tassertThat(embeddingResponse.getResults().get(0).getIndex()).isEqualTo(0);\n\t\t\tassertThat(embeddingResponse.getResults().get(1).getOutput()).isNotEmpty();\n\t\t\tassertThat(embeddingResponse.getResults().get(1).getIndex()).isEqualTo(1);\n\n\t\t\tassertThat(embeddingClient.dimensions()).isEqualTo(1536);\n\t\t});",
                "is_abstract": "",
                "class_name": "OpenAiAutoConfigurationIT",
                "annotations": []
            },
            {
                "name": "generateImage",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.withPropertyValues(\"spring.ai.openai.image.options.size=1024x1024\").run(context -> {\n\t\t\tOpenAiImageClient client = context.getBean(OpenAiImageClient.class);\n\t\t\tImageResponse imageResponse = client.call(new ImagePrompt(\"forest\"));\n\t\t\tassertThat(imageResponse.getResults()).hasSize(1);\n\t\t\tassertThat(imageResponse.getResult().getOutput().getUrl()).isNotEmpty();\n\t\t\tlogger.info(\"Generated image: \" + imageResponse.getResult().getOutput().getUrl());\n\t\t});",
                "is_abstract": "",
                "class_name": "OpenAiAutoConfigurationIT",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/openai/tool/MockWeatherService.java",
        "class_names": [
            "MockWeatherService"
        ],
        "imports": "import com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport com.fasterxml.jackson.annotation.JsonPropertyDescription;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport java.util.function.Function;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport com.fasterxml.jackson.annotation.JsonClassDescription;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.openai.tool.MockWeatherServi": "org.springframework.ai.autoconfigure.openai.tool.MockWeatherServi",
            "org.springframework.ai.autoconfigure.openai.tool.apply": "org.springframework.ai.autoconfigure.openai.tool.apply",
            "org.springframework.ai.autoconfigure.openai.tool.unitNam": "org.springframework.ai.autoconfigure.openai.tool.unitNam"
        },
        "package": "package org.springframework.ai.autoconfigure.openai.tool;",
        "property_declarations": [
            "public final String unitName;"
        ],
        "functions": [
            {
                "name": "apply",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "double temperature = 0;\n\t\tif (request.location().contains(\"Paris\")) {\n\t\t\ttemperature = 15;\n\t\t}\n\t\telse if (request.location().contains(\"Tokyo\")) {\n\t\t\ttemperature = 10;\n\t\t}\n\t\telse if (request.location().contains(\"San Francisco\")) {\n\t\t\ttemperature = 30;\n\t\t}\n\n\t\treturn new Response(temperature, 15, 20, 2, 53, 45, Unit.C);",
                "is_abstract": "",
                "class_name": "MockWeatherService",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/openai/tool/FunctionCallbackWithPlainFunctionBeanIT.java",
        "class_names": [
            "FunctionCallbackWithPlainFunctionBeanIT",
            "Config"
        ],
        "imports": "import java.util.stream.Collectors;\nimport org.springframework.ai.model.function.FunctionCallingOptionsBuilder.PortableFunctionCallingOptions;\nimport java.util.List;\nimport org.springframework.ai.chat.Generation;\nimport reactor.core.publisher.Flux;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport org.springframework.ai.openai.OpenAiChatClient;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.slf4j.Logger;\nimport org.springframework.ai.autoconfigure.openai.OpenAiAutoConfiguration;\nimport java.util.function.Function;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.ai.chat.ChatResponse;\nimport org.springframework.ai.chat.messages.UserMessage;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.boot.autoconfigure.web.client.RestClientAutoConfiguration;\nimport org.springframework.ai.chat.messages.AssistantMessage;\nimport org.springframework.ai.autoconfigure.retry.SpringAiRetryAutoConfiguration;\nimport org.springframework.ai.openai.OpenAiChatOptions;\nimport org.springframework.ai.chat.prompt.Prompt;\nimport org.springframework.ai.model.function.FunctionCallingOptions;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.autoconfigure.AutoConfigurations;\nimport org.springframework.context.annotation.Description;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.openai.tool.FunctionCallbackWithPlainFunctionBeanIT": "org.springframework.ai.autoconfigure.openai.tool.FunctionCallbackWithPlainFunctionBeanIT",
            "org.springframework.ai.autoconfigure.openai.tool.Confi": "org.springframework.ai.autoconfigure.openai.tool.Confi",
            "org.springframework.ai.autoconfigure.openai.tool.functionCallTest": "org.springframework.ai.autoconfigure.openai.tool.functionCallTest",
            "org.springframework.ai.autoconfigure.openai.tool.functionCallWithPortableFunctionCallingOptions": "org.springframework.ai.autoconfigure.openai.tool.functionCallWithPortableFunctionCallingOptions",
            "org.springframework.ai.autoconfigure.openai.tool.streamFunctionCallTest": "org.springframework.ai.autoconfigure.openai.tool.streamFunctionCallTest",
            "org.springframework.ai.autoconfigure.openai.tool.Description": "org.springframework.ai.autoconfigure.openai.tool.Description",
            "org.springframework.ai.autoconfigure.openai.tool.weatherFunctionTwo": "org.springframework.ai.autoconfigure.openai.tool.weatherFunctionTwo",
            "org.springframework.ai.autoconfigure.openai.tool.logger": "org.springframework.ai.autoconfigure.openai.tool.logger",
            "org.springframework.ai.autoconfigure.openai.tool.contextRunner": "org.springframework.ai.autoconfigure.openai.tool.contextRunner"
        },
        "package": "package org.springframework.ai.autoconfigure.openai.tool;",
        "property_declarations": [
            "private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t.withPropertyValues(\"spring.ai.openai.apiKey=\" + System.getenv(\"OPENAI_API_KEY\"))\n\t\t.withConfiguration(AutoConfigurations.of(SpringAiRetryAutoConfiguration.class,\n\t\t\t\tRestClientAutoConfiguration.class, OpenAiAutoConfiguration.class))\n\t\t.withUserConfiguration(Config.class);",
            "private final Logger logger = LoggerFactory.getLogger(FunctionCallbackWithPlainFunctionBeanIT.class);"
        ],
        "functions": [
            {
                "name": "functionCallTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.withPropertyValues(\"spring.ai.openai.chat.options.model=gpt-4-turbo-preview\").run(context -> {\n\n\t\t\tOpenAiChatClient chatClient = context.getBean(OpenAiChatClient.class);\n\n\t\t\t// Test weatherFunction\n\t\t\tUserMessage userMessage = new UserMessage(\"What's the weather like in San Francisco, Tokyo, and Paris?\");\n\n\t\t\tChatResponse response = chatClient.call(new Prompt(List.of(userMessage),\n\t\t\t\t\tOpenAiChatOptions.builder().withFunction(\"weatherFunction\").build()));\n\n\t\t\tlogger.info(\"Response: {}\", response);\n\n\t\t\tassertThat(response.getResult().getOutput().getContent()).contains(\"30\", \"10\", \"15\");\n\n\t\t\t// Test weatherFunctionTwo\n\t\t\tresponse = chatClient.call(new Prompt(List.of(userMessage),\n\t\t\t\t\tOpenAiChatOptions.builder().withFunction(\"weatherFunctionTwo\").build()));\n\n\t\t\tlogger.info(\"Response: {}\", response);\n\n\t\t\tassertThat(response.getResult().getOutput().getContent()).contains(\"30\", \"10\", \"15\");\n\n\t\t});",
                "is_abstract": "",
                "class_name": "FunctionCallbackWithPlainFunctionBeanIT",
                "annotations": []
            },
            {
                "name": "functionCallWithPortableFunctionCallingOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.withPropertyValues(\"spring.ai.openai.chat.options.model=gpt-4-turbo-preview\").run(context -> {\n\n\t\t\tOpenAiChatClient chatClient = context.getBean(OpenAiChatClient.class);\n\n\t\t\t// Test weatherFunction\n\t\t\tUserMessage userMessage = new UserMessage(\"What's the weather like in San Francisco, Tokyo, and Paris?\");\n\n\t\t\tPortableFunctionCallingOptions functionOptions = FunctionCallingOptions.builder()\n\t\t\t\t.withFunction(\"weatherFunction\")\n\t\t\t\t.build();\n\n\t\t\tChatResponse response = chatClient.call(new Prompt(List.of(userMessage), functionOptions));\n\n\t\t\tlogger.info(\"Response: {}\", response);\n\t\t});",
                "is_abstract": "",
                "class_name": "FunctionCallbackWithPlainFunctionBeanIT",
                "annotations": []
            },
            {
                "name": "streamFunctionCallTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.withPropertyValues(\"spring.ai.openai.chat.options.model=gpt-4-turbo-preview\").run(context -> {\n\n\t\t\tOpenAiChatClient chatClient = context.getBean(OpenAiChatClient.class);\n\n\t\t\t// Test weatherFunction\n\t\t\tUserMessage userMessage = new UserMessage(\"What's the weather like in San Francisco, Tokyo, and Paris?\");\n\n\t\t\tFlux<ChatResponse> response = chatClient.stream(new Prompt(List.of(userMessage),\n\t\t\t\t\tOpenAiChatOptions.builder().withFunction(\"weatherFunction\").build()));\n\n\t\t\tString content = response.collectList()\n\t\t\t\t.block()\n\t\t\t\t.stream()\n\t\t\t\t.map(ChatResponse::getResults)\n\t\t\t\t.flatMap(List::stream)\n\t\t\t\t.map(Generation::getOutput)\n\t\t\t\t.map(AssistantMessage::getContent)\n\t\t\t\t.collect(Collectors.joining());\n\t\t\tlogger.info(\"Response: {}\", content);\n\n\t\t\tassertThat(content).containsAnyOf(\"30.0\", \"30\");\n\t\t\tassertThat(content).containsAnyOf(\"10.0\", \"10\");\n\t\t\tassertThat(content).containsAnyOf(\"15.0\", \"15\");\n\n\t\t\t// Test weatherFunctionTwo\n\t\t\tresponse = chatClient.stream(new Prompt(List.of(userMessage),\n\t\t\t\t\tOpenAiChatOptions.builder().withFunction(\"weatherFunctionTwo\").build()));\n\n\t\t\tcontent = response.collectList()\n\t\t\t\t.block()\n\t\t\t\t.stream()\n\t\t\t\t.map(ChatResponse::getResults)\n\t\t\t\t.flatMap(List::stream)\n\t\t\t\t.map(Generation::getOutput)\n\t\t\t\t.map(AssistantMessage::getContent)\n\t\t\t\t.collect(Collectors.joining());\n\t\t\tlogger.info(\"Response: {}\", content);\n\n\t\t\tassertThat(content).containsAnyOf(\"30.0\", \"30\");\n\t\t\tassertThat(content).containsAnyOf(\"10.0\", \"10\");\n\t\t\tassertThat(content).containsAnyOf(\"15.0\", \"15\");\n\t\t});",
                "is_abstract": "",
                "class_name": "FunctionCallbackWithPlainFunctionBeanIT",
                "annotations": []
            },
            {
                "name": "Description",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new MockWeatherService();",
                "is_abstract": "",
                "class_name": "FunctionCallbackWithPlainFunctionBeanIT Config",
                "annotations": [
                    "@Description(\"Get the weather in location\")"
                ]
            },
            {
                "name": "weatherFunctionTwo",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "MockWeatherService weatherService = new MockWeatherService();\n\t\t\treturn (weatherService::apply);",
                "is_abstract": "",
                "class_name": "FunctionCallbackWithPlainFunctionBeanIT Config",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/openai/tool/FunctionCallbackWrapperIT.java",
        "class_names": [
            "Config",
            "FunctionCallbackWrapperIT"
        ],
        "imports": "import java.util.stream.Collectors;\nimport java.util.List;\nimport org.springframework.ai.chat.Generation;\nimport reactor.core.publisher.Flux;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport org.springframework.ai.openai.OpenAiChatClient;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.slf4j.Logger;\nimport org.springframework.ai.autoconfigure.openai.OpenAiAutoConfiguration;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.ai.chat.ChatResponse;\nimport org.springframework.ai.chat.messages.UserMessage;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.boot.autoconfigure.web.client.RestClientAutoConfiguration;\nimport org.springframework.ai.chat.messages.AssistantMessage;\nimport org.springframework.ai.autoconfigure.retry.SpringAiRetryAutoConfiguration;\nimport org.springframework.ai.model.function.FunctionCallbackWrapper;\nimport org.springframework.ai.openai.OpenAiChatOptions;\nimport org.springframework.ai.chat.prompt.Prompt;\nimport org.springframework.ai.model.function.FunctionCallback;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.autoconfigure.AutoConfigurations;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.openai.tool.FunctionCallbackWrapperIT": "org.springframework.ai.autoconfigure.openai.tool.FunctionCallbackWrapperIT",
            "org.springframework.ai.autoconfigure.openai.tool.Confi": "org.springframework.ai.autoconfigure.openai.tool.Confi",
            "org.springframework.ai.autoconfigure.openai.tool.functionCallTest": "org.springframework.ai.autoconfigure.openai.tool.functionCallTest",
            "org.springframework.ai.autoconfigure.openai.tool.streamFunctionCallTest": "org.springframework.ai.autoconfigure.openai.tool.streamFunctionCallTest",
            "org.springframework.ai.autoconfigure.openai.tool.weatherFunctionInfo": "org.springframework.ai.autoconfigure.openai.tool.weatherFunctionInfo",
            "org.springframework.ai.autoconfigure.openai.tool.logger": "org.springframework.ai.autoconfigure.openai.tool.logger",
            "org.springframework.ai.autoconfigure.openai.tool.contextRunner": "org.springframework.ai.autoconfigure.openai.tool.contextRunner"
        },
        "package": "package org.springframework.ai.autoconfigure.openai.tool;",
        "property_declarations": [
            "private final Logger logger = LoggerFactory.getLogger(FunctionCallbackWrapperIT.class);",
            "private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t.withPropertyValues(\"spring.ai.openai.apiKey=\" + System.getenv(\"OPENAI_API_KEY\"))\n\t\t.withConfiguration(AutoConfigurations.of(SpringAiRetryAutoConfiguration.class,\n\t\t\t\tRestClientAutoConfiguration.class, OpenAiAutoConfiguration.class))\n\t\t.withUserConfiguration(Config.class);"
        ],
        "functions": [
            {
                "name": "functionCallTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.withPropertyValues(\"spring.ai.openai.chat.options.model=gpt-4-turbo-preview\").run(context -> {\n\n\t\t\tOpenAiChatClient chatClient = context.getBean(OpenAiChatClient.class);\n\n\t\t\tUserMessage userMessage = new UserMessage(\"What's the weather like in San Francisco, Tokyo, and Paris?\");\n\n\t\t\tChatResponse response = chatClient.call(\n\t\t\t\t\tnew Prompt(List.of(userMessage), OpenAiChatOptions.builder().withFunction(\"WeatherInfo\").build()));\n\n\t\t\tlogger.info(\"Response: {}\", response);\n\n\t\t\tassertThat(response.getResult().getOutput().getContent()).contains(\"30.0\", \"10.0\", \"15.0\");\n\n\t\t});",
                "is_abstract": "",
                "class_name": "FunctionCallbackWrapperIT",
                "annotations": []
            },
            {
                "name": "streamFunctionCallTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.withPropertyValues(\"spring.ai.openai.chat.options.model=gpt-4-turbo-preview\").run(context -> {\n\n\t\t\tOpenAiChatClient chatClient = context.getBean(OpenAiChatClient.class);\n\n\t\t\tUserMessage userMessage = new UserMessage(\"What's the weather like in San Francisco, Tokyo, and Paris?\");\n\n\t\t\tFlux<ChatResponse> response = chatClient.stream(\n\t\t\t\t\tnew Prompt(List.of(userMessage), OpenAiChatOptions.builder().withFunction(\"WeatherInfo\").build()));\n\n\t\t\tString content = response.collectList()\n\t\t\t\t.block()\n\t\t\t\t.stream()\n\t\t\t\t.map(ChatResponse::getResults)\n\t\t\t\t.flatMap(List::stream)\n\t\t\t\t.map(Generation::getOutput)\n\t\t\t\t.map(AssistantMessage::getContent)\n\t\t\t\t.collect(Collectors.joining());\n\t\t\tlogger.info(\"Response: {}\", content);\n\n\t\t\tassertThat(content).containsAnyOf(\"30.0\", \"30\");\n\t\t\tassertThat(content).containsAnyOf(\"10.0\", \"10\");\n\t\t\tassertThat(content).containsAnyOf(\"15.0\", \"15\");\n\n\t\t});",
                "is_abstract": "",
                "class_name": "FunctionCallbackWrapperIT",
                "annotations": []
            },
            {
                "name": "weatherFunctionInfo",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return FunctionCallbackWrapper.builder(new MockWeatherService())\n\t\t\t\t.withName(\"WeatherInfo\")\n\t\t\t\t.withDescription(\"Get the weather in location\")\n\t\t\t\t.withResponseConverter((response) -> \"\" + response.temp() + response.unit())\n\t\t\t\t.build();",
                "is_abstract": "",
                "class_name": "FunctionCallbackWrapperIT Config",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/openai/tool/FunctionCallbackInPromptIT.java",
        "class_names": [
            "FunctionCallbackInPromptIT"
        ],
        "imports": "import java.util.stream.Collectors;\nimport java.util.List;\nimport org.springframework.ai.chat.Generation;\nimport reactor.core.publisher.Flux;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport org.springframework.ai.openai.OpenAiChatClient;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.slf4j.Logger;\nimport org.springframework.ai.autoconfigure.openai.OpenAiAutoConfiguration;\nimport org.springframework.ai.chat.ChatResponse;\nimport org.springframework.ai.chat.messages.UserMessage;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.boot.autoconfigure.web.client.RestClientAutoConfiguration;\nimport org.springframework.ai.chat.messages.AssistantMessage;\nimport org.springframework.ai.autoconfigure.retry.SpringAiRetryAutoConfiguration;\nimport org.springframework.ai.model.function.FunctionCallbackWrapper;\nimport org.springframework.ai.openai.OpenAiChatOptions;\nimport org.springframework.ai.chat.prompt.Prompt;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.autoconfigure.AutoConfigurations;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.openai.tool.FunctionCallbackInPromptIT": "org.springframework.ai.autoconfigure.openai.tool.FunctionCallbackInPromptIT",
            "org.springframework.ai.autoconfigure.openai.tool.functionCallTest": "org.springframework.ai.autoconfigure.openai.tool.functionCallTest",
            "org.springframework.ai.autoconfigure.openai.tool.streamingFunctionCallTest": "org.springframework.ai.autoconfigure.openai.tool.streamingFunctionCallTest",
            "org.springframework.ai.autoconfigure.openai.tool.logger": "org.springframework.ai.autoconfigure.openai.tool.logger",
            "org.springframework.ai.autoconfigure.openai.tool.contextRunner": "org.springframework.ai.autoconfigure.openai.tool.contextRunner"
        },
        "package": "package org.springframework.ai.autoconfigure.openai.tool;",
        "property_declarations": [
            "private final Logger logger = LoggerFactory.getLogger(FunctionCallbackInPromptIT.class);",
            "private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t.withPropertyValues(\"spring.ai.openai.apiKey=\" + System.getenv(\"OPENAI_API_KEY\"))\n\t\t.withConfiguration(AutoConfigurations.of(SpringAiRetryAutoConfiguration.class,\n\t\t\t\tRestClientAutoConfiguration.class, OpenAiAutoConfiguration.class));"
        ],
        "functions": [
            {
                "name": "functionCallTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.withPropertyValues(\"spring.ai.openai.chat.options.model=gpt-4-turbo-preview\").run(context -> {\n\n\t\t\tOpenAiChatClient chatClient = context.getBean(OpenAiChatClient.class);\n\n\t\t\tUserMessage userMessage = new UserMessage(\"What's the weather like in San Francisco, Tokyo, and Paris?\");\n\n\t\t\tvar promptOptions = OpenAiChatOptions.builder()\n\t\t\t\t.withFunctionCallbacks(List.of(FunctionCallbackWrapper.builder(new MockWeatherService())\n\t\t\t\t\t.withName(\"CurrentWeatherService\")\n\t\t\t\t\t.withDescription(\"Get the weather in location\")\n\t\t\t\t\t.withResponseConverter((response) -> \"\" + response.temp() + response.unit())\n\t\t\t\t\t.build()))\n\t\t\t\t.build();\n\n\t\t\tChatResponse response = chatClient.call(new Prompt(List.of(userMessage), promptOptions));\n\n\t\t\tlogger.info(\"Response: {}\", response);\n\n\t\t\tassertThat(response.getResult().getOutput().getContent()).contains(\"30.0\", \"10.0\", \"15.0\");\n\t\t});",
                "is_abstract": "",
                "class_name": "FunctionCallbackInPromptIT",
                "annotations": []
            },
            {
                "name": "streamingFunctionCallTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.withPropertyValues(\"spring.ai.openai.chat.options.model=gpt-4-turbo-preview\").run(context -> {\n\n\t\t\tOpenAiChatClient chatClient = context.getBean(OpenAiChatClient.class);\n\n\t\t\tUserMessage userMessage = new UserMessage(\"What's the weather like in San Francisco, Tokyo, and Paris?\");\n\n\t\t\tvar promptOptions = OpenAiChatOptions.builder()\n\t\t\t\t.withFunctionCallbacks(List.of(FunctionCallbackWrapper.builder(new MockWeatherService())\n\t\t\t\t\t.withName(\"CurrentWeatherService\")\n\t\t\t\t\t.withDescription(\"Get the weather in location\")\n\t\t\t\t\t.withResponseConverter((response) -> \"\" + response.temp() + response.unit())\n\t\t\t\t\t.build()))\n\t\t\t\t.build();\n\n\t\t\tFlux<ChatResponse> response = chatClient.stream(new Prompt(List.of(userMessage), promptOptions));\n\n\t\t\tString content = response.collectList()\n\t\t\t\t.block()\n\t\t\t\t.stream()\n\t\t\t\t.map(ChatResponse::getResults)\n\t\t\t\t.flatMap(List::stream)\n\t\t\t\t.map(Generation::getOutput)\n\t\t\t\t.map(AssistantMessage::getContent)\n\t\t\t\t.collect(Collectors.joining());\n\t\t\tlogger.info(\"Response: {}\", content);\n\n\t\t\tassertThat(content).containsAnyOf(\"30.0\", \"30\");\n\t\t\tassertThat(content).containsAnyOf(\"10.0\", \"10\");\n\t\t\tassertThat(content).containsAnyOf(\"15.0\", \"15\");\n\t\t});",
                "is_abstract": "",
                "class_name": "FunctionCallbackInPromptIT",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/neo4j/Neo4jVectorStoreAutoConfigurationIT.java",
        "class_names": [
            "Neo4jVectorStoreAutoConfigurationIT",
            "Config"
        ],
        "imports": "import java.util.List;\nimport org.springframework.ai.vectorstore.SearchRequest;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport java.util.Map;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.boot.autoconfigure.neo4j.Neo4jAutoConfiguration;\nimport org.springframework.ai.transformers.TransformersEmbeddingClient;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.ai.embedding.EmbeddingClient;\nimport org.testcontainers.junit.jupiter.Testcontainers;\nimport org.testcontainers.containers.Neo4jContainer;\nimport org.testcontainers.utility.DockerImageName;\nimport org.springframework.ai.document.Document;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.vectorstore.VectorStore;\nimport org.testcontainers.junit.jupiter.Container;\nimport org.springframework.boot.autoconfigure.AutoConfigurations;\nimport org.springframework.ai.ResourceUtils;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.vectorstore.neo4j.Neo4jVectorStoreAutoConfigurationIT": "org.springframework.ai.autoconfigure.vectorstore.neo4j.Neo4jVectorStoreAutoConfigurationIT",
            "org.springframework.ai.autoconfigure.vectorstore.neo4j.Confi": "org.springframework.ai.autoconfigure.vectorstore.neo4j.Confi",
            "org.springframework.ai.autoconfigure.vectorstore.neo4j.addAndSearch": "org.springframework.ai.autoconfigure.vectorstore.neo4j.addAndSearch",
            "org.springframework.ai.autoconfigure.vectorstore.neo4j.embeddingClient": "org.springframework.ai.autoconfigure.vectorstore.neo4j.embeddingClient",
            "org.springframework.ai.autoconfigure.vectorstore.neo4j.stati": "org.springframework.ai.autoconfigure.vectorstore.neo4j.stati",
            "org.springframework.ai.autoconfigure.vectorstore.neo4j.documents": "org.springframework.ai.autoconfigure.vectorstore.neo4j.documents",
            "org.springframework.ai.autoconfigure.vectorstore.neo4j.contextRunner": "org.springframework.ai.autoconfigure.vectorstore.neo4j.contextRunner"
        },
        "package": "package org.springframework.ai.autoconfigure.vectorstore.neo4j;",
        "property_declarations": [
            "List<Document> documents = List.of(\n\t\t\tnew Document(ResourceUtils.getText(\"classpath:/test/data/spring.ai.txt\"), Map.of(\"spring\", \"great\")),\n\t\t\tnew Document(ResourceUtils.getText(\"classpath:/test/data/time.shelter.txt\")), new Document(\n\t\t\t\t\tResourceUtils.getText(\"classpath:/test/data/great.depression.txt\"), Map.of(\"depression\", \"bad\")));",
            "@Container\n\tstatic Neo4jContainer<?> neo4jContainer = new Neo4jContainer<>(DockerImageName.parse(\"neo4j:5.15\"))\n\t\t.withRandomPassword();",
            "private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t.withConfiguration(AutoConfigurations.of(Neo4jAutoConfiguration.class, Neo4jVectorStoreAutoConfiguration.class))\n\t\t.withUserConfiguration(Config.class)\n\t\t.withPropertyValues(\"spring.neo4j.uri=\" + neo4jContainer.getBoltUrl(),\n\t\t\t\t\"spring.neo4j.authentication.username=\" + \"neo4j\",\n\t\t\t\t\"spring.neo4j.authentication.password=\" + neo4jContainer.getAdminPassword());"
        ],
        "functions": [
            {
                "name": "addAndSearch",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner\n\t\t\t.withPropertyValues(\"spring.ai.vectorstore.neo4j.label=my_test_label\",\n\t\t\t\t\t\"spring.ai.vectorstore.neo4j.embeddingDimension=384\",\n\t\t\t\t\t\"spring.ai.vectorstore.neo4j.indexName=customIndexName\")\n\t\t\t.run(context -> {\n\t\t\t\tvar properties = context.getBean(Neo4jVectorStoreProperties.class);\n\t\t\t\tassertThat(properties.getLabel()).isEqualTo(\"my_test_label\");\n\t\t\t\tassertThat(properties.getEmbeddingDimension()).isEqualTo(384);\n\t\t\t\tassertThat(properties.getIndexName()).isEqualTo(\"customIndexName\");\n\n\t\t\t\tVectorStore vectorStore = context.getBean(VectorStore.class);\n\t\t\t\tvectorStore.add(documents);\n\n\t\t\t\tList<Document> results = vectorStore.similaritySearch(SearchRequest.query(\"Spring\").withTopK(1));\n\n\t\t\t\tassertThat(results).hasSize(1);\n\t\t\t\tDocument resultDoc = results.get(0);\n\t\t\t\tassertThat(resultDoc.getId()).isEqualTo(documents.get(0).getId());\n\t\t\t\tassertThat(resultDoc.getContent()).contains(\n\t\t\t\t\t\t\"Spring AI provides abstractions that serve as the foundation for developing AI applications.\");\n\n\t\t\t\t// Remove all documents from the store\n\t\t\t\tvectorStore.delete(documents.stream().map(doc -> doc.getId()).toList());\n\n\t\t\t\tresults = vectorStore.similaritySearch(SearchRequest.query(\"Spring\").withTopK(1));\n\t\t\t\tassertThat(results).isEmpty();\n\t\t\t});",
                "is_abstract": "",
                "class_name": "Neo4jVectorStoreAutoConfigurationIT",
                "annotations": [
                    "@Configuration(proxyBeanMethods = false)"
                ]
            },
            {
                "name": "embeddingClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new TransformersEmbeddingClient();",
                "is_abstract": "",
                "class_name": "Neo4jVectorStoreAutoConfigurationIT Config",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/hanadb/HanaCloudVectorStorePropertiesTest.java",
        "class_names": [
            "HanaCloudVectorStorePropertiesTest"
        ],
        "imports": "import org.junit.jupiter.api.Assertions;\nimport org.junit.Test;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.vectorstore.hanadb.HanaCloudVectorStorePropertiesTest": "org.springframework.ai.autoconfigure.vectorstore.hanadb.HanaCloudVectorStorePropertiesTest",
            "org.springframework.ai.autoconfigure.vectorstore.hanadb.testHanaCloudVectorStoreProperties": "org.springframework.ai.autoconfigure.vectorstore.hanadb.testHanaCloudVectorStoreProperties"
        },
        "package": "package org.springframework.ai.autoconfigure.vectorstore.hanadb;",
        "property_declarations": [],
        "functions": [
            {
                "name": "testHanaCloudVectorStoreProperties",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var props = new HanaCloudVectorStoreProperties();\n\t\tprops.setTableName(\"CRICKET_WORLD_CUP\");\n\t\tprops.setTopK(5);\n\n\t\tAssertions.assertEquals(\"CRICKET_WORLD_CUP\", props.getTableName());\n\t\tAssertions.assertEquals(5, props.getTopK());",
                "is_abstract": "",
                "class_name": "HanaCloudVectorStorePropertiesTest",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/hanadb/HanaCloudVectorStoreAutoConfigurationIT.java",
        "class_names": [
            "HanaCloudVectorStoreAutoConfigurationIT"
        ],
        "imports": "import java.util.List;\nimport org.springframework.boot.autoconfigure.web.client.RestClientAutoConfiguration;\nimport org.springframework.ai.document.Document;\nimport org.springframework.ai.vectorstore.VectorStore;\nimport org.springframework.ai.autoconfigure.openai.OpenAiAutoConfiguration;\nimport org.junit.jupiter.api.Disabled;\nimport org.springframework.boot.autoconfigure.AutoConfigurations;\nimport org.springframework.boot.autoconfigure.data.jdbc.JdbcRepositoriesAutoConfiguration;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport org.springframework.ai.autoconfigure.retry.SpringAiRetryAutoConfiguration;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.Test;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.vectorstore.hanadb.HanaCloudVectorStoreAutoConfigurationIT": "org.springframework.ai.autoconfigure.vectorstore.hanadb.HanaCloudVectorStoreAutoConfigurationIT",
            "org.springframework.ai.autoconfigure.vectorstore.hanadb.addAndSearch": "org.springframework.ai.autoconfigure.vectorstore.hanadb.addAndSearch",
            "org.springframework.ai.autoconfigure.vectorstore.hanadb.contextRunner": "org.springframework.ai.autoconfigure.vectorstore.hanadb.contextRunner",
            "org.springframework.ai.autoconfigure.vectorstore.hanadb.documents": "org.springframework.ai.autoconfigure.vectorstore.hanadb.documents"
        },
        "package": "package org.springframework.ai.autoconfigure.vectorstore.hanadb;",
        "property_declarations": [
            "private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t.withConfiguration(AutoConfigurations.of(HanaCloudVectorStoreAutoConfiguration.class,\n\t\t\t\tOpenAiAutoConfiguration.class, RestClientAutoConfiguration.class, SpringAiRetryAutoConfiguration.class,\n\t\t\t\tJdbcRepositoriesAutoConfiguration.class))\n\t\t.withPropertyValues(\"spring.ai.openai.api-key=\" + System.getenv(\"OPENAI_API_KEY\"),\n\t\t\t\t\"spring.ai.openai.embedding.options.model=text-embedding-ada-002\",\n\t\t\t\t\"spring.datasource.url=\" + System.getenv(\"HANA_DATASOURCE_URL\"),\n\t\t\t\t\"spring.datasource.username=\" + System.getenv(\"HANA_DATASOURCE_USERNAME\"),\n\t\t\t\t\"spring.datasource.password=\" + System.getenv(\"HANA_DATASOURCE_PASSWORD\"),\n\t\t\t\t\"spring.ai.vectorstore.hanadb.tableName=CRICKET_WORLD_CUP\", \"spring.ai.vectorstore.hanadb.topK=1\");",
            "List<Document> documents = List.of(\n\t\t\tnew Document(\"Spring AI rocks!! Spring AI rocks!! Spring AI rocks!! Spring AI rocks!! Spring AI rocks!!\"),\n\t\t\tnew Document(\"Hello World Hello World Hello World Hello World Hello World Hello World Hello World\"),\n\t\t\tnew Document(\n\t\t\t\t\t\"Great Depression Great Depression Great Depression Great Depression Great Depression Great Depression\"));"
        ],
        "functions": [
            {
                "name": "addAndSearch",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\t\t\tVectorStore vectorStore = context.getBean(VectorStore.class);\n\t\t\tvectorStore.add(documents);\n\n\t\t\tList<Document> results = vectorStore.similaritySearch(\"What is Great Depression?\");\n\t\t\tAssertions.assertEquals(1, results.size());\n\n\t\t\t// Remove all documents from the store\n\t\t\tvectorStore.delete(documents.stream().map(Document::getId).toList());\n\t\t\tList<Document> results2 = vectorStore.similaritySearch(\"Great Depression\");\n\t\t\tAssertions.assertEquals(0, results2.size());\n\t\t});",
                "is_abstract": "",
                "class_name": "HanaCloudVectorStoreAutoConfigurationIT",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/chroma/ChromaVectorStoreAutoConfigurationIT.java",
        "class_names": [
            "Config",
            "ChromaVectorStoreAutoConfigurationIT"
        ],
        "imports": "import java.util.List;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.springframework.ai.transformers.TransformersEmbeddingClient;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.ai.document.Document;\nimport org.springframework.ai.vectorstore.SearchRequest;\nimport java.util.Map;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.vectorstore.VectorStore;\nimport org.testcontainers.junit.jupiter.Container;\nimport org.springframework.boot.autoconfigure.AutoConfigurations;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport org.springframework.ai.embedding.EmbeddingClient;\nimport org.testcontainers.containers.GenericContainer;\nimport org.testcontainers.junit.jupiter.Testcontainers;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.vectorstore.chroma.ChromaVectorStoreAutoConfigurationIT": "org.springframework.ai.autoconfigure.vectorstore.chroma.ChromaVectorStoreAutoConfigurationIT",
            "org.springframework.ai.autoconfigure.vectorstore.chroma.Confi": "org.springframework.ai.autoconfigure.vectorstore.chroma.Confi",
            "org.springframework.ai.autoconfigure.vectorstore.chroma.addAndSearchWithFilters": "org.springframework.ai.autoconfigure.vectorstore.chroma.addAndSearchWithFilters",
            "org.springframework.ai.autoconfigure.vectorstore.chroma.embeddingClient": "org.springframework.ai.autoconfigure.vectorstore.chroma.embeddingClient",
            "org.springframework.ai.autoconfigure.vectorstore.chroma.stati": "org.springframework.ai.autoconfigure.vectorstore.chroma.stati",
            "org.springframework.ai.autoconfigure.vectorstore.chroma.contextRunner": "org.springframework.ai.autoconfigure.vectorstore.chroma.contextRunner"
        },
        "package": "package org.springframework.ai.autoconfigure.vectorstore.chroma;",
        "property_declarations": [
            "@Container\n\tstatic GenericContainer<?> chromaContainer = new GenericContainer<>(\"ghcr.io/chroma-core/chroma:0.4.15\")\n\t\t.withExposedPorts(8000);",
            "private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t.withConfiguration(AutoConfigurations.of(ChromaVectorStoreAutoConfiguration.class))\n\t\t.withUserConfiguration(Config.class)\n\t\t.withPropertyValues(\"spring.ai.vectorstore.chroma.client.host=http://\" + chromaContainer.getHost(),\n\t\t\t\t\"spring.ai.vectorstore.chroma.client.port=\" + chromaContainer.getMappedPort(8000),\n\t\t\t\t\"spring.ai.vectorstore.chroma.store.collectionName=TestCollection\");"
        ],
        "functions": [
            {
                "name": "addAndSearchWithFilters",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\n\t\t\tVectorStore vectorStore = context.getBean(VectorStore.class);\n\n\t\t\tvar bgDocument = new Document(\"The World is Big and Salvation Lurks Around the Corner\",\n\t\t\t\t\tMap.of(\"country\", \"Bulgaria\"));\n\t\t\tvar nlDocument = new Document(\"The World is Big and Salvation Lurks Around the Corner\",\n\t\t\t\t\tMap.of(\"country\", \"Netherlands\"));\n\n\t\t\tvectorStore.add(List.of(bgDocument, nlDocument));\n\n\t\t\tvar request = SearchRequest.query(\"The World\").withTopK(5);\n\n\t\t\tList<Document> results = vectorStore.similaritySearch(request);\n\t\t\tassertThat(results).hasSize(2);\n\n\t\t\tresults = vectorStore\n\t\t\t\t.similaritySearch(request.withSimilarityThresholdAll().withFilterExpression(\"country == 'Bulgaria'\"));\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tassertThat(results.get(0).getId()).isEqualTo(bgDocument.getId());\n\n\t\t\tresults = vectorStore.similaritySearch(\n\t\t\t\t\trequest.withSimilarityThresholdAll().withFilterExpression(\"country == 'Netherlands'\"));\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tassertThat(results.get(0).getId()).isEqualTo(nlDocument.getId());\n\n\t\t\t// Remove all documents from the store\n\t\t\tvectorStore.delete(List.of(bgDocument, nlDocument).stream().map(doc -> doc.getId()).toList());\n\t\t});",
                "is_abstract": "",
                "class_name": "ChromaVectorStoreAutoConfigurationIT",
                "annotations": [
                    "@Configuration(proxyBeanMethods = false)"
                ]
            },
            {
                "name": "embeddingClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new TransformersEmbeddingClient();",
                "is_abstract": "",
                "class_name": "ChromaVectorStoreAutoConfigurationIT Config",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/redis/RedisVectorStoreAutoConfigurationIT.java",
        "class_names": [
            "Config",
            "RedisVectorStoreAutoConfigurationIT"
        ],
        "imports": "import com.redis.testcontainers.RedisStackContainer;\nimport java.util.List;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.springframework.ai.transformers.TransformersEmbeddingClient;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.ai.document.Document;\nimport org.springframework.ai.vectorstore.SearchRequest;\nimport java.util.Map;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.vectorstore.VectorStore;\nimport org.springframework.boot.autoconfigure.AutoConfigurations;\nimport org.springframework.context.annotation.Configuration;\nimport org.testcontainers.junit.jupiter.Container;\nimport org.springframework.ai.ResourceUtils;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport org.springframework.ai.embedding.EmbeddingClient;\nimport org.testcontainers.junit.jupiter.Testcontainers;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.vectorstore.redis.RedisVectorStoreAutoConfigurationIT": "org.springframework.ai.autoconfigure.vectorstore.redis.RedisVectorStoreAutoConfigurationIT",
            "org.springframework.ai.autoconfigure.vectorstore.redis.Confi": "org.springframework.ai.autoconfigure.vectorstore.redis.Confi",
            "org.springframework.ai.autoconfigure.vectorstore.redis.addAndSearch": "org.springframework.ai.autoconfigure.vectorstore.redis.addAndSearch",
            "org.springframework.ai.autoconfigure.vectorstore.redis.embeddingClient": "org.springframework.ai.autoconfigure.vectorstore.redis.embeddingClient",
            "org.springframework.ai.autoconfigure.vectorstore.redis.stati": "org.springframework.ai.autoconfigure.vectorstore.redis.stati",
            "org.springframework.ai.autoconfigure.vectorstore.redis.documents": "org.springframework.ai.autoconfigure.vectorstore.redis.documents",
            "org.springframework.ai.autoconfigure.vectorstore.redis.contextRunner": "org.springframework.ai.autoconfigure.vectorstore.redis.contextRunner"
        },
        "package": "package org.springframework.ai.autoconfigure.vectorstore.redis;",
        "property_declarations": [
            "List<Document> documents = List.of(\n\t\t\tnew Document(ResourceUtils.getText(\"classpath:/test/data/spring.ai.txt\"), Map.of(\"spring\", \"great\")),\n\t\t\tnew Document(ResourceUtils.getText(\"classpath:/test/data/time.shelter.txt\")), new Document(\n\t\t\t\t\tResourceUtils.getText(\"classpath:/test/data/great.depression.txt\"), Map.of(\"depression\", \"bad\")));",
            "private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t.withConfiguration(AutoConfigurations.of(RedisVectorStoreAutoConfiguration.class))\n\t\t.withUserConfiguration(Config.class)\n\t\t.withPropertyValues(\"spring.ai.vectorstore.redis.index=myIdx\")\n\t\t.withPropertyValues(\"spring.ai.vectorstore.redis.prefix=doc:\");",
            "@Container\n\tstatic RedisStackContainer redisContainer = new RedisStackContainer(\n\t\t\tRedisStackContainer.DEFAULT_IMAGE_NAME.withTag(RedisStackContainer.DEFAULT_TAG));"
        ],
        "functions": [
            {
                "name": "addAndSearch",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.withPropertyValues(\"spring.ai.vectorstore.redis.uri=\" + redisContainer.getRedisURI())\n\t\t\t.run(context -> {\n\t\t\t\tVectorStore vectorStore = context.getBean(VectorStore.class);\n\t\t\t\tvectorStore.add(documents);\n\n\t\t\t\tList<Document> results = vectorStore.similaritySearch(SearchRequest.query(\"Spring\").withTopK(1));\n\n\t\t\t\tassertThat(results).hasSize(1);\n\t\t\t\tDocument resultDoc = results.get(0);\n\t\t\t\tassertThat(resultDoc.getId()).isEqualTo(documents.get(0).getId());\n\t\t\t\tassertThat(resultDoc.getContent()).contains(\n\t\t\t\t\t\t\"Spring AI provides abstractions that serve as the foundation for developing AI applications.\");\n\n\t\t\t\t// Remove all documents from the store\n\t\t\t\tvectorStore.delete(documents.stream().map(doc -> doc.getId()).toList());\n\n\t\t\t\tresults = vectorStore.similaritySearch(SearchRequest.query(\"Spring\").withTopK(1));\n\t\t\t\tassertThat(results).isEmpty();\n\t\t\t});",
                "is_abstract": "",
                "class_name": "RedisVectorStoreAutoConfigurationIT",
                "annotations": [
                    "@Configuration(proxyBeanMethods = false)"
                ]
            },
            {
                "name": "embeddingClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new TransformersEmbeddingClient();",
                "is_abstract": "",
                "class_name": "RedisVectorStoreAutoConfigurationIT Config",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/redis/RedisVectorStorePropertiesTests.java",
        "class_names": [
            "RedisVectorStorePropertiesTests"
        ],
        "imports": "import org.junit.jupiter.api.Test;\nimport static org.assertj.core.api.Assertions.assertThat;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.vectorstore.redis.RedisVectorStorePropertiesTests": "org.springframework.ai.autoconfigure.vectorstore.redis.RedisVectorStorePropertiesTests",
            "org.springframework.ai.autoconfigure.vectorstore.redis.defaultValues": "org.springframework.ai.autoconfigure.vectorstore.redis.defaultValues",
            "org.springframework.ai.autoconfigure.vectorstore.redis.customValues": "org.springframework.ai.autoconfigure.vectorstore.redis.customValues"
        },
        "package": "package org.springframework.ai.autoconfigure.vectorstore.redis;",
        "property_declarations": [],
        "functions": [
            {
                "name": "defaultValues",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var props = new RedisVectorStoreProperties();\n\t\tassertThat(props.getUri()).isEqualTo(\"redis://localhost:6379\");\n\t\tassertThat(props.getIndex()).isEqualTo(\"default-index\");\n\t\tassertThat(props.getPrefix()).isEqualTo(\"default:\");",
                "is_abstract": "",
                "class_name": "RedisVectorStorePropertiesTests",
                "annotations": []
            },
            {
                "name": "customValues",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var props = new RedisVectorStoreProperties();\n\t\tprops.setUri(\"redis://redis.com:12345\");\n\t\tprops.setIndex(\"myIdx\");\n\t\tprops.setPrefix(\"doc:\");\n\n\t\tassertThat(props.getUri()).isEqualTo(\"redis://redis.com:12345\");\n\t\tassertThat(props.getIndex()).isEqualTo(\"myIdx\");\n\t\tassertThat(props.getPrefix()).isEqualTo(\"doc:\");",
                "is_abstract": "",
                "class_name": "RedisVectorStorePropertiesTests",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/azure/AzureVectorStoreAutoConfigurationIT.java",
        "class_names": [
            "Config",
            "AzureVectorStoreAutoConfigurationIT"
        ],
        "imports": "import java.util.List;\nimport org.springframework.ai.vectorstore.SearchRequest;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport java.io.IOException;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.junit.jupiter.api.BeforeAll;\nimport java.util.Map;\nimport org.awaitility.Awaitility;\nimport org.springframework.context.annotation.Configuration;\nimport java.nio.charset.StandardCharsets;\nimport java.time.Duration;\nimport static org.hamcrest.Matchers.hasSize;\nimport org.springframework.ai.transformers.TransformersEmbeddingClient;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.core.io.DefaultResourceLoader;\nimport org.springframework.ai.embedding.EmbeddingClient;\nimport java.util.concurrent.TimeUnit;\nimport org.springframework.ai.vectorstore.azure.AzureVectorStore;\nimport org.springframework.ai.document.Document;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.vectorstore.VectorStore;\nimport org.springframework.boot.autoconfigure.AutoConfigurations;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.vectorstore.azure.AzureVectorStoreAutoConfigurationIT": "org.springframework.ai.autoconfigure.vectorstore.azure.AzureVectorStoreAutoConfigurationIT",
            "org.springframework.ai.autoconfigure.vectorstore.azure.Confi": "org.springframework.ai.autoconfigure.vectorstore.azure.Confi",
            "org.springframework.ai.autoconfigure.vectorstore.azure.getText": "org.springframework.ai.autoconfigure.vectorstore.azure.getText",
            "org.springframework.ai.autoconfigure.vectorstore.azure.beforeAll": "org.springframework.ai.autoconfigure.vectorstore.azure.beforeAll",
            "org.springframework.ai.autoconfigure.vectorstore.azure.addAndSearchTest": "org.springframework.ai.autoconfigure.vectorstore.azure.addAndSearchTest",
            "org.springframework.ai.autoconfigure.vectorstore.azure.embeddingClient": "org.springframework.ai.autoconfigure.vectorstore.azure.embeddingClient",
            "org.springframework.ai.autoconfigure.vectorstore.azure.documents": "org.springframework.ai.autoconfigure.vectorstore.azure.documents",
            "org.springframework.ai.autoconfigure.vectorstore.azure.contextRunner": "org.springframework.ai.autoconfigure.vectorstore.azure.contextRunner"
        },
        "package": "package org.springframework.ai.autoconfigure.vectorstore.azure;",
        "property_declarations": [
            "List<Document> documents = List.of(\n\t\t\tnew Document(\"1\", getText(\"classpath:/test/data/spring.ai.txt\"), Map.of(\"spring\", \"great\")),\n\t\t\tnew Document(\"2\", getText(\"classpath:/test/data/time.shelter.txt\"), Map.of()),\n\t\t\tnew Document(\"3\", getText(\"classpath:/test/data/great.depression.txt\"), Map.of(\"depression\", \"bad\")));",
            "private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t.withConfiguration(AutoConfigurations.of(AzureVectorStoreAutoConfiguration.class))\n\t\t.withUserConfiguration(Config.class)\n\t\t.withPropertyValues(\"spring.ai.vectorstore.azure.apiKey=\" + System.getenv(\"AZURE_AI_SEARCH_API_KEY\"),\n\t\t\t\t\"spring.ai.vectorstore.azure.url=\" + System.getenv(\"AZURE_AI_SEARCH_ENDPOINT\"));"
        ],
        "functions": [
            {
                "name": "getText",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var resource = new DefaultResourceLoader().getResource(uri);\n\t\ttry {\n\t\t\treturn resource.getContentAsString(StandardCharsets.UTF_8);\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}",
                "is_abstract": "",
                "class_name": "AzureVectorStoreAutoConfigurationIT",
                "annotations": []
            },
            {
                "name": "beforeAll",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Awaitility.setDefaultPollInterval(2, TimeUnit.SECONDS);\n\t\tAwaitility.setDefaultPollDelay(Duration.ZERO);\n\t\tAwaitility.setDefaultTimeout(Duration.ofMinutes(1));",
                "is_abstract": "",
                "class_name": "AzureVectorStoreAutoConfigurationIT",
                "annotations": []
            },
            {
                "name": "addAndSearchTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner\n\t\t\t.withPropertyValues(\"spring.ai.vectorstore.azure.indexName=my_test_index\",\n\t\t\t\t\t\"spring.ai.vectorstore.azure.defaultTopK=6\",\n\t\t\t\t\t\"spring.ai.vectorstore.azure.defaultSimilarityThreshold=0.75\")\n\t\t\t.run(context -> {\n\n\t\t\t\tvar properties = context.getBean(AzureVectorStoreProperties.class);\n\n\t\t\t\tassertThat(properties.getUrl()).isEqualTo(System.getenv(\"AZURE_AI_SEARCH_ENDPOINT\"));\n\t\t\t\tassertThat(properties.getApiKey()).isEqualTo(System.getenv(\"AZURE_AI_SEARCH_API_KEY\"));\n\t\t\t\tassertThat(properties.getDefaultTopK()).isEqualTo(6);\n\t\t\t\tassertThat(properties.getDefaultSimilarityThreshold()).isEqualTo(0.75);\n\t\t\t\tassertThat(properties.getIndexName()).isEqualTo(\"my_test_index\");\n\n\t\t\t\tVectorStore vectorStore = context.getBean(VectorStore.class);\n\n\t\t\t\tassertThat(vectorStore).isInstanceOf(AzureVectorStore.class);\n\n\t\t\t\tvectorStore.add(documents);\n\n\t\t\t\tAwaitility.await().until(() -> {\n\t\t\t\t\treturn vectorStore.similaritySearch(SearchRequest.query(\"Spring\").withTopK(1));\n\t\t\t\t}, hasSize(1));\n\n\t\t\t\tList<Document> results = vectorStore.similaritySearch(SearchRequest.query(\"Spring\").withTopK(1));\n\n\t\t\t\tassertThat(results).hasSize(1);\n\t\t\t\tDocument resultDoc = results.get(0);\n\t\t\t\tassertThat(resultDoc.getId()).isEqualTo(documents.get(0).getId());\n\t\t\t\tassertThat(resultDoc.getContent()).contains(\n\t\t\t\t\t\t\"Spring AI provides abstractions that serve as the foundation for developing AI applications.\");\n\t\t\t\tassertThat(resultDoc.getMetadata()).hasSize(2);\n\t\t\t\tassertThat(resultDoc.getMetadata()).containsKeys(\"spring\", \"distance\");\n\n\t\t\t\t// Remove all documents from the store\n\t\t\t\tvectorStore.delete(documents.stream().map(doc -> doc.getId()).toList());\n\n\t\t\t\tAwaitility.await().until(() -> {\n\t\t\t\t\treturn vectorStore.similaritySearch(SearchRequest.query(\"Spring\").withTopK(1));\n\t\t\t\t}, hasSize(0));\n\t\t\t});",
                "is_abstract": "",
                "class_name": "AzureVectorStoreAutoConfigurationIT",
                "annotations": [
                    "@Configuration(proxyBeanMethods = false)"
                ]
            },
            {
                "name": "embeddingClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new TransformersEmbeddingClient();",
                "is_abstract": "",
                "class_name": "AzureVectorStoreAutoConfigurationIT Config",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/pgvector/PgVectorStorePropertiesTests.java",
        "class_names": [
            "PgVectorStorePropertiesTests"
        ],
        "imports": "import org.springframework.ai.vectorstore.PgVectorStore.PgIndexType;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.vectorstore.PgVectorStore;\nimport org.springframework.ai.vectorstore.PgVectorStore.PgDistanceType;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.vectorstore.pgvector.PgVectorStorePropertiesTests": "org.springframework.ai.autoconfigure.vectorstore.pgvector.PgVectorStorePropertiesTests",
            "org.springframework.ai.autoconfigure.vectorstore.pgvector.defaultValues": "org.springframework.ai.autoconfigure.vectorstore.pgvector.defaultValues",
            "org.springframework.ai.autoconfigure.vectorstore.pgvector.customValues": "org.springframework.ai.autoconfigure.vectorstore.pgvector.customValues"
        },
        "package": "package org.springframework.ai.autoconfigure.vectorstore.pgvector;",
        "property_declarations": [],
        "functions": [
            {
                "name": "defaultValues",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var props = new PgVectorStoreProperties();\n\t\tassertThat(props.getDimensions()).isEqualTo(PgVectorStore.INVALID_EMBEDDING_DIMENSION);\n\t\tassertThat(props.getDistanceType()).isEqualTo(PgDistanceType.COSINE_DISTANCE);\n\t\tassertThat(props.getIndexType()).isEqualTo(PgIndexType.HNSW);\n\t\tassertThat(props.isRemoveExistingVectorStoreTable()).isFalse();",
                "is_abstract": "",
                "class_name": "PgVectorStorePropertiesTests",
                "annotations": []
            },
            {
                "name": "customValues",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var props = new PgVectorStoreProperties();\n\n\t\tprops.setDimensions(1536);\n\t\tprops.setDistanceType(PgDistanceType.EUCLIDEAN_DISTANCE);\n\t\tprops.setIndexType(PgIndexType.IVFFLAT);\n\t\tprops.setRemoveExistingVectorStoreTable(true);\n\n\t\tassertThat(props.getDimensions()).isEqualTo(1536);\n\t\tassertThat(props.getDistanceType()).isEqualTo(PgDistanceType.EUCLIDEAN_DISTANCE);\n\t\tassertThat(props.getIndexType()).isEqualTo(PgIndexType.IVFFLAT);\n\t\tassertThat(props.isRemoveExistingVectorStoreTable()).isTrue();",
                "is_abstract": "",
                "class_name": "PgVectorStorePropertiesTests",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/pgvector/PgVectorStoreAutoConfigurationIT.java",
        "class_names": [
            "Config",
            "PgVectorStoreAutoConfigurationIT"
        ],
        "imports": "import java.util.List;\nimport org.springframework.ai.vectorstore.SearchRequest;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport org.testcontainers.containers.GenericContainer;\nimport java.io.IOException;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport java.util.Map;\nimport org.springframework.context.annotation.Configuration;\nimport java.nio.charset.StandardCharsets;\nimport org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration;\nimport org.springframework.ai.transformers.TransformersEmbeddingClient;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.core.io.DefaultResourceLoader;\nimport org.springframework.ai.embedding.EmbeddingClient;\nimport org.testcontainers.junit.jupiter.Testcontainers;\nimport org.springframework.ai.document.Document;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.vectorstore.VectorStore;\nimport org.testcontainers.junit.jupiter.Container;\nimport org.springframework.boot.autoconfigure.AutoConfigurations;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.vectorstore.pgvector.PgVectorStoreAutoConfigurationIT": "org.springframework.ai.autoconfigure.vectorstore.pgvector.PgVectorStoreAutoConfigurationIT",
            "org.springframework.ai.autoconfigure.vectorstore.pgvector.Confi": "org.springframework.ai.autoconfigure.vectorstore.pgvector.Confi",
            "org.springframework.ai.autoconfigure.vectorstore.pgvector.getText": "org.springframework.ai.autoconfigure.vectorstore.pgvector.getText",
            "org.springframework.ai.autoconfigure.vectorstore.pgvector.addAndSearch": "org.springframework.ai.autoconfigure.vectorstore.pgvector.addAndSearch",
            "org.springframework.ai.autoconfigure.vectorstore.pgvector.embeddingClient": "org.springframework.ai.autoconfigure.vectorstore.pgvector.embeddingClient",
            "org.springframework.ai.autoconfigure.vectorstore.pgvector.stati": "org.springframework.ai.autoconfigure.vectorstore.pgvector.stati",
            "org.springframework.ai.autoconfigure.vectorstore.pgvector.documents": "org.springframework.ai.autoconfigure.vectorstore.pgvector.documents",
            "org.springframework.ai.autoconfigure.vectorstore.pgvector.contextRunner": "org.springframework.ai.autoconfigure.vectorstore.pgvector.contextRunner"
        },
        "package": "package org.springframework.ai.autoconfigure.vectorstore.pgvector;",
        "property_declarations": [
            "@Container\n\tstatic GenericContainer<?> postgresContainer = new GenericContainer<>(\"ankane/pgvector:v0.5.1\")\n\t\t.withEnv(\"POSTGRES_USER\", \"postgres\")\n\t\t.withEnv(\"POSTGRES_PASSWORD\", \"postgres\")\n\t\t.withExposedPorts(5432);",
            "private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t.withConfiguration(AutoConfigurations.of(PgVectorStoreAutoConfiguration.class,\n\t\t\t\tJdbcTemplateAutoConfiguration.class, DataSourceAutoConfiguration.class))\n\t\t.withUserConfiguration(Config.class)\n\t\t.withPropertyValues(\"spring.ai.vectorstore.pgvector.distanceType=COSINE_DISTANCE\",\n\t\t\t\t// JdbcTemplate configuration\n\t\t\t\tString.format(\"spring.datasource.url=jdbc:postgresql://%s:%d/%s\", postgresContainer.getHost(),\n\t\t\t\t\t\tpostgresContainer.getMappedPort(5432), \"postgres\"),\n\t\t\t\t\"spring.datasource.username=postgres\", \"spring.datasource.password=postgres\");",
            "List<Document> documents = List.of(\n\t\t\tnew Document(getText(\"classpath:/test/data/spring.ai.txt\"), Map.of(\"spring\", \"great\")),\n\t\t\tnew Document(getText(\"classpath:/test/data/time.shelter.txt\")),\n\t\t\tnew Document(getText(\"classpath:/test/data/great.depression.txt\"), Map.of(\"depression\", \"bad\")));"
        ],
        "functions": [
            {
                "name": "getText",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var resource = new DefaultResourceLoader().getResource(uri);\n\t\ttry {\n\t\t\treturn resource.getContentAsString(StandardCharsets.UTF_8);\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}",
                "is_abstract": "",
                "class_name": "PgVectorStoreAutoConfigurationIT",
                "annotations": []
            },
            {
                "name": "addAndSearch",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\n\t\t\tVectorStore vectorStore = context.getBean(VectorStore.class);\n\n\t\t\tvectorStore.add(documents);\n\n\t\t\tList<Document> results = vectorStore\n\t\t\t\t.similaritySearch(SearchRequest.query(\"What is Great Depression?\").withTopK(1));\n\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tDocument resultDoc = results.get(0);\n\t\t\tassertThat(resultDoc.getId()).isEqualTo(documents.get(2).getId());\n\t\t\tassertThat(resultDoc.getMetadata()).containsKeys(\"depression\", \"distance\");\n\n\t\t\t// Remove all documents from the store\n\t\t\tvectorStore.delete(documents.stream().map(doc -> doc.getId()).toList());\n\t\t\tresults = vectorStore.similaritySearch(SearchRequest.query(\"Great Depression\").withTopK(1));\n\t\t\tassertThat(results).hasSize(0);\n\t\t});",
                "is_abstract": "",
                "class_name": "PgVectorStoreAutoConfigurationIT",
                "annotations": [
                    "@Configuration(proxyBeanMethods = false)"
                ]
            },
            {
                "name": "embeddingClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new TransformersEmbeddingClient();",
                "is_abstract": "",
                "class_name": "PgVectorStoreAutoConfigurationIT Config",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/pinecone/PineconeVectorStoreAutoConfigurationIT.java",
        "class_names": [
            "Config",
            "PineconeVectorStoreAutoConfigurationIT"
        ],
        "imports": "import java.util.List;\nimport org.springframework.ai.vectorstore.SearchRequest;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport java.io.IOException;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.junit.jupiter.api.BeforeAll;\nimport java.util.Map;\nimport org.awaitility.Awaitility;\nimport org.springframework.context.annotation.Configuration;\nimport java.nio.charset.StandardCharsets;\nimport java.time.Duration;\nimport static org.hamcrest.Matchers.hasSize;\nimport org.springframework.ai.transformers.TransformersEmbeddingClient;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.core.io.DefaultResourceLoader;\nimport org.springframework.ai.embedding.EmbeddingClient;\nimport java.util.concurrent.TimeUnit;\nimport org.springframework.ai.document.Document;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.vectorstore.VectorStore;\nimport org.springframework.boot.autoconfigure.AutoConfigurations;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.vectorstore.pinecone.PineconeVectorStoreAutoConfigurationIT": "org.springframework.ai.autoconfigure.vectorstore.pinecone.PineconeVectorStoreAutoConfigurationIT",
            "org.springframework.ai.autoconfigure.vectorstore.pinecone.Confi": "org.springframework.ai.autoconfigure.vectorstore.pinecone.Confi",
            "org.springframework.ai.autoconfigure.vectorstore.pinecone.getText": "org.springframework.ai.autoconfigure.vectorstore.pinecone.getText",
            "org.springframework.ai.autoconfigure.vectorstore.pinecone.beforeAll": "org.springframework.ai.autoconfigure.vectorstore.pinecone.beforeAll",
            "org.springframework.ai.autoconfigure.vectorstore.pinecone.addAndSearchTest": "org.springframework.ai.autoconfigure.vectorstore.pinecone.addAndSearchTest",
            "org.springframework.ai.autoconfigure.vectorstore.pinecone.embeddingClient": "org.springframework.ai.autoconfigure.vectorstore.pinecone.embeddingClient",
            "org.springframework.ai.autoconfigure.vectorstore.pinecone.documents": "org.springframework.ai.autoconfigure.vectorstore.pinecone.documents",
            "org.springframework.ai.autoconfigure.vectorstore.pinecone.contextRunner": "org.springframework.ai.autoconfigure.vectorstore.pinecone.contextRunner"
        },
        "package": "package org.springframework.ai.autoconfigure.vectorstore.pinecone;",
        "property_declarations": [
            "List<Document> documents = List.of(\n\t\t\tnew Document(\"1\", getText(\"classpath:/test/data/spring.ai.txt\"), Map.of(\"spring\", \"great\")),\n\t\t\tnew Document(\"2\", getText(\"classpath:/test/data/time.shelter.txt\"), Map.of()),\n\t\t\tnew Document(\"3\", getText(\"classpath:/test/data/great.depression.txt\"), Map.of(\"depression\", \"bad\")));",
            "private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t.withConfiguration(AutoConfigurations.of(PineconeVectorStoreAutoConfiguration.class))\n\t\t.withUserConfiguration(Config.class)\n\t\t.withPropertyValues(\"spring.ai.vectorstore.pinecone.apiKey=\" + System.getenv(\"PINECONE_API_KEY\"),\n\t\t\t\t\"spring.ai.vectorstore.pinecone.environment=gcp-starter\",\n\t\t\t\t\"spring.ai.vectorstore.pinecone.projectId=814621f\",\n\t\t\t\t\"spring.ai.vectorstore.pinecone.indexName=spring-ai-test-index\");"
        ],
        "functions": [
            {
                "name": "getText",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var resource = new DefaultResourceLoader().getResource(uri);\n\t\ttry {\n\t\t\treturn resource.getContentAsString(StandardCharsets.UTF_8);\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}",
                "is_abstract": "",
                "class_name": "PineconeVectorStoreAutoConfigurationIT",
                "annotations": []
            },
            {
                "name": "beforeAll",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Awaitility.setDefaultPollInterval(2, TimeUnit.SECONDS);\n\t\tAwaitility.setDefaultPollDelay(Duration.ZERO);\n\t\tAwaitility.setDefaultTimeout(Duration.ofMinutes(1));",
                "is_abstract": "",
                "class_name": "PineconeVectorStoreAutoConfigurationIT",
                "annotations": []
            },
            {
                "name": "addAndSearchTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\n\t\t\tVectorStore vectorStore = context.getBean(VectorStore.class);\n\n\t\t\tvectorStore.add(documents);\n\n\t\t\tAwaitility.await().until(() -> {\n\t\t\t\treturn vectorStore.similaritySearch(SearchRequest.query(\"Spring\").withTopK(1));\n\t\t\t}, hasSize(1));\n\n\t\t\tList<Document> results = vectorStore.similaritySearch(SearchRequest.query(\"Spring\").withTopK(1));\n\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tDocument resultDoc = results.get(0);\n\t\t\tassertThat(resultDoc.getId()).isEqualTo(documents.get(0).getId());\n\t\t\tassertThat(resultDoc.getContent()).contains(\n\t\t\t\t\t\"Spring AI provides abstractions that serve as the foundation for developing AI applications.\");\n\t\t\tassertThat(resultDoc.getMetadata()).hasSize(2);\n\t\t\tassertThat(resultDoc.getMetadata()).containsKeys(\"spring\", \"distance\");\n\n\t\t\t// Remove all documents from the store\n\t\t\tvectorStore.delete(documents.stream().map(doc -> doc.getId()).toList());\n\n\t\t\tAwaitility.await().until(() -> {\n\t\t\t\treturn vectorStore.similaritySearch(SearchRequest.query(\"Spring\").withTopK(1));\n\t\t\t}, hasSize(0));\n\t\t});",
                "is_abstract": "",
                "class_name": "PineconeVectorStoreAutoConfigurationIT",
                "annotations": [
                    "@Configuration(proxyBeanMethods = false)"
                ]
            },
            {
                "name": "embeddingClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new TransformersEmbeddingClient();",
                "is_abstract": "",
                "class_name": "PineconeVectorStoreAutoConfigurationIT Config",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/pinecone/PineconeVectorStorePropertiesTests.java",
        "class_names": [
            "PineconeVectorStorePropertiesTests"
        ],
        "imports": "import org.junit.jupiter.api.Test;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport java.time.Duration;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.vectorstore.pinecone.PineconeVectorStorePropertiesTests": "org.springframework.ai.autoconfigure.vectorstore.pinecone.PineconeVectorStorePropertiesTests",
            "org.springframework.ai.autoconfigure.vectorstore.pinecone.defaultValues": "org.springframework.ai.autoconfigure.vectorstore.pinecone.defaultValues",
            "org.springframework.ai.autoconfigure.vectorstore.pinecone.customValues": "org.springframework.ai.autoconfigure.vectorstore.pinecone.customValues"
        },
        "package": "package org.springframework.ai.autoconfigure.vectorstore.pinecone;",
        "property_declarations": [],
        "functions": [
            {
                "name": "defaultValues",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var props = new PineconeVectorStoreProperties();\n\t\tassertThat(props.getEnvironment()).isEqualTo(\"gcp-starter\");\n\t\tassertThat(props.getNamespace()).isEqualTo(\"\");\n\t\tassertThat(props.getApiKey()).isNull();\n\t\tassertThat(props.getProjectId()).isNull();\n\t\tassertThat(props.getIndexName()).isNull();\n\t\tassertThat(props.getServerSideTimeout()).isEqualTo(Duration.ofSeconds(20));",
                "is_abstract": "",
                "class_name": "PineconeVectorStorePropertiesTests",
                "annotations": []
            },
            {
                "name": "customValues",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var props = new PineconeVectorStoreProperties();\n\t\tprops.setApiKey(\"key\");\n\t\tprops.setEnvironment(\"env\");\n\t\tprops.setIndexName(\"index\");\n\t\tprops.setNamespace(\"namespace\");\n\t\tprops.setProjectId(\"project\");\n\t\tprops.setServerSideTimeout(Duration.ofSeconds(60));\n\n\t\tassertThat(props.getEnvironment()).isEqualTo(\"env\");\n\t\tassertThat(props.getNamespace()).isEqualTo(\"namespace\");\n\t\tassertThat(props.getApiKey()).isEqualTo(\"key\");\n\t\tassertThat(props.getProjectId()).isEqualTo(\"project\");\n\t\tassertThat(props.getIndexName()).isEqualTo(\"index\");\n\t\tassertThat(props.getServerSideTimeout()).isEqualTo(Duration.ofSeconds(60));",
                "is_abstract": "",
                "class_name": "PineconeVectorStorePropertiesTests",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/cassandra/CassandraVectorStoreAutoConfigurationIT.java",
        "class_names": [
            "Config",
            "CassandraVectorStoreAutoConfigurationIT"
        ],
        "imports": "import java.util.List;\nimport org.springframework.ai.vectorstore.SearchRequest;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.testcontainers.containers.CassandraContainer;\nimport java.util.Map;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.ai.transformers.TransformersEmbeddingClient;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.ai.embedding.EmbeddingClient;\nimport org.testcontainers.junit.jupiter.Testcontainers;\nimport org.testcontainers.utility.DockerImageName;\nimport org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration;\nimport org.springframework.ai.document.Document;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.vectorstore.VectorStore;\nimport org.testcontainers.junit.jupiter.Container;\nimport org.springframework.boot.autoconfigure.AutoConfigurations;\nimport org.springframework.ai.ResourceUtils;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.vectorstore.cassandra.CassandraVectorStoreAutoConfigurationIT": "org.springframework.ai.autoconfigure.vectorstore.cassandra.CassandraVectorStoreAutoConfigurationIT",
            "org.springframework.ai.autoconfigure.vectorstore.cassandra.Confi": "org.springframework.ai.autoconfigure.vectorstore.cassandra.Confi",
            "org.springframework.ai.autoconfigure.vectorstore.cassandra.addAndSearch": "org.springframework.ai.autoconfigure.vectorstore.cassandra.addAndSearch",
            "org.springframework.ai.autoconfigure.vectorstore.cassandra.embeddingClient": "org.springframework.ai.autoconfigure.vectorstore.cassandra.embeddingClient",
            "org.springframework.ai.autoconfigure.vectorstore.cassandra.getContactPointHost": "org.springframework.ai.autoconfigure.vectorstore.cassandra.getContactPointHost",
            "org.springframework.ai.autoconfigure.vectorstore.cassandra.getContactPointPort": "org.springframework.ai.autoconfigure.vectorstore.cassandra.getContactPointPort",
            "org.springframework.ai.autoconfigure.vectorstore.cassandra.DEFAULT_IMAGE_NAME": "org.springframework.ai.autoconfigure.vectorstore.cassandra.DEFAULT_IMAGE_NAME",
            "org.springframework.ai.autoconfigure.vectorstore.cassandra.stati": "org.springframework.ai.autoconfigure.vectorstore.cassandra.stati",
            "org.springframework.ai.autoconfigure.vectorstore.cassandra.documents": "org.springframework.ai.autoconfigure.vectorstore.cassandra.documents",
            "org.springframework.ai.autoconfigure.vectorstore.cassandra.contextRunner": "org.springframework.ai.autoconfigure.vectorstore.cassandra.contextRunner"
        },
        "package": "package org.springframework.ai.autoconfigure.vectorstore.cassandra;",
        "property_declarations": [
            "static final DockerImageName DEFAULT_IMAGE_NAME = DockerImageName.parse(\"cassandra\");",
            "List<Document> documents = List.of(\n\t\t\tnew Document(ResourceUtils.getText(\"classpath:/test/data/spring.ai.txt\"), Map.of(\"spring\", \"great\")),\n\t\t\tnew Document(ResourceUtils.getText(\"classpath:/test/data/time.shelter.txt\")), new Document(\n\t\t\t\t\tResourceUtils.getText(\"classpath:/test/data/great.depression.txt\"), Map.of(\"depression\", \"bad\")));",
            "private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t.withConfiguration(\n\t\t\t\tAutoConfigurations.of(CassandraVectorStoreAutoConfiguration.class, CassandraAutoConfiguration.class))\n\t\t.withUserConfiguration(Config.class)\n\t\t.withPropertyValues(\"spring.ai.vectorstore.cassandra.keyspace=test_autoconfigure\")\n\t\t.withPropertyValues(\"spring.ai.vectorstore.cassandra.contentColumnName=doc_chunk\");",
            "@Container\n\tstatic CassandraContainer cassandraContainer = new CassandraContainer(DEFAULT_IMAGE_NAME.withTag(\"5.0\"));"
        ],
        "functions": [
            {
                "name": "addAndSearch",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.withPropertyValues(\"spring.cassandra.contactPoints=\" + getContactPointHost())\n\t\t\t.withPropertyValues(\"spring.cassandra.port=\" + getContactPointPort())\n\t\t\t.withPropertyValues(\"spring.cassandra.localDatacenter=\" + cassandraContainer.getLocalDatacenter())\n\t\t\t.withPropertyValues(\"spring.ai.vectorstore.cassandra.fixedThreadPoolExecutorSize=8\")\n\n\t\t\t.run(context -> {\n\t\t\t\tVectorStore vectorStore = context.getBean(VectorStore.class);\n\t\t\t\tvectorStore.add(documents);\n\n\t\t\t\tList<Document> results = vectorStore.similaritySearch(SearchRequest.query(\"Spring\").withTopK(1));\n\n\t\t\t\tassertThat(results).hasSize(1);\n\t\t\t\tDocument resultDoc = results.get(0);\n\t\t\t\tassertThat(resultDoc.getId()).isEqualTo(documents.get(0).getId());\n\t\t\t\tassertThat(resultDoc.getContent()).contains(\n\t\t\t\t\t\t\"Spring AI provides abstractions that serve as the foundation for developing AI applications.\");\n\n\t\t\t\t// Remove all documents from the store\n\t\t\t\tvectorStore.delete(documents.stream().map(doc -> doc.getId()).toList());\n\n\t\t\t\tresults = vectorStore.similaritySearch(SearchRequest.query(\"Spring\").withTopK(1));\n\t\t\t\tassertThat(results).isEmpty();\n\t\t\t});",
                "is_abstract": "",
                "class_name": "CassandraVectorStoreAutoConfigurationIT",
                "annotations": [
                    "@Configuration(proxyBeanMethods = false)"
                ]
            },
            {
                "name": "embeddingClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new TransformersEmbeddingClient();",
                "is_abstract": "",
                "class_name": "CassandraVectorStoreAutoConfigurationIT Config",
                "annotations": []
            },
            {
                "name": "getContactPointHost",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return cassandraContainer.getContactPoint().getHostString();",
                "is_abstract": "",
                "class_name": "CassandraVectorStoreAutoConfigurationIT Config",
                "annotations": []
            },
            {
                "name": "getContactPointPort",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return String.valueOf(cassandraContainer.getContactPoint().getPort());",
                "is_abstract": "",
                "class_name": "CassandraVectorStoreAutoConfigurationIT Config",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/cassandra/CassandraVectorStorePropertiesTests.java",
        "class_names": [
            "CassandraVectorStorePropertiesTests"
        ],
        "imports": "import org.junit.jupiter.api.Test;\nimport org.springframework.ai.vectorstore.CassandraVectorStoreConfig;\nimport static org.assertj.core.api.Assertions.assertThat;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.vectorstore.cassandra.CassandraVectorStorePropertiesTests": "org.springframework.ai.autoconfigure.vectorstore.cassandra.CassandraVectorStorePropertiesTests",
            "org.springframework.ai.autoconfigure.vectorstore.cassandra.defaultValues": "org.springframework.ai.autoconfigure.vectorstore.cassandra.defaultValues",
            "org.springframework.ai.autoconfigure.vectorstore.cassandra.customValues": "org.springframework.ai.autoconfigure.vectorstore.cassandra.customValues"
        },
        "package": "package org.springframework.ai.autoconfigure.vectorstore.cassandra;",
        "property_declarations": [],
        "functions": [
            {
                "name": "defaultValues",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var props = new CassandraVectorStoreProperties();\n\t\tassertThat(props.getKeyspace()).isEqualTo(CassandraVectorStoreConfig.DEFAULT_KEYSPACE_NAME);\n\t\tassertThat(props.getTable()).isEqualTo(CassandraVectorStoreConfig.DEFAULT_TABLE_NAME);\n\t\tassertThat(props.getContentColumnName()).isEqualTo(CassandraVectorStoreConfig.DEFAULT_CONTENT_COLUMN_NAME);\n\t\tassertThat(props.getEmbeddingColumnName()).isEqualTo(CassandraVectorStoreConfig.DEFAULT_EMBEDDING_COLUMN_NAME);\n\t\tassertThat(props.getIndexName()).isEqualTo(CassandraVectorStoreConfig.DEFAULT_INDEX_NAME);\n\t\tassertThat(props.getDisallowSchemaCreation()).isFalse();\n\t\tassertThat(props.getFixedThreadPoolExecutorSize())\n\t\t\t.isEqualTo(CassandraVectorStoreConfig.DEFAULT_ADD_CONCURRENCY);",
                "is_abstract": "",
                "class_name": "CassandraVectorStorePropertiesTests",
                "annotations": []
            },
            {
                "name": "customValues",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var props = new CassandraVectorStoreProperties();\n\t\tprops.setKeyspace(\"my_keyspace\");\n\t\tprops.setTable(\"my_table\");\n\t\tprops.setContentColumnName(\"my_content\");\n\t\tprops.setEmbeddingColumnName(\"my_vector\");\n\t\tprops.setIndexName(\"my_sai\");\n\t\tprops.setDisallowSchemaCreation(true);\n\t\tprops.setFixedThreadPoolExecutorSize(10);\n\n\t\tassertThat(props.getKeyspace()).isEqualTo(\"my_keyspace\");\n\t\tassertThat(props.getTable()).isEqualTo(\"my_table\");\n\t\tassertThat(props.getContentColumnName()).isEqualTo(\"my_content\");\n\t\tassertThat(props.getEmbeddingColumnName()).isEqualTo(\"my_vector\");\n\t\tassertThat(props.getIndexName()).isEqualTo(\"my_sai\");\n\t\tassertThat(props.getDisallowSchemaCreation()).isTrue();\n\t\tassertThat(props.getFixedThreadPoolExecutorSize()).isEqualTo(10);",
                "is_abstract": "",
                "class_name": "CassandraVectorStorePropertiesTests",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/qdrant/QdrantVectorStoreAutoConfigurationIT.java",
        "class_names": [
            "Config",
            "QdrantVectorStoreAutoConfigurationIT"
        ],
        "imports": "import org.testcontainers.qdrant.QdrantContainer;\nimport java.util.List;\nimport org.springframework.ai.vectorstore.SearchRequest;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport java.io.IOException;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport java.util.Map;\nimport org.springframework.context.annotation.Configuration;\nimport java.nio.charset.StandardCharsets;\nimport org.springframework.ai.transformers.TransformersEmbeddingClient;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.core.io.DefaultResourceLoader;\nimport org.springframework.ai.embedding.EmbeddingClient;\nimport org.testcontainers.junit.jupiter.Testcontainers;\nimport org.springframework.ai.document.Document;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.vectorstore.VectorStore;\nimport org.testcontainers.junit.jupiter.Container;\nimport org.springframework.boot.autoconfigure.AutoConfigurations;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.vectorstore.qdrant.QdrantVectorStoreAutoConfigurationIT": "org.springframework.ai.autoconfigure.vectorstore.qdrant.QdrantVectorStoreAutoConfigurationIT",
            "org.springframework.ai.autoconfigure.vectorstore.qdrant.Confi": "org.springframework.ai.autoconfigure.vectorstore.qdrant.Confi",
            "org.springframework.ai.autoconfigure.vectorstore.qdrant.addAndSearch": "org.springframework.ai.autoconfigure.vectorstore.qdrant.addAndSearch",
            "org.springframework.ai.autoconfigure.vectorstore.qdrant.getText": "org.springframework.ai.autoconfigure.vectorstore.qdrant.getText",
            "org.springframework.ai.autoconfigure.vectorstore.qdrant.embeddingClient": "org.springframework.ai.autoconfigure.vectorstore.qdrant.embeddingClient",
            "org.springframework.ai.autoconfigure.vectorstore.qdrant.COLLECTION_NAME": "org.springframework.ai.autoconfigure.vectorstore.qdrant.COLLECTION_NAME",
            "org.springframework.ai.autoconfigure.vectorstore.qdrant.QDRANT_GRPC_PORT": "org.springframework.ai.autoconfigure.vectorstore.qdrant.QDRANT_GRPC_PORT",
            "org.springframework.ai.autoconfigure.vectorstore.qdrant.stati": "org.springframework.ai.autoconfigure.vectorstore.qdrant.stati",
            "org.springframework.ai.autoconfigure.vectorstore.qdrant.documents": "org.springframework.ai.autoconfigure.vectorstore.qdrant.documents",
            "org.springframework.ai.autoconfigure.vectorstore.qdrant.contextRunner": "org.springframework.ai.autoconfigure.vectorstore.qdrant.contextRunner"
        },
        "package": "package org.springframework.ai.autoconfigure.vectorstore.qdrant;",
        "property_declarations": [
            "private static final String COLLECTION_NAME = \"test_collection\";",
            "private static final int QDRANT_GRPC_PORT = 6334;",
            "List<Document> documents = List.of(\n\t\t\tnew Document(getText(\"classpath:/test/data/spring.ai.txt\"), Map.of(\"spring\", \"great\")),\n\t\t\tnew Document(getText(\"classpath:/test/data/time.shelter.txt\")),\n\t\t\tnew Document(getText(\"classpath:/test/data/great.depression.txt\"), Map.of(\"depression\", \"bad\")));",
            "@Container\n\tstatic QdrantContainer qdrantContainer = new QdrantContainer(\"qdrant/qdrant:v1.7.4\");",
            "private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t.withConfiguration(AutoConfigurations.of(QdrantVectorStoreAutoConfiguration.class))\n\t\t.withUserConfiguration(Config.class)\n\t\t.withPropertyValues(\"spring.ai.vectorstore.qdrant.port=\" + qdrantContainer.getMappedPort(QDRANT_GRPC_PORT),\n\t\t\t\t\"spring.ai.vectorstore.qdrant.host=\" + qdrantContainer.getHost(),\n\t\t\t\t\"spring.ai.vectorstore.qdrant.collectionName=\" + COLLECTION_NAME);"
        ],
        "functions": [
            {
                "name": "addAndSearch",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\n\t\t\tVectorStore vectorStore = context.getBean(VectorStore.class);\n\n\t\t\tvectorStore.add(documents);\n\n\t\t\tList<Document> results = vectorStore\n\t\t\t\t.similaritySearch(SearchRequest.query(\"What is Great Depression?\").withTopK(1));\n\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tDocument resultDoc = results.get(0);\n\t\t\tassertThat(resultDoc.getId()).isEqualTo(documents.get(2).getId());\n\t\t\tassertThat(resultDoc.getMetadata()).containsKeys(\"depression\", \"distance\");\n\n\t\t\t// Remove all documents from the store\n\t\t\tvectorStore.delete(documents.stream().map(doc -> doc.getId()).toList());\n\t\t\tresults = vectorStore.similaritySearch(SearchRequest.query(\"Great Depression\").withTopK(1));\n\t\t\tassertThat(results).hasSize(0);\n\t\t});",
                "is_abstract": "",
                "class_name": "QdrantVectorStoreAutoConfigurationIT",
                "annotations": []
            },
            {
                "name": "getText",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var resource = new DefaultResourceLoader().getResource(uri);\n\t\ttry {\n\t\t\treturn resource.getContentAsString(StandardCharsets.UTF_8);\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}",
                "is_abstract": "",
                "class_name": "QdrantVectorStoreAutoConfigurationIT",
                "annotations": [
                    "@Configuration(proxyBeanMethods = false)"
                ]
            },
            {
                "name": "embeddingClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new TransformersEmbeddingClient();",
                "is_abstract": "",
                "class_name": "QdrantVectorStoreAutoConfigurationIT Config",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/qdrant/QdrantVectorStorePropertiesTests.java",
        "class_names": [
            "QdrantVectorStorePropertiesTests"
        ],
        "imports": "import org.junit.jupiter.api.Test;\nimport static org.assertj.core.api.Assertions.assertThat;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.vectorstore.qdrant.QdrantVectorStorePropertiesTests": "org.springframework.ai.autoconfigure.vectorstore.qdrant.QdrantVectorStorePropertiesTests",
            "org.springframework.ai.autoconfigure.vectorstore.qdrant.defaultValues": "org.springframework.ai.autoconfigure.vectorstore.qdrant.defaultValues",
            "org.springframework.ai.autoconfigure.vectorstore.qdrant.customValues": "org.springframework.ai.autoconfigure.vectorstore.qdrant.customValues"
        },
        "package": "package org.springframework.ai.autoconfigure.vectorstore.qdrant;",
        "property_declarations": [],
        "functions": [
            {
                "name": "defaultValues",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var props = new QdrantVectorStoreProperties();\n\n\t\tassertThat(props.getCollectionName()).isNull();\n\t\tassertThat(props.getHost()).isEqualTo(\"localhost\");\n\t\tassertThat(props.getPort()).isEqualTo(6334);\n\t\tassertThat(props.isUseTls()).isFalse();\n\t\tassertThat(props.getApiKey()).isNull();",
                "is_abstract": "",
                "class_name": "QdrantVectorStorePropertiesTests",
                "annotations": []
            },
            {
                "name": "customValues",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var props = new QdrantVectorStoreProperties();\n\n\t\tprops.setCollectionName(\"MY_COLLECTION\");\n\t\tprops.setHost(\"MY_HOST\");\n\t\tprops.setPort(999);\n\t\tprops.setUseTls(true);\n\t\tprops.setApiKey(\"MY_API_KEY\");\n\n\t\tassertThat(props.getCollectionName()).isEqualTo(\"MY_COLLECTION\");\n\t\tassertThat(props.getHost()).isEqualTo(\"MY_HOST\");\n\t\tassertThat(props.getPort()).isEqualTo(999);\n\t\tassertThat(props.isUseTls()).isTrue();\n\t\tassertThat(props.getApiKey()).isEqualTo(\"MY_API_KEY\");",
                "is_abstract": "",
                "class_name": "QdrantVectorStorePropertiesTests",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/qdrant/QdrantVectorStoreCloudAutoConfigurationIT.java",
        "class_names": [
            "QdrantVectorStoreCloudAutoConfigurationIT",
            "Config"
        ],
        "imports": "import java.util.List;\nimport org.springframework.ai.vectorstore.SearchRequest;\nimport io.qdrant.client.QdrantGrpcClient;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport java.io.IOException;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.junit.jupiter.api.BeforeAll;\nimport java.util.Map;\nimport io.qdrant.client.grpc.Collections.VectorParams;\nimport org.springframework.context.annotation.Configuration;\nimport java.nio.charset.StandardCharsets;\nimport org.springframework.ai.transformers.TransformersEmbeddingClient;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.core.io.DefaultResourceLoader;\nimport org.springframework.ai.embedding.EmbeddingClient;\nimport io.qdrant.client.QdrantClient;\nimport java.util.concurrent.ExecutionException;\nimport org.springframework.ai.document.Document;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.vectorstore.VectorStore;\nimport org.springframework.boot.autoconfigure.AutoConfigurations;\nimport io.qdrant.client.grpc.Collections.Distance;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.vectorstore.qdrant.QdrantVectorStoreCloudAutoConfigurationIT": "org.springframework.ai.autoconfigure.vectorstore.qdrant.QdrantVectorStoreCloudAutoConfigurationIT",
            "org.springframework.ai.autoconfigure.vectorstore.qdrant.Confi": "org.springframework.ai.autoconfigure.vectorstore.qdrant.Confi",
            "org.springframework.ai.autoconfigure.vectorstore.qdrant.setu": "org.springframework.ai.autoconfigure.vectorstore.qdrant.setu",
            "org.springframework.ai.autoconfigure.vectorstore.qdrant.addAndSearch": "org.springframework.ai.autoconfigure.vectorstore.qdrant.addAndSearch",
            "org.springframework.ai.autoconfigure.vectorstore.qdrant.getText": "org.springframework.ai.autoconfigure.vectorstore.qdrant.getText",
            "org.springframework.ai.autoconfigure.vectorstore.qdrant.embeddingClient": "org.springframework.ai.autoconfigure.vectorstore.qdrant.embeddingClient",
            "org.springframework.ai.autoconfigure.vectorstore.qdrant.COLLECTION_NAME": "org.springframework.ai.autoconfigure.vectorstore.qdrant.COLLECTION_NAME",
            "org.springframework.ai.autoconfigure.vectorstore.qdrant.EMBEDDING_DIMENSION": "org.springframework.ai.autoconfigure.vectorstore.qdrant.EMBEDDING_DIMENSION",
            "org.springframework.ai.autoconfigure.vectorstore.qdrant.CLOUD_API_KEY": "org.springframework.ai.autoconfigure.vectorstore.qdrant.CLOUD_API_KEY",
            "org.springframework.ai.autoconfigure.vectorstore.qdrant.CLOUD_HOST": "org.springframework.ai.autoconfigure.vectorstore.qdrant.CLOUD_HOST",
            "org.springframework.ai.autoconfigure.vectorstore.qdrant.CLOUD_GRPC_PORT": "org.springframework.ai.autoconfigure.vectorstore.qdrant.CLOUD_GRPC_PORT",
            "org.springframework.ai.autoconfigure.vectorstore.qdrant.documents": "org.springframework.ai.autoconfigure.vectorstore.qdrant.documents",
            "org.springframework.ai.autoconfigure.vectorstore.qdrant.contextRunner": "org.springframework.ai.autoconfigure.vectorstore.qdrant.contextRunner"
        },
        "package": "package org.springframework.ai.autoconfigure.vectorstore.qdrant;",
        "property_declarations": [
            "private static final String CLOUD_HOST = System.getenv(\"QDRANT_HOST\");",
            "private static final String COLLECTION_NAME = \"test_collection\";",
            "private static final int CLOUD_GRPC_PORT = 6334;",
            "private static final int EMBEDDING_DIMENSION = 384;",
            "List<Document> documents = List.of(\n\t\t\tnew Document(getText(\"classpath:/test/data/spring.ai.txt\"), Map.of(\"spring\", \"great\")),\n\t\t\tnew Document(getText(\"classpath:/test/data/time.shelter.txt\")),\n\t\t\tnew Document(getText(\"classpath:/test/data/great.depression.txt\"), Map.of(\"depression\", \"bad\")));",
            "private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t.withConfiguration(AutoConfigurations.of(QdrantVectorStoreAutoConfiguration.class))\n\t\t.withUserConfiguration(Config.class)\n\t\t.withPropertyValues(\"spring.ai.vectorstore.qdrant.port=\" + CLOUD_GRPC_PORT,\n\t\t\t\t\"spring.ai.vectorstore.qdrant.host=\" + CLOUD_HOST,\n\t\t\t\t\"spring.ai.vectorstore.qdrant.api-key=\" + CLOUD_API_KEY,\n\t\t\t\t\"spring.ai.vectorstore.qdrant.collection-name=\" + COLLECTION_NAME,\n\t\t\t\t\"spring.ai.vectorstore.qdrant.use-tls=true\");",
            "private static final String CLOUD_API_KEY = System.getenv(\"QDRANT_API_KEY\");"
        ],
        "functions": [
            {
                "name": "setup",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// Create a new test collection\n\t\ttry (QdrantClient client = new QdrantClient(\n\t\t\t\tQdrantGrpcClient.newBuilder(CLOUD_HOST, CLOUD_GRPC_PORT, true).withApiKey(CLOUD_API_KEY).build())) {\n\n\t\t\tif (client.listCollectionsAsync().get().stream().anyMatch(c -> c.equals(COLLECTION_NAME))) {\n\t\t\t\tclient.deleteCollectionAsync(COLLECTION_NAME).get();\n\t\t\t}\n\n\t\t\tvar vectorParams = VectorParams.newBuilder()\n\t\t\t\t.setDistance(Distance.Cosine)\n\t\t\t\t.setSize(EMBEDDING_DIMENSION)\n\t\t\t\t.build();\n\n\t\t\tclient.createCollectionAsync(COLLECTION_NAME, vectorParams).get();\n\t\t}",
                "is_abstract": "",
                "class_name": "QdrantVectorStoreCloudAutoConfigurationIT",
                "annotations": []
            },
            {
                "name": "addAndSearch",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\n\t\t\tVectorStore vectorStore = context.getBean(VectorStore.class);\n\n\t\t\tvectorStore.add(documents);\n\n\t\t\tList<Document> results = vectorStore\n\t\t\t\t.similaritySearch(SearchRequest.query(\"What is Great Depression?\").withTopK(1));\n\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tDocument resultDoc = results.get(0);\n\t\t\tassertThat(resultDoc.getId()).isEqualTo(documents.get(2).getId());\n\t\t\tassertThat(resultDoc.getMetadata()).containsKeys(\"depression\", \"distance\");\n\n\t\t\t// Remove all documents from the store\n\t\t\tvectorStore.delete(documents.stream().map(doc -> doc.getId()).toList());\n\t\t\tresults = vectorStore.similaritySearch(SearchRequest.query(\"Great Depression\").withTopK(1));\n\t\t\tassertThat(results).hasSize(0);\n\t\t});",
                "is_abstract": "",
                "class_name": "QdrantVectorStoreCloudAutoConfigurationIT",
                "annotations": []
            },
            {
                "name": "getText",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var resource = new DefaultResourceLoader().getResource(uri);\n\t\ttry {\n\t\t\treturn resource.getContentAsString(StandardCharsets.UTF_8);\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}",
                "is_abstract": "",
                "class_name": "QdrantVectorStoreCloudAutoConfigurationIT",
                "annotations": [
                    "@Configuration(proxyBeanMethods = false)"
                ]
            },
            {
                "name": "embeddingClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new TransformersEmbeddingClient();",
                "is_abstract": "",
                "class_name": "QdrantVectorStoreCloudAutoConfigurationIT Config",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/mongo/MongoDBAtlasVectorStoreAutoConfigurationIT.java",
        "class_names": [
            "MongoDBAtlasVectorStoreAutoConfigurationIT"
        ],
        "imports": "import java.util.stream.Collectors;\nimport java.util.List;\nimport org.springframework.ai.vectorstore.SearchRequest;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport org.testcontainers.containers.GenericContainer;\nimport org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.testcontainers.containers.wait.strategy.Wait;\nimport org.springframework.ai.autoconfigure.openai.OpenAiAutoConfiguration;\nimport org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration;\nimport java.time.Duration;\nimport org.springframework.boot.autoconfigure.web.client.RestClientAutoConfiguration;\nimport java.util.Collections;\nimport org.springframework.ai.autoconfigure.retry.SpringAiRetryAutoConfiguration;\nimport org.testcontainers.junit.jupiter.Testcontainers;\nimport org.springframework.ai.document.Document;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.vectorstore.VectorStore;\nimport org.springframework.boot.autoconfigure.AutoConfigurations;\nimport org.testcontainers.junit.jupiter.Container;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.vectorstore.mongo.MongoDBAtlasVectorStoreAutoConfigurationIT": "org.springframework.ai.autoconfigure.vectorstore.mongo.MongoDBAtlasVectorStoreAutoConfigurationIT",
            "org.springframework.ai.autoconfigure.vectorstore.mongo.addAndSearch": "org.springframework.ai.autoconfigure.vectorstore.mongo.addAndSearch",
            "org.springframework.ai.autoconfigure.vectorstore.mongo.stati": "org.springframework.ai.autoconfigure.vectorstore.mongo.stati",
            "org.springframework.ai.autoconfigure.vectorstore.mongo.documents": "org.springframework.ai.autoconfigure.vectorstore.mongo.documents",
            "org.springframework.ai.autoconfigure.vectorstore.mongo.contextRunner": "org.springframework.ai.autoconfigure.vectorstore.mongo.contextRunner"
        },
        "package": "package org.springframework.ai.autoconfigure.vectorstore.mongo;",
        "property_declarations": [
            "private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t.withConfiguration(AutoConfigurations.of(MongoAutoConfiguration.class, MongoDataAutoConfiguration.class,\n\t\t\t\tMongoDBAtlasVectorStoreAutoConfiguration.class, RestClientAutoConfiguration.class,\n\t\t\t\tSpringAiRetryAutoConfiguration.class, OpenAiAutoConfiguration.class))\n\t\t.withPropertyValues(\"spring.data.mongodb.database=springaisample\",\n\t\t\t\t\"spring.ai.vectorstore.mongodb.collection-name=test_collection\",\n\t\t\t\t// \"spring.ai.vectorstore.mongodb.path-name=testembedding\",\n\t\t\t\t\"spring.ai.vectorstore.mongodb.index-name=text_index\",\n\t\t\t\t\"spring.ai.openai.api-key=\" + System.getenv(\"OPENAI_API_KEY\"),\n\t\t\t\tString.format(\n\t\t\t\t\t\t\"spring.data.mongodb.uri=\" + String.format(\"mongodb://root:root@%s:%s/?directConnection=true\",\n\t\t\t\t\t\t\t\tmongo.getHost(), mongo.getMappedPort(27778))));",
            "List<Document> documents = List.of(\n\t\t\tnew Document(\"Spring AI rocks!! Spring AI rocks!! Spring AI rocks!! Spring AI rocks!! Spring AI rocks!!\",\n\t\t\t\t\tCollections.singletonMap(\"meta1\", \"meta1\")),\n\t\t\tnew Document(\"Hello World Hello World Hello World Hello World Hello World Hello World Hello World\"),\n\t\t\tnew Document(\n\t\t\t\t\t\"Great Depression Great Depression Great Depression Great Depression Great Depression Great Depression\",\n\t\t\t\t\tCollections.singletonMap(\"meta2\", \"meta2\")));",
            "@Container\n\tstatic GenericContainer<?> mongo = new GenericContainer<>(\"mongodb/atlas:v1.15.1\").withPrivilegedMode(true)\n\t\t.withCommand(\"/bin/bash\", \"-c\",\n\t\t\t\t\"atlas deployments setup local-test --type local --port 27778 --bindIpAll --username root --password root --force && tail -f /dev/null\")\n\t\t.withExposedPorts(27778)\n\t\t.waitingFor(Wait.forLogMessage(\".*Deployment created!.*\\\\n\", 1))\n\t\t.withStartupTimeout(Duration.ofMinutes(5));"
        ],
        "functions": [
            {
                "name": "addAndSearch",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\n\t\t\tVectorStore vectorStore = context.getBean(VectorStore.class);\n\n\t\t\tvectorStore.add(documents);\n\t\t\tThread.sleep(5000); // Await a second for the document to be indexed\n\n\t\t\tList<Document> results = vectorStore.similaritySearch(SearchRequest.query(\"Great\").withTopK(1));\n\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tDocument resultDoc = results.get(0);\n\t\t\tassertThat(resultDoc.getId()).isEqualTo(documents.get(2).getId());\n\t\t\tassertThat(resultDoc.getContent()).isEqualTo(\n\t\t\t\t\t\"Great Depression Great Depression Great Depression Great Depression Great Depression Great Depression\");\n\t\t\tassertThat(resultDoc.getMetadata()).containsEntry(\"meta2\", \"meta2\");\n\n\t\t\t// Remove all documents from the store\n\t\t\tvectorStore.delete(documents.stream().map(Document::getId).collect(Collectors.toList()));\n\n\t\t\tList<Document> results2 = vectorStore.similaritySearch(SearchRequest.query(\"Great\").withTopK(1));\n\t\t\tassertThat(results2).isEmpty();\n\t\t});",
                "is_abstract": "",
                "class_name": "MongoDBAtlasVectorStoreAutoConfigurationIT",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/weaviate/WeaviateVectorStoreAutoConfigurationTests.java",
        "class_names": [
            "Config",
            "WeaviateVectorStoreAutoConfigurationTests"
        ],
        "imports": "import java.util.List;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.springframework.ai.transformers.TransformersEmbeddingClient;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.ai.document.Document;\nimport org.springframework.ai.vectorstore.SearchRequest;\nimport java.util.Map;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.vectorstore.VectorStore;\nimport org.testcontainers.junit.jupiter.Container;\nimport org.springframework.boot.autoconfigure.AutoConfigurations;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport org.springframework.ai.vectorstore.WeaviateVectorStore.WeaviateVectorStoreConfig.MetadataField;\nimport org.springframework.ai.embedding.EmbeddingClient;\nimport org.testcontainers.containers.GenericContainer;\nimport org.testcontainers.junit.jupiter.Testcontainers;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.vectorstore.weaviate.WeaviateVectorStoreAutoConfigurationTests": "org.springframework.ai.autoconfigure.vectorstore.weaviate.WeaviateVectorStoreAutoConfigurationTests",
            "org.springframework.ai.autoconfigure.vectorstore.weaviate.Confi": "org.springframework.ai.autoconfigure.vectorstore.weaviate.Confi",
            "org.springframework.ai.autoconfigure.vectorstore.weaviate.addAndSearchWithFilters": "org.springframework.ai.autoconfigure.vectorstore.weaviate.addAndSearchWithFilters",
            "org.springframework.ai.autoconfigure.vectorstore.weaviate.embeddingClient": "org.springframework.ai.autoconfigure.vectorstore.weaviate.embeddingClient",
            "org.springframework.ai.autoconfigure.vectorstore.weaviate.stati": "org.springframework.ai.autoconfigure.vectorstore.weaviate.stati",
            "org.springframework.ai.autoconfigure.vectorstore.weaviate.contextRunner": "org.springframework.ai.autoconfigure.vectorstore.weaviate.contextRunner"
        },
        "package": "package org.springframework.ai.autoconfigure.vectorstore.weaviate;",
        "property_declarations": [
            "private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t.withConfiguration(AutoConfigurations.of(WeaviateVectorStoreAutoConfiguration.class))\n\t\t.withUserConfiguration(Config.class)\n\t\t.withPropertyValues(\"spring.ai.vectorstore.weaviate.scheme=http\",\n\t\t\t\t\"spring.ai.vectorstore.weaviate.host=localhost:\" + weaviateContainer.getMappedPort(8080),\n\t\t\t\t\"spring.ai.vectorstore.weaviate.filter-field.country=TEXT\",\n\t\t\t\t\"spring.ai.vectorstore.weaviate.filter-field.year=NUMBER\",\n\t\t\t\t\"spring.ai.vectorstore.weaviate.filter-field.active=BOOLEAN\",\n\t\t\t\t\"spring.ai.vectorstore.weaviate.filter-field.price=NUMBER\");",
            "@Container\n\tstatic GenericContainer<?> weaviateContainer = new GenericContainer<>(\"semitechnologies/weaviate:1.22.4\")\n\t\t.withEnv(\"AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED\", \"true\")\n\t\t.withEnv(\"PERSISTENCE_DATA_PATH\", \"/var/lib/weaviate\")\n\t\t.withEnv(\"QUERY_DEFAULTS_LIMIT\", \"25\")\n\t\t.withEnv(\"DEFAULT_VECTORIZER_MODULE\", \"none\")\n\t\t.withEnv(\"CLUSTER_HOSTNAME\", \"node1\")\n\t\t.withExposedPorts(8080);"
        ],
        "functions": [
            {
                "name": "addAndSearchWithFilters",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner.run(context -> {\n\n\t\t\tWeaviateVectorStoreProperties properties = context.getBean(WeaviateVectorStoreProperties.class);\n\n\t\t\tassertThat(properties.getFilterField()).hasSize(4);\n\n\t\t\tassertThat(properties.getFilterField().get(\"country\")).isEqualTo(MetadataField.Type.TEXT);\n\t\t\tassertThat(properties.getFilterField().get(\"year\")).isEqualTo(MetadataField.Type.NUMBER);\n\t\t\tassertThat(properties.getFilterField().get(\"active\")).isEqualTo(MetadataField.Type.BOOLEAN);\n\t\t\tassertThat(properties.getFilterField().get(\"price\")).isEqualTo(MetadataField.Type.NUMBER);\n\n\t\t\tVectorStore vectorStore = context.getBean(VectorStore.class);\n\n\t\t\tvar bgDocument = new Document(\"The World is Big and Salvation Lurks Around the Corner\",\n\t\t\t\t\tMap.of(\"country\", \"Bulgaria\", \"price\", 3.14, \"active\", true, \"year\", 2020));\n\t\t\tvar nlDocument = new Document(\"The World is Big and Salvation Lurks Around the Corner\",\n\t\t\t\t\tMap.of(\"country\", \"Netherlands\", \"price\", 1.57, \"active\", false, \"year\", 2023));\n\n\t\t\tvectorStore.add(List.of(bgDocument, nlDocument));\n\n\t\t\tvar request = SearchRequest.query(\"The World\").withTopK(5);\n\n\t\t\tList<Document> results = vectorStore.similaritySearch(request);\n\t\t\tassertThat(results).hasSize(2);\n\n\t\t\tresults = vectorStore\n\t\t\t\t.similaritySearch(request.withSimilarityThresholdAll().withFilterExpression(\"country == 'Bulgaria'\"));\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tassertThat(results.get(0).getId()).isEqualTo(bgDocument.getId());\n\n\t\t\tresults = vectorStore.similaritySearch(\n\t\t\t\t\trequest.withSimilarityThresholdAll().withFilterExpression(\"country == 'Netherlands'\"));\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tassertThat(results.get(0).getId()).isEqualTo(nlDocument.getId());\n\n\t\t\tresults = vectorStore.similaritySearch(\n\t\t\t\t\trequest.withSimilarityThresholdAll().withFilterExpression(\"price > 1.57 && active == true\"));\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tassertThat(results.get(0).getId()).isEqualTo(bgDocument.getId());\n\n\t\t\tresults = vectorStore\n\t\t\t\t.similaritySearch(request.withSimilarityThresholdAll().withFilterExpression(\"year in [2020, 2023]\"));\n\t\t\tassertThat(results).hasSize(2);\n\n\t\t\tresults = vectorStore.similaritySearch(\n\t\t\t\t\trequest.withSimilarityThresholdAll().withFilterExpression(\"year > 2020 && year <= 2023\"));\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tassertThat(results.get(0).getId()).isEqualTo(nlDocument.getId());\n\n\t\t\t// Remove all documents from the store\n\t\t\tvectorStore.delete(List.of(bgDocument, nlDocument).stream().map(doc -> doc.getId()).toList());\n\t\t});",
                "is_abstract": "",
                "class_name": "WeaviateVectorStoreAutoConfigurationTests",
                "annotations": [
                    "@Configuration(proxyBeanMethods = false)"
                ]
            },
            {
                "name": "embeddingClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new TransformersEmbeddingClient();",
                "is_abstract": "",
                "class_name": "WeaviateVectorStoreAutoConfigurationTests Config",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/elasticsearch/ElasticsearchVectorStoreAutoConfigurationIT.java",
        "class_names": [
            "ElasticsearchVectorStoreAutoConfigurationIT"
        ],
        "imports": "import org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchRestClientAutoConfiguration;\nimport java.util.List;\nimport org.springframework.ai.vectorstore.SearchRequest;\nimport org.springframework.ai.vectorstore.ElasticsearchVectorStore;\nimport org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport java.io.IOException;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.awaitility.Awaitility;\nimport java.util.Map;\nimport org.springframework.ai.autoconfigure.openai.OpenAiAutoConfiguration;\nimport java.nio.charset.StandardCharsets;\nimport static org.hamcrest.Matchers.hasSize;\nimport org.testcontainers.elasticsearch.ElasticsearchContainer;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.springframework.boot.autoconfigure.web.client.RestClientAutoConfiguration;\nimport org.junit.jupiter.params.provider.ValueSource;\nimport org.springframework.core.io.DefaultResourceLoader;\nimport org.springframework.ai.autoconfigure.retry.SpringAiRetryAutoConfiguration;\nimport org.testcontainers.junit.jupiter.Testcontainers;\nimport org.springframework.ai.document.Document;\nimport org.springframework.boot.autoconfigure.AutoConfigurations;\nimport org.testcontainers.junit.jupiter.Container;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.vectorstore.elasticsearch.ElasticsearchVectorStoreAutoConfigurationIT": "org.springframework.ai.autoconfigure.vectorstore.elasticsearch.ElasticsearchVectorStoreAutoConfigurationIT",
            "org.springframework.ai.autoconfigure.vectorstore.elasticsearch.ParameterizedTest": "org.springframework.ai.autoconfigure.vectorstore.elasticsearch.ParameterizedTest",
            "org.springframework.ai.autoconfigure.vectorstore.elasticsearch.getText": "org.springframework.ai.autoconfigure.vectorstore.elasticsearch.getText",
            "org.springframework.ai.autoconfigure.vectorstore.elasticsearch.privat": "org.springframework.ai.autoconfigure.vectorstore.elasticsearch.privat",
            "org.springframework.ai.autoconfigure.vectorstore.elasticsearch.DEFAULT": "org.springframework.ai.autoconfigure.vectorstore.elasticsearch.DEFAULT",
            "org.springframework.ai.autoconfigure.vectorstore.elasticsearch.documents": "org.springframework.ai.autoconfigure.vectorstore.elasticsearch.documents",
            "org.springframework.ai.autoconfigure.vectorstore.elasticsearch.contextRunner": "org.springframework.ai.autoconfigure.vectorstore.elasticsearch.contextRunner"
        },
        "package": "package org.springframework.ai.autoconfigure.vectorstore.elasticsearch;",
        "property_declarations": [
            "private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t.withConfiguration(AutoConfigurations.of(ElasticsearchRestClientAutoConfiguration.class,\n\t\t\t\tElasticsearchVectorStoreAutoConfiguration.class, RestClientAutoConfiguration.class,\n\t\t\t\tSpringAiRetryAutoConfiguration.class, OpenAiAutoConfiguration.class))\n\t\t.withPropertyValues(\"spring.elasticsearch.uris=\" + elasticsearchContainer.getHttpHostAddress(),\n\t\t\t\t\"spring.ai.openai.api-key=\" + System.getenv(\"OPENAI_API_KEY\"));",
            "private static final String DEFAULT = \"default cosine similarity\";",
            "private List<Document> documents = List.of(\n\t\t\tnew Document(\"1\", getText(\"classpath:/test/data/spring.ai.txt\"), Map.of(\"meta1\", \"meta1\")),\n\t\t\tnew Document(\"2\", getText(\"classpath:/test/data/time.shelter.txt\"), Map.of()),\n\t\t\tnew Document(\"3\", getText(\"classpath:/test/data/great.depression.txt\"), Map.of(\"meta2\", \"meta2\")));",
            "@Container\n\tprivate static final ElasticsearchContainer elasticsearchContainer = new ElasticsearchContainer(\n\t\t\t\"docker.elastic.co/elasticsearch/elasticsearch:8.12.2\")\n\t\t.withEnv(\"xpack.security.enabled\", \"false\");"
        ],
        "functions": [
            {
                "name": "ParameterizedTest",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "0} : {displayName} \")\n\t@ValueSource(strings = { DEFAULT, \"\"\"\n\t\t\t  double value = dotProduct(params.query_vector, 'embedding');\n\t\t\t  return sigmoid(1, Math.E, -value);\n\t\t\t\"\"\", \"1 / (1 + l1norm(params.query_vector, 'embedding'))\",\n\t\t\t\"1 / (1 + l2norm(params.query_vector, 'embedding'))\" })\n\tpublic void addAndSearchTest(String similarityFunction) {\n\n\t\tthis.contextRunner.run(context -> {\n\t\t\tElasticsearchVectorStore vectorStore = context.getBean(ElasticsearchVectorStore.class);\n\n\t\t\tif (!DEFAULT.equals(similarityFunction)) {\n\t\t\t\tvectorStore.withSimilarityFunction(similarityFunction);\n\t\t\t}\n\n\t\t\tvectorStore.add(documents);\n\n\t\t\tAwaitility.await()\n\t\t\t\t.until(() -> vectorStore\n\t\t\t\t\t.similaritySearch(SearchRequest.query(\"Great Depression\").withTopK(1).withSimilarityThreshold(0)),\n\t\t\t\t\t\thasSize(1));\n\n\t\t\tList<Document> results = vectorStore\n\t\t\t\t.similaritySearch(SearchRequest.query(\"Great Depression\").withTopK(1).withSimilarityThreshold(0));\n\n\t\t\tassertThat(results).hasSize(1);\n\t\t\tDocument resultDoc = results.get(0);\n\t\t\tassertThat(resultDoc.getId()).isEqualTo(documents.get(2).getId());\n\t\t\tassertThat(resultDoc.getContent()).contains(\"The Great Depression (1929\u20131939) was an economic shock\");\n\t\t\tassertThat(resultDoc.getMetadata()).hasSize(2);\n\t\t\tassertThat(resultDoc.getMetadata()).containsKey(\"meta2\");\n\t\t\tassertThat(resultDoc.getMetadata()).containsKey(\"distance\");\n\n\t\t\t// Remove all documents from the store\n\t\t\tvectorStore.delete(documents.stream().map(Document::getId).toList());\n\n\t\t\tAwaitility.await()\n\t\t\t\t.until(() -> vectorStore\n\t\t\t\t\t.similaritySearch(SearchRequest.query(\"Great Depression\").withTopK(1).withSimilarityThreshold(0)),\n\t\t\t\t\t\thasSize(0));\n\t\t});",
                "is_abstract": "",
                "class_name": "ElasticsearchVectorStoreAutoConfigurationIT",
                "annotations": [
                    "@ParameterizedTest(name = \"{0} : {displayName} \")",
                    "@ValueSource(strings = { DEFAULT, \"\"\"\n\t\t\t  double value = dotProduct(params.query_vector, 'embedding');\n\t\t\t  return sigmoid(1, Math.E, -value);\n\t\t\t\"\"\", \"1 / (1 + l1norm(params.query_vector, 'embedding'))\",\n\t\t\t\"1 / (1 + l2norm(params.query_vector, 'embedding'))\" })"
                ]
            },
            {
                "name": "getText",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var resource = new DefaultResourceLoader().getResource(uri);\n\t\ttry {\n\t\t\treturn resource.getContentAsString(StandardCharsets.UTF_8);\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}",
                "is_abstract": "",
                "class_name": "ElasticsearchVectorStoreAutoConfigurationIT",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/milvus/MilvusVectorStoreAutoConfigurationIT.java",
        "class_names": [
            "Config",
            "MilvusVectorStoreAutoConfigurationIT"
        ],
        "imports": "import java.io.File;\nimport java.util.List;\nimport org.springframework.ai.vectorstore.SearchRequest;\nimport org.springframework.boot.test.context.runner.ApplicationContextRunner;\nimport org.testcontainers.containers.DockerComposeContainer;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.junit.jupiter.api.BeforeAll;\nimport java.util.Map;\nimport org.testcontainers.containers.wait.strategy.Wait;\nimport org.springframework.context.annotation.Configuration;\nimport java.time.Duration;\nimport org.springframework.ai.transformers.TransformersEmbeddingClient;\nimport org.springframework.context.annotation.Bean;\nimport org.junit.jupiter.api.AfterAll;\nimport org.springframework.ai.embedding.EmbeddingClient;\nimport org.testcontainers.junit.jupiter.Testcontainers;\nimport org.springframework.util.FileSystemUtils;\nimport org.springframework.ai.document.Document;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.vectorstore.VectorStore;\nimport org.springframework.boot.autoconfigure.AutoConfigurations;\nimport org.springframework.ai.ResourceUtils;\nimport java.util.UUID;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.vectorstore.milvus.MilvusVectorStoreAutoConfigurationIT": "org.springframework.ai.autoconfigure.vectorstore.milvus.MilvusVectorStoreAutoConfigurationIT",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.Confi": "org.springframework.ai.autoconfigure.vectorstore.milvus.Confi",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.beforeAll": "org.springframework.ai.autoconfigure.vectorstore.milvus.beforeAll",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.afterAll": "org.springframework.ai.autoconfigure.vectorstore.milvus.afterAll",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.addAndSearch": "org.springframework.ai.autoconfigure.vectorstore.milvus.addAndSearch",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.embeddingClient": "org.springframework.ai.autoconfigure.vectorstore.milvus.embeddingClient",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.milvusContainer": "org.springframework.ai.autoconfigure.vectorstore.milvus.milvusContainer",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.TEMP_FOLDER": "org.springframework.ai.autoconfigure.vectorstore.milvus.TEMP_FOLDER",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.documents": "org.springframework.ai.autoconfigure.vectorstore.milvus.documents",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.contextRunner": "org.springframework.ai.autoconfigure.vectorstore.milvus.contextRunner"
        },
        "package": "package org.springframework.ai.autoconfigure.vectorstore.milvus;",
        "property_declarations": [
            "private static final File TEMP_FOLDER = new File(\"target/test-\" + UUID.randomUUID().toString());",
            "List<Document> documents = List.of(\n\t\t\tnew Document(ResourceUtils.getText(\"classpath:/test/data/spring.ai.txt\"), Map.of(\"spring\", \"great\")),\n\t\t\tnew Document(ResourceUtils.getText(\"classpath:/test/data/time.shelter.txt\")), new Document(\n\t\t\t\t\tResourceUtils.getText(\"classpath:/test/data/great.depression.txt\"), Map.of(\"depression\", \"bad\")));",
            "private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n\t\t.withConfiguration(AutoConfigurations.of(MilvusVectorStoreAutoConfiguration.class))\n\t\t.withUserConfiguration(Config.class);",
            "private static DockerComposeContainer milvusContainer;"
        ],
        "functions": [
            {
                "name": "beforeAll",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "FileSystemUtils.deleteRecursively(TEMP_FOLDER);\n\t\tTEMP_FOLDER.mkdirs();\n\n\t\tmilvusContainer = new DockerComposeContainer(new File(\"src/test/resources/milvus/docker-compose.yml\"))\n\t\t\t.withEnv(\"DOCKER_VOLUME_DIRECTORY\", TEMP_FOLDER.getAbsolutePath())\n\t\t\t.withExposedService(\"standalone\", 19530)\n\t\t\t.withExposedService(\"standalone\", 9091,\n\t\t\t\t\tWait.forHttp(\"/healthz\").forPort(9091).forStatusCode(200).forStatusCode(401))\n\t\t\t.waitingFor(\"standalone\", Wait.forLogMessage(\".*Proxy successfully started.*\\\\s\", 1)\n\t\t\t\t.withStartupTimeout(Duration.ofSeconds(100)));\n\t\tmilvusContainer.start();",
                "is_abstract": "",
                "class_name": "MilvusVectorStoreAutoConfigurationIT",
                "annotations": []
            },
            {
                "name": "afterAll",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "milvusContainer.stop();\n\t\tFileSystemUtils.deleteRecursively(TEMP_FOLDER);",
                "is_abstract": "",
                "class_name": "MilvusVectorStoreAutoConfigurationIT",
                "annotations": []
            },
            {
                "name": "addAndSearch",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "contextRunner\n\t\t\t.withPropertyValues(\"spring.ai.vectorstore.milvus.metricType=COSINE\",\n\t\t\t\t\t\"spring.ai.vectorstore.milvus.indexType=IVF_FLAT\",\n\t\t\t\t\t\"spring.ai.vectorstore.milvus.embeddingDimension=384\",\n\t\t\t\t\t\"spring.ai.vectorstore.milvus.collectionName=myTestCollection\",\n\n\t\t\t\t\t\"spring.ai.vectorstore.milvus.client.host=\" + milvusContainer.getServiceHost(\"standalone\", 19530),\n\t\t\t\t\t\"spring.ai.vectorstore.milvus.client.port=\" + milvusContainer.getServicePort(\"standalone\", 19530))\n\t\t\t.run(context -> {\n\t\t\t\tVectorStore vectorStore = context.getBean(VectorStore.class);\n\t\t\t\tvectorStore.add(documents);\n\n\t\t\t\tList<Document> results = vectorStore.similaritySearch(SearchRequest.query(\"Spring\").withTopK(1));\n\n\t\t\t\tassertThat(results).hasSize(1);\n\t\t\t\tDocument resultDoc = results.get(0);\n\t\t\t\tassertThat(resultDoc.getId()).isEqualTo(documents.get(0).getId());\n\t\t\t\tassertThat(resultDoc.getContent()).contains(\n\t\t\t\t\t\t\"Spring AI provides abstractions that serve as the foundation for developing AI applications.\");\n\t\t\t\tassertThat(resultDoc.getMetadata()).hasSize(2);\n\t\t\t\tassertThat(resultDoc.getMetadata()).containsKeys(\"spring\", \"distance\");\n\n\t\t\t\t// Remove all documents from the store\n\t\t\t\tvectorStore.delete(documents.stream().map(doc -> doc.getId()).toList());\n\n\t\t\t\tresults = vectorStore.similaritySearch(SearchRequest.query(\"Spring\").withTopK(1));\n\t\t\t\tassertThat(results).hasSize(0);\n\t\t\t});",
                "is_abstract": "",
                "class_name": "MilvusVectorStoreAutoConfigurationIT",
                "annotations": [
                    "@Configuration(proxyBeanMethods = false)"
                ]
            },
            {
                "name": "embeddingClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new TransformersEmbeddingClient();",
                "is_abstract": "",
                "class_name": "MilvusVectorStoreAutoConfigurationIT Config",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/mistralai/MistralAiAutoConfiguration.java",
        "class_names": [
            "MistralAiAutoConfiguration"
        ],
        "imports": "import org.springframework.context.ApplicationContext;\nimport java.util.List;\nimport org.springframework.retry.support.RetryTemplate;\nimport org.springframework.util.CollectionUtils;\nimport org.springframework.ai.model.function.FunctionCallbackContext;\nimport org.springframework.util.StringUtils;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.ai.mistralai.api.MistralAiApi;\nimport org.springframework.ai.mistralai.MistralAiEmbeddingClient;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.web.client.ResponseErrorHandler;\nimport org.springframework.boot.autoconfigure.AutoConfiguration;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.boot.autoconfigure.web.client.RestClientAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.ai.autoconfigure.retry.SpringAiRetryAutoConfiguration;\nimport org.springframework.web.client.RestClient;\nimport org.springframework.util.Assert;\nimport org.springframework.ai.model.function.FunctionCallback;\nimport org.springframework.ai.mistralai.MistralAiChatClient;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.mistralai.MistralAiAutoConfiguration": "org.springframework.ai.autoconfigure.mistralai.MistralAiAutoConfiguration",
            "org.springframework.ai.autoconfigure.mistralai.ConditionalOnProperty": "org.springframework.ai.autoconfigure.mistralai.ConditionalOnProperty",
            "org.springframework.ai.autoconfigure.mistralai.mistralAiApi": "org.springframework.ai.autoconfigure.mistralai.mistralAiApi",
            "org.springframework.ai.autoconfigure.mistralai.springAiFunctionManager": "org.springframework.ai.autoconfigure.mistralai.springAiFunctionManager"
        },
        "package": "package org.springframework.ai.autoconfigure.mistralai;",
        "property_declarations": [],
        "functions": [
            {
                "name": "ConditionalOnProperty",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var mistralAiApi = mistralAiApi(embeddingProperties.getApiKey(), commonProperties.getApiKey(),\n\t\t\t\tembeddingProperties.getBaseUrl(), commonProperties.getBaseUrl(), restClientBuilder,\n\t\t\t\tresponseErrorHandler);\n\n\t\treturn new MistralAiEmbeddingClient(mistralAiApi, embeddingProperties.getMetadataMode(),\n\t\t\t\tembeddingProperties.getOptions(), retryTemplate);",
                "is_abstract": "",
                "class_name": "MistralAiAutoConfiguration",
                "annotations": [
                    "@ConditionalOnProperty(prefix = MistralAiEmbeddingProperties.CONFIG_PREFIX, name = \"enabled\", havingValue = \"true\",\n\t\t\tmatchIfMissing = true)"
                ]
            },
            {
                "name": "mistralAiApi",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var resolvedApiKey = StringUtils.hasText(apiKey) ? apiKey : commonApiKey;\n\t\tvar resoledBaseUrl = StringUtils.hasText(baseUrl) ? baseUrl : commonBaseUrl;\n\n\t\tAssert.hasText(resolvedApiKey, \"Mistral API key must be set\");\n\t\tAssert.hasText(resoledBaseUrl, \"Mistral base URL must be set\");\n\n\t\treturn new MistralAiApi(resoledBaseUrl, resolvedApiKey, restClientBuilder, responseErrorHandler);",
                "is_abstract": "",
                "class_name": "MistralAiAutoConfiguration",
                "annotations": []
            },
            {
                "name": "springAiFunctionManager",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "FunctionCallbackContext manager = new FunctionCallbackContext();\n\t\tmanager.setApplicationContext(context);\n\t\treturn manager;",
                "is_abstract": "",
                "class_name": "MistralAiAutoConfiguration",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/mistralai/MistralAiEmbeddingProperties.java",
        "class_names": [
            "MistralAiEmbeddingProperties"
        ],
        "imports": "import org.springframework.ai.document.MetadataMode;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.ai.mistralai.api.MistralAiApi;\nimport org.springframework.boot.context.properties.NestedConfigurationProperty;\nimport org.springframework.ai.mistralai.MistralAiEmbeddingOptions;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.mistralai.MistralAiEmbeddingProperties": "org.springframework.ai.autoconfigure.mistralai.MistralAiEmbeddingProperties",
            "org.springframework.ai.autoconfigure.mistralai.getOptions": "org.springframework.ai.autoconfigure.mistralai.getOptions",
            "org.springframework.ai.autoconfigure.mistralai.setOptions": "org.springframework.ai.autoconfigure.mistralai.setOptions",
            "org.springframework.ai.autoconfigure.mistralai.getMetadataMod": "org.springframework.ai.autoconfigure.mistralai.getMetadataMod",
            "org.springframework.ai.autoconfigure.mistralai.setMetadataMod": "org.springframework.ai.autoconfigure.mistralai.setMetadataMod",
            "org.springframework.ai.autoconfigure.mistralai.isEnabled": "org.springframework.ai.autoconfigure.mistralai.isEnabled",
            "org.springframework.ai.autoconfigure.mistralai.setEnabled": "org.springframework.ai.autoconfigure.mistralai.setEnabled",
            "org.springframework.ai.autoconfigure.mistralai.CONFIG_PREFIX": "org.springframework.ai.autoconfigure.mistralai.CONFIG_PREFIX",
            "org.springframework.ai.autoconfigure.mistralai.DEFAULT_EMBEDDING_MODEL": "org.springframework.ai.autoconfigure.mistralai.DEFAULT_EMBEDDING_MODEL",
            "org.springframework.ai.autoconfigure.mistralai.DEFAULT_ENCODING_FORMAT": "org.springframework.ai.autoconfigure.mistralai.DEFAULT_ENCODING_FORMAT",
            "org.springframework.ai.autoconfigure.mistralai.enabled": "org.springframework.ai.autoconfigure.mistralai.enabled",
            "org.springframework.ai.autoconfigure.mistralai.metadataMod": "org.springframework.ai.autoconfigure.mistralai.metadataMod",
            "org.springframework.ai.autoconfigure.mistralai.privat": "org.springframework.ai.autoconfigure.mistralai.privat"
        },
        "package": "package org.springframework.ai.autoconfigure.mistralai;",
        "property_declarations": [
            "public static final String CONFIG_PREFIX = \"spring.ai.mistralai.embedding\";",
            "public static final String DEFAULT_EMBEDDING_MODEL = MistralAiApi.EmbeddingModel.EMBED.getValue();",
            "@NestedConfigurationProperty\n\tprivate MistralAiEmbeddingOptions options = MistralAiEmbeddingOptions.builder()\n\t\t.withModel(DEFAULT_EMBEDDING_MODEL)\n\t\t.withEncodingFormat(DEFAULT_ENCODING_FORMAT)\n\t\t.build();",
            "private boolean enabled = true;",
            "public MetadataMode metadataMode = MetadataMode.EMBED;",
            "public static final String DEFAULT_ENCODING_FORMAT = \"float\";"
        ],
        "functions": [
            {
                "name": "getOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.options;",
                "is_abstract": "",
                "class_name": "MistralAiEmbeddingProperties",
                "annotations": []
            },
            {
                "name": "setOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options = options;",
                "is_abstract": "",
                "class_name": "MistralAiEmbeddingProperties",
                "annotations": []
            },
            {
                "name": "getMetadataMode",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.metadataMode;",
                "is_abstract": "",
                "class_name": "MistralAiEmbeddingProperties",
                "annotations": []
            },
            {
                "name": "setMetadataMode",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.metadataMode = metadataMode;",
                "is_abstract": "",
                "class_name": "MistralAiEmbeddingProperties",
                "annotations": []
            },
            {
                "name": "isEnabled",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.enabled;",
                "is_abstract": "",
                "class_name": "MistralAiEmbeddingProperties",
                "annotations": []
            },
            {
                "name": "setEnabled",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.enabled = enabled;",
                "is_abstract": "",
                "class_name": "MistralAiEmbeddingProperties",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/mistralai/MistralAiCommonProperties.java",
        "class_names": [
            "MistralAiCommonProperties"
        ],
        "imports": "import org.springframework.boot.context.properties.ConfigurationProperties;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.mistralai.MistralAiCommonProperties": "org.springframework.ai.autoconfigure.mistralai.MistralAiCommonProperties",
            "org.springframework.ai.autoconfigure.mistralai.CONFIG_PREFIX": "org.springframework.ai.autoconfigure.mistralai.CONFIG_PREFIX",
            "org.springframework.ai.autoconfigure.mistralai.DEFAULT_BASE_URL": "org.springframework.ai.autoconfigure.mistralai.DEFAULT_BASE_URL"
        },
        "package": "package org.springframework.ai.autoconfigure.mistralai;",
        "property_declarations": [
            "public static final String DEFAULT_BASE_URL = \"https://api.mistral.ai\";",
            "public static final String CONFIG_PREFIX = \"spring.ai.mistralai\";"
        ],
        "functions": []
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/mistralai/MistralAiParentProperties.java",
        "class_names": [
            "MistralAiParentProperties"
        ],
        "imports": "",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.mistralai.MistralAiParentProperties": "org.springframework.ai.autoconfigure.mistralai.MistralAiParentProperties",
            "org.springframework.ai.autoconfigure.mistralai.getApiKey": "org.springframework.ai.autoconfigure.mistralai.getApiKey",
            "org.springframework.ai.autoconfigure.mistralai.setApiKey": "org.springframework.ai.autoconfigure.mistralai.setApiKey",
            "org.springframework.ai.autoconfigure.mistralai.getBaseUrl": "org.springframework.ai.autoconfigure.mistralai.getBaseUrl",
            "org.springframework.ai.autoconfigure.mistralai.setBaseUrl": "org.springframework.ai.autoconfigure.mistralai.setBaseUrl",
            "org.springframework.ai.autoconfigure.mistralai.apiKey": "org.springframework.ai.autoconfigure.mistralai.apiKey",
            "org.springframework.ai.autoconfigure.mistralai.baseUrl": "org.springframework.ai.autoconfigure.mistralai.baseUrl"
        },
        "package": "package org.springframework.ai.autoconfigure.mistralai;",
        "property_declarations": [
            "private String baseUrl;",
            "private String apiKey;"
        ],
        "functions": [
            {
                "name": "getApiKey",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.apiKey;",
                "is_abstract": "",
                "class_name": "MistralAiParentProperties",
                "annotations": []
            },
            {
                "name": "setApiKey",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.apiKey = apiKey;",
                "is_abstract": "",
                "class_name": "MistralAiParentProperties",
                "annotations": []
            },
            {
                "name": "getBaseUrl",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.baseUrl;",
                "is_abstract": "",
                "class_name": "MistralAiParentProperties",
                "annotations": []
            },
            {
                "name": "setBaseUrl",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.baseUrl = baseUrl;",
                "is_abstract": "",
                "class_name": "MistralAiParentProperties",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/mistralai/MistralAiChatProperties.java",
        "class_names": [
            "MistralAiChatProperties"
        ],
        "imports": "import org.springframework.boot.context.properties.NestedConfigurationProperty;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.ai.mistralai.MistralAiChatOptions;\nimport org.springframework.ai.mistralai.api.MistralAiApi;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.mistralai.MistralAiChatProperties": "org.springframework.ai.autoconfigure.mistralai.MistralAiChatProperties",
            "org.springframework.ai.autoconfigure.mistralai.getOptions": "org.springframework.ai.autoconfigure.mistralai.getOptions",
            "org.springframework.ai.autoconfigure.mistralai.setOptions": "org.springframework.ai.autoconfigure.mistralai.setOptions",
            "org.springframework.ai.autoconfigure.mistralai.isEnabled": "org.springframework.ai.autoconfigure.mistralai.isEnabled",
            "org.springframework.ai.autoconfigure.mistralai.setEnabled": "org.springframework.ai.autoconfigure.mistralai.setEnabled",
            "org.springframework.ai.autoconfigure.mistralai.CONFIG_PREFIX": "org.springframework.ai.autoconfigure.mistralai.CONFIG_PREFIX",
            "org.springframework.ai.autoconfigure.mistralai.DEFAULT_CHAT_MODEL": "org.springframework.ai.autoconfigure.mistralai.DEFAULT_CHAT_MODEL",
            "org.springframework.ai.autoconfigure.mistralai.DEFAULT_TEMPERATURE": "org.springframework.ai.autoconfigure.mistralai.DEFAULT_TEMPERATURE",
            "org.springframework.ai.autoconfigure.mistralai.DEFAULT_TOP_P": "org.springframework.ai.autoconfigure.mistralai.DEFAULT_TOP_P",
            "org.springframework.ai.autoconfigure.mistralai.IS_ENABLED": "org.springframework.ai.autoconfigure.mistralai.IS_ENABLED",
            "org.springframework.ai.autoconfigure.mistralai.enabled": "org.springframework.ai.autoconfigure.mistralai.enabled",
            "org.springframework.ai.autoconfigure.mistralai.privat": "org.springframework.ai.autoconfigure.mistralai.privat"
        },
        "package": "package org.springframework.ai.autoconfigure.mistralai;",
        "property_declarations": [
            "private static final Double DEFAULT_TEMPERATURE = 0.7;",
            "public static final String DEFAULT_CHAT_MODEL = MistralAiApi.ChatModel.TINY.getValue();",
            "public static final String CONFIG_PREFIX = \"spring.ai.mistralai.chat\";",
            "private static final Boolean IS_ENABLED = false;",
            "@NestedConfigurationProperty\n\tprivate MistralAiChatOptions options = MistralAiChatOptions.builder()\n\t\t.withModel(DEFAULT_CHAT_MODEL)\n\t\t.withTemperature(DEFAULT_TEMPERATURE.floatValue())\n\t\t.withSafePrompt(!IS_ENABLED)\n\t\t.withTopP(DEFAULT_TOP_P)\n\t\t.build();",
            "private static final Float DEFAULT_TOP_P = 1.0f;",
            "private boolean enabled = true;"
        ],
        "functions": [
            {
                "name": "getOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.options;",
                "is_abstract": "",
                "class_name": "MistralAiChatProperties",
                "annotations": []
            },
            {
                "name": "setOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options = options;",
                "is_abstract": "",
                "class_name": "MistralAiChatProperties",
                "annotations": []
            },
            {
                "name": "isEnabled",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.enabled;",
                "is_abstract": "",
                "class_name": "MistralAiChatProperties",
                "annotations": []
            },
            {
                "name": "setEnabled",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.enabled = enabled;",
                "is_abstract": "",
                "class_name": "MistralAiChatProperties",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/retry/SpringAiRetryProperties.java",
        "class_names": [
            "Backoff",
            "SpringAiRetryProperties"
        ],
        "imports": "import java.util.ArrayList;\nimport java.util.List;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.boot.context.properties.NestedConfigurationProperty;\nimport java.time.Duration;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.retry.SpringAiRetryProperties": "org.springframework.ai.autoconfigure.retry.SpringAiRetryProperties",
            "org.springframework.ai.autoconfigure.retry.Backoff": "org.springframework.ai.autoconfigure.retry.Backoff",
            "org.springframework.ai.autoconfigure.retry.getInitialInterval": "org.springframework.ai.autoconfigure.retry.getInitialInterval",
            "org.springframework.ai.autoconfigure.retry.setInitialInterval": "org.springframework.ai.autoconfigure.retry.setInitialInterval",
            "org.springframework.ai.autoconfigure.retry.getMultiplier": "org.springframework.ai.autoconfigure.retry.getMultiplier",
            "org.springframework.ai.autoconfigure.retry.setMultiplier": "org.springframework.ai.autoconfigure.retry.setMultiplier",
            "org.springframework.ai.autoconfigure.retry.getMaxInterval": "org.springframework.ai.autoconfigure.retry.getMaxInterval",
            "org.springframework.ai.autoconfigure.retry.setMaxInterval": "org.springframework.ai.autoconfigure.retry.setMaxInterval",
            "org.springframework.ai.autoconfigure.retry.getMaxAttempts": "org.springframework.ai.autoconfigure.retry.getMaxAttempts",
            "org.springframework.ai.autoconfigure.retry.setMaxAttempts": "org.springframework.ai.autoconfigure.retry.setMaxAttempts",
            "org.springframework.ai.autoconfigure.retry.getBackoff": "org.springframework.ai.autoconfigure.retry.getBackoff",
            "org.springframework.ai.autoconfigure.retry.getExcludeOnHttpCodes": "org.springframework.ai.autoconfigure.retry.getExcludeOnHttpCodes",
            "org.springframework.ai.autoconfigure.retry.setExcludeOnHttpCodes": "org.springframework.ai.autoconfigure.retry.setExcludeOnHttpCodes",
            "org.springframework.ai.autoconfigure.retry.isOnClientErrors": "org.springframework.ai.autoconfigure.retry.isOnClientErrors",
            "org.springframework.ai.autoconfigure.retry.setOnClientErrors": "org.springframework.ai.autoconfigure.retry.setOnClientErrors",
            "org.springframework.ai.autoconfigure.retry.getOnHttpCodes": "org.springframework.ai.autoconfigure.retry.getOnHttpCodes",
            "org.springframework.ai.autoconfigure.retry.setOnHttpCodes": "org.springframework.ai.autoconfigure.retry.setOnHttpCodes",
            "org.springframework.ai.autoconfigure.retry.CONFIG_PREFIX": "org.springframework.ai.autoconfigure.retry.CONFIG_PREFIX",
            "org.springframework.ai.autoconfigure.retry.maxAttempts": "org.springframework.ai.autoconfigure.retry.maxAttempts",
            "org.springframework.ai.autoconfigure.retry.privat": "org.springframework.ai.autoconfigure.retry.privat",
            "org.springframework.ai.autoconfigure.retry.onClientErrors": "org.springframework.ai.autoconfigure.retry.onClientErrors",
            "org.springframework.ai.autoconfigure.retry.excludeOnHttpCodes": "org.springframework.ai.autoconfigure.retry.excludeOnHttpCodes",
            "org.springframework.ai.autoconfigure.retry.onHttpCodes": "org.springframework.ai.autoconfigure.retry.onHttpCodes",
            "org.springframework.ai.autoconfigure.retry.initialInterval": "org.springframework.ai.autoconfigure.retry.initialInterval",
            "org.springframework.ai.autoconfigure.retry.multiplier": "org.springframework.ai.autoconfigure.retry.multiplier",
            "org.springframework.ai.autoconfigure.retry.maxInterval": "org.springframework.ai.autoconfigure.retry.maxInterval"
        },
        "package": "package org.springframework.ai.autoconfigure.retry;",
        "property_declarations": [
            "private Duration initialInterval = Duration.ofMillis(2000);",
            "private int maxAttempts = 10;",
            "private boolean onClientErrors = false;",
            "private List<Integer> onHttpCodes = new ArrayList<>();",
            "private List<Integer> excludeOnHttpCodes = new ArrayList<>();",
            "private Duration maxInterval = Duration.ofMillis(3 * 60000);",
            "private int multiplier = 5;",
            "@NestedConfigurationProperty\n\tprivate Backoff backoff = new Backoff();",
            "public static final String CONFIG_PREFIX = \"spring.ai.retry\";"
        ],
        "functions": [
            {
                "name": "getInitialInterval",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return initialInterval;",
                "is_abstract": "",
                "class_name": "SpringAiRetryProperties Backoff",
                "annotations": []
            },
            {
                "name": "setInitialInterval",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.initialInterval = initialInterval;",
                "is_abstract": "",
                "class_name": "SpringAiRetryProperties Backoff",
                "annotations": []
            },
            {
                "name": "getMultiplier",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return multiplier;",
                "is_abstract": "",
                "class_name": "SpringAiRetryProperties Backoff",
                "annotations": []
            },
            {
                "name": "setMultiplier",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.multiplier = multiplier;",
                "is_abstract": "",
                "class_name": "SpringAiRetryProperties Backoff",
                "annotations": []
            },
            {
                "name": "getMaxInterval",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return maxInterval;",
                "is_abstract": "",
                "class_name": "SpringAiRetryProperties Backoff",
                "annotations": []
            },
            {
                "name": "setMaxInterval",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.maxInterval = maxInterval;",
                "is_abstract": "",
                "class_name": "SpringAiRetryProperties Backoff",
                "annotations": []
            },
            {
                "name": "getMaxAttempts",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.maxAttempts;",
                "is_abstract": "",
                "class_name": "SpringAiRetryProperties Backoff",
                "annotations": []
            },
            {
                "name": "setMaxAttempts",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.maxAttempts = maxAttempts;",
                "is_abstract": "",
                "class_name": "SpringAiRetryProperties Backoff",
                "annotations": []
            },
            {
                "name": "getBackoff",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.backoff;",
                "is_abstract": "",
                "class_name": "SpringAiRetryProperties Backoff",
                "annotations": []
            },
            {
                "name": "getExcludeOnHttpCodes",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.excludeOnHttpCodes;",
                "is_abstract": "",
                "class_name": "SpringAiRetryProperties Backoff",
                "annotations": []
            },
            {
                "name": "setExcludeOnHttpCodes",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.excludeOnHttpCodes = onHttpCodes;",
                "is_abstract": "",
                "class_name": "SpringAiRetryProperties Backoff",
                "annotations": []
            },
            {
                "name": "isOnClientErrors",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.onClientErrors;",
                "is_abstract": "",
                "class_name": "SpringAiRetryProperties Backoff",
                "annotations": []
            },
            {
                "name": "setOnClientErrors",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.onClientErrors = onClientErrors;",
                "is_abstract": "",
                "class_name": "SpringAiRetryProperties Backoff",
                "annotations": []
            },
            {
                "name": "getOnHttpCodes",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.onHttpCodes;",
                "is_abstract": "",
                "class_name": "SpringAiRetryProperties Backoff",
                "annotations": []
            },
            {
                "name": "setOnHttpCodes",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.onHttpCodes = onHttpCodes;",
                "is_abstract": "",
                "class_name": "SpringAiRetryProperties Backoff",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/retry/SpringAiRetryAutoConfiguration.java",
        "class_names": [
            "SpringAiRetryAutoConfiguration"
        ],
        "imports": "import org.springframework.retry.support.RetryTemplate;\nimport org.springframework.ai.retry.TransientAiException;\nimport org.springframework.util.CollectionUtils;\nimport org.springframework.lang.NonNull;\nimport java.io.IOException;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.slf4j.Logger;\nimport java.nio.charset.StandardCharsets;\nimport org.springframework.web.client.ResponseErrorHandler;\nimport org.springframework.boot.autoconfigure.AutoConfiguration;\nimport org.springframework.util.StreamUtils;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.retry.RetryListener;\nimport org.springframework.retry.RetryCallback;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.http.client.ClientHttpResponse;\nimport org.springframework.ai.retry.NonTransientAiException;\nimport org.springframework.retry.RetryContext;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.retry.SpringAiRetryAutoConfiguration": "org.springframework.ai.autoconfigure.retry.SpringAiRetryAutoConfiguration",
            "org.springframework.ai.autoconfigure.retry.retryTemplat": "org.springframework.ai.autoconfigure.retry.retryTemplat",
            "org.springframework.ai.autoconfigure.retry.onError": "org.springframework.ai.autoconfigure.retry.onError",
            "org.springframework.ai.autoconfigure.retry.responseErrorHandler": "org.springframework.ai.autoconfigure.retry.responseErrorHandler",
            "org.springframework.ai.autoconfigure.retry.hasError": "org.springframework.ai.autoconfigure.retry.hasError",
            "org.springframework.ai.autoconfigure.retry.handleError": "org.springframework.ai.autoconfigure.retry.handleError",
            "org.springframework.ai.autoconfigure.retry.logger": "org.springframework.ai.autoconfigure.retry.logger"
        },
        "package": "package org.springframework.ai.autoconfigure.retry;",
        "property_declarations": [
            "private static final Logger logger = LoggerFactory.getLogger(SpringAiRetryAutoConfiguration.class);"
        ],
        "functions": [
            {
                "name": "retryTemplate",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return RetryTemplate.builder()\n\t\t\t.maxAttempts(properties.getMaxAttempts())\n\t\t\t.retryOn(NonTransientAiException.class)\n\t\t\t.exponentialBackoff(properties.getBackoff().getInitialInterval(), properties.getBackoff().getMultiplier(),\n\t\t\t\t\tproperties.getBackoff().getMaxInterval())\n\t\t\t.withListener(new RetryListener() {\n\t\t\t\t@Override\n\t\t\t\tpublic <T extends Object, E extends Throwable> void onError(RetryContext context,\n\t\t\t\t\t\tRetryCallback<T, E> callback, Throwable throwable) {\n\t\t\t\t\tlogger.warn(\"Retry error. Retry count:\" + context.getRetryCount(), throwable);\n\t\t\t\t};\n\t\t\t})\n\t\t\t.build();",
                "is_abstract": "",
                "class_name": "SpringAiRetryAutoConfiguration",
                "annotations": []
            },
            {
                "name": "onError",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "logger.warn(\"Retry error. Retry count:\" + context.getRetryCount(), throwable);",
                "is_abstract": "",
                "class_name": "SpringAiRetryAutoConfiguration",
                "annotations": []
            },
            {
                "name": "responseErrorHandler",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new ResponseErrorHandler() {\n\n\t\t\t@Override\n\t\t\tpublic boolean hasError(@NonNull ClientHttpResponse response) throws IOException {\n\t\t\t\treturn response.getStatusCode().isError();\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void handleError(@NonNull ClientHttpResponse response) throws IOException {\n\t\t\t\tif (response.getStatusCode().isError()) {\n\t\t\t\t\tString error = StreamUtils.copyToString(response.getBody(), StandardCharsets.UTF_8);\n\t\t\t\t\tString message = String.format(\"%s - %s\", response.getStatusCode().value(), error);\n\n\t\t\t\t\t// Explicitly configured transient codes\n\t\t\t\t\tif (properties.getOnHttpCodes().contains(response.getStatusCode().value())) {\n\t\t\t\t\t\tthrow new TransientAiException(message);\n\t\t\t\t\t}\n\n\t\t\t\t\t// onClientErrors - If true, do not throw a NonTransientAiException,\n\t\t\t\t\t// and do not attempt retry for 4xx client error codes, false by\n\t\t\t\t\t// default.\n\t\t\t\t\tif (!properties.isOnClientErrors() && response.getStatusCode().is4xxClientError()) {\n\t\t\t\t\t\tthrow new NonTransientAiException(message);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Explicitly configured non-transient codes\n\t\t\t\t\tif (!CollectionUtils.isEmpty(properties.getExcludeOnHttpCodes())\n\t\t\t\t\t\t\t&& properties.getExcludeOnHttpCodes().contains(response.getStatusCode().value())) {\n\t\t\t\t\t\tthrow new NonTransientAiException(message);\n\t\t\t\t\t}\n\t\t\t\t\tthrow new TransientAiException(message);\n\t\t\t\t}\n\t\t\t}\n\t\t};",
                "is_abstract": "",
                "class_name": "SpringAiRetryAutoConfiguration",
                "annotations": []
            },
            {
                "name": "hasError",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return response.getStatusCode().isError();",
                "is_abstract": "",
                "class_name": "SpringAiRetryAutoConfiguration",
                "annotations": []
            },
            {
                "name": "handleError",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (response.getStatusCode().isError()) {\n\t\t\t\t\tString error = StreamUtils.copyToString(response.getBody(), StandardCharsets.UTF_8);\n\t\t\t\t\tString message = String.format(\"%s - %s\", response.getStatusCode().value(), error);\n\n\t\t\t\t\t// Explicitly configured transient codes\n\t\t\t\t\tif (properties.getOnHttpCodes().contains(response.getStatusCode().value())) {\n\t\t\t\t\t\tthrow new TransientAiException(message);\n\t\t\t\t\t}\n\n\t\t\t\t\t// onClientErrors - If true, do not throw a NonTransientAiException,\n\t\t\t\t\t// and do not attempt retry for 4xx client error codes, false by\n\t\t\t\t\t// default.\n\t\t\t\t\tif (!properties.isOnClientErrors() && response.getStatusCode().is4xxClientError()) {\n\t\t\t\t\t\tthrow new NonTransientAiException(message);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Explicitly configured non-transient codes\n\t\t\t\t\tif (!CollectionUtils.isEmpty(properties.getExcludeOnHttpCodes())\n\t\t\t\t\t\t\t&& properties.getExcludeOnHttpCodes().contains(response.getStatusCode().value())) {\n\t\t\t\t\t\tthrow new NonTransientAiException(message);\n\t\t\t\t\t}\n\t\t\t\t\tthrow new TransientAiException(message);\n\t\t\t\t}",
                "is_abstract": "",
                "class_name": "SpringAiRetryAutoConfiguration",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/azure/openai/AzureOpenAiAutoConfiguration.java",
        "class_names": [
            "AzureOpenAiAutoConfiguration"
        ],
        "imports": "import org.springframework.context.ApplicationContext;\nimport java.util.List;\nimport org.springframework.util.Assert;\nimport org.springframework.ai.azure.openai.AzureOpenAiChatClient;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.util.CollectionUtils;\nimport com.azure.ai.openai.OpenAIClientBuilder;\nimport org.springframework.ai.azure.openai.AzureOpenAiEmbeddingClient;\nimport org.springframework.ai.model.function.FunctionCallback;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.ai.model.function.FunctionCallbackContext;\nimport com.azure.core.credential.AzureKeyCredential;\nimport com.azure.ai.openai.OpenAIClient;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport com.azure.core.util.ClientOptions;\nimport org.springframework.boot.autoconfigure.AutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.azure.openai.AzureOpenAiAutoConfiguration": "org.springframework.ai.autoconfigure.azure.openai.AzureOpenAiAutoConfiguration",
            "org.springframework.ai.autoconfigure.azure.openai.openAIClient": "org.springframework.ai.autoconfigure.azure.openai.openAIClient",
            "org.springframework.ai.autoconfigure.azure.openai.ConditionalOnProperty": "org.springframework.ai.autoconfigure.azure.openai.ConditionalOnProperty",
            "org.springframework.ai.autoconfigure.azure.openai.springAiFunctionManager": "org.springframework.ai.autoconfigure.azure.openai.springAiFunctionManager"
        },
        "package": "package org.springframework.ai.autoconfigure.azure.openai;",
        "property_declarations": [],
        "functions": [
            {
                "name": "openAIClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.hasText(connectionProperties.getApiKey(), \"API key must not be empty\");\n\t\tAssert.hasText(connectionProperties.getEndpoint(), \"Endpoint must not be empty\");\n\n\t\treturn new OpenAIClientBuilder().endpoint(connectionProperties.getEndpoint())\n\t\t\t.credential(new AzureKeyCredential(connectionProperties.getApiKey()))\n\t\t\t.clientOptions(new ClientOptions().setApplicationId(\"spring-ai\"))\n\t\t\t.buildClient();",
                "is_abstract": "",
                "class_name": "AzureOpenAiAutoConfiguration",
                "annotations": []
            },
            {
                "name": "ConditionalOnProperty",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (!CollectionUtils.isEmpty(toolFunctionCallbacks)) {\n\t\t\tchatProperties.getOptions().getFunctionCallbacks().addAll(toolFunctionCallbacks);\n\t\t}\n\n\t\tAzureOpenAiChatClient azureOpenAiChatClient = new AzureOpenAiChatClient(openAIClient,\n\t\t\t\tchatProperties.getOptions(), functionCallbackContext);\n\n\t\treturn azureOpenAiChatClient;",
                "is_abstract": "",
                "class_name": "AzureOpenAiAutoConfiguration",
                "annotations": [
                    "@ConditionalOnProperty(prefix = AzureOpenAiChatProperties.CONFIG_PREFIX, name = \"enabled\", havingValue = \"true\",\n\t\t\tmatchIfMissing = true)"
                ]
            },
            {
                "name": "springAiFunctionManager",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "FunctionCallbackContext manager = new FunctionCallbackContext();\n\t\tmanager.setApplicationContext(context);\n\t\treturn manager;",
                "is_abstract": "",
                "class_name": "AzureOpenAiAutoConfiguration",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/azure/openai/AzureOpenAiChatProperties.java",
        "class_names": [
            "AzureOpenAiChatProperties"
        ],
        "imports": "import org.springframework.boot.context.properties.NestedConfigurationProperty;\nimport org.springframework.ai.azure.openai.AzureOpenAiChatOptions;\nimport org.springframework.boot.context.properties.ConfigurationProperties;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.azure.openai.AzureOpenAiChatProperties": "org.springframework.ai.autoconfigure.azure.openai.AzureOpenAiChatProperties",
            "org.springframework.ai.autoconfigure.azure.openai.getOptions": "org.springframework.ai.autoconfigure.azure.openai.getOptions",
            "org.springframework.ai.autoconfigure.azure.openai.setOptions": "org.springframework.ai.autoconfigure.azure.openai.setOptions",
            "org.springframework.ai.autoconfigure.azure.openai.isEnabled": "org.springframework.ai.autoconfigure.azure.openai.isEnabled",
            "org.springframework.ai.autoconfigure.azure.openai.setEnabled": "org.springframework.ai.autoconfigure.azure.openai.setEnabled",
            "org.springframework.ai.autoconfigure.azure.openai.CONFIG_PREFIX": "org.springframework.ai.autoconfigure.azure.openai.CONFIG_PREFIX",
            "org.springframework.ai.autoconfigure.azure.openai.DEFAULT_DEPLOYMENT_NAME": "org.springframework.ai.autoconfigure.azure.openai.DEFAULT_DEPLOYMENT_NAME",
            "org.springframework.ai.autoconfigure.azure.openai.DEFAULT_TEMPERATURE": "org.springframework.ai.autoconfigure.azure.openai.DEFAULT_TEMPERATURE",
            "org.springframework.ai.autoconfigure.azure.openai.enabled": "org.springframework.ai.autoconfigure.azure.openai.enabled",
            "org.springframework.ai.autoconfigure.azure.openai.privat": "org.springframework.ai.autoconfigure.azure.openai.privat"
        },
        "package": "package org.springframework.ai.autoconfigure.azure.openai;",
        "property_declarations": [
            "@NestedConfigurationProperty\n\tprivate AzureOpenAiChatOptions options = AzureOpenAiChatOptions.builder()\n\t\t.withDeploymentName(DEFAULT_DEPLOYMENT_NAME)\n\t\t.withTemperature(DEFAULT_TEMPERATURE.floatValue())\n\t\t.build();",
            "private static final Double DEFAULT_TEMPERATURE = 0.7;",
            "private boolean enabled = true;",
            "public static final String CONFIG_PREFIX = \"spring.ai.azure.openai.chat\";",
            "public static final String DEFAULT_DEPLOYMENT_NAME = \"gpt-35-turbo\";"
        ],
        "functions": [
            {
                "name": "getOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.options;",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatProperties",
                "annotations": []
            },
            {
                "name": "setOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options = options;",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatProperties",
                "annotations": []
            },
            {
                "name": "isEnabled",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.enabled;",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatProperties",
                "annotations": []
            },
            {
                "name": "setEnabled",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.enabled = enabled;",
                "is_abstract": "",
                "class_name": "AzureOpenAiChatProperties",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/azure/openai/AzureOpenAiEmbeddingProperties.java",
        "class_names": [
            "AzureOpenAiEmbeddingProperties"
        ],
        "imports": "import org.springframework.ai.azure.openai.AzureOpenAiEmbeddingOptions;\nimport org.springframework.ai.document.MetadataMode;\nimport org.springframework.util.Assert;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.boot.context.properties.NestedConfigurationProperty;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.azure.openai.AzureOpenAiEmbeddingProperties": "org.springframework.ai.autoconfigure.azure.openai.AzureOpenAiEmbeddingProperties",
            "org.springframework.ai.autoconfigure.azure.openai.getOptions": "org.springframework.ai.autoconfigure.azure.openai.getOptions",
            "org.springframework.ai.autoconfigure.azure.openai.setOptions": "org.springframework.ai.autoconfigure.azure.openai.setOptions",
            "org.springframework.ai.autoconfigure.azure.openai.getMetadataMod": "org.springframework.ai.autoconfigure.azure.openai.getMetadataMod",
            "org.springframework.ai.autoconfigure.azure.openai.setMetadataMod": "org.springframework.ai.autoconfigure.azure.openai.setMetadataMod",
            "org.springframework.ai.autoconfigure.azure.openai.isEnabled": "org.springframework.ai.autoconfigure.azure.openai.isEnabled",
            "org.springframework.ai.autoconfigure.azure.openai.setEnabled": "org.springframework.ai.autoconfigure.azure.openai.setEnabled",
            "org.springframework.ai.autoconfigure.azure.openai.CONFIG_PREFIX": "org.springframework.ai.autoconfigure.azure.openai.CONFIG_PREFIX",
            "org.springframework.ai.autoconfigure.azure.openai.enabled": "org.springframework.ai.autoconfigure.azure.openai.enabled",
            "org.springframework.ai.autoconfigure.azure.openai.privat": "org.springframework.ai.autoconfigure.azure.openai.privat",
            "org.springframework.ai.autoconfigure.azure.openai.metadataMod": "org.springframework.ai.autoconfigure.azure.openai.metadataMod"
        },
        "package": "package org.springframework.ai.autoconfigure.azure.openai;",
        "property_declarations": [
            "public static final String CONFIG_PREFIX = \"spring.ai.azure.openai.embedding\";",
            "@NestedConfigurationProperty\n\tprivate AzureOpenAiEmbeddingOptions options = AzureOpenAiEmbeddingOptions.builder()\n\t\t.withDeploymentName(\"text-embedding-ada-002\")\n\t\t.build();",
            "private boolean enabled = true;",
            "private MetadataMode metadataMode = MetadataMode.EMBED;"
        ],
        "functions": [
            {
                "name": "getOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return options;",
                "is_abstract": "",
                "class_name": "AzureOpenAiEmbeddingProperties",
                "annotations": []
            },
            {
                "name": "setOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(options, \"Options must not be null\");\n\t\tthis.options = options;",
                "is_abstract": "",
                "class_name": "AzureOpenAiEmbeddingProperties",
                "annotations": []
            },
            {
                "name": "getMetadataMode",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return metadataMode;",
                "is_abstract": "",
                "class_name": "AzureOpenAiEmbeddingProperties",
                "annotations": []
            },
            {
                "name": "setMetadataMode",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(metadataMode, \"Metadata mode must not be null\");\n\t\tthis.metadataMode = metadataMode;",
                "is_abstract": "",
                "class_name": "AzureOpenAiEmbeddingProperties",
                "annotations": []
            },
            {
                "name": "isEnabled",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return enabled;",
                "is_abstract": "",
                "class_name": "AzureOpenAiEmbeddingProperties",
                "annotations": []
            },
            {
                "name": "setEnabled",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.enabled = enabled;",
                "is_abstract": "",
                "class_name": "AzureOpenAiEmbeddingProperties",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/azure/openai/AzureOpenAiConnectionProperties.java",
        "class_names": [
            "AzureOpenAiConnectionProperties"
        ],
        "imports": "import org.springframework.boot.context.properties.ConfigurationProperties;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.azure.openai.AzureOpenAiConnectionProperties": "org.springframework.ai.autoconfigure.azure.openai.AzureOpenAiConnectionProperties",
            "org.springframework.ai.autoconfigure.azure.openai.getEndpoint": "org.springframework.ai.autoconfigure.azure.openai.getEndpoint",
            "org.springframework.ai.autoconfigure.azure.openai.setEndpoint": "org.springframework.ai.autoconfigure.azure.openai.setEndpoint",
            "org.springframework.ai.autoconfigure.azure.openai.setApiKey": "org.springframework.ai.autoconfigure.azure.openai.setApiKey",
            "org.springframework.ai.autoconfigure.azure.openai.getApiKey": "org.springframework.ai.autoconfigure.azure.openai.getApiKey",
            "org.springframework.ai.autoconfigure.azure.openai.CONFIG_PREFIX": "org.springframework.ai.autoconfigure.azure.openai.CONFIG_PREFIX",
            "org.springframework.ai.autoconfigure.azure.openai.apiKey": "org.springframework.ai.autoconfigure.azure.openai.apiKey",
            "org.springframework.ai.autoconfigure.azure.openai.endpoint": "org.springframework.ai.autoconfigure.azure.openai.endpoint"
        },
        "package": "package org.springframework.ai.autoconfigure.azure.openai;",
        "property_declarations": [
            "private String apiKey;",
            "private String endpoint;",
            "public static final String CONFIG_PREFIX = \"spring.ai.azure.openai\";"
        ],
        "functions": [
            {
                "name": "getEndpoint",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return endpoint;",
                "is_abstract": "",
                "class_name": "AzureOpenAiConnectionProperties",
                "annotations": []
            },
            {
                "name": "setEndpoint",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.endpoint = endpoint;",
                "is_abstract": "",
                "class_name": "AzureOpenAiConnectionProperties",
                "annotations": []
            },
            {
                "name": "setApiKey",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.apiKey = apiKey;",
                "is_abstract": "",
                "class_name": "AzureOpenAiConnectionProperties",
                "annotations": []
            },
            {
                "name": "getApiKey",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return apiKey;",
                "is_abstract": "",
                "class_name": "AzureOpenAiConnectionProperties",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/postgresml/PostgresMlEmbeddingProperties.java",
        "class_names": [
            "PostgresMlEmbeddingProperties"
        ],
        "imports": "import org.springframework.ai.document.MetadataMode;\nimport org.springframework.ai.postgresml.PostgresMlEmbeddingOptions;\nimport org.springframework.util.Assert;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport java.util.Map;\nimport org.springframework.ai.postgresml.PostgresMlEmbeddingClient;\nimport org.springframework.boot.context.properties.NestedConfigurationProperty;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.postgresml.PostgresMlEmbeddingProperties": "org.springframework.ai.autoconfigure.postgresml.PostgresMlEmbeddingProperties",
            "org.springframework.ai.autoconfigure.postgresml.getOptions": "org.springframework.ai.autoconfigure.postgresml.getOptions",
            "org.springframework.ai.autoconfigure.postgresml.setOptions": "org.springframework.ai.autoconfigure.postgresml.setOptions",
            "org.springframework.ai.autoconfigure.postgresml.isEnabled": "org.springframework.ai.autoconfigure.postgresml.isEnabled",
            "org.springframework.ai.autoconfigure.postgresml.setEnabled": "org.springframework.ai.autoconfigure.postgresml.setEnabled",
            "org.springframework.ai.autoconfigure.postgresml.CONFIG_PREFIX": "org.springframework.ai.autoconfigure.postgresml.CONFIG_PREFIX",
            "org.springframework.ai.autoconfigure.postgresml.enabled": "org.springframework.ai.autoconfigure.postgresml.enabled",
            "org.springframework.ai.autoconfigure.postgresml.privat": "org.springframework.ai.autoconfigure.postgresml.privat"
        },
        "package": "package org.springframework.ai.autoconfigure.postgresml;",
        "property_declarations": [
            "@NestedConfigurationProperty\n\tprivate PostgresMlEmbeddingOptions options = PostgresMlEmbeddingOptions.builder()\n\t\t.withTransformer(PostgresMlEmbeddingClient.DEFAULT_TRANSFORMER_MODEL)\n\t\t.withVectorType(PostgresMlEmbeddingClient.VectorType.PG_ARRAY)\n\t\t.withKwargs(Map.of())\n\t\t.withMetadataMode(MetadataMode.EMBED)\n\t\t.build();",
            "private boolean enabled = true;",
            "public static final String CONFIG_PREFIX = \"spring.ai.postgresml.embedding\";"
        ],
        "functions": [
            {
                "name": "getOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.options;",
                "is_abstract": "",
                "class_name": "PostgresMlEmbeddingProperties",
                "annotations": []
            },
            {
                "name": "setOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(options, \"options must not be null.\");\n\t\tAssert.notNull(options.getTransformer(), \"transformer must not be null.\");\n\t\tAssert.notNull(options.getVectorType(), \"vectorType must not be null.\");\n\t\tAssert.notNull(options.getKwargs(), \"kwargs must not be null.\");\n\t\tAssert.notNull(options.getMetadataMode(), \"metadataMode must not be null.\");\n\n\t\tthis.options = options;",
                "is_abstract": "",
                "class_name": "PostgresMlEmbeddingProperties",
                "annotations": []
            },
            {
                "name": "isEnabled",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.enabled;",
                "is_abstract": "",
                "class_name": "PostgresMlEmbeddingProperties",
                "annotations": []
            },
            {
                "name": "setEnabled",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.enabled = enabled;",
                "is_abstract": "",
                "class_name": "PostgresMlEmbeddingProperties",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/postgresml/PostgresMlAutoConfiguration.java",
        "class_names": [
            "PostgresMlAutoConfiguration"
        ],
        "imports": "import org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.ai.postgresml.PostgresMlEmbeddingClient;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.AutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.postgresml.PostgresMlAutoConfiguration": "org.springframework.ai.autoconfigure.postgresml.PostgresMlAutoConfiguration",
            "org.springframework.ai.autoconfigure.postgresml.ConditionalOnProperty": "org.springframework.ai.autoconfigure.postgresml.ConditionalOnProperty"
        },
        "package": "package org.springframework.ai.autoconfigure.postgresml;",
        "property_declarations": [],
        "functions": [
            {
                "name": "ConditionalOnProperty",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new PostgresMlEmbeddingClient(jdbcTemplate, embeddingProperties.getOptions());",
                "is_abstract": "",
                "class_name": "PostgresMlAutoConfiguration",
                "annotations": [
                    "@ConditionalOnProperty(prefix = PostgresMlEmbeddingProperties.CONFIG_PREFIX, name = \"enabled\", havingValue = \"true\",\n\t\t\tmatchIfMissing = true)"
                ]
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/stabilityai/StabilityAiParentProperties.java",
        "class_names": [
            "StabilityAiParentProperties"
        ],
        "imports": "",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.stabilityai.StabilityAiParentProperties": "org.springframework.ai.autoconfigure.stabilityai.StabilityAiParentProperties",
            "org.springframework.ai.autoconfigure.stabilityai.getApiKey": "org.springframework.ai.autoconfigure.stabilityai.getApiKey",
            "org.springframework.ai.autoconfigure.stabilityai.setApiKey": "org.springframework.ai.autoconfigure.stabilityai.setApiKey",
            "org.springframework.ai.autoconfigure.stabilityai.getBaseUrl": "org.springframework.ai.autoconfigure.stabilityai.getBaseUrl",
            "org.springframework.ai.autoconfigure.stabilityai.setBaseUrl": "org.springframework.ai.autoconfigure.stabilityai.setBaseUrl",
            "org.springframework.ai.autoconfigure.stabilityai.apiKey": "org.springframework.ai.autoconfigure.stabilityai.apiKey",
            "org.springframework.ai.autoconfigure.stabilityai.baseUrl": "org.springframework.ai.autoconfigure.stabilityai.baseUrl"
        },
        "package": "package org.springframework.ai.autoconfigure.stabilityai;",
        "property_declarations": [
            "private String baseUrl;",
            "private String apiKey;"
        ],
        "functions": [
            {
                "name": "getApiKey",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return apiKey;",
                "is_abstract": "",
                "class_name": "StabilityAiParentProperties",
                "annotations": []
            },
            {
                "name": "setApiKey",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.apiKey = apiKey;",
                "is_abstract": "",
                "class_name": "StabilityAiParentProperties",
                "annotations": []
            },
            {
                "name": "getBaseUrl",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return baseUrl;",
                "is_abstract": "",
                "class_name": "StabilityAiParentProperties",
                "annotations": []
            },
            {
                "name": "setBaseUrl",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.baseUrl = baseUrl;",
                "is_abstract": "",
                "class_name": "StabilityAiParentProperties",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/stabilityai/StabilityAiConnectionProperties.java",
        "class_names": [
            "StabilityAiConnectionProperties"
        ],
        "imports": "import org.springframework.ai.stabilityai.api.StabilityAiApi;\nimport org.springframework.boot.context.properties.ConfigurationProperties;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.stabilityai.StabilityAiConnectionProperties": "org.springframework.ai.autoconfigure.stabilityai.StabilityAiConnectionProperties",
            "org.springframework.ai.autoconfigure.stabilityai.CONFIG_PREFIX": "org.springframework.ai.autoconfigure.stabilityai.CONFIG_PREFIX",
            "org.springframework.ai.autoconfigure.stabilityai.DEFAULT_BASE_URL": "org.springframework.ai.autoconfigure.stabilityai.DEFAULT_BASE_URL"
        },
        "package": "package org.springframework.ai.autoconfigure.stabilityai;",
        "property_declarations": [
            "public static final String CONFIG_PREFIX = \"spring.ai.stabilityai\";",
            "public static final String DEFAULT_BASE_URL = StabilityAiApi.DEFAULT_BASE_URL;"
        ],
        "functions": []
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/stabilityai/StabilityAiImageProperties.java",
        "class_names": [
            "StabilityAiImageProperties"
        ],
        "imports": "import org.springframework.boot.context.properties.NestedConfigurationProperty;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.ai.stabilityai.api.StabilityAiImageOptions;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.stabilityai.StabilityAiImageProperties": "org.springframework.ai.autoconfigure.stabilityai.StabilityAiImageProperties",
            "org.springframework.ai.autoconfigure.stabilityai.getOptions": "org.springframework.ai.autoconfigure.stabilityai.getOptions",
            "org.springframework.ai.autoconfigure.stabilityai.setOptions": "org.springframework.ai.autoconfigure.stabilityai.setOptions",
            "org.springframework.ai.autoconfigure.stabilityai.isEnabled": "org.springframework.ai.autoconfigure.stabilityai.isEnabled",
            "org.springframework.ai.autoconfigure.stabilityai.setEnabled": "org.springframework.ai.autoconfigure.stabilityai.setEnabled",
            "org.springframework.ai.autoconfigure.stabilityai.CONFIG_PREFIX": "org.springframework.ai.autoconfigure.stabilityai.CONFIG_PREFIX",
            "org.springframework.ai.autoconfigure.stabilityai.enabled": "org.springframework.ai.autoconfigure.stabilityai.enabled",
            "org.springframework.ai.autoconfigure.stabilityai.privat": "org.springframework.ai.autoconfigure.stabilityai.privat"
        },
        "package": "package org.springframework.ai.autoconfigure.stabilityai;",
        "property_declarations": [
            "private boolean enabled = true;",
            "@NestedConfigurationProperty\n\tprivate StabilityAiImageOptions options = StabilityAiImageOptions.builder().build();",
            "public static final String CONFIG_PREFIX = \"spring.ai.stabilityai.image\";"
        ],
        "functions": [
            {
                "name": "getOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.options;",
                "is_abstract": "",
                "class_name": "StabilityAiImageProperties",
                "annotations": []
            },
            {
                "name": "setOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options = options;",
                "is_abstract": "",
                "class_name": "StabilityAiImageProperties",
                "annotations": []
            },
            {
                "name": "isEnabled",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.enabled;",
                "is_abstract": "",
                "class_name": "StabilityAiImageProperties",
                "annotations": []
            },
            {
                "name": "setEnabled",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.enabled = enabled;",
                "is_abstract": "",
                "class_name": "StabilityAiImageProperties",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/stabilityai/StabilityAiImageAutoConfiguration.java",
        "class_names": [
            "StabilityAiImageAutoConfiguration"
        ],
        "imports": "import org.springframework.util.StringUtils;\nimport org.springframework.ai.stabilityai.StabilityAiImageClient;\nimport org.springframework.util.Assert;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.boot.autoconfigure.web.client.RestClientAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.ai.stabilityai.api.StabilityAiApi;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.AutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.stabilityai.StabilityAiImageAutoConfiguration": "org.springframework.ai.autoconfigure.stabilityai.StabilityAiImageAutoConfiguration",
            "org.springframework.ai.autoconfigure.stabilityai.stabilityAiApi": "org.springframework.ai.autoconfigure.stabilityai.stabilityAiApi",
            "org.springframework.ai.autoconfigure.stabilityai.ConditionalOnProperty": "org.springframework.ai.autoconfigure.stabilityai.ConditionalOnProperty"
        },
        "package": "package org.springframework.ai.autoconfigure.stabilityai;",
        "property_declarations": [],
        "functions": [
            {
                "name": "stabilityAiApi",
                "parameters": [
                    ""
                ],
                "return_type": "commonProperties",
                "body": "String apiKey = StringUtils.hasText(imageProperties.getApiKey()) ? imageProperties.getApiKey()\n\t\t\t\t: commonProperties.getApiKey();\n\n\t\tString baseUrl = StringUtils.hasText(imageProperties.getBaseUrl()) ? imageProperties.getBaseUrl()\n\t\t\t\t: commonProperties.getBaseUrl();\n\n\t\tAssert.hasText(apiKey, \"StabilityAI API key must be set\");\n\t\tAssert.hasText(baseUrl, \"StabilityAI base URL must be set\");\n\n\t\treturn new StabilityAiApi(apiKey, imageProperties.getOptions().getModel(), baseUrl);",
                "is_abstract": "",
                "class_name": "StabilityAiImageAutoConfiguration",
                "annotations": []
            },
            {
                "name": "ConditionalOnProperty",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new StabilityAiImageClient(stabilityAiApi, stabilityAiImageProperties.getOptions());",
                "is_abstract": "",
                "class_name": "StabilityAiImageAutoConfiguration",
                "annotations": [
                    "@ConditionalOnProperty(prefix = StabilityAiImageProperties.CONFIG_PREFIX, name = \"enabled\", havingValue = \"true\",\n\t\t\tmatchIfMissing = true)"
                ]
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/bedrock/BedrockAwsConnectionConfiguration.java",
        "class_names": [
            "BedrockAwsConnectionConfiguration"
        ],
        "imports": "import software.amazon.awssdk.auth.credentials.DefaultCredentialsProvider;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport software.amazon.awssdk.auth.credentials.AwsBasicCredentials;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.util.StringUtils;\nimport software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\nimport software.amazon.awssdk.auth.credentials.StaticCredentialsProvider;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.bedrock.BedrockAwsConnectionConfiguration": "org.springframework.ai.autoconfigure.bedrock.BedrockAwsConnectionConfiguration",
            "org.springframework.ai.autoconfigure.bedrock.credentialsProvider": "org.springframework.ai.autoconfigure.bedrock.credentialsProvider"
        },
        "package": "package org.springframework.ai.autoconfigure.bedrock;",
        "property_declarations": [],
        "functions": [
            {
                "name": "credentialsProvider",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (StringUtils.hasText(properties.getAccessKey()) && StringUtils.hasText(properties.getSecretKey())) {\n\t\t\treturn StaticCredentialsProvider\n\t\t\t\t.create(AwsBasicCredentials.create(properties.getAccessKey(), properties.getSecretKey()));\n\t\t}\n\n\t\treturn DefaultCredentialsProvider.create();",
                "is_abstract": "",
                "class_name": "BedrockAwsConnectionConfiguration",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/bedrock/BedrockAwsConnectionProperties.java",
        "class_names": [
            "BedrockAwsConnectionProperties"
        ],
        "imports": "import org.springframework.boot.context.properties.ConfigurationProperties;\nimport java.time.Duration;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.bedrock.BedrockAwsConnectionProperties": "org.springframework.ai.autoconfigure.bedrock.BedrockAwsConnectionProperties",
            "org.springframework.ai.autoconfigure.bedrock.getRegion": "org.springframework.ai.autoconfigure.bedrock.getRegion",
            "org.springframework.ai.autoconfigure.bedrock.setRegion": "org.springframework.ai.autoconfigure.bedrock.setRegion",
            "org.springframework.ai.autoconfigure.bedrock.getAccessKey": "org.springframework.ai.autoconfigure.bedrock.getAccessKey",
            "org.springframework.ai.autoconfigure.bedrock.setAccessKey": "org.springframework.ai.autoconfigure.bedrock.setAccessKey",
            "org.springframework.ai.autoconfigure.bedrock.getSecretKey": "org.springframework.ai.autoconfigure.bedrock.getSecretKey",
            "org.springframework.ai.autoconfigure.bedrock.setSecretKey": "org.springframework.ai.autoconfigure.bedrock.setSecretKey",
            "org.springframework.ai.autoconfigure.bedrock.getTimeout": "org.springframework.ai.autoconfigure.bedrock.getTimeout",
            "org.springframework.ai.autoconfigure.bedrock.setTimeout": "org.springframework.ai.autoconfigure.bedrock.setTimeout",
            "org.springframework.ai.autoconfigure.bedrock.CONFIG_PREFIX": "org.springframework.ai.autoconfigure.bedrock.CONFIG_PREFIX",
            "org.springframework.ai.autoconfigure.bedrock.region": "org.springframework.ai.autoconfigure.bedrock.region",
            "org.springframework.ai.autoconfigure.bedrock.accessKey": "org.springframework.ai.autoconfigure.bedrock.accessKey",
            "org.springframework.ai.autoconfigure.bedrock.secretKey": "org.springframework.ai.autoconfigure.bedrock.secretKey",
            "org.springframework.ai.autoconfigure.bedrock.timeout": "org.springframework.ai.autoconfigure.bedrock.timeout"
        },
        "package": "package org.springframework.ai.autoconfigure.bedrock;",
        "property_declarations": [
            "private String secretKey;",
            "private String accessKey;",
            "private String region = \"us-east-1\";",
            "public static final String CONFIG_PREFIX = \"spring.ai.bedrock.aws\";",
            "private Duration timeout = Duration.ofMinutes(5L);"
        ],
        "functions": [
            {
                "name": "getRegion",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return region;",
                "is_abstract": "",
                "class_name": "BedrockAwsConnectionProperties",
                "annotations": []
            },
            {
                "name": "setRegion",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.region = awsRegion;",
                "is_abstract": "",
                "class_name": "BedrockAwsConnectionProperties",
                "annotations": []
            },
            {
                "name": "getAccessKey",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return accessKey;",
                "is_abstract": "",
                "class_name": "BedrockAwsConnectionProperties",
                "annotations": []
            },
            {
                "name": "setAccessKey",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.accessKey = accessKey;",
                "is_abstract": "",
                "class_name": "BedrockAwsConnectionProperties",
                "annotations": []
            },
            {
                "name": "getSecretKey",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return secretKey;",
                "is_abstract": "",
                "class_name": "BedrockAwsConnectionProperties",
                "annotations": []
            },
            {
                "name": "setSecretKey",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.secretKey = secretKey;",
                "is_abstract": "",
                "class_name": "BedrockAwsConnectionProperties",
                "annotations": []
            },
            {
                "name": "getTimeout",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return timeout;",
                "is_abstract": "",
                "class_name": "BedrockAwsConnectionProperties",
                "annotations": []
            },
            {
                "name": "setTimeout",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.timeout = timeout;",
                "is_abstract": "",
                "class_name": "BedrockAwsConnectionProperties",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/bedrock/jurrasic2/BedrockAi21Jurassic2ChatProperties.java",
        "class_names": [
            "BedrockAi21Jurassic2ChatProperties"
        ],
        "imports": "import org.springframework.ai.bedrock.jurassic2.BedrockAi21Jurassic2ChatOptions;\nimport org.springframework.boot.context.properties.NestedConfigurationProperty;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.ai.bedrock.jurassic2.api.Ai21Jurassic2ChatBedrockApi.Ai21Jurassic2ChatModel;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.bedrock.jurrasic2.BedrockAi21Jurassic2ChatProperties": "org.springframework.ai.autoconfigure.bedrock.jurrasic2.BedrockAi21Jurassic2ChatProperties",
            "org.springframework.ai.autoconfigure.bedrock.jurrasic2.isEnabled": "org.springframework.ai.autoconfigure.bedrock.jurrasic2.isEnabled",
            "org.springframework.ai.autoconfigure.bedrock.jurrasic2.setEnabled": "org.springframework.ai.autoconfigure.bedrock.jurrasic2.setEnabled",
            "org.springframework.ai.autoconfigure.bedrock.jurrasic2.getModel": "org.springframework.ai.autoconfigure.bedrock.jurrasic2.getModel",
            "org.springframework.ai.autoconfigure.bedrock.jurrasic2.setModel": "org.springframework.ai.autoconfigure.bedrock.jurrasic2.setModel",
            "org.springframework.ai.autoconfigure.bedrock.jurrasic2.getOptions": "org.springframework.ai.autoconfigure.bedrock.jurrasic2.getOptions",
            "org.springframework.ai.autoconfigure.bedrock.jurrasic2.setOptions": "org.springframework.ai.autoconfigure.bedrock.jurrasic2.setOptions",
            "org.springframework.ai.autoconfigure.bedrock.jurrasic2.CONFIG_PREFIX": "org.springframework.ai.autoconfigure.bedrock.jurrasic2.CONFIG_PREFIX",
            "org.springframework.ai.autoconfigure.bedrock.jurrasic2.enabled": "org.springframework.ai.autoconfigure.bedrock.jurrasic2.enabled",
            "org.springframework.ai.autoconfigure.bedrock.jurrasic2.model": "org.springframework.ai.autoconfigure.bedrock.jurrasic2.model",
            "org.springframework.ai.autoconfigure.bedrock.jurrasic2.privat": "org.springframework.ai.autoconfigure.bedrock.jurrasic2.privat"
        },
        "package": "package org.springframework.ai.autoconfigure.bedrock.jurrasic2;",
        "property_declarations": [
            "private String model = Ai21Jurassic2ChatModel.AI21_J2_MID_V1.id();",
            "@NestedConfigurationProperty\n\tprivate BedrockAi21Jurassic2ChatOptions options = BedrockAi21Jurassic2ChatOptions.builder()\n\t\t.withTemperature(0.7f)\n\t\t.withMaxTokens(500)\n\t\t.build();",
            "private boolean enabled = false;",
            "public static final String CONFIG_PREFIX = \"spring.ai.bedrock.jurassic2.chat\";"
        ],
        "functions": [
            {
                "name": "isEnabled",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.enabled;",
                "is_abstract": "",
                "class_name": "BedrockAi21Jurassic2ChatProperties",
                "annotations": []
            },
            {
                "name": "setEnabled",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.enabled = enabled;",
                "is_abstract": "",
                "class_name": "BedrockAi21Jurassic2ChatProperties",
                "annotations": []
            },
            {
                "name": "getModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.model;",
                "is_abstract": "",
                "class_name": "BedrockAi21Jurassic2ChatProperties",
                "annotations": []
            },
            {
                "name": "setModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.model = model;",
                "is_abstract": "",
                "class_name": "BedrockAi21Jurassic2ChatProperties",
                "annotations": []
            },
            {
                "name": "getOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.options;",
                "is_abstract": "",
                "class_name": "BedrockAi21Jurassic2ChatProperties",
                "annotations": []
            },
            {
                "name": "setOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options = options;",
                "is_abstract": "",
                "class_name": "BedrockAi21Jurassic2ChatProperties",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/bedrock/jurrasic2/BedrockAi21Jurassic2ChatAutoConfiguration.java",
        "class_names": [
            "BedrockAi21Jurassic2ChatAutoConfiguration"
        ],
        "imports": "import org.springframework.ai.autoconfigure.bedrock.BedrockAwsConnectionConfiguration;\nimport org.springframework.context.annotation.Import;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.ai.bedrock.jurassic2.api.Ai21Jurassic2ChatBedrockApi;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.ai.autoconfigure.bedrock.BedrockAwsConnectionProperties;\nimport org.springframework.ai.bedrock.jurassic2.BedrockAi21Jurassic2ChatClient;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\nimport org.springframework.boot.autoconfigure.AutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.bedrock.jurrasic2.BedrockAi21Jurassic2ChatAutoConfiguration": "org.springframework.ai.autoconfigure.bedrock.jurrasic2.BedrockAi21Jurassic2ChatAutoConfiguration",
            "org.springframework.ai.autoconfigure.bedrock.jurrasic2.ai21Jurassic2ChatBedrockApi": "org.springframework.ai.autoconfigure.bedrock.jurrasic2.ai21Jurassic2ChatBedrockApi",
            "org.springframework.ai.autoconfigure.bedrock.jurrasic2.jurassic2ChatClient": "org.springframework.ai.autoconfigure.bedrock.jurrasic2.jurassic2ChatClient"
        },
        "package": "package org.springframework.ai.autoconfigure.bedrock.jurrasic2;",
        "property_declarations": [],
        "functions": [
            {
                "name": "ai21Jurassic2ChatBedrockApi",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Ai21Jurassic2ChatBedrockApi(properties.getModel(), credentialsProvider, awsProperties.getRegion(),\n\t\t\t\tnew ObjectMapper(), awsProperties.getTimeout());",
                "is_abstract": "",
                "class_name": "BedrockAi21Jurassic2ChatAutoConfiguration",
                "annotations": []
            },
            {
                "name": "jurassic2ChatClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return BedrockAi21Jurassic2ChatClient.builder(ai21Jurassic2ChatBedrockApi)\n\t\t\t.withOptions(properties.getOptions())\n\t\t\t.build();",
                "is_abstract": "",
                "class_name": "BedrockAi21Jurassic2ChatAutoConfiguration",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/bedrock/cohere/BedrockCohereChatAutoConfiguration.java",
        "class_names": [
            "BedrockCohereChatAutoConfiguration"
        ],
        "imports": "import org.springframework.ai.autoconfigure.bedrock.BedrockAwsConnectionConfiguration;\nimport org.springframework.context.annotation.Import;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.ai.autoconfigure.bedrock.BedrockAwsConnectionProperties;\nimport org.springframework.ai.bedrock.cohere.BedrockCohereChatClient;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\nimport org.springframework.ai.bedrock.cohere.api.CohereChatBedrockApi;\nimport org.springframework.boot.autoconfigure.AutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.bedrock.cohere.BedrockCohereChatAutoConfiguration": "org.springframework.ai.autoconfigure.bedrock.cohere.BedrockCohereChatAutoConfiguration",
            "org.springframework.ai.autoconfigure.bedrock.cohere.cohereChatApi": "org.springframework.ai.autoconfigure.bedrock.cohere.cohereChatApi",
            "org.springframework.ai.autoconfigure.bedrock.cohere.cohereChatClient": "org.springframework.ai.autoconfigure.bedrock.cohere.cohereChatClient"
        },
        "package": "package org.springframework.ai.autoconfigure.bedrock.cohere;",
        "property_declarations": [],
        "functions": [
            {
                "name": "cohereChatApi",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new CohereChatBedrockApi(properties.getModel(), credentialsProvider, awsProperties.getRegion(),\n\t\t\t\tnew ObjectMapper(), awsProperties.getTimeout());",
                "is_abstract": "",
                "class_name": "BedrockCohereChatAutoConfiguration",
                "annotations": []
            },
            {
                "name": "cohereChatClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new BedrockCohereChatClient(cohereChatApi, properties.getOptions());",
                "is_abstract": "",
                "class_name": "BedrockCohereChatAutoConfiguration",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/bedrock/cohere/BedrockCohereEmbeddingProperties.java",
        "class_names": [
            "BedrockCohereEmbeddingProperties"
        ],
        "imports": "import org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.ai.bedrock.cohere.api.CohereEmbeddingBedrockApi.CohereEmbeddingRequest;\nimport org.springframework.ai.bedrock.cohere.api.CohereEmbeddingBedrockApi.CohereEmbeddingRequest.InputType;\nimport org.springframework.boot.context.properties.NestedConfigurationProperty;\nimport org.springframework.ai.bedrock.cohere.BedrockCohereEmbeddingOptions;\nimport org.springframework.ai.bedrock.cohere.api.CohereEmbeddingBedrockApi.CohereEmbeddingModel;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.bedrock.cohere.BedrockCohereEmbeddingProperties": "org.springframework.ai.autoconfigure.bedrock.cohere.BedrockCohereEmbeddingProperties",
            "org.springframework.ai.autoconfigure.bedrock.cohere.isEnabled": "org.springframework.ai.autoconfigure.bedrock.cohere.isEnabled",
            "org.springframework.ai.autoconfigure.bedrock.cohere.setEnabled": "org.springframework.ai.autoconfigure.bedrock.cohere.setEnabled",
            "org.springframework.ai.autoconfigure.bedrock.cohere.getModel": "org.springframework.ai.autoconfigure.bedrock.cohere.getModel",
            "org.springframework.ai.autoconfigure.bedrock.cohere.setModel": "org.springframework.ai.autoconfigure.bedrock.cohere.setModel",
            "org.springframework.ai.autoconfigure.bedrock.cohere.getOptions": "org.springframework.ai.autoconfigure.bedrock.cohere.getOptions",
            "org.springframework.ai.autoconfigure.bedrock.cohere.setOptions": "org.springframework.ai.autoconfigure.bedrock.cohere.setOptions",
            "org.springframework.ai.autoconfigure.bedrock.cohere.CONFIG_PREFIX": "org.springframework.ai.autoconfigure.bedrock.cohere.CONFIG_PREFIX",
            "org.springframework.ai.autoconfigure.bedrock.cohere.enabled": "org.springframework.ai.autoconfigure.bedrock.cohere.enabled",
            "org.springframework.ai.autoconfigure.bedrock.cohere.model": "org.springframework.ai.autoconfigure.bedrock.cohere.model",
            "org.springframework.ai.autoconfigure.bedrock.cohere.privat": "org.springframework.ai.autoconfigure.bedrock.cohere.privat"
        },
        "package": "package org.springframework.ai.autoconfigure.bedrock.cohere;",
        "property_declarations": [
            "private boolean enabled = false;",
            "@NestedConfigurationProperty\n\tprivate BedrockCohereEmbeddingOptions options = BedrockCohereEmbeddingOptions.builder()\n\t\t.withInputType(InputType.SEARCH_DOCUMENT)\n\t\t.withTruncate(CohereEmbeddingRequest.Truncate.NONE)\n\t\t.build();",
            "private String model = CohereEmbeddingModel.COHERE_EMBED_MULTILINGUAL_V1.id();",
            "public static final String CONFIG_PREFIX = \"spring.ai.bedrock.cohere.embedding\";"
        ],
        "functions": [
            {
                "name": "isEnabled",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.enabled;",
                "is_abstract": "",
                "class_name": "BedrockCohereEmbeddingProperties",
                "annotations": []
            },
            {
                "name": "setEnabled",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.enabled = enabled;",
                "is_abstract": "",
                "class_name": "BedrockCohereEmbeddingProperties",
                "annotations": []
            },
            {
                "name": "getModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.model;",
                "is_abstract": "",
                "class_name": "BedrockCohereEmbeddingProperties",
                "annotations": []
            },
            {
                "name": "setModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.model = model;",
                "is_abstract": "",
                "class_name": "BedrockCohereEmbeddingProperties",
                "annotations": []
            },
            {
                "name": "getOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.options;",
                "is_abstract": "",
                "class_name": "BedrockCohereEmbeddingProperties",
                "annotations": []
            },
            {
                "name": "setOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options = options;",
                "is_abstract": "",
                "class_name": "BedrockCohereEmbeddingProperties",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/bedrock/cohere/BedrockCohereChatProperties.java",
        "class_names": [
            "BedrockCohereChatProperties"
        ],
        "imports": "import org.springframework.boot.context.properties.NestedConfigurationProperty;\nimport org.springframework.ai.bedrock.cohere.BedrockCohereChatOptions;\nimport org.springframework.ai.bedrock.cohere.api.CohereChatBedrockApi;\nimport org.springframework.boot.context.properties.ConfigurationProperties;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.bedrock.cohere.BedrockCohereChatProperties": "org.springframework.ai.autoconfigure.bedrock.cohere.BedrockCohereChatProperties",
            "org.springframework.ai.autoconfigure.bedrock.cohere.isEnabled": "org.springframework.ai.autoconfigure.bedrock.cohere.isEnabled",
            "org.springframework.ai.autoconfigure.bedrock.cohere.setEnabled": "org.springframework.ai.autoconfigure.bedrock.cohere.setEnabled",
            "org.springframework.ai.autoconfigure.bedrock.cohere.getModel": "org.springframework.ai.autoconfigure.bedrock.cohere.getModel",
            "org.springframework.ai.autoconfigure.bedrock.cohere.setModel": "org.springframework.ai.autoconfigure.bedrock.cohere.setModel",
            "org.springframework.ai.autoconfigure.bedrock.cohere.getOptions": "org.springframework.ai.autoconfigure.bedrock.cohere.getOptions",
            "org.springframework.ai.autoconfigure.bedrock.cohere.setOptions": "org.springframework.ai.autoconfigure.bedrock.cohere.setOptions",
            "org.springframework.ai.autoconfigure.bedrock.cohere.CONFIG_PREFIX": "org.springframework.ai.autoconfigure.bedrock.cohere.CONFIG_PREFIX",
            "org.springframework.ai.autoconfigure.bedrock.cohere.enabled": "org.springframework.ai.autoconfigure.bedrock.cohere.enabled",
            "org.springframework.ai.autoconfigure.bedrock.cohere.model": "org.springframework.ai.autoconfigure.bedrock.cohere.model",
            "org.springframework.ai.autoconfigure.bedrock.cohere.privat": "org.springframework.ai.autoconfigure.bedrock.cohere.privat"
        },
        "package": "package org.springframework.ai.autoconfigure.bedrock.cohere;",
        "property_declarations": [
            "private String model = CohereChatBedrockApi.CohereChatModel.COHERE_COMMAND_V14.id();",
            "public static final String CONFIG_PREFIX = \"spring.ai.bedrock.cohere.chat\";",
            "private boolean enabled = false;",
            "@NestedConfigurationProperty\n\tprivate BedrockCohereChatOptions options = BedrockCohereChatOptions.builder().build();"
        ],
        "functions": [
            {
                "name": "isEnabled",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.enabled;",
                "is_abstract": "",
                "class_name": "BedrockCohereChatProperties",
                "annotations": []
            },
            {
                "name": "setEnabled",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.enabled = enabled;",
                "is_abstract": "",
                "class_name": "BedrockCohereChatProperties",
                "annotations": []
            },
            {
                "name": "getModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.model;",
                "is_abstract": "",
                "class_name": "BedrockCohereChatProperties",
                "annotations": []
            },
            {
                "name": "setModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.model = model;",
                "is_abstract": "",
                "class_name": "BedrockCohereChatProperties",
                "annotations": []
            },
            {
                "name": "getOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.options;",
                "is_abstract": "",
                "class_name": "BedrockCohereChatProperties",
                "annotations": []
            },
            {
                "name": "setOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options = options;",
                "is_abstract": "",
                "class_name": "BedrockCohereChatProperties",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/bedrock/cohere/BedrockCohereEmbeddingAutoConfiguration.java",
        "class_names": [
            "BedrockCohereEmbeddingAutoConfiguration"
        ],
        "imports": "import org.springframework.ai.autoconfigure.bedrock.BedrockAwsConnectionConfiguration;\nimport org.springframework.context.annotation.Import;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.springframework.ai.bedrock.cohere.api.CohereEmbeddingBedrockApi;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.ai.bedrock.cohere.BedrockCohereEmbeddingClient;\nimport org.springframework.ai.autoconfigure.bedrock.BedrockAwsConnectionProperties;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\nimport org.springframework.boot.autoconfigure.AutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.bedrock.cohere.BedrockCohereEmbeddingAutoConfiguration": "org.springframework.ai.autoconfigure.bedrock.cohere.BedrockCohereEmbeddingAutoConfiguration",
            "org.springframework.ai.autoconfigure.bedrock.cohere.cohereEmbeddingApi": "org.springframework.ai.autoconfigure.bedrock.cohere.cohereEmbeddingApi",
            "org.springframework.ai.autoconfigure.bedrock.cohere.cohereEmbeddingClient": "org.springframework.ai.autoconfigure.bedrock.cohere.cohereEmbeddingClient"
        },
        "package": "package org.springframework.ai.autoconfigure.bedrock.cohere;",
        "property_declarations": [],
        "functions": [
            {
                "name": "cohereEmbeddingApi",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new CohereEmbeddingBedrockApi(properties.getModel(), credentialsProvider, awsProperties.getRegion(),\n\t\t\t\tnew ObjectMapper(), awsProperties.getTimeout());",
                "is_abstract": "",
                "class_name": "BedrockCohereEmbeddingAutoConfiguration",
                "annotations": []
            },
            {
                "name": "cohereEmbeddingClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new BedrockCohereEmbeddingClient(cohereEmbeddingApi, properties.getOptions());",
                "is_abstract": "",
                "class_name": "BedrockCohereEmbeddingAutoConfiguration",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/bedrock/llama2/BedrockLlama2ChatAutoConfiguration.java",
        "class_names": [
            "BedrockLlama2ChatAutoConfiguration"
        ],
        "imports": "import org.springframework.ai.bedrock.llama2.BedrockLlama2ChatClient;\nimport org.springframework.ai.autoconfigure.bedrock.BedrockAwsConnectionConfiguration;\nimport org.springframework.ai.bedrock.llama2.api.Llama2ChatBedrockApi;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.ai.autoconfigure.bedrock.BedrockAwsConnectionProperties;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\nimport org.springframework.boot.autoconfigure.AutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.bedrock.llama2.BedrockLlama2ChatAutoConfiguration": "org.springframework.ai.autoconfigure.bedrock.llama2.BedrockLlama2ChatAutoConfiguration",
            "org.springframework.ai.autoconfigure.bedrock.llama2.llama2Api": "org.springframework.ai.autoconfigure.bedrock.llama2.llama2Api",
            "org.springframework.ai.autoconfigure.bedrock.llama2.llama2ChatClient": "org.springframework.ai.autoconfigure.bedrock.llama2.llama2ChatClient"
        },
        "package": "package org.springframework.ai.autoconfigure.bedrock.llama2;",
        "property_declarations": [],
        "functions": [
            {
                "name": "llama2Api",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Llama2ChatBedrockApi(properties.getModel(), credentialsProvider, awsProperties.getRegion(),\n\t\t\t\tnew ObjectMapper(), awsProperties.getTimeout());",
                "is_abstract": "",
                "class_name": "BedrockLlama2ChatAutoConfiguration",
                "annotations": []
            },
            {
                "name": "llama2ChatClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new BedrockLlama2ChatClient(llama2Api, properties.getOptions());",
                "is_abstract": "",
                "class_name": "BedrockLlama2ChatAutoConfiguration",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/bedrock/llama2/BedrockLlama2ChatProperties.java",
        "class_names": [
            "BedrockLlama2ChatProperties"
        ],
        "imports": "import org.springframework.boot.context.properties.NestedConfigurationProperty;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.ai.bedrock.llama2.BedrockLlama2ChatOptions;\nimport org.springframework.ai.bedrock.llama2.api.Llama2ChatBedrockApi.Llama2ChatModel;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.bedrock.llama2.BedrockLlama2ChatProperties": "org.springframework.ai.autoconfigure.bedrock.llama2.BedrockLlama2ChatProperties",
            "org.springframework.ai.autoconfigure.bedrock.llama2.isEnabled": "org.springframework.ai.autoconfigure.bedrock.llama2.isEnabled",
            "org.springframework.ai.autoconfigure.bedrock.llama2.setEnabled": "org.springframework.ai.autoconfigure.bedrock.llama2.setEnabled",
            "org.springframework.ai.autoconfigure.bedrock.llama2.getModel": "org.springframework.ai.autoconfigure.bedrock.llama2.getModel",
            "org.springframework.ai.autoconfigure.bedrock.llama2.setModel": "org.springframework.ai.autoconfigure.bedrock.llama2.setModel",
            "org.springframework.ai.autoconfigure.bedrock.llama2.getOptions": "org.springframework.ai.autoconfigure.bedrock.llama2.getOptions",
            "org.springframework.ai.autoconfigure.bedrock.llama2.setOptions": "org.springframework.ai.autoconfigure.bedrock.llama2.setOptions",
            "org.springframework.ai.autoconfigure.bedrock.llama2.CONFIG_PREFIX": "org.springframework.ai.autoconfigure.bedrock.llama2.CONFIG_PREFIX",
            "org.springframework.ai.autoconfigure.bedrock.llama2.enabled": "org.springframework.ai.autoconfigure.bedrock.llama2.enabled",
            "org.springframework.ai.autoconfigure.bedrock.llama2.model": "org.springframework.ai.autoconfigure.bedrock.llama2.model",
            "org.springframework.ai.autoconfigure.bedrock.llama2.privat": "org.springframework.ai.autoconfigure.bedrock.llama2.privat"
        },
        "package": "package org.springframework.ai.autoconfigure.bedrock.llama2;",
        "property_declarations": [
            "public static final String CONFIG_PREFIX = \"spring.ai.bedrock.llama2.chat\";",
            "@NestedConfigurationProperty\n\tprivate BedrockLlama2ChatOptions options = BedrockLlama2ChatOptions.builder()\n\t\t.withTemperature(0.7f)\n\t\t.withMaxGenLen(300)\n\t\t.build();",
            "private boolean enabled = false;",
            "private String model = Llama2ChatModel.LLAMA2_70B_CHAT_V1.id();"
        ],
        "functions": [
            {
                "name": "isEnabled",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.enabled;",
                "is_abstract": "",
                "class_name": "BedrockLlama2ChatProperties",
                "annotations": []
            },
            {
                "name": "setEnabled",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.enabled = enabled;",
                "is_abstract": "",
                "class_name": "BedrockLlama2ChatProperties",
                "annotations": []
            },
            {
                "name": "getModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.model;",
                "is_abstract": "",
                "class_name": "BedrockLlama2ChatProperties",
                "annotations": []
            },
            {
                "name": "setModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.model = model;",
                "is_abstract": "",
                "class_name": "BedrockLlama2ChatProperties",
                "annotations": []
            },
            {
                "name": "getOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.options;",
                "is_abstract": "",
                "class_name": "BedrockLlama2ChatProperties",
                "annotations": []
            },
            {
                "name": "setOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options = options;",
                "is_abstract": "",
                "class_name": "BedrockLlama2ChatProperties",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/bedrock/anthropic3/BedrockAnthropic3ChatAutoConfiguration.java",
        "class_names": [
            "BedrockAnthropic3ChatAutoConfiguration"
        ],
        "imports": "import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\nimport org.springframework.ai.autoconfigure.bedrock.BedrockAwsConnectionConfiguration;\nimport org.springframework.context.annotation.Import;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.ai.bedrock.anthropic3.api.Anthropic3ChatBedrockApi;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.ai.autoconfigure.bedrock.BedrockAwsConnectionProperties;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.ai.bedrock.anthropic3.BedrockAnthropic3ChatClient;\nimport org.springframework.boot.autoconfigure.AutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.bedrock.anthropic3.BedrockAnthropic3ChatAutoConfiguration": "org.springframework.ai.autoconfigure.bedrock.anthropic3.BedrockAnthropic3ChatAutoConfiguration",
            "org.springframework.ai.autoconfigure.bedrock.anthropic3.anthropic3Api": "org.springframework.ai.autoconfigure.bedrock.anthropic3.anthropic3Api",
            "org.springframework.ai.autoconfigure.bedrock.anthropic3.anthropic3ChatClient": "org.springframework.ai.autoconfigure.bedrock.anthropic3.anthropic3ChatClient"
        },
        "package": "package org.springframework.ai.autoconfigure.bedrock.anthropic3;",
        "property_declarations": [],
        "functions": [
            {
                "name": "anthropic3Api",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Anthropic3ChatBedrockApi(properties.getModel(), credentialsProvider, awsProperties.getRegion(),\n\t\t\t\tnew ObjectMapper(), awsProperties.getTimeout());",
                "is_abstract": "",
                "class_name": "BedrockAnthropic3ChatAutoConfiguration",
                "annotations": []
            },
            {
                "name": "anthropic3ChatClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new BedrockAnthropic3ChatClient(anthropicApi, properties.getOptions());",
                "is_abstract": "",
                "class_name": "BedrockAnthropic3ChatAutoConfiguration",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/bedrock/anthropic3/BedrockAnthropic3ChatProperties.java",
        "class_names": [
            "BedrockAnthropic3ChatProperties"
        ],
        "imports": "import org.springframework.ai.bedrock.anthropic3.Anthropic3ChatOptions;\nimport org.springframework.util.Assert;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.ai.bedrock.anthropic3.api.Anthropic3ChatBedrockApi.AnthropicChatModel;\nimport org.springframework.ai.bedrock.anthropic3.api.Anthropic3ChatBedrockApi;\nimport org.springframework.boot.context.properties.NestedConfigurationProperty;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.bedrock.anthropic3.BedrockAnthropic3ChatProperties": "org.springframework.ai.autoconfigure.bedrock.anthropic3.BedrockAnthropic3ChatProperties",
            "org.springframework.ai.autoconfigure.bedrock.anthropic3.isEnabled": "org.springframework.ai.autoconfigure.bedrock.anthropic3.isEnabled",
            "org.springframework.ai.autoconfigure.bedrock.anthropic3.setEnabled": "org.springframework.ai.autoconfigure.bedrock.anthropic3.setEnabled",
            "org.springframework.ai.autoconfigure.bedrock.anthropic3.getModel": "org.springframework.ai.autoconfigure.bedrock.anthropic3.getModel",
            "org.springframework.ai.autoconfigure.bedrock.anthropic3.setModel": "org.springframework.ai.autoconfigure.bedrock.anthropic3.setModel",
            "org.springframework.ai.autoconfigure.bedrock.anthropic3.getOptions": "org.springframework.ai.autoconfigure.bedrock.anthropic3.getOptions",
            "org.springframework.ai.autoconfigure.bedrock.anthropic3.setOptions": "org.springframework.ai.autoconfigure.bedrock.anthropic3.setOptions",
            "org.springframework.ai.autoconfigure.bedrock.anthropic3.CONFIG_PREFIX": "org.springframework.ai.autoconfigure.bedrock.anthropic3.CONFIG_PREFIX",
            "org.springframework.ai.autoconfigure.bedrock.anthropic3.enabled": "org.springframework.ai.autoconfigure.bedrock.anthropic3.enabled",
            "org.springframework.ai.autoconfigure.bedrock.anthropic3.model": "org.springframework.ai.autoconfigure.bedrock.anthropic3.model",
            "org.springframework.ai.autoconfigure.bedrock.anthropic3.privat": "org.springframework.ai.autoconfigure.bedrock.anthropic3.privat"
        },
        "package": "package org.springframework.ai.autoconfigure.bedrock.anthropic3;",
        "property_declarations": [
            "private String model = AnthropicChatModel.CLAUDE_V3_SONNET.id();",
            "public static final String CONFIG_PREFIX = \"spring.ai.bedrock.anthropic3.chat\";",
            "@NestedConfigurationProperty\n\tprivate Anthropic3ChatOptions options = Anthropic3ChatOptions.builder()\n\t\t.withTemperature(0.7f)\n\t\t.withMaxTokens(300)\n\t\t.withTopK(10)\n\t\t.withAnthropicVersion(Anthropic3ChatBedrockApi.DEFAULT_ANTHROPIC_VERSION)\n\t\t// .withStopSequences(List.of(\"\\n\\nHuman:\"))\n\t\t.build();",
            "private boolean enabled = false;"
        ],
        "functions": [
            {
                "name": "isEnabled",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.enabled;",
                "is_abstract": "",
                "class_name": "BedrockAnthropic3ChatProperties",
                "annotations": []
            },
            {
                "name": "setEnabled",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.enabled = enabled;",
                "is_abstract": "",
                "class_name": "BedrockAnthropic3ChatProperties",
                "annotations": []
            },
            {
                "name": "getModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.model;",
                "is_abstract": "",
                "class_name": "BedrockAnthropic3ChatProperties",
                "annotations": []
            },
            {
                "name": "setModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.model = model;",
                "is_abstract": "",
                "class_name": "BedrockAnthropic3ChatProperties",
                "annotations": []
            },
            {
                "name": "getOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return options;",
                "is_abstract": "",
                "class_name": "BedrockAnthropic3ChatProperties",
                "annotations": []
            },
            {
                "name": "setOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(options, \"AnthropicChatOptions must not be null\");\n\t\tAssert.notNull(options.getTemperature(), \"AnthropicChatOptions.temperature must not be null\");\n\n\t\tthis.options = options;",
                "is_abstract": "",
                "class_name": "BedrockAnthropic3ChatProperties",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/bedrock/anthropic/BedrockAnthropicChatAutoConfiguration.java",
        "class_names": [
            "BedrockAnthropicChatAutoConfiguration"
        ],
        "imports": "import org.springframework.ai.autoconfigure.bedrock.BedrockAwsConnectionConfiguration;\nimport org.springframework.context.annotation.Import;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.ai.bedrock.anthropic.BedrockAnthropicChatClient;\nimport org.springframework.ai.bedrock.anthropic.api.AnthropicChatBedrockApi;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.ai.autoconfigure.bedrock.BedrockAwsConnectionProperties;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\nimport org.springframework.boot.autoconfigure.AutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.bedrock.anthropic.BedrockAnthropicChatAutoConfiguration": "org.springframework.ai.autoconfigure.bedrock.anthropic.BedrockAnthropicChatAutoConfiguration",
            "org.springframework.ai.autoconfigure.bedrock.anthropic.anthropicApi": "org.springframework.ai.autoconfigure.bedrock.anthropic.anthropicApi",
            "org.springframework.ai.autoconfigure.bedrock.anthropic.anthropicChatClient": "org.springframework.ai.autoconfigure.bedrock.anthropic.anthropicChatClient"
        },
        "package": "package org.springframework.ai.autoconfigure.bedrock.anthropic;",
        "property_declarations": [],
        "functions": [
            {
                "name": "anthropicApi",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new AnthropicChatBedrockApi(properties.getModel(), credentialsProvider, awsProperties.getRegion(),\n\t\t\t\tnew ObjectMapper(), awsProperties.getTimeout());",
                "is_abstract": "",
                "class_name": "BedrockAnthropicChatAutoConfiguration",
                "annotations": []
            },
            {
                "name": "anthropicChatClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new BedrockAnthropicChatClient(anthropicApi, properties.getOptions());",
                "is_abstract": "",
                "class_name": "BedrockAnthropicChatAutoConfiguration",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/bedrock/anthropic/BedrockAnthropicChatProperties.java",
        "class_names": [
            "BedrockAnthropicChatProperties"
        ],
        "imports": "import java.util.List;\nimport org.springframework.ai.bedrock.anthropic.AnthropicChatOptions;\nimport org.springframework.util.Assert;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.boot.context.properties.NestedConfigurationProperty;\nimport org.springframework.ai.bedrock.anthropic.api.AnthropicChatBedrockApi.AnthropicChatModel;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.bedrock.anthropic.BedrockAnthropicChatProperties": "org.springframework.ai.autoconfigure.bedrock.anthropic.BedrockAnthropicChatProperties",
            "org.springframework.ai.autoconfigure.bedrock.anthropic.isEnabled": "org.springframework.ai.autoconfigure.bedrock.anthropic.isEnabled",
            "org.springframework.ai.autoconfigure.bedrock.anthropic.setEnabled": "org.springframework.ai.autoconfigure.bedrock.anthropic.setEnabled",
            "org.springframework.ai.autoconfigure.bedrock.anthropic.getModel": "org.springframework.ai.autoconfigure.bedrock.anthropic.getModel",
            "org.springframework.ai.autoconfigure.bedrock.anthropic.setModel": "org.springframework.ai.autoconfigure.bedrock.anthropic.setModel",
            "org.springframework.ai.autoconfigure.bedrock.anthropic.getOptions": "org.springframework.ai.autoconfigure.bedrock.anthropic.getOptions",
            "org.springframework.ai.autoconfigure.bedrock.anthropic.setOptions": "org.springframework.ai.autoconfigure.bedrock.anthropic.setOptions",
            "org.springframework.ai.autoconfigure.bedrock.anthropic.CONFIG_PREFIX": "org.springframework.ai.autoconfigure.bedrock.anthropic.CONFIG_PREFIX",
            "org.springframework.ai.autoconfigure.bedrock.anthropic.enabled": "org.springframework.ai.autoconfigure.bedrock.anthropic.enabled",
            "org.springframework.ai.autoconfigure.bedrock.anthropic.model": "org.springframework.ai.autoconfigure.bedrock.anthropic.model",
            "org.springframework.ai.autoconfigure.bedrock.anthropic.privat": "org.springframework.ai.autoconfigure.bedrock.anthropic.privat"
        },
        "package": "package org.springframework.ai.autoconfigure.bedrock.anthropic;",
        "property_declarations": [
            "public static final String CONFIG_PREFIX = \"spring.ai.bedrock.anthropic.chat\";",
            "@NestedConfigurationProperty\n\tprivate AnthropicChatOptions options = AnthropicChatOptions.builder()\n\t\t.withTemperature(0.7f)\n\t\t.withMaxTokensToSample(300)\n\t\t.withTopK(10)\n\t\t.withStopSequences(List.of(\"\\n\\nHuman:\"))\n\t\t.build();",
            "private String model = AnthropicChatModel.CLAUDE_V2.id();",
            "private boolean enabled = false;"
        ],
        "functions": [
            {
                "name": "isEnabled",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.enabled;",
                "is_abstract": "",
                "class_name": "BedrockAnthropicChatProperties",
                "annotations": []
            },
            {
                "name": "setEnabled",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.enabled = enabled;",
                "is_abstract": "",
                "class_name": "BedrockAnthropicChatProperties",
                "annotations": []
            },
            {
                "name": "getModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.model;",
                "is_abstract": "",
                "class_name": "BedrockAnthropicChatProperties",
                "annotations": []
            },
            {
                "name": "setModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.model = model;",
                "is_abstract": "",
                "class_name": "BedrockAnthropicChatProperties",
                "annotations": []
            },
            {
                "name": "getOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return options;",
                "is_abstract": "",
                "class_name": "BedrockAnthropicChatProperties",
                "annotations": []
            },
            {
                "name": "setOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(options, \"AnthropicChatOptions must not be null\");\n\t\tAssert.notNull(options.getTemperature(), \"AnthropicChatOptions.temperature must not be null\");\n\n\t\tthis.options = options;",
                "is_abstract": "",
                "class_name": "BedrockAnthropicChatProperties",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/bedrock/titan/BedrockTitanChatAutoConfiguration.java",
        "class_names": [
            "BedrockTitanChatAutoConfiguration"
        ],
        "imports": "import org.springframework.ai.autoconfigure.bedrock.BedrockAwsConnectionConfiguration;\nimport org.springframework.ai.bedrock.titan.api.TitanChatBedrockApi;\nimport org.springframework.ai.bedrock.titan.BedrockTitanChatClient;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.ai.autoconfigure.bedrock.BedrockAwsConnectionProperties;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\nimport org.springframework.boot.autoconfigure.AutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.bedrock.titan.BedrockTitanChatAutoConfiguration": "org.springframework.ai.autoconfigure.bedrock.titan.BedrockTitanChatAutoConfiguration",
            "org.springframework.ai.autoconfigure.bedrock.titan.titanChatBedrockApi": "org.springframework.ai.autoconfigure.bedrock.titan.titanChatBedrockApi",
            "org.springframework.ai.autoconfigure.bedrock.titan.titanChatClient": "org.springframework.ai.autoconfigure.bedrock.titan.titanChatClient"
        },
        "package": "package org.springframework.ai.autoconfigure.bedrock.titan;",
        "property_declarations": [],
        "functions": [
            {
                "name": "titanChatBedrockApi",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new TitanChatBedrockApi(properties.getModel(), credentialsProvider, awsProperties.getRegion(),\n\t\t\t\tnew ObjectMapper(), awsProperties.getTimeout());",
                "is_abstract": "",
                "class_name": "BedrockTitanChatAutoConfiguration",
                "annotations": []
            },
            {
                "name": "titanChatClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new BedrockTitanChatClient(titanChatApi, properties.getOptions());",
                "is_abstract": "",
                "class_name": "BedrockTitanChatAutoConfiguration",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/bedrock/titan/BedrockTitanEmbeddingProperties.java",
        "class_names": [
            "BedrockTitanEmbeddingProperties"
        ],
        "imports": "import org.springframework.ai.bedrock.titan.api.TitanEmbeddingBedrockApi.TitanEmbeddingModel;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.ai.bedrock.titan.BedrockTitanEmbeddingClient.InputType;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.bedrock.titan.BedrockTitanEmbeddingProperties": "org.springframework.ai.autoconfigure.bedrock.titan.BedrockTitanEmbeddingProperties",
            "org.springframework.ai.autoconfigure.bedrock.titan.isEnabled": "org.springframework.ai.autoconfigure.bedrock.titan.isEnabled",
            "org.springframework.ai.autoconfigure.bedrock.titan.setEnabled": "org.springframework.ai.autoconfigure.bedrock.titan.setEnabled",
            "org.springframework.ai.autoconfigure.bedrock.titan.getModel": "org.springframework.ai.autoconfigure.bedrock.titan.getModel",
            "org.springframework.ai.autoconfigure.bedrock.titan.setModel": "org.springframework.ai.autoconfigure.bedrock.titan.setModel",
            "org.springframework.ai.autoconfigure.bedrock.titan.getConfigPrefix": "org.springframework.ai.autoconfigure.bedrock.titan.getConfigPrefix",
            "org.springframework.ai.autoconfigure.bedrock.titan.setInputTy": "org.springframework.ai.autoconfigure.bedrock.titan.setInputTy",
            "org.springframework.ai.autoconfigure.bedrock.titan.getInputTy": "org.springframework.ai.autoconfigure.bedrock.titan.getInputTy",
            "org.springframework.ai.autoconfigure.bedrock.titan.CONFIG_PREFIX": "org.springframework.ai.autoconfigure.bedrock.titan.CONFIG_PREFIX",
            "org.springframework.ai.autoconfigure.bedrock.titan.enabled": "org.springframework.ai.autoconfigure.bedrock.titan.enabled",
            "org.springframework.ai.autoconfigure.bedrock.titan.model": "org.springframework.ai.autoconfigure.bedrock.titan.model",
            "org.springframework.ai.autoconfigure.bedrock.titan.inputTy": "org.springframework.ai.autoconfigure.bedrock.titan.inputTy"
        },
        "package": "package org.springframework.ai.autoconfigure.bedrock.titan;",
        "property_declarations": [
            "private InputType inputType = InputType.IMAGE;",
            "private boolean enabled = false;",
            "private String model = TitanEmbeddingModel.TITAN_EMBED_IMAGE_V1.id();",
            "public static final String CONFIG_PREFIX = \"spring.ai.bedrock.titan.embedding\";"
        ],
        "functions": [
            {
                "name": "isEnabled",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return enabled;",
                "is_abstract": "",
                "class_name": "BedrockTitanEmbeddingProperties",
                "annotations": []
            },
            {
                "name": "setEnabled",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.enabled = enabled;",
                "is_abstract": "",
                "class_name": "BedrockTitanEmbeddingProperties",
                "annotations": []
            },
            {
                "name": "getModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return model;",
                "is_abstract": "",
                "class_name": "BedrockTitanEmbeddingProperties",
                "annotations": []
            },
            {
                "name": "setModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.model = model;",
                "is_abstract": "",
                "class_name": "BedrockTitanEmbeddingProperties",
                "annotations": []
            },
            {
                "name": "getConfigPrefix",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return CONFIG_PREFIX;",
                "is_abstract": "",
                "class_name": "BedrockTitanEmbeddingProperties",
                "annotations": []
            },
            {
                "name": "setInputType",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.inputType = inputType;",
                "is_abstract": "",
                "class_name": "BedrockTitanEmbeddingProperties",
                "annotations": []
            },
            {
                "name": "getInputType",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return inputType;",
                "is_abstract": "",
                "class_name": "BedrockTitanEmbeddingProperties",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/bedrock/titan/BedrockTitanEmbeddingAutoConfiguration.java",
        "class_names": [
            "BedrockTitanEmbeddingAutoConfiguration"
        ],
        "imports": "import org.springframework.ai.autoconfigure.bedrock.BedrockAwsConnectionConfiguration;\nimport org.springframework.context.annotation.Import;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.ai.autoconfigure.bedrock.BedrockAwsConnectionProperties;\nimport org.springframework.ai.bedrock.titan.api.TitanEmbeddingBedrockApi;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\nimport org.springframework.ai.bedrock.titan.BedrockTitanEmbeddingClient;\nimport org.springframework.boot.autoconfigure.AutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.bedrock.titan.BedrockTitanEmbeddingAutoConfiguration": "org.springframework.ai.autoconfigure.bedrock.titan.BedrockTitanEmbeddingAutoConfiguration",
            "org.springframework.ai.autoconfigure.bedrock.titan.titanEmbeddingBedrockApi": "org.springframework.ai.autoconfigure.bedrock.titan.titanEmbeddingBedrockApi",
            "org.springframework.ai.autoconfigure.bedrock.titan.titanEmbeddingClient": "org.springframework.ai.autoconfigure.bedrock.titan.titanEmbeddingClient"
        },
        "package": "package org.springframework.ai.autoconfigure.bedrock.titan;",
        "property_declarations": [],
        "functions": [
            {
                "name": "titanEmbeddingBedrockApi",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new TitanEmbeddingBedrockApi(properties.getModel(), credentialsProvider, awsProperties.getRegion(),\n\t\t\t\tnew ObjectMapper(), awsProperties.getTimeout());",
                "is_abstract": "",
                "class_name": "BedrockTitanEmbeddingAutoConfiguration",
                "annotations": []
            },
            {
                "name": "titanEmbeddingClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new BedrockTitanEmbeddingClient(titanEmbeddingApi).withInputType(properties.getInputType());",
                "is_abstract": "",
                "class_name": "BedrockTitanEmbeddingAutoConfiguration",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/bedrock/titan/BedrockTitanChatProperties.java",
        "class_names": [
            "BedrockTitanChatProperties"
        ],
        "imports": "import org.springframework.ai.bedrock.titan.api.TitanChatBedrockApi.TitanChatModel;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.ai.bedrock.titan.BedrockTitanChatOptions;\nimport org.springframework.boot.context.properties.NestedConfigurationProperty;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.bedrock.titan.BedrockTitanChatProperties": "org.springframework.ai.autoconfigure.bedrock.titan.BedrockTitanChatProperties",
            "org.springframework.ai.autoconfigure.bedrock.titan.isEnabled": "org.springframework.ai.autoconfigure.bedrock.titan.isEnabled",
            "org.springframework.ai.autoconfigure.bedrock.titan.setEnabled": "org.springframework.ai.autoconfigure.bedrock.titan.setEnabled",
            "org.springframework.ai.autoconfigure.bedrock.titan.getModel": "org.springframework.ai.autoconfigure.bedrock.titan.getModel",
            "org.springframework.ai.autoconfigure.bedrock.titan.setModel": "org.springframework.ai.autoconfigure.bedrock.titan.setModel",
            "org.springframework.ai.autoconfigure.bedrock.titan.getOptions": "org.springframework.ai.autoconfigure.bedrock.titan.getOptions",
            "org.springframework.ai.autoconfigure.bedrock.titan.setOptions": "org.springframework.ai.autoconfigure.bedrock.titan.setOptions",
            "org.springframework.ai.autoconfigure.bedrock.titan.CONFIG_PREFIX": "org.springframework.ai.autoconfigure.bedrock.titan.CONFIG_PREFIX",
            "org.springframework.ai.autoconfigure.bedrock.titan.enabled": "org.springframework.ai.autoconfigure.bedrock.titan.enabled",
            "org.springframework.ai.autoconfigure.bedrock.titan.model": "org.springframework.ai.autoconfigure.bedrock.titan.model",
            "org.springframework.ai.autoconfigure.bedrock.titan.privat": "org.springframework.ai.autoconfigure.bedrock.titan.privat"
        },
        "package": "package org.springframework.ai.autoconfigure.bedrock.titan;",
        "property_declarations": [
            "private String model = TitanChatModel.TITAN_TEXT_EXPRESS_V1.id();",
            "public static final String CONFIG_PREFIX = \"spring.ai.bedrock.titan.chat\";",
            "private boolean enabled = false;",
            "@NestedConfigurationProperty\n\tprivate BedrockTitanChatOptions options = BedrockTitanChatOptions.builder().withTemperature(0.7f).build();"
        ],
        "functions": [
            {
                "name": "isEnabled",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return enabled;",
                "is_abstract": "",
                "class_name": "BedrockTitanChatProperties",
                "annotations": []
            },
            {
                "name": "setEnabled",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.enabled = enabled;",
                "is_abstract": "",
                "class_name": "BedrockTitanChatProperties",
                "annotations": []
            },
            {
                "name": "getModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return model;",
                "is_abstract": "",
                "class_name": "BedrockTitanChatProperties",
                "annotations": []
            },
            {
                "name": "setModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.model = model;",
                "is_abstract": "",
                "class_name": "BedrockTitanChatProperties",
                "annotations": []
            },
            {
                "name": "getOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return options;",
                "is_abstract": "",
                "class_name": "BedrockTitanChatProperties",
                "annotations": []
            },
            {
                "name": "setOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options = options;",
                "is_abstract": "",
                "class_name": "BedrockTitanChatProperties",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vertexai/gemini/VertexAiGeminiChatProperties.java",
        "class_names": [
            "VertexAiGeminiChatProperties"
        ],
        "imports": "import org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.ai.vertexai.gemini.VertexAiGeminiChatClient;\nimport org.springframework.ai.vertexai.gemini.VertexAiGeminiChatOptions;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.vertexai.gemini.VertexAiGeminiChatProperties": "org.springframework.ai.autoconfigure.vertexai.gemini.VertexAiGeminiChatProperties",
            "org.springframework.ai.autoconfigure.vertexai.gemini.getOptions": "org.springframework.ai.autoconfigure.vertexai.gemini.getOptions",
            "org.springframework.ai.autoconfigure.vertexai.gemini.setOptions": "org.springframework.ai.autoconfigure.vertexai.gemini.setOptions",
            "org.springframework.ai.autoconfigure.vertexai.gemini.CONFIG_PREFIX": "org.springframework.ai.autoconfigure.vertexai.gemini.CONFIG_PREFIX",
            "org.springframework.ai.autoconfigure.vertexai.gemini.DEFAULT_MODEL": "org.springframework.ai.autoconfigure.vertexai.gemini.DEFAULT_MODEL",
            "org.springframework.ai.autoconfigure.vertexai.gemini.options": "org.springframework.ai.autoconfigure.vertexai.gemini.options"
        },
        "package": "package org.springframework.ai.autoconfigure.vertexai.gemini;",
        "property_declarations": [
            "public static final String DEFAULT_MODEL = VertexAiGeminiChatClient.ChatModel.GEMINI_PRO_VISION.getValue();",
            "private VertexAiGeminiChatOptions options = VertexAiGeminiChatOptions.builder()\n\t\t.withTemperature(0.7f)\n\t\t.withCandidateCount(1)\n\t\t.withModel(DEFAULT_MODEL)\n\t\t.build();",
            "public static final String CONFIG_PREFIX = \"spring.ai.vertex.ai.gemini.chat\";"
        ],
        "functions": [
            {
                "name": "getOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.options;",
                "is_abstract": "",
                "class_name": "VertexAiGeminiChatProperties",
                "annotations": []
            },
            {
                "name": "setOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options = options;",
                "is_abstract": "",
                "class_name": "VertexAiGeminiChatProperties",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vertexai/gemini/VertexAiGeminiAutoConfiguration.java",
        "class_names": [
            "VertexAiGeminiAutoConfiguration"
        ],
        "imports": "import org.springframework.context.ApplicationContext;\nimport java.util.List;\nimport org.springframework.util.StringUtils;\nimport org.springframework.util.Assert;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport com.google.auth.oauth2.GoogleCredentials;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.ai.model.function.FunctionCallbackWrapper.Builder.SchemaType;\nimport org.springframework.ai.model.function.FunctionCallback;\nimport org.springframework.util.CollectionUtils;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.ai.model.function.FunctionCallbackContext;\nimport org.springframework.ai.vertexai.gemini.VertexAiGeminiChatClient;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport com.google.cloud.vertexai.VertexAI;\nimport java.io.IOException;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.vertexai.gemini.VertexAiGeminiAutoConfiguration": "org.springframework.ai.autoconfigure.vertexai.gemini.VertexAiGeminiAutoConfiguration",
            "org.springframework.ai.autoconfigure.vertexai.gemini.vertexAi": "org.springframework.ai.autoconfigure.vertexai.gemini.vertexAi",
            "org.springframework.ai.autoconfigure.vertexai.gemini.vertexAiGeminiChat": "org.springframework.ai.autoconfigure.vertexai.gemini.vertexAiGeminiChat",
            "org.springframework.ai.autoconfigure.vertexai.gemini.springAiFunctionManager": "org.springframework.ai.autoconfigure.vertexai.gemini.springAiFunctionManager"
        },
        "package": "package org.springframework.ai.autoconfigure.vertexai.gemini;",
        "property_declarations": [],
        "functions": [
            {
                "name": "vertexAi",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.hasText(connectionProperties.getProjectId(), \"Vertex AI project-id must be set!\");\n\t\tAssert.hasText(connectionProperties.getLocation(), \"Vertex AI location must be set!\");\n\t\tAssert.notNull(connectionProperties.getTransport(), \"Vertex AI transport must be set!\");\n\n\t\tvar vertexAIBuilder = new VertexAI.Builder().setProjectId(connectionProperties.getProjectId())\n\t\t\t.setLocation(connectionProperties.getLocation())\n\t\t\t.setTransport(com.google.cloud.vertexai.Transport.valueOf(connectionProperties.getTransport().name()));\n\n\t\tif (StringUtils.hasText(connectionProperties.getApiEndpoint())) {\n\t\t\tvertexAIBuilder.setApiEndpoint(connectionProperties.getApiEndpoint());\n\t\t}\n\t\tif (!CollectionUtils.isEmpty(connectionProperties.getScopes())) {\n\t\t\tvertexAIBuilder.setScopes(connectionProperties.getScopes());\n\t\t}\n\n\t\tif (connectionProperties.getCredentialsUri() != null) {\n\t\t\tGoogleCredentials credentials = GoogleCredentials\n\t\t\t\t.fromStream(connectionProperties.getCredentialsUri().getInputStream());\n\n\t\t\tvertexAIBuilder.setCredentials(credentials);\n\t\t}\n\t\treturn vertexAIBuilder.build();",
                "is_abstract": "",
                "class_name": "VertexAiGeminiAutoConfiguration",
                "annotations": []
            },
            {
                "name": "vertexAiGeminiChat",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "FunctionCallbackContext functionCallbackContext = springAiFunctionManager(context);\n\n\t\tif (!CollectionUtils.isEmpty(toolFunctionCallbacks)) {\n\t\t\tchatProperties.getOptions().getFunctionCallbacks().addAll(toolFunctionCallbacks);\n\t\t}\n\n\t\treturn new VertexAiGeminiChatClient(vertexAi, chatProperties.getOptions(), functionCallbackContext);",
                "is_abstract": "",
                "class_name": "VertexAiGeminiAutoConfiguration",
                "annotations": []
            },
            {
                "name": "springAiFunctionManager",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "FunctionCallbackContext manager = new FunctionCallbackContext();\n\t\tmanager.setSchemaType(SchemaType.OPEN_API_SCHEMA);\n\t\tmanager.setApplicationContext(context);\n\t\treturn manager;",
                "is_abstract": "",
                "class_name": "VertexAiGeminiAutoConfiguration",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vertexai/gemini/VertexAiGeminiConnectionProperties.java",
        "class_names": [
            "VertexAiGeminiConnectionProperties"
        ],
        "imports": "import org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.core.io.Resource;\nimport java.util.List;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.vertexai.gemini.VertexAiGeminiConnectionProperties": "org.springframework.ai.autoconfigure.vertexai.gemini.VertexAiGeminiConnectionProperties",
            "org.springframework.ai.autoconfigure.vertexai.gemini.getProjectId": "org.springframework.ai.autoconfigure.vertexai.gemini.getProjectId",
            "org.springframework.ai.autoconfigure.vertexai.gemini.setProjectId": "org.springframework.ai.autoconfigure.vertexai.gemini.setProjectId",
            "org.springframework.ai.autoconfigure.vertexai.gemini.getLocation": "org.springframework.ai.autoconfigure.vertexai.gemini.getLocation",
            "org.springframework.ai.autoconfigure.vertexai.gemini.setLocation": "org.springframework.ai.autoconfigure.vertexai.gemini.setLocation",
            "org.springframework.ai.autoconfigure.vertexai.gemini.getCredentialsUri": "org.springframework.ai.autoconfigure.vertexai.gemini.getCredentialsUri",
            "org.springframework.ai.autoconfigure.vertexai.gemini.setCredentialsUri": "org.springframework.ai.autoconfigure.vertexai.gemini.setCredentialsUri",
            "org.springframework.ai.autoconfigure.vertexai.gemini.getApiEndpoint": "org.springframework.ai.autoconfigure.vertexai.gemini.getApiEndpoint",
            "org.springframework.ai.autoconfigure.vertexai.gemini.getScopes": "org.springframework.ai.autoconfigure.vertexai.gemini.getScopes",
            "org.springframework.ai.autoconfigure.vertexai.gemini.setScopes": "org.springframework.ai.autoconfigure.vertexai.gemini.setScopes",
            "org.springframework.ai.autoconfigure.vertexai.gemini.setApiEndpoint": "org.springframework.ai.autoconfigure.vertexai.gemini.setApiEndpoint",
            "org.springframework.ai.autoconfigure.vertexai.gemini.getTransport": "org.springframework.ai.autoconfigure.vertexai.gemini.getTransport",
            "org.springframework.ai.autoconfigure.vertexai.gemini.setTransport": "org.springframework.ai.autoconfigure.vertexai.gemini.setTransport",
            "org.springframework.ai.autoconfigure.vertexai.gemini.CONFIG_PREFIX": "org.springframework.ai.autoconfigure.vertexai.gemini.CONFIG_PREFIX",
            "org.springframework.ai.autoconfigure.vertexai.gemini.projectId": "org.springframework.ai.autoconfigure.vertexai.gemini.projectId",
            "org.springframework.ai.autoconfigure.vertexai.gemini.location": "org.springframework.ai.autoconfigure.vertexai.gemini.location",
            "org.springframework.ai.autoconfigure.vertexai.gemini.credentialsUri": "org.springframework.ai.autoconfigure.vertexai.gemini.credentialsUri",
            "org.springframework.ai.autoconfigure.vertexai.gemini.apiEndpoint": "org.springframework.ai.autoconfigure.vertexai.gemini.apiEndpoint",
            "org.springframework.ai.autoconfigure.vertexai.gemini.scopes": "org.springframework.ai.autoconfigure.vertexai.gemini.scopes",
            "org.springframework.ai.autoconfigure.vertexai.gemini.transport": "org.springframework.ai.autoconfigure.vertexai.gemini.transport"
        },
        "package": "package org.springframework.ai.autoconfigure.vertexai.gemini;",
        "property_declarations": [
            "private Transport transport = Transport.GRPC;",
            "private String projectId;",
            "private String apiEndpoint;",
            "public static final String CONFIG_PREFIX = \"spring.ai.vertex.ai.gemini\";",
            "private List<String> scopes = List.of();",
            "private String location;",
            "private Resource credentialsUri;"
        ],
        "functions": [
            {
                "name": "getProjectId",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.projectId;",
                "is_abstract": "",
                "class_name": "VertexAiGeminiConnectionProperties",
                "annotations": []
            },
            {
                "name": "setProjectId",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.projectId = projectId;",
                "is_abstract": "",
                "class_name": "VertexAiGeminiConnectionProperties",
                "annotations": []
            },
            {
                "name": "getLocation",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.location;",
                "is_abstract": "",
                "class_name": "VertexAiGeminiConnectionProperties",
                "annotations": []
            },
            {
                "name": "setLocation",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.location = location;",
                "is_abstract": "",
                "class_name": "VertexAiGeminiConnectionProperties",
                "annotations": []
            },
            {
                "name": "getCredentialsUri",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.credentialsUri;",
                "is_abstract": "",
                "class_name": "VertexAiGeminiConnectionProperties",
                "annotations": []
            },
            {
                "name": "setCredentialsUri",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.credentialsUri = credentialsUri;",
                "is_abstract": "",
                "class_name": "VertexAiGeminiConnectionProperties",
                "annotations": []
            },
            {
                "name": "getApiEndpoint",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.apiEndpoint;",
                "is_abstract": "",
                "class_name": "VertexAiGeminiConnectionProperties",
                "annotations": []
            },
            {
                "name": "getScopes",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.scopes;",
                "is_abstract": "",
                "class_name": "VertexAiGeminiConnectionProperties",
                "annotations": []
            },
            {
                "name": "setScopes",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.scopes = scopes;",
                "is_abstract": "",
                "class_name": "VertexAiGeminiConnectionProperties",
                "annotations": []
            },
            {
                "name": "setApiEndpoint",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.apiEndpoint = apiEndpoint;",
                "is_abstract": "",
                "class_name": "VertexAiGeminiConnectionProperties",
                "annotations": []
            },
            {
                "name": "getTransport",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.transport;",
                "is_abstract": "",
                "class_name": "VertexAiGeminiConnectionProperties",
                "annotations": []
            },
            {
                "name": "setTransport",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.transport = transport;",
                "is_abstract": "",
                "class_name": "VertexAiGeminiConnectionProperties",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vertexai/palm2/VertexAiPlam2ChatProperties.java",
        "class_names": [
            "VertexAiPlam2ChatProperties"
        ],
        "imports": "import org.springframework.ai.vertexai.palm2.VertexAiPaLm2ChatOptions;\nimport org.springframework.ai.vertexai.palm2.api.VertexAiPaLm2Api;\nimport org.springframework.boot.context.properties.ConfigurationProperties;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.vertexai.palm2.VertexAiPlam2ChatProperties": "org.springframework.ai.autoconfigure.vertexai.palm2.VertexAiPlam2ChatProperties",
            "org.springframework.ai.autoconfigure.vertexai.palm2.getModel": "org.springframework.ai.autoconfigure.vertexai.palm2.getModel",
            "org.springframework.ai.autoconfigure.vertexai.palm2.setModel": "org.springframework.ai.autoconfigure.vertexai.palm2.setModel",
            "org.springframework.ai.autoconfigure.vertexai.palm2.getOptions": "org.springframework.ai.autoconfigure.vertexai.palm2.getOptions",
            "org.springframework.ai.autoconfigure.vertexai.palm2.setOptions": "org.springframework.ai.autoconfigure.vertexai.palm2.setOptions",
            "org.springframework.ai.autoconfigure.vertexai.palm2.isEnabled": "org.springframework.ai.autoconfigure.vertexai.palm2.isEnabled",
            "org.springframework.ai.autoconfigure.vertexai.palm2.setEnabled": "org.springframework.ai.autoconfigure.vertexai.palm2.setEnabled",
            "org.springframework.ai.autoconfigure.vertexai.palm2.CONFIG_PREFIX": "org.springframework.ai.autoconfigure.vertexai.palm2.CONFIG_PREFIX",
            "org.springframework.ai.autoconfigure.vertexai.palm2.enabled": "org.springframework.ai.autoconfigure.vertexai.palm2.enabled",
            "org.springframework.ai.autoconfigure.vertexai.palm2.model": "org.springframework.ai.autoconfigure.vertexai.palm2.model",
            "org.springframework.ai.autoconfigure.vertexai.palm2.options": "org.springframework.ai.autoconfigure.vertexai.palm2.options"
        },
        "package": "package org.springframework.ai.autoconfigure.vertexai.palm2;",
        "property_declarations": [
            "private String model = VertexAiPaLm2Api.DEFAULT_GENERATE_MODEL;",
            "private boolean enabled = true;",
            "private VertexAiPaLm2ChatOptions options = VertexAiPaLm2ChatOptions.builder()\n\t\t.withTemperature(0.7f)\n\t\t.withTopP(null)\n\t\t.withCandidateCount(1)\n\t\t.withTopK(20)\n\t\t.build();",
            "public static final String CONFIG_PREFIX = \"spring.ai.vertex.ai.chat\";"
        ],
        "functions": [
            {
                "name": "getModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.model;",
                "is_abstract": "",
                "class_name": "VertexAiPlam2ChatProperties",
                "annotations": []
            },
            {
                "name": "setModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.model = model;",
                "is_abstract": "",
                "class_name": "VertexAiPlam2ChatProperties",
                "annotations": []
            },
            {
                "name": "getOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.options;",
                "is_abstract": "",
                "class_name": "VertexAiPlam2ChatProperties",
                "annotations": []
            },
            {
                "name": "setOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options = options;",
                "is_abstract": "",
                "class_name": "VertexAiPlam2ChatProperties",
                "annotations": []
            },
            {
                "name": "isEnabled",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.enabled;",
                "is_abstract": "",
                "class_name": "VertexAiPlam2ChatProperties",
                "annotations": []
            },
            {
                "name": "setEnabled",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.enabled = enabled;",
                "is_abstract": "",
                "class_name": "VertexAiPlam2ChatProperties",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vertexai/palm2/VertexAiPalm2EmbeddingProperties.java",
        "class_names": [
            "VertexAiPalm2EmbeddingProperties"
        ],
        "imports": "import org.springframework.ai.vertexai.palm2.api.VertexAiPaLm2Api;\nimport org.springframework.boot.context.properties.ConfigurationProperties;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.vertexai.palm2.VertexAiPalm2EmbeddingProperties": "org.springframework.ai.autoconfigure.vertexai.palm2.VertexAiPalm2EmbeddingProperties",
            "org.springframework.ai.autoconfigure.vertexai.palm2.getModel": "org.springframework.ai.autoconfigure.vertexai.palm2.getModel",
            "org.springframework.ai.autoconfigure.vertexai.palm2.setModel": "org.springframework.ai.autoconfigure.vertexai.palm2.setModel",
            "org.springframework.ai.autoconfigure.vertexai.palm2.isEnabled": "org.springframework.ai.autoconfigure.vertexai.palm2.isEnabled",
            "org.springframework.ai.autoconfigure.vertexai.palm2.setEnabled": "org.springframework.ai.autoconfigure.vertexai.palm2.setEnabled",
            "org.springframework.ai.autoconfigure.vertexai.palm2.CONFIG_PREFIX": "org.springframework.ai.autoconfigure.vertexai.palm2.CONFIG_PREFIX",
            "org.springframework.ai.autoconfigure.vertexai.palm2.enabled": "org.springframework.ai.autoconfigure.vertexai.palm2.enabled",
            "org.springframework.ai.autoconfigure.vertexai.palm2.model": "org.springframework.ai.autoconfigure.vertexai.palm2.model"
        },
        "package": "package org.springframework.ai.autoconfigure.vertexai.palm2;",
        "property_declarations": [
            "private String model = VertexAiPaLm2Api.DEFAULT_EMBEDDING_MODEL;",
            "private boolean enabled = true;",
            "public static final String CONFIG_PREFIX = \"spring.ai.vertex.ai.embedding\";"
        ],
        "functions": [
            {
                "name": "getModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.model;",
                "is_abstract": "",
                "class_name": "VertexAiPalm2EmbeddingProperties",
                "annotations": []
            },
            {
                "name": "setModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.model = model;",
                "is_abstract": "",
                "class_name": "VertexAiPalm2EmbeddingProperties",
                "annotations": []
            },
            {
                "name": "isEnabled",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.enabled;",
                "is_abstract": "",
                "class_name": "VertexAiPalm2EmbeddingProperties",
                "annotations": []
            },
            {
                "name": "setEnabled",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.enabled = enabled;",
                "is_abstract": "",
                "class_name": "VertexAiPalm2EmbeddingProperties",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vertexai/palm2/VertexAiPalm2AutoConfiguration.java",
        "class_names": [
            "VertexAiPalm2AutoConfiguration"
        ],
        "imports": "import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.boot.autoconfigure.web.client.RestClientAutoConfiguration;\nimport org.springframework.ai.vertexai.palm2.api.VertexAiPaLm2Api;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.ai.vertexai.palm2.VertexAiPaLm2ChatClient;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.ai.vertexai.palm2.VertexAiPaLm2EmbeddingClient;\nimport org.springframework.web.client.RestClient;\nimport org.springframework.boot.autoconfigure.AutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.vertexai.palm2.VertexAiPalm2AutoConfiguration": "org.springframework.ai.autoconfigure.vertexai.palm2.VertexAiPalm2AutoConfiguration",
            "org.springframework.ai.autoconfigure.vertexai.palm2.vertexAiApi": "org.springframework.ai.autoconfigure.vertexai.palm2.vertexAiApi",
            "org.springframework.ai.autoconfigure.vertexai.palm2.ConditionalOnProperty": "org.springframework.ai.autoconfigure.vertexai.palm2.ConditionalOnProperty"
        },
        "package": "package org.springframework.ai.autoconfigure.vertexai.palm2;",
        "property_declarations": [],
        "functions": [
            {
                "name": "vertexAiApi",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new VertexAiPaLm2Api(connectionProperties.getBaseUrl(), connectionProperties.getApiKey(),\n\t\t\t\tchatProperties.getModel(), embeddingAiProperties.getModel(), restClientBuilder);",
                "is_abstract": "",
                "class_name": "VertexAiPalm2AutoConfiguration",
                "annotations": []
            },
            {
                "name": "ConditionalOnProperty",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new VertexAiPaLm2ChatClient(vertexAiApi, chatProperties.getOptions());",
                "is_abstract": "",
                "class_name": "VertexAiPalm2AutoConfiguration",
                "annotations": [
                    "@ConditionalOnProperty(prefix = VertexAiPlam2ChatProperties.CONFIG_PREFIX, name = \"enabled\", havingValue = \"true\",\n\t\t\tmatchIfMissing = true)"
                ]
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vertexai/palm2/VertexAiPalm2ConnectionProperties.java",
        "class_names": [
            "VertexAiPalm2ConnectionProperties"
        ],
        "imports": "import org.springframework.ai.vertexai.palm2.api.VertexAiPaLm2Api;\nimport org.springframework.boot.context.properties.ConfigurationProperties;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.vertexai.palm2.VertexAiPalm2ConnectionProperties": "org.springframework.ai.autoconfigure.vertexai.palm2.VertexAiPalm2ConnectionProperties",
            "org.springframework.ai.autoconfigure.vertexai.palm2.getApiKey": "org.springframework.ai.autoconfigure.vertexai.palm2.getApiKey",
            "org.springframework.ai.autoconfigure.vertexai.palm2.setApiKey": "org.springframework.ai.autoconfigure.vertexai.palm2.setApiKey",
            "org.springframework.ai.autoconfigure.vertexai.palm2.getBaseUrl": "org.springframework.ai.autoconfigure.vertexai.palm2.getBaseUrl",
            "org.springframework.ai.autoconfigure.vertexai.palm2.setBaseUrl": "org.springframework.ai.autoconfigure.vertexai.palm2.setBaseUrl",
            "org.springframework.ai.autoconfigure.vertexai.palm2.CONFIG_PREFIX": "org.springframework.ai.autoconfigure.vertexai.palm2.CONFIG_PREFIX",
            "org.springframework.ai.autoconfigure.vertexai.palm2.apiKey": "org.springframework.ai.autoconfigure.vertexai.palm2.apiKey",
            "org.springframework.ai.autoconfigure.vertexai.palm2.baseUrl": "org.springframework.ai.autoconfigure.vertexai.palm2.baseUrl"
        },
        "package": "package org.springframework.ai.autoconfigure.vertexai.palm2;",
        "property_declarations": [
            "private String baseUrl = VertexAiPaLm2Api.DEFAULT_BASE_URL;",
            "public static final String CONFIG_PREFIX = \"spring.ai.vertex.ai\";",
            "private String apiKey;"
        ],
        "functions": [
            {
                "name": "getApiKey",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.apiKey;",
                "is_abstract": "",
                "class_name": "VertexAiPalm2ConnectionProperties",
                "annotations": []
            },
            {
                "name": "setApiKey",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.apiKey = apiKey;",
                "is_abstract": "",
                "class_name": "VertexAiPalm2ConnectionProperties",
                "annotations": []
            },
            {
                "name": "getBaseUrl",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.baseUrl;",
                "is_abstract": "",
                "class_name": "VertexAiPalm2ConnectionProperties",
                "annotations": []
            },
            {
                "name": "setBaseUrl",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.baseUrl = baseUrl;",
                "is_abstract": "",
                "class_name": "VertexAiPalm2ConnectionProperties",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/transformers/TransformersEmbeddingClientProperties.java",
        "class_names": [
            "Onnx",
            "Cache",
            "Tokenizer",
            "TransformersEmbeddingClientProperties"
        ],
        "imports": "import java.io.File;\nimport org.springframework.ai.document.MetadataMode;\nimport java.util.List;\nimport org.springframework.ai.transformers.TransformersEmbeddingClient;\nimport static org.springframework.ai.autoconfigure.transformers.TransformersEmbeddingClientProperties.CONFIG_PREFIX;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.ai.document.Document;\nimport java.util.Map;\nimport java.util.HashMap;\nimport org.springframework.boot.context.properties.NestedConfigurationProperty;\nimport ai.djl.huggingface.tokenizers.HuggingFaceTokenizer;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.transformers.TransformersEmbeddingClientProperties": "org.springframework.ai.autoconfigure.transformers.TransformersEmbeddingClientProperties",
            "org.springframework.ai.autoconfigure.transformers.Tokenizer": "org.springframework.ai.autoconfigure.transformers.Tokenizer",
            "org.springframework.ai.autoconfigure.transformers.Cach": "org.springframework.ai.autoconfigure.transformers.Cach",
            "org.springframework.ai.autoconfigure.transformers.Onnx": "org.springframework.ai.autoconfigure.transformers.Onnx",
            "org.springframework.ai.autoconfigure.transformers.isEnabled": "org.springframework.ai.autoconfigure.transformers.isEnabled",
            "org.springframework.ai.autoconfigure.transformers.setEnabled": "org.springframework.ai.autoconfigure.transformers.setEnabled",
            "org.springframework.ai.autoconfigure.transformers.getUri": "org.springframework.ai.autoconfigure.transformers.getUri",
            "org.springframework.ai.autoconfigure.transformers.setUri": "org.springframework.ai.autoconfigure.transformers.setUri",
            "org.springframework.ai.autoconfigure.transformers.getOptions": "org.springframework.ai.autoconfigure.transformers.getOptions",
            "org.springframework.ai.autoconfigure.transformers.setOptions": "org.springframework.ai.autoconfigure.transformers.setOptions",
            "org.springframework.ai.autoconfigure.transformers.getDirectory": "org.springframework.ai.autoconfigure.transformers.getDirectory",
            "org.springframework.ai.autoconfigure.transformers.setDirectory": "org.springframework.ai.autoconfigure.transformers.setDirectory",
            "org.springframework.ai.autoconfigure.transformers.getCach": "org.springframework.ai.autoconfigure.transformers.getCach",
            "org.springframework.ai.autoconfigure.transformers.getModelUri": "org.springframework.ai.autoconfigure.transformers.getModelUri",
            "org.springframework.ai.autoconfigure.transformers.setModelUri": "org.springframework.ai.autoconfigure.transformers.setModelUri",
            "org.springframework.ai.autoconfigure.transformers.getGpuDeviceId": "org.springframework.ai.autoconfigure.transformers.getGpuDeviceId",
            "org.springframework.ai.autoconfigure.transformers.setGpuDeviceId": "org.springframework.ai.autoconfigure.transformers.setGpuDeviceId",
            "org.springframework.ai.autoconfigure.transformers.getModelOutputNam": "org.springframework.ai.autoconfigure.transformers.getModelOutputNam",
            "org.springframework.ai.autoconfigure.transformers.setModelOutputNam": "org.springframework.ai.autoconfigure.transformers.setModelOutputNam",
            "org.springframework.ai.autoconfigure.transformers.getOnnx": "org.springframework.ai.autoconfigure.transformers.getOnnx",
            "org.springframework.ai.autoconfigure.transformers.getTokenizer": "org.springframework.ai.autoconfigure.transformers.getTokenizer",
            "org.springframework.ai.autoconfigure.transformers.getMetadataMod": "org.springframework.ai.autoconfigure.transformers.getMetadataMod",
            "org.springframework.ai.autoconfigure.transformers.setMetadataMod": "org.springframework.ai.autoconfigure.transformers.setMetadataMod",
            "org.springframework.ai.autoconfigure.transformers.CONFIG_PREFIX": "org.springframework.ai.autoconfigure.transformers.CONFIG_PREFIX",
            "org.springframework.ai.autoconfigure.transformers.DEFAULT_CACHE_DIRECTORY": "org.springframework.ai.autoconfigure.transformers.DEFAULT_CACHE_DIRECTORY",
            "org.springframework.ai.autoconfigure.transformers.enabled": "org.springframework.ai.autoconfigure.transformers.enabled",
            "org.springframework.ai.autoconfigure.transformers.uri": "org.springframework.ai.autoconfigure.transformers.uri",
            "org.springframework.ai.autoconfigure.transformers.privat": "org.springframework.ai.autoconfigure.transformers.privat",
            "org.springframework.ai.autoconfigure.transformers.directory": "org.springframework.ai.autoconfigure.transformers.directory",
            "org.springframework.ai.autoconfigure.transformers.modelUri": "org.springframework.ai.autoconfigure.transformers.modelUri",
            "org.springframework.ai.autoconfigure.transformers.modelOutputNam": "org.springframework.ai.autoconfigure.transformers.modelOutputNam",
            "org.springframework.ai.autoconfigure.transformers.gpuDeviceId": "org.springframework.ai.autoconfigure.transformers.gpuDeviceId",
            "org.springframework.ai.autoconfigure.transformers.metadataMod": "org.springframework.ai.autoconfigure.transformers.metadataMod"
        },
        "package": "package org.springframework.ai.autoconfigure.transformers;",
        "property_declarations": [
            "private String uri = TransformersEmbeddingClient.DEFAULT_ONNX_TOKENIZER_URI;",
            "private String directory = DEFAULT_CACHE_DIRECTORY;",
            "private String modelUri = TransformersEmbeddingClient.DEFAULT_ONNX_MODEL_URI;",
            "public static final String CONFIG_PREFIX = \"spring.ai.embedding.transformer\";",
            "public static final String DEFAULT_CACHE_DIRECTORY = new File(System.getProperty(\"java.io.tmpdir\"),\n\t\t\t\"spring-ai-onnx-generative\")\n\t\t.getAbsolutePath();",
            "private int gpuDeviceId = -1;",
            "private boolean enabled = true;",
            "@NestedConfigurationProperty\n\tprivate final Onnx onnx = new Onnx();",
            "private String modelOutputName = TransformersEmbeddingClient.DEFAULT_MODEL_OUTPUT_NAME;",
            "private MetadataMode metadataMode = MetadataMode.NONE;",
            "@NestedConfigurationProperty\n\tprivate final Cache cache = new Cache();",
            "@NestedConfigurationProperty\n\t\tprivate Map<String, String> options = new HashMap<>();",
            "@NestedConfigurationProperty\n\tprivate final Tokenizer tokenizer = new Tokenizer();"
        ],
        "functions": [
            {
                "name": "isEnabled",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.enabled;",
                "is_abstract": "",
                "class_name": "TransformersEmbeddingClientProperties",
                "annotations": []
            },
            {
                "name": "setEnabled",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.enabled = enabled;",
                "is_abstract": "",
                "class_name": "TransformersEmbeddingClientProperties",
                "annotations": []
            },
            {
                "name": "getUri",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.uri;",
                "is_abstract": "",
                "class_name": "TransformersEmbeddingClientProperties Tokenizer",
                "annotations": []
            },
            {
                "name": "setUri",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.uri = uri;",
                "is_abstract": "",
                "class_name": "TransformersEmbeddingClientProperties Tokenizer",
                "annotations": []
            },
            {
                "name": "getOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.options;",
                "is_abstract": "",
                "class_name": "TransformersEmbeddingClientProperties Tokenizer",
                "annotations": []
            },
            {
                "name": "setOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options = options;",
                "is_abstract": "",
                "class_name": "TransformersEmbeddingClientProperties Tokenizer",
                "annotations": []
            },
            {
                "name": "getDirectory",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.directory;",
                "is_abstract": "",
                "class_name": "TransformersEmbeddingClientProperties Tokenizer Cache",
                "annotations": []
            },
            {
                "name": "setDirectory",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.directory = directory;",
                "is_abstract": "",
                "class_name": "TransformersEmbeddingClientProperties Tokenizer Cache",
                "annotations": []
            },
            {
                "name": "getCache",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.cache;",
                "is_abstract": "",
                "class_name": "TransformersEmbeddingClientProperties Tokenizer Cache",
                "annotations": []
            },
            {
                "name": "getModelUri",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.modelUri;",
                "is_abstract": "",
                "class_name": "TransformersEmbeddingClientProperties Tokenizer Cache Onnx",
                "annotations": []
            },
            {
                "name": "setModelUri",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.modelUri = modelUri;",
                "is_abstract": "",
                "class_name": "TransformersEmbeddingClientProperties Tokenizer Cache Onnx",
                "annotations": []
            },
            {
                "name": "getGpuDeviceId",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.gpuDeviceId;",
                "is_abstract": "",
                "class_name": "TransformersEmbeddingClientProperties Tokenizer Cache Onnx",
                "annotations": []
            },
            {
                "name": "setGpuDeviceId",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.gpuDeviceId = gpuDeviceId;",
                "is_abstract": "",
                "class_name": "TransformersEmbeddingClientProperties Tokenizer Cache Onnx",
                "annotations": []
            },
            {
                "name": "getModelOutputName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.modelOutputName;",
                "is_abstract": "",
                "class_name": "TransformersEmbeddingClientProperties Tokenizer Cache Onnx",
                "annotations": []
            },
            {
                "name": "setModelOutputName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.modelOutputName = modelOutputName;",
                "is_abstract": "",
                "class_name": "TransformersEmbeddingClientProperties Tokenizer Cache Onnx",
                "annotations": []
            },
            {
                "name": "getOnnx",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.onnx;",
                "is_abstract": "",
                "class_name": "TransformersEmbeddingClientProperties Tokenizer Cache Onnx",
                "annotations": []
            },
            {
                "name": "getTokenizer",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.tokenizer;",
                "is_abstract": "",
                "class_name": "TransformersEmbeddingClientProperties Tokenizer Cache Onnx",
                "annotations": []
            },
            {
                "name": "getMetadataMode",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.metadataMode;",
                "is_abstract": "",
                "class_name": "TransformersEmbeddingClientProperties Tokenizer Cache Onnx",
                "annotations": []
            },
            {
                "name": "setMetadataMode",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.metadataMode = metadataMode;",
                "is_abstract": "",
                "class_name": "TransformersEmbeddingClientProperties Tokenizer Cache Onnx",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/transformers/TransformersEmbeddingClientAutoConfiguration.java",
        "class_names": [
            "TransformersEmbeddingClientAutoConfiguration"
        ],
        "imports": "import org.springframework.ai.transformers.TransformersEmbeddingClient;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport ai.djl.huggingface.tokenizers.HuggingFaceTokenizer;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport ai.onnxruntime.OrtSession;\nimport org.springframework.boot.autoconfigure.AutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.transformers.TransformersEmbeddingClientAutoConfiguration": "org.springframework.ai.autoconfigure.transformers.TransformersEmbeddingClientAutoConfiguration",
            "org.springframework.ai.autoconfigure.transformers.ConditionalOnProperty": "org.springframework.ai.autoconfigure.transformers.ConditionalOnProperty"
        },
        "package": "package org.springframework.ai.autoconfigure.transformers;",
        "property_declarations": [],
        "functions": [
            {
                "name": "ConditionalOnProperty",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "TransformersEmbeddingClient embeddingClient = new TransformersEmbeddingClient(properties.getMetadataMode());\n\n\t\tembeddingClient.setDisableCaching(!properties.getCache().isEnabled());\n\t\tembeddingClient.setResourceCacheDirectory(properties.getCache().getDirectory());\n\n\t\tembeddingClient.setTokenizerResource(properties.getTokenizer().getUri());\n\t\tembeddingClient.setTokenizerOptions(properties.getTokenizer().getOptions());\n\n\t\tembeddingClient.setModelResource(properties.getOnnx().getModelUri());\n\n\t\tembeddingClient.setGpuDeviceId(properties.getOnnx().getGpuDeviceId());\n\n\t\treturn embeddingClient;",
                "is_abstract": "",
                "class_name": "TransformersEmbeddingClientAutoConfiguration",
                "annotations": [
                    "@ConditionalOnProperty(prefix = TransformersEmbeddingClientProperties.CONFIG_PREFIX, name = \"enabled\",\n\t\t\thavingValue = \"true\", matchIfMissing = true)"
                ]
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/anthropic/AnthropicChatProperties.java",
        "class_names": [
            "AnthropicChatProperties"
        ],
        "imports": "import org.springframework.ai.anthropic.AnthropicChatClient;\nimport org.springframework.boot.context.properties.NestedConfigurationProperty;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.ai.anthropic.AnthropicChatOptions;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.anthropic.AnthropicChatProperties": "org.springframework.ai.autoconfigure.anthropic.AnthropicChatProperties",
            "org.springframework.ai.autoconfigure.anthropic.getOptions": "org.springframework.ai.autoconfigure.anthropic.getOptions",
            "org.springframework.ai.autoconfigure.anthropic.setEnabled": "org.springframework.ai.autoconfigure.anthropic.setEnabled",
            "org.springframework.ai.autoconfigure.anthropic.isEnabled": "org.springframework.ai.autoconfigure.anthropic.isEnabled",
            "org.springframework.ai.autoconfigure.anthropic.CONFIG_PREFIX": "org.springframework.ai.autoconfigure.anthropic.CONFIG_PREFIX",
            "org.springframework.ai.autoconfigure.anthropic.enabled": "org.springframework.ai.autoconfigure.anthropic.enabled",
            "org.springframework.ai.autoconfigure.anthropic.privat": "org.springframework.ai.autoconfigure.anthropic.privat"
        },
        "package": "package org.springframework.ai.autoconfigure.anthropic;",
        "property_declarations": [
            "public static final String CONFIG_PREFIX = \"spring.ai.anthropic.chat\";",
            "private boolean enabled = true;",
            "@NestedConfigurationProperty\n\tprivate AnthropicChatOptions options = AnthropicChatOptions.builder()\n\t\t.withModel(AnthropicChatClient.DEFAULT_MODEL_NAME)\n\t\t.withMaxTokens(AnthropicChatClient.DEFAULT_MAX_TOKENS)\n\t\t.withTemperature(AnthropicChatClient.DEFAULT_TEMPERATURE)\n\t\t.build();"
        ],
        "functions": [
            {
                "name": "getOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.options;",
                "is_abstract": "",
                "class_name": "AnthropicChatProperties",
                "annotations": []
            },
            {
                "name": "setEnabled",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.enabled = enabled;",
                "is_abstract": "",
                "class_name": "AnthropicChatProperties",
                "annotations": []
            },
            {
                "name": "isEnabled",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.enabled;",
                "is_abstract": "",
                "class_name": "AnthropicChatProperties",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/anthropic/AnthropicConnectionProperties.java",
        "class_names": [
            "AnthropicConnectionProperties"
        ],
        "imports": "import org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.ai.anthropic.api.AnthropicApi;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.anthropic.AnthropicConnectionProperties": "org.springframework.ai.autoconfigure.anthropic.AnthropicConnectionProperties",
            "org.springframework.ai.autoconfigure.anthropic.getApiKey": "org.springframework.ai.autoconfigure.anthropic.getApiKey",
            "org.springframework.ai.autoconfigure.anthropic.setApiKey": "org.springframework.ai.autoconfigure.anthropic.setApiKey",
            "org.springframework.ai.autoconfigure.anthropic.getBaseUrl": "org.springframework.ai.autoconfigure.anthropic.getBaseUrl",
            "org.springframework.ai.autoconfigure.anthropic.setBaseUrl": "org.springframework.ai.autoconfigure.anthropic.setBaseUrl",
            "org.springframework.ai.autoconfigure.anthropic.getVersion": "org.springframework.ai.autoconfigure.anthropic.getVersion",
            "org.springframework.ai.autoconfigure.anthropic.setVersion": "org.springframework.ai.autoconfigure.anthropic.setVersion",
            "org.springframework.ai.autoconfigure.anthropic.CONFIG_PREFIX": "org.springframework.ai.autoconfigure.anthropic.CONFIG_PREFIX",
            "org.springframework.ai.autoconfigure.anthropic.apiKey": "org.springframework.ai.autoconfigure.anthropic.apiKey",
            "org.springframework.ai.autoconfigure.anthropic.baseUrl": "org.springframework.ai.autoconfigure.anthropic.baseUrl",
            "org.springframework.ai.autoconfigure.anthropic.version": "org.springframework.ai.autoconfigure.anthropic.version"
        },
        "package": "package org.springframework.ai.autoconfigure.anthropic;",
        "property_declarations": [
            "private String apiKey;",
            "public static final String CONFIG_PREFIX = \"spring.ai.anthropic\";",
            "private String version = AnthropicApi.DEFAULT_ANTHROPIC_VERSION;",
            "private String baseUrl = AnthropicApi.DEFAULT_BASE_URL;"
        ],
        "functions": [
            {
                "name": "getApiKey",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.apiKey;",
                "is_abstract": "",
                "class_name": "AnthropicConnectionProperties",
                "annotations": []
            },
            {
                "name": "setApiKey",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.apiKey = apiKey;",
                "is_abstract": "",
                "class_name": "AnthropicConnectionProperties",
                "annotations": []
            },
            {
                "name": "getBaseUrl",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.baseUrl;",
                "is_abstract": "",
                "class_name": "AnthropicConnectionProperties",
                "annotations": []
            },
            {
                "name": "setBaseUrl",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.baseUrl = baseUrl;",
                "is_abstract": "",
                "class_name": "AnthropicConnectionProperties",
                "annotations": []
            },
            {
                "name": "getVersion",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.version;",
                "is_abstract": "",
                "class_name": "AnthropicConnectionProperties",
                "annotations": []
            },
            {
                "name": "setVersion",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.version = version;",
                "is_abstract": "",
                "class_name": "AnthropicConnectionProperties",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/anthropic/AnthropicAutoConfiguration.java",
        "class_names": [
            "AnthropicAutoConfiguration"
        ],
        "imports": "import org.springframework.context.ApplicationContext;\nimport java.util.List;\nimport org.springframework.retry.support.RetryTemplate;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.boot.autoconfigure.web.client.RestClientAutoConfiguration;\nimport org.springframework.util.CollectionUtils;\nimport org.springframework.ai.model.function.FunctionCallback;\nimport org.springframework.ai.anthropic.AnthropicChatClient;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.web.client.RestClient;\nimport org.springframework.ai.model.function.FunctionCallbackContext;\nimport org.springframework.ai.anthropic.api.AnthropicApi;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.ai.autoconfigure.retry.SpringAiRetryAutoConfiguration;\nimport org.springframework.web.client.ResponseErrorHandler;\nimport org.springframework.boot.autoconfigure.AutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.anthropic.AnthropicAutoConfiguration": "org.springframework.ai.autoconfigure.anthropic.AnthropicAutoConfiguration",
            "org.springframework.ai.autoconfigure.anthropic.anthropicApi": "org.springframework.ai.autoconfigure.anthropic.anthropicApi",
            "org.springframework.ai.autoconfigure.anthropic.anthropicChatClient": "org.springframework.ai.autoconfigure.anthropic.anthropicChatClient",
            "org.springframework.ai.autoconfigure.anthropic.springAiFunctionManager": "org.springframework.ai.autoconfigure.anthropic.springAiFunctionManager"
        },
        "package": "package org.springframework.ai.autoconfigure.anthropic;",
        "property_declarations": [],
        "functions": [
            {
                "name": "anthropicApi",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new AnthropicApi(connectionProperties.getBaseUrl(), connectionProperties.getApiKey(),\n\t\t\t\tconnectionProperties.getVersion(), restClientBuilder, responseErrorHandler);",
                "is_abstract": "",
                "class_name": "AnthropicAutoConfiguration",
                "annotations": []
            },
            {
                "name": "anthropicChatClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (!CollectionUtils.isEmpty(toolFunctionCallbacks)) {\n\t\t\tchatProperties.getOptions().getFunctionCallbacks().addAll(toolFunctionCallbacks);\n\t\t}\n\n\t\treturn new AnthropicChatClient(anthropicApi, chatProperties.getOptions(), retryTemplate,\n\t\t\t\tfunctionCallbackContext);",
                "is_abstract": "",
                "class_name": "AnthropicAutoConfiguration",
                "annotations": []
            },
            {
                "name": "springAiFunctionManager",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "FunctionCallbackContext manager = new FunctionCallbackContext();\n\t\tmanager.setApplicationContext(context);\n\t\treturn manager;",
                "is_abstract": "",
                "class_name": "AnthropicAutoConfiguration",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/huggingface/HuggingfaceChatProperties.java",
        "class_names": [
            "HuggingfaceChatProperties"
        ],
        "imports": "import org.springframework.boot.context.properties.ConfigurationProperties;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.huggingface.HuggingfaceChatProperties": "org.springframework.ai.autoconfigure.huggingface.HuggingfaceChatProperties",
            "org.springframework.ai.autoconfigure.huggingface.getApiKey": "org.springframework.ai.autoconfigure.huggingface.getApiKey",
            "org.springframework.ai.autoconfigure.huggingface.setApiKey": "org.springframework.ai.autoconfigure.huggingface.setApiKey",
            "org.springframework.ai.autoconfigure.huggingface.getUrl": "org.springframework.ai.autoconfigure.huggingface.getUrl",
            "org.springframework.ai.autoconfigure.huggingface.setUrl": "org.springframework.ai.autoconfigure.huggingface.setUrl",
            "org.springframework.ai.autoconfigure.huggingface.isEnabled": "org.springframework.ai.autoconfigure.huggingface.isEnabled",
            "org.springframework.ai.autoconfigure.huggingface.setEnabled": "org.springframework.ai.autoconfigure.huggingface.setEnabled",
            "org.springframework.ai.autoconfigure.huggingface.CONFIG_PREFIX": "org.springframework.ai.autoconfigure.huggingface.CONFIG_PREFIX",
            "org.springframework.ai.autoconfigure.huggingface.apiKey": "org.springframework.ai.autoconfigure.huggingface.apiKey",
            "org.springframework.ai.autoconfigure.huggingface.url": "org.springframework.ai.autoconfigure.huggingface.url",
            "org.springframework.ai.autoconfigure.huggingface.enabled": "org.springframework.ai.autoconfigure.huggingface.enabled"
        },
        "package": "package org.springframework.ai.autoconfigure.huggingface;",
        "property_declarations": [
            "private String apiKey;",
            "private boolean enabled = true;",
            "public static final String CONFIG_PREFIX = \"spring.ai.huggingface.chat\";",
            "private String url;"
        ],
        "functions": [
            {
                "name": "getApiKey",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return apiKey;",
                "is_abstract": "",
                "class_name": "HuggingfaceChatProperties",
                "annotations": []
            },
            {
                "name": "setApiKey",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.apiKey = apiKey;",
                "is_abstract": "",
                "class_name": "HuggingfaceChatProperties",
                "annotations": []
            },
            {
                "name": "getUrl",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return url;",
                "is_abstract": "",
                "class_name": "HuggingfaceChatProperties",
                "annotations": []
            },
            {
                "name": "setUrl",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.url = url;",
                "is_abstract": "",
                "class_name": "HuggingfaceChatProperties",
                "annotations": []
            },
            {
                "name": "isEnabled",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return enabled;",
                "is_abstract": "",
                "class_name": "HuggingfaceChatProperties",
                "annotations": []
            },
            {
                "name": "setEnabled",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.enabled = enabled;",
                "is_abstract": "",
                "class_name": "HuggingfaceChatProperties",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/huggingface/HuggingfaceChatAutoConfiguration.java",
        "class_names": [
            "HuggingfaceChatAutoConfiguration"
        ],
        "imports": "import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.ai.huggingface.HuggingfaceChatClient;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.AutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.huggingface.HuggingfaceChatAutoConfiguration": "org.springframework.ai.autoconfigure.huggingface.HuggingfaceChatAutoConfiguration",
            "org.springframework.ai.autoconfigure.huggingface.ConditionalOnProperty": "org.springframework.ai.autoconfigure.huggingface.ConditionalOnProperty"
        },
        "package": "package org.springframework.ai.autoconfigure.huggingface;",
        "property_declarations": [],
        "functions": [
            {
                "name": "ConditionalOnProperty",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new HuggingfaceChatClient(huggingfaceChatProperties.getApiKey(), huggingfaceChatProperties.getUrl());",
                "is_abstract": "",
                "class_name": "HuggingfaceChatAutoConfiguration",
                "annotations": [
                    "@ConditionalOnProperty(prefix = HuggingfaceChatProperties.CONFIG_PREFIX, name = \"enabled\", havingValue = \"true\",\n\t\t\tmatchIfMissing = true)"
                ]
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/ollama/OllamaConnectionDetails.java",
        "class_names": [],
        "imports": "import org.springframework.boot.autoconfigure.service.connection.ConnectionDetails;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.ollama.getBaseUrl": "org.springframework.ai.autoconfigure.ollama.getBaseUrl"
        },
        "package": "package org.springframework.ai.autoconfigure.ollama;",
        "property_declarations": [],
        "functions": [
            {
                "name": "getBaseUrl",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/ollama/OllamaConnectionProperties.java",
        "class_names": [
            "OllamaConnectionProperties"
        ],
        "imports": "import org.springframework.boot.context.properties.ConfigurationProperties;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.ollama.OllamaConnectionProperties": "org.springframework.ai.autoconfigure.ollama.OllamaConnectionProperties",
            "org.springframework.ai.autoconfigure.ollama.getBaseUrl": "org.springframework.ai.autoconfigure.ollama.getBaseUrl",
            "org.springframework.ai.autoconfigure.ollama.setBaseUrl": "org.springframework.ai.autoconfigure.ollama.setBaseUrl",
            "org.springframework.ai.autoconfigure.ollama.CONFIG_PREFIX": "org.springframework.ai.autoconfigure.ollama.CONFIG_PREFIX",
            "org.springframework.ai.autoconfigure.ollama.baseUrl": "org.springframework.ai.autoconfigure.ollama.baseUrl"
        },
        "package": "package org.springframework.ai.autoconfigure.ollama;",
        "property_declarations": [
            "public static final String CONFIG_PREFIX = \"spring.ai.ollama\";",
            "private String baseUrl = \"http://localhost:11434\";"
        ],
        "functions": [
            {
                "name": "getBaseUrl",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return baseUrl;",
                "is_abstract": "",
                "class_name": "OllamaConnectionProperties",
                "annotations": []
            },
            {
                "name": "setBaseUrl",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.baseUrl = baseUrl;",
                "is_abstract": "",
                "class_name": "OllamaConnectionProperties",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/ollama/OllamaEmbeddingProperties.java",
        "class_names": [
            "OllamaEmbeddingProperties"
        ],
        "imports": "import org.springframework.boot.context.properties.NestedConfigurationProperty;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.ai.ollama.api.OllamaOptions;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.ollama.OllamaEmbeddingProperties": "org.springframework.ai.autoconfigure.ollama.OllamaEmbeddingProperties",
            "org.springframework.ai.autoconfigure.ollama.getModel": "org.springframework.ai.autoconfigure.ollama.getModel",
            "org.springframework.ai.autoconfigure.ollama.setModel": "org.springframework.ai.autoconfigure.ollama.setModel",
            "org.springframework.ai.autoconfigure.ollama.getOptions": "org.springframework.ai.autoconfigure.ollama.getOptions",
            "org.springframework.ai.autoconfigure.ollama.setEnabled": "org.springframework.ai.autoconfigure.ollama.setEnabled",
            "org.springframework.ai.autoconfigure.ollama.isEnabled": "org.springframework.ai.autoconfigure.ollama.isEnabled",
            "org.springframework.ai.autoconfigure.ollama.CONFIG_PREFIX": "org.springframework.ai.autoconfigure.ollama.CONFIG_PREFIX",
            "org.springframework.ai.autoconfigure.ollama.enabled": "org.springframework.ai.autoconfigure.ollama.enabled",
            "org.springframework.ai.autoconfigure.ollama.privat": "org.springframework.ai.autoconfigure.ollama.privat"
        },
        "package": "package org.springframework.ai.autoconfigure.ollama;",
        "property_declarations": [
            "@NestedConfigurationProperty\n\tprivate OllamaOptions options = OllamaOptions.create().withModel(OllamaOptions.DEFAULT_MODEL);",
            "private boolean enabled = true;",
            "public static final String CONFIG_PREFIX = \"spring.ai.ollama.embedding\";"
        ],
        "functions": [
            {
                "name": "getModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.options.getModel();",
                "is_abstract": "",
                "class_name": "OllamaEmbeddingProperties",
                "annotations": []
            },
            {
                "name": "setModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.setModel(model);",
                "is_abstract": "",
                "class_name": "OllamaEmbeddingProperties",
                "annotations": []
            },
            {
                "name": "getOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.options;",
                "is_abstract": "",
                "class_name": "OllamaEmbeddingProperties",
                "annotations": []
            },
            {
                "name": "setEnabled",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.enabled = enabled;",
                "is_abstract": "",
                "class_name": "OllamaEmbeddingProperties",
                "annotations": []
            },
            {
                "name": "isEnabled",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.enabled;",
                "is_abstract": "",
                "class_name": "OllamaEmbeddingProperties",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/ollama/OllamaChatProperties.java",
        "class_names": [
            "OllamaChatProperties"
        ],
        "imports": "import org.springframework.boot.context.properties.NestedConfigurationProperty;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.ai.ollama.api.OllamaOptions;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.ollama.OllamaChatProperties": "org.springframework.ai.autoconfigure.ollama.OllamaChatProperties",
            "org.springframework.ai.autoconfigure.ollama.getModel": "org.springframework.ai.autoconfigure.ollama.getModel",
            "org.springframework.ai.autoconfigure.ollama.setModel": "org.springframework.ai.autoconfigure.ollama.setModel",
            "org.springframework.ai.autoconfigure.ollama.getOptions": "org.springframework.ai.autoconfigure.ollama.getOptions",
            "org.springframework.ai.autoconfigure.ollama.setEnabled": "org.springframework.ai.autoconfigure.ollama.setEnabled",
            "org.springframework.ai.autoconfigure.ollama.isEnabled": "org.springframework.ai.autoconfigure.ollama.isEnabled",
            "org.springframework.ai.autoconfigure.ollama.CONFIG_PREFIX": "org.springframework.ai.autoconfigure.ollama.CONFIG_PREFIX",
            "org.springframework.ai.autoconfigure.ollama.enabled": "org.springframework.ai.autoconfigure.ollama.enabled",
            "org.springframework.ai.autoconfigure.ollama.privat": "org.springframework.ai.autoconfigure.ollama.privat"
        },
        "package": "package org.springframework.ai.autoconfigure.ollama;",
        "property_declarations": [
            "@NestedConfigurationProperty\n\tprivate OllamaOptions options = OllamaOptions.create().withModel(OllamaOptions.DEFAULT_MODEL);",
            "public static final String CONFIG_PREFIX = \"spring.ai.ollama.chat\";",
            "private boolean enabled = true;"
        ],
        "functions": [
            {
                "name": "getModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.options.getModel();",
                "is_abstract": "",
                "class_name": "OllamaChatProperties",
                "annotations": []
            },
            {
                "name": "setModel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options.setModel(model);",
                "is_abstract": "",
                "class_name": "OllamaChatProperties",
                "annotations": []
            },
            {
                "name": "getOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.options;",
                "is_abstract": "",
                "class_name": "OllamaChatProperties",
                "annotations": []
            },
            {
                "name": "setEnabled",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.enabled = enabled;",
                "is_abstract": "",
                "class_name": "OllamaChatProperties",
                "annotations": []
            },
            {
                "name": "isEnabled",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.enabled;",
                "is_abstract": "",
                "class_name": "OllamaChatProperties",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/ollama/OllamaAutoConfiguration.java",
        "class_names": [
            "OllamaAutoConfiguration",
            "PropertiesOllamaConnectionDetails"
        ],
        "imports": "import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.boot.autoconfigure.web.client.RestClientAutoConfiguration;\nimport org.springframework.ai.ollama.OllamaChatClient;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.ai.ollama.api.OllamaApi;\nimport org.springframework.web.client.RestClient;\nimport org.springframework.boot.autoconfigure.AutoConfiguration;\nimport org.springframework.ai.ollama.OllamaEmbeddingClient;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.ollama.OllamaAutoConfiguration": "org.springframework.ai.autoconfigure.ollama.OllamaAutoConfiguration",
            "org.springframework.ai.autoconfigure.ollama.PropertiesOllamaConnectionDetails": "org.springframework.ai.autoconfigure.ollama.PropertiesOllamaConnectionDetails",
            "org.springframework.ai.autoconfigure.ollama.ConditionalOnMissingBean": "org.springframework.ai.autoconfigure.ollama.ConditionalOnMissingBean",
            "org.springframework.ai.autoconfigure.ollama.ollamaApi": "org.springframework.ai.autoconfigure.ollama.ollamaApi",
            "org.springframework.ai.autoconfigure.ollama.ConditionalOnProperty": "org.springframework.ai.autoconfigure.ollama.ConditionalOnProperty",
            "org.springframework.ai.autoconfigure.ollama.getBaseUrl": "org.springframework.ai.autoconfigure.ollama.getBaseUrl",
            "org.springframework.ai.autoconfigure.ollama.properties": "org.springframework.ai.autoconfigure.ollama.properties"
        },
        "package": "package org.springframework.ai.autoconfigure.ollama;",
        "property_declarations": [
            "private final OllamaConnectionProperties properties;"
        ],
        "functions": [
            {
                "name": "ConditionalOnMissingBean",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new PropertiesOllamaConnectionDetails(properties);",
                "is_abstract": "",
                "class_name": "OllamaAutoConfiguration",
                "annotations": [
                    "@ConditionalOnMissingBean(OllamaConnectionDetails.class)"
                ]
            },
            {
                "name": "ollamaApi",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new OllamaApi(connectionDetails.getBaseUrl(), restClientBuilder);",
                "is_abstract": "",
                "class_name": "OllamaAutoConfiguration",
                "annotations": []
            },
            {
                "name": "ConditionalOnProperty",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new OllamaChatClient(ollamaApi).withModel(properties.getModel())\n\t\t\t.withDefaultOptions(properties.getOptions());",
                "is_abstract": "",
                "class_name": "OllamaAutoConfiguration",
                "annotations": [
                    "@ConditionalOnProperty(prefix = OllamaChatProperties.CONFIG_PREFIX, name = \"enabled\", havingValue = \"true\",\n\t\t\tmatchIfMissing = true)"
                ]
            },
            {
                "name": "getBaseUrl",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.properties.getBaseUrl();",
                "is_abstract": "",
                "class_name": "OllamaAutoConfiguration PropertiesOllamaConnectionDetails",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/watsonxai/WatsonxAiAutoConfiguration.java",
        "class_names": [
            "WatsonxAiAutoConfiguration"
        ],
        "imports": "import org.springframework.ai.watsonx.api.WatsonxAiApi;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.web.client.RestClientAutoConfiguration;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.ai.watsonx.WatsonxAiChatClient;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.web.client.RestClient;\nimport org.springframework.boot.autoconfigure.AutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.watsonxai.WatsonxAiAutoConfiguration": "org.springframework.ai.autoconfigure.watsonxai.WatsonxAiAutoConfiguration",
            "org.springframework.ai.autoconfigure.watsonxai.watsonxApi": "org.springframework.ai.autoconfigure.watsonxai.watsonxApi",
            "org.springframework.ai.autoconfigure.watsonxai.watsonxChatClient": "org.springframework.ai.autoconfigure.watsonxai.watsonxChatClient"
        },
        "package": "package org.springframework.ai.autoconfigure.watsonxai;",
        "property_declarations": [],
        "functions": [
            {
                "name": "watsonxApi",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new WatsonxAiApi(properties.getBaseUrl(), properties.getStreamEndpoint(), properties.getTextEndpoint(),\n\t\t\t\tproperties.getProjectId(), properties.getIAMToken(), restClientBuilder);",
                "is_abstract": "",
                "class_name": "WatsonxAiAutoConfiguration",
                "annotations": []
            },
            {
                "name": "watsonxChatClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new WatsonxAiChatClient(watsonxApi, chatProperties.getOptions());",
                "is_abstract": "",
                "class_name": "WatsonxAiAutoConfiguration",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/watsonxai/WatsonxAiChatProperties.java",
        "class_names": [
            "WatsonxAiChatProperties"
        ],
        "imports": "import org.springframework.ai.watsonx.WatsonxAiChatOptions;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport java.util.List;\nimport org.springframework.boot.context.properties.NestedConfigurationProperty;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.watsonxai.WatsonxAiChatProperties": "org.springframework.ai.autoconfigure.watsonxai.WatsonxAiChatProperties",
            "org.springframework.ai.autoconfigure.watsonxai.isEnabled": "org.springframework.ai.autoconfigure.watsonxai.isEnabled",
            "org.springframework.ai.autoconfigure.watsonxai.setEnabled": "org.springframework.ai.autoconfigure.watsonxai.setEnabled",
            "org.springframework.ai.autoconfigure.watsonxai.getOptions": "org.springframework.ai.autoconfigure.watsonxai.getOptions",
            "org.springframework.ai.autoconfigure.watsonxai.setOptions": "org.springframework.ai.autoconfigure.watsonxai.setOptions",
            "org.springframework.ai.autoconfigure.watsonxai.CONFIG_PREFIX": "org.springframework.ai.autoconfigure.watsonxai.CONFIG_PREFIX",
            "org.springframework.ai.autoconfigure.watsonxai.enabled": "org.springframework.ai.autoconfigure.watsonxai.enabled",
            "org.springframework.ai.autoconfigure.watsonxai.privat": "org.springframework.ai.autoconfigure.watsonxai.privat"
        },
        "package": "package org.springframework.ai.autoconfigure.watsonxai;",
        "property_declarations": [
            "private boolean enabled = true;",
            "public static final String CONFIG_PREFIX = \"spring.ai.watsonx.ai.chat\";",
            "@NestedConfigurationProperty\n\tprivate WatsonxAiChatOptions options = WatsonxAiChatOptions.builder()\n\t\t.withModel(\"google/flan-ul2\")\n\t\t.withTemperature(0.7f)\n\t\t.withTopP(1.0f)\n\t\t.withTopK(50)\n\t\t.withDecodingMethod(\"greedy\")\n\t\t.withMaxNewTokens(20)\n\t\t.withMinNewTokens(0)\n\t\t.withRepetitionPenalty(1.0f)\n\t\t.withStopSequences(List.of())\n\t\t.build();"
        ],
        "functions": [
            {
                "name": "isEnabled",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.enabled;",
                "is_abstract": "",
                "class_name": "WatsonxAiChatProperties",
                "annotations": []
            },
            {
                "name": "setEnabled",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.enabled = enabled;",
                "is_abstract": "",
                "class_name": "WatsonxAiChatProperties",
                "annotations": []
            },
            {
                "name": "getOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.options;",
                "is_abstract": "",
                "class_name": "WatsonxAiChatProperties",
                "annotations": []
            },
            {
                "name": "setOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options = options;",
                "is_abstract": "",
                "class_name": "WatsonxAiChatProperties",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/watsonxai/WatsonxAiConnectionProperties.java",
        "class_names": [
            "WatsonxAiConnectionProperties"
        ],
        "imports": "import org.springframework.boot.context.properties.ConfigurationProperties;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.watsonxai.WatsonxAiConnectionProperties": "org.springframework.ai.autoconfigure.watsonxai.WatsonxAiConnectionProperties",
            "org.springframework.ai.autoconfigure.watsonxai.getBaseUrl": "org.springframework.ai.autoconfigure.watsonxai.getBaseUrl",
            "org.springframework.ai.autoconfigure.watsonxai.setBaseUrl": "org.springframework.ai.autoconfigure.watsonxai.setBaseUrl",
            "org.springframework.ai.autoconfigure.watsonxai.getStreamEndpoint": "org.springframework.ai.autoconfigure.watsonxai.getStreamEndpoint",
            "org.springframework.ai.autoconfigure.watsonxai.setStreamEndpoint": "org.springframework.ai.autoconfigure.watsonxai.setStreamEndpoint",
            "org.springframework.ai.autoconfigure.watsonxai.getTextEndpoint": "org.springframework.ai.autoconfigure.watsonxai.getTextEndpoint",
            "org.springframework.ai.autoconfigure.watsonxai.setTextEndpoint": "org.springframework.ai.autoconfigure.watsonxai.setTextEndpoint",
            "org.springframework.ai.autoconfigure.watsonxai.getProjectId": "org.springframework.ai.autoconfigure.watsonxai.getProjectId",
            "org.springframework.ai.autoconfigure.watsonxai.setProjectId": "org.springframework.ai.autoconfigure.watsonxai.setProjectId",
            "org.springframework.ai.autoconfigure.watsonxai.getIAMToken": "org.springframework.ai.autoconfigure.watsonxai.getIAMToken",
            "org.springframework.ai.autoconfigure.watsonxai.setIAMToken": "org.springframework.ai.autoconfigure.watsonxai.setIAMToken",
            "org.springframework.ai.autoconfigure.watsonxai.CONFIG_PREFIX": "org.springframework.ai.autoconfigure.watsonxai.CONFIG_PREFIX",
            "org.springframework.ai.autoconfigure.watsonxai.baseUrl": "org.springframework.ai.autoconfigure.watsonxai.baseUrl",
            "org.springframework.ai.autoconfigure.watsonxai.streamEndpoint": "org.springframework.ai.autoconfigure.watsonxai.streamEndpoint",
            "org.springframework.ai.autoconfigure.watsonxai.textEndpoint": "org.springframework.ai.autoconfigure.watsonxai.textEndpoint",
            "org.springframework.ai.autoconfigure.watsonxai.projectId": "org.springframework.ai.autoconfigure.watsonxai.projectId",
            "org.springframework.ai.autoconfigure.watsonxai.IAMToken": "org.springframework.ai.autoconfigure.watsonxai.IAMToken"
        },
        "package": "package org.springframework.ai.autoconfigure.watsonxai;",
        "property_declarations": [
            "private String projectId;",
            "private String IAMToken;",
            "private String streamEndpoint = \"generation/stream?version=2023-05-29\";",
            "public static final String CONFIG_PREFIX = \"spring.ai.watsonx.ai\";",
            "private String textEndpoint = \"generation/text?version=2023-05-29\";",
            "private String baseUrl = \"https://us-south.ml.cloud.ibm.com/\";"
        ],
        "functions": [
            {
                "name": "getBaseUrl",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return baseUrl;",
                "is_abstract": "",
                "class_name": "WatsonxAiConnectionProperties",
                "annotations": []
            },
            {
                "name": "setBaseUrl",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.baseUrl = baseUrl;",
                "is_abstract": "",
                "class_name": "WatsonxAiConnectionProperties",
                "annotations": []
            },
            {
                "name": "getStreamEndpoint",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return streamEndpoint;",
                "is_abstract": "",
                "class_name": "WatsonxAiConnectionProperties",
                "annotations": []
            },
            {
                "name": "setStreamEndpoint",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.streamEndpoint = streamEndpoint;",
                "is_abstract": "",
                "class_name": "WatsonxAiConnectionProperties",
                "annotations": []
            },
            {
                "name": "getTextEndpoint",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return textEndpoint;",
                "is_abstract": "",
                "class_name": "WatsonxAiConnectionProperties",
                "annotations": []
            },
            {
                "name": "setTextEndpoint",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.textEndpoint = textEndpoint;",
                "is_abstract": "",
                "class_name": "WatsonxAiConnectionProperties",
                "annotations": []
            },
            {
                "name": "getProjectId",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return projectId;",
                "is_abstract": "",
                "class_name": "WatsonxAiConnectionProperties",
                "annotations": []
            },
            {
                "name": "setProjectId",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.projectId = projectId;",
                "is_abstract": "",
                "class_name": "WatsonxAiConnectionProperties",
                "annotations": []
            },
            {
                "name": "getIAMToken",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return IAMToken;",
                "is_abstract": "",
                "class_name": "WatsonxAiConnectionProperties",
                "annotations": []
            },
            {
                "name": "setIAMToken",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.IAMToken = IAMToken;",
                "is_abstract": "",
                "class_name": "WatsonxAiConnectionProperties",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/openai/OpenAiAudioTranscriptionProperties.java",
        "class_names": [
            "OpenAiAudioTranscriptionProperties"
        ],
        "imports": "import org.springframework.ai.openai.OpenAiAudioTranscriptionOptions;\nimport org.springframework.boot.context.properties.NestedConfigurationProperty;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.ai.openai.api.OpenAiAudioApi;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.openai.OpenAiAudioTranscriptionProperties": "org.springframework.ai.autoconfigure.openai.OpenAiAudioTranscriptionProperties",
            "org.springframework.ai.autoconfigure.openai.getOptions": "org.springframework.ai.autoconfigure.openai.getOptions",
            "org.springframework.ai.autoconfigure.openai.setOptions": "org.springframework.ai.autoconfigure.openai.setOptions",
            "org.springframework.ai.autoconfigure.openai.CONFIG_PREFIX": "org.springframework.ai.autoconfigure.openai.CONFIG_PREFIX",
            "org.springframework.ai.autoconfigure.openai.DEFAULT_TRANSCRIPTION_MODEL": "org.springframework.ai.autoconfigure.openai.DEFAULT_TRANSCRIPTION_MODEL",
            "org.springframework.ai.autoconfigure.openai.DEFAULT_TEMPERATURE": "org.springframework.ai.autoconfigure.openai.DEFAULT_TEMPERATURE",
            "org.springframework.ai.autoconfigure.openai.OpenAiAudioApi": "org.springframework.ai.autoconfigure.openai.OpenAiAudioApi",
            "org.springframework.ai.autoconfigure.openai.privat": "org.springframework.ai.autoconfigure.openai.privat"
        },
        "package": "package org.springframework.ai.autoconfigure.openai;",
        "property_declarations": [
            "private static final Double DEFAULT_TEMPERATURE = 0.7;",
            "private static final OpenAiAudioApi.TranscriptResponseFormat DEFAULT_RESPONSE_FORMAT = OpenAiAudioApi.TranscriptResponseFormat.TEXT;",
            "public static final String DEFAULT_TRANSCRIPTION_MODEL = OpenAiAudioApi.WhisperModel.WHISPER_1.getValue();",
            "@NestedConfigurationProperty\n\tprivate OpenAiAudioTranscriptionOptions options = OpenAiAudioTranscriptionOptions.builder()\n\t\t.withModel(DEFAULT_TRANSCRIPTION_MODEL)\n\t\t.withTemperature(DEFAULT_TEMPERATURE.floatValue())\n\t\t.withResponseFormat(DEFAULT_RESPONSE_FORMAT)\n\t\t.build();",
            "public static final String CONFIG_PREFIX = \"spring.ai.openai.audio.transcription\";"
        ],
        "functions": [
            {
                "name": "getOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return options;",
                "is_abstract": "",
                "class_name": "OpenAiAudioTranscriptionProperties",
                "annotations": []
            },
            {
                "name": "setOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options = options;",
                "is_abstract": "",
                "class_name": "OpenAiAudioTranscriptionProperties",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/openai/OpenAiChatProperties.java",
        "class_names": [
            "OpenAiChatProperties"
        ],
        "imports": "import org.springframework.ai.openai.OpenAiChatOptions;\nimport org.springframework.boot.context.properties.NestedConfigurationProperty;\nimport org.springframework.boot.context.properties.ConfigurationProperties;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.openai.OpenAiChatProperties": "org.springframework.ai.autoconfigure.openai.OpenAiChatProperties",
            "org.springframework.ai.autoconfigure.openai.getOptions": "org.springframework.ai.autoconfigure.openai.getOptions",
            "org.springframework.ai.autoconfigure.openai.setOptions": "org.springframework.ai.autoconfigure.openai.setOptions",
            "org.springframework.ai.autoconfigure.openai.isEnabled": "org.springframework.ai.autoconfigure.openai.isEnabled",
            "org.springframework.ai.autoconfigure.openai.setEnabled": "org.springframework.ai.autoconfigure.openai.setEnabled",
            "org.springframework.ai.autoconfigure.openai.CONFIG_PREFIX": "org.springframework.ai.autoconfigure.openai.CONFIG_PREFIX",
            "org.springframework.ai.autoconfigure.openai.DEFAULT_CHAT_MODEL": "org.springframework.ai.autoconfigure.openai.DEFAULT_CHAT_MODEL",
            "org.springframework.ai.autoconfigure.openai.DEFAULT_TEMPERATURE": "org.springframework.ai.autoconfigure.openai.DEFAULT_TEMPERATURE",
            "org.springframework.ai.autoconfigure.openai.enabled": "org.springframework.ai.autoconfigure.openai.enabled",
            "org.springframework.ai.autoconfigure.openai.privat": "org.springframework.ai.autoconfigure.openai.privat"
        },
        "package": "package org.springframework.ai.autoconfigure.openai;",
        "property_declarations": [
            "public static final String DEFAULT_CHAT_MODEL = \"gpt-3.5-turbo\";",
            "public static final String CONFIG_PREFIX = \"spring.ai.openai.chat\";",
            "private static final Double DEFAULT_TEMPERATURE = 0.7;",
            "@NestedConfigurationProperty\n\tprivate OpenAiChatOptions options = OpenAiChatOptions.builder()\n\t\t.withModel(DEFAULT_CHAT_MODEL)\n\t\t.withTemperature(DEFAULT_TEMPERATURE.floatValue())\n\t\t.build();",
            "private boolean enabled = true;"
        ],
        "functions": [
            {
                "name": "getOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return options;",
                "is_abstract": "",
                "class_name": "OpenAiChatProperties",
                "annotations": []
            },
            {
                "name": "setOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options = options;",
                "is_abstract": "",
                "class_name": "OpenAiChatProperties",
                "annotations": []
            },
            {
                "name": "isEnabled",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.enabled;",
                "is_abstract": "",
                "class_name": "OpenAiChatProperties",
                "annotations": []
            },
            {
                "name": "setEnabled",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.enabled = enabled;",
                "is_abstract": "",
                "class_name": "OpenAiChatProperties",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/openai/OpenAiImageProperties.java",
        "class_names": [
            "OpenAiImageProperties"
        ],
        "imports": "import org.springframework.boot.context.properties.NestedConfigurationProperty;\nimport org.springframework.ai.openai.OpenAiImageOptions;\nimport org.springframework.boot.context.properties.ConfigurationProperties;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.openai.OpenAiImageProperties": "org.springframework.ai.autoconfigure.openai.OpenAiImageProperties",
            "org.springframework.ai.autoconfigure.openai.getOptions": "org.springframework.ai.autoconfigure.openai.getOptions",
            "org.springframework.ai.autoconfigure.openai.setOptions": "org.springframework.ai.autoconfigure.openai.setOptions",
            "org.springframework.ai.autoconfigure.openai.isEnabled": "org.springframework.ai.autoconfigure.openai.isEnabled",
            "org.springframework.ai.autoconfigure.openai.setEnabled": "org.springframework.ai.autoconfigure.openai.setEnabled",
            "org.springframework.ai.autoconfigure.openai.CONFIG_PREFIX": "org.springframework.ai.autoconfigure.openai.CONFIG_PREFIX",
            "org.springframework.ai.autoconfigure.openai.enabled": "org.springframework.ai.autoconfigure.openai.enabled",
            "org.springframework.ai.autoconfigure.openai.privat": "org.springframework.ai.autoconfigure.openai.privat"
        },
        "package": "package org.springframework.ai.autoconfigure.openai;",
        "property_declarations": [
            "private boolean enabled = true;",
            "@NestedConfigurationProperty\n\tprivate OpenAiImageOptions options = OpenAiImageOptions.builder().build();",
            "public static final String CONFIG_PREFIX = \"spring.ai.openai.image\";"
        ],
        "functions": [
            {
                "name": "getOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return options;",
                "is_abstract": "",
                "class_name": "OpenAiImageProperties",
                "annotations": []
            },
            {
                "name": "setOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options = options;",
                "is_abstract": "",
                "class_name": "OpenAiImageProperties",
                "annotations": []
            },
            {
                "name": "isEnabled",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.enabled;",
                "is_abstract": "",
                "class_name": "OpenAiImageProperties",
                "annotations": []
            },
            {
                "name": "setEnabled",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.enabled = enabled;",
                "is_abstract": "",
                "class_name": "OpenAiImageProperties",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/openai/OpenAiAudioSpeechProperties.java",
        "class_names": [
            "OpenAiAudioSpeechProperties"
        ],
        "imports": "import org.springframework.boot.context.properties.NestedConfigurationProperty;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.ai.openai.OpenAiAudioSpeechOptions;\nimport org.springframework.ai.openai.api.OpenAiAudioApi;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.openai.OpenAiAudioSpeechProperties": "org.springframework.ai.autoconfigure.openai.OpenAiAudioSpeechProperties",
            "org.springframework.ai.autoconfigure.openai.getOptions": "org.springframework.ai.autoconfigure.openai.getOptions",
            "org.springframework.ai.autoconfigure.openai.setOptions": "org.springframework.ai.autoconfigure.openai.setOptions",
            "org.springframework.ai.autoconfigure.openai.CONFIG_PREFIX": "org.springframework.ai.autoconfigure.openai.CONFIG_PREFIX",
            "org.springframework.ai.autoconfigure.openai.DEFAULT_SPEECH_MODEL": "org.springframework.ai.autoconfigure.openai.DEFAULT_SPEECH_MODEL",
            "org.springframework.ai.autoconfigure.openai.SPEED": "org.springframework.ai.autoconfigure.openai.SPEED",
            "org.springframework.ai.autoconfigure.openai.OpenAiAudioApi": "org.springframework.ai.autoconfigure.openai.OpenAiAudioApi",
            "org.springframework.ai.autoconfigure.openai.privat": "org.springframework.ai.autoconfigure.openai.privat"
        },
        "package": "package org.springframework.ai.autoconfigure.openai;",
        "property_declarations": [
            "private static final OpenAiAudioApi.SpeechRequest.Voice VOICE = OpenAiAudioApi.SpeechRequest.Voice.ALLOY;",
            "private static final OpenAiAudioApi.SpeechRequest.AudioResponseFormat DEFAULT_RESPONSE_FORMAT = OpenAiAudioApi.SpeechRequest.AudioResponseFormat.MP3;",
            "@NestedConfigurationProperty\n\tprivate OpenAiAudioSpeechOptions options = OpenAiAudioSpeechOptions.builder()\n\t\t.withModel(DEFAULT_SPEECH_MODEL)\n\t\t.withResponseFormat(DEFAULT_RESPONSE_FORMAT)\n\t\t.withVoice(VOICE)\n\t\t.withSpeed(SPEED)\n\t\t.build();",
            "public static final String DEFAULT_SPEECH_MODEL = OpenAiAudioApi.TtsModel.TTS_1.getValue();",
            "private static final Float SPEED = 1.0f;",
            "public static final String CONFIG_PREFIX = \"spring.ai.openai.audio.speech\";"
        ],
        "functions": [
            {
                "name": "getOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return options;",
                "is_abstract": "",
                "class_name": "OpenAiAudioSpeechProperties",
                "annotations": []
            },
            {
                "name": "setOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options = options;",
                "is_abstract": "",
                "class_name": "OpenAiAudioSpeechProperties",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/openai/OpenAiParentProperties.java",
        "class_names": [
            "OpenAiParentProperties"
        ],
        "imports": "",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.openai.OpenAiParentProperties": "org.springframework.ai.autoconfigure.openai.OpenAiParentProperties",
            "org.springframework.ai.autoconfigure.openai.getApiKey": "org.springframework.ai.autoconfigure.openai.getApiKey",
            "org.springframework.ai.autoconfigure.openai.setApiKey": "org.springframework.ai.autoconfigure.openai.setApiKey",
            "org.springframework.ai.autoconfigure.openai.getBaseUrl": "org.springframework.ai.autoconfigure.openai.getBaseUrl",
            "org.springframework.ai.autoconfigure.openai.setBaseUrl": "org.springframework.ai.autoconfigure.openai.setBaseUrl",
            "org.springframework.ai.autoconfigure.openai.apiKey": "org.springframework.ai.autoconfigure.openai.apiKey",
            "org.springframework.ai.autoconfigure.openai.baseUrl": "org.springframework.ai.autoconfigure.openai.baseUrl"
        },
        "package": "package org.springframework.ai.autoconfigure.openai;",
        "property_declarations": [
            "private String baseUrl;",
            "private String apiKey;"
        ],
        "functions": [
            {
                "name": "getApiKey",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return apiKey;",
                "is_abstract": "",
                "class_name": "OpenAiParentProperties",
                "annotations": []
            },
            {
                "name": "setApiKey",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.apiKey = apiKey;",
                "is_abstract": "",
                "class_name": "OpenAiParentProperties",
                "annotations": []
            },
            {
                "name": "getBaseUrl",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return baseUrl;",
                "is_abstract": "",
                "class_name": "OpenAiParentProperties",
                "annotations": []
            },
            {
                "name": "setBaseUrl",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.baseUrl = baseUrl;",
                "is_abstract": "",
                "class_name": "OpenAiParentProperties",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/openai/OpenAiEmbeddingProperties.java",
        "class_names": [
            "OpenAiEmbeddingProperties"
        ],
        "imports": "import org.springframework.boot.context.properties.NestedConfigurationProperty;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.ai.document.MetadataMode;\nimport org.springframework.ai.openai.OpenAiEmbeddingOptions;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.openai.OpenAiEmbeddingProperties": "org.springframework.ai.autoconfigure.openai.OpenAiEmbeddingProperties",
            "org.springframework.ai.autoconfigure.openai.getOptions": "org.springframework.ai.autoconfigure.openai.getOptions",
            "org.springframework.ai.autoconfigure.openai.setOptions": "org.springframework.ai.autoconfigure.openai.setOptions",
            "org.springframework.ai.autoconfigure.openai.getMetadataMod": "org.springframework.ai.autoconfigure.openai.getMetadataMod",
            "org.springframework.ai.autoconfigure.openai.setMetadataMod": "org.springframework.ai.autoconfigure.openai.setMetadataMod",
            "org.springframework.ai.autoconfigure.openai.isEnabled": "org.springframework.ai.autoconfigure.openai.isEnabled",
            "org.springframework.ai.autoconfigure.openai.setEnabled": "org.springframework.ai.autoconfigure.openai.setEnabled",
            "org.springframework.ai.autoconfigure.openai.CONFIG_PREFIX": "org.springframework.ai.autoconfigure.openai.CONFIG_PREFIX",
            "org.springframework.ai.autoconfigure.openai.DEFAULT_EMBEDDING_MODEL": "org.springframework.ai.autoconfigure.openai.DEFAULT_EMBEDDING_MODEL",
            "org.springframework.ai.autoconfigure.openai.enabled": "org.springframework.ai.autoconfigure.openai.enabled",
            "org.springframework.ai.autoconfigure.openai.metadataMod": "org.springframework.ai.autoconfigure.openai.metadataMod",
            "org.springframework.ai.autoconfigure.openai.privat": "org.springframework.ai.autoconfigure.openai.privat"
        },
        "package": "package org.springframework.ai.autoconfigure.openai;",
        "property_declarations": [
            "@NestedConfigurationProperty\n\tprivate OpenAiEmbeddingOptions options = OpenAiEmbeddingOptions.builder()\n\t\t.withModel(DEFAULT_EMBEDDING_MODEL)\n\t\t.build();",
            "private MetadataMode metadataMode = MetadataMode.EMBED;",
            "public static final String DEFAULT_EMBEDDING_MODEL = \"text-embedding-ada-002\";",
            "private boolean enabled = true;",
            "public static final String CONFIG_PREFIX = \"spring.ai.openai.embedding\";"
        ],
        "functions": [
            {
                "name": "getOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.options;",
                "is_abstract": "",
                "class_name": "OpenAiEmbeddingProperties",
                "annotations": []
            },
            {
                "name": "setOptions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.options = options;",
                "is_abstract": "",
                "class_name": "OpenAiEmbeddingProperties",
                "annotations": []
            },
            {
                "name": "getMetadataMode",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.metadataMode;",
                "is_abstract": "",
                "class_name": "OpenAiEmbeddingProperties",
                "annotations": []
            },
            {
                "name": "setMetadataMode",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.metadataMode = metadataMode;",
                "is_abstract": "",
                "class_name": "OpenAiEmbeddingProperties",
                "annotations": []
            },
            {
                "name": "isEnabled",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.enabled;",
                "is_abstract": "",
                "class_name": "OpenAiEmbeddingProperties",
                "annotations": []
            },
            {
                "name": "setEnabled",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.enabled = enabled;",
                "is_abstract": "",
                "class_name": "OpenAiEmbeddingProperties",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/openai/OpenAiAutoConfiguration.java",
        "class_names": [
            "OpenAiAutoConfiguration"
        ],
        "imports": "import org.springframework.context.ApplicationContext;\nimport java.util.List;\nimport org.springframework.retry.support.RetryTemplate;\nimport org.springframework.util.CollectionUtils;\nimport org.springframework.ai.model.function.FunctionCallbackContext;\nimport org.springframework.util.StringUtils;\nimport org.springframework.ai.openai.api.OpenAiAudioApi;\nimport org.springframework.ai.openai.OpenAiChatClient;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.web.client.ResponseErrorHandler;\nimport org.springframework.boot.autoconfigure.AutoConfiguration;\nimport org.springframework.ai.openai.api.OpenAiApi;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.boot.autoconfigure.web.client.RestClientAutoConfiguration;\nimport org.springframework.ai.openai.OpenAiAudioTranscriptionClient;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.ai.autoconfigure.retry.SpringAiRetryAutoConfiguration;\nimport org.springframework.web.client.RestClient;\nimport org.springframework.util.Assert;\nimport org.springframework.ai.openai.OpenAiAudioSpeechClient;\nimport org.springframework.ai.model.function.FunctionCallback;\nimport org.springframework.ai.openai.api.OpenAiImageApi;\nimport org.springframework.ai.openai.OpenAiImageClient;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.ai.openai.OpenAiEmbeddingClient;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.openai.OpenAiAutoConfiguration": "org.springframework.ai.autoconfigure.openai.OpenAiAutoConfiguration",
            "org.springframework.ai.autoconfigure.openai.ConditionalOnProperty": "org.springframework.ai.autoconfigure.openai.ConditionalOnProperty",
            "org.springframework.ai.autoconfigure.openai.openAiApi": "org.springframework.ai.autoconfigure.openai.openAiApi",
            "org.springframework.ai.autoconfigure.openai.openAiAudioTranscriptionClient": "org.springframework.ai.autoconfigure.openai.openAiAudioTranscriptionClient",
            "org.springframework.ai.autoconfigure.openai.openAiAudioSpeechClient": "org.springframework.ai.autoconfigure.openai.openAiAudioSpeechClient",
            "org.springframework.ai.autoconfigure.openai.springAiFunctionManager": "org.springframework.ai.autoconfigure.openai.springAiFunctionManager"
        },
        "package": "package org.springframework.ai.autoconfigure.openai;",
        "property_declarations": [],
        "functions": [
            {
                "name": "ConditionalOnProperty",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var openAiApi = openAiApi(chatProperties.getBaseUrl(), commonProperties.getBaseUrl(),\n\t\t\t\tchatProperties.getApiKey(), commonProperties.getApiKey(), restClientBuilder, responseErrorHandler);\n\n\t\tif (!CollectionUtils.isEmpty(toolFunctionCallbacks)) {\n\t\t\tchatProperties.getOptions().getFunctionCallbacks().addAll(toolFunctionCallbacks);\n\t\t}\n\n\t\treturn new OpenAiChatClient(openAiApi, chatProperties.getOptions(), functionCallbackContext, retryTemplate);",
                "is_abstract": "",
                "class_name": "OpenAiAutoConfiguration",
                "annotations": [
                    "@ConditionalOnProperty(prefix = OpenAiChatProperties.CONFIG_PREFIX, name = \"enabled\", havingValue = \"true\",\n\t\t\tmatchIfMissing = true)"
                ]
            },
            {
                "name": "openAiApi",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String resolvedBaseUrl = StringUtils.hasText(baseUrl) ? baseUrl : commonBaseUrl;\n\t\tAssert.hasText(resolvedBaseUrl, \"OpenAI base URL must be set\");\n\n\t\tString resolvedApiKey = StringUtils.hasText(apiKey) ? apiKey : commonApiKey;\n\t\tAssert.hasText(resolvedApiKey, \"OpenAI API key must be set\");\n\n\t\treturn new OpenAiApi(resolvedBaseUrl, resolvedApiKey, restClientBuilder, responseErrorHandler);",
                "is_abstract": "",
                "class_name": "OpenAiAutoConfiguration",
                "annotations": []
            },
            {
                "name": "ConditionalOnProperty",
                "parameters": [
                    ""
                ],
                "return_type": "commonProperties",
                "body": "String apiKey = StringUtils.hasText(imageProperties.getApiKey()) ? imageProperties.getApiKey()\n\t\t\t\t: commonProperties.getApiKey();\n\n\t\tString baseUrl = StringUtils.hasText(imageProperties.getBaseUrl()) ? imageProperties.getBaseUrl()\n\t\t\t\t: commonProperties.getBaseUrl();\n\n\t\tAssert.hasText(apiKey, \"OpenAI API key must be set\");\n\t\tAssert.hasText(baseUrl, \"OpenAI base URL must be set\");\n\n\t\tvar openAiImageApi = new OpenAiImageApi(baseUrl, apiKey, restClientBuilder, responseErrorHandler);\n\n\t\treturn new OpenAiImageClient(openAiImageApi, imageProperties.getOptions(), retryTemplate);",
                "is_abstract": "",
                "class_name": "OpenAiAutoConfiguration",
                "annotations": [
                    "@ConditionalOnProperty(prefix = OpenAiImageProperties.CONFIG_PREFIX, name = \"enabled\", havingValue = \"true\",\n\t\t\tmatchIfMissing = true)"
                ]
            },
            {
                "name": "openAiAudioTranscriptionClient",
                "parameters": [
                    ""
                ],
                "return_type": "commonProperties",
                "body": "String apiKey = StringUtils.hasText(transcriptionProperties.getApiKey()) ? transcriptionProperties.getApiKey()\n\t\t\t\t: commonProperties.getApiKey();\n\n\t\tString baseUrl = StringUtils.hasText(transcriptionProperties.getBaseUrl())\n\t\t\t\t? transcriptionProperties.getBaseUrl() : commonProperties.getBaseUrl();\n\n\t\tAssert.hasText(apiKey, \"OpenAI API key must be set\");\n\t\tAssert.hasText(baseUrl, \"OpenAI base URL must be set\");\n\n\t\tvar openAiAudioApi = new OpenAiAudioApi(baseUrl, apiKey, RestClient.builder(), responseErrorHandler);\n\n\t\tOpenAiAudioTranscriptionClient openAiChatClient = new OpenAiAudioTranscriptionClient(openAiAudioApi,\n\t\t\t\ttranscriptionProperties.getOptions(), retryTemplate);\n\n\t\treturn openAiChatClient;",
                "is_abstract": "",
                "class_name": "OpenAiAutoConfiguration",
                "annotations": []
            },
            {
                "name": "openAiAudioSpeechClient",
                "parameters": [
                    ""
                ],
                "return_type": "commonProperties",
                "body": "String apiKey = StringUtils.hasText(speechProperties.getApiKey()) ? speechProperties.getApiKey()\n\t\t\t\t: commonProperties.getApiKey();\n\n\t\tString baseUrl = StringUtils.hasText(speechProperties.getBaseUrl()) ? speechProperties.getBaseUrl()\n\t\t\t\t: commonProperties.getBaseUrl();\n\n\t\tAssert.hasText(apiKey, \"OpenAI API key must be set\");\n\t\tAssert.hasText(baseUrl, \"OpenAI base URL must be set\");\n\n\t\tvar openAiAudioApi = new OpenAiAudioApi(baseUrl, apiKey, RestClient.builder(), responseErrorHandler);\n\n\t\tOpenAiAudioSpeechClient openAiSpeechClient = new OpenAiAudioSpeechClient(openAiAudioApi,\n\t\t\t\tspeechProperties.getOptions());\n\n\t\treturn openAiSpeechClient;",
                "is_abstract": "",
                "class_name": "OpenAiAutoConfiguration",
                "annotations": []
            },
            {
                "name": "springAiFunctionManager",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "FunctionCallbackContext manager = new FunctionCallbackContext();\n\t\tmanager.setApplicationContext(context);\n\t\treturn manager;",
                "is_abstract": "",
                "class_name": "OpenAiAutoConfiguration",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/openai/OpenAiConnectionProperties.java",
        "class_names": [
            "OpenAiConnectionProperties"
        ],
        "imports": "import org.springframework.boot.context.properties.ConfigurationProperties;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.openai.OpenAiConnectionProperties": "org.springframework.ai.autoconfigure.openai.OpenAiConnectionProperties",
            "org.springframework.ai.autoconfigure.openai.CONFIG_PREFIX": "org.springframework.ai.autoconfigure.openai.CONFIG_PREFIX",
            "org.springframework.ai.autoconfigure.openai.DEFAULT_BASE_URL": "org.springframework.ai.autoconfigure.openai.DEFAULT_BASE_URL"
        },
        "package": "package org.springframework.ai.autoconfigure.openai;",
        "property_declarations": [
            "public static final String DEFAULT_BASE_URL = \"https://api.openai.com\";",
            "public static final String CONFIG_PREFIX = \"spring.ai.openai\";"
        ],
        "functions": []
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/neo4j/Neo4jVectorStoreAutoConfiguration.java",
        "class_names": [
            "Neo4jVectorStoreAutoConfiguration"
        ],
        "imports": "import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.boot.autoconfigure.neo4j.Neo4jAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.ai.embedding.EmbeddingClient;\nimport org.springframework.ai.vectorstore.Neo4jVectorStore;\nimport org.springframework.boot.autoconfigure.AutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.neo4j.driver.Driver;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.vectorstore.neo4j.Neo4jVectorStoreAutoConfiguration": "org.springframework.ai.autoconfigure.vectorstore.neo4j.Neo4jVectorStoreAutoConfiguration",
            "org.springframework.ai.autoconfigure.vectorstore.neo4j.vectorStor": "org.springframework.ai.autoconfigure.vectorstore.neo4j.vectorStor"
        },
        "package": "package org.springframework.ai.autoconfigure.vectorstore.neo4j;",
        "property_declarations": [],
        "functions": [
            {
                "name": "vectorStore",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Neo4jVectorStore.Neo4jVectorStoreConfig config = Neo4jVectorStore.Neo4jVectorStoreConfig.builder()\n\t\t\t.withDatabaseName(properties.getDatabaseName())\n\t\t\t.withEmbeddingDimension(properties.getEmbeddingDimension())\n\t\t\t.withDistanceType(properties.getDistanceType())\n\t\t\t.withLabel(properties.getLabel())\n\t\t\t.withEmbeddingProperty(properties.getEmbeddingProperty())\n\t\t\t.withIndexName(properties.getIndexName())\n\t\t\t.withIdProperty(properties.getIdProperty())\n\t\t\t.withConstraintName(properties.getConstraintName())\n\t\t\t.build();\n\n\t\treturn new Neo4jVectorStore(driver, embeddingClient, config);",
                "is_abstract": "",
                "class_name": "Neo4jVectorStoreAutoConfiguration",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/neo4j/Neo4jVectorStoreProperties.java",
        "class_names": [
            "Neo4jVectorStoreProperties"
        ],
        "imports": "import org.springframework.ai.vectorstore.Neo4jVectorStore;\nimport org.springframework.boot.context.properties.ConfigurationProperties;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.vectorstore.neo4j.Neo4jVectorStoreProperties": "org.springframework.ai.autoconfigure.vectorstore.neo4j.Neo4jVectorStoreProperties",
            "org.springframework.ai.autoconfigure.vectorstore.neo4j.getDatabaseNam": "org.springframework.ai.autoconfigure.vectorstore.neo4j.getDatabaseNam",
            "org.springframework.ai.autoconfigure.vectorstore.neo4j.setDatabaseNam": "org.springframework.ai.autoconfigure.vectorstore.neo4j.setDatabaseNam",
            "org.springframework.ai.autoconfigure.vectorstore.neo4j.getEmbeddingDimension": "org.springframework.ai.autoconfigure.vectorstore.neo4j.getEmbeddingDimension",
            "org.springframework.ai.autoconfigure.vectorstore.neo4j.setEmbeddingDimension": "org.springframework.ai.autoconfigure.vectorstore.neo4j.setEmbeddingDimension",
            "org.springframework.ai.autoconfigure.vectorstore.neo4j.getDistanceTy": "org.springframework.ai.autoconfigure.vectorstore.neo4j.getDistanceTy",
            "org.springframework.ai.autoconfigure.vectorstore.neo4j.setDistanceTy": "org.springframework.ai.autoconfigure.vectorstore.neo4j.setDistanceTy",
            "org.springframework.ai.autoconfigure.vectorstore.neo4j.getLabel": "org.springframework.ai.autoconfigure.vectorstore.neo4j.getLabel",
            "org.springframework.ai.autoconfigure.vectorstore.neo4j.setLabel": "org.springframework.ai.autoconfigure.vectorstore.neo4j.setLabel",
            "org.springframework.ai.autoconfigure.vectorstore.neo4j.getEmbeddingProperty": "org.springframework.ai.autoconfigure.vectorstore.neo4j.getEmbeddingProperty",
            "org.springframework.ai.autoconfigure.vectorstore.neo4j.setEmbeddingProperty": "org.springframework.ai.autoconfigure.vectorstore.neo4j.setEmbeddingProperty",
            "org.springframework.ai.autoconfigure.vectorstore.neo4j.getIndexNam": "org.springframework.ai.autoconfigure.vectorstore.neo4j.getIndexNam",
            "org.springframework.ai.autoconfigure.vectorstore.neo4j.setIndexNam": "org.springframework.ai.autoconfigure.vectorstore.neo4j.setIndexNam",
            "org.springframework.ai.autoconfigure.vectorstore.neo4j.getIdProperty": "org.springframework.ai.autoconfigure.vectorstore.neo4j.getIdProperty",
            "org.springframework.ai.autoconfigure.vectorstore.neo4j.setIdProperty": "org.springframework.ai.autoconfigure.vectorstore.neo4j.setIdProperty",
            "org.springframework.ai.autoconfigure.vectorstore.neo4j.getConstraintNam": "org.springframework.ai.autoconfigure.vectorstore.neo4j.getConstraintNam",
            "org.springframework.ai.autoconfigure.vectorstore.neo4j.setConstraintNam": "org.springframework.ai.autoconfigure.vectorstore.neo4j.setConstraintNam",
            "org.springframework.ai.autoconfigure.vectorstore.neo4j.CONFIG_PREFIX": "org.springframework.ai.autoconfigure.vectorstore.neo4j.CONFIG_PREFIX",
            "org.springframework.ai.autoconfigure.vectorstore.neo4j.databaseNam": "org.springframework.ai.autoconfigure.vectorstore.neo4j.databaseNam",
            "org.springframework.ai.autoconfigure.vectorstore.neo4j.embeddingDimension": "org.springframework.ai.autoconfigure.vectorstore.neo4j.embeddingDimension",
            "org.springframework.ai.autoconfigure.vectorstore.neo4j.Neo4jVectorStor": "org.springframework.ai.autoconfigure.vectorstore.neo4j.Neo4jVectorStor",
            "org.springframework.ai.autoconfigure.vectorstore.neo4j.label": "org.springframework.ai.autoconfigure.vectorstore.neo4j.label",
            "org.springframework.ai.autoconfigure.vectorstore.neo4j.embeddingProperty": "org.springframework.ai.autoconfigure.vectorstore.neo4j.embeddingProperty",
            "org.springframework.ai.autoconfigure.vectorstore.neo4j.indexNam": "org.springframework.ai.autoconfigure.vectorstore.neo4j.indexNam",
            "org.springframework.ai.autoconfigure.vectorstore.neo4j.idProperty": "org.springframework.ai.autoconfigure.vectorstore.neo4j.idProperty",
            "org.springframework.ai.autoconfigure.vectorstore.neo4j.constraintNam": "org.springframework.ai.autoconfigure.vectorstore.neo4j.constraintNam"
        },
        "package": "package org.springframework.ai.autoconfigure.vectorstore.neo4j;",
        "property_declarations": [
            "private String label = Neo4jVectorStore.DEFAULT_LABEL;",
            "public static final String CONFIG_PREFIX = \"spring.ai.vectorstore.neo4j\";",
            "private int embeddingDimension = Neo4jVectorStore.DEFAULT_EMBEDDING_DIMENSION;",
            "private String databaseName;",
            "private String idProperty = Neo4jVectorStore.DEFAULT_ID_PROPERTY;",
            "private String constraintName = Neo4jVectorStore.DEFAULT_CONSTRAINT_NAME;",
            "private Neo4jVectorStore.Neo4jDistanceType distanceType = Neo4jVectorStore.Neo4jDistanceType.COSINE;",
            "private String indexName = Neo4jVectorStore.DEFAULT_INDEX_NAME;",
            "private String embeddingProperty = Neo4jVectorStore.DEFAULT_EMBEDDING_PROPERTY;"
        ],
        "functions": [
            {
                "name": "getDatabaseName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.databaseName;",
                "is_abstract": "",
                "class_name": "Neo4jVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "setDatabaseName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.databaseName = databaseName;",
                "is_abstract": "",
                "class_name": "Neo4jVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "getEmbeddingDimension",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.embeddingDimension;",
                "is_abstract": "",
                "class_name": "Neo4jVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "setEmbeddingDimension",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.embeddingDimension = embeddingDimension;",
                "is_abstract": "",
                "class_name": "Neo4jVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "getDistanceType",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.distanceType;",
                "is_abstract": "",
                "class_name": "Neo4jVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "setDistanceType",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.distanceType = distanceType;",
                "is_abstract": "",
                "class_name": "Neo4jVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "getLabel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.label;",
                "is_abstract": "",
                "class_name": "Neo4jVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "setLabel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.label = label;",
                "is_abstract": "",
                "class_name": "Neo4jVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "getEmbeddingProperty",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.embeddingProperty;",
                "is_abstract": "",
                "class_name": "Neo4jVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "setEmbeddingProperty",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.embeddingProperty = embeddingProperty;",
                "is_abstract": "",
                "class_name": "Neo4jVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "getIndexName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.indexName;",
                "is_abstract": "",
                "class_name": "Neo4jVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "setIndexName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.indexName = indexName;",
                "is_abstract": "",
                "class_name": "Neo4jVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "getIdProperty",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.idProperty;",
                "is_abstract": "",
                "class_name": "Neo4jVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "setIdProperty",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.idProperty = idProperty;",
                "is_abstract": "",
                "class_name": "Neo4jVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "getConstraintName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.constraintName;",
                "is_abstract": "",
                "class_name": "Neo4jVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "setConstraintName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.constraintName = constraintName;",
                "is_abstract": "",
                "class_name": "Neo4jVectorStoreProperties",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/hanadb/HanaCloudVectorStoreAutoConfiguration.java",
        "class_names": [
            "HanaCloudVectorStoreAutoConfiguration"
        ],
        "imports": "import org.springframework.ai.vectorstore.HanaCloudVectorStoreConfig;\nimport org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.ai.vectorstore.HanaVectorEntity;\nimport org.springframework.ai.vectorstore.HanaVectorRepository;\nimport javax.sql.DataSource;\nimport org.springframework.ai.embedding.EmbeddingClient;\nimport org.springframework.boot.autoconfigure.AutoConfiguration;\nimport org.springframework.ai.vectorstore.HanaCloudVectorStore;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.vectorstore.hanadb.HanaCloudVectorStoreAutoConfiguration": "org.springframework.ai.autoconfigure.vectorstore.hanadb.HanaCloudVectorStoreAutoConfiguration",
            "org.springframework.ai.autoconfigure.vectorstore.hanadb.vectorStor": "org.springframework.ai.autoconfigure.vectorstore.hanadb.vectorStor"
        },
        "package": "package org.springframework.ai.autoconfigure.vectorstore.hanadb;",
        "property_declarations": [],
        "functions": [
            {
                "name": "vectorStore",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new HanaCloudVectorStore(repository, embeddingClient,\n\t\t\t\tHanaCloudVectorStoreConfig.builder()\n\t\t\t\t\t.tableName(properties.getTableName())\n\t\t\t\t\t.topK(properties.getTopK())\n\t\t\t\t\t.build());",
                "is_abstract": "",
                "class_name": "HanaCloudVectorStoreAutoConfiguration",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/hanadb/HanaCloudVectorStoreProperties.java",
        "class_names": [
            "HanaCloudVectorStoreProperties"
        ],
        "imports": "import org.springframework.boot.context.properties.ConfigurationProperties;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.vectorstore.hanadb.HanaCloudVectorStoreProperties": "org.springframework.ai.autoconfigure.vectorstore.hanadb.HanaCloudVectorStoreProperties",
            "org.springframework.ai.autoconfigure.vectorstore.hanadb.getTableNam": "org.springframework.ai.autoconfigure.vectorstore.hanadb.getTableNam",
            "org.springframework.ai.autoconfigure.vectorstore.hanadb.setTableNam": "org.springframework.ai.autoconfigure.vectorstore.hanadb.setTableNam",
            "org.springframework.ai.autoconfigure.vectorstore.hanadb.getTopK": "org.springframework.ai.autoconfigure.vectorstore.hanadb.getTopK",
            "org.springframework.ai.autoconfigure.vectorstore.hanadb.setTopK": "org.springframework.ai.autoconfigure.vectorstore.hanadb.setTopK",
            "org.springframework.ai.autoconfigure.vectorstore.hanadb.CONFIG_PREFIX": "org.springframework.ai.autoconfigure.vectorstore.hanadb.CONFIG_PREFIX",
            "org.springframework.ai.autoconfigure.vectorstore.hanadb.tableNam": "org.springframework.ai.autoconfigure.vectorstore.hanadb.tableNam",
            "org.springframework.ai.autoconfigure.vectorstore.hanadb.topK": "org.springframework.ai.autoconfigure.vectorstore.hanadb.topK"
        },
        "package": "package org.springframework.ai.autoconfigure.vectorstore.hanadb;",
        "property_declarations": [
            "private String tableName;",
            "public static final String CONFIG_PREFIX = \"spring.ai.vectorstore.hanadb\";",
            "private int topK;"
        ],
        "functions": [
            {
                "name": "getTableName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return tableName;",
                "is_abstract": "",
                "class_name": "HanaCloudVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "setTableName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.tableName = tableName;",
                "is_abstract": "",
                "class_name": "HanaCloudVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "getTopK",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return topK;",
                "is_abstract": "",
                "class_name": "HanaCloudVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "setTopK",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.topK = topK;",
                "is_abstract": "",
                "class_name": "HanaCloudVectorStoreProperties",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/chroma/ChromaApiProperties.java",
        "class_names": [
            "ChromaApiProperties"
        ],
        "imports": "import org.springframework.boot.context.properties.ConfigurationProperties;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.vectorstore.chroma.ChromaApiProperties": "org.springframework.ai.autoconfigure.vectorstore.chroma.ChromaApiProperties",
            "org.springframework.ai.autoconfigure.vectorstore.chroma.getHost": "org.springframework.ai.autoconfigure.vectorstore.chroma.getHost",
            "org.springframework.ai.autoconfigure.vectorstore.chroma.setHost": "org.springframework.ai.autoconfigure.vectorstore.chroma.setHost",
            "org.springframework.ai.autoconfigure.vectorstore.chroma.getPort": "org.springframework.ai.autoconfigure.vectorstore.chroma.getPort",
            "org.springframework.ai.autoconfigure.vectorstore.chroma.setPort": "org.springframework.ai.autoconfigure.vectorstore.chroma.setPort",
            "org.springframework.ai.autoconfigure.vectorstore.chroma.getKeyToken": "org.springframework.ai.autoconfigure.vectorstore.chroma.getKeyToken",
            "org.springframework.ai.autoconfigure.vectorstore.chroma.setKeyToken": "org.springframework.ai.autoconfigure.vectorstore.chroma.setKeyToken",
            "org.springframework.ai.autoconfigure.vectorstore.chroma.getUsernam": "org.springframework.ai.autoconfigure.vectorstore.chroma.getUsernam",
            "org.springframework.ai.autoconfigure.vectorstore.chroma.setUsernam": "org.springframework.ai.autoconfigure.vectorstore.chroma.setUsernam",
            "org.springframework.ai.autoconfigure.vectorstore.chroma.getPassword": "org.springframework.ai.autoconfigure.vectorstore.chroma.getPassword",
            "org.springframework.ai.autoconfigure.vectorstore.chroma.setPassword": "org.springframework.ai.autoconfigure.vectorstore.chroma.setPassword",
            "org.springframework.ai.autoconfigure.vectorstore.chroma.CONFIG_PREFIX": "org.springframework.ai.autoconfigure.vectorstore.chroma.CONFIG_PREFIX",
            "org.springframework.ai.autoconfigure.vectorstore.chroma.host": "org.springframework.ai.autoconfigure.vectorstore.chroma.host",
            "org.springframework.ai.autoconfigure.vectorstore.chroma.port": "org.springframework.ai.autoconfigure.vectorstore.chroma.port",
            "org.springframework.ai.autoconfigure.vectorstore.chroma.keyToken": "org.springframework.ai.autoconfigure.vectorstore.chroma.keyToken",
            "org.springframework.ai.autoconfigure.vectorstore.chroma.usernam": "org.springframework.ai.autoconfigure.vectorstore.chroma.usernam",
            "org.springframework.ai.autoconfigure.vectorstore.chroma.password": "org.springframework.ai.autoconfigure.vectorstore.chroma.password"
        },
        "package": "package org.springframework.ai.autoconfigure.vectorstore.chroma;",
        "property_declarations": [
            "public static final String CONFIG_PREFIX = \"spring.ai.vectorstore.chroma.client\";",
            "private int port = 8000;",
            "private String username;",
            "private String host = \"http://localhost\";",
            "private String keyToken;",
            "private String password;"
        ],
        "functions": [
            {
                "name": "getHost",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return host;",
                "is_abstract": "",
                "class_name": "ChromaApiProperties",
                "annotations": []
            },
            {
                "name": "setHost",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.host = baseUrl;",
                "is_abstract": "",
                "class_name": "ChromaApiProperties",
                "annotations": []
            },
            {
                "name": "getPort",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.port;",
                "is_abstract": "",
                "class_name": "ChromaApiProperties",
                "annotations": []
            },
            {
                "name": "setPort",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.port = port;",
                "is_abstract": "",
                "class_name": "ChromaApiProperties",
                "annotations": []
            },
            {
                "name": "getKeyToken",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.keyToken;",
                "is_abstract": "",
                "class_name": "ChromaApiProperties",
                "annotations": []
            },
            {
                "name": "setKeyToken",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.keyToken = keyToken;",
                "is_abstract": "",
                "class_name": "ChromaApiProperties",
                "annotations": []
            },
            {
                "name": "getUsername",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.username;",
                "is_abstract": "",
                "class_name": "ChromaApiProperties",
                "annotations": []
            },
            {
                "name": "setUsername",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.username = username;",
                "is_abstract": "",
                "class_name": "ChromaApiProperties",
                "annotations": []
            },
            {
                "name": "getPassword",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.password;",
                "is_abstract": "",
                "class_name": "ChromaApiProperties",
                "annotations": []
            },
            {
                "name": "setPassword",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.password = password;",
                "is_abstract": "",
                "class_name": "ChromaApiProperties",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/chroma/ChromaVectorStoreProperties.java",
        "class_names": [
            "ChromaVectorStoreProperties"
        ],
        "imports": "import org.springframework.ai.vectorstore.ChromaVectorStore;\nimport org.springframework.boot.context.properties.ConfigurationProperties;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.vectorstore.chroma.ChromaVectorStoreProperties": "org.springframework.ai.autoconfigure.vectorstore.chroma.ChromaVectorStoreProperties",
            "org.springframework.ai.autoconfigure.vectorstore.chroma.getCollectionNam": "org.springframework.ai.autoconfigure.vectorstore.chroma.getCollectionNam",
            "org.springframework.ai.autoconfigure.vectorstore.chroma.setCollectionNam": "org.springframework.ai.autoconfigure.vectorstore.chroma.setCollectionNam",
            "org.springframework.ai.autoconfigure.vectorstore.chroma.CONFIG_PREFIX": "org.springframework.ai.autoconfigure.vectorstore.chroma.CONFIG_PREFIX",
            "org.springframework.ai.autoconfigure.vectorstore.chroma.collectionNam": "org.springframework.ai.autoconfigure.vectorstore.chroma.collectionNam"
        },
        "package": "package org.springframework.ai.autoconfigure.vectorstore.chroma;",
        "property_declarations": [
            "public static final String CONFIG_PREFIX = \"spring.ai.vectorstore.chroma.store\";",
            "private String collectionName = ChromaVectorStore.DEFAULT_COLLECTION_NAME;"
        ],
        "functions": [
            {
                "name": "getCollectionName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return collectionName;",
                "is_abstract": "",
                "class_name": "ChromaVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "setCollectionName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.collectionName = collectionName;",
                "is_abstract": "",
                "class_name": "ChromaVectorStoreProperties",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/chroma/ChromaConnectionDetails.java",
        "class_names": [],
        "imports": "import org.springframework.boot.autoconfigure.service.connection.ConnectionDetails;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.vectorstore.chroma.getHost": "org.springframework.ai.autoconfigure.vectorstore.chroma.getHost",
            "org.springframework.ai.autoconfigure.vectorstore.chroma.getPort": "org.springframework.ai.autoconfigure.vectorstore.chroma.getPort"
        },
        "package": "package org.springframework.ai.autoconfigure.vectorstore.chroma;",
        "property_declarations": [],
        "functions": [
            {
                "name": "getHost",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "getPort",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/chroma/ChromaVectorStoreAutoConfiguration.java",
        "class_names": [
            "PropertiesChromaConnectionDetails",
            "ChromaVectorStoreAutoConfiguration"
        ],
        "imports": "import com.fasterxml.jackson.databind.ObjectMapper;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.ai.chroma.ChromaApi;\nimport org.springframework.ai.vectorstore.ChromaVectorStore;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.util.StringUtils;\nimport org.springframework.ai.embedding.EmbeddingClient;\nimport org.springframework.boot.autoconfigure.AutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.web.client.RestTemplate;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.vectorstore.chroma.ChromaVectorStoreAutoConfiguration": "org.springframework.ai.autoconfigure.vectorstore.chroma.ChromaVectorStoreAutoConfiguration",
            "org.springframework.ai.autoconfigure.vectorstore.chroma.PropertiesChromaConnectionDetails": "org.springframework.ai.autoconfigure.vectorstore.chroma.PropertiesChromaConnectionDetails",
            "org.springframework.ai.autoconfigure.vectorstore.chroma.ConditionalOnMissingBean": "org.springframework.ai.autoconfigure.vectorstore.chroma.ConditionalOnMissingBean",
            "org.springframework.ai.autoconfigure.vectorstore.chroma.restTemplat": "org.springframework.ai.autoconfigure.vectorstore.chroma.restTemplat",
            "org.springframework.ai.autoconfigure.vectorstore.chroma.chromaApi": "org.springframework.ai.autoconfigure.vectorstore.chroma.chromaApi",
            "org.springframework.ai.autoconfigure.vectorstore.chroma.vectorStor": "org.springframework.ai.autoconfigure.vectorstore.chroma.vectorStor",
            "org.springframework.ai.autoconfigure.vectorstore.chroma.getHost": "org.springframework.ai.autoconfigure.vectorstore.chroma.getHost",
            "org.springframework.ai.autoconfigure.vectorstore.chroma.getPort": "org.springframework.ai.autoconfigure.vectorstore.chroma.getPort",
            "org.springframework.ai.autoconfigure.vectorstore.chroma.properties": "org.springframework.ai.autoconfigure.vectorstore.chroma.properties"
        },
        "package": "package org.springframework.ai.autoconfigure.vectorstore.chroma;",
        "property_declarations": [
            "private final ChromaApiProperties properties;"
        ],
        "functions": [
            {
                "name": "ConditionalOnMissingBean",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new PropertiesChromaConnectionDetails(properties);",
                "is_abstract": "",
                "class_name": "ChromaVectorStoreAutoConfiguration",
                "annotations": [
                    "@ConditionalOnMissingBean(ChromaConnectionDetails.class)"
                ]
            },
            {
                "name": "restTemplate",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new RestTemplate();",
                "is_abstract": "",
                "class_name": "ChromaVectorStoreAutoConfiguration",
                "annotations": []
            },
            {
                "name": "chromaApi",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String chromaUrl = String.format(\"%s:%s\", connectionDetails.getHost(), connectionDetails.getPort());\n\n\t\tvar chromaApi = new ChromaApi(chromaUrl, restTemplate, new ObjectMapper());\n\n\t\tif (StringUtils.hasText(apiProperties.getKeyToken())) {\n\t\t\tchromaApi.withKeyToken(apiProperties.getKeyToken());\n\t\t}\n\t\telse if (StringUtils.hasText(apiProperties.getUsername()) && StringUtils.hasText(apiProperties.getPassword())) {\n\t\t\tchromaApi.withBasicAuthCredentials(apiProperties.getUsername(), apiProperties.getPassword());\n\t\t}\n\n\t\treturn chromaApi;",
                "is_abstract": "",
                "class_name": "ChromaVectorStoreAutoConfiguration",
                "annotations": []
            },
            {
                "name": "vectorStore",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new ChromaVectorStore(embeddingClient, chromaApi, storeProperties.getCollectionName());",
                "is_abstract": "",
                "class_name": "ChromaVectorStoreAutoConfiguration",
                "annotations": []
            },
            {
                "name": "getHost",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.properties.getHost();",
                "is_abstract": "",
                "class_name": "ChromaVectorStoreAutoConfiguration PropertiesChromaConnectionDetails",
                "annotations": []
            },
            {
                "name": "getPort",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.properties.getPort();",
                "is_abstract": "",
                "class_name": "ChromaVectorStoreAutoConfiguration PropertiesChromaConnectionDetails",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/redis/RedisVectorStoreProperties.java",
        "class_names": [
            "RedisVectorStoreProperties"
        ],
        "imports": "import org.springframework.boot.context.properties.ConfigurationProperties;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.vectorstore.redis.RedisVectorStoreProperties": "org.springframework.ai.autoconfigure.vectorstore.redis.RedisVectorStoreProperties",
            "org.springframework.ai.autoconfigure.vectorstore.redis.getUri": "org.springframework.ai.autoconfigure.vectorstore.redis.getUri",
            "org.springframework.ai.autoconfigure.vectorstore.redis.setUri": "org.springframework.ai.autoconfigure.vectorstore.redis.setUri",
            "org.springframework.ai.autoconfigure.vectorstore.redis.getIndex": "org.springframework.ai.autoconfigure.vectorstore.redis.getIndex",
            "org.springframework.ai.autoconfigure.vectorstore.redis.setIndex": "org.springframework.ai.autoconfigure.vectorstore.redis.setIndex",
            "org.springframework.ai.autoconfigure.vectorstore.redis.getPrefix": "org.springframework.ai.autoconfigure.vectorstore.redis.getPrefix",
            "org.springframework.ai.autoconfigure.vectorstore.redis.setPrefix": "org.springframework.ai.autoconfigure.vectorstore.redis.setPrefix",
            "org.springframework.ai.autoconfigure.vectorstore.redis.CONFIG_PREFIX": "org.springframework.ai.autoconfigure.vectorstore.redis.CONFIG_PREFIX",
            "org.springframework.ai.autoconfigure.vectorstore.redis.uri": "org.springframework.ai.autoconfigure.vectorstore.redis.uri",
            "org.springframework.ai.autoconfigure.vectorstore.redis.index": "org.springframework.ai.autoconfigure.vectorstore.redis.index",
            "org.springframework.ai.autoconfigure.vectorstore.redis.prefix": "org.springframework.ai.autoconfigure.vectorstore.redis.prefix"
        },
        "package": "package org.springframework.ai.autoconfigure.vectorstore.redis;",
        "property_declarations": [
            "private String uri = \"redis://localhost:6379\";",
            "public static final String CONFIG_PREFIX = \"spring.ai.vectorstore.redis\";",
            "private String prefix = \"default:\";",
            "private String index = \"default-index\";"
        ],
        "functions": [
            {
                "name": "getUri",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.uri;",
                "is_abstract": "",
                "class_name": "RedisVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "setUri",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.uri = uri;",
                "is_abstract": "",
                "class_name": "RedisVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "getIndex",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.index;",
                "is_abstract": "",
                "class_name": "RedisVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "setIndex",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.index = name;",
                "is_abstract": "",
                "class_name": "RedisVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "getPrefix",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.prefix;",
                "is_abstract": "",
                "class_name": "RedisVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "setPrefix",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.prefix = prefix;",
                "is_abstract": "",
                "class_name": "RedisVectorStoreProperties",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/redis/RedisConnectionDetails.java",
        "class_names": [],
        "imports": "import org.springframework.boot.autoconfigure.service.connection.ConnectionDetails;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.vectorstore.redis.getUri": "org.springframework.ai.autoconfigure.vectorstore.redis.getUri"
        },
        "package": "package org.springframework.ai.autoconfigure.vectorstore.redis;",
        "property_declarations": [],
        "functions": [
            {
                "name": "getUri",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/redis/RedisVectorStoreAutoConfiguration.java",
        "class_names": [
            "RedisVectorStoreAutoConfiguration",
            "PropertiesRedisConnectionDetails"
        ],
        "imports": "import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.ai.vectorstore.RedisVectorStore;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.ai.embedding.EmbeddingClient;\nimport org.springframework.ai.vectorstore.RedisVectorStore.RedisVectorStoreConfig;\nimport org.springframework.boot.autoconfigure.AutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.vectorstore.redis.RedisVectorStoreAutoConfiguration": "org.springframework.ai.autoconfigure.vectorstore.redis.RedisVectorStoreAutoConfiguration",
            "org.springframework.ai.autoconfigure.vectorstore.redis.PropertiesRedisConnectionDetails": "org.springframework.ai.autoconfigure.vectorstore.redis.PropertiesRedisConnectionDetails",
            "org.springframework.ai.autoconfigure.vectorstore.redis.ConditionalOnMissingBean": "org.springframework.ai.autoconfigure.vectorstore.redis.ConditionalOnMissingBean",
            "org.springframework.ai.autoconfigure.vectorstore.redis.vectorStor": "org.springframework.ai.autoconfigure.vectorstore.redis.vectorStor",
            "org.springframework.ai.autoconfigure.vectorstore.redis.getUri": "org.springframework.ai.autoconfigure.vectorstore.redis.getUri",
            "org.springframework.ai.autoconfigure.vectorstore.redis.properties": "org.springframework.ai.autoconfigure.vectorstore.redis.properties"
        },
        "package": "package org.springframework.ai.autoconfigure.vectorstore.redis;",
        "property_declarations": [
            "private final RedisVectorStoreProperties properties;"
        ],
        "functions": [
            {
                "name": "ConditionalOnMissingBean",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new PropertiesRedisConnectionDetails(properties);",
                "is_abstract": "",
                "class_name": "RedisVectorStoreAutoConfiguration",
                "annotations": [
                    "@ConditionalOnMissingBean(RedisConnectionDetails.class)"
                ]
            },
            {
                "name": "vectorStore",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var config = RedisVectorStoreConfig.builder()\n\t\t\t.withURI(redisConnectionDetails.getUri())\n\t\t\t.withIndexName(properties.getIndex())\n\t\t\t.withPrefix(properties.getPrefix())\n\t\t\t.build();\n\n\t\treturn new RedisVectorStore(config, embeddingClient);",
                "is_abstract": "",
                "class_name": "RedisVectorStoreAutoConfiguration",
                "annotations": []
            },
            {
                "name": "getUri",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.properties.getUri();",
                "is_abstract": "",
                "class_name": "RedisVectorStoreAutoConfiguration PropertiesRedisConnectionDetails",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/azure/AzureVectorStoreProperties.java",
        "class_names": [
            "AzureVectorStoreProperties"
        ],
        "imports": "import org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.ai.vectorstore.azure.AzureVectorStore;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.vectorstore.azure.AzureVectorStoreProperties": "org.springframework.ai.autoconfigure.vectorstore.azure.AzureVectorStoreProperties",
            "org.springframework.ai.autoconfigure.vectorstore.azure.getUrl": "org.springframework.ai.autoconfigure.vectorstore.azure.getUrl",
            "org.springframework.ai.autoconfigure.vectorstore.azure.setUrl": "org.springframework.ai.autoconfigure.vectorstore.azure.setUrl",
            "org.springframework.ai.autoconfigure.vectorstore.azure.getApiKey": "org.springframework.ai.autoconfigure.vectorstore.azure.getApiKey",
            "org.springframework.ai.autoconfigure.vectorstore.azure.setApiKey": "org.springframework.ai.autoconfigure.vectorstore.azure.setApiKey",
            "org.springframework.ai.autoconfigure.vectorstore.azure.getIndexNam": "org.springframework.ai.autoconfigure.vectorstore.azure.getIndexNam",
            "org.springframework.ai.autoconfigure.vectorstore.azure.setIndexNam": "org.springframework.ai.autoconfigure.vectorstore.azure.setIndexNam",
            "org.springframework.ai.autoconfigure.vectorstore.azure.getDefaultTopK": "org.springframework.ai.autoconfigure.vectorstore.azure.getDefaultTopK",
            "org.springframework.ai.autoconfigure.vectorstore.azure.setDefaultTopK": "org.springframework.ai.autoconfigure.vectorstore.azure.setDefaultTopK",
            "org.springframework.ai.autoconfigure.vectorstore.azure.getDefaultSimilarityThreshold": "org.springframework.ai.autoconfigure.vectorstore.azure.getDefaultSimilarityThreshold",
            "org.springframework.ai.autoconfigure.vectorstore.azure.setDefaultSimilarityThreshold": "org.springframework.ai.autoconfigure.vectorstore.azure.setDefaultSimilarityThreshold",
            "org.springframework.ai.autoconfigure.vectorstore.azure.CONFIG_PREFIX": "org.springframework.ai.autoconfigure.vectorstore.azure.CONFIG_PREFIX",
            "org.springframework.ai.autoconfigure.vectorstore.azure.url": "org.springframework.ai.autoconfigure.vectorstore.azure.url",
            "org.springframework.ai.autoconfigure.vectorstore.azure.apiKey": "org.springframework.ai.autoconfigure.vectorstore.azure.apiKey",
            "org.springframework.ai.autoconfigure.vectorstore.azure.indexNam": "org.springframework.ai.autoconfigure.vectorstore.azure.indexNam",
            "org.springframework.ai.autoconfigure.vectorstore.azure.defaultTopK": "org.springframework.ai.autoconfigure.vectorstore.azure.defaultTopK",
            "org.springframework.ai.autoconfigure.vectorstore.azure.defaultSimilarityThreshold": "org.springframework.ai.autoconfigure.vectorstore.azure.defaultSimilarityThreshold"
        },
        "package": "package org.springframework.ai.autoconfigure.vectorstore.azure;",
        "property_declarations": [
            "private String apiKey;",
            "private int defaultTopK = -1;",
            "private String url;",
            "private double defaultSimilarityThreshold = -1;",
            "private String indexName = AzureVectorStore.DEFAULT_INDEX_NAME;",
            "public static final String CONFIG_PREFIX = \"spring.ai.vectorstore.azure\";"
        ],
        "functions": [
            {
                "name": "getUrl",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return url;",
                "is_abstract": "",
                "class_name": "AzureVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "setUrl",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.url = endpointUrl;",
                "is_abstract": "",
                "class_name": "AzureVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "getApiKey",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return apiKey;",
                "is_abstract": "",
                "class_name": "AzureVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "setApiKey",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.apiKey = apiKey;",
                "is_abstract": "",
                "class_name": "AzureVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "getIndexName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return indexName;",
                "is_abstract": "",
                "class_name": "AzureVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "setIndexName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.indexName = indexName;",
                "is_abstract": "",
                "class_name": "AzureVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "getDefaultTopK",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return defaultTopK;",
                "is_abstract": "",
                "class_name": "AzureVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "setDefaultTopK",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.defaultTopK = defaultTopK;",
                "is_abstract": "",
                "class_name": "AzureVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "getDefaultSimilarityThreshold",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return defaultSimilarityThreshold;",
                "is_abstract": "",
                "class_name": "AzureVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "setDefaultSimilarityThreshold",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.defaultSimilarityThreshold = defaultSimilarityThreshold;",
                "is_abstract": "",
                "class_name": "AzureVectorStoreProperties",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/azure/AzureVectorStoreAutoConfiguration.java",
        "class_names": [
            "AzureVectorStoreAutoConfiguration"
        ],
        "imports": "import org.springframework.ai.vectorstore.azure.AzureVectorStore;\nimport com.azure.search.documents.indexes.SearchIndexClientBuilder;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport com.azure.search.documents.indexes.SearchIndexClient;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport com.azure.core.credential.AzureKeyCredential;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.ai.embedding.EmbeddingClient;\nimport org.springframework.boot.autoconfigure.AutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.vectorstore.azure.AzureVectorStoreAutoConfiguration": "org.springframework.ai.autoconfigure.vectorstore.azure.AzureVectorStoreAutoConfiguration",
            "org.springframework.ai.autoconfigure.vectorstore.azure.searchIndexClient": "org.springframework.ai.autoconfigure.vectorstore.azure.searchIndexClient",
            "org.springframework.ai.autoconfigure.vectorstore.azure.vectorStor": "org.springframework.ai.autoconfigure.vectorstore.azure.vectorStor"
        },
        "package": "package org.springframework.ai.autoconfigure.vectorstore.azure;",
        "property_declarations": [],
        "functions": [
            {
                "name": "searchIndexClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new SearchIndexClientBuilder().endpoint(properties.getUrl())\n\t\t\t.credential(new AzureKeyCredential(properties.getApiKey()))\n\t\t\t.buildClient();",
                "is_abstract": "",
                "class_name": "AzureVectorStoreAutoConfiguration",
                "annotations": []
            },
            {
                "name": "vectorStore",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var vectorStore = new AzureVectorStore(searchIndexClient, embeddingClient);\n\n\t\tvectorStore.setIndexName(properties.getIndexName());\n\n\t\tif (properties.getDefaultTopK() >= 0) {\n\t\t\tvectorStore.setDefaultTopK(properties.getDefaultTopK());\n\t\t}\n\n\t\tif (properties.getDefaultSimilarityThreshold() >= 0.0) {\n\t\t\tvectorStore.setDefaultSimilarityThreshold(properties.getDefaultSimilarityThreshold());\n\t\t}\n\n\t\treturn vectorStore;",
                "is_abstract": "",
                "class_name": "AzureVectorStoreAutoConfiguration",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/pgvector/PgVectorStoreProperties.java",
        "class_names": [
            "PgVectorStoreProperties"
        ],
        "imports": "import org.springframework.ai.vectorstore.PgVectorStore;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.ai.vectorstore.PgVectorStore.PgIndexType;\nimport org.springframework.ai.vectorstore.PgVectorStore.PgDistanceType;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.vectorstore.pgvector.PgVectorStoreProperties": "org.springframework.ai.autoconfigure.vectorstore.pgvector.PgVectorStoreProperties",
            "org.springframework.ai.autoconfigure.vectorstore.pgvector.getDimensions": "org.springframework.ai.autoconfigure.vectorstore.pgvector.getDimensions",
            "org.springframework.ai.autoconfigure.vectorstore.pgvector.setDimensions": "org.springframework.ai.autoconfigure.vectorstore.pgvector.setDimensions",
            "org.springframework.ai.autoconfigure.vectorstore.pgvector.getIndexTy": "org.springframework.ai.autoconfigure.vectorstore.pgvector.getIndexTy",
            "org.springframework.ai.autoconfigure.vectorstore.pgvector.setIndexTy": "org.springframework.ai.autoconfigure.vectorstore.pgvector.setIndexTy",
            "org.springframework.ai.autoconfigure.vectorstore.pgvector.getDistanceTy": "org.springframework.ai.autoconfigure.vectorstore.pgvector.getDistanceTy",
            "org.springframework.ai.autoconfigure.vectorstore.pgvector.setDistanceTy": "org.springframework.ai.autoconfigure.vectorstore.pgvector.setDistanceTy",
            "org.springframework.ai.autoconfigure.vectorstore.pgvector.isRemoveExistingVectorStoreTabl": "org.springframework.ai.autoconfigure.vectorstore.pgvector.isRemoveExistingVectorStoreTabl",
            "org.springframework.ai.autoconfigure.vectorstore.pgvector.setRemoveExistingVectorStoreTabl": "org.springframework.ai.autoconfigure.vectorstore.pgvector.setRemoveExistingVectorStoreTabl",
            "org.springframework.ai.autoconfigure.vectorstore.pgvector.CONFIG_PREFIX": "org.springframework.ai.autoconfigure.vectorstore.pgvector.CONFIG_PREFIX",
            "org.springframework.ai.autoconfigure.vectorstore.pgvector.dimensions": "org.springframework.ai.autoconfigure.vectorstore.pgvector.dimensions",
            "org.springframework.ai.autoconfigure.vectorstore.pgvector.indexTy": "org.springframework.ai.autoconfigure.vectorstore.pgvector.indexTy",
            "org.springframework.ai.autoconfigure.vectorstore.pgvector.distanceTy": "org.springframework.ai.autoconfigure.vectorstore.pgvector.distanceTy",
            "org.springframework.ai.autoconfigure.vectorstore.pgvector.removeExistingVectorStoreTabl": "org.springframework.ai.autoconfigure.vectorstore.pgvector.removeExistingVectorStoreTabl"
        },
        "package": "package org.springframework.ai.autoconfigure.vectorstore.pgvector;",
        "property_declarations": [
            "public static final String CONFIG_PREFIX = \"spring.ai.vectorstore.pgvector\";",
            "private int dimensions = PgVectorStore.INVALID_EMBEDDING_DIMENSION;",
            "private boolean removeExistingVectorStoreTable = false;",
            "private PgDistanceType distanceType = PgDistanceType.COSINE_DISTANCE;",
            "private PgIndexType indexType = PgIndexType.HNSW;"
        ],
        "functions": [
            {
                "name": "getDimensions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return dimensions;",
                "is_abstract": "",
                "class_name": "PgVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "setDimensions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.dimensions = dimensions;",
                "is_abstract": "",
                "class_name": "PgVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "getIndexType",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return indexType;",
                "is_abstract": "",
                "class_name": "PgVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "setIndexType",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.indexType = createIndexMethod;",
                "is_abstract": "",
                "class_name": "PgVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "getDistanceType",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return distanceType;",
                "is_abstract": "",
                "class_name": "PgVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "setDistanceType",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.distanceType = distanceType;",
                "is_abstract": "",
                "class_name": "PgVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "isRemoveExistingVectorStoreTable",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return removeExistingVectorStoreTable;",
                "is_abstract": "",
                "class_name": "PgVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "setRemoveExistingVectorStoreTable",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.removeExistingVectorStoreTable = removeExistingVectorStoreTable;",
                "is_abstract": "",
                "class_name": "PgVectorStoreProperties",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/pgvector/PgVectorStoreAutoConfiguration.java",
        "class_names": [
            "PgVectorStoreAutoConfiguration"
        ],
        "imports": "import org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration;\nimport org.springframework.ai.vectorstore.PgVectorStore;\nimport javax.sql.DataSource;\nimport org.springframework.ai.embedding.EmbeddingClient;\nimport org.springframework.boot.autoconfigure.AutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.vectorstore.pgvector.PgVectorStoreAutoConfiguration": "org.springframework.ai.autoconfigure.vectorstore.pgvector.PgVectorStoreAutoConfiguration",
            "org.springframework.ai.autoconfigure.vectorstore.pgvector.vectorStor": "org.springframework.ai.autoconfigure.vectorstore.pgvector.vectorStor"
        },
        "package": "package org.springframework.ai.autoconfigure.vectorstore.pgvector;",
        "property_declarations": [],
        "functions": [
            {
                "name": "vectorStore",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new PgVectorStore(jdbcTemplate, embeddingClient, properties.getDimensions(),\n\t\t\t\tproperties.getDistanceType(), properties.isRemoveExistingVectorStoreTable(), properties.getIndexType());",
                "is_abstract": "",
                "class_name": "PgVectorStoreAutoConfiguration",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/pinecone/PineconeVectorStoreAutoConfiguration.java",
        "class_names": [
            "PineconeVectorStoreAutoConfiguration"
        ],
        "imports": "import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.ai.vectorstore.PineconeVectorStore;\nimport org.springframework.ai.embedding.EmbeddingClient;\nimport org.springframework.boot.autoconfigure.AutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.ai.vectorstore.PineconeVectorStore.PineconeVectorStoreConfig;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.vectorstore.pinecone.PineconeVectorStoreAutoConfiguration": "org.springframework.ai.autoconfigure.vectorstore.pinecone.PineconeVectorStoreAutoConfiguration",
            "org.springframework.ai.autoconfigure.vectorstore.pinecone.vectorStor": "org.springframework.ai.autoconfigure.vectorstore.pinecone.vectorStor"
        },
        "package": "package org.springframework.ai.autoconfigure.vectorstore.pinecone;",
        "property_declarations": [],
        "functions": [
            {
                "name": "vectorStore",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var config = PineconeVectorStoreConfig.builder()\n\t\t\t.withApiKey(properties.getApiKey())\n\t\t\t.withEnvironment(properties.getEnvironment())\n\t\t\t.withProjectId(properties.getProjectId())\n\t\t\t.withIndexName(properties.getIndexName())\n\t\t\t.withNamespace(properties.getNamespace())\n\t\t\t.withServerSideTimeout(properties.getServerSideTimeout())\n\t\t\t.build();\n\n\t\treturn new PineconeVectorStore(config, embeddingClient);",
                "is_abstract": "",
                "class_name": "PineconeVectorStoreAutoConfiguration",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/pinecone/PineconeVectorStoreProperties.java",
        "class_names": [
            "PineconeVectorStoreProperties"
        ],
        "imports": "import org.springframework.boot.context.properties.ConfigurationProperties;\nimport java.time.Duration;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.vectorstore.pinecone.PineconeVectorStoreProperties": "org.springframework.ai.autoconfigure.vectorstore.pinecone.PineconeVectorStoreProperties",
            "org.springframework.ai.autoconfigure.vectorstore.pinecone.getApiKey": "org.springframework.ai.autoconfigure.vectorstore.pinecone.getApiKey",
            "org.springframework.ai.autoconfigure.vectorstore.pinecone.setApiKey": "org.springframework.ai.autoconfigure.vectorstore.pinecone.setApiKey",
            "org.springframework.ai.autoconfigure.vectorstore.pinecone.getEnvironment": "org.springframework.ai.autoconfigure.vectorstore.pinecone.getEnvironment",
            "org.springframework.ai.autoconfigure.vectorstore.pinecone.setEnvironment": "org.springframework.ai.autoconfigure.vectorstore.pinecone.setEnvironment",
            "org.springframework.ai.autoconfigure.vectorstore.pinecone.getProjectId": "org.springframework.ai.autoconfigure.vectorstore.pinecone.getProjectId",
            "org.springframework.ai.autoconfigure.vectorstore.pinecone.setProjectId": "org.springframework.ai.autoconfigure.vectorstore.pinecone.setProjectId",
            "org.springframework.ai.autoconfigure.vectorstore.pinecone.getNames": "org.springframework.ai.autoconfigure.vectorstore.pinecone.getNames",
            "org.springframework.ai.autoconfigure.vectorstore.pinecone.setNames": "org.springframework.ai.autoconfigure.vectorstore.pinecone.setNames",
            "org.springframework.ai.autoconfigure.vectorstore.pinecone.getIndexNam": "org.springframework.ai.autoconfigure.vectorstore.pinecone.getIndexNam",
            "org.springframework.ai.autoconfigure.vectorstore.pinecone.setIndexNam": "org.springframework.ai.autoconfigure.vectorstore.pinecone.setIndexNam",
            "org.springframework.ai.autoconfigure.vectorstore.pinecone.getServerSideTimeout": "org.springframework.ai.autoconfigure.vectorstore.pinecone.getServerSideTimeout",
            "org.springframework.ai.autoconfigure.vectorstore.pinecone.setServerSideTimeout": "org.springframework.ai.autoconfigure.vectorstore.pinecone.setServerSideTimeout",
            "org.springframework.ai.autoconfigure.vectorstore.pinecone.CONFIG_PREFIX": "org.springframework.ai.autoconfigure.vectorstore.pinecone.CONFIG_PREFIX",
            "org.springframework.ai.autoconfigure.vectorstore.pinecone.apiKey": "org.springframework.ai.autoconfigure.vectorstore.pinecone.apiKey",
            "org.springframework.ai.autoconfigure.vectorstore.pinecone.environment": "org.springframework.ai.autoconfigure.vectorstore.pinecone.environment",
            "org.springframework.ai.autoconfigure.vectorstore.pinecone.projectId": "org.springframework.ai.autoconfigure.vectorstore.pinecone.projectId",
            "org.springframework.ai.autoconfigure.vectorstore.pinecone.indexNam": "org.springframework.ai.autoconfigure.vectorstore.pinecone.indexNam",
            "org.springframework.ai.autoconfigure.vectorstore.pinecone.names": "org.springframework.ai.autoconfigure.vectorstore.pinecone.names",
            "org.springframework.ai.autoconfigure.vectorstore.pinecone.serverSideTimeout": "org.springframework.ai.autoconfigure.vectorstore.pinecone.serverSideTimeout"
        },
        "package": "package org.springframework.ai.autoconfigure.vectorstore.pinecone;",
        "property_declarations": [
            "private String apiKey;",
            "private String projectId;",
            "private String namespace = \"\";",
            "public static final String CONFIG_PREFIX = \"spring.ai.vectorstore.pinecone\";",
            "private String indexName;",
            "private String environment = \"gcp-starter\";",
            "private Duration serverSideTimeout = Duration.ofSeconds(20);"
        ],
        "functions": [
            {
                "name": "getApiKey",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.apiKey;",
                "is_abstract": "",
                "class_name": "PineconeVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "setApiKey",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.apiKey = apiKey;",
                "is_abstract": "",
                "class_name": "PineconeVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "getEnvironment",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.environment;",
                "is_abstract": "",
                "class_name": "PineconeVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "setEnvironment",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.environment = environment;",
                "is_abstract": "",
                "class_name": "PineconeVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "getProjectId",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.projectId;",
                "is_abstract": "",
                "class_name": "PineconeVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "setProjectId",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.projectId = projectId;",
                "is_abstract": "",
                "class_name": "PineconeVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "getNamespace",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.namespace;",
                "is_abstract": "",
                "class_name": "PineconeVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "setNamespace",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.namespace = namespace;",
                "is_abstract": "",
                "class_name": "PineconeVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "getIndexName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.indexName;",
                "is_abstract": "",
                "class_name": "PineconeVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "setIndexName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.indexName = indexName;",
                "is_abstract": "",
                "class_name": "PineconeVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "getServerSideTimeout",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.serverSideTimeout;",
                "is_abstract": "",
                "class_name": "PineconeVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "setServerSideTimeout",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.serverSideTimeout = serverSideTimeout;",
                "is_abstract": "",
                "class_name": "PineconeVectorStoreProperties",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/cassandra/CassandraVectorStoreProperties.java",
        "class_names": [
            "CassandraVectorStoreProperties"
        ],
        "imports": "import com.google.api.client.util.Preconditions;\nimport org.springframework.ai.vectorstore.CassandraVectorStoreConfig;\nimport org.springframework.boot.context.properties.ConfigurationProperties;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.vectorstore.cassandra.CassandraVectorStoreProperties": "org.springframework.ai.autoconfigure.vectorstore.cassandra.CassandraVectorStoreProperties",
            "org.springframework.ai.autoconfigure.vectorstore.cassandra.getKeys": "org.springframework.ai.autoconfigure.vectorstore.cassandra.getKeys",
            "org.springframework.ai.autoconfigure.vectorstore.cassandra.setKeys": "org.springframework.ai.autoconfigure.vectorstore.cassandra.setKeys",
            "org.springframework.ai.autoconfigure.vectorstore.cassandra.getTabl": "org.springframework.ai.autoconfigure.vectorstore.cassandra.getTabl",
            "org.springframework.ai.autoconfigure.vectorstore.cassandra.setTabl": "org.springframework.ai.autoconfigure.vectorstore.cassandra.setTabl",
            "org.springframework.ai.autoconfigure.vectorstore.cassandra.getIndexNam": "org.springframework.ai.autoconfigure.vectorstore.cassandra.getIndexNam",
            "org.springframework.ai.autoconfigure.vectorstore.cassandra.setIndexNam": "org.springframework.ai.autoconfigure.vectorstore.cassandra.setIndexNam",
            "org.springframework.ai.autoconfigure.vectorstore.cassandra.getContentColumnNam": "org.springframework.ai.autoconfigure.vectorstore.cassandra.getContentColumnNam",
            "org.springframework.ai.autoconfigure.vectorstore.cassandra.setContentColumnNam": "org.springframework.ai.autoconfigure.vectorstore.cassandra.setContentColumnNam",
            "org.springframework.ai.autoconfigure.vectorstore.cassandra.getEmbeddingColumnNam": "org.springframework.ai.autoconfigure.vectorstore.cassandra.getEmbeddingColumnNam",
            "org.springframework.ai.autoconfigure.vectorstore.cassandra.setEmbeddingColumnNam": "org.springframework.ai.autoconfigure.vectorstore.cassandra.setEmbeddingColumnNam",
            "org.springframework.ai.autoconfigure.vectorstore.cassandra.getDisallowSchemaCreation": "org.springframework.ai.autoconfigure.vectorstore.cassandra.getDisallowSchemaCreation",
            "org.springframework.ai.autoconfigure.vectorstore.cassandra.setDisallowSchemaCreation": "org.springframework.ai.autoconfigure.vectorstore.cassandra.setDisallowSchemaCreation",
            "org.springframework.ai.autoconfigure.vectorstore.cassandra.getFixedThreadPoolExecutorSiz": "org.springframework.ai.autoconfigure.vectorstore.cassandra.getFixedThreadPoolExecutorSiz",
            "org.springframework.ai.autoconfigure.vectorstore.cassandra.setFixedThreadPoolExecutorSiz": "org.springframework.ai.autoconfigure.vectorstore.cassandra.setFixedThreadPoolExecutorSiz",
            "org.springframework.ai.autoconfigure.vectorstore.cassandra.CONFIG_PREFIX": "org.springframework.ai.autoconfigure.vectorstore.cassandra.CONFIG_PREFIX",
            "org.springframework.ai.autoconfigure.vectorstore.cassandra.keys": "org.springframework.ai.autoconfigure.vectorstore.cassandra.keys",
            "org.springframework.ai.autoconfigure.vectorstore.cassandra.tabl": "org.springframework.ai.autoconfigure.vectorstore.cassandra.tabl",
            "org.springframework.ai.autoconfigure.vectorstore.cassandra.indexNam": "org.springframework.ai.autoconfigure.vectorstore.cassandra.indexNam",
            "org.springframework.ai.autoconfigure.vectorstore.cassandra.contentColumnNam": "org.springframework.ai.autoconfigure.vectorstore.cassandra.contentColumnNam",
            "org.springframework.ai.autoconfigure.vectorstore.cassandra.embeddingColumnNam": "org.springframework.ai.autoconfigure.vectorstore.cassandra.embeddingColumnNam",
            "org.springframework.ai.autoconfigure.vectorstore.cassandra.disallowSchemaChanges": "org.springframework.ai.autoconfigure.vectorstore.cassandra.disallowSchemaChanges",
            "org.springframework.ai.autoconfigure.vectorstore.cassandra.fixedThreadPoolExecutorSiz": "org.springframework.ai.autoconfigure.vectorstore.cassandra.fixedThreadPoolExecutorSiz"
        },
        "package": "package org.springframework.ai.autoconfigure.vectorstore.cassandra;",
        "property_declarations": [
            "public static final String CONFIG_PREFIX = \"spring.ai.vectorstore.cassandra\";",
            "private String embeddingColumnName = CassandraVectorStoreConfig.DEFAULT_EMBEDDING_COLUMN_NAME;",
            "private String contentColumnName = CassandraVectorStoreConfig.DEFAULT_CONTENT_COLUMN_NAME;",
            "private int fixedThreadPoolExecutorSize = CassandraVectorStoreConfig.DEFAULT_ADD_CONCURRENCY;",
            "private boolean disallowSchemaChanges = false;",
            "private String table = CassandraVectorStoreConfig.DEFAULT_TABLE_NAME;",
            "private String indexName = CassandraVectorStoreConfig.DEFAULT_INDEX_NAME;",
            "private String keyspace = CassandraVectorStoreConfig.DEFAULT_KEYSPACE_NAME;"
        ],
        "functions": [
            {
                "name": "getKeyspace",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.keyspace;",
                "is_abstract": "",
                "class_name": "CassandraVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "setKeyspace",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.keyspace = keyspace;",
                "is_abstract": "",
                "class_name": "CassandraVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "getTable",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.table;",
                "is_abstract": "",
                "class_name": "CassandraVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "setTable",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.table = table;",
                "is_abstract": "",
                "class_name": "CassandraVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "getIndexName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.indexName;",
                "is_abstract": "",
                "class_name": "CassandraVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "setIndexName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.indexName = indexName;",
                "is_abstract": "",
                "class_name": "CassandraVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "getContentColumnName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.contentColumnName;",
                "is_abstract": "",
                "class_name": "CassandraVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "setContentColumnName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.contentColumnName = contentColumnName;",
                "is_abstract": "",
                "class_name": "CassandraVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "getEmbeddingColumnName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.embeddingColumnName;",
                "is_abstract": "",
                "class_name": "CassandraVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "setEmbeddingColumnName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.embeddingColumnName = embeddingColumnName;",
                "is_abstract": "",
                "class_name": "CassandraVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "getDisallowSchemaCreation",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.disallowSchemaChanges;",
                "is_abstract": "",
                "class_name": "CassandraVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "setDisallowSchemaCreation",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.disallowSchemaChanges = disallowSchemaCreation;",
                "is_abstract": "",
                "class_name": "CassandraVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "getFixedThreadPoolExecutorSize",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.fixedThreadPoolExecutorSize;",
                "is_abstract": "",
                "class_name": "CassandraVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "setFixedThreadPoolExecutorSize",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Preconditions.checkArgument(0 < fixedThreadPoolExecutorSize);\n\t\tthis.fixedThreadPoolExecutorSize = fixedThreadPoolExecutorSize;",
                "is_abstract": "",
                "class_name": "CassandraVectorStoreProperties",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/cassandra/CassandraVectorStoreAutoConfiguration.java",
        "class_names": [
            "CassandraVectorStoreAutoConfiguration"
        ],
        "imports": "import org.springframework.ai.vectorstore.CassandraVectorStore;\nimport com.datastax.oss.driver.api.core.config.DefaultDriverOption;\nimport org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.boot.autoconfigure.cassandra.DriverConfigLoaderBuilderCustomizer;\nimport com.datastax.oss.driver.api.core.CqlSession;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.ai.embedding.EmbeddingClient;\nimport org.springframework.ai.vectorstore.CassandraVectorStoreConfig;\nimport org.springframework.boot.autoconfigure.AutoConfiguration;\nimport java.time.Duration;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.vectorstore.cassandra.CassandraVectorStoreAutoConfiguration": "org.springframework.ai.autoconfigure.vectorstore.cassandra.CassandraVectorStoreAutoConfiguration",
            "org.springframework.ai.autoconfigure.vectorstore.cassandra.vectorStor": "org.springframework.ai.autoconfigure.vectorstore.cassandra.vectorStor",
            "org.springframework.ai.autoconfigure.vectorstore.cassandra.driverConfigLoaderBuilderCustomizer": "org.springframework.ai.autoconfigure.vectorstore.cassandra.driverConfigLoaderBuilderCustomizer"
        },
        "package": "package org.springframework.ai.autoconfigure.vectorstore.cassandra;",
        "property_declarations": [],
        "functions": [
            {
                "name": "vectorStore",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var builder = CassandraVectorStoreConfig.builder().withCqlSession(cqlSession);\n\n\t\tbuilder = builder.withKeyspaceName(properties.getKeyspace())\n\t\t\t.withTableName(properties.getTable())\n\t\t\t.withContentColumnName(properties.getContentColumnName())\n\t\t\t.withEmbeddingColumnName(properties.getEmbeddingColumnName())\n\t\t\t.withIndexName(properties.getIndexName())\n\t\t\t.withFixedThreadPoolExecutorSize(properties.getFixedThreadPoolExecutorSize());\n\n\t\tif (properties.getDisallowSchemaCreation()) {\n\t\t\tbuilder = builder.disallowSchemaChanges();\n\t\t}\n\n\t\treturn new CassandraVectorStore(builder.build(), embeddingClient);",
                "is_abstract": "",
                "class_name": "CassandraVectorStoreAutoConfiguration",
                "annotations": []
            },
            {
                "name": "driverConfigLoaderBuilderCustomizer",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// this replaces spring-ai-cassandra-*.jar!application.conf\n\t\t// as spring-boot autoconfigure will not resolve the default driver configs\n\t\treturn (builder) -> builder.startProfile(CassandraVectorStore.DRIVER_PROFILE_UPDATES)\n\t\t\t.withString(DefaultDriverOption.REQUEST_CONSISTENCY, \"LOCAL_QUORUM\")\n\t\t\t.withDuration(DefaultDriverOption.REQUEST_TIMEOUT, Duration.ofSeconds(1))\n\t\t\t.withBoolean(DefaultDriverOption.REQUEST_DEFAULT_IDEMPOTENCE, true)\n\t\t\t.endProfile()\n\t\t\t.startProfile(CassandraVectorStore.DRIVER_PROFILE_SEARCH)\n\t\t\t.withString(DefaultDriverOption.REQUEST_CONSISTENCY, \"LOCAL_ONE\")\n\t\t\t.withDuration(DefaultDriverOption.REQUEST_TIMEOUT, Duration.ofSeconds(10))\n\t\t\t.withBoolean(DefaultDriverOption.REQUEST_DEFAULT_IDEMPOTENCE, true)\n\t\t\t.endProfile();",
                "is_abstract": "",
                "class_name": "CassandraVectorStoreAutoConfiguration",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/qdrant/QdrantConnectionDetails.java",
        "class_names": [],
        "imports": "import org.springframework.boot.autoconfigure.service.connection.ConnectionDetails;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.vectorstore.qdrant.getHost": "org.springframework.ai.autoconfigure.vectorstore.qdrant.getHost",
            "org.springframework.ai.autoconfigure.vectorstore.qdrant.getPort": "org.springframework.ai.autoconfigure.vectorstore.qdrant.getPort"
        },
        "package": "package org.springframework.ai.autoconfigure.vectorstore.qdrant;",
        "property_declarations": [],
        "functions": [
            {
                "name": "getHost",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "getPort",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/qdrant/QdrantVectorStoreAutoConfiguration.java",
        "class_names": [
            "QdrantVectorStoreAutoConfiguration",
            "PropertiesQdrantConnectionDetails"
        ],
        "imports": "import org.springframework.ai.vectorstore.qdrant.QdrantVectorStore.QdrantVectorStoreConfig;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.ai.vectorstore.qdrant.QdrantVectorStore;\nimport org.springframework.ai.embedding.EmbeddingClient;\nimport org.springframework.boot.autoconfigure.AutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.vectorstore.qdrant.QdrantVectorStoreAutoConfiguration": "org.springframework.ai.autoconfigure.vectorstore.qdrant.QdrantVectorStoreAutoConfiguration",
            "org.springframework.ai.autoconfigure.vectorstore.qdrant.PropertiesQdrantConnectionDetails": "org.springframework.ai.autoconfigure.vectorstore.qdrant.PropertiesQdrantConnectionDetails",
            "org.springframework.ai.autoconfigure.vectorstore.qdrant.ConditionalOnMissingBean": "org.springframework.ai.autoconfigure.vectorstore.qdrant.ConditionalOnMissingBean",
            "org.springframework.ai.autoconfigure.vectorstore.qdrant.vectorStor": "org.springframework.ai.autoconfigure.vectorstore.qdrant.vectorStor",
            "org.springframework.ai.autoconfigure.vectorstore.qdrant.getHost": "org.springframework.ai.autoconfigure.vectorstore.qdrant.getHost",
            "org.springframework.ai.autoconfigure.vectorstore.qdrant.getPort": "org.springframework.ai.autoconfigure.vectorstore.qdrant.getPort",
            "org.springframework.ai.autoconfigure.vectorstore.qdrant.properties": "org.springframework.ai.autoconfigure.vectorstore.qdrant.properties"
        },
        "package": "package org.springframework.ai.autoconfigure.vectorstore.qdrant;",
        "property_declarations": [
            "private final QdrantVectorStoreProperties properties;"
        ],
        "functions": [
            {
                "name": "ConditionalOnMissingBean",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new PropertiesQdrantConnectionDetails(properties);",
                "is_abstract": "",
                "class_name": "QdrantVectorStoreAutoConfiguration",
                "annotations": [
                    "@ConditionalOnMissingBean(QdrantConnectionDetails.class)"
                ]
            },
            {
                "name": "vectorStore",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var config = QdrantVectorStoreConfig.builder()\n\t\t\t.withCollectionName(properties.getCollectionName())\n\t\t\t.withHost(connectionDetails.getHost())\n\t\t\t.withPort(connectionDetails.getPort())\n\t\t\t.withTls(properties.isUseTls())\n\t\t\t.withApiKey(properties.getApiKey())\n\t\t\t.build();\n\n\t\treturn new QdrantVectorStore(config, embeddingClient);",
                "is_abstract": "",
                "class_name": "QdrantVectorStoreAutoConfiguration",
                "annotations": []
            },
            {
                "name": "getHost",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.properties.getHost();",
                "is_abstract": "",
                "class_name": "QdrantVectorStoreAutoConfiguration PropertiesQdrantConnectionDetails",
                "annotations": []
            },
            {
                "name": "getPort",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.properties.getPort();",
                "is_abstract": "",
                "class_name": "QdrantVectorStoreAutoConfiguration PropertiesQdrantConnectionDetails",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/qdrant/QdrantVectorStoreProperties.java",
        "class_names": [
            "QdrantVectorStoreProperties"
        ],
        "imports": "import org.springframework.boot.context.properties.ConfigurationProperties;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.vectorstore.qdrant.QdrantVectorStoreProperties": "org.springframework.ai.autoconfigure.vectorstore.qdrant.QdrantVectorStoreProperties",
            "org.springframework.ai.autoconfigure.vectorstore.qdrant.getCollectionNam": "org.springframework.ai.autoconfigure.vectorstore.qdrant.getCollectionNam",
            "org.springframework.ai.autoconfigure.vectorstore.qdrant.setCollectionNam": "org.springframework.ai.autoconfigure.vectorstore.qdrant.setCollectionNam",
            "org.springframework.ai.autoconfigure.vectorstore.qdrant.getHost": "org.springframework.ai.autoconfigure.vectorstore.qdrant.getHost",
            "org.springframework.ai.autoconfigure.vectorstore.qdrant.setHost": "org.springframework.ai.autoconfigure.vectorstore.qdrant.setHost",
            "org.springframework.ai.autoconfigure.vectorstore.qdrant.getPort": "org.springframework.ai.autoconfigure.vectorstore.qdrant.getPort",
            "org.springframework.ai.autoconfigure.vectorstore.qdrant.setPort": "org.springframework.ai.autoconfigure.vectorstore.qdrant.setPort",
            "org.springframework.ai.autoconfigure.vectorstore.qdrant.isUseTls": "org.springframework.ai.autoconfigure.vectorstore.qdrant.isUseTls",
            "org.springframework.ai.autoconfigure.vectorstore.qdrant.setUseTls": "org.springframework.ai.autoconfigure.vectorstore.qdrant.setUseTls",
            "org.springframework.ai.autoconfigure.vectorstore.qdrant.getApiKey": "org.springframework.ai.autoconfigure.vectorstore.qdrant.getApiKey",
            "org.springframework.ai.autoconfigure.vectorstore.qdrant.setApiKey": "org.springframework.ai.autoconfigure.vectorstore.qdrant.setApiKey",
            "org.springframework.ai.autoconfigure.vectorstore.qdrant.CONFIG_PREFIX": "org.springframework.ai.autoconfigure.vectorstore.qdrant.CONFIG_PREFIX",
            "org.springframework.ai.autoconfigure.vectorstore.qdrant.collectionNam": "org.springframework.ai.autoconfigure.vectorstore.qdrant.collectionNam",
            "org.springframework.ai.autoconfigure.vectorstore.qdrant.host": "org.springframework.ai.autoconfigure.vectorstore.qdrant.host",
            "org.springframework.ai.autoconfigure.vectorstore.qdrant.port": "org.springframework.ai.autoconfigure.vectorstore.qdrant.port",
            "org.springframework.ai.autoconfigure.vectorstore.qdrant.useTls": "org.springframework.ai.autoconfigure.vectorstore.qdrant.useTls",
            "org.springframework.ai.autoconfigure.vectorstore.qdrant.apiKey": "org.springframework.ai.autoconfigure.vectorstore.qdrant.apiKey"
        },
        "package": "package org.springframework.ai.autoconfigure.vectorstore.qdrant;",
        "property_declarations": [
            "private String apiKey = null;",
            "public static final String CONFIG_PREFIX = \"spring.ai.vectorstore.qdrant\";",
            "private boolean useTls = false;",
            "private String host = \"localhost\";",
            "private String collectionName;",
            "private int port = 6334;"
        ],
        "functions": [
            {
                "name": "getCollectionName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.collectionName;",
                "is_abstract": "",
                "class_name": "QdrantVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "setCollectionName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.collectionName = collectionName;",
                "is_abstract": "",
                "class_name": "QdrantVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "getHost",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.host;",
                "is_abstract": "",
                "class_name": "QdrantVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "setHost",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.host = host;",
                "is_abstract": "",
                "class_name": "QdrantVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "getPort",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.port;",
                "is_abstract": "",
                "class_name": "QdrantVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "setPort",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.port = port;",
                "is_abstract": "",
                "class_name": "QdrantVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "isUseTls",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.useTls;",
                "is_abstract": "",
                "class_name": "QdrantVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "setUseTls",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.useTls = useTls;",
                "is_abstract": "",
                "class_name": "QdrantVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "getApiKey",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.apiKey;",
                "is_abstract": "",
                "class_name": "QdrantVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "setApiKey",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.apiKey = apiKey;",
                "is_abstract": "",
                "class_name": "QdrantVectorStoreProperties",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/mongo/MongoDBAtlasVectorStoreAutoConfiguration.java",
        "class_names": [
            "MongoDBAtlasVectorStoreAutoConfiguration"
        ],
        "imports": "import org.springframework.ai.vectorstore.MongoDBAtlasVectorStore;\nimport org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.data.mongodb.core.MongoTemplate;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.util.StringUtils;\nimport org.springframework.ai.embedding.EmbeddingClient;\nimport org.springframework.boot.autoconfigure.AutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.vectorstore.mongo.MongoDBAtlasVectorStoreAutoConfiguration": "org.springframework.ai.autoconfigure.vectorstore.mongo.MongoDBAtlasVectorStoreAutoConfiguration",
            "org.springframework.ai.autoconfigure.vectorstore.mongo.vectorStor": "org.springframework.ai.autoconfigure.vectorstore.mongo.vectorStor"
        },
        "package": "package org.springframework.ai.autoconfigure.vectorstore.mongo;",
        "property_declarations": [],
        "functions": [
            {
                "name": "vectorStore",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var builder = MongoDBAtlasVectorStore.MongoDBVectorStoreConfig.builder();\n\n\t\tif (StringUtils.hasText(properties.getCollectionName())) {\n\t\t\tbuilder.withCollectionName(properties.getCollectionName());\n\t\t}\n\t\tif (StringUtils.hasText(properties.getPathName())) {\n\t\t\tbuilder.withPathName(properties.getPathName());\n\t\t}\n\t\tif (StringUtils.hasText(properties.getIndexName())) {\n\t\t\tbuilder.withVectorIndexName(properties.getIndexName());\n\t\t}\n\t\tMongoDBAtlasVectorStore.MongoDBVectorStoreConfig config = builder.build();\n\n\t\treturn new MongoDBAtlasVectorStore(mongoTemplate, embeddingClient, config);",
                "is_abstract": "",
                "class_name": "MongoDBAtlasVectorStoreAutoConfiguration",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/mongo/MongoDBAtlasVectorStoreProperties.java",
        "class_names": [
            "MongoDBAtlasVectorStoreProperties"
        ],
        "imports": "import org.springframework.boot.context.properties.ConfigurationProperties;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.vectorstore.mongo.MongoDBAtlasVectorStoreProperties": "org.springframework.ai.autoconfigure.vectorstore.mongo.MongoDBAtlasVectorStoreProperties",
            "org.springframework.ai.autoconfigure.vectorstore.mongo.getCollectionNam": "org.springframework.ai.autoconfigure.vectorstore.mongo.getCollectionNam",
            "org.springframework.ai.autoconfigure.vectorstore.mongo.setCollectionNam": "org.springframework.ai.autoconfigure.vectorstore.mongo.setCollectionNam",
            "org.springframework.ai.autoconfigure.vectorstore.mongo.getPathNam": "org.springframework.ai.autoconfigure.vectorstore.mongo.getPathNam",
            "org.springframework.ai.autoconfigure.vectorstore.mongo.setPathNam": "org.springframework.ai.autoconfigure.vectorstore.mongo.setPathNam",
            "org.springframework.ai.autoconfigure.vectorstore.mongo.getIndexNam": "org.springframework.ai.autoconfigure.vectorstore.mongo.getIndexNam",
            "org.springframework.ai.autoconfigure.vectorstore.mongo.setIndexNam": "org.springframework.ai.autoconfigure.vectorstore.mongo.setIndexNam",
            "org.springframework.ai.autoconfigure.vectorstore.mongo.CONFIG_PREFIX": "org.springframework.ai.autoconfigure.vectorstore.mongo.CONFIG_PREFIX",
            "org.springframework.ai.autoconfigure.vectorstore.mongo.collectionNam": "org.springframework.ai.autoconfigure.vectorstore.mongo.collectionNam",
            "org.springframework.ai.autoconfigure.vectorstore.mongo.pathNam": "org.springframework.ai.autoconfigure.vectorstore.mongo.pathNam",
            "org.springframework.ai.autoconfigure.vectorstore.mongo.indexNam": "org.springframework.ai.autoconfigure.vectorstore.mongo.indexNam"
        },
        "package": "package org.springframework.ai.autoconfigure.vectorstore.mongo;",
        "property_declarations": [
            "public static final String CONFIG_PREFIX = \"spring.ai.vectorstore.mongodb\";",
            "private String collectionName;",
            "private String indexName;",
            "private String pathName;"
        ],
        "functions": [
            {
                "name": "getCollectionName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.collectionName;",
                "is_abstract": "",
                "class_name": "MongoDBAtlasVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "setCollectionName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.collectionName = collectionName;",
                "is_abstract": "",
                "class_name": "MongoDBAtlasVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "getPathName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.pathName;",
                "is_abstract": "",
                "class_name": "MongoDBAtlasVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "setPathName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.pathName = pathName;",
                "is_abstract": "",
                "class_name": "MongoDBAtlasVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "getIndexName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.indexName;",
                "is_abstract": "",
                "class_name": "MongoDBAtlasVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "setIndexName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.indexName = indexName;",
                "is_abstract": "",
                "class_name": "MongoDBAtlasVectorStoreProperties",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/weaviate/WeaviateVectorStoreAutoConfiguration.java",
        "class_names": [
            "WeaviateVectorStoreAutoConfiguration",
            "PropertiesWeaviateConnectionDetails"
        ],
        "imports": "import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.ai.vectorstore.WeaviateVectorStore.WeaviateVectorStoreConfig;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.ai.vectorstore.WeaviateVectorStore;\nimport org.springframework.ai.vectorstore.WeaviateVectorStore.WeaviateVectorStoreConfig.MetadataField;\nimport org.springframework.ai.embedding.EmbeddingClient;\nimport org.springframework.boot.autoconfigure.AutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.vectorstore.weaviate.WeaviateVectorStoreAutoConfiguration": "org.springframework.ai.autoconfigure.vectorstore.weaviate.WeaviateVectorStoreAutoConfiguration",
            "org.springframework.ai.autoconfigure.vectorstore.weaviate.PropertiesWeaviateConnectionDetails": "org.springframework.ai.autoconfigure.vectorstore.weaviate.PropertiesWeaviateConnectionDetails",
            "org.springframework.ai.autoconfigure.vectorstore.weaviate.ConditionalOnMissingBean": "org.springframework.ai.autoconfigure.vectorstore.weaviate.ConditionalOnMissingBean",
            "org.springframework.ai.autoconfigure.vectorstore.weaviate.vectorStor": "org.springframework.ai.autoconfigure.vectorstore.weaviate.vectorStor",
            "org.springframework.ai.autoconfigure.vectorstore.weaviate.getHost": "org.springframework.ai.autoconfigure.vectorstore.weaviate.getHost",
            "org.springframework.ai.autoconfigure.vectorstore.weaviate.properties": "org.springframework.ai.autoconfigure.vectorstore.weaviate.properties"
        },
        "package": "package org.springframework.ai.autoconfigure.vectorstore.weaviate;",
        "property_declarations": [
            "private final WeaviateVectorStoreProperties properties;"
        ],
        "functions": [
            {
                "name": "ConditionalOnMissingBean",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new PropertiesWeaviateConnectionDetails(properties);",
                "is_abstract": "",
                "class_name": "WeaviateVectorStoreAutoConfiguration",
                "annotations": [
                    "@ConditionalOnMissingBean(WeaviateConnectionDetails.class)"
                ]
            },
            {
                "name": "vectorStore",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "WeaviateVectorStoreConfig.Builder configBuilder = WeaviateVectorStore.WeaviateVectorStoreConfig.builder()\n\t\t\t.withScheme(properties.getScheme())\n\t\t\t.withApiKey(properties.getApiKey())\n\t\t\t.withHost(connectionDetails.getHost())\n\t\t\t.withHeaders(properties.getHeaders())\n\t\t\t.withObjectClass(properties.getObjectClass())\n\t\t\t.withFilterableMetadataFields(properties.getFilterField()\n\t\t\t\t.entrySet()\n\t\t\t\t.stream()\n\t\t\t\t.map(e -> new MetadataField(e.getKey(), e.getValue()))\n\t\t\t\t.toList())\n\t\t\t.withConsistencyLevel(properties.getConsistencyLevel());\n\n\t\treturn new WeaviateVectorStore(configBuilder.build(), embeddingClient);",
                "is_abstract": "",
                "class_name": "WeaviateVectorStoreAutoConfiguration",
                "annotations": []
            },
            {
                "name": "getHost",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.properties.getHost();",
                "is_abstract": "",
                "class_name": "WeaviateVectorStoreAutoConfiguration PropertiesWeaviateConnectionDetails",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/weaviate/WeaviateConnectionDetails.java",
        "class_names": [],
        "imports": "import org.springframework.boot.autoconfigure.service.connection.ConnectionDetails;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.vectorstore.weaviate.getHost": "org.springframework.ai.autoconfigure.vectorstore.weaviate.getHost"
        },
        "package": "package org.springframework.ai.autoconfigure.vectorstore.weaviate;",
        "property_declarations": [],
        "functions": [
            {
                "name": "getHost",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/weaviate/WeaviateVectorStoreProperties.java",
        "class_names": [
            "WeaviateVectorStoreProperties"
        ],
        "imports": "import org.springframework.ai.vectorstore.WeaviateVectorStore.WeaviateVectorStoreConfig;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.ai.vectorstore.WeaviateVectorStore.WeaviateVectorStoreConfig.ConsistentLevel;\nimport java.util.Map;\nimport org.springframework.ai.vectorstore.WeaviateVectorStore.WeaviateVectorStoreConfig.MetadataField;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.vectorstore.weaviate.WeaviateVectorStoreProperties": "org.springframework.ai.autoconfigure.vectorstore.weaviate.WeaviateVectorStoreProperties",
            "org.springframework.ai.autoconfigure.vectorstore.weaviate.setSchem": "org.springframework.ai.autoconfigure.vectorstore.weaviate.setSchem",
            "org.springframework.ai.autoconfigure.vectorstore.weaviate.getSchem": "org.springframework.ai.autoconfigure.vectorstore.weaviate.getSchem",
            "org.springframework.ai.autoconfigure.vectorstore.weaviate.setHost": "org.springframework.ai.autoconfigure.vectorstore.weaviate.setHost",
            "org.springframework.ai.autoconfigure.vectorstore.weaviate.getHost": "org.springframework.ai.autoconfigure.vectorstore.weaviate.getHost",
            "org.springframework.ai.autoconfigure.vectorstore.weaviate.getApiKey": "org.springframework.ai.autoconfigure.vectorstore.weaviate.getApiKey",
            "org.springframework.ai.autoconfigure.vectorstore.weaviate.setApiKey": "org.springframework.ai.autoconfigure.vectorstore.weaviate.setApiKey",
            "org.springframework.ai.autoconfigure.vectorstore.weaviate.getObjectClass": "org.springframework.ai.autoconfigure.vectorstore.weaviate.getObjectClass",
            "org.springframework.ai.autoconfigure.vectorstore.weaviate.setObjectClass": "org.springframework.ai.autoconfigure.vectorstore.weaviate.setObjectClass",
            "org.springframework.ai.autoconfigure.vectorstore.weaviate.getConsistencyLevel": "org.springframework.ai.autoconfigure.vectorstore.weaviate.getConsistencyLevel",
            "org.springframework.ai.autoconfigure.vectorstore.weaviate.setConsistencyLevel": "org.springframework.ai.autoconfigure.vectorstore.weaviate.setConsistencyLevel",
            "org.springframework.ai.autoconfigure.vectorstore.weaviate.getHeaders": "org.springframework.ai.autoconfigure.vectorstore.weaviate.getHeaders",
            "org.springframework.ai.autoconfigure.vectorstore.weaviate.setHeaders": "org.springframework.ai.autoconfigure.vectorstore.weaviate.setHeaders",
            "org.springframework.ai.autoconfigure.vectorstore.weaviate.getFilterField": "org.springframework.ai.autoconfigure.vectorstore.weaviate.getFilterField",
            "org.springframework.ai.autoconfigure.vectorstore.weaviate.setFilterField": "org.springframework.ai.autoconfigure.vectorstore.weaviate.setFilterField",
            "org.springframework.ai.autoconfigure.vectorstore.weaviate.CONFIG_PREFIX": "org.springframework.ai.autoconfigure.vectorstore.weaviate.CONFIG_PREFIX",
            "org.springframework.ai.autoconfigure.vectorstore.weaviate.schem": "org.springframework.ai.autoconfigure.vectorstore.weaviate.schem",
            "org.springframework.ai.autoconfigure.vectorstore.weaviate.host": "org.springframework.ai.autoconfigure.vectorstore.weaviate.host",
            "org.springframework.ai.autoconfigure.vectorstore.weaviate.apiKey": "org.springframework.ai.autoconfigure.vectorstore.weaviate.apiKey",
            "org.springframework.ai.autoconfigure.vectorstore.weaviate.objectClass": "org.springframework.ai.autoconfigure.vectorstore.weaviate.objectClass",
            "org.springframework.ai.autoconfigure.vectorstore.weaviate.consistencyLevel": "org.springframework.ai.autoconfigure.vectorstore.weaviate.consistencyLevel",
            "org.springframework.ai.autoconfigure.vectorstore.weaviate.filterField": "org.springframework.ai.autoconfigure.vectorstore.weaviate.filterField",
            "org.springframework.ai.autoconfigure.vectorstore.weaviate.headers": "org.springframework.ai.autoconfigure.vectorstore.weaviate.headers"
        },
        "package": "package org.springframework.ai.autoconfigure.vectorstore.weaviate;",
        "property_declarations": [
            "private Map<String, String> headers = Map.of();",
            "public static final String CONFIG_PREFIX = \"spring.ai.vectorstore.weaviate\";",
            "private ConsistentLevel consistencyLevel = WeaviateVectorStoreConfig.ConsistentLevel.ONE;",
            "private String host = \"localhost:8080\";",
            "private String scheme = \"http\";",
            "private String apiKey = \"\";",
            "private String objectClass = \"SpringAiWeaviate\";",
            "private Map<String, MetadataField.Type> filterField = Map.of();"
        ],
        "functions": [
            {
                "name": "setScheme",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.scheme = scheme;",
                "is_abstract": "",
                "class_name": "WeaviateVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "getScheme",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return scheme;",
                "is_abstract": "",
                "class_name": "WeaviateVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "setHost",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.host = host;",
                "is_abstract": "",
                "class_name": "WeaviateVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "getHost",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return host;",
                "is_abstract": "",
                "class_name": "WeaviateVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "getApiKey",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return apiKey;",
                "is_abstract": "",
                "class_name": "WeaviateVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "setApiKey",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.apiKey = apiKey;",
                "is_abstract": "",
                "class_name": "WeaviateVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "getObjectClass",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return objectClass;",
                "is_abstract": "",
                "class_name": "WeaviateVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "setObjectClass",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.objectClass = indexName;",
                "is_abstract": "",
                "class_name": "WeaviateVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "getConsistencyLevel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return consistencyLevel;",
                "is_abstract": "",
                "class_name": "WeaviateVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "setConsistencyLevel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.consistencyLevel = consistencyLevel;",
                "is_abstract": "",
                "class_name": "WeaviateVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "getHeaders",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return headers;",
                "is_abstract": "",
                "class_name": "WeaviateVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "setHeaders",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.headers = headers;",
                "is_abstract": "",
                "class_name": "WeaviateVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "getFilterField",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return filterField;",
                "is_abstract": "",
                "class_name": "WeaviateVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "setFilterField",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.filterField = filterMetadataFields;",
                "is_abstract": "",
                "class_name": "WeaviateVectorStoreProperties",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/elasticsearch/ElasticsearchVectorStoreAutoConfiguration.java",
        "class_names": [
            "ElasticsearchVectorStoreAutoConfiguration"
        ],
        "imports": "import org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchRestClientAutoConfiguration;\nimport org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchClientAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.ai.vectorstore.ElasticsearchVectorStore;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.elasticsearch.client.RestClient;\nimport org.springframework.util.StringUtils;\nimport org.springframework.ai.embedding.EmbeddingClient;\nimport org.springframework.boot.autoconfigure.AutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.vectorstore.elasticsearch.ElasticsearchVectorStoreAutoConfiguration": "org.springframework.ai.autoconfigure.vectorstore.elasticsearch.ElasticsearchVectorStoreAutoConfiguration",
            "org.springframework.ai.autoconfigure.vectorstore.elasticsearch.vectorStor": "org.springframework.ai.autoconfigure.vectorstore.elasticsearch.vectorStor"
        },
        "package": "package org.springframework.ai.autoconfigure.vectorstore.elasticsearch;",
        "property_declarations": [],
        "functions": [
            {
                "name": "vectorStore",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (StringUtils.hasText(properties.getIndexName())) {\n\t\t\treturn new ElasticsearchVectorStore(properties.getIndexName(), restClient, embeddingClient);\n\t\t}\n\t\treturn new ElasticsearchVectorStore(restClient, embeddingClient);",
                "is_abstract": "",
                "class_name": "ElasticsearchVectorStoreAutoConfiguration",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/elasticsearch/ElasticsearchVectorStoreProperties.java",
        "class_names": [
            "ElasticsearchVectorStoreProperties"
        ],
        "imports": "import org.springframework.boot.context.properties.ConfigurationProperties;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.vectorstore.elasticsearch.ElasticsearchVectorStoreProperties": "org.springframework.ai.autoconfigure.vectorstore.elasticsearch.ElasticsearchVectorStoreProperties",
            "org.springframework.ai.autoconfigure.vectorstore.elasticsearch.getIndexNam": "org.springframework.ai.autoconfigure.vectorstore.elasticsearch.getIndexNam",
            "org.springframework.ai.autoconfigure.vectorstore.elasticsearch.setIndexNam": "org.springframework.ai.autoconfigure.vectorstore.elasticsearch.setIndexNam",
            "org.springframework.ai.autoconfigure.vectorstore.elasticsearch.indexNam": "org.springframework.ai.autoconfigure.vectorstore.elasticsearch.indexNam"
        },
        "package": "package org.springframework.ai.autoconfigure.vectorstore.elasticsearch;",
        "property_declarations": [
            "private String indexName;"
        ],
        "functions": [
            {
                "name": "getIndexName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.indexName;",
                "is_abstract": "",
                "class_name": "ElasticsearchVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "setIndexName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.indexName = indexName;",
                "is_abstract": "",
                "class_name": "ElasticsearchVectorStoreProperties",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/milvus/MilvusVectorStoreProperties.java",
        "class_names": [
            "MilvusVectorStoreProperties"
        ],
        "imports": "import org.springframework.ai.vectorstore.MilvusVectorStore;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.util.Assert;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.vectorstore.milvus.MilvusVectorStoreProperties": "org.springframework.ai.autoconfigure.vectorstore.milvus.MilvusVectorStoreProperties",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.getDatabaseNam": "org.springframework.ai.autoconfigure.vectorstore.milvus.getDatabaseNam",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.setDatabaseNam": "org.springframework.ai.autoconfigure.vectorstore.milvus.setDatabaseNam",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.getCollectionNam": "org.springframework.ai.autoconfigure.vectorstore.milvus.getCollectionNam",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.setCollectionNam": "org.springframework.ai.autoconfigure.vectorstore.milvus.setCollectionNam",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.getEmbeddingDimension": "org.springframework.ai.autoconfigure.vectorstore.milvus.getEmbeddingDimension",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.setEmbeddingDimension": "org.springframework.ai.autoconfigure.vectorstore.milvus.setEmbeddingDimension",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.getIndexTy": "org.springframework.ai.autoconfigure.vectorstore.milvus.getIndexTy",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.setIndexTy": "org.springframework.ai.autoconfigure.vectorstore.milvus.setIndexTy",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.getMetricTy": "org.springframework.ai.autoconfigure.vectorstore.milvus.getMetricTy",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.setMetricTy": "org.springframework.ai.autoconfigure.vectorstore.milvus.setMetricTy",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.getIndexParameters": "org.springframework.ai.autoconfigure.vectorstore.milvus.getIndexParameters",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.setIndexParameters": "org.springframework.ai.autoconfigure.vectorstore.milvus.setIndexParameters",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.CONFIG_PREFIX": "org.springframework.ai.autoconfigure.vectorstore.milvus.CONFIG_PREFIX",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.databaseNam": "org.springframework.ai.autoconfigure.vectorstore.milvus.databaseNam",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.collectionNam": "org.springframework.ai.autoconfigure.vectorstore.milvus.collectionNam",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.embeddingDimension": "org.springframework.ai.autoconfigure.vectorstore.milvus.embeddingDimension",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.indexTy": "org.springframework.ai.autoconfigure.vectorstore.milvus.indexTy",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.metricTy": "org.springframework.ai.autoconfigure.vectorstore.milvus.metricTy",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.indexParameters": "org.springframework.ai.autoconfigure.vectorstore.milvus.indexParameters"
        },
        "package": "package org.springframework.ai.autoconfigure.vectorstore.milvus;",
        "property_declarations": [
            "private String databaseName = MilvusVectorStore.DEFAULT_DATABASE_NAME;",
            "private MilvusIndexType indexType = MilvusIndexType.IVF_FLAT;",
            "private String indexParameters = \"{\\\"nlist\\\":1024}\";",
            "private String collectionName = MilvusVectorStore.DEFAULT_COLLECTION_NAME;",
            "private MilvusMetricType metricType = MilvusMetricType.COSINE;",
            "public static final String CONFIG_PREFIX = \"spring.ai.vectorstore.milvus\";",
            "private int embeddingDimension = MilvusVectorStore.OPENAI_EMBEDDING_DIMENSION_SIZE;"
        ],
        "functions": [
            {
                "name": "getDatabaseName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return databaseName;",
                "is_abstract": "",
                "class_name": "MilvusVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "setDatabaseName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.hasText(databaseName, \"Database name should not be empty.\");\n\t\tthis.databaseName = databaseName;",
                "is_abstract": "",
                "class_name": "MilvusVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "getCollectionName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return collectionName;",
                "is_abstract": "",
                "class_name": "MilvusVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "setCollectionName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.hasText(collectionName, \"Collection name should not be empty.\");\n\t\tthis.collectionName = collectionName;",
                "is_abstract": "",
                "class_name": "MilvusVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "getEmbeddingDimension",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return embeddingDimension;",
                "is_abstract": "",
                "class_name": "MilvusVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "setEmbeddingDimension",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.isTrue(embeddingDimension > 0, \"Embedding dimension should be a positive value.\");\n\t\tthis.embeddingDimension = embeddingDimension;",
                "is_abstract": "",
                "class_name": "MilvusVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "getIndexType",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return indexType;",
                "is_abstract": "",
                "class_name": "MilvusVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "setIndexType",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(indexType, \"Index type can not be null\");\n\t\tthis.indexType = indexType;",
                "is_abstract": "",
                "class_name": "MilvusVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "getMetricType",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return metricType;",
                "is_abstract": "",
                "class_name": "MilvusVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "setMetricType",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(metricType, \"MetricType can not be null\");\n\t\tthis.metricType = metricType;",
                "is_abstract": "",
                "class_name": "MilvusVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "getIndexParameters",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return indexParameters;",
                "is_abstract": "",
                "class_name": "MilvusVectorStoreProperties",
                "annotations": []
            },
            {
                "name": "setIndexParameters",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(indexParameters, \"indexParameters can not be null\");\n\t\tthis.indexParameters = indexParameters;",
                "is_abstract": "",
                "class_name": "MilvusVectorStoreProperties",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/milvus/MilvusServiceClientProperties.java",
        "class_names": [
            "MilvusServiceClientProperties"
        ],
        "imports": "import org.springframework.boot.context.properties.ConfigurationProperties;\nimport java.util.concurrent.TimeUnit;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.vectorstore.milvus.MilvusServiceClientProperties": "org.springframework.ai.autoconfigure.vectorstore.milvus.MilvusServiceClientProperties",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.getHost": "org.springframework.ai.autoconfigure.vectorstore.milvus.getHost",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.setHost": "org.springframework.ai.autoconfigure.vectorstore.milvus.setHost",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.getPort": "org.springframework.ai.autoconfigure.vectorstore.milvus.getPort",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.setPort": "org.springframework.ai.autoconfigure.vectorstore.milvus.setPort",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.getUri": "org.springframework.ai.autoconfigure.vectorstore.milvus.getUri",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.setUri": "org.springframework.ai.autoconfigure.vectorstore.milvus.setUri",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.getToken": "org.springframework.ai.autoconfigure.vectorstore.milvus.getToken",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.setToken": "org.springframework.ai.autoconfigure.vectorstore.milvus.setToken",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.getConnectTimeoutMs": "org.springframework.ai.autoconfigure.vectorstore.milvus.getConnectTimeoutMs",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.setConnectTimeoutMs": "org.springframework.ai.autoconfigure.vectorstore.milvus.setConnectTimeoutMs",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.getKeepAliveTimeMs": "org.springframework.ai.autoconfigure.vectorstore.milvus.getKeepAliveTimeMs",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.setKeepAliveTimeMs": "org.springframework.ai.autoconfigure.vectorstore.milvus.setKeepAliveTimeMs",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.getKeepAliveTimeoutMs": "org.springframework.ai.autoconfigure.vectorstore.milvus.getKeepAliveTimeoutMs",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.setKeepAliveTimeoutMs": "org.springframework.ai.autoconfigure.vectorstore.milvus.setKeepAliveTimeoutMs",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.getRpcDeadlineMs": "org.springframework.ai.autoconfigure.vectorstore.milvus.getRpcDeadlineMs",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.setRpcDeadlineMs": "org.springframework.ai.autoconfigure.vectorstore.milvus.setRpcDeadlineMs",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.getClientKeyPath": "org.springframework.ai.autoconfigure.vectorstore.milvus.getClientKeyPath",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.setClientKeyPath": "org.springframework.ai.autoconfigure.vectorstore.milvus.setClientKeyPath",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.getClientPemPath": "org.springframework.ai.autoconfigure.vectorstore.milvus.getClientPemPath",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.setClientPemPath": "org.springframework.ai.autoconfigure.vectorstore.milvus.setClientPemPath",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.getCaPemPath": "org.springframework.ai.autoconfigure.vectorstore.milvus.getCaPemPath",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.setCaPemPath": "org.springframework.ai.autoconfigure.vectorstore.milvus.setCaPemPath",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.getServerPemPath": "org.springframework.ai.autoconfigure.vectorstore.milvus.getServerPemPath",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.setServerPemPath": "org.springframework.ai.autoconfigure.vectorstore.milvus.setServerPemPath",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.getServerNam": "org.springframework.ai.autoconfigure.vectorstore.milvus.getServerNam",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.setServerNam": "org.springframework.ai.autoconfigure.vectorstore.milvus.setServerNam",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.isSecur": "org.springframework.ai.autoconfigure.vectorstore.milvus.isSecur",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.setSecur": "org.springframework.ai.autoconfigure.vectorstore.milvus.setSecur",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.getIdleTimeoutMs": "org.springframework.ai.autoconfigure.vectorstore.milvus.getIdleTimeoutMs",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.setIdleTimeoutMs": "org.springframework.ai.autoconfigure.vectorstore.milvus.setIdleTimeoutMs",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.getUsernam": "org.springframework.ai.autoconfigure.vectorstore.milvus.getUsernam",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.setUsernam": "org.springframework.ai.autoconfigure.vectorstore.milvus.setUsernam",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.getPassword": "org.springframework.ai.autoconfigure.vectorstore.milvus.getPassword",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.setPassword": "org.springframework.ai.autoconfigure.vectorstore.milvus.setPassword",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.CONFIG_PREFIX": "org.springframework.ai.autoconfigure.vectorstore.milvus.CONFIG_PREFIX",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.host": "org.springframework.ai.autoconfigure.vectorstore.milvus.host",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.port": "org.springframework.ai.autoconfigure.vectorstore.milvus.port",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.uri": "org.springframework.ai.autoconfigure.vectorstore.milvus.uri",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.token": "org.springframework.ai.autoconfigure.vectorstore.milvus.token",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.connectTimeoutMs": "org.springframework.ai.autoconfigure.vectorstore.milvus.connectTimeoutMs",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.keepAliveTimeMs": "org.springframework.ai.autoconfigure.vectorstore.milvus.keepAliveTimeMs",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.keepAliveTimeoutMs": "org.springframework.ai.autoconfigure.vectorstore.milvus.keepAliveTimeoutMs",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.rpcDeadlineMs": "org.springframework.ai.autoconfigure.vectorstore.milvus.rpcDeadlineMs",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.clientKeyPath": "org.springframework.ai.autoconfigure.vectorstore.milvus.clientKeyPath",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.clientPemPath": "org.springframework.ai.autoconfigure.vectorstore.milvus.clientPemPath",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.caPemPath": "org.springframework.ai.autoconfigure.vectorstore.milvus.caPemPath",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.serverPemPath": "org.springframework.ai.autoconfigure.vectorstore.milvus.serverPemPath",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.serverNam": "org.springframework.ai.autoconfigure.vectorstore.milvus.serverNam",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.secur": "org.springframework.ai.autoconfigure.vectorstore.milvus.secur",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.idleTimeoutMs": "org.springframework.ai.autoconfigure.vectorstore.milvus.idleTimeoutMs",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.usernam": "org.springframework.ai.autoconfigure.vectorstore.milvus.usernam",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.password": "org.springframework.ai.autoconfigure.vectorstore.milvus.password"
        },
        "package": "package org.springframework.ai.autoconfigure.vectorstore.milvus;",
        "property_declarations": [
            "private long rpcDeadlineMs = 0;",
            "private String uri;",
            "private String clientPemPath;",
            "private String username = \"root\";",
            "public static final String CONFIG_PREFIX = \"spring.ai.vectorstore.milvus.client\";",
            "private String caPemPath;",
            "private String host = \"localhost\";",
            "private String serverName;",
            "private long keepAliveTimeoutMs = 20000;",
            "private String token;",
            "private String clientKeyPath;",
            "private int port = 19530;",
            "private String serverPemPath;",
            "protected boolean secure = false;",
            "private long connectTimeoutMs = 10000;",
            "private long keepAliveTimeMs = 55000;",
            "private long idleTimeoutMs = TimeUnit.MILLISECONDS.convert(24, TimeUnit.HOURS);",
            "private String password = \"milvus\";"
        ],
        "functions": [
            {
                "name": "getHost",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return host;",
                "is_abstract": "",
                "class_name": "MilvusServiceClientProperties",
                "annotations": []
            },
            {
                "name": "setHost",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.host = host;",
                "is_abstract": "",
                "class_name": "MilvusServiceClientProperties",
                "annotations": []
            },
            {
                "name": "getPort",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return port;",
                "is_abstract": "",
                "class_name": "MilvusServiceClientProperties",
                "annotations": []
            },
            {
                "name": "setPort",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.port = port;",
                "is_abstract": "",
                "class_name": "MilvusServiceClientProperties",
                "annotations": []
            },
            {
                "name": "getUri",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return uri;",
                "is_abstract": "",
                "class_name": "MilvusServiceClientProperties",
                "annotations": []
            },
            {
                "name": "setUri",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.uri = uri;",
                "is_abstract": "",
                "class_name": "MilvusServiceClientProperties",
                "annotations": []
            },
            {
                "name": "getToken",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return token;",
                "is_abstract": "",
                "class_name": "MilvusServiceClientProperties",
                "annotations": []
            },
            {
                "name": "setToken",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.token = token;",
                "is_abstract": "",
                "class_name": "MilvusServiceClientProperties",
                "annotations": []
            },
            {
                "name": "getConnectTimeoutMs",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return connectTimeoutMs;",
                "is_abstract": "",
                "class_name": "MilvusServiceClientProperties",
                "annotations": []
            },
            {
                "name": "setConnectTimeoutMs",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.connectTimeoutMs = connectTimeoutMs;",
                "is_abstract": "",
                "class_name": "MilvusServiceClientProperties",
                "annotations": []
            },
            {
                "name": "getKeepAliveTimeMs",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return keepAliveTimeMs;",
                "is_abstract": "",
                "class_name": "MilvusServiceClientProperties",
                "annotations": []
            },
            {
                "name": "setKeepAliveTimeMs",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.keepAliveTimeMs = keepAliveTimeMs;",
                "is_abstract": "",
                "class_name": "MilvusServiceClientProperties",
                "annotations": []
            },
            {
                "name": "getKeepAliveTimeoutMs",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return keepAliveTimeoutMs;",
                "is_abstract": "",
                "class_name": "MilvusServiceClientProperties",
                "annotations": []
            },
            {
                "name": "setKeepAliveTimeoutMs",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.keepAliveTimeoutMs = keepAliveTimeoutMs;",
                "is_abstract": "",
                "class_name": "MilvusServiceClientProperties",
                "annotations": []
            },
            {
                "name": "getRpcDeadlineMs",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return rpcDeadlineMs;",
                "is_abstract": "",
                "class_name": "MilvusServiceClientProperties",
                "annotations": []
            },
            {
                "name": "setRpcDeadlineMs",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.rpcDeadlineMs = rpcDeadlineMs;",
                "is_abstract": "",
                "class_name": "MilvusServiceClientProperties",
                "annotations": []
            },
            {
                "name": "getClientKeyPath",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return clientKeyPath;",
                "is_abstract": "",
                "class_name": "MilvusServiceClientProperties",
                "annotations": []
            },
            {
                "name": "setClientKeyPath",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.clientKeyPath = clientKeyPath;",
                "is_abstract": "",
                "class_name": "MilvusServiceClientProperties",
                "annotations": []
            },
            {
                "name": "getClientPemPath",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return clientPemPath;",
                "is_abstract": "",
                "class_name": "MilvusServiceClientProperties",
                "annotations": []
            },
            {
                "name": "setClientPemPath",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.clientPemPath = clientPemPath;",
                "is_abstract": "",
                "class_name": "MilvusServiceClientProperties",
                "annotations": []
            },
            {
                "name": "getCaPemPath",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return caPemPath;",
                "is_abstract": "",
                "class_name": "MilvusServiceClientProperties",
                "annotations": []
            },
            {
                "name": "setCaPemPath",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.caPemPath = caPemPath;",
                "is_abstract": "",
                "class_name": "MilvusServiceClientProperties",
                "annotations": []
            },
            {
                "name": "getServerPemPath",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return serverPemPath;",
                "is_abstract": "",
                "class_name": "MilvusServiceClientProperties",
                "annotations": []
            },
            {
                "name": "setServerPemPath",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.serverPemPath = serverPemPath;",
                "is_abstract": "",
                "class_name": "MilvusServiceClientProperties",
                "annotations": []
            },
            {
                "name": "getServerName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return serverName;",
                "is_abstract": "",
                "class_name": "MilvusServiceClientProperties",
                "annotations": []
            },
            {
                "name": "setServerName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.serverName = serverName;",
                "is_abstract": "",
                "class_name": "MilvusServiceClientProperties",
                "annotations": []
            },
            {
                "name": "isSecure",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return secure;",
                "is_abstract": "",
                "class_name": "MilvusServiceClientProperties",
                "annotations": []
            },
            {
                "name": "setSecure",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.secure = secure;",
                "is_abstract": "",
                "class_name": "MilvusServiceClientProperties",
                "annotations": []
            },
            {
                "name": "getIdleTimeoutMs",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return idleTimeoutMs;",
                "is_abstract": "",
                "class_name": "MilvusServiceClientProperties",
                "annotations": []
            },
            {
                "name": "setIdleTimeoutMs",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.idleTimeoutMs = idleTimeoutMs;",
                "is_abstract": "",
                "class_name": "MilvusServiceClientProperties",
                "annotations": []
            },
            {
                "name": "getUsername",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return username;",
                "is_abstract": "",
                "class_name": "MilvusServiceClientProperties",
                "annotations": []
            },
            {
                "name": "setUsername",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.username = username;",
                "is_abstract": "",
                "class_name": "MilvusServiceClientProperties",
                "annotations": []
            },
            {
                "name": "getPassword",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return password;",
                "is_abstract": "",
                "class_name": "MilvusServiceClientProperties",
                "annotations": []
            },
            {
                "name": "setPassword",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.password = password;",
                "is_abstract": "",
                "class_name": "MilvusServiceClientProperties",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/milvus/MilvusServiceClientConnectionDetails.java",
        "class_names": [],
        "imports": "import org.springframework.boot.autoconfigure.service.connection.ConnectionDetails;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.vectorstore.milvus.getHost": "org.springframework.ai.autoconfigure.vectorstore.milvus.getHost",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.getPort": "org.springframework.ai.autoconfigure.vectorstore.milvus.getPort"
        },
        "package": "package org.springframework.ai.autoconfigure.vectorstore.milvus;",
        "property_declarations": [],
        "functions": [
            {
                "name": "getHost",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            },
            {
                "name": "getPort",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/milvus/MilvusVectorStoreAutoConfiguration.java",
        "class_names": [
            "MilvusVectorStoreAutoConfiguration",
            "PropertiesMilvusServiceClientConnectionDetails"
        ],
        "imports": "import java.util.concurrent.TimeUnit;\nimport org.springframework.util.StringUtils;\nimport io.milvus.param.MetricType;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.context.annotation.Bean;\nimport io.milvus.param.ConnectParam;\nimport io.milvus.param.IndexType;\nimport org.springframework.ai.vectorstore.MilvusVectorStore.MilvusVectorStoreConfig;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport io.milvus.client.MilvusServiceClient;\nimport org.springframework.ai.vectorstore.MilvusVectorStore;\nimport org.springframework.ai.embedding.EmbeddingClient;\nimport org.springframework.boot.autoconfigure.AutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;",
        "package_import_paths": {
            "org.springframework.ai.autoconfigure.vectorstore.milvus.MilvusVectorStoreAutoConfiguration": "org.springframework.ai.autoconfigure.vectorstore.milvus.MilvusVectorStoreAutoConfiguration",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.PropertiesMilvusServiceClientConnectionDetails": "org.springframework.ai.autoconfigure.vectorstore.milvus.PropertiesMilvusServiceClientConnectionDetails",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.ConditionalOnMissingBean": "org.springframework.ai.autoconfigure.vectorstore.milvus.ConditionalOnMissingBean",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.vectorStor": "org.springframework.ai.autoconfigure.vectorstore.milvus.vectorStor",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.milvusClient": "org.springframework.ai.autoconfigure.vectorstore.milvus.milvusClient",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.getHost": "org.springframework.ai.autoconfigure.vectorstore.milvus.getHost",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.getPort": "org.springframework.ai.autoconfigure.vectorstore.milvus.getPort",
            "org.springframework.ai.autoconfigure.vectorstore.milvus.properties": "org.springframework.ai.autoconfigure.vectorstore.milvus.properties"
        },
        "package": "package org.springframework.ai.autoconfigure.vectorstore.milvus;",
        "property_declarations": [
            "private final MilvusServiceClientProperties properties;"
        ],
        "functions": [
            {
                "name": "ConditionalOnMissingBean",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new PropertiesMilvusServiceClientConnectionDetails(properties);",
                "is_abstract": "",
                "class_name": "MilvusVectorStoreAutoConfiguration",
                "annotations": [
                    "@ConditionalOnMissingBean(MilvusServiceClientConnectionDetails.class)"
                ]
            },
            {
                "name": "vectorStore",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "MilvusVectorStoreConfig config = MilvusVectorStoreConfig.builder()\n\t\t\t.withCollectionName(properties.getCollectionName())\n\t\t\t.withDatabaseName(properties.getDatabaseName())\n\t\t\t.withIndexType(IndexType.valueOf(properties.getIndexType().name()))\n\t\t\t.withMetricType(MetricType.valueOf(properties.getMetricType().name()))\n\t\t\t.withIndexParameters(properties.getIndexParameters())\n\t\t\t.withEmbeddingDimension(properties.getEmbeddingDimension())\n\t\t\t.build();\n\n\t\treturn new MilvusVectorStore(milvusClient, embeddingClient, config);",
                "is_abstract": "",
                "class_name": "MilvusVectorStoreAutoConfiguration",
                "annotations": []
            },
            {
                "name": "milvusClient",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var builder = ConnectParam.newBuilder()\n\t\t\t.withHost(connectionDetails.getHost())\n\t\t\t.withPort(connectionDetails.getPort())\n\t\t\t.withDatabaseName(serverProperties.getDatabaseName())\n\t\t\t.withConnectTimeout(clientProperties.getConnectTimeoutMs(), TimeUnit.MILLISECONDS)\n\t\t\t.withKeepAliveTime(clientProperties.getKeepAliveTimeMs(), TimeUnit.MILLISECONDS)\n\t\t\t.withKeepAliveTimeout(clientProperties.getKeepAliveTimeoutMs(), TimeUnit.MILLISECONDS)\n\t\t\t.withRpcDeadline(clientProperties.getRpcDeadlineMs(), TimeUnit.MILLISECONDS)\n\t\t\t.withSecure(clientProperties.isSecure())\n\t\t\t.withIdleTimeout(clientProperties.getIdleTimeoutMs(), TimeUnit.MILLISECONDS)\n\t\t\t.withAuthorization(clientProperties.getUsername(), clientProperties.getPassword());\n\n\t\tif (clientProperties.isSecure() && StringUtils.hasText(clientProperties.getUri())) {\n\t\t\tbuilder.withUri(clientProperties.getUri());\n\t\t}\n\n\t\tif (clientProperties.isSecure() && StringUtils.hasText(clientProperties.getToken())) {\n\t\t\tbuilder.withToken(clientProperties.getToken());\n\t\t}\n\n\t\tif (clientProperties.isSecure() && StringUtils.hasText(clientProperties.getClientKeyPath())) {\n\t\t\tbuilder.withClientKeyPath(clientProperties.getClientKeyPath());\n\t\t}\n\n\t\tif (clientProperties.isSecure() && StringUtils.hasText(clientProperties.getClientPemPath())) {\n\t\t\tbuilder.withClientPemPath(clientProperties.getClientPemPath());\n\t\t}\n\n\t\tif (clientProperties.isSecure() && StringUtils.hasText(clientProperties.getCaPemPath())) {\n\t\t\tbuilder.withCaPemPath(clientProperties.getCaPemPath());\n\t\t}\n\n\t\tif (clientProperties.isSecure() && StringUtils.hasText(clientProperties.getServerPemPath())) {\n\t\t\tbuilder.withServerPemPath(clientProperties.getServerPemPath());\n\t\t}\n\n\t\tif (clientProperties.isSecure() && StringUtils.hasText(clientProperties.getServerName())) {\n\t\t\tbuilder.withServerName(clientProperties.getServerName());\n\t\t}\n\n\t\treturn new MilvusServiceClient(builder.build());",
                "is_abstract": "",
                "class_name": "MilvusVectorStoreAutoConfiguration",
                "annotations": []
            },
            {
                "name": "getHost",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.properties.getHost();",
                "is_abstract": "",
                "class_name": "MilvusVectorStoreAutoConfiguration PropertiesMilvusServiceClientConnectionDetails",
                "annotations": []
            },
            {
                "name": "getPort",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.properties.getPort();",
                "is_abstract": "",
                "class_name": "MilvusVectorStoreAutoConfiguration PropertiesMilvusServiceClientConnectionDetails",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-retry/src/main/java/org/springframework/ai/retry/NonTransientAiException.java",
        "class_names": [
            "NonTransientAiException"
        ],
        "imports": "",
        "package_import_paths": {
            "org.springframework.ai.retry.NonTransientAiException": "org.springframework.ai.retry.NonTransientAiException"
        },
        "package": "package org.springframework.ai.retry;",
        "property_declarations": [],
        "functions": []
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-retry/src/main/java/org/springframework/ai/retry/RetryUtils.java",
        "class_names": [
            "RetryUtils"
        ],
        "imports": "import org.springframework.util.StreamUtils;\nimport org.springframework.retry.support.RetryTemplate;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.retry.RetryListener;\nimport org.slf4j.Logger;\nimport org.springframework.retry.RetryCallback;\nimport org.springframework.web.client.ResponseErrorHandler;\nimport org.springframework.lang.NonNull;\nimport java.nio.charset.StandardCharsets;\nimport org.springframework.http.client.ClientHttpResponse;\nimport org.springframework.retry.RetryContext;\nimport java.time.Duration;\nimport java.io.IOException;",
        "package_import_paths": {
            "org.springframework.ai.retry.RetryUtils": "org.springframework.ai.retry.RetryUtils",
            "org.springframework.ai.retry.onError": "org.springframework.ai.retry.onError",
            "org.springframework.ai.retry.hasError": "org.springframework.ai.retry.hasError",
            "org.springframework.ai.retry.handleError": "org.springframework.ai.retry.handleError",
            "org.springframework.ai.retry.logger": "org.springframework.ai.retry.logger",
            "org.springframework.ai.retry.DEFAULT_RETRY_TEMPLATE": "org.springframework.ai.retry.DEFAULT_RETRY_TEMPLATE",
            "org.springframework.ai.retry.DEFAULT_RESPONSE_ERROR_HANDLER": "org.springframework.ai.retry.DEFAULT_RESPONSE_ERROR_HANDLER"
        },
        "package": "package org.springframework.ai.retry;",
        "property_declarations": [
            "private static final Logger logger = LoggerFactory.getLogger(RetryUtils.class);",
            "public static final ResponseErrorHandler DEFAULT_RESPONSE_ERROR_HANDLER = new ResponseErrorHandler() {\n\n\t\t@Override\n\t\tpublic boolean hasError(@NonNull ClientHttpResponse response) throws IOException {\n\t\t\treturn response.getStatusCode().isError();\n\t\t}\n\n\t\t@Override\n\t\tpublic void handleError(@NonNull ClientHttpResponse response) throws IOException {\n\t\t\tif (response.getStatusCode().isError()) {\n\t\t\t\tString error = StreamUtils.copyToString(response.getBody(), StandardCharsets.UTF_8);\n\t\t\t\tString message = String.format(\"%s - %s\", response.getStatusCode().value(), error);\n\t\t\t\t/**\n\t\t\t\t * Thrown on 4xx client errors, such as 401 - Incorrect API key provided,\n\t\t\t\t * 401 - You must be a member of an organization to use the API, 429 -\n\t\t\t\t * Rate limit reached for requests, 429 - You exceeded your current quota\n\t\t\t\t * , please check your plan and billing details.\n\t\t\t\t */\n\t\t\t\tif (response.getStatusCode().is4xxClientError()) {\n\t\t\t\t\tthrow new NonTransientAiException(message);\n\t\t\t\t}\n\t\t\t\tthrow new TransientAiException(message);\n\t\t\t}\n\t\t}\n\t};",
            "public static final RetryTemplate DEFAULT_RETRY_TEMPLATE = RetryTemplate.builder()\n\t\t.maxAttempts(10)\n\t\t.retryOn(TransientAiException.class)\n\t\t.exponentialBackoff(Duration.ofMillis(2000), 5, Duration.ofMillis(3 * 60000))\n\t\t.withListener(new RetryListener() {\n\t\t\t@Override\n\t\t\tpublic <T extends Object, E extends Throwable> void onError(RetryContext context,\n\t\t\t\t\tRetryCallback<T, E> callback, Throwable throwable) {\n\t\t\t\tlogger.warn(\"Retry error. Retry count:\" + context.getRetryCount(), throwable);\n\t\t\t};\n\t\t})\n\t\t.build();"
        ],
        "functions": [
            {
                "name": "onError",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "logger.warn(\"Retry error. Retry count:\" + context.getRetryCount(), throwable);",
                "is_abstract": "",
                "class_name": "RetryUtils",
                "annotations": []
            },
            {
                "name": "hasError",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return response.getStatusCode().isError();",
                "is_abstract": "",
                "class_name": "RetryUtils",
                "annotations": []
            },
            {
                "name": "handleError",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (response.getStatusCode().isError()) {\n\t\t\t\tString error = StreamUtils.copyToString(response.getBody(), StandardCharsets.UTF_8);\n\t\t\t\tString message = String.format(\"%s - %s\", response.getStatusCode().value(), error);\n\t\t\t\t/**\n\t\t\t\t * Thrown on 4xx client errors, such as 401 - Incorrect API key provided,\n\t\t\t\t * 401 - You must be a member of an organization to use the API, 429 -\n\t\t\t\t * Rate limit reached for requests, 429 - You exceeded your current quota\n\t\t\t\t * , please check your plan and billing details.\n\t\t\t\t */\n\t\t\t\tif (response.getStatusCode().is4xxClientError()) {\n\t\t\t\t\tthrow new NonTransientAiException(message);\n\t\t\t\t}\n\t\t\t\tthrow new TransientAiException(message);\n\t\t\t}",
                "is_abstract": "",
                "class_name": "RetryUtils",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/spring-ai-retry/src/main/java/org/springframework/ai/retry/TransientAiException.java",
        "class_names": [
            "TransientAiException"
        ],
        "imports": "",
        "package_import_paths": {
            "org.springframework.ai.retry.TransientAiException": "org.springframework.ai.retry.TransientAiException"
        },
        "package": "package org.springframework.ai.retry;",
        "property_declarations": [],
        "functions": []
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/document-readers/pdf-reader/src/test/java/org/springframework/ai/reader/pdf/PagePdfDocumentReaderTests.java",
        "class_names": [
            "PagePdfDocumentReaderTests"
        ],
        "imports": "import java.util.stream.Collectors;\nimport java.util.List;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.springframework.ai.document.Document;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.ai.reader.ExtractedTextFormatter;\nimport org.springframework.ai.reader.pdf.config.PdfDocumentReaderConfig;",
        "package_import_paths": {
            "org.springframework.ai.reader.pdf.PagePdfDocumentReaderTests": "org.springframework.ai.reader.pdf.PagePdfDocumentReaderTests",
            "org.springframework.ai.reader.pdf.classpathRead": "org.springframework.ai.reader.pdf.classpathRead"
        },
        "package": "package org.springframework.ai.reader.pdf;",
        "property_declarations": [],
        "functions": [
            {
                "name": "classpathRead",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "PagePdfDocumentReader pdfReader = new PagePdfDocumentReader(\"classpath:/sample1.pdf\",\n\t\t\t\tPdfDocumentReaderConfig.builder()\n\t\t\t\t\t.withPageTopMargin(0)\n\t\t\t\t\t.withPageBottomMargin(0)\n\t\t\t\t\t.withPageExtractedTextFormatter(ExtractedTextFormatter.builder()\n\t\t\t\t\t\t.withNumberOfTopTextLinesToDelete(0)\n\t\t\t\t\t\t.withNumberOfBottomTextLinesToDelete(3)\n\t\t\t\t\t\t.withNumberOfTopPagesToSkipBeforeDelete(0)\n\t\t\t\t\t\t.build())\n\t\t\t\t\t.withPagesPerDocument(1)\n\t\t\t\t\t.build());\n\n\t\tList<Document> docs = pdfReader.get();\n\n\t\tassertThat(docs).hasSize(4);\n\n\t\tString allText = docs.stream().map(d -> d.getContent()).collect(Collectors.joining(System.lineSeparator()));\n\n\t\tassertThat(allText).doesNotContain(\n\t\t\t\tList.of(\"Page  1 of 4\", \"Page  2 of 4\", \"Page  3 of 4\", \"Page  4 of 4\", \"PDF  Bookmark   Sample\"));",
                "is_abstract": "",
                "class_name": "PagePdfDocumentReaderTests",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/document-readers/pdf-reader/src/test/java/org/springframework/ai/reader/pdf/ParagraphPdfDocumentReaderTests.java",
        "class_names": [
            "ParagraphPdfDocumentReaderTests"
        ],
        "imports": "import org.junit.jupiter.api.Test;\nimport static org.assertj.core.api.Assertions.assertThatThrownBy;\nimport org.springframework.ai.reader.ExtractedTextFormatter;\nimport org.springframework.ai.reader.pdf.config.PdfDocumentReaderConfig;",
        "package_import_paths": {
            "org.springframework.ai.reader.pdf.ParagraphPdfDocumentReaderTests": "org.springframework.ai.reader.pdf.ParagraphPdfDocumentReaderTests",
            "org.springframework.ai.reader.pdf.testPdfWithoutTo": "org.springframework.ai.reader.pdf.testPdfWithoutTo"
        },
        "package": "package org.springframework.ai.reader.pdf;",
        "property_declarations": [],
        "functions": [
            {
                "name": "testPdfWithoutToc",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "assertThatThrownBy(() -> {\n\n\t\t\tnew ParagraphPdfDocumentReader(\"classpath:/sample1.pdf\",\n\t\t\t\t\tPdfDocumentReaderConfig.builder()\n\t\t\t\t\t\t.withPageTopMargin(0)\n\t\t\t\t\t\t.withPageBottomMargin(0)\n\t\t\t\t\t\t.withPageExtractedTextFormatter(ExtractedTextFormatter.builder()\n\t\t\t\t\t\t\t.withNumberOfTopTextLinesToDelete(0)\n\t\t\t\t\t\t\t.withNumberOfBottomTextLinesToDelete(3)\n\t\t\t\t\t\t\t.withNumberOfTopPagesToSkipBeforeDelete(0)\n\t\t\t\t\t\t\t.build())\n\t\t\t\t\t\t.withPagesPerDocument(1)\n\t\t\t\t\t\t.build());\n\t\t}).isInstanceOf(IllegalArgumentException.class)\n\t\t\t.hasMessageContaining(\n\t\t\t\t\t\"Document outline (e.g. TOC) is null. Make sure the PDF document has a table of contents (TOC). If not, consider the PagePdfDocumentReader or the TikaDocumentReader instead.\");",
                "is_abstract": "",
                "class_name": "ParagraphPdfDocumentReaderTests",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/document-readers/pdf-reader/src/test/java/org/springframework/ai/reader/pdf/aot/PdfReaderRuntimeHintsTests.java",
        "class_names": [
            "PdfReaderRuntimeHintsTests"
        ],
        "imports": "import org.junit.jupiter.api.Test;\nimport org.springframework.aot.hint.RuntimeHints;\nimport org.assertj.core.api.Assertions;\nimport static org.springframework.aot.hint.predicate.RuntimeHintsPredicates.resource;",
        "package_import_paths": {
            "org.springframework.ai.reader.pdf.aot.PdfReaderRuntimeHintsTests": "org.springframework.ai.reader.pdf.aot.PdfReaderRuntimeHintsTests",
            "org.springframework.ai.reader.pdf.aot.registerHints": "org.springframework.ai.reader.pdf.aot.registerHints"
        },
        "package": "package org.springframework.ai.reader.pdf.aot;",
        "property_declarations": [],
        "functions": [
            {
                "name": "registerHints",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "RuntimeHints runtimeHints = new RuntimeHints();\n\t\tPdfReaderRuntimeHints pdfReaderRuntimeHints = new PdfReaderRuntimeHints();\n\t\tpdfReaderRuntimeHints.registerHints(runtimeHints, null);\n\n\t\tAssertions.assertThat(runtimeHints)\n\t\t\t.matches(resource().forResource(\"/org/apache/pdfbox/resources/glyphlist/zapfdingbats.txt\"));\n\t\tAssertions.assertThat(runtimeHints)\n\t\t\t.matches(resource().forResource(\"/org/apache/pdfbox/resources/glyphlist/glyphlist.txt\"));\n\t\t// Assertions.assertThat(runtimeHints).matches(resource().forResource(\"/org/apache/pdfbox/resources/afm/**\"));\n\t\t// Assertions.assertThat(runtimeHints).matches(resource().forResource(\"/org/apache/pdfbox/resources/glyphlist/**\"));\n\t\t// Assertions.assertThat(runtimeHints).matches(resource().forResource(\"/org/apache/pdfbox/resources/icc/**\"));\n\t\t// Assertions.assertThat(runtimeHints).matches(resource().forResource(\"/org/apache/pdfbox/resources/text/**\"));\n\t\t// Assertions.assertThat(runtimeHints).matches(resource().forResource(\"/org/apache/pdfbox/resources/ttf/**\"));\n\t\tAssertions.assertThat(runtimeHints)\n\t\t\t.matches(resource().forResource(\"/org/apache/pdfbox/resources/version.properties\"));",
                "is_abstract": "",
                "class_name": "PdfReaderRuntimeHintsTests",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/document-readers/pdf-reader/src/main/java/org/springframework/ai/reader/pdf/ParagraphPdfDocumentReader.java",
        "class_names": [
            "ParagraphPdfDocumentReader"
        ],
        "imports": "import java.util.ArrayList;\nimport org.apache.pdfbox.pdfparser.PDFParser;\nimport java.util.List;\nimport org.springframework.ai.reader.pdf.config.ParagraphManager.Paragraph;\nimport org.springframework.ai.reader.pdf.config.PdfDocumentReaderConfig;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.ai.reader.pdf.layout.PDFLayoutTextStripperByArea;\nimport org.slf4j.Logger;\nimport org.springframework.ai.document.Document;\nimport org.springframework.util.CollectionUtils;\nimport org.springframework.ai.reader.pdf.config.ParagraphManager;\nimport org.springframework.core.io.Resource;\nimport org.apache.pdfbox.pdmodel.PDDocument;\nimport org.springframework.core.io.DefaultResourceLoader;\nimport org.springframework.util.StringUtils;\nimport java.util.Iterator;\nimport java.awt.Rectangle;\nimport org.springframework.ai.document.DocumentReader;",
        "package_import_paths": {
            "org.springframework.ai.reader.pdf.ParagraphPdfDocumentReader": "org.springframework.ai.reader.pdf.ParagraphPdfDocumentReader",
            "org.springframework.ai.reader.pdf.get": "org.springframework.ai.reader.pdf.get",
            "org.springframework.ai.reader.pdf.toDocument": "org.springframework.ai.reader.pdf.toDocument",
            "org.springframework.ai.reader.pdf.getTextBetweenParagraphs": "org.springframework.ai.reader.pdf.getTextBetweenParagraphs",
            "org.springframework.ai.reader.pdf.logger": "org.springframework.ai.reader.pdf.logger",
            "org.springframework.ai.reader.pdf.METADATA_START_PAGE": "org.springframework.ai.reader.pdf.METADATA_START_PAGE",
            "org.springframework.ai.reader.pdf.METADATA_END_PAGE": "org.springframework.ai.reader.pdf.METADATA_END_PAGE",
            "org.springframework.ai.reader.pdf.METADATA_TITLE": "org.springframework.ai.reader.pdf.METADATA_TITLE",
            "org.springframework.ai.reader.pdf.METADATA_LEVEL": "org.springframework.ai.reader.pdf.METADATA_LEVEL",
            "org.springframework.ai.reader.pdf.METADATA_FILE_NAME": "org.springframework.ai.reader.pdf.METADATA_FILE_NAME",
            "org.springframework.ai.reader.pdf.paragraphTextExtractor": "org.springframework.ai.reader.pdf.paragraphTextExtractor",
            "org.springframework.ai.reader.pdf.document": "org.springframework.ai.reader.pdf.document",
            "org.springframework.ai.reader.pdf.confi": "org.springframework.ai.reader.pdf.confi",
            "org.springframework.ai.reader.pdf.resourceFileNam": "org.springframework.ai.reader.pdf.resourceFileNam"
        },
        "package": "package org.springframework.ai.reader.pdf;",
        "property_declarations": [
            "private final PDDocument document;",
            "private final Logger logger = LoggerFactory.getLogger(getClass());",
            "private String resourceFileName;",
            "private static final String METADATA_START_PAGE = \"page_number\";",
            "private static final String METADATA_FILE_NAME = \"file_name\";",
            "private final ParagraphManager paragraphTextExtractor;",
            "private static final String METADATA_END_PAGE = \"end_page_number\";",
            "private static final String METADATA_TITLE = \"title\";",
            "private static final String METADATA_LEVEL = \"level\";",
            "private PdfDocumentReaderConfig config;"
        ],
        "functions": [
            {
                "name": "get",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "var paragraphs = this.paragraphTextExtractor.flatten();\n\n\t\tList<Document> documents = new ArrayList<>(paragraphs.size());\n\n\t\tif (!CollectionUtils.isEmpty(paragraphs)) {\n\t\t\tlogger.info(\"Start processing paragraphs from PDF\");\n\t\t\tIterator<Paragraph> itr = paragraphs.iterator();\n\n\t\t\tvar current = itr.next();\n\n\t\t\tif (!itr.hasNext()) {\n\t\t\t\tdocuments.add(toDocument(current, current));\n\t\t\t}\n\t\t\telse {\n\t\t\t\twhile (itr.hasNext()) {\n\t\t\t\t\tvar next = itr.next();\n\t\t\t\t\tDocument document = toDocument(current, next);\n\t\t\t\t\tif (document != null && StringUtils.hasText(document.getContent())) {\n\t\t\t\t\t\tdocuments.add(toDocument(current, next));\n\t\t\t\t\t}\n\t\t\t\t\tcurrent = next;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tlogger.info(\"End processing paragraphs from PDF\");\n\t\treturn documents;",
                "is_abstract": "",
                "class_name": "ParagraphPdfDocumentReader",
                "annotations": []
            },
            {
                "name": "toDocument",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String docText = this.getTextBetweenParagraphs(from, to);\n\n\t\tif (!StringUtils.hasText(docText)) {\n\t\t\treturn null;\n\t\t}\n\n\t\tDocument document = new Document(docText);\n\t\tdocument.getMetadata().put(METADATA_TITLE, from.title());\n\t\tdocument.getMetadata().put(METADATA_START_PAGE, from.startPageNumber());\n\t\tdocument.getMetadata().put(METADATA_END_PAGE, to.startPageNumber());\n\t\tdocument.getMetadata().put(METADATA_LEVEL, from.level());\n\t\tdocument.getMetadata().put(METADATA_FILE_NAME, this.resourceFileName);\n\n\t\treturn document;",
                "is_abstract": "",
                "class_name": "ParagraphPdfDocumentReader",
                "annotations": []
            },
            {
                "name": "getTextBetweenParagraphs",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "// Page started from index 0, while PDFBOx getPage return them from index 1.\n\t\tint startPage = fromParagraph.startPageNumber() - 1;\n\t\tint endPage = toParagraph.startPageNumber() - 1;\n\n\t\ttry {\n\n\t\t\tStringBuilder sb = new StringBuilder();\n\n\t\t\tvar pdfTextStripper = new PDFLayoutTextStripperByArea();\n\t\t\tpdfTextStripper.setSortByPosition(true);\n\n\t\t\tfor (int pageNumber = startPage; pageNumber <= endPage; pageNumber++) {\n\n\t\t\t\tvar page = this.document.getPage(pageNumber);\n\n\t\t\t\tint fromPosition = fromParagraph.position();\n\t\t\t\tint toPosition = toParagraph.position();\n\n\t\t\t\tif (this.config.reversedParagraphPosition) {\n\t\t\t\t\tfromPosition = (int) (page.getMediaBox().getHeight() - fromPosition);\n\t\t\t\t\ttoPosition = (int) (page.getMediaBox().getHeight() - toPosition);\n\t\t\t\t}\n\n\t\t\t\tint x0 = (int) page.getMediaBox().getLowerLeftX();\n\t\t\t\tint xW = (int) page.getMediaBox().getWidth();\n\n\t\t\t\tint y0 = (int) page.getMediaBox().getLowerLeftY();\n\t\t\t\tint yW = (int) page.getMediaBox().getHeight();\n\n\t\t\t\tif (pageNumber == startPage) {\n\t\t\t\t\ty0 = fromPosition;\n\t\t\t\t\tyW = (int) page.getMediaBox().getHeight() - y0;\n\t\t\t\t}\n\t\t\t\tif (pageNumber == endPage) {\n\t\t\t\t\tyW = toPosition - y0;\n\t\t\t\t}\n\n\t\t\t\tif ((y0 + yW) == (int) page.getMediaBox().getHeight()) {\n\t\t\t\t\tyW = yW - this.config.pageBottomMargin;\n\t\t\t\t}\n\n\t\t\t\tif (y0 == 0) {\n\t\t\t\t\ty0 = y0 + this.config.pageTopMargin;\n\t\t\t\t\tyW = yW - this.config.pageTopMargin;\n\t\t\t\t}\n\n\t\t\t\tpdfTextStripper.addRegion(\"pdfPageRegion\", new Rectangle(x0, y0, xW, yW));\n\t\t\t\tpdfTextStripper.extractRegions(page);\n\t\t\t\tvar text = pdfTextStripper.getTextForRegion(\"pdfPageRegion\");\n\t\t\t\tif (StringUtils.hasText(text)) {\n\t\t\t\t\tsb.append(text);\n\t\t\t\t}\n\t\t\t\tpdfTextStripper.removeRegion(\"pdfPageRegion\");\n\n\t\t\t}\n\n\t\t\tString text = sb.toString();\n\n\t\t\tif (StringUtils.hasText(text)) {\n\t\t\t\ttext = this.config.pageExtractedTextFormatter.format(text, startPage);\n\t\t\t}\n\n\t\t\treturn text;\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}",
                "is_abstract": "",
                "class_name": "ParagraphPdfDocumentReader",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/document-readers/pdf-reader/src/main/java/org/springframework/ai/reader/pdf/PagePdfDocumentReader.java",
        "class_names": [
            "PagePdfDocumentReader"
        ],
        "imports": "import java.util.ArrayList;\nimport java.util.stream.Collectors;\nimport org.apache.pdfbox.pdfparser.PDFParser;\nimport java.util.List;\nimport org.springframework.ai.reader.pdf.config.PdfDocumentReaderConfig;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.ai.document.DocumentReader;\nimport org.springframework.ai.reader.pdf.layout.PDFLayoutTextStripperByArea;\nimport org.slf4j.Logger;\nimport org.apache.pdfbox.pdmodel.PDPage;\nimport org.springframework.ai.document.Document;\nimport org.springframework.util.CollectionUtils;\nimport org.springframework.core.io.Resource;\nimport org.springframework.core.io.DefaultResourceLoader;\nimport org.springframework.util.StringUtils;\nimport java.awt.Rectangle;\nimport org.apache.pdfbox.pdmodel.PDDocument;\nimport java.io.IOException;",
        "package_import_paths": {
            "org.springframework.ai.reader.pdf.PagePdfDocumentReader": "org.springframework.ai.reader.pdf.PagePdfDocumentReader",
            "org.springframework.ai.reader.pdf.get": "org.springframework.ai.reader.pdf.get",
            "org.springframework.ai.reader.pdf.toDocument": "org.springframework.ai.reader.pdf.toDocument",
            "org.springframework.ai.reader.pdf.logger": "org.springframework.ai.reader.pdf.logger",
            "org.springframework.ai.reader.pdf.PDF_PAGE_REGION": "org.springframework.ai.reader.pdf.PDF_PAGE_REGION",
            "org.springframework.ai.reader.pdf.METADATA_START_PAGE_NUMBER": "org.springframework.ai.reader.pdf.METADATA_START_PAGE_NUMBER",
            "org.springframework.ai.reader.pdf.METADATA_END_PAGE_NUMBER": "org.springframework.ai.reader.pdf.METADATA_END_PAGE_NUMBER",
            "org.springframework.ai.reader.pdf.METADATA_FILE_NAME": "org.springframework.ai.reader.pdf.METADATA_FILE_NAME",
            "org.springframework.ai.reader.pdf.document": "org.springframework.ai.reader.pdf.document",
            "org.springframework.ai.reader.pdf.confi": "org.springframework.ai.reader.pdf.confi",
            "org.springframework.ai.reader.pdf.resourceFileNam": "org.springframework.ai.reader.pdf.resourceFileNam"
        },
        "package": "package org.springframework.ai.reader.pdf;",
        "property_declarations": [
            "private final PDDocument document;",
            "private final Logger logger = LoggerFactory.getLogger(getClass());",
            "private String resourceFileName;",
            "public static final String METADATA_START_PAGE_NUMBER = \"page_number\";",
            "private static final String PDF_PAGE_REGION = \"pdfPageRegion\";",
            "public static final String METADATA_END_PAGE_NUMBER = \"end_page_number\";",
            "private PdfDocumentReaderConfig config;",
            "public static final String METADATA_FILE_NAME = \"file_name\";"
        ],
        "functions": [
            {
                "name": "get",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "List<Document> readDocuments = new ArrayList<>();\n\t\ttry {\n\t\t\tvar pdfTextStripper = new PDFLayoutTextStripperByArea();\n\n\t\t\tint pageNumber = 0;\n\t\t\tint pagesPerDocument = 0;\n\t\t\tint startPageNumber = pageNumber;\n\n\t\t\tList<String> pageTextGroupList = new ArrayList<>();\n\n\t\t\tint totalPages = this.document.getDocumentCatalog().getPages().getCount();\n\t\t\tint logFrequency = totalPages > 10 ? totalPages / 10 : 1; // if less than 10\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// pages, print\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// each iteration\n\t\t\tint counter = 0;\n\n\t\t\tfor (PDPage page : this.document.getDocumentCatalog().getPages()) {\n\t\t\t\tif (counter % logFrequency == 0 && counter / logFrequency < 10) {\n\t\t\t\t\tlogger.info(\"Processing PDF page: {}\", (counter + 1));\n\t\t\t\t}\n\t\t\t\tcounter++;\n\n\t\t\t\tpagesPerDocument++;\n\n\t\t\t\tif (this.config.pagesPerDocument != PdfDocumentReaderConfig.ALL_PAGES\n\t\t\t\t\t\t&& pagesPerDocument >= this.config.pagesPerDocument) {\n\t\t\t\t\tpagesPerDocument = 0;\n\n\t\t\t\t\tvar aggregatedPageTextGroup = pageTextGroupList.stream().collect(Collectors.joining());\n\t\t\t\t\tif (StringUtils.hasText(aggregatedPageTextGroup)) {\n\t\t\t\t\t\treadDocuments.add(toDocument(aggregatedPageTextGroup, startPageNumber, pageNumber));\n\t\t\t\t\t}\n\t\t\t\t\tpageTextGroupList.clear();\n\n\t\t\t\t\tstartPageNumber = pageNumber + 1;\n\t\t\t\t}\n\t\t\t\tint x0 = (int) page.getMediaBox().getLowerLeftX();\n\t\t\t\tint xW = (int) page.getMediaBox().getWidth();\n\n\t\t\t\tint y0 = (int) page.getMediaBox().getLowerLeftY() + this.config.pageTopMargin;\n\t\t\t\tint yW = (int) page.getMediaBox().getHeight()\n\t\t\t\t\t\t- (this.config.pageTopMargin + this.config.pageBottomMargin);\n\n\t\t\t\tpdfTextStripper.addRegion(PDF_PAGE_REGION, new Rectangle(x0, y0, xW, yW));\n\t\t\t\tpdfTextStripper.extractRegions(page);\n\t\t\t\tvar pageText = pdfTextStripper.getTextForRegion(PDF_PAGE_REGION);\n\n\t\t\t\tif (StringUtils.hasText(pageText)) {\n\n\t\t\t\t\tpageText = this.config.pageExtractedTextFormatter.format(pageText, pageNumber);\n\n\t\t\t\t\tpageTextGroupList.add(pageText);\n\t\t\t\t}\n\t\t\t\tpageNumber++;\n\t\t\t\tpdfTextStripper.removeRegion(PDF_PAGE_REGION);\n\t\t\t}\n\t\t\tif (!CollectionUtils.isEmpty(pageTextGroupList)) {\n\t\t\t\treadDocuments.add(toDocument(pageTextGroupList.stream().collect(Collectors.joining()), startPageNumber,\n\t\t\t\t\t\tpageNumber));\n\t\t\t}\n\t\t\tlogger.info(\"Processing {} pages\", totalPages);\n\t\t\treturn readDocuments;\n\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}",
                "is_abstract": "",
                "class_name": "PagePdfDocumentReader",
                "annotations": []
            },
            {
                "name": "toDocument",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Document doc = new Document(docText);\n\t\tdoc.getMetadata().put(METADATA_START_PAGE_NUMBER, startPageNumber);\n\t\tif (startPageNumber != endPageNumber) {\n\t\t\tdoc.getMetadata().put(METADATA_END_PAGE_NUMBER, endPageNumber);\n\t\t}\n\t\tdoc.getMetadata().put(METADATA_FILE_NAME, this.resourceFileName);\n\n\t\treturn doc;",
                "is_abstract": "",
                "class_name": "PagePdfDocumentReader",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/document-readers/pdf-reader/src/main/java/org/springframework/ai/reader/pdf/config/ParagraphManager.java",
        "class_names": [
            "ParagraphManager"
        ],
        "imports": "import java.util.ArrayList;\nimport java.util.List;\nimport org.apache.pdfbox.pdmodel.PDPageTree;\nimport org.springframework.util.Assert;\nimport org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem;\nimport org.apache.pdfbox.pdmodel.PDPage;\nimport org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineNode;\nimport org.springframework.util.CollectionUtils;\nimport java.io.PrintStream;\nimport org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageXYZDestination;\nimport org.apache.pdfbox.pdmodel.PDDocument;\nimport java.io.IOException;",
        "package_import_paths": {
            "org.springframework.ai.reader.pdf.config.ParagraphManager": "org.springframework.ai.reader.pdf.config.ParagraphManager",
            "org.springframework.ai.reader.pdf.config.toStrin": "org.springframework.ai.reader.pdf.config.toStrin",
            "org.springframework.ai.reader.pdf.config.flatten": "org.springframework.ai.reader.pdf.config.flatten",
            "org.springframework.ai.reader.pdf.config.printParagraph": "org.springframework.ai.reader.pdf.config.printParagraph",
            "org.springframework.ai.reader.pdf.config.generateParagraphs": "org.springframework.ai.reader.pdf.config.generateParagraphs",
            "org.springframework.ai.reader.pdf.config.getPageNumber": "org.springframework.ai.reader.pdf.config.getPageNumber",
            "org.springframework.ai.reader.pdf.config.getParagraphsByLevel": "org.springframework.ai.reader.pdf.config.getParagraphsByLevel",
            "org.springframework.ai.reader.pdf.config.rootParagraph": "org.springframework.ai.reader.pdf.config.rootParagraph",
            "org.springframework.ai.reader.pdf.config.document": "org.springframework.ai.reader.pdf.config.document"
        },
        "package": "package org.springframework.ai.reader.pdf.config;",
        "property_declarations": [
            "private final Paragraph rootParagraph;",
            "private final PDDocument document;"
        ],
        "functions": [
            {
                "name": "toString",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String indent = (level < 0) ? \"\" : new String(new char[level * 2]).replace('\\0', ' ');\n\n\t\t\treturn indent + \" \" + level + \") \" + title + \" [\" + startPageNumber + \",\" + endPageNumber + \"], children = \"\n\t\t\t\t\t+ children.size() + \", pos = \" + position;",
                "is_abstract": "",
                "class_name": "ParagraphManager",
                "annotations": []
            },
            {
                "name": "flatten",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "List<Paragraph> paragraphs = new ArrayList<>();\n\t\tfor (var child : this.rootParagraph.children()) {\n\t\t\tflatten(child, paragraphs);\n\t\t}\n\t\treturn paragraphs;",
                "is_abstract": "",
                "class_name": "ParagraphManager",
                "annotations": []
            },
            {
                "name": "printParagraph",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "printStream.println(paragraph);\n\t\tfor (Paragraph childParagraph : paragraph.children()) {\n\t\t\tprintParagraph(childParagraph, printStream);\n\t\t}",
                "is_abstract": "",
                "class_name": "ParagraphManager",
                "annotations": []
            },
            {
                "name": "generateParagraphs",
                "parameters": [
                    ""
                ],
                "return_type": "0",
                "body": "PDOutlineItem current = bookmark.getFirstChild();\n\n\t\twhile (current != null) {\n\n\t\t\tint pageNumber = getPageNumber(current);\n\t\t\tvar nextSiblingNumber = getPageNumber(current.getNextSibling());\n\t\t\tif (nextSiblingNumber < 0) {\n\t\t\t\tnextSiblingNumber = getPageNumber(current.getLastChild());\n\t\t\t}\n\n\t\t\tvar paragraphPosition = (current.getDestination() instanceof PDPageXYZDestination)\n\t\t\t\t\t? ((PDPageXYZDestination) current.getDestination()).getTop() : 0;\n\n\t\t\tvar currentParagraph = new Paragraph(parentParagraph, current.getTitle(), level, pageNumber,\n\t\t\t\t\tnextSiblingNumber, paragraphPosition);\n\n\t\t\tparentParagraph.children().add(currentParagraph);\n\n\t\t\t// Recursive call to go the current paragraph's children paragraphs.\n\t\t\t// E.g. go one level deeper.\n\t\t\tthis.generateParagraphs(currentParagraph, current, level + 1);\n\n\t\t\tcurrent = current.getNextSibling();\n\t\t}\n\t\treturn parentParagraph;",
                "is_abstract": "",
                "class_name": "ParagraphManager",
                "annotations": []
            },
            {
                "name": "getPageNumber",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (current == null) {\n\t\t\treturn -1;\n\t\t}\n\t\tPDPage currentPage = current.findDestinationPage(this.document);\n\t\tPDPageTree pages = this.document.getDocumentCatalog().getPages();\n\t\tfor (int i = 0; i < pages.getCount(); i++) {\n\t\t\tvar page = pages.get(i);\n\t\t\tif (page.equals(currentPage)) {\n\t\t\t\treturn i + 1;\n\t\t\t}\n\t\t}\n\t\treturn -1;",
                "is_abstract": "",
                "class_name": "ParagraphManager",
                "annotations": []
            },
            {
                "name": "getParagraphsByLevel",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "List<Paragraph> resultList = new ArrayList<>();\n\n\t\tif (paragraph.level() < level) {\n\t\t\tif (!CollectionUtils.isEmpty(paragraph.children())) {\n\n\t\t\t\tif (interLevelText) {\n\t\t\t\t\tvar interLevelParagraph = new Paragraph(paragraph.parent(), paragraph.title(), paragraph.level(),\n\t\t\t\t\t\t\tparagraph.startPageNumber(), paragraph.children().get(0).startPageNumber(),\n\t\t\t\t\t\t\tparagraph.position());\n\t\t\t\t\tresultList.add(interLevelParagraph);\n\t\t\t\t}\n\n\t\t\t\tfor (Paragraph child : paragraph.children()) {\n\t\t\t\t\tresultList.addAll(getParagraphsByLevel(child, level, interLevelText));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (paragraph.level() == level) {\n\t\t\tresultList.add(paragraph);\n\t\t}\n\n\t\treturn resultList;",
                "is_abstract": "",
                "class_name": "ParagraphManager",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/document-readers/pdf-reader/src/main/java/org/springframework/ai/reader/pdf/config/PdfDocumentReaderConfig.java",
        "class_names": [
            "Builder",
            "PdfDocumentReaderConfig"
        ],
        "imports": "import org.springframework.ai.reader.pdf.PagePdfDocumentReader;\nimport org.springframework.ai.reader.pdf.ParagraphPdfDocumentReader;\nimport org.springframework.ai.reader.ExtractedTextFormatter;\nimport org.springframework.util.Assert;",
        "package_import_paths": {
            "org.springframework.ai.reader.pdf.config.PdfDocumentReaderConfi": "org.springframework.ai.reader.pdf.config.PdfDocumentReaderConfi",
            "org.springframework.ai.reader.pdf.config.Builder": "org.springframework.ai.reader.pdf.config.Builder",
            "org.springframework.ai.reader.pdf.config.builder": "org.springframework.ai.reader.pdf.config.builder",
            "org.springframework.ai.reader.pdf.config.defaultConfi": "org.springframework.ai.reader.pdf.config.defaultConfi",
            "org.springframework.ai.reader.pdf.config.withPageExtractedTextFormatter": "org.springframework.ai.reader.pdf.config.withPageExtractedTextFormatter",
            "org.springframework.ai.reader.pdf.config.withPagesPerDocument": "org.springframework.ai.reader.pdf.config.withPagesPerDocument",
            "org.springframework.ai.reader.pdf.config.withPageTopMargin": "org.springframework.ai.reader.pdf.config.withPageTopMargin",
            "org.springframework.ai.reader.pdf.config.withPageBottomMargin": "org.springframework.ai.reader.pdf.config.withPageBottomMargin",
            "org.springframework.ai.reader.pdf.config.withReversedParagraphPosition": "org.springframework.ai.reader.pdf.config.withReversedParagraphPosition",
            "org.springframework.ai.reader.pdf.config.build": "org.springframework.ai.reader.pdf.config.build",
            "org.springframework.ai.reader.pdf.config.ALL_PAGES": "org.springframework.ai.reader.pdf.config.ALL_PAGES",
            "org.springframework.ai.reader.pdf.config.reversedParagraphPosition": "org.springframework.ai.reader.pdf.config.reversedParagraphPosition",
            "org.springframework.ai.reader.pdf.config.pagesPerDocument": "org.springframework.ai.reader.pdf.config.pagesPerDocument",
            "org.springframework.ai.reader.pdf.config.pageTopMargin": "org.springframework.ai.reader.pdf.config.pageTopMargin",
            "org.springframework.ai.reader.pdf.config.pageBottomMargin": "org.springframework.ai.reader.pdf.config.pageBottomMargin",
            "org.springframework.ai.reader.pdf.config.pageExtractedTextFormatter": "org.springframework.ai.reader.pdf.config.pageExtractedTextFormatter"
        },
        "package": "package org.springframework.ai.reader.pdf.config;",
        "property_declarations": [
            "public static final int ALL_PAGES = 0;",
            "public final ExtractedTextFormatter pageExtractedTextFormatter;",
            "private ExtractedTextFormatter pageExtractedTextFormatter = ExtractedTextFormatter.defaults();",
            "public final int pageTopMargin;",
            "public final int pageBottomMargin;",
            "private int pageTopMargin = 0;",
            "public final boolean reversedParagraphPosition;",
            "private boolean reversedParagraphPosition = false;",
            "public final int pagesPerDocument;",
            "private int pageBottomMargin = 0;",
            "private int pagesPerDocument = 1;"
        ],
        "functions": [
            {
                "name": "builder",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new Builder();",
                "is_abstract": "",
                "class_name": "PdfDocumentReaderConfig",
                "annotations": []
            },
            {
                "name": "defaultConfig",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return builder().build();",
                "is_abstract": "",
                "class_name": "PdfDocumentReaderConfig",
                "annotations": []
            },
            {
                "name": "withPageExtractedTextFormatter",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.notNull(pagesPerDocument >= 0, \"PageExtractedTextFormatter must not be null.\");\n\t\t\tthis.pageExtractedTextFormatter = pageExtractedTextFormatter;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "PdfDocumentReaderConfig Builder",
                "annotations": []
            },
            {
                "name": "withPagesPerDocument",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.isTrue(pagesPerDocument >= 0, \"Page count must be a positive value.\");\n\t\t\tthis.pagesPerDocument = pagesPerDocument;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "PdfDocumentReaderConfig Builder",
                "annotations": []
            },
            {
                "name": "withPageTopMargin",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.isTrue(topMargin >= 0, \"Page margins must be a positive value.\");\n\t\t\tthis.pageTopMargin = topMargin;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "PdfDocumentReaderConfig Builder",
                "annotations": []
            },
            {
                "name": "withPageBottomMargin",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "Assert.isTrue(bottomMargin >= 0, \"Page margins must be a positive value.\");\n\t\t\tthis.pageBottomMargin = bottomMargin;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "PdfDocumentReaderConfig Builder",
                "annotations": []
            },
            {
                "name": "withReversedParagraphPosition",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.reversedParagraphPosition = reversedParagraphPosition;\n\t\t\treturn this;",
                "is_abstract": "",
                "class_name": "PdfDocumentReaderConfig Builder",
                "annotations": []
            },
            {
                "name": "build",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return new PdfDocumentReaderConfig(this);",
                "is_abstract": "",
                "class_name": "PdfDocumentReaderConfig Builder",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/document-readers/pdf-reader/src/main/java/org/springframework/ai/reader/pdf/layout/ForkPDFLayoutTextStripper.java",
        "class_names": [
            "CharacterFactory",
            "ForkPDFLayoutTextStripper",
            "TextLine",
            "Character"
        ],
        "imports": "import org.apache.pdfbox.pdmodel.common.PDRectangle;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.pdfbox.text.PDFTextStripper;\nimport org.apache.pdfbox.pdmodel.PDPage;\nimport org.apache.pdfbox.text.TextPositionComparator;\nimport java.util.Collections;\nimport org.apache.pdfbox.text.TextPosition;\nimport java.util.Iterator;\nimport java.io.IOException;",
        "package_import_paths": {
            "org.springframework.ai.reader.pdf.layout.ForkPDFLayoutTextStripper": "org.springframework.ai.reader.pdf.layout.ForkPDFLayoutTextStripper",
            "org.springframework.ai.reader.pdf.layout.TextLin": "org.springframework.ai.reader.pdf.layout.TextLin",
            "org.springframework.ai.reader.pdf.layout.Character": "org.springframework.ai.reader.pdf.layout.Character",
            "org.springframework.ai.reader.pdf.layout.CharacterFactory": "org.springframework.ai.reader.pdf.layout.CharacterFactory",
            "org.springframework.ai.reader.pdf.layout.processP": "org.springframework.ai.reader.pdf.layout.processP",
            "org.springframework.ai.reader.pdf.layout.writeP": "org.springframework.ai.reader.pdf.layout.writeP",
            "org.springframework.ai.reader.pdf.layout.writeToOutputStream": "org.springframework.ai.reader.pdf.layout.writeToOutputStream",
            "org.springframework.ai.reader.pdf.layout.SuppressWarnings": "org.springframework.ai.reader.pdf.layout.SuppressWarnings",
            "org.springframework.ai.reader.pdf.layout.writeLin": "org.springframework.ai.reader.pdf.layout.writeLin",
            "org.springframework.ai.reader.pdf.layout.iterateThroughTextList": "org.springframework.ai.reader.pdf.layout.iterateThroughTextList",
            "org.springframework.ai.reader.pdf.layout.writeTextPositionList": "org.springframework.ai.reader.pdf.layout.writeTextPositionList",
            "org.springframework.ai.reader.pdf.layout.createNewEmptyNewLines": "org.springframework.ai.reader.pdf.layout.createNewEmptyNewLines",
            "org.springframework.ai.reader.pdf.layout.getNumberOfNewLinesFromPreviousTextPosition": "org.springframework.ai.reader.pdf.layout.getNumberOfNewLinesFromPreviousTextPosition",
            "org.springframework.ai.reader.pdf.layout.addNewLin": "org.springframework.ai.reader.pdf.layout.addNewLin",
            "org.springframework.ai.reader.pdf.layout.getPreviousTextPosition": "org.springframework.ai.reader.pdf.layout.getPreviousTextPosition",
            "org.springframework.ai.reader.pdf.layout.setPreviousTextPosition": "org.springframework.ai.reader.pdf.layout.setPreviousTextPosition",
            "org.springframework.ai.reader.pdf.layout.getCurrentPageWidth": "org.springframework.ai.reader.pdf.layout.getCurrentPageWidth",
            "org.springframework.ai.reader.pdf.layout.setCurrentPageWidth": "org.springframework.ai.reader.pdf.layout.setCurrentPageWidth",
            "org.springframework.ai.reader.pdf.layout.getTextLineList": "org.springframework.ai.reader.pdf.layout.getTextLineList",
            "org.springframework.ai.reader.pdf.layout.writeCharacterAtIndex": "org.springframework.ai.reader.pdf.layout.writeCharacterAtIndex",
            "org.springframework.ai.reader.pdf.layout.getLineLength": "org.springframework.ai.reader.pdf.layout.getLineLength",
            "org.springframework.ai.reader.pdf.layout.getLin": "org.springframework.ai.reader.pdf.layout.getLin",
            "org.springframework.ai.reader.pdf.layout.computeIndexForCharacter": "org.springframework.ai.reader.pdf.layout.computeIndexForCharacter",
            "org.springframework.ai.reader.pdf.layout.isSpaceCharacterAtIndex": "org.springframework.ai.reader.pdf.layout.isSpaceCharacterAtIndex",
            "org.springframework.ai.reader.pdf.layout.isNewIndexGreaterThanLastIndex": "org.springframework.ai.reader.pdf.layout.isNewIndexGreaterThanLastIndex",
            "org.springframework.ai.reader.pdf.layout.getNextValidIndex": "org.springframework.ai.reader.pdf.layout.getNextValidIndex",
            "org.springframework.ai.reader.pdf.layout.findMinimumIndexWithSpaceCharacterFromIndex": "org.springframework.ai.reader.pdf.layout.findMinimumIndexWithSpaceCharacterFromIndex",
            "org.springframework.ai.reader.pdf.layout.indexIsInBounds": "org.springframework.ai.reader.pdf.layout.indexIsInBounds",
            "org.springframework.ai.reader.pdf.layout.completeLineWithSpaces": "org.springframework.ai.reader.pdf.layout.completeLineWithSpaces",
            "org.springframework.ai.reader.pdf.layout.getLastIndex": "org.springframework.ai.reader.pdf.layout.getLastIndex",
            "org.springframework.ai.reader.pdf.layout.setLastIndex": "org.springframework.ai.reader.pdf.layout.setLastIndex",
            "org.springframework.ai.reader.pdf.layout.getCharacterValu": "org.springframework.ai.reader.pdf.layout.getCharacterValu",
            "org.springframework.ai.reader.pdf.layout.getIndex": "org.springframework.ai.reader.pdf.layout.getIndex",
            "org.springframework.ai.reader.pdf.layout.setIndex": "org.springframework.ai.reader.pdf.layout.setIndex",
            "org.springframework.ai.reader.pdf.layout.isCharacterPartOfPreviousWord": "org.springframework.ai.reader.pdf.layout.isCharacterPartOfPreviousWord",
            "org.springframework.ai.reader.pdf.layout.isFirstCharacterOfAWord": "org.springframework.ai.reader.pdf.layout.isFirstCharacterOfAWord",
            "org.springframework.ai.reader.pdf.layout.isCharacterAtTheBeginningOfNewLin": "org.springframework.ai.reader.pdf.layout.isCharacterAtTheBeginningOfNewLin",
            "org.springframework.ai.reader.pdf.layout.isCharacterCloseToPreviousWord": "org.springframework.ai.reader.pdf.layout.isCharacterCloseToPreviousWord",
            "org.springframework.ai.reader.pdf.layout.toStrin": "org.springframework.ai.reader.pdf.layout.toStrin",
            "org.springframework.ai.reader.pdf.layout.createCharacterFromTextPosition": "org.springframework.ai.reader.pdf.layout.createCharacterFromTextPosition",
            "org.springframework.ai.reader.pdf.layout.numberOfSpacesBetweenTwoCharacters": "org.springframework.ai.reader.pdf.layout.numberOfSpacesBetweenTwoCharacters",
            "org.springframework.ai.reader.pdf.layout.getCharacterFromTextPosition": "org.springframework.ai.reader.pdf.layout.getCharacterFromTextPosition",
            "org.springframework.ai.reader.pdf.layout.DEBUG": "org.springframework.ai.reader.pdf.layout.DEBUG",
            "org.springframework.ai.reader.pdf.layout.OUTPUT_SPACE_CHARACTER_WIDTH_IN_PT": "org.springframework.ai.reader.pdf.layout.OUTPUT_SPACE_CHARACTER_WIDTH_IN_PT",
            "org.springframework.ai.reader.pdf.layout.currentPageWidth": "org.springframework.ai.reader.pdf.layout.currentPageWidth",
            "org.springframework.ai.reader.pdf.layout.previousTextPosition": "org.springframework.ai.reader.pdf.layout.previousTextPosition",
            "org.springframework.ai.reader.pdf.layout.textLineList": "org.springframework.ai.reader.pdf.layout.textLineList",
            "org.springframework.ai.reader.pdf.layout.SPACE_CHARACTER": "org.springframework.ai.reader.pdf.layout.SPACE_CHARACTER",
            "org.springframework.ai.reader.pdf.layout.lineLength": "org.springframework.ai.reader.pdf.layout.lineLength",
            "org.springframework.ai.reader.pdf.layout.lin": "org.springframework.ai.reader.pdf.layout.lin",
            "org.springframework.ai.reader.pdf.layout.lastIndex": "org.springframework.ai.reader.pdf.layout.lastIndex",
            "org.springframework.ai.reader.pdf.layout.characterValu": "org.springframework.ai.reader.pdf.layout.characterValu",
            "org.springframework.ai.reader.pdf.layout.index": "org.springframework.ai.reader.pdf.layout.index",
            "org.springframework.ai.reader.pdf.layout.firstCharacterOfLineFound": "org.springframework.ai.reader.pdf.layout.firstCharacterOfLineFound"
        },
        "package": "package org.springframework.ai.reader.pdf.layout;",
        "property_declarations": [
            "public static final boolean DEBUG = false;",
            "public static final int OUTPUT_SPACE_CHARACTER_WIDTH_IN_PT = 4;",
            "private double currentPageWidth;",
            "private boolean isCharacterCloseToPreviousWord;",
            "private boolean firstCharacterOfLineFound;",
            "private boolean isCharacterAtTheBeginningOfNewLine;",
            "private char characterValue;",
            "private TextPosition previousTextPosition;",
            "private int index;",
            "private int lastIndex;",
            "private boolean isFirstCharacterOfAWord;",
            "private boolean isCharacterPartOfPreviousWord;",
            "private List<TextLine> textLineList;",
            "private int lineLength;",
            "private static final char SPACE_CHARACTER = ' ';",
            "private String line;"
        ],
        "functions": [
            {
                "name": "processPage",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "PDRectangle pageRectangle = page.getMediaBox();\n\t\tif (pageRectangle != null) {\n\t\t\tthis.setCurrentPageWidth(pageRectangle.getWidth() * 1.4);\n\t\t\tsuper.processPage(page);\n\t\t\tthis.previousTextPosition = null;\n\t\t\tthis.textLineList = new ArrayList<TextLine>();\n\t\t}",
                "is_abstract": "",
                "class_name": "ForkPDFLayoutTextStripper",
                "annotations": []
            },
            {
                "name": "writePage",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "List<List<TextPosition>> charactersByArticle = super.getCharactersByArticle();\n\t\tfor (int i = 0; i < charactersByArticle.size(); i++) {\n\t\t\tList<TextPosition> textList = charactersByArticle.get(i);\n\t\t\ttry {\n\t\t\t\tthis.sortTextPositionList(textList);\n\t\t\t}\n\t\t\tcatch (java.lang.IllegalArgumentException e) {\n\t\t\t\tSystem.err.println(e);\n\t\t\t}\n\t\t\tthis.iterateThroughTextList(textList.iterator());\n\t\t}\n\t\tthis.writeToOutputStream(this.getTextLineList());",
                "is_abstract": "",
                "class_name": "ForkPDFLayoutTextStripper",
                "annotations": []
            },
            {
                "name": "writeToOutputStream",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "for (TextLine textLine : textLineList) {\n\t\t\tchar[] line = textLine.getLine().toCharArray();\n\t\t\tsuper.getOutput().write(line);\n\t\t\tsuper.getOutput().write('\\n');\n\t\t\tsuper.getOutput().flush();\n\t\t}",
                "is_abstract": "",
                "class_name": "ForkPDFLayoutTextStripper",
                "annotations": []
            },
            {
                "name": "SuppressWarnings",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "TextPositionComparator comparator = new TextPositionComparator();\n\t\tCollections.sort(textList, comparator);",
                "is_abstract": "",
                "class_name": "ForkPDFLayoutTextStripper",
                "annotations": [
                    "@SuppressWarnings(\"unchecked\")"
                ]
            },
            {
                "name": "writeLine",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "if (textPositionList.size() > 0) {\n\t\t\tTextLine textLine = this.addNewLine();\n\t\t\tboolean firstCharacterOfLineFound = false;\n\t\t\tfor (TextPosition textPosition : textPositionList) {\n\t\t\t\tCharacterFactory characterFactory = new CharacterFactory(firstCharacterOfLineFound);\n\t\t\t\tCharacter character = characterFactory.createCharacterFromTextPosition(textPosition,\n\t\t\t\t\t\tthis.getPreviousTextPosition());\n\t\t\t\ttextLine.writeCharacterAtIndex(character);\n\t\t\t\tthis.setPreviousTextPosition(textPosition);\n\t\t\t\tfirstCharacterOfLineFound = true;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthis.addNewLine(); // white line\n\t\t}",
                "is_abstract": "",
                "class_name": "ForkPDFLayoutTextStripper",
                "annotations": []
            },
            {
                "name": "iterateThroughTextList",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "List<TextPosition> textPositionList = new ArrayList<TextPosition>();\n\n\t\twhile (textIterator.hasNext()) {\n\t\t\tTextPosition textPosition = (TextPosition) textIterator.next();\n\t\t\tint numberOfNewLines = this.getNumberOfNewLinesFromPreviousTextPosition(textPosition);\n\t\t\tif (numberOfNewLines == 0) {\n\t\t\t\ttextPositionList.add(textPosition);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.writeTextPositionList(textPositionList);\n\t\t\t\tthis.createNewEmptyNewLines(numberOfNewLines);\n\t\t\t\ttextPositionList.add(textPosition);\n\t\t\t}\n\t\t\tthis.setPreviousTextPosition(textPosition);\n\t\t}\n\t\tif (!textPositionList.isEmpty()) {\n\t\t\tthis.writeTextPositionList(textPositionList);\n\t\t}",
                "is_abstract": "",
                "class_name": "ForkPDFLayoutTextStripper",
                "annotations": []
            },
            {
                "name": "writeTextPositionList",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.writeLine(textPositionList);\n\t\ttextPositionList.clear();",
                "is_abstract": "",
                "class_name": "ForkPDFLayoutTextStripper",
                "annotations": []
            },
            {
                "name": "createNewEmptyNewLines",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "for (int i = 0; i < numberOfNewLines - 1; ++i) {\n\t\t\tthis.addNewLine();\n\t\t}",
                "is_abstract": "",
                "class_name": "ForkPDFLayoutTextStripper",
                "annotations": []
            },
            {
                "name": "getNumberOfNewLinesFromPreviousTextPosition",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "TextPosition previousTextPosition = this.getPreviousTextPosition();\n\t\tif (previousTextPosition == null) {\n\t\t\treturn 1;\n\t\t}\n\n\t\tfloat textYPosition = Math.round(textPosition.getY());\n\t\tfloat previousTextYPosition = Math.round(previousTextPosition.getY());\n\n\t\tif (textYPosition > previousTextYPosition && (textYPosition - previousTextYPosition > 5.5)) {\n\t\t\tdouble height = textPosition.getHeight();\n\t\t\tint numberOfLines = (int) (Math.floor(textYPosition - previousTextYPosition) / height);\n\t\t\tnumberOfLines = Math.max(1, numberOfLines - 1); // exclude current new line\n\t\t\tif (DEBUG)\n\t\t\t\tSystem.out.println(height + \" \" + numberOfLines);\n\t\t\treturn numberOfLines;\n\t\t}\n\t\telse {\n\t\t\treturn 0;\n\t\t}",
                "is_abstract": "",
                "class_name": "ForkPDFLayoutTextStripper",
                "annotations": []
            },
            {
                "name": "addNewLine",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "TextLine textLine = new TextLine(this.getCurrentPageWidth());\n\t\ttextLineList.add(textLine);\n\t\treturn textLine;",
                "is_abstract": "",
                "class_name": "ForkPDFLayoutTextStripper",
                "annotations": []
            },
            {
                "name": "getPreviousTextPosition",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.previousTextPosition;",
                "is_abstract": "",
                "class_name": "ForkPDFLayoutTextStripper",
                "annotations": []
            },
            {
                "name": "setPreviousTextPosition",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.previousTextPosition = setPreviousTextPosition;",
                "is_abstract": "",
                "class_name": "ForkPDFLayoutTextStripper",
                "annotations": []
            },
            {
                "name": "getCurrentPageWidth",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return (int) Math.round(this.currentPageWidth);",
                "is_abstract": "",
                "class_name": "ForkPDFLayoutTextStripper",
                "annotations": []
            },
            {
                "name": "setCurrentPageWidth",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.currentPageWidth = currentPageWidth;",
                "is_abstract": "",
                "class_name": "ForkPDFLayoutTextStripper",
                "annotations": []
            },
            {
                "name": "getTextLineList",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.textLineList;",
                "is_abstract": "",
                "class_name": "ForkPDFLayoutTextStripper",
                "annotations": []
            },
            {
                "name": "writeCharacterAtIndex",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "character.setIndex(this.computeIndexForCharacter(character));\n\t\tint index = character.getIndex();\n\t\tchar characterValue = character.getCharacterValue();\n\t\tif (this.indexIsInBounds(index) && this.line.charAt(index) == SPACE_CHARACTER) {\n\t\t\tthis.line = this.line.substring(0, index) + characterValue\n\t\t\t\t\t+ this.line.substring(index + 1, this.getLineLength());\n\t\t}",
                "is_abstract": "",
                "class_name": "ForkPDFLayoutTextStripper TextLine",
                "annotations": []
            },
            {
                "name": "getLineLength",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.lineLength;",
                "is_abstract": "",
                "class_name": "ForkPDFLayoutTextStripper TextLine",
                "annotations": []
            },
            {
                "name": "getLine",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return line;",
                "is_abstract": "",
                "class_name": "ForkPDFLayoutTextStripper TextLine",
                "annotations": []
            },
            {
                "name": "computeIndexForCharacter",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "int index = character.getIndex();\n\t\tboolean isCharacterPartOfPreviousWord = character.isCharacterPartOfPreviousWord();\n\t\tboolean isCharacterAtTheBeginningOfNewLine = character.isCharacterAtTheBeginningOfNewLine();\n\t\tboolean isCharacterCloseToPreviousWord = character.isCharacterCloseToPreviousWord();\n\n\t\tif (!this.indexIsInBounds(index)) {\n\t\t\treturn -1;\n\t\t}\n\t\telse {\n\t\t\tif (isCharacterPartOfPreviousWord && !isCharacterAtTheBeginningOfNewLine) {\n\t\t\t\tindex = this.findMinimumIndexWithSpaceCharacterFromIndex(index);\n\t\t\t}\n\t\t\telse if (isCharacterCloseToPreviousWord) {\n\t\t\t\tif (this.line.charAt(index) != SPACE_CHARACTER) {\n\t\t\t\t\tindex = index + 1;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tindex = this.findMinimumIndexWithSpaceCharacterFromIndex(index) + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tindex = this.getNextValidIndex(index, isCharacterPartOfPreviousWord);\n\t\t\treturn index;\n\t\t}",
                "is_abstract": "",
                "class_name": "ForkPDFLayoutTextStripper TextLine",
                "annotations": []
            },
            {
                "name": "isSpaceCharacterAtIndex",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.line.charAt(index) != SPACE_CHARACTER;",
                "is_abstract": "",
                "class_name": "ForkPDFLayoutTextStripper TextLine",
                "annotations": []
            },
            {
                "name": "isNewIndexGreaterThanLastIndex",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "int lastIndex = this.getLastIndex();\n\t\treturn (index > lastIndex);",
                "is_abstract": "",
                "class_name": "ForkPDFLayoutTextStripper TextLine",
                "annotations": []
            },
            {
                "name": "getNextValidIndex",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "int nextValidIndex = index;\n\t\tint lastIndex = this.getLastIndex();\n\t\tif (!this.isNewIndexGreaterThanLastIndex(index)) {\n\t\t\tnextValidIndex = lastIndex + 1;\n\t\t}\n\t\tif (!isCharacterPartOfPreviousWord && this.isSpaceCharacterAtIndex(index - 1)) {\n\t\t\tnextValidIndex = nextValidIndex + 1;\n\t\t}\n\t\tthis.setLastIndex(nextValidIndex);\n\t\treturn nextValidIndex;",
                "is_abstract": "",
                "class_name": "ForkPDFLayoutTextStripper TextLine",
                "annotations": []
            },
            {
                "name": "findMinimumIndexWithSpaceCharacterFromIndex",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "int newIndex = index;\n\t\twhile (newIndex >= 0 && this.line.charAt(newIndex) == SPACE_CHARACTER) {\n\t\t\tnewIndex = newIndex - 1;\n\t\t}\n\t\treturn newIndex + 1;",
                "is_abstract": "",
                "class_name": "ForkPDFLayoutTextStripper TextLine",
                "annotations": []
            },
            {
                "name": "indexIsInBounds",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return (index >= 0 && index < this.lineLength);",
                "is_abstract": "",
                "class_name": "ForkPDFLayoutTextStripper TextLine",
                "annotations": []
            },
            {
                "name": "completeLineWithSpaces",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "for (int i = 0; i < this.getLineLength(); ++i) {\n\t\t\tline += SPACE_CHARACTER;\n\t\t}",
                "is_abstract": "",
                "class_name": "ForkPDFLayoutTextStripper TextLine",
                "annotations": []
            },
            {
                "name": "getLastIndex",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.lastIndex;",
                "is_abstract": "",
                "class_name": "ForkPDFLayoutTextStripper TextLine",
                "annotations": []
            },
            {
                "name": "setLastIndex",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.lastIndex = lastIndex;",
                "is_abstract": "",
                "class_name": "ForkPDFLayoutTextStripper TextLine",
                "annotations": []
            },
            {
                "name": "getCharacterValue",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.characterValue;",
                "is_abstract": "",
                "class_name": "ForkPDFLayoutTextStripper TextLine Character",
                "annotations": []
            },
            {
                "name": "getIndex",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.index;",
                "is_abstract": "",
                "class_name": "ForkPDFLayoutTextStripper TextLine Character",
                "annotations": []
            },
            {
                "name": "setIndex",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.index = index;",
                "is_abstract": "",
                "class_name": "ForkPDFLayoutTextStripper TextLine Character",
                "annotations": []
            },
            {
                "name": "isCharacterPartOfPreviousWord",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.isCharacterPartOfPreviousWord;",
                "is_abstract": "",
                "class_name": "ForkPDFLayoutTextStripper TextLine Character",
                "annotations": []
            },
            {
                "name": "isFirstCharacterOfAWord",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.isFirstCharacterOfAWord;",
                "is_abstract": "",
                "class_name": "ForkPDFLayoutTextStripper TextLine Character",
                "annotations": []
            },
            {
                "name": "isCharacterAtTheBeginningOfNewLine",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.isCharacterAtTheBeginningOfNewLine;",
                "is_abstract": "",
                "class_name": "ForkPDFLayoutTextStripper TextLine Character",
                "annotations": []
            },
            {
                "name": "isCharacterCloseToPreviousWord",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return this.isCharacterCloseToPreviousWord;",
                "is_abstract": "",
                "class_name": "ForkPDFLayoutTextStripper TextLine Character",
                "annotations": []
            },
            {
                "name": "toString",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String toString = \"\";\n\t\ttoString += index;\n\t\ttoString += \" \";\n\t\ttoString += characterValue;\n\t\ttoString += \" isCharacterPartOfPreviousWord=\" + isCharacterPartOfPreviousWord;\n\t\ttoString += \" isFirstCharacterOfAWord=\" + isFirstCharacterOfAWord;\n\t\ttoString += \" isCharacterAtTheBeginningOfNewLine=\" + isCharacterAtTheBeginningOfNewLine;\n\t\ttoString += \" isCharacterPartOfASentence=\" + isCharacterCloseToPreviousWord;\n\t\ttoString += \" isCharacterCloseToPreviousWord=\" + isCharacterCloseToPreviousWord;\n\t\treturn toString;",
                "is_abstract": "",
                "class_name": "ForkPDFLayoutTextStripper TextLine Character",
                "annotations": []
            },
            {
                "name": "createCharacterFromTextPosition",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "this.setPreviousTextPosition(previousTextPosition);\n\t\tthis.isCharacterPartOfPreviousWord = this.isCharacterPartOfPreviousWord(textPosition);\n\t\tthis.isFirstCharacterOfAWord = this.isFirstCharacterOfAWord(textPosition);\n\t\tthis.isCharacterAtTheBeginningOfNewLine = this.isCharacterAtTheBeginningOfNewLine(textPosition);\n\t\tthis.isCharacterCloseToPreviousWord = this.isCharacterCloseToPreviousWord(textPosition);\n\t\tchar character = this.getCharacterFromTextPosition(textPosition);\n\t\tint index = (int) textPosition.getX() / ForkPDFLayoutTextStripper.OUTPUT_SPACE_CHARACTER_WIDTH_IN_PT;\n\t\treturn new Character(character, index, isCharacterPartOfPreviousWord, isFirstCharacterOfAWord,\n\t\t\t\tisCharacterAtTheBeginningOfNewLine, isCharacterCloseToPreviousWord);",
                "is_abstract": "",
                "class_name": "ForkPDFLayoutTextStripper TextLine Character CharacterFactory",
                "annotations": []
            },
            {
                "name": "numberOfSpacesBetweenTwoCharacters",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "double previousTextXPosition = textPosition1.getX();\n\t\tdouble previousTextWidth = textPosition1.getWidth();\n\t\tdouble previousTextEndXPosition = (previousTextXPosition + previousTextWidth);\n\t\tdouble numberOfSpaces = Math.abs(Math.round(textPosition2.getX() - previousTextEndXPosition));\n\t\treturn numberOfSpaces;",
                "is_abstract": "",
                "class_name": "ForkPDFLayoutTextStripper TextLine Character CharacterFactory",
                "annotations": []
            },
            {
                "name": "getCharacterFromTextPosition",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "String string = textPosition.getUnicode();\n\t\tchar character = string.charAt(0);\n\t\treturn character;",
                "is_abstract": "",
                "class_name": "ForkPDFLayoutTextStripper TextLine Character CharacterFactory",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/document-readers/pdf-reader/src/main/java/org/springframework/ai/reader/pdf/layout/PDFLayoutTextStripperByArea.java",
        "class_names": [
            "PDFLayoutTextStripperByArea"
        ],
        "imports": "import java.util.ArrayList;\nimport java.util.List;\nimport java.awt.geom.Rectangle2D;\nimport org.apache.pdfbox.pdmodel.PDPage;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.io.StringWriter;\nimport org.apache.pdfbox.text.TextPosition;\nimport java.io.IOException;",
        "package_import_paths": {
            "org.springframework.ai.reader.pdf.layout.PDFLayoutTextStripperByAr": "org.springframework.ai.reader.pdf.layout.PDFLayoutTextStripperByAr",
            "org.springframework.ai.reader.pdf.layout.setShouldSeparateByBeads": "org.springframework.ai.reader.pdf.layout.setShouldSeparateByBeads",
            "org.springframework.ai.reader.pdf.layout.addRegion": "org.springframework.ai.reader.pdf.layout.addRegion",
            "org.springframework.ai.reader.pdf.layout.removeRegion": "org.springframework.ai.reader.pdf.layout.removeRegion",
            "org.springframework.ai.reader.pdf.layout.getRegions": "org.springframework.ai.reader.pdf.layout.getRegions",
            "org.springframework.ai.reader.pdf.layout.getTextForRegion": "org.springframework.ai.reader.pdf.layout.getTextForRegion",
            "org.springframework.ai.reader.pdf.layout.extractRegions": "org.springframework.ai.reader.pdf.layout.extractRegions",
            "org.springframework.ai.reader.pdf.layout.processTextPosition": "org.springframework.ai.reader.pdf.layout.processTextPosition",
            "org.springframework.ai.reader.pdf.layout.writeP": "org.springframework.ai.reader.pdf.layout.writeP",
            "org.springframework.ai.reader.pdf.layout.regions": "org.springframework.ai.reader.pdf.layout.regions",
            "org.springframework.ai.reader.pdf.layout.regionAr": "org.springframework.ai.reader.pdf.layout.regionAr",
            "org.springframework.ai.reader.pdf.layout.regionCharacterList": "org.springframework.ai.reader.pdf.layout.regionCharacterList",
            "org.springframework.ai.reader.pdf.layout.regionText": "org.springframework.ai.reader.pdf.layout.regionText"
        },
        "package": "package org.springframework.ai.reader.pdf.layout;",
        "property_declarations": [
            "private final List<String> regions = new ArrayList<String>();",
            "private final Map<String, ArrayList<List<TextPosition>>> regionCharacterList = new HashMap<String, ArrayList<List<TextPosition>>>();",
            "private final Map<String, StringWriter> regionText = new HashMap<String, StringWriter>();",
            "private final Map<String, Rectangle2D> regionArea = new HashMap<String, Rectangle2D>();"
        ],
        "functions": [
            {
                "name": "setShouldSeparateByBeads",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "",
                "is_abstract": "",
                "class_name": "PDFLayoutTextStripperByArea",
                "annotations": []
            },
            {
                "name": "addRegion",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "regions.add(regionName);\n\t\tregionArea.put(regionName, rect);",
                "is_abstract": "",
                "class_name": "PDFLayoutTextStripperByArea",
                "annotations": []
            },
            {
                "name": "removeRegion",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "regions.remove(regionName);\n\t\tregionArea.remove(regionName);",
                "is_abstract": "",
                "class_name": "PDFLayoutTextStripperByArea",
                "annotations": []
            },
            {
                "name": "getRegions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "return regions;",
                "is_abstract": "",
                "class_name": "PDFLayoutTextStripperByArea",
                "annotations": []
            },
            {
                "name": "getTextForRegion",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "StringWriter text = regionText.get(regionName);\n\t\treturn text.toString();",
                "is_abstract": "",
                "class_name": "PDFLayoutTextStripperByArea",
                "annotations": []
            },
            {
                "name": "extractRegions",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "for (String regionName : regions) {\n\t\t\tsetStartPage(getCurrentPageNo());\n\t\t\tsetEndPage(getCurrentPageNo());\n\t\t\t// reset the stored text for the region so this class can be reused.\n\t\t\tArrayList<List<TextPosition>> regionCharactersByArticle = new ArrayList<List<TextPosition>>();\n\t\t\tregionCharactersByArticle.add(new ArrayList<TextPosition>());\n\t\t\tregionCharacterList.put(regionName, regionCharactersByArticle);\n\t\t\tregionText.put(regionName, new StringWriter());\n\t\t}\n\n\t\tif (page.hasContents()) {\n\t\t\tprocessPage(page);\n\t\t}",
                "is_abstract": "",
                "class_name": "PDFLayoutTextStripperByArea",
                "annotations": []
            },
            {
                "name": "processTextPosition",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "for (Map.Entry<String, Rectangle2D> regionAreaEntry : regionArea.entrySet()) {\n\t\t\tRectangle2D rect = regionAreaEntry.getValue();\n\t\t\tif (rect.contains(text.getX(), text.getY())) {\n\t\t\t\tcharactersByArticle = regionCharacterList.get(regionAreaEntry.getKey());\n\t\t\t\tsuper.processTextPosition(text);\n\t\t\t}\n\t\t}",
                "is_abstract": "",
                "class_name": "PDFLayoutTextStripperByArea",
                "annotations": []
            },
            {
                "name": "writePage",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "for (String region : regionArea.keySet()) {\n\t\t\tcharactersByArticle = regionCharacterList.get(region);\n\t\t\toutput = regionText.get(region);\n\t\t\tsuper.writePage();\n\t\t}",
                "is_abstract": "",
                "class_name": "PDFLayoutTextStripperByArea",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/document-readers/pdf-reader/src/main/java/org/springframework/ai/reader/pdf/aot/PdfReaderRuntimeHints.java",
        "class_names": [
            "PdfReaderRuntimeHints"
        ],
        "imports": "import org.springframework.core.io.support.PathMatchingResourcePatternResolver;\nimport org.springframework.aot.hint.RuntimeHints;\nimport org.springframework.aot.hint.RuntimeHintsRegistrar;\nimport java.util.Set;\nimport java.io.IOException;",
        "package_import_paths": {
            "org.springframework.ai.reader.pdf.aot.PdfReaderRuntimeHints": "org.springframework.ai.reader.pdf.aot.PdfReaderRuntimeHints",
            "org.springframework.ai.reader.pdf.aot.registerHints": "org.springframework.ai.reader.pdf.aot.registerHints"
        },
        "package": "package org.springframework.ai.reader.pdf.aot;",
        "property_declarations": [],
        "functions": [
            {
                "name": "registerHints",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "try {\n\n\t\t\tvar resolver = new PathMatchingResourcePatternResolver();\n\n\t\t\tvar patterns = Set.of(\"/org/apache/pdfbox/resources/glyphlist/zapfdingbats.txt\",\n\t\t\t\t\t\"/org/apache/pdfbox/resources/glyphlist/glyphlist.txt\", \"/org/apache/fontbox/cmap/**\",\n\t\t\t\t\t\"/org/apache/pdfbox/resources/afm/**\", \"/org/apache/pdfbox/resources/glyphlist/**\",\n\t\t\t\t\t\"/org/apache/pdfbox/resources/icc/**\", \"/org/apache/pdfbox/resources/text/**\",\n\t\t\t\t\t\"/org/apache/pdfbox/resources/ttf/**\", \"/org/apache/pdfbox/resources/version.properties\");\n\n\t\t\tfor (var pattern : patterns)\n\t\t\t\tfor (var resourceMatch : resolver.getResources(pattern))\n\t\t\t\t\thints.resources().registerResource(resourceMatch);\n\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}",
                "is_abstract": "",
                "class_name": "PdfReaderRuntimeHints",
                "annotations": []
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/document-readers/tika-reader/src/test/java/org/springframework/ai/reader/tika/TikaDocumentReaderTests.java",
        "class_names": [
            "TikaDocumentReaderTests"
        ],
        "imports": "import org.junit.jupiter.params.provider.CsvSource;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport static org.assertj.core.api.Assertions.assertThat;",
        "package_import_paths": {
            "org.springframework.ai.reader.tika.TikaDocumentReaderTests": "org.springframework.ai.reader.tika.TikaDocumentReaderTests",
            "org.springframework.ai.reader.tika.CsvSour": "org.springframework.ai.reader.tika.CsvSour"
        },
        "package": "package org.springframework.ai.reader.tika;",
        "property_declarations": [],
        "functions": [
            {
                "name": "CsvSource",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "\"classpath:/word-sample.docx,word-sample.docx,Two kinds of links are possible, those that refer to an external website\",\n\t\t\t\"classpath:/word-sample.doc,word-sample.doc,The limited permissions granted above are perpetual and will not be revoked by OASIS\",\n\t\t\t\"classpath:/sample2.pdf,sample2.pdf,Consult doc/pdftex/manual.pdf from your tetex distribution for more\",\n\t\t\t\"classpath:/sample.ppt,sample.ppt,Sed ipsum tortor, fringilla a consectetur eget, cursus posuere sem.\",\n\t\t\t\"classpath:/sample.pptx,sample.pptx,Lorem ipsum dolor sit amet, consectetur adipiscing elit.\",\n\t\t\t\"https://docs.spring.io/spring-ai/reference/,https://docs.spring.io/spring-ai/reference/,project aims to streamline the development of applications\" })\n\tpublic void testDocx(String resourceUri, String resourceName, String contentSnipped) {\n\n\t\tvar docs = new TikaDocumentReader(resourceUri).get();\n\t\tassertThat(docs).hasSize(1);\n\n\t\tvar doc = docs.get(0);\n\n\t\tassertThat(doc.getMetadata()).containsKeys(TikaDocumentReader.METADATA_SOURCE);\n\t\tassertThat(doc.getMetadata().get(TikaDocumentReader.METADATA_SOURCE)).isEqualTo(resourceName);\n\t\tassertThat(doc.getContent()).contains(contentSnipped);",
                "is_abstract": "",
                "class_name": "TikaDocumentReaderTests",
                "annotations": [
                    "@CsvSource({\n\t\t\t\"classpath:/word-sample.docx,word-sample.docx,Two kinds of links are possible, those that refer to an external website\",\n\t\t\t\"classpath:/word-sample.doc,word-sample.doc,The limited permissions granted above are perpetual and will not be revoked by OASIS\",\n\t\t\t\"classpath:/sample2.pdf,sample2.pdf,Consult doc/pdftex/manual.pdf from your tetex distribution for more\",\n\t\t\t\"classpath:/sample.ppt,sample.ppt,Sed ipsum tortor, fringilla a consectetur eget, cursus posuere sem.\",\n\t\t\t\"classpath:/sample.pptx,sample.pptx,Lorem ipsum dolor sit amet, consectetur adipiscing elit.\",\n\t\t\t\"https://docs.spring.io/spring-ai/reference/,https://docs.spring.io/spring-ai/reference/,project aims to streamline the development of applications\" })"
                ]
            }
        ]
    },
    {
        "file_path": "/Users/z98459/Desktop/spring-ai/document-readers/tika-reader/src/main/java/org/springframework/ai/reader/tika/TikaDocumentReader.java",
        "class_names": [
            "TikaDocumentReader"
        ],
        "imports": "import java.util.List;\nimport org.apache.tika.metadata.Metadata;\nimport org.xml.sax.ContentHandler;\nimport org.springframework.ai.document.DocumentReader;\nimport org.apache.tika.parser.ParseContext;\nimport org.apache.tika.sax.BodyContentHandler;\nimport org.springframework.ai.document.Document;\nimport org.springframework.ai.reader.ExtractedTextFormatter;\nimport java.util.Objects;\nimport org.springframework.core.io.Resource;\nimport org.apache.tika.parser.AutoDetectParser;\nimport org.springframework.core.io.DefaultResourceLoader;\nimport org.springframework.util.StringUtils;\nimport java.io.InputStream;\nimport java.io.IOException;",
        "package_import_paths": {
            "org.springframework.ai.reader.tika.TikaDocumentReader": "org.springframework.ai.reader.tika.TikaDocumentReader",
            "org.springframework.ai.reader.tika.get": "org.springframework.ai.reader.tika.get",
            "org.springframework.ai.reader.tika.toDocument": "org.springframework.ai.reader.tika.toDocument",
            "org.springframework.ai.reader.tika.resourceNam": "org.springframework.ai.reader.tika.resourceNam",
            "org.springframework.ai.reader.tika.METADATA_SOURCE": "org.springframework.ai.reader.tika.METADATA_SOURCE",
            "org.springframework.ai.reader.tika.parser": "org.springframework.ai.reader.tika.parser",
            "org.springframework.ai.reader.tika.handler": "org.springframework.ai.reader.tika.handler",
            "org.springframework.ai.reader.tika.metadat": "org.springframework.ai.reader.tika.metadat",
            "org.springframework.ai.reader.tika.context": "org.springframework.ai.reader.tika.context",
            "org.springframework.ai.reader.tika.resour": "org.springframework.ai.reader.tika.resour",
            "org.springframework.ai.reader.tika.textFormatter": "org.springframework.ai.reader.tika.textFormatter"
        },
        "package": "package org.springframework.ai.reader.tika;",
        "property_declarations": [
            "private final ExtractedTextFormatter textFormatter;",
            "private final ParseContext context;",
            "private final AutoDetectParser parser;",
            "private final Resource resource;",
            "public static final String METADATA_SOURCE = \"source\";",
            "private final Metadata metadata;",
            "private final ContentHandler handler;"
        ],
        "functions": [
            {
                "name": "get",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "try (InputStream stream = this.resource.getInputStream()) {\n\t\t\tthis.parser.parse(stream, this.handler, this.metadata, this.context);\n\t\t\treturn List.of(toDocument(this.handler.toString()));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}",
                "is_abstract": "",
                "class_name": "TikaDocumentReader",
                "annotations": []
            },
            {
                "name": "toDocument",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "docText = Objects.requireNonNullElse(docText, \"\");\n\t\tdocText = this.textFormatter.format(docText);\n\t\tDocument doc = new Document(docText);\n\t\tdoc.getMetadata().put(METADATA_SOURCE, resourceName());\n\t\treturn doc;",
                "is_abstract": "",
                "class_name": "TikaDocumentReader",
                "annotations": []
            },
            {
                "name": "resourceName",
                "parameters": [
                    ""
                ],
                "return_type": "void",
                "body": "try {\n\t\t\tvar resourceName = this.resource.getFilename();\n\t\t\tif (!StringUtils.hasText(resourceName)) {\n\t\t\t\tresourceName = this.resource.getURI().toString();\n\t\t\t}\n\t\t\treturn resourceName;\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\treturn String.format(\"Invalid source URI: %s\", e.getMessage());\n\t\t}",
                "is_abstract": "",
                "class_name": "TikaDocumentReader",
                "annotations": []
            }
        ]
    }
]